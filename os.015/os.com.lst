     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.015
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to add code to initialize the ethernet adapter.
     8                                  ;
     9                                  ;       Revised:        December 25, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Logical tabs are set after each eight columns.
    46                                  ;                       Tabs are simulated using SPACE characters.
    47                                  ;                       For comments that span an entire line, comment text begins in column 9.
    48                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    49                                  ;                       Assembly operands begin in column 33.
    50                                  ;                       Inline comments begin in column 81.
    51                                  ;                       Lines should not extend beyond column 120.
    52                                  ;
    53                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    54                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    55                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    56                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    57                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    58                                  ;                       ouput buffers, respectively.
    59                                  ;
    60                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    61                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    62                                  ;
    63                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    64                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    65                                  ;                       Register names in comments are in upper case (EAX, EDI).
    66                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    67                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    68                                  ;                       register contents on entry and exit.
    69                                  ;
    70                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    71                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    72                                  ;                       The 2nd letter of the constant label indicates the storage type.
    73                                  ;
    74                                  ;                       cq......        constant quad-word (dq)
    75                                  ;                       cd......        constant double-word (dd)
    76                                  ;                       cw......        constant word (dw)
    77                                  ;                       cb......        constant byte (db)
    78                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    79                                  ;
    80                                  ;       Instructions:   32-bit instructions are generally favored.
    81                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    82                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    83                                  ;
    84                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    85                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    86                                  ;
    87                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    88                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    89                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    90                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    91                                  ;                       Octal literal values are avoided.
    92                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    93                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    94                                  ;
    95                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    96                                  ;                       Macro names describe an action and so DO begin with a verb.
    97                                  ;
    98                                  ;       Memory Use:     Operating system memory allocation is minimized.
    99                                  ;                       Buffers are kept to as small a size as practicable.
   100                                  ;                       Data and code intermingling is avoided wherever possible.
   101                                  ;
   102                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   103                                  ;                       Register names in source code are in lower case (eax, edx).
   104                                  ;
   105                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   106                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   107                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   108                                  ;
   109                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   110                                  ;                       Routine names begin with a verb (Get, Read, Load).
   111                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   112                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   113                                  ;                       function but begin with a leading underscore (_) character.
   114                                  ;
   115                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   116                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   117                                  ;
   118                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   119                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   120                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   121                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   122                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   123                                  ;
   124                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   125                                  ;                       The 2nd letter of the variable label indicates the storage type.
   126                                  ;
   127                                  ;                       wq......        variable quad-word (resq)
   128                                  ;                       wd......        variable double-word (resd)
   129                                  ;                       ww......        variable word (resw)
   130                                  ;                       wb......        variable byte (resb)
   131                                  ;                       ws......        writable structure
   132                                  ;
   133                                  ;-----------------------------------------------------------------------------------------------------------------------
   134                                  ;=======================================================================================================================
   135                                  ;
   136                                  ;       Equates
   137                                  ;
   138                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   139                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   140                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   141                                  ;       sets. Equates here are defined in the following groupings:
   142                                  ;
   143                                  ;       Hardware-Defined Values
   144                                  ;
   145                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   146                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   147                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   148                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   149                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   150                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   161                                  ;
   162                                  ;       Operating System Values
   163                                  ;
   164                                  ;       EBOOT...        Boot sector and loader values
   165                                  ;       ECON...         Console values (dimensions and attributes)
   166                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   167                                  ;       EHWF...         Hardware flags
   168                                  ;       EKEYF...        Keyboard status flags
   169                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   170                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   171                                  ;       EMEM...         Memory Management values
   172                                  ;       EMSG...         Message identifers
   173                                  ;
   174                                  ;=======================================================================================================================
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       Hardware-Defined Values
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;
   182                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   183                                  ;
   184                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   185                                  ;       for CGA, EGA, VGA and compatible video modes.
   186                                  ;
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   189                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   190                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   191                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  ;
   194                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   195                                  ;
   196                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   197                                  ;
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   200                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   201                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   202                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   203                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  ;
   206                                  ;       Intel 8254X PCI/PCI-X Gigibit Ethernet Controller
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EI825REGCTRL            equ     00000h                                          ;control register
   210                                  EI825REGICR             equ     000C0h                                          ;interrupt cause read
   211                                  EI825REGITR             equ     000C4h                                          ;interrupt throttling register
   212                                  EI825REGIMS             equ     000D0h                                          ;interrupt mask set/read
   213                                  EI825REGRCTL            equ     00100h                                          ;receive control register
   214                                  EI825REGRDBAL           equ     02800h                                          ;receive descriptor base address lo
   215                                  EI825REGRDBAH           equ     02804h                                          ;receive descriptor base address hi
   216                                  EI825REGRDLEN           equ     02808h                                          ;receive descriptor length register
   217                                  EI825REGRDH             equ     02810h                                          ;receive descriptor head register
   218                                  EI825REGRDT             equ     02818h                                          ;receive descriptor tail register
   219                                  EI825REGTCTL            equ     00400h                                          ;transmit control register
   220                                  EI825REGTDBAL           equ     03800h                                          ;transmit descriptor base address lo
   221                                  EI825REGTDBAH           equ     03804h                                          ;transmit descriptor base address hi
   222                                  EI825REGTDLEN           equ     03808h                                          ;transmit descriptor length register
   223                                  EI825REGTDH             equ     03810h                                          ;transmit descriptor head register
   224                                  EI825REGTDT             equ     03818h                                          ;transmit descriptor tail register
   225                                  EI825REGMTA             equ     05200h                                          ;multicast table array registers
   226                                  EI825REGRAL             equ     05400h                                          ;receive address lo
   227                                  EI825REGRAH             equ     05404h                                          ;receive address hi
   228                                  EI825CTRLSLU            equ     040h                                            ;set link up
   229                                  EI825ICRLSC             equ     004h                                            ;link status change
   230                                  EI825ICRRXDMT0          equ     010h                                            ;receive descr min threshold reached
   231                                  EI825ICRRXO             equ     040h                                            ;receiver overrun
   232                                  EI825ICRRXT0            equ     080h                                            ;receiver timer interrupt
   233                                  EI825RCTLEN             equ     00002h                                          ;receive enable
   234                                  EI825RCTLSBP            equ     00004h                                          ;store bad packets
   235                                  EI825RCTLUPE            equ     00008h                                          ;unicast promiscuous enabled
   236                                  EI825RCTLMPE            equ     00010h                                          ;multicast promiscuous enabled
   237                                  EI825RCTLLPE            equ     00020h                                          ;long package reception enable
   238                                  EI825RCTLBAM            equ     08000h                                          ;broadcast accept mode
   239                                  EI825RCTLBSZ1024        equ     000010000h                                      ;1024-bit buffer size
   240                                  EI825TCTLEN             equ     002h                                            ;transmit enable
   241                                  EI825TCTLPSP            equ     008h                                            ;pad short packets
   242                                  ;-----------------------------------------------------------------------------------------------------------------------
   243                                  ;
   244                                  ;       8042 Keyboard Controller                                                EKEYB...
   245                                  ;
   246                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   247                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   248                                  ;
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  EKEYBPORTDATA           equ     060h                                            ;data port
   251                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   252                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   253                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   254                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   255                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   256                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   257                                                                                                                  ;---------------------------------------
   258                                                                                                                  ;       Keyboard Scan Codes
   259                                                                                                                  ;---------------------------------------
   260                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   261                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   262                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   263                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   264                                  EKEYBSLASH              equ     035h                                            ;slash
   265                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   266                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   267                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   268                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   269                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   270                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   271                                  EKEYBUP                 equ     080h                                            ;up
   272                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   273                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   274                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   275                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   276                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   277                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   278                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   279                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   280                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   281                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   282                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   283                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  ;
   286                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   287                                  ;
   288                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   289                                  ;       external devices and signals a hardware interrupt to the CPU.
   290                                  ;
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   293                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   294                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   295                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   296                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       8253 Programmable Interval Timer                                        EPIT...
   300                                  ;
   301                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   302                                  ;       approximately 18.2 times per second.
   303                                  ;
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;
   308                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   309                                  ;
   310                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   311                                  ;
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  ERTCREGPORT             equ     070h                                            ;register select port
   314                                  ERTCDATAPORT            equ     071h                                            ;data port
   315                                  ERTCSECONDREG           equ     000h                                            ;second
   316                                  ERTCMINUTEREG           equ     002h                                            ;minute
   317                                  ERTCHOURREG             equ     004h                                            ;hour
   318                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   319                                  ERTCDAYREG              equ     007h                                            ;day
   320                                  ERTCMONTHREG            equ     008h                                            ;month
   321                                  ERTCYEARREG             equ     009h                                            ;year of the century
   322                                  ERTCSTATUSREG           equ     00bh                                            ;status
   323                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   324                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   325                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   326                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   327                                  ERTCCENTURYREG          equ     032h                                            ;century
   328                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;
   331                                  ;       x86 CPU Architecture                                                    ;EX86...
   332                                  ;
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  ;
   337                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   338                                  ;
   339                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   340                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   341                                  ;
   342                                  ;       0.......        Segment is not present in memory (triggers int 11)
   343                                  ;       1.......        Segment is present in memory
   344                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   345                                  ;       ...0....        Segment is a system segment
   346                                  ;       ...00010                Local Descriptor Table
   347                                  ;       ...00101                Task Gate
   348                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   349                                  ;       ...01100                Call Gate (386)
   350                                  ;       ...01110                Interrupt Gate (386)
   351                                  ;       ...01111                Trap Gate (386)
   352                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   353                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   354                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   358                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   359                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   360                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   361                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   362                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   363                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   364                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   365                                  ;-----------------------------------------------------------------------------------------------------------------------
   366                                  ;
   367                                  ;       Firmware-Defined Values
   368                                  ;
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ;
   372                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   373                                  ;
   374                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   375                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   376                                  ;
   377                                  ;-----------------------------------------------------------------------------------------------------------------------
   378                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   379                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   380                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   381                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   382                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   383                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   384                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   385                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   386                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   387                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   388                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   389                                  ;-----------------------------------------------------------------------------------------------------------------------
   390                                  ;
   391                                  ;       Standards-Based Values
   392                                  ;
   393                                  ;-----------------------------------------------------------------------------------------------------------------------
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  ;
   396                                  ;       ASCII                                                                   EASCII...
   397                                  ;
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   400                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   401                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   402                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   403                                  EASCIISPACE             equ     020h                                            ;space
   404                                  EASCIIDASH              equ     02Dh                                            ;dash or minus
   405                                  EASCIIPERIOD            equ     02Eh                                            ;period
   406                                  EASCIIUPPERA            equ     041h                                            ;'A'
   407                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   408                                  EASCIILOWERA            equ     061h                                            ;'a'
   409                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   410                                  EASCIITILDE             equ     07Eh                                            ;'~'
   411                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   412                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   413                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   414                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   415                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   416                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   417                                  EASCIICASE              equ     00100000b                                       ;case bit
   418                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;
   421                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   422                                  ;
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   425                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   426                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   427                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   428                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   429                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   430                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   431                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   432                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   433                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   434                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   435                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   436                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   437                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   438                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   439                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   440                                  ;-----------------------------------------------------------------------------------------------------------------------
   441                                  ;
   442                                  ;       Operating System Values
   443                                  ;
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ;
   447                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   448                                  ;
   449                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   450                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   451                                  ;
   452                                  ;-----------------------------------------------------------------------------------------------------------------------
   453                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   454                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   455                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   456                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   457                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   458                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   459                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   460                                  ;-----------------------------------------------------------------------------------------------------------------------
   461                                  ;       Console Constants                                                       ECON...
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ECONCOLS                equ     80                                              ;columns per row
   464                                  ECONROWS                equ     24                                              ;console rows
   465                                  ECONOIAROW              equ     24                                              ;operator information area row
   466                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   467                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   468                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   469                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   470                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   475                                  EGDTCGA                 equ     020h                                            ;cga video selector
   476                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   477                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   478                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   479                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   480                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   481                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  ;       Hardware Flags                                                          EHWF...
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   486                                  ;-----------------------------------------------------------------------------------------------------------------------
   487                                  ;       Keyboard Flags                                                          EKEYF...
   488                                  ;-----------------------------------------------------------------------------------------------------------------------
   489                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   490                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   491                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   492                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   493                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   494                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   495                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   496                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   497                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   498                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   499                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   500                                  ;-----------------------------------------------------------------------------------------------------------------------
   501                                  ;       Kernel Constants                                                        EKRN...
   502                                  ;-----------------------------------------------------------------------------------------------------------------------
   503                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   504                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   505                                  EKRNCODELEN             equ     07000h                                          ;kernel code size (1000h to 8000h)
   506                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   507                                  EKRNHEAPSIZE            equ     020000000h                                      ;kernel heap size max (512MB)
   508                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   509                                  EKRNMINRAMKB            equ     ((EKRNCODEBASE+EKRNCODELEN)/1024)               ;kernel minimum RAM KB required
   510                                  EKRNMINEXTKB            equ     (31*1024)                                       ;kernel minimum extended RAM KB required
   511                                  ;-----------------------------------------------------------------------------------------------------------------------
   512                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516                                  ;       Memory Management Constants                                             EMEM...
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   519                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   520                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   521                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   522                                  ;-----------------------------------------------------------------------------------------------------------------------
   523                                  ;       Message Identifiers                                                     EMSG...
   524                                  ;-----------------------------------------------------------------------------------------------------------------------
   525                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   526                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   527                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   528                                  ;-----------------------------------------------------------------------------------------------------------------------
   529                                  ;       Networking Identifiers                                                  ENET...
   530                                  ;-----------------------------------------------------------------------------------------------------------------------
   531                                  ENETRXBUFSIZ            equ     1024                                            ;receive buffer size
   532                                  ENETRXDESCCT            equ     16                                              ;receive descritor count
   533                                  ENETTXDESCCT            equ     16                                              ;transmit descriptor count
   534                                  ;=======================================================================================================================
   535                                  ;
   536                                  ;       Structures
   537                                  ;
   538                                  ;=======================================================================================================================
   539                                  ;-----------------------------------------------------------------------------------------------------------------------
   540                                  ;
   541                                  ;       DATETIME
   542                                  ;
   543                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   544                                  ;
   545                                  ;-----------------------------------------------------------------------------------------------------------------------
   546                                  struc                   DATETIME
   547 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   548 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   549 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   550 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   551 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   552 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   553 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   554 00000007 <res 00000001>          .century                resb    1                                               ;century
   555                                  EDATETIMELEN            equ     ($-.second)
   556                                  endstruc
   557                                  ;-----------------------------------------------------------------------------------------------------------------------
   558                                  ;
   559                                  ;       ETHER
   560                                  ;
   561                                  ;       The ETHER structure defines an Ethernet adapter context.
   562                                  ;
   563                                  ;-----------------------------------------------------------------------------------------------------------------------
   564                                  struc                   ETHER
   565 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   566                                  .devicevendor           equ     $                                               ;device id | vendor id
   567 00000004 <res 00000002>          .vendor                 resw    1                                               ;vendor id
   568 00000006 <res 00000002>          .device                 resw    1                                               ;device id
   569                                  .statuscommand          equ     $                                               ;status reg | command reg
   570 00000008 <res 00000002>          .commandreg             resw    1                                               ;command register
   571 0000000A <res 00000002>          .statusreg              resw    1                                               ;status register
   572 0000000C <res 00000004>          .classrev               resd    1                                               ;class code | revision id
   573 00000010 <res 00000004>          .misc                   resd    1                                               ;BIST | Hdr | latency | cache
   574 00000014 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address (bar 0)
   575 00000018 <res 00000004>          .flash                  resd    1                                               ;flash base address (bar 1)
   576 0000001C <res 00000004>          .port                   resd    1                                               ;i/o port (base 2)
   577 00000020 <res 00000004>          .rxblock                resd    1                                               ;allocated rx memory block
   578 00000024 <res 00000004>          .rxbase                 resd    1                                               ;16-byte aligned
   579 00000028 <res 00000004>          .rxtail                 resd    1
   580 0000002C <res 00000004>          .rxcount                resd    1
   581 00000030 <res 00000004>          .txblock                resd    1                                               ;allocated tx memory block
   582 00000034 <res 00000004>          .txbase                 resd    1                                               ;16-byte aligned
   583 00000038 <res 00000004>          .txtail                 resd    1
   584 0000003C <res 00000006>          .mac                    resb    6                                               ;mac address
   585 00000042 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   586                                  EETHERLEN               equ     ($-.selector)
   587                                  endstruc
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  ;
   590                                  ;       I825RXDESC
   591                                  ;
   592                                  ;       The Intel 8254X PCI/PCI-X Gigabit Ethernet controller receive descriptor.
   593                                  ;
   594                                  ;-----------------------------------------------------------------------------------------------------------------------
   595                                  struc                   I825RXDESC
   596                                  .address                equ     $                                               ;64-bit address
   597 00000000 <res 00000004>          .addresslo              resd    1                                               ;address lo
   598 00000004 <res 00000004>          .addresshi              resd    1                                               ;address hi
   599 00000008 <res 00000002>          .length                 resw    1                                               ;length
   600 0000000A <res 00000002>          .checksum               resw    1                                               ;checksum
   601 0000000C <res 00000001>          .status                 resb    1                                               ;status
   602 0000000D <res 00000001>          .errors                 resb    1                                               ;errors
   603 0000000E <res 00000002>          .special                resw    1                                               ;special
   604                                  EI825RXDESCLEN          equ     ($-.address)
   605                                  endstruc
   606                                  ;-----------------------------------------------------------------------------------------------------------------------
   607                                  ;
   608                                  ;       I825TXDESC
   609                                  ;
   610                                  ;       The Intel 8254X PCI/PCI-X Gigabit Ethernet controller transmit descriptor.
   611                                  ;
   612                                  ;-----------------------------------------------------------------------------------------------------------------------
   613                                  struc                   I825TXDESC
   614                                  .address                equ     $                                               ;64-bit address
   615 00000000 <res 00000004>          .addresslo              resd    1                                               ;address lo
   616 00000004 <res 00000004>          .addresshi              resd    1                                               ;address hi
   617 00000008 <res 00000002>          .length                 resw    1                                               ;length
   618 0000000A <res 00000001>          .cso                    resb    1                                               ;cso
   619 0000000B <res 00000001>          .cmd                    resb    1                                               ;cmd
   620 0000000C <res 00000001>          .sta                    resb    1                                               ;sta
   621 0000000D <res 00000001>          .css                    resb    1                                               ;css
   622 0000000E <res 00000002>          .special                resw    1                                               ;special
   623                                  EI825TXDESCLEN          equ     ($-.address)
   624                                  endstruc
   625                                  ;-----------------------------------------------------------------------------------------------------------------------
   626                                  ;
   627                                  ;       MEMBLOCK
   628                                  ;
   629                                  ;       The MEMBLOCK structure defines a memory block.
   630                                  ;
   631                                  ;-----------------------------------------------------------------------------------------------------------------------
   632                                  struc                   MEMBLOCK
   633 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   634 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   635 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   636 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   637 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   638 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   639 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   640 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   641                                  EMEMBLOCKLEN            equ     ($-.signature)
   642                                  endstruc
   643                                  ;-----------------------------------------------------------------------------------------------------------------------
   644                                  ;
   645                                  ;       MEMROOT
   646                                  ;
   647                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   648                                  ;
   649                                  ;-----------------------------------------------------------------------------------------------------------------------
   650                                  struc                   MEMROOT
   651 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   652 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   653 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   654 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   655 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   656 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   657                                  EMEMROOTLEN             equ     ($-.firstcontig)
   658                                  endstruc
   659                                  ;-----------------------------------------------------------------------------------------------------------------------
   660                                  ;
   661                                  ;       MQUEUE
   662                                  ;
   663                                  ;       The MQUEUE structure maps memory used for a message queue.
   664                                  ;
   665                                  ;-----------------------------------------------------------------------------------------------------------------------
   666                                  struc                   MQUEUE
   667 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   668 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   669 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   670                                  endstruc
   671                                  ;-----------------------------------------------------------------------------------------------------------------------
   672                                  ;
   673                                  ;       PCI
   674                                  ;
   675                                  ;       The PCI structure defines a PCI bus, device and function context.
   676                                  ;
   677                                  ;-----------------------------------------------------------------------------------------------------------------------
   678                                  struc                   PCI
   679 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   680 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   681 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   682 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   683 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   684                                  .configdata             equ     $                                               ;data read from port 0CFCh
   685 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   686 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   687 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   688 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   689                                  EPCILEN                 equ     ($-.configdata)
   690                                  endstruc
   691                                  ;-----------------------------------------------------------------------------------------------------------------------
   692                                  ;
   693                                  ;       OSDATA
   694                                  ;
   695                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   696                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   697                                  ;
   698                                  ;-----------------------------------------------------------------------------------------------------------------------
   699                                  struc                   OSDATA
   700 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   701 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   702 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   703 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   704 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   705 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   706 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   707 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   708 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   709 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   710 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   711 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 free memory KB below EBDA
   712 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   713 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   714 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   715 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   716 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   717 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   718 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   719 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   720 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   721 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   722 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   723 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   724 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   725 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   726 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   727 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   728 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   729 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   730 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   731 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   732 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   733 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   734 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   735 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   736 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   737 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   738 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   739 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   740 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   741 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   742 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   743 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   744 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   745 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   746 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   747 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   748 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   749 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   750 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   751 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   752 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   753 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   754 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   755 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   756 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   757 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   758 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   759 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   760 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   761 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   762 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   763 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   764 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   765 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   766 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   767 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   768 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   769 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   770 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   771 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   772 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   773 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   774 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   775 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   776 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   777 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   778 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   779 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   780 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   781 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   782 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   783 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   784 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   785 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   786 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   787 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   788 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   789 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   790 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   791 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   792 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   793 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   794 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   795 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   796 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   797 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   798 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   799 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   800 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   801                                  ;-----------------------------------------------------------------------------------------------------------------------
   802                                  ;
   803                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   804                                  ;
   805                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   806                                  ;
   807                                  ;-----------------------------------------------------------------------------------------------------------------------
   808                                  ECONDATA                equ     ($)
   809 00000800 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap bytes
   810 00000804 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   811 00000808 <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   812                                  
   813 0000080C <res 00000004>          wdConsoleMemBase        resd    1                                               ;memory display source addr
   814 00000810 <res 00000004>          wdConsoleField          resd    1                                               ;console field definition address
   815 00000814 <res 00000001>          wbConsoleFieldColumn    resb    1
   816 00000815 <res 00000001>          wbConsoleFieldRow       resb    1
   817 00000816 <res 00000001>          wbConsoleFieldColor     resb    1
   818 00000817 <res 00000001>          wbConsoleFieldLength    resb    1
   819                                  
   820 00000818 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   821 00000819 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   822                                  
   823 0000081A <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   824 0000081B <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   825 0000081C <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   826 0000081D <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   827 0000081E <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   828 0000081F <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   829 00000820 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   830 00000821 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   831 00000822 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   832 00000823 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   833 00000824 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   834                                  
   835 00000825 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   836                                  
   837 00000875 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   838 000008C5 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   839 00000915 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   840                                  
   841 0000091E <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   842                                  
   843 00000936 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   844 0000093E <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   845 0000094A <res 00000043>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   846                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   847                                  ;-----------------------------------------------------------------------------------------------------------------------
   848                                  ;
   849                                  ;       End of OS Variables
   850                                  ;
   851                                  ;-----------------------------------------------------------------------------------------------------------------------
   852                                  endstruc
   853                                  ;-----------------------------------------------------------------------------------------------------------------------
   854                                  ;
   855                                  ;       Macros
   856                                  ;
   857                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   858                                  ;
   859                                  ;-----------------------------------------------------------------------------------------------------------------------
   860                                  %macro                  mint    1
   861                                  _%1                     equ     ($-$$) / EX86DESCLEN
   862                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   863                                  %endmacro
   864                                  %macro                  mtrap   1
   865                                  _%1                     equ     ($-$$) / EX86DESCLEN
   866                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   867                                  %endmacro
   868                                  %macro                  menter  1
   869                                  ?%1                     equ     ($-$$)
   870                                  %endmacro
   871                                  %macro                  tsvce   1
   872                                  e%1                     equ     ($-tsvc)/4
   873                                                          dd      %1
   874                                  %endmacro
   875                                  %ifdef BUILDBOOT
   876                                  ;=======================================================================================================================
   877                                  ;
   878                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   879                                  ;
   880                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   881                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   882                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   883                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   884                                  ;
   885                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   886                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   887                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   888                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   889                                  ;       immediately followed by a disk parameter table.
   890                                  ;
   891                                  ;=======================================================================================================================
   892                                                          cpu     8086                                            ;assume minimal CPU
   893                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   894                                                          bits    16                                              ;16-bit code at power-up
   895                                  %ifdef BUILDPREP
   896                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   897                                  %else
   898                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   899                                  %endif
   900                                  ;-----------------------------------------------------------------------------------------------------------------------
   901                                  ;
   902                                  ;       Disk Parameter Table
   903                                  ;
   904                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   905                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   906                                  ;
   907                                  ;-----------------------------------------------------------------------------------------------------------------------
   908                                                          db      "CustomOS"                                      ;eight-byte label
   909                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   910                                  cbClusterSectors        db      1                                               ;sectors per cluster
   911                                  cwReservedSectors       dw      1                                               ;reserved sectors
   912                                  cbFatCount              db      2                                               ;file allocation table copies
   913                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   914                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   915                                  cbDiskType              db      0F0h                                            ;1.44MB
   916                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   917                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   918                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   919                                  cwDiskSides             dw      2                                               ;sides per disk
   920                                  cwSpecialSectors        dw      0                                               ;special sectors
   921                                  ;
   922                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   923                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   924                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   925                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   926                                  ;       given several possible starting values for CS:IP.
   927                                  ;
   928                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   929                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   930                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   931                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   932                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   933                                                          mov     cl,4                                            ;shift count
   934                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   935                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   936                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   937                                  ;
   938                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   939                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   940                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   941                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   942                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   943                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   944                                  ;
   945                                                          sub     bx,16                                           ;BX = 07b0
   946                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   947                                                          mov     es,bx                                           ;ES = 07b0 = psp
   948                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   949                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   950                                  ;
   951                                  ;       Our boot addressability is now set up according to the following diagram.
   952                                  ;
   953                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   954                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   955                                  ;                               |  256 = 100h bytes                             |
   956                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   957                                  ;                               |  Boot Sector (vstart=0100h)                   |
   958                                  ;                               |  1 sector = 512 = 200h bytes                  |
   959                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   960                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   961                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   962                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   963                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   964                                  ;                               |  2 sectors = 1024 = 400h bytes
   965                                  ;                       009400  +-----------------------------------------------+ DS:1900
   966                                  ;
   967                                  ;       On entry, DL indicates the drive being booted from.
   968                                  ;
   969                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   970                                  ;
   971                                  ;       Compute directory i/o buffer address.
   972                                  ;
   973                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   974                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   975                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   976                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   977                                  ;
   978                                  ;       Compute segment where os.com will be loaded.
   979                                  ;
   980                                                          shr     ax,cl                                           ;AX = 0150
   981                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   982                                                          sub     ax,16                                           ;AX = 08f0
   983                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   984                                  ;
   985                                  ;       Set the video mode to 80 column, 25 row, text.
   986                                  ;
   987                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   988                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   989                                  ;
   990                                  ;       Write a message to the console so we know we have our addressability established.
   991                                  ;
   992                                                          mov     si,czLoadMsg                                    ;loading message
   993                                                          call    BootPrint                                       ;display loader message
   994                                  ;
   995                                  ;       Initialize the number of directory sectors to search.
   996                                  ;
   997                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   998                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   999                                  ;
  1000                                  ;       Compute number of directory sectors and initialize overhead count.
  1001                                  ;
  1002                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
  1003                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
  1004                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
  1005                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
  1006                                  ;
  1007                                  ;       Compute directory entries per sector.
  1008                                  ;
  1009                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
  1010                                                          div     cx                                              ;AX = 0010 = entries per dir sector
  1011                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
  1012                                  ;
  1013                                  ;       Compute first logical directory sector and update overhead count.
  1014                                  ;
  1015                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
  1016                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
  1017                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
  1018                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
  1019                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
  1020                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
  1021                                  ;
  1022                                  ;       Read directory sector.
  1023                                  ;
  1024                                  .30                     mov     al,1                                            ;sector count
  1025                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
  1026                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
  1027                                                          call    ReadSector                                      ;read sector into es:bx
  1028                                  ;
  1029                                  ;       Setup variables to search this directory sector.
  1030                                  ;
  1031                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
  1032                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
  1033                                                          jna     .40                                             ;no, continue
  1034                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
  1035                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
  1036                                                          mov     si,cbKernelProgram                              ;program name
  1037                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
  1038                                  ;
  1039                                  ;       Loop through directory sectors searching for kernel program.
  1040                                  ;
  1041                                  .50                     push    si                                              ;save kernel name address
  1042                                                          push    di                                              ;save dir i/o buffer address
  1043                                                          mov     cx,11                                           ;length of 8+3 name
  1044                                                          cld                                                     ;forward strings
  1045                                                          repe    cmpsb                                           ;compare entry name
  1046                                                          pop     di                                              ;restore dir i/o buffer address
  1047                                                          pop     si                                              ;restore kernel name address
  1048                                                          je      .60                                             ;exit loop if found
  1049                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
  1050                                                          dec     ax                                              ;decrement remaining entries
  1051                                                          jnz     .50                                             ;next entry
  1052                                  ;
  1053                                  ;       Repeat search if we are not at the end of the directory.
  1054                                  ;
  1055                                                          inc     word [wwLogicalSector]                          ;increment logical sector
  1056                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
  1057                                                          jne     .30                                             ;no, get next sector
  1058                                                          mov     si,czNoKernel                                   ;missing kernel message
  1059                                                          jmp     BootExit                                        ;display message and exit
  1060                                  ;
  1061                                  ;       If we find the kernel program in the directory, read the FAT.
  1062                                  ;
  1063                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
  1064                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
  1065                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
  1066                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
  1067                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
  1068                                                          call    ReadSector                                      ;read FAT into buffer
  1069                                  ;
  1070                                  ;       Get the starting cluster of the kernel program and target address.
  1071                                  ;
  1072                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
  1073                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
  1074                                  ;
  1075                                  ;       Read each program cluster into RAM.
  1076                                  ;
  1077                                  .70                     push    ax                                              ;save cluster nbr
  1078                                                          sub     ax,2                                            ;AX = cluster nbr base 0
  1079                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
  1080                                                          mov     [wbReadCount],cl                                ;save sectors to read
  1081                                                          xor     ch,ch                                           ;CX = sectors per cluster
  1082                                                          mul     cx                                              ;DX:AX = logical cluster sector
  1083                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
  1084                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
  1085                                                          call    ReadSector                                      ;read sectors into ES:BX
  1086                                  ;
  1087                                  ;       Update buffer pointer for next cluster.
  1088                                  ;
  1089                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
  1090                                                          xor     ah,ah                                           ;AX = sectors per cluster
  1091                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
  1092                                                          add     bx,ax                                           ;BX = next cluster target address
  1093                                                          pop     ax                                              ;AX = restore cluster nbr
  1094                                  ;
  1095                                  ;       Compute next cluster number.
  1096                                  ;
  1097                                                          mov     cx,ax                                           ;CX = cluster nbr
  1098                                                          mov     di,ax                                           ;DI = cluster nbr
  1099                                                          shr     ax,1                                            ;AX = cluster/2
  1100                                                          mov     dx,ax                                           ;DX = cluster/2
  1101                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
  1102                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
  1103                                                          and     di,1                                            ;get low bit
  1104                                                          add     di,ax                                           ;add one if cluster is odd
  1105                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
  1106                                                          mov     ax,[di]                                         ;get cluster bytes
  1107                                  ;
  1108                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1109                                  ;
  1110                                                          test    cl,1                                            ;is cluster odd?
  1111                                                          jz      .80                                             ;no, skip ahead
  1112                                                          mov     cl,4                                            ;shift count
  1113                                                          shr     ax,cl                                           ;shift nybble low
  1114                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1115                                                          cmp     ax,0FFFh                                        ;end of chain?
  1116                                                          jne     .70                                             ;no, continue
  1117                                  ;
  1118                                  ;       Transfer control to the operating system program.
  1119                                  ;
  1120                                                          db      0EAh                                            ;jmp seg:offset
  1121                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1122                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1123                                  ;
  1124                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1125                                  ;
  1126                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1127                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1128                                                          mov     cx,ax                                           ;CX = sectors per cylinder
  1129                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1130                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
  1131                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1132                                                          mov     ax,dx                                           ;AX = cyl sector
  1133                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1134                                                          inc     ah                                              ;AH = sector (1,2,3,...)
  1135                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1136                                  ;
  1137                                  ;       Try maxtries times to read sector.
  1138                                  ;
  1139                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1140                                  .10                     push    bx                                              ;save buffer address
  1141                                                          push    cx                                              ;save retry count
  1142                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1143                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1144                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1145                                                          int     EBIOSINTDISKETTE                                ;read sector
  1146                                                          pop     cx                                              ;restore retry count
  1147                                                          pop     bx                                              ;restore buffer address
  1148                                                          jnc     BootReturn                                      ;skip ahead if done
  1149                                                          loop    .10                                             ;retry
  1150                                  ;
  1151                                  ;       Handle disk error: convert to ASCII and store in error string.
  1152                                  ;
  1153                                                          mov     al,ah                                           ;AL = bios error code
  1154                                                          xor     ah,ah                                           ;AX = bios error code
  1155                                                          mov     dl,16                                           ;divisor for base 16
  1156                                                          div     dl                                              ;AL = hi order, AH = lo order
  1157                                                          or      ax,03030h                                       ;apply ASCII zone bits
  1158                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1159                                                          jb      .20                                             ;continue if numeral
  1160                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1161                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1162                                                          jb      .30                                             ;continue if numeral
  1163                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1164                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1165                                                          mov     si,czErrorMsg                                   ;error message address
  1166                                  BootExit                call    BootPrint                                       ;display messge to console
  1167                                  ;
  1168                                  ;       Wait for a key press.
  1169                                  ;
  1170                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1171                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1172                                                          jnz     .20                                             ;continue if key pressed
  1173                                                          sti                                                     ;enable maskable interrupts
  1174                                                          hlt                                                     ;wait for interrupt
  1175                                                          jmp     .10                                             ;repeat
  1176                                  ;
  1177                                  ;       Reset the system.
  1178                                  ;
  1179                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1180                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1181                                  .30                     sti                                                     ;enable maskable interrupts
  1182                                                          hlt                                                     ;stop until reset, int, nmi
  1183                                                          jmp     .30                                             ;loop until restart kicks in
  1184                                  ;
  1185                                  ;       Display text message.
  1186                                  ;
  1187                                  BootPrint               cld                                                     ;forward strings
  1188                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1189                                                          test    al,al                                           ;end of string?
  1190                                                          jz      BootReturn                                      ;... yes, exit our loop
  1191                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1192                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1193                                                          jmp     .10                                             ;repeat until done
  1194                                  BootReturn              ret                                                     ;return
  1195                                  ;-----------------------------------------------------------------------------------------------------------------------
  1196                                  ;
  1197                                  ;       Constants
  1198                                  ;
  1199                                  ;-----------------------------------------------------------------------------------------------------------------------
  1200                                                          align   2
  1201                                  cwEntryLen              dw      32                                              ;length of directory entry
  1202                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1203                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1204                                  czErrorMsg              db      "Disk error "                                   ;error message
  1205                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1206                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1207                                  ;-----------------------------------------------------------------------------------------------------------------------
  1208                                  ;
  1209                                  ;       Work Areas
  1210                                  ;
  1211                                  ;-----------------------------------------------------------------------------------------------------------------------
  1212                                                          align   2
  1213                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1214                                  wwEntriesLeft           dw      0                                               ;directory entries to search
  1215                                  wwOverhead              dw      0                                               ;overhead sectors
  1216                                  wwSectorEntries         dw      0                                               ;directory entries per sector
  1217                                  wwLogicalSector         dw      0                                               ;current logical sector
  1218                                  wwReadCountCommand      equ     $                                               ;read count and command
  1219                                  wbReadCount             db      0                                               ;sectors to read
  1220                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1221                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1222                                  wbDrive                 db      0                                               ;drive
  1223                                  wbHead                  db      0                                               ;head
  1224                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1225                                                          db      0                                               ;sector
  1226                                  wbTrack                 db      0                                               ;track
  1227                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
  1228                                                          db      055h,0AAh                                       ;end of sector signature
  1229                                  %endif
  1230                                  %ifdef BUILDPREP
  1231                                  ;=======================================================================================================================
  1232                                  ;
  1233                                  ;       Diskette Preparation Code
  1234                                  ;
  1235                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1236                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1237                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1238                                  ;
  1239                                  ;=======================================================================================================================
  1240                                  ;
  1241                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1242                                  ;
  1243                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1244                                                          call    BootPrint                                       ;display message
  1245                                  ;
  1246                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1247                                  ;
  1248                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1249                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1250                                                          jnz     .20                                             ;continue if key pressed
  1251                                                          sti                                                     ;enable interrupts
  1252                                                          hlt                                                     ;wait for interrupt
  1253                                                          jmp     .10                                             ;repeat
  1254                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1255                                                          je      .30                                             ;yes, branch
  1256                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1257                                                          jne     .10                                             ;no, repeat
  1258                                                          jmp     .120                                            ;yes, exit program
  1259                                  ;
  1260                                  ;       Display writing-sector message and patch the JMP instruction.
  1261                                  ;
  1262                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1263                                                          call    BootPrint                                       ;display message
  1264                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1265                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1266                                                          mov     [bx],ax                                         ;update the JMP instruction
  1267                                  ;
  1268                                  ;       Try to read the boot sector.
  1269                                  ;
  1270                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1271                                  .40                     push    cx                                              ;save remaining tries
  1272                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1273                                                          mov     dx,0                                            ;head zero, drive zero
  1274                                                          mov     cx,1                                            ;track zero, sector one
  1275                                                          mov     al,1                                            ;one sector
  1276                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1277                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1278                                                          pop     cx                                              ;restore remaining retries
  1279                                                          jnc     .50                                             ;skip ahead if successful
  1280                                                          loop    .40                                             ;try again
  1281                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1282                                                          jmp     .70                                             ;branch to error routine
  1283                                  ;
  1284                                  ;       Copy diskette parms from input buffer to output buffer.
  1285                                  ;
  1286                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1287                                                          add     si,11                                           ;skip over JMP and system ID
  1288                                                          mov     di,Boot                                         ;output buffer address
  1289                                                          add     di,11                                           ;skip over JMP and system ID
  1290                                                          mov     cx,19                                           ;length of diskette parameters
  1291                                                          cld                                                     ;forward string copies
  1292                                                          rep     movsb                                           ;copy diskette parameters
  1293                                  ;
  1294                                  ;       Try to write boot sector to diskette.
  1295                                  ;
  1296                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1297                                  .60                     push    cx                                              ;save remaining tries
  1298                                                          mov     bx,Boot                                         ;output buffer address
  1299                                                          mov     dx,0                                            ;head zero, drive zero
  1300                                                          mov     cx,1                                            ;track zero, sector one
  1301                                                          mov     al,1                                            ;one sector
  1302                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1303                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1304                                                          pop     cx                                              ;restore remaining retries
  1305                                                          jnc     .100                                            ;skip ahead if successful
  1306                                                          loop    .60                                             ;try again
  1307                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1308                                  ;
  1309                                  ;       Convert the error code to ASCII and display the error message.
  1310                                  ;
  1311                                  .70                     push    ax                                              ;save error code
  1312                                                          mov     al,ah                                           ;copy error code
  1313                                                          mov     ah,0                                            ;AX = error code
  1314                                                          mov     dl,10h                                          ;hexadecimal divisor
  1315                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1316                                                          or      ax,03030h                                       ;add ASCII zone digits
  1317                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1318                                                          jb      .80                                             ;yes, continue
  1319                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1320                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1321                                                          jb      .90                                             ;yes, continue
  1322                                                          add     al,7                                            ;no, make ASCII
  1323                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1324                                                          call    BootPrint                                       ;write error message
  1325                                                          pop     ax                                              ;restore error code
  1326                                  ;
  1327                                  ;       Display the completion message.
  1328                                  ;
  1329                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1330                                                          mov     al,ah                                           ;BIOS return code
  1331                                                          cmp     al,0                                            ;success?
  1332                                                          je      .110                                            ;yes, continue
  1333                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1334                                                          cmp     al,1                                            ;disk parameter error?
  1335                                                          je      .110                                            ;yes, continue
  1336                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1337                                                          cmp     al,2                                            ;address mark not found?
  1338                                                          je      .110                                            ;yes, continue
  1339                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1340                                                          cmp     al,3                                            ;protected disk?
  1341                                                          je      .110                                            ;yes, continue
  1342                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1343                                                          cmp     al,6                                            ;diskette removed?
  1344                                                          je      .110                                            ;yes, continue
  1345                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1346                                                          cmp     al,80H                                          ;drive timed out?
  1347                                                          je      .110                                            ;yes, continue
  1348                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1349                                  .110                    call    BootPrint                                       ;display result message
  1350                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1351                                                          int     021h                                            ;terminate DOS program
  1352                                                          ret                                                     ;return (should not execute)
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;
  1355                                  ;       Diskette Preparation Messages
  1356                                  ;
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1359                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1360                                                          db      13,10
  1361                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1362                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1363                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1364                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1365                                                          db      13,10,0
  1366                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1367                                                          db      13,10,0
  1368                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1369                                                          db      13,10,0
  1370                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1371                                                          db      13,10,0
  1372                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1373                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1374                                                          db      13,10,0
  1375                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1376                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1377                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1378                                                          db      13,10,"and retry."
  1379                                                          db      13,10,0
  1380                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1381                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1382                                                          db      13,10,"using another diskette."
  1383                                                          db      13,10,0
  1384                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1385                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1386                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1387                                                          db      13,10,0
  1388                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1389                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1390                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1391                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1392                                                          db      13,10,"is properly inserted in the diskette drive."
  1393                                                          db      13,10,0
  1394                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1395                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1396                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1397                                                          db      13,10,0
  1398                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1399                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1400                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1401                                                          db      13,10,0
  1402                                  wcPrepInBuf             equ     $
  1403                                  %endif
  1404                                  %ifdef BUILDDISK
  1405                                  ;=======================================================================================================================
  1406                                  ;
  1407                                  ;       File Allocation Tables
  1408                                  ;
  1409                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1410                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1411                                  ;       OS.COM file here is 7400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 7000h
  1412                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1413                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 58 clusters for OS.COM. The clusters used by
  1414                                  ;       OS.COM, then, will be cluster 2 through 59. The entry for cluster 59 is set to "0fffh" to indicate that it is
  1415                                  ;       the last cluster in the chain.
  1416                                  ;
  1417                                  ;       Every three bytes encode two FAT entries as follows:
  1418                                  ;
  1419                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1420                                  ;
  1421                                  ;=======================================================================================================================
  1422                                  ;-----------------------------------------------------------------------------------------------------------------------
  1423                                  ;
  1424                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                  section                 fat1                                                    ;first copy of FAT
  1428                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h                  ;0-3
  1429                                                          db      005h,060h,000h, 007h,080h,000h                  ;4-7
  1430                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h                  ;8-11
  1431                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h                  ;12-15
  1432                                                          db      011h,020h,001h, 013h,040h,001h                  ;16-19
  1433                                                          db      015h,060h,001h, 017h,080h,001h                  ;20-23
  1434                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h                  ;24-27
  1435                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h                  ;28-31
  1436                                                          db      021h,020h,002h, 023h,040h,002h                  ;32-35
  1437                                                          db      025h,060h,002h, 027h,080h,002h                  ;36-39
  1438                                                          db      029h,0A0h,002h, 02Bh,0C0h,002h                  ;40-43
  1439                                                          db      02Dh,0E0h,002h, 02Fh,000h,003h                  ;44-47
  1440                                                          db      031h,020h,003h, 033h,040h,003h                  ;48-51
  1441                                                          db      035h,060h,003h, 037h,080h,003h                  ;52-55
  1442                                                          db      039h,0A0h,003h, 03Bh,0F0h,0FFh                  ;56-59
  1443                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1444                                  ;-----------------------------------------------------------------------------------------------------------------------
  1445                                  ;
  1446                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1447                                  ;
  1448                                  ;-----------------------------------------------------------------------------------------------------------------------
  1449                                  section                 fat2                                                    ;second copy of FAT
  1450                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h                  ;0-3
  1451                                                          db      005h,060h,000h, 007h,080h,000h                  ;4-7
  1452                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h                  ;8-11
  1453                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h                  ;12-15
  1454                                                          db      011h,020h,001h, 013h,040h,001h                  ;16-19
  1455                                                          db      015h,060h,001h, 017h,080h,001h                  ;20-23
  1456                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h                  ;24-27
  1457                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h                  ;28-31
  1458                                                          db      021h,020h,002h, 023h,040h,002h                  ;32-35
  1459                                                          db      025h,060h,002h, 027h,080h,002h                  ;36-39
  1460                                                          db      029h,0A0h,002h, 02Bh,0C0h,002h                  ;40-43
  1461                                                          db      02Dh,0E0h,002h, 02Fh,000h,003h                  ;44-47
  1462                                                          db      031h,020h,003h, 033h,040h,003h                  ;48-51
  1463                                                          db      035h,060h,003h, 037h,080h,003h                  ;52-55
  1464                                                          db      039h,0A0h,003h, 03Bh,0F0h,0FFh                  ;56-59
  1465                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1466                                  ;-----------------------------------------------------------------------------------------------------------------------
  1467                                  ;
  1468                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1469                                  ;
  1470                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1471                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1472                                  ;       copy.
  1473                                  ;
  1474                                  ;-----------------------------------------------------------------------------------------------------------------------
  1475                                  section                 dir                                                     ;diskette directory
  1476                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1477                                                          db      020h                                            ;attribute (archive bit set)
  1478                                                          times   10 db 0                                         ;unused
  1479                                                          dw      0h                                              ;time
  1480                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1481                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1482                                                          dw      2                                               ;first cluster
  1483                                                          dd      07400h                                          ;file size
  1484                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1485                                  %endif
  1486                                  %ifdef BUILDCOM
  1487                                  ;=======================================================================================================================
  1488                                  ;
  1489                                  ;       OS.COM
  1490                                  ;
  1491                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1492                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1493                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1494                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1495                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1496                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1497                                  ;
  1498                                  ;       Our loader addressability is set up according to the following diagram.
  1499                                  ;
  1500                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1501                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1502                                  ;                               |  256 = 100h bytes                             |
  1503                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1504                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1505                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1506                                  ;                       007e00  +-----------------------------------------------+
  1507                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1508                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1509                                  ;                               |                                               |
  1510                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1511                                  ;                               |                                               |
  1512                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1513                                  ;                               |  Loader Code                                  |
  1514                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1515                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1516                                  ;
  1517                                  ;=======================================================================================================================
  1518                                  ;-----------------------------------------------------------------------------------------------------------------------
  1519                                  ;
  1520                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1521                                  ;
  1522                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1523                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1524                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1525                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1526                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1527                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1528                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1529                                  ;       registers.
  1530                                  ;
  1531                                  ;-----------------------------------------------------------------------------------------------------------------------
  1532                                                          cpu     8086                                            ;assume minimal CPU
  1533                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1534                                                          bits    16                                              ;this is 16-bit code
  1535 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1536 00000001 1F                                              pop     ds                                              ;...as our data segment
  1537 00000002 0E                                              push    cs                                              ;use the code segment
  1538 00000003 07                                              pop     es                                              ;...as our extra segment
  1539                                  ;
  1540                                  ;       Write a message to the console so we know we have our addressability established.
  1541                                  ;
  1542 00000004 BE[3C02]                                        mov     si,czStartingMsg                                ;starting message
  1543 00000007 E8E600                                          call    PutTTYString                                    ;display loader message
  1544                                  ;
  1545                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1546                                  ;
  1547 0000000A E8C300                                          call    GetCPUType                                      ;AL = cpu type
  1548 0000000D BE[0801]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1549 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1550 00000012 7303E9A400                                      jb      LoaderExit                                      ;no, exit with error message
  1551                                                          cpu     386                                             ;allow 80386 instructions
  1552 00000017 BE[F901]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1553 0000001A E8D300                                          call    PutTTYString                                    ;display message
  1554                                  ;
  1555                                  ;       Make sure we have enough available RAM below the EBDA for the kernel
  1556                                  ;
  1557 0000001D 1E                                              push    ds                                              ;save data segment register
  1558 0000001E 6A00                                            push    0                                               ;load base memory address...
  1559 00000020 1F                                              pop     ds                                              ;...into data segment register
  1560 00000021 A11304                                          mov     ax,[wwROMMemSize]                               ;load available memory below EBDA
  1561 00000024 1F                                              pop     ds                                              ;restore data segment register
  1562 00000025 83F820                                          cmp     ax,EKRNMINRAMKB                                 ;minimum RAM KB available?
  1563 00000028 7306                                            jnb     .10                                             ;yes, continue
  1564 0000002A BE[7301]                                        mov     si,czMemErrorMsg                                ;memory size error message
  1565 0000002D E98500                                          jmp     LoaderExit.10                                   ;exit with error message
  1566 00000030 BE[0202]                .10                     mov     si,czMemOKMsg                                   ;memory ok message
  1567 00000033 E8BA00                                          call    PutTTYString                                    ;display message
  1568                                  ;
  1569                                  ;       Make sure we have enough extended RAM above 1MB for the heap.
  1570                                  ;
  1571 00000036 B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  1572 00000038 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  1573 0000003A E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  1574 0000003C 88C4                                            mov     ah,al                                           ;save extended RAM high
  1575 0000003E B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  1576 00000040 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  1577 00000042 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  1578 00000044 3D007C                                          cmp     ax,EKRNMINEXTKB                                 ;minimum extended RAM KB?
  1579 00000047 7305                                            jnb     .20                                             ;yes, continue
  1580 00000049 BE[BA01]                                        mov     si,czExtErrorMsg                                ;extended memory error message
  1581 0000004C EB67                                            jmp     LoaderExit.10                                   ;display message
  1582 0000004E BE[0B02]                .20                     mov     si,czExtOKMsg                                   ;extended memory ok message
  1583 00000051 E89C00                                          call    PutTTYString                                    ;display message
  1584                                  ;
  1585                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1586                                  ;
  1587 00000054 BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1588 00000057 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1589 00000059 C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1590 0000005C 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1591 0000005E 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1592 00000060 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1593 00000063 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1594 00000066 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1595 00000069 BE[1D02]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1596 0000006C E88100                                          call    PutTTYString                                    ;display message
  1597                                  ;
  1598                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1599                                  ;
  1600 0000006F 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1601 00000072 07                                              pop     es                                              ;... as target segment
  1602 00000073 31FF                                            xor     di,di                                           ;ES:DI = target address
  1603 00000075 BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1604 00000078 B90070                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1605 0000007B FC                                              cld                                                     ;forward strings
  1606 0000007C F3A4                                            rep     movsb                                           ;copy kernel image
  1607 0000007E BE[2C02]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1608 00000081 E86C00                                          call    PutTTYString                                    ;display message
  1609                                  ;
  1610                                  ;       Switch to protected mode.
  1611                                  ;
  1612 00000084 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1613 00000086 8ED6                                            mov     ss,si                                           ;protected mode ss
  1614 00000088 BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1615 0000008B B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1616 0000008D BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1617 00000090 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1618 00000093 B9FFFF                  .30                     mov     cx,0FFFFh                                       ;inner delay loop count
  1619 00000096 E2FE                                            loop    $                                               ;wait out pending interrupts
  1620 00000098 4A                                              dec     dx                                              ;restore outer loop count
  1621 00000099 75F8                                            jnz     .30                                             ;continue outer loop
  1622 0000009B CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1623                                  ;
  1624                                  ;       Enable hardware and maskable interrupts.
  1625                                  ;
  1626 0000009D 30C0                                            xor     al,al                                           ;enable all registers code
  1627 0000009F E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1628 000000A1 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1629 000000A3 FB                                              sti                                                     ;enable maskable interrupts
  1630                                  ;
  1631                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1632                                  ;
  1633 000000A4 2E0F001E[0001]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1634 000000AA 2E0F0016[FE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1635 000000B0 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       Routine:        LoaderExit
  1639                                  ;
  1640                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1641                                  ;
  1642                                  ;       In:             DS:SI   string address
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645 000000B5 E83800                  LoaderExit.10           call    PutTTYString                                    ;display error message
  1646 000000B8 BE[4301]                                        mov     si,czRestartMsg                                 ;press key to restart message
  1647 000000BB E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1648                                  ;
  1649                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1650                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1651                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1652                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1653                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1654                                  ;
  1655 000000BE B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1656 000000C0 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1657 000000C2 7504                                            jnz     .40                                             ;exit if key pressed
  1658 000000C4 FB                                              sti                                                     ;enable maskable interrupts
  1659 000000C5 F4                                              hlt                                                     ;wait for interrupt
  1660 000000C6 EBF6                                            jmp     .30                                             ;repeat until keypress
  1661                                  ;
  1662                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1663                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1664                                  ;       HLT until the system resets.
  1665                                  ;
  1666 000000C8 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1667 000000CA E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1668 000000CC FB                      .50                     sti                                                     ;enable maskable interrupts
  1669 000000CD F4                                              hlt                                                     ;stop until reset, int, nmi
  1670 000000CE EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  ;
  1673                                  ;       Routine:        GetCPUType
  1674                                  ;
  1675                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1676                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1677                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1678                                  ;
  1679                                  ;       Out:            AX      0 = 808x, v20, etc.
  1680                                  ;                               1 = 80186
  1681                                  ;                               2 = 80286
  1682                                  ;                               3 = 80386
  1683                                  ;
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685 000000D0 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1686 000000D2 B120                                            mov     cl,32                                           ;shift count
  1687 000000D4 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1688 000000D6 08C0                                            or      al,al                                           ;did the shift happen?
  1689 000000D8 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1690                                                          cpu     186
  1691 000000DA 54                                              push    sp                                              ;save stack pointer
  1692 000000DB 59                                              pop     cx                                              ;...into cx
  1693 000000DC 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1694 000000DE 750F                                            jne     .10                                             ;yes, cpu is 80186
  1695                                                          cpu     286
  1696 000000E0 40                                              inc     ax                                              ;AX = 2
  1697 000000E1 0F0106[0201]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1698 000000E6 8A0E[0701]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1699 000000EA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1700 000000EC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1701 000000EE 40                                              inc     ax                                              ;AX = 3
  1702 000000EF C3                      .10                     ret                                                     ;return
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       Routine:        PutTTYString
  1706                                  ;
  1707                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1708                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1709                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1710                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1711                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1712                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1713                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1714                                  ;                       to LODSB is not needed.
  1715                                  ;
  1716                                  ;       In:             DS:SI   address of string
  1717                                  ;
  1718                                  ;       Out:            DF      0
  1719                                  ;                       ZF      1
  1720                                  ;                       AL      0
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723 000000F0 FC                      PutTTYString            cld                                                     ;forward strings
  1724 000000F1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1725 000000F2 84C0                                            test    al,al                                           ;end of string?
  1726 000000F4 7406                                            jz      .20                                             ;... yes, exit our loop
  1727 000000F6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1728 000000F8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1729 000000FA EBF5                                            jmp     .10                                             ;repeat until done
  1730 000000FC C3                      .20                     ret                                                     ;return
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       Loader Data
  1734                                  ;
  1735                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1736                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1737                                  ;
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739 000000FD 90                                              align   2
  1740 000000FE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1741 00000100 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1742 00000102 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1743 00000107 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1744 00000108 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1744 00000111 74696E672073797374-
  1744 0000011A 656D20726571756972-
  1744 00000123 657320616E20693338-
  1744 0000012C 36206F72206C617465-
  1744 00000135 722070726F63657373-
  1744 0000013E 6F722E0D0A         
  1745 00000143 506C65617365207072-     czRestartMsg            db      "Please press any key to restart the computer.",13,10,0
  1745 0000014C 65737320616E79206B-
  1745 00000155 657920746F20726573-
  1745 0000015E 746172742074686520-
  1745 00000167 636F6D70757465722E-
  1745 00000170 0D0A00             
  1746 00000173 546865206F70657261-     czMemErrorMsg           db      "The operating system kernel requires at least 32KB of available RAM.",13,10,0
  1746 0000017C 74696E672073797374-
  1746 00000185 656D206B65726E656C-
  1746 0000018E 207265717569726573-
  1746 00000197 206174206C65617374-
  1746 000001A0 2033324B42206F6620-
  1746 000001A9 617661696C61626C65-
  1746 000001B2 2052414D2E0D0A00   
  1747 000001BA 546865206F70657261-     czExtErrorMsg           db      "The operating system requires at least 31MB of extended RAM.",13,10,0
  1747 000001C3 74696E672073797374-
  1747 000001CC 656D20726571756972-
  1747 000001D5 6573206174206C6561-
  1747 000001DE 73742033314D42206F-
  1747 000001E7 6620657874656E6465-
  1747 000001F0 642052414D2E0D0A00 
  1748 000001F9 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1749 00000202 52414D204F4B0D0A00      czMemOKMsg              db      "RAM OK",13,10,0                                ;RAM ok message
  1750 0000020B 457874656E64656420-     czExtOKMsg              db      "Extended RAM OK",13,10,0                       ;Extended RAM ok message
  1750 00000214 52414D204F4B0D0A00 
  1751 0000021D 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1751 00000226 7265640D0A00       
  1752 0000022C 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1752 00000235 616465640D0A00     
  1753 0000023C 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1753 00000245 4F530D0A00         
  1754 0000024A 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1755                                  ;=======================================================================================================================
  1756                                  ;
  1757                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1758                                  ;
  1759                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1760                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1761                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1762                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1763                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1764                                  ;
  1765                                  ;=======================================================================================================================
  1766                                  ;=======================================================================================================================
  1767                                  ;
  1768                                  ;       Kernel Tables
  1769                                  ;
  1770                                  ;=======================================================================================================================
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1774                                  ;
  1775                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1776                                  ;       first descriptor must be all nulls.
  1777                                  ;
  1778                                  ;       6   5         4         3         2         1         0
  1779                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1780                                  ;       ----------------------------------------------------------------
  1781                                  ;       h......hffffmmmma......ab......................bn..............n
  1782                                  ;
  1783                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1784                                  ;               ffff                                                            flags
  1785                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1786                                  ;                       a......a                                                access
  1787                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1788                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1789                                  ;
  1790                                  ;       00000000                                                                all areas have base addresses below 2^24
  1791                                  ;               0...                                                            single-byte size granularity
  1792                                  ;               1...                                                            4-kilobyte size granularity
  1793                                  ;               .0..                                                            16-bit default for code segments
  1794                                  ;               .1..                                                            32-bit default for code segments
  1795                                  ;               ..0.                                                            intel-reserved; should be zero
  1796                                  ;               ...0                                                            available for operating system use
  1797                                  ;                   0000                                                        segment is less than 2^16 in size
  1798                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1799                                  ;                       1.......                                                segment is present in memory
  1800                                  ;                       .00.....                                                segment is of privilege level 0
  1801                                  ;                       ...0....                                                segment is of system or gate type
  1802                                  ;                       ...00010                                                local decriptor table (LDT)
  1803                                  ;                       ...01001                                                task state segment (TSS) available
  1804                                  ;                       ...01011                                                task state segment (TSS) busy
  1805                                  ;                       ...10...                                                data segment
  1806                                  ;                       ...10011                                                writable data (accessed)
  1807                                  ;                       ...11...                                                code segment
  1808                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1809                                  ;
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  section                 gdt                                                     ;global descriptor table
  1812 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1813 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1814 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1815 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1816 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1817 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1818 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1819 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1820 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1821 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1822 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1823 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1824 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1825 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1826 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1830                                  ;
  1831                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1832                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1833                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1834                                  ;
  1835                                  ;       6   5         4         3         2         1         0
  1836                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1837                                  ;       ----------------------------------------------------------------
  1838                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1839                                  ;
  1840                                  ;       h...h   high-order offset (bits 16-31)
  1841                                  ;       P       present (0=unused interrupt)
  1842                                  ;       zz      descriptor privilege level
  1843                                  ;       S       storage segment (must be zero for IDT)
  1844                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1845                                  ;       S...S   handling code selector in GDT
  1846                                  ;       l...l   lo-order offset (bits 0-15)
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  section                 idt                                                     ;interrupt descriptor table
  1850                                                          mint    dividebyzero                                    ;00 divide by zero
  1850                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1850 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1851                                                          mint    singlestep                                      ;01 single step
  1851                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1851 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1852                                                          mint    nmi                                             ;02 non-maskable
  1852                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1852 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1853                                                          mint    break                                           ;03 break
  1853                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1853 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1854                                                          mint    into                                            ;04 into
  1854                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1854 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1855                                                          mint    bounds                                          ;05 bounds
  1855                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1855 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1856                                                          mint    badopcode                                       ;06 bad op code
  1856                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1856 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1857                                                          mint    nocoproc                                        ;07 no coprocessor
  1857                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1857 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1858                                                          mint    doublefault                                     ;08 double-fault
  1858                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1858 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1859                                                          mint    operand                                         ;09 operand
  1859                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1859 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1860                                                          mint    badtss                                          ;0a bad TSS
  1860                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1860 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1861                                                          mint    notpresent                                      ;0b not-present
  1861                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1861 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1862                                                          mint    stacklimit                                      ;0c stack limit
  1862                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1862 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1863                                                          mint    protection                                      ;0d general protection fault
  1863                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1863 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1864                                                          mint    int14                                           ;0e (reserved)
  1864                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1864 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1865                                                          mint    int15                                           ;0f (reserved)
  1865                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1865 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1866                                                          mint    coproccalc                                      ;10 (reserved)
  1866                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1866 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1867                                                          mint    int17                                           ;11 (reserved)
  1867                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1867 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1868                                                          mint    int18                                           ;12 (reserved)
  1868                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1868 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1869                                                          mint    int19                                           ;13 (reserved)
  1869                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1869 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1870                                                          mint    int20                                           ;14 (reserved)
  1870                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1870 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1871                                                          mint    int21                                           ;15 (reserved)
  1871                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1871 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1872                                                          mint    int22                                           ;16 (reserved)
  1872                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1872 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1873                                                          mint    int23                                           ;17 (reserved)
  1873                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1873 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1874                                                          mint    int24                                           ;18 (reserved)
  1874                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1874 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1875                                                          mint    int25                                           ;19 (reserved)
  1875                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1875 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1876                                                          mint    int26                                           ;1a (reserved)
  1876                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1876 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1877                                                          mint    int27                                           ;1b (reserved)
  1877                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1877 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1878                                                          mint    int28                                           ;1c (reserved)
  1878                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1878 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1879                                                          mint    int29                                           ;1d (reserved)
  1879                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1879 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1880                                                          mint    int30                                           ;1e (reserved)
  1880                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1880 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1881                                                          mint    int31                                           ;1f (reserved)
  1881                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1881 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1882                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1882                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1882 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1883                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1883                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1883 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1884                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1884                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1884 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1885                                                          mtrap   com2                                            ;23 IRQ3 com2
  1885                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1885 00000118 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1886                                                          mtrap   com1                                            ;24 IRQ4 com1
  1886                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1886 00000120 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1887                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1887                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1887 00000128 EE084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1888                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1888                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1888 00000130 F4084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1889                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1889                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1889 00000138 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1890                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1890                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1890 00000140 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1891                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1891                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1891 00000148 17094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1892                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1892                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1892 00000150 1D094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1893                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1893                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1893 00000158 23094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1894                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1894                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1894 00000160 A40A4800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1895                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1895                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1895 00000168 A70A4800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1896                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1896                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1896 00000170 AA0A4800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1897                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1897                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1897 00000178 AD0A4800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1898                                                          mtrap   svc                                             ;30 OS services
  1898                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1898 00000180 BE0A4800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1899 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1900                                  ;=======================================================================================================================
  1901                                  ;
  1902                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1903                                  ;
  1904                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1905                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1906                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1907                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1908                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1909                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1910                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1911                                  ;
  1912                                  ;=======================================================================================================================
  1913                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1914                                                          cpu     386                                             ;allow 80386 instructions
  1915                                                          bits    32                                              ;this is 32-bit code
  1916                                  ;=======================================================================================================================
  1917                                  ;
  1918                                  ;       CPU Interrupt Handlers
  1919                                  ;
  1920                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1921                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1922                                  ;
  1923                                  ;=======================================================================================================================
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                  ;
  1926                                  ;       INT0    Divide By Zero
  1927                                  ;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                                          menter  dividebyzero                                    ;divide by zero
  1929                              <1> ?%1 equ ($-$$)
  1930 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1931 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1932 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                  ;
  1935                                  ;       INT1    Single Step
  1936                                  ;
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                                          menter  singlestep                                      ;single step
  1938                              <1> ?%1 equ ($-$$)
  1939 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1940 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1941 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                  ;
  1944                                  ;       INT2    Non-Maskable Interrupt
  1945                                  ;
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                                          menter  nmi                                             ;non-maskable
  1947                              <1> ?%1 equ ($-$$)
  1948 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1949 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1950 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                  ;
  1953                                  ;       INT3    Break
  1954                                  ;
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                                          menter  break                                           ;break
  1956                              <1> ?%1 equ ($-$$)
  1957 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1958 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1959 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                  ;
  1962                                  ;       INT4    Into
  1963                                  ;
  1964                                  ;-----------------------------------------------------------------------------------------------------------------------
  1965                                                          menter  into                                            ;into
  1965                              <1> ?%1 equ ($-$$)
  1966 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1967 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1968 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                  ;
  1971                                  ;       INT5    Bounds
  1972                                  ;
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                                          menter  bounds                                          ;bounds
  1974                              <1> ?%1 equ ($-$$)
  1975 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1976 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1977 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                  ;
  1980                                  ;       INT6    Bad Operation Code
  1981                                  ;
  1982                                  ;-----------------------------------------------------------------------------------------------------------------------
  1983                                                          menter  badopcode                                       ;bad opcode interrupt
  1983                              <1> ?%1 equ ($-$$)
  1984 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1985 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1986 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1987                                  ;-----------------------------------------------------------------------------------------------------------------------
  1988                                  ;
  1989                                  ;       INT7    No Coprocessor
  1990                                  ;
  1991                                  ;-----------------------------------------------------------------------------------------------------------------------
  1992                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1992                              <1> ?%1 equ ($-$$)
  1993 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1994 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1995 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                  ;
  1998                                  ;       INT8    Double Fault
  1999                                  ;
  2000                                  ;-----------------------------------------------------------------------------------------------------------------------
  2001                                                          menter  doublefault                                     ;doublefault interrupt
  2001                              <1> ?%1 equ ($-$$)
  2002 00000060 6A08                                            push    8                                               ;store interrupt nbr
  2003 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  2004 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                  ;
  2007                                  ;       INT9    Operand
  2008                                  ;
  2009                                  ;-----------------------------------------------------------------------------------------------------------------------
  2010                                                          menter  operand                                         ;operand interrupt
  2010                              <1> ?%1 equ ($-$$)
  2011 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  2012 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  2013 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2014                                  ;-----------------------------------------------------------------------------------------------------------------------
  2015                                  ;
  2016                                  ;       INT10   Bad Task State Segment
  2017                                  ;
  2018                                  ;-----------------------------------------------------------------------------------------------------------------------
  2019                                                          menter  badtss                                          ;bad TSS interrupt
  2019                              <1> ?%1 equ ($-$$)
  2020 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  2021 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  2022 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2023                                  ;-----------------------------------------------------------------------------------------------------------------------
  2024                                  ;
  2025                                  ;       INT11   Not Present
  2026                                  ;
  2027                                  ;-----------------------------------------------------------------------------------------------------------------------
  2028                                                          menter  notpresent                                      ;not present interrupt
  2028                              <1> ?%1 equ ($-$$)
  2029 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  2030 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  2031 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2032                                  ;-----------------------------------------------------------------------------------------------------------------------
  2033                                  ;
  2034                                  ;       INT12   Stack Limit
  2035                                  ;
  2036                                  ;-----------------------------------------------------------------------------------------------------------------------
  2037                                                          menter  stacklimit                                      ;stack limit interrupt
  2037                              <1> ?%1 equ ($-$$)
  2038 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  2039 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  2040 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  ;
  2043                                  ;       INT13   General Protection Fault
  2044                                  ;
  2045                                  ;-----------------------------------------------------------------------------------------------------------------------
  2046                                                          menter  protection                                      ;protection fault interrupt
  2046                              <1> ?%1 equ ($-$$)
  2047 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  2048 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  2049 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2050                                  ;-----------------------------------------------------------------------------------------------------------------------
  2051                                  ;
  2052                                  ;       INT14   Reserved
  2053                                  ;
  2054                                  ;-----------------------------------------------------------------------------------------------------------------------
  2055                                                          menter  int14                                           ;(reserved)
  2055                              <1> ?%1 equ ($-$$)
  2056 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  2057 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2058 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2059                                  ;-----------------------------------------------------------------------------------------------------------------------
  2060                                  ;
  2061                                  ;       INT15   Reserved
  2062                                  ;
  2063                                  ;-----------------------------------------------------------------------------------------------------------------------
  2064                                                          menter  int15                                           ;(reserved)
  2064                              <1> ?%1 equ ($-$$)
  2065 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  2066 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2067 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2068                                  ;-----------------------------------------------------------------------------------------------------------------------
  2069                                  ;
  2070                                  ;       INT16   Coprocessor Calculation
  2071                                  ;
  2072                                  ;-----------------------------------------------------------------------------------------------------------------------
  2073                                                          menter  coproccalc                                      ;coprocessor calculation
  2073                              <1> ?%1 equ ($-$$)
  2074 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  2075 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  2076 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  2077                                  ;-----------------------------------------------------------------------------------------------------------------------
  2078                                  ;
  2079                                  ;       INT17   Reserved
  2080                                  ;
  2081                                  ;-----------------------------------------------------------------------------------------------------------------------
  2082                                                          menter  int17                                           ;(reserved)
  2082                              <1> ?%1 equ ($-$$)
  2083 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  2084 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2085 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  2086                                  ;-----------------------------------------------------------------------------------------------------------------------
  2087                                  ;
  2088                                  ;       INT18   Reserved
  2089                                  ;
  2090                                  ;-----------------------------------------------------------------------------------------------------------------------
  2091                                                          menter  int18                                           ;(reserved)
  2091                              <1> ?%1 equ ($-$$)
  2092 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  2093 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2094 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  2095                                  ;-----------------------------------------------------------------------------------------------------------------------
  2096                                  ;
  2097                                  ;       INT19   Reserved
  2098                                  ;
  2099                                  ;-----------------------------------------------------------------------------------------------------------------------
  2100                                                          menter  int19                                           ;(reserved)
  2100                              <1> ?%1 equ ($-$$)
  2101 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  2102 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2103 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  2104                                  ;-----------------------------------------------------------------------------------------------------------------------
  2105                                  ;
  2106                                  ;       INT20   Reserved
  2107                                  ;
  2108                                  ;-----------------------------------------------------------------------------------------------------------------------
  2109                                                          menter  int20                                           ;(reserved)
  2109                              <1> ?%1 equ ($-$$)
  2110 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  2111 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2112 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  2113                                  ;-----------------------------------------------------------------------------------------------------------------------
  2114                                  ;
  2115                                  ;       INT21   Reserved
  2116                                  ;
  2117                                  ;-----------------------------------------------------------------------------------------------------------------------
  2118                                                          menter  int21                                           ;(reserved)
  2118                              <1> ?%1 equ ($-$$)
  2119 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  2120 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2121 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  2122                                  ;-----------------------------------------------------------------------------------------------------------------------
  2123                                  ;
  2124                                  ;       INT22   Reserved
  2125                                  ;
  2126                                  ;-----------------------------------------------------------------------------------------------------------------------
  2127                                                          menter  int22                                           ;(reserved)
  2127                              <1> ?%1 equ ($-$$)
  2128 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  2129 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2130 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  2131                                  ;-----------------------------------------------------------------------------------------------------------------------
  2132                                  ;
  2133                                  ;       INT23   Reserved
  2134                                  ;
  2135                                  ;-----------------------------------------------------------------------------------------------------------------------
  2136                                                          menter  int23                                           ;(reserved)
  2136                              <1> ?%1 equ ($-$$)
  2137 00000102 6A17                                            push    23                                              ;store interrupt nbr
  2138 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2139 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  2140                                  ;-----------------------------------------------------------------------------------------------------------------------
  2141                                  ;
  2142                                  ;       INT24   Reserved
  2143                                  ;
  2144                                  ;-----------------------------------------------------------------------------------------------------------------------
  2145                                                          menter  int24                                           ;(reserved)
  2145                              <1> ?%1 equ ($-$$)
  2146 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  2147 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2148 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  2149                                  ;-----------------------------------------------------------------------------------------------------------------------
  2150                                  ;
  2151                                  ;       INT25   Reserved
  2152                                  ;
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154                                                          menter  int25                                           ;(reserved)
  2154                              <1> ?%1 equ ($-$$)
  2155 00000114 6A19                                            push    25                                              ;store interrupt nbr
  2156 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2157 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  2158                                  ;-----------------------------------------------------------------------------------------------------------------------
  2159                                  ;
  2160                                  ;       INT26   Reserved
  2161                                  ;
  2162                                  ;-----------------------------------------------------------------------------------------------------------------------
  2163                                                          menter  int26                                           ;(reserved)
  2163                              <1> ?%1 equ ($-$$)
  2164 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  2165 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2166 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  ;
  2169                                  ;       INT27   Reserved
  2170                                  ;
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                                          menter  int27                                           ;(reserved)
  2172                              <1> ?%1 equ ($-$$)
  2173 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  2174 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2175 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                  ;
  2178                                  ;       INT28   Reserved
  2179                                  ;
  2180                                  ;-----------------------------------------------------------------------------------------------------------------------
  2181                                                          menter  int28                                           ;(reserved)
  2181                              <1> ?%1 equ ($-$$)
  2182 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  2183 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2184 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186                                  ;
  2187                                  ;       INT29   Reserved
  2188                                  ;
  2189                                  ;-----------------------------------------------------------------------------------------------------------------------
  2190                                                          menter  int29                                           ;(reserved)
  2190                              <1> ?%1 equ ($-$$)
  2191 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  2192 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2193 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;       INT30   Reserved
  2197                                  ;
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                                          menter  int30                                           ;(reserved)
  2199                              <1> ?%1 equ ($-$$)
  2200 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  2201 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2202 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                  ;
  2205                                  ;       INT31   Reserved
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                                          menter  int31                                           ;(reserved)
  2208                              <1> ?%1 equ ($-$$)
  2209 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  2210 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2211 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  2212                                  ;-----------------------------------------------------------------------------------------------------------------------
  2213                                  ;
  2214                                  ;       Routine:        ReportInterrupt
  2215                                  ;
  2216                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2217                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2218                                  ;
  2219                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2220                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2221                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2222                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2223                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2224                                  ;
  2225                                  ;       Out:            N/A             This routine does not exit.
  2226                                  ;
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2229 00000154 06                                              push    es                                              ;save ES at time of interrupt
  2230 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2231 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  2232                                  ;
  2233                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2234                                  ;
  2235                                  ;                       [EBP+56]        EFLAGS
  2236                                  ;                       [EBP+52]        CS
  2237                                  ;                       [EBP+48]        EIP
  2238                                  ;                       [EBP+44]        interrupt number (0-31)
  2239                                  ;                       [EBP+40]        error message address
  2240                                  ;                       [EBP+36]        DS
  2241                                  ;                       [EBP+32]        ES
  2242                                  ;                       [EBP+28]        EAX
  2243                                  ;                       [EBP+24]        ECX
  2244                                  ;                       [EBP+20]        EDX
  2245                                  ;                       [EBP+16]        EBX
  2246                                  ;                       [EBP+12]        ESP
  2247                                  ;                       [EBP+8]         EBP
  2248                                  ;                       [EBP+4]         ESI
  2249                                  ;                       [EBP+0]         EDI
  2250                                  ;
  2251 00000158 0E                                              push    cs                                              ;load code selector ...
  2252 00000159 1F                                              pop     ds                                              ;... into DS
  2253 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2254 0000015C 07                                              pop     es                                              ;... into ES
  2255                                  ;
  2256                                  ;       Display the interrupt report boundary box
  2257                                  ;
  2258 0000015D B10D                                            mov     cl,13                                           ;column
  2259 0000015F B506                                            mov     ch,6                                            ;row
  2260 00000161 B232                                            mov     dl,50                                           ;width
  2261 00000163 B608                                            mov     dh,8                                            ;height
  2262 00000165 B707                                            mov     bh,07h                                          ;attribute
  2263 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2264                                  ;
  2265                                  ;       Display the report header
  2266                                  ;
  2267 0000016C B10F                                            mov     cl,15                                           ;column
  2268 0000016E B507                                            mov     ch,7                                            ;row
  2269 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2270 00000175 E817130000                                      call    SetConsoleString                                ;draw text string
  2271                                  ;
  2272                                  ;       Display the interrupt description label
  2273                                  ;
  2274 0000017A B10F                                            mov     cl,15                                           ;column
  2275 0000017C B508                                            mov     ch,8                                            ;row
  2276 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2277 00000183 E809130000                                      call    SetConsoleString                                ;draw text string
  2278                                  ;
  2279                                  ;       Display the interrupt number
  2280                                  ;
  2281 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2282 0000018B B11A                                            mov     cl,26                                           ;column
  2283 0000018D B508                                            mov     ch,8                                            ;row
  2284 0000018F E87A0F0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2285                                  ;
  2286                                  ;       Display the interrupt name
  2287                                  ;
  2288 00000194 B11D                                            mov     cl,29                                           ;column
  2289 00000196 B508                                            mov     ch,8                                            ;row
  2290 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2291 0000019B E8F1120000                                      call    SetConsoleString                                ;display interrupt description
  2292                                  ;
  2293                                  ;       Display the register values header
  2294                                  ;
  2295 000001A0 B10F                                            mov     cl,15                                           ;column
  2296 000001A2 B50A                                            mov     ch,10                                           ;row
  2297 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2298 000001A9 E8E3120000                                      call    SetConsoleString                                ;draw text string
  2299                                  ;
  2300                                  ;       Display the EAX register label and value
  2301                                  ;
  2302 000001AE B10F                                            mov     cl,15                                           ;column
  2303 000001B0 B50B                                            mov     ch,11                                           ;row
  2304 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2305 000001B7 E8D5120000                                      call    SetConsoleString                                ;draw label
  2306 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2307 000001BF B113                                            mov     cl,19                                           ;column
  2308 000001C1 B50B                                            mov     ch,11                                           ;row
  2309 000001C3 E8600F0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2310                                  ;
  2311                                  ;       Display the ECX register label and value
  2312                                  ;
  2313 000001C8 B10F                                            mov     cl,15                                           ;column
  2314 000001CA B50C                                            mov     ch,12                                           ;row
  2315 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2316 000001D1 E8BB120000                                      call    SetConsoleString                                ;draw label
  2317 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2318 000001D9 B113                                            mov     cl,19                                           ;column
  2319 000001DB B50C                                            mov     ch,12                                           ;row
  2320 000001DD E8460F0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2321                                  ;
  2322                                  ;       Display the EDX register label and value
  2323                                  ;
  2324 000001E2 B10F                                            mov     cl,15                                           ;column
  2325 000001E4 B50D                                            mov     ch,13                                           ;row
  2326 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2327 000001EB E8A1120000                                      call    SetConsoleString                                ;draw label
  2328 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2329 000001F3 B113                                            mov     cl,19                                           ;column
  2330 000001F5 B50D                                            mov     ch,13                                           ;row
  2331 000001F7 E82C0F0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2332                                  ;
  2333                                  ;       Display the EBX register label and value
  2334                                  ;
  2335 000001FC B10F                                            mov     cl,15                                           ;column
  2336 000001FE B50E                                            mov     ch,14                                           ;row
  2337 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2338 00000205 E887120000                                      call    SetConsoleString                                ;draw label
  2339 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2340 0000020D B113                                            mov     cl,19                                           ;column
  2341 0000020F B50E                                            mov     ch,14                                           ;row
  2342 00000211 E8120F0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2343                                  ;
  2344                                  ;       Display the ESI register label and value
  2345                                  ;
  2346 00000216 B11D                                            mov     cl,29                                           ;column
  2347 00000218 B50B                                            mov     ch,11                                           ;row
  2348 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2349 0000021F E86D120000                                      call    SetConsoleString                                ;draw label
  2350 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2351 00000227 B121                                            mov     cl,33                                           ;column
  2352 00000229 B50B                                            mov     ch,11                                           ;row
  2353 0000022B E8F80E0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2354                                  ;
  2355                                  ;       Display the EDI register label and value
  2356                                  ;
  2357 00000230 B11D                                            mov     cl,29                                           ;column
  2358 00000232 B50C                                            mov     ch,12                                           ;row
  2359 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2360 00000239 E853120000                                      call    SetConsoleString                                ;draw label
  2361 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2362 00000241 B121                                            mov     cl,33                                           ;column
  2363 00000243 B50C                                            mov     ch,12                                           ;row
  2364 00000245 E8DE0E0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2365                                  ;
  2366                                  ;       Display the EBP register label and value
  2367                                  ;
  2368 0000024A B11D                                            mov     cl,29                                           ;column
  2369 0000024C B50D                                            mov     ch,13                                           ;row
  2370 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2371 00000253 E839120000                                      call    SetConsoleString                                ;draw label
  2372 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2373 0000025B B121                                            mov     cl,33                                           ;column
  2374 0000025D B50D                                            mov     ch,13                                           ;row
  2375 0000025F E8C40E0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2376                                  ;
  2377                                  ;       Display the DS register label and value
  2378                                  ;
  2379 00000264 B12A                                            mov     cl,42                                           ;column
  2380 00000266 B50B                                            mov     ch,11                                           ;row
  2381 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2382 0000026D E81F120000                                      call    SetConsoleString                                ;draw label
  2383 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2384 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2385 00000278 B12E                                            mov     cl,46                                           ;column
  2386 0000027A B50B                                            mov     ch,11                                           ;row
  2387 0000027C E8B70E0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2388                                  ;
  2389                                  ;       Display the ES register label and value
  2390                                  ;
  2391 00000281 B12A                                            mov     cl,42                                           ;column
  2392 00000283 B50C                                            mov     ch,12                                           ;row
  2393 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2394 0000028A E802120000                                      call    SetConsoleString                                ;draw label
  2395 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2396 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2397 00000295 B12E                                            mov     cl,46                                           ;column
  2398 00000297 B50C                                            mov     ch,12                                           ;row
  2399 00000299 E89A0E0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2400                                  ;
  2401                                  ;       Display the SS register label and value
  2402                                  ;
  2403 0000029E B12A                                            mov     cl,42                                           ;column
  2404 000002A0 B50D                                            mov     ch,13                                           ;row
  2405 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2406 000002A7 E8E5110000                                      call    SetConsoleString                                ;draw label
  2407 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2408 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2409 000002B1 B12E                                            mov     cl,46                                           ;column
  2410 000002B3 B50D                                            mov     ch,13                                           ;row
  2411 000002B5 E87E0E0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2412                                  ;
  2413                                  ;       Display the CS register lable and value
  2414                                  ;
  2415 000002BA B12A                                            mov     cl,42                                           ;column
  2416 000002BC B50E                                            mov     ch,14                                           ;row
  2417 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2418 000002C3 E8C9110000                                      call    SetConsoleString                                ;draw label
  2419 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2420 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2421 000002CE B12E                                            mov     cl,46                                           ;column
  2422 000002D0 B50E                                            mov     ch,14                                           ;row
  2423 000002D2 E8610E0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2424                                  ;
  2425                                  ;       Display the EFLAGS register label and value
  2426                                  ;
  2427 000002D7 B133                                            mov     cl,51                                           ;column
  2428 000002D9 B50B                                            mov     ch,11                                           ;row
  2429 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2430 000002E0 E8AC110000                                      call    SetConsoleString                                ;draw label
  2431 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2432 000002E8 B137                                            mov     cl,55                                           ;column
  2433 000002EA B50B                                            mov     ch,11                                           ;row
  2434 000002EC E8370E0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2435                                  ;
  2436                                  ;       Display the ESP register label and value
  2437                                  ;
  2438 000002F1 B133                                            mov     cl,51                                           ;column
  2439 000002F3 B50D                                            mov     ch,13                                           ;row
  2440 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2441 000002FA E892110000                                      call    SetConsoleString                                ;draw label
  2442 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2443 00000302 B137                                            mov     cl,55                                           ;column
  2444 00000304 B50D                                            mov     ch,13                                           ;row
  2445 00000306 E81D0E0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2446                                  ;
  2447                                  ;       Display the EIP register label and value
  2448                                  ;
  2449 0000030B B133                                            mov     cl,51                                           ;column
  2450 0000030D B50E                                            mov     ch,14                                           ;row
  2451 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2452 00000314 E878110000                                      call    SetConsoleString                                ;draw label
  2453 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2454 0000031C B137                                            mov     cl,55                                           ;column
  2455 0000031E B50E                                            mov     ch,14                                           ;row
  2456 00000320 E8030E0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2457                                  ;
  2458                                  ;       Halt and loop until reset
  2459                                  ;
  2460 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2461 00000326 F4                                              hlt                                                     ;halt processor
  2462 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2463                                  ;-----------------------------------------------------------------------------------------------------------------------
  2464                                  ;
  2465                                  ;       Processor Interrupt Name Strings
  2466                                  ;
  2467                                  ;-----------------------------------------------------------------------------------------------------------------------
  2468 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2468 00000332 6279207A65726F00   
  2469 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2469 00000343 657000             
  2470 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2470 0000034F 626C6520696E746572-
  2470 00000358 7275707400         
  2471 0000035D 427265616B00            czIntBreak              db      "Break",0
  2472 00000363 496E746F00              czIntInto               db      "Into",0
  2473 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2474 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2474 00000378 74696F6E20436F6465-
  2474 00000381 00                 
  2475 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2475 0000038B 6573736F7200       
  2476 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2476 0000039A 756C7400           
  2477 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2478 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2478 000003AF 537461746520536567-
  2478 000003B8 6D656E7400         
  2479 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2479 000003C6 6E7400             
  2480 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2480 000003D2 697400             
  2481 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2481 000003DE 726F74656374696F6E-
  2481 000003E7 204661756C7400     
  2482 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2482 000003F7 6F722043616C63756C-
  2482 00000400 6174696F6E00       
  2483 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2484                                  ;-----------------------------------------------------------------------------------------------------------------------
  2485                                  ;
  2486                                  ;       Processor Interrupt Handling Strings
  2487                                  ;
  2488                                  ;-----------------------------------------------------------------------------------------------------------------------
  2489 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2489 00000418 6C65642070726F6365-
  2489 00000421 73736F7220696E7465-
  2489 0000042A 727275707420686173-
  2489 00000433 206F63637572726564-
  2489 0000043C 3A00               
  2490 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2490 00000447 202300             
  2491 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2491 00000453 206174207468652074-
  2491 0000045C 696D65206F66207468-
  2491 00000465 6520696E7465727275-
  2491 0000046E 70743A00           
  2492 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2493 00000477 4543583A00              czIntECX                db      "ECX:",0
  2494 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2495 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2496 00000486 4553493A00              czIntESI                db      "ESI:",0
  2497 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2498 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2499 00000495 4553503A00              czIntESP                db      "ESP:",0
  2500 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2501 0000049F 2045533A00              czIntES                 db      " ES:",0
  2502 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2503 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2504 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2505 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2506                                  ;-----------------------------------------------------------------------------------------------------------------------
  2507                                  ;
  2508                                  ;       Routine:        DrawTextDialogBox
  2509                                  ;
  2510                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2511                                  ;
  2512                                  ;       In:             CL      upper left column (0-79)
  2513                                  ;                       CH      upper left row (0-24)
  2514                                  ;                       DL      column width, excluding border
  2515                                  ;                       DH      row height, excluding border
  2516                                  ;                       BH      color attribute
  2517                                  ;
  2518                                  ;-----------------------------------------------------------------------------------------------------------------------
  2519 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2520 000004B9 56                                              push    esi                                             ;
  2521 000004BA 57                                              push    edi                                             ;
  2522 000004BB 06                                              push    es                                              ;
  2523 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2524 000004BE 07                                              pop     es                                              ;... into ES
  2525                                  ;
  2526                                  ;       Compute target display offset
  2527                                  ;
  2528 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2529 000004C1 88E8                                            mov     al,ch                                           ;row
  2530 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2531 000004C5 F6E4                                            mul     ah                                              ;row offset
  2532 000004C7 00C8                                            add     al,cl                                           ;add column
  2533 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2534 000004CC 00C8                                            add     al,cl                                           ;add column
  2535 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2536 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2537                                  ;
  2538                                  ;       Display top border row
  2539                                  ;
  2540 000004D3 57                                              push    edi                                             ;save target row offset
  2541 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2542 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2543 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2544 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2545 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2546 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2547 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2548 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2549 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2550 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2551 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2552                                  ;
  2553                                  ;       Display dialog box body rows
  2554                                  ;
  2555 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2556 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2557 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2558 000004F3 57                                              push    edi                                             ;save target row offset
  2559 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2560 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2561 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2562 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2563 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2564 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2565 00000500 F366AB                                          rep     stosw                                           ;display row
  2566 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2567 00000505 66AB                                            stosw                                                   ;display character and attribute
  2568 00000507 5F                                              pop     edi                                             ;restore target row offset
  2569 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2570 0000050E 59                                              pop     ecx                                             ;remaining rows
  2571 0000050F E2E1                                            loop    .10                                             ;next row
  2572                                  ;
  2573                                  ;       Display bottom border row
  2574                                  ;
  2575 00000511 57                                              push    edi                                             ;save target row offset
  2576 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2577 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2578 00000516 66AB                                            stosw                                                   ;display character and attribute
  2579 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2580 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2581 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2582 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2583 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2584 00000523 66AB                                            stosw                                                   ;display character and attribute
  2585 00000525 5F                                              pop     edi                                             ;restore target row offset
  2586 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2587                                  ;
  2588                                  ;       Restore and return
  2589                                  ;
  2590 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2591 0000052D 5F                                              pop     edi                                             ;
  2592 0000052E 5E                                              pop     esi                                             ;
  2593 0000052F 59                                              pop     ecx                                             ;
  2594 00000530 C3                                              ret                                                     ;return
  2595                                  ;=======================================================================================================================
  2596                                  ;
  2597                                  ;       Hardware Device Interupts
  2598                                  ;
  2599                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2600                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2601                                  ;       (BX=2028h).
  2602                                  ;
  2603                                  ;=======================================================================================================================
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                  ;
  2606                                  ;       IRQ0    Clock Tick Interrupt
  2607                                  ;
  2608                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2609                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2610                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2611                                  ;
  2612                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2613                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2614                                  ;
  2615                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2616                                  ;       zero, the floppy disk motors are turned off.
  2617                                  ;
  2618                                  ;-----------------------------------------------------------------------------------------------------------------------
  2619                                                          menter  clocktick                                       ;clock tick interrupt
  2619                              <1> ?%1 equ ($-$$)
  2620 00000531 50                                              push    eax                                             ;save non-volatile regs
  2621 00000532 52                                              push    edx                                             ;
  2622 00000533 1E                                              push    ds                                              ;
  2623                                  ;
  2624                                  ;       Update the clock tick count and the elapsed days as needed.
  2625                                  ;
  2626 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2627 00000536 1F                                              pop     ds                                              ;... into data segment register
  2628 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2629 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2630 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2631 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2632 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2633 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2634 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2635                                  ;
  2636                                  ;       Decrement floppy disk motor timeout.
  2637                                  ;
  2638 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2639 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2640 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2641 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2642                                  ;
  2643                                  ;       Turn off the floppy disk motor if appropriate.
  2644                                  ;
  2645 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2646 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2647 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2648 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2649 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2650 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2651 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2652 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2653 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2654 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2655 00000577 EE                                              out     dx,al                                           ;turn motor off
  2656                                  ;
  2657                                  ;       Signal the end of the hardware interrupt.
  2658                                  ;
  2659 00000578 E8790F0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2660                                  ;
  2661                                  ;       Restore and return.
  2662                                  ;
  2663 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2664 0000057E 5A                                              pop     edx                                             ;
  2665 0000057F 58                                              pop     eax                                             ;
  2666 00000580 CF                                              iretd                                                   ;return
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                  ;
  2669                                  ;       IRQ1    Keyboard Interrupt
  2670                                  ;
  2671                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2672                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2673                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2674                                  ;       ALL modified registers upon return.
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                                          menter  keyboard                                        ;keyboard interrrupt
  2677                              <1> ?%1 equ ($-$$)
  2678 00000581 50                                              push    eax                                             ;save non-volatile regs
  2679 00000582 53                                              push    ebx                                             ;
  2680 00000583 51                                              push    ecx                                             ;
  2681 00000584 56                                              push    esi                                             ;
  2682 00000585 1E                                              push    ds                                              ;
  2683 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2684 00000588 1F                                              pop     ds                                              ;... into data segment register
  2685 00000589 30C0                                            xor     al,al                                           ;zero
  2686 0000058B A21D080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2687 00000590 A21E080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2688 00000595 A21F080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2689 0000059A A220080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2690 0000059F A221080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2691 000005A4 A222080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2692 000005A9 B020                                            mov     al,' '                                          ;space
  2693 000005AB A223080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2694 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2695 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2696 000005B4 20051C080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2697 000005BA 8A1D1A080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2698 000005C0 8A3D1B080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2699 000005C6 E8E00F0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2700 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2701 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2702 000005D3 A21D080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2703 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2704 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2705 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2706 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2707 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2708 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2709 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2710 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2711 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2712 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2713 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2714 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2715 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2716 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2717 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2718 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2719 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2720 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2721 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2722 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2723 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2724 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2725 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2726 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2727 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2728 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2729 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2730 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2731 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2732 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2733 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2734 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2735 00000654 E8520F0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2736 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2737 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2738 00000661 A21E080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2739 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2740 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2741 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2742 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2743 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2744 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2745 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2746 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2747 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2748 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2749 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2750 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2751 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2752 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2753 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2754 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2755 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2756 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2757 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2758 0000069C E80A0F0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2759 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2760 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2761 000006A9 A21F080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2762 000006AE E8F80E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2763 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2764 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2765 000006BB A220080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2766 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2767 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2768 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2769 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2770 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2771 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2772 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2773 000006D1 E8A60E0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2774 000006D6 881D1A080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2775 000006DC 883D1B080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2776 000006E2 E8B90A0000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2777 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2778 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2779 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2780 000006F1 E8B50E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2781 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2782 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2783 000006FE A21E080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2784 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2785 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2786 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2787 0000070E E8980E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2788 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2789 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2790 0000071B A21F080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2791 00000720 E8860E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2792 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2793 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2794 0000072D A220080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2795 00000732 E8740E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2796 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2797 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2798 0000073F A221080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2799 00000744 E8620E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2800 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2801 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2802 0000074D A222080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2803 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2804 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2805 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2806 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2807 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2808 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2809 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2810 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2811 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2812 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2813 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2814 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2815 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2816 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2817 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2818 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2819 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2820 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2821 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2822 00000787 A223080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2823 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2824 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2825 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2826 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2827 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2828 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2829 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2830 000007A4 50                                              push    eax                                             ;save codes
  2831 000007A5 E8420C0000                                      call    PutMessage                                      ;put message to console
  2832 000007AA 58                                              pop     eax                                             ;restore codes
  2833 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2834 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2835 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2836 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2837 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2838 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2839 000007BD E82A0C0000                                      call    PutMessage                                      ;put message to console
  2840 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2841 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2842 000007C6 08051C080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2843 000007CC E877090000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2844 000007D1 E8200D0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2845 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2846 000007D7 5E                                              pop     esi                                             ;
  2847 000007D8 59                                              pop     ecx                                             ;
  2848 000007D9 5B                                              pop     ebx                                             ;
  2849 000007DA 58                                              pop     eax                                             ;
  2850 000007DB CF                                              iretd                                                   ;return
  2851                                  ;-----------------------------------------------------------------------------------------------------------------------
  2852                                  ;       Scan-Code to ASCII Translation Tables
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2855 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2856 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2857 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2858 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2859 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2860 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2861 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2862 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2863 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2864 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2865 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2866 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2867 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2868 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2869 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2870 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2871 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2872 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2873 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2874 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2875 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2876 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2877 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2878 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2879 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2880 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2881 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2882 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2883 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2884 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2885 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2886                                  ;-----------------------------------------------------------------------------------------------------------------------
  2887                                  ;
  2888                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2889                                  ;
  2890                                  ;-----------------------------------------------------------------------------------------------------------------------
  2891                                                          menter  iochannel                                       ;secondary 8259A cascade
  2891                              <1> ?%1 equ ($-$$)
  2892 000008DC 50                                              push    eax                                             ;save modified regs
  2893 000008DD E9D5010000                                      jmp     hwint                                           ;end interrupt and return
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895                                  ;
  2896                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2897                                  ;
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                                          menter  com2                                            ;serial port 2 interrupt
  2899                              <1> ?%1 equ ($-$$)
  2900 000008E2 50                                              push    eax                                             ;save modified regs
  2901 000008E3 E9CF010000                                      jmp     hwint                                           ;end interrupt and return
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2905                                  ;
  2906                                  ;-----------------------------------------------------------------------------------------------------------------------
  2907                                                          menter  com1                                            ;serial port 1 interrupt
  2907                              <1> ?%1 equ ($-$$)
  2908 000008E8 50                                              push    eax                                             ;save modified regs
  2909 000008E9 E9C9010000                                      jmp     hwint                                           ;end interrupt and return
  2910                                  ;-----------------------------------------------------------------------------------------------------------------------
  2911                                  ;
  2912                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2913                                  ;
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2915                              <1> ?%1 equ ($-$$)
  2916 000008EE 50                                              push    eax                                             ;save modified regs
  2917 000008EF E9C3010000                                      jmp     hwint                                           ;end interrupt and return
  2918                                  ;-----------------------------------------------------------------------------------------------------------------------
  2919                                  ;
  2920                                  ;       IRQ6    Diskette Hardware Interrupt
  2921                                  ;
  2922                                  ;-----------------------------------------------------------------------------------------------------------------------
  2923                                                          menter  diskette                                        ;floppy disk interrupt
  2923                              <1> ?%1 equ ($-$$)
  2924 000008F4 50                                              push    eax                                             ;save non-volatile regs
  2925 000008F5 1E                                              push    ds                                              ;
  2926 000008F6 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2927 000008F8 1F                                              pop     ds                                              ;... into DS register
  2928 000008F9 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2929 000008FE 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2930 00000900 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2931 00000905 1F                                              pop     ds                                              ;restore non-volatile regs
  2932 00000906 E9AC010000                                      jmp     hwint                                           ;end primary PIC interrupt
  2933                                  ;-----------------------------------------------------------------------------------------------------------------------
  2934                                  ;
  2935                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2936                                  ;
  2937                                  ;-----------------------------------------------------------------------------------------------------------------------
  2938                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2938                              <1> ?%1 equ ($-$$)
  2939 0000090B 50                                              push    eax                                             ;save modified regs
  2940 0000090C E9A6010000                                      jmp     hwint                                           ;end interrupt and return
  2941                                  ;-----------------------------------------------------------------------------------------------------------------------
  2942                                  ;
  2943                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2944                                  ;
  2945                                  ;-----------------------------------------------------------------------------------------------------------------------
  2946                                                          menter  rtclock                                         ;real-time clock interrupt
  2946                              <1> ?%1 equ ($-$$)
  2947 00000911 50                                              push    eax                                             ;save modified regs
  2948 00000912 E999010000                                      jmp     hwwint                                          ;end interrupt and return
  2949                                  ;-----------------------------------------------------------------------------------------------------------------------
  2950                                  ;
  2951                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2952                                  ;
  2953                                  ;-----------------------------------------------------------------------------------------------------------------------
  2954                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2954                              <1> ?%1 equ ($-$$)
  2955 00000917 50                                              push    eax                                             ;save modified regs
  2956 00000918 E993010000                                      jmp     hwwint                                          ;end interrupt and return
  2957                                  ;-----------------------------------------------------------------------------------------------------------------------
  2958                                  ;
  2959                                  ;       IRQ10   Reserved Hardware Interrupt
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                                          menter  irq10                                           ;reserved
  2962                              <1> ?%1 equ ($-$$)
  2963 0000091D 50                                              push    eax                                             ;save modified regs
  2964 0000091E E98D010000                                      jmp     hwwint                                          ;end interrupt and return
  2965                                  ;-----------------------------------------------------------------------------------------------------------------------
  2966                                  ;
  2967                                  ;       IRQ11   Reserved Hardware Interrupt
  2968                                  ;
  2969                                  ;       Repurpose for Intel 82545 EM Ethernet adapter hardware interrupt.
  2970                                  ;
  2971                                  ;-----------------------------------------------------------------------------------------------------------------------
  2972                                                          menter  irq11                                           ;reserved
  2972                              <1> ?%1 equ ($-$$)
  2973 00000923 50                                              push    eax                                             ;save non-volatile regs
  2974 00000924 53                                              push    ebx                                             ;
  2975 00000925 51                                              push    ecx                                             ;
  2976 00000926 57                                              push    edi                                             ;
  2977 00000927 1E                                              push    ds                                              ;
  2978 00000928 06                                              push    es                                              ;
  2979                                  ;
  2980                                  ;       Mask IRQ 11 to prevent reentrance.
  2981                                  ;
  2982 00000929 E4A1                                            in      al,0A1h                                         ;secondary PIC mask
  2983 0000092B 0C08                                            or      al,008h                                         ;set (mask) bit 3 (IRQ 11)
  2984 0000092D E6A1                                            out     0A1h,al                                         ;mask IRQ 11
  2985                                  ;
  2986                                  ;       enable maskable interrupts.
  2987                                  ;
  2988 0000092F FB                                              sti                                                     ;enable maskable interrupts
  2989                                  ;
  2990                                  ;       Setup addressability.
  2991                                  ;
  2992 00000930 6A18                                            push    EGDTOSDATA                                      ;load OS data selector...
  2993 00000932 1F                                              pop     ds                                              ;...into DS
  2994 00000933 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  2995 00000935 07                                              pop     es                                              ;...into ES
  2996                                  ;
  2997                                  ;       Notify OIA of the interrupt state '0'
  2998                                  ;
  2999 00000936 BF520F0000                                      mov     edi,24*160+82                                   ;row and column offset
  3000 0000093B B07C                                            mov     al,'|'
  3001 0000093D 268A27                                          mov     ah,[es:edi]
  3002 00000940 38C4                                            cmp     ah,al
  3003 00000942 B02F                                            mov     al,'/'
  3004 00000944 7412                                            je      irq11.01
  3005 00000946 38C4                                            cmp     ah,al
  3006 00000948 B02D                                            mov     al,'-'
  3007 0000094A 740C                                            je      irq11.01
  3008 0000094C 38C4                                            cmp     ah,al
  3009 0000094E B05C                                            mov     al,'\'
  3010 00000950 7406                                            je      irq11.01
  3011 00000952 38C4                                            cmp     ah,al
  3012 00000954 B07C                                            mov     al,'|'
  3013 00000956 7400                                            je      irq11.01
  3014 00000958 B407                    irq11.01                mov     ah,007h
  3015 0000095A 26668907                                        mov     word [es:edi+0],ax                              ;indicator character and attribute
  3016                                  ;
  3017                                  ;       Read pending interrupt status
  3018                                  ;
  3019 0000095E BB4A090000                                      mov     ebx,wsConsoleEther                              ;ETHER struct address
  3020 00000963 8B4B14                                          mov     ecx,[ebx+ETHER.mmio]                            ;memory mapped I/O address
  3021 00000966 E361                                            jecxz   irq11.90                                        ;exit if no MMIO
  3022 00000968 2666C747024D07                                  mov     word [es:edi+2],074Dh                           ;MMIO indicator 'M'
  3023                                  ;
  3024                                  ;       Read the pending interrupt status
  3025                                  ;
  3026 0000096F 8B91C0000000                                    mov     edx,[ecx+EI825REGICR]                           ;interrupt cause read register
  3027 00000975 F6C204                                          test    dl,EI825ICRLSC                                  ;link status change?
  3028 00000978 7410                                            jz      irq11.10                                        ;no, branch
  3029 0000097A 80E2FB                                          and     dl,~EI825ICRLSC                                 ;clear link status change bit
  3030 0000097D 8B01                                            mov     eax,[ecx+EI825REGCTRL]                          ;control register
  3031 0000097F 0C40                                            or      al,EI825CTRLSLU                                 ;set link up bit
  3032 00000981 8901                                            mov     [ecx+EI825REGCTRL],eax                          ;update control register
  3033 00000983 2666C747044C07                                  mov     word [es:edi+4],074Ch                           ;link status change indicator 'L'
  3034                                  ;
  3035                                  ;       Handle receive underrun / min threshold
  3036                                  ;
  3037 0000098A F6C250                  irq11.10                test    dl,EI825ICRRXO|EI825ICRRXDMT0                   ;rx overrun or rx descr min threshold rcd?
  3038 0000098D 740C                                            jz      irq11.20                                        ;no, branch
  3039 0000098F 80E2AF                                          and     dl,~(EI825ICRRXO|EI825ICRRXDMT0)                ;clear rx overrun and rx descr min thr rcd
  3040 00000992 2666C747065507                                  mov     word [es:edi+6],0755h                           ;notify OIA of underrun ('U')
  3041 00000999 EB0F                                            jmp     irq11.30                                        ;continue to rx poll
  3042                                  ;
  3043                                  ;       check if packet is pending
  3044                                  ;
  3045 0000099B F6C280                  irq11.20                test    dl,EI825ICRRXT0                                 ;packet pending?
  3046 0000099E 7411                                            jz      irq11.40                                        ;no, branch
  3047 000009A0 80E27F                                          and     dl,~EI825ICRRXT0                                ;clear packet pending
  3048 000009A3 2666C747085007                                  mov     word [es:edi+8],0750h                           ;notify OIA of packet ('P')
  3049                                  ;
  3050                                  ;       do rx poll
  3051 000009AA 52                      irq11.30                push    edx
  3052 000009AB E833000000                                      call    EtherRxPoll
  3053 000009B0 5A                                              pop     edx
  3054                                  
  3055                                  
  3056 000009B1 85D2                    irq11.40                test    edx,edx                                         ;unhandled int?
  3057 000009B3 7407                                            jz      irq11.50                                        ;no, branch
  3058 000009B5 2666C7470A3F07                                  mov     word [es:edi+10],073Fh                          ;notify OIA of unhandled ('?')
  3059                                  ;
  3060                                  ;       Read the pending interrupt status
  3061                                  ;
  3062 000009BC 8B91C0000000            irq11.50                mov     edx,[ecx+EI825REGICR]                           ;clear pending int status
  3063                                  ;
  3064                                  ;       Notify OIA of the interrupt state '2'
  3065                                  ;
  3066 000009C2 2666C7470C3207                                  mov     word [es:edi+12],0732h
  3067                                  ;
  3068                                  ;       Enable IRQ 11
  3069                                  ;
  3070 000009C9 E4A1                    irq11.90                in      al,0A1h                                         ;mask settings
  3071 000009CB 24F7                                            and     al,0F7h                                         ;clear (unmask) bit 3 (IRA 11)
  3072 000009CD E6A1                                            out     0A1h,al                                         ;unmask IRQ 11
  3073                                  ;
  3074                                  ;       End the IRQ interrupt
  3075                                  ;
  3076 000009CF B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3077 000009D1 E6A0                                            out     0A0h,al                                         ;secondary 8259 PIC command port
  3078 000009D3 E620                                            out     020h,al                                         ;primary 8259 PIC ocmmand port
  3079                                  ;
  3080                                  ;       Notify OIA of the interrupt state '3'
  3081                                  ;
  3082 000009D5 2666C7470E3307                                  mov     word [es:edi+14],0733h
  3083                                  ;
  3084                                  ;       Restore and return.
  3085                                  ;
  3086 000009DC 07                                              pop     es                                              ;restore non-volatile regs
  3087 000009DD 1F                                              pop     ds                                              ;
  3088 000009DE 5F                                              pop     edi                                             ;
  3089 000009DF 59                                              pop     ecx                                             ;
  3090 000009E0 5B                                              pop     ebx                                             ;
  3091 000009E1 58                                              pop     eax                                             ;
  3092 000009E2 CF                                              iretd                                                   ;return from interrupt
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094                                  ;
  3095                                  ;       In:             EBX     wsConsoleEther
  3096                                  ;
  3097                                  ;-----------------------------------------------------------------------------------------------------------------------
  3098 000009E3 53                      EtherRxPoll             push    ebx                                             ;save non-volatile regs
  3099 000009E4 51                                              push    ecx                                             ;
  3100 000009E5 57                                              push    edi                                             ;
  3101 000009E6 1E                                              push    ds                                              ;
  3102 000009E7 06                                              push    es                                              ;
  3103                                  ;
  3104                                  ;       Setup addressability.
  3105                                  ;
  3106 000009E8 6A20                                            push    EGDTCGA
  3107 000009EA 07                                              pop     es
  3108 000009EB 6A18                                            push    EGDTOSDATA
  3109 000009ED 1F                                              pop     ds
  3110 000009EE BB4A090000                                      mov     ebx,wsConsoleEther                              ;ETHER base address
  3111 000009F3 BF620F0000                                      mov     edi,24*160+98
  3112 000009F8 2666C7074007            .01                     mov     word [es:edi+0],0740h                           ;indicate in RxPoll
  3113                                  ;
  3114                                  ;       Get the status of the tail descriptor
  3115                                  ;
  3116 000009FE 8B4B28                                          mov     ecx,[ebx+ETHER.rxtail]                          ;receive tail
  3117 00000A01 83F910                                          cmp     ecx,ENETRXDESCCT                                ;range test
  3118 00000A04 7205                                            jb      .02                                             ;branch if ok
  3119 00000A06 31C9                                            xor     ecx,ecx                                         ;reset
  3120 00000A08 894B28                                          mov     [ebx+ETHER.rxtail],ecx                          ;update tail
  3121 00000A0B C1E104                  .02                     shl     ecx,4                                           ;tail * 16
  3122 00000A0E 034B24                                          add     ecx,[ebx+ETHER.rxbase]                          ;ECX = tail address
  3123                                  ;
  3124                                  ;       Check status and errors.
  3125                                  ;
  3126 00000A11 31C0                                            xor     eax,eax                                         ;zero register
  3127 00000A13 8A410C                                          mov     al,[ecx+I825RXDESC.status]                      ;status
  3128                                  
  3129 00000A16 88C4                                            mov     ah,al
  3130 00000A18 C0E804                                          shr     al,4
  3131 00000A1B 0C30                                            or      al,30h
  3132 00000A1D 3C3A                                            cmp     al,3ah
  3133 00000A1F 7202                                            jb      .04
  3134 00000A21 0407                                            add     al,7
  3135 00000A23 2688470A                .04                     mov     [es:edi+10],al
  3136 00000A27 88E0                                            mov     al,ah
  3137 00000A29 240F                                            and     al,0fh
  3138 00000A2B 0C30                                            or      al,30h
  3139 00000A2D 3C3A                                            cmp     al,3ah
  3140 00000A2F 7202                                            jb      .06
  3141 00000A31 0407                                            add     al,7
  3142 00000A33 2688470C                .06                     mov     [es:edi+12],al
  3143                                  
  3144 00000A37 31C0                                            xor     eax,eax
  3145 00000A39 8A410C                                          mov     al,[ecx+I825RXDESC.status]
  3146 00000A3C A801                                            test    al,1                                            ;descriptor done?
  3147 00000A3E 745E                                            jz      .90                                             ;no, branch
  3148                                  
  3149 00000A40 2666C7074107                                    mov     word [es:edi+0],0741h                           ;descriptor done indicator
  3150                                  
  3151 00000A46 668B4108                                        mov     ax,[ecx+I825RXDESC.length]                      ;packet lenth
  3152 00000A4A 6683F83C                                        cmp     ax,60                                           ;short packet?
  3153 00000A4E 7308                                            jae     .07                                             ;no, branch
  3154 00000A50 2666C7074207                                    mov     word [es:edi+0],0742h
  3155 00000A56 EB23                                            jmp     .10
  3156                                  
  3157 00000A58 A802                    .07                     test    al,2                                            ;end-of-packet?
  3158 00000A5A 7508                                            jnz     .08                                             ;yes, branch
  3159 00000A5C 2666C7074307                                    mov     word [es:edi+0],0743h
  3160 00000A62 EB17                                            jmp     .10
  3161                                  
  3162 00000A64 8A410D                  .08                     mov     al,[ecx+I825RXDESC.errors]                      ;packet errors
  3163 00000A67 84C0                                            test    al,al                                           ;errors?
  3164 00000A69 7408                                            jz      .09                                             ;no, branch
  3165 00000A6B 2666C7074407                                    mov     word [es:edi+0],0744h
  3166 00000A71 EB08                                            jmp     .10
  3167                                  ;
  3168                                  ;       Pass packet to network layer
  3169                                  ;
  3170 00000A73 8B01                    .09                     mov     eax,[ecx+I825RXDESC.addresslo]
  3171 00000A75 2666C7074507                                    mov     word [es:edi+0],0745h                           ;network layer indicator ('E')
  3172                                  ;
  3173                                  ;       Update counter, status, tail
  3174                                  ;
  3175 00000A7B FF432C                  .10                     inc     dword [ebx+ETHER.rxcount]
  3176 00000A7E C6410C00                                        mov     byte [ecx+I825RXDESC.status],0
  3177 00000A82 8B4328                                          mov     eax,[ebx+ETHER.rxtail]
  3178 00000A85 40                                              inc     eax
  3179 00000A86 83F810                                          cmp     eax,ENETRXDESCCT
  3180 00000A89 7202                                            jb      .20
  3181 00000A8B 31C0                                            xor     eax,eax
  3182 00000A8D 894328                  .20                     mov     [ebx+ETHER.rxtail],eax
  3183                                  ;
  3184                                  ;       Update active tail
  3185                                  ;
  3186 00000A90 8B4B14                                          mov     ecx,[ebx+ETHER.mmio]                            ;mapped memory i/o address
  3187 00000A93 898118280000                                    mov     [ecx+EI825REGRDT],eax                           ;update receive tail register
  3188 00000A99 E95AFFFFFF                                      jmp     .01                                             ;next
  3189                                  ;
  3190                                  ;       Restore and return.
  3191                                  ;
  3192 00000A9E 07                      .90                     pop     es                                              ;restore non-volatile regs
  3193 00000A9F 1F                                              pop     ds                                              ;
  3194 00000AA0 5F                                              pop     edi                                             ;
  3195 00000AA1 59                                              pop     ecx                                             ;
  3196 00000AA2 5B                                              pop     ebx                                             ;
  3197 00000AA3 C3                                              ret                                                     ;return
  3198                                  ;-----------------------------------------------------------------------------------------------------------------------
  3199                                  ;
  3200                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  3201                                  ;
  3202                                  ;-----------------------------------------------------------------------------------------------------------------------
  3203                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  3203                              <1> ?%1 equ ($-$$)
  3204 00000AA4 50                                              push    eax                                             ;save modified regs
  3205 00000AA5 EB09                                            jmp     hwwint                                          ;end interrupt and return
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207                                  ;
  3208                                  ;       IRQ13   Coprocessor Hardware Interrupt
  3209                                  ;
  3210                                  ;-----------------------------------------------------------------------------------------------------------------------
  3211                                                          menter  coprocessor                                     ;coprocessor interrupt
  3211                              <1> ?%1 equ ($-$$)
  3212 00000AA7 50                                              push    eax                                             ;save modified regs
  3213 00000AA8 EB06                                            jmp     hwwint                                          ;end interrupt and return
  3214                                  ;-----------------------------------------------------------------------------------------------------------------------
  3215                                  ;
  3216                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  3217                                  ;
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219                                                          menter  fixeddisk                                       ;fixed disk interrupt
  3219                              <1> ?%1 equ ($-$$)
  3220 00000AAA 50                                              push    eax                                             ;save modified regs
  3221 00000AAB EB03                                            jmp     hwwint                                          ;end interrupt and return
  3222                                  ;-----------------------------------------------------------------------------------------------------------------------
  3223                                  ;
  3224                                  ;       IRQ15   Reserved Hardware Interrupt
  3225                                  ;
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227                                                          menter  irq15                                           ;reserved
  3227                              <1> ?%1 equ ($-$$)
  3228 00000AAD 50                                              push    eax                                             ;save modified regs
  3229 00000AAE EB00                                            jmp     hwwint                                          ;end interrupt and return
  3230                                  ;-----------------------------------------------------------------------------------------------------------------------
  3231                                  ;
  3232                                  ;       Exit from hardware interrupt
  3233                                  ;
  3234                                  ;-----------------------------------------------------------------------------------------------------------------------
  3235 00000AB0 E8470A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  3236 00000AB5 EB05                                            jmp     hwint90                                         ;skip ahead
  3237 00000AB7 E83A0A0000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  3238 00000ABC 58                      hwint90                 pop     eax                                             ;restore modified regs
  3239 00000ABD CF                                              iretd                                                   ;return from interrupt
  3240                                  ;-----------------------------------------------------------------------------------------------------------------------
  3241                                  ;
  3242                                  ;       INT 30h Operating System Software Service Interrupt
  3243                                  ;
  3244                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  3245                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  3246                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  3247                                  ;       the entry address of the specific function from a table.
  3248                                  ;
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                                          menter  svc
  3250                              <1> ?%1 equ ($-$$)
  3251 00000ABE 3C1E                                            cmp     al,maxtsvc                                      ;is our function out of range?
  3252 00000AC0 730D                                            jae     svc90                                           ;yes, skip ahead
  3253 00000AC2 0FB6C0                                          movzx   eax,al                                          ;function
  3254 00000AC5 C1E002                                          shl     eax,2                                           ;offset into table
  3255 00000AC8 2EFF90[D00A0000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  3256 00000ACF CF                      svc90                   iretd                                                   ;return from interrupt
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  ;
  3259                                  ;       Service Request Table
  3260                                  ;
  3261                                  ;
  3262                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  3263                                  ;
  3264                                  ;-----------------------------------------------------------------------------------------------------------------------
  3265                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  3265                              <1> tsvc :
  3265                              <1> e%1 equ ($-tsvc)/4
  3265 00000AD0 [6C0D0000]          <1>  dd %1
  3266                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  3266                              <1> e%1 equ ($-tsvc)/4
  3266 00000AD4 [14140000]          <1>  dd %1
  3267                                                          tsvce   CompareMemory                                   ;compare memory
  3267                              <1> e%1 equ ($-tsvc)/4
  3267 00000AD8 [C70F0000]          <1>  dd %1
  3268                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  3268                              <1> e%1 equ ($-tsvc)/4
  3268 00000ADC [81120000]          <1>  dd %1
  3269                                                          tsvce   FreeMemory                                      ;free memory block
  3269                              <1> e%1 equ ($-tsvc)/4
  3269 00000AE0 [8A0E0000]          <1>  dd %1
  3270                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  3270                              <1> e%1 equ ($-tsvc)/4
  3270 00000AE4 [A1140000]          <1>  dd %1
  3271                                                          tsvce   GetConsoleString                                ;get string input
  3271                              <1> e%1 equ ($-tsvc)/4
  3271 00000AE8 [28100000]          <1>  dd %1
  3272                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  3272                              <1> e%1 equ ($-tsvc)/4
  3272 00000AEC [B2140000]          <1>  dd %1
  3273                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  3273                              <1> e%1 equ ($-tsvc)/4
  3273 00000AF0 [C3140000]          <1>  dd %1
  3274                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  3274                              <1> e%1 equ ($-tsvc)/4
  3274 00000AF4 [B4120000]          <1>  dd %1
  3275                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  3275                              <1> e%1 equ ($-tsvc)/4
  3275 00000AF8 [560B0000]          <1>  dd %1
  3276                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  3276                              <1> e%1 equ ($-tsvc)/4
  3276 00000AFC [CC140000]          <1>  dd %1
  3277                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  3277                              <1> e%1 equ ($-tsvc)/4
  3277 00000B00 [3A120000]          <1>  dd %1
  3278                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  3278                              <1> e%1 equ ($-tsvc)/4
  3278 00000B04 [710B0000]          <1>  dd %1
  3279                                                          tsvce   PutDayString                                    ;put DD string
  3279                              <1> e%1 equ ($-tsvc)/4
  3279 00000B08 [B20B0000]          <1>  dd %1
  3280                                                          tsvce   PutHourString                                   ;put hh string
  3280                              <1> e%1 equ ($-tsvc)/4
  3280 00000B0C [C00B0000]          <1>  dd %1
  3281                                                          tsvce   PutMACString                                    ;put MAC address string
  3281                              <1> e%1 equ ($-tsvc)/4
  3281 00000B10 [D2120000]          <1>  dd %1
  3282                                                          tsvce   PutMinuteString                                 ;put mm string
  3282                              <1> e%1 equ ($-tsvc)/4
  3282 00000B14 [CE0B0000]          <1>  dd %1
  3283                                                          tsvce   PutMonthString                                  ;put MM string
  3283                              <1> e%1 equ ($-tsvc)/4
  3283 00000B18 [DC0B0000]          <1>  dd %1
  3284                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  3284                              <1> e%1 equ ($-tsvc)/4
  3284 00000B1C [EA0B0000]          <1>  dd %1
  3285                                                          tsvce   PutSecondString                                 ;put ss string
  3285                              <1> e%1 equ ($-tsvc)/4
  3285 00000B20 [0E0C0000]          <1>  dd %1
  3286                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  3286                              <1> e%1 equ ($-tsvc)/4
  3286 00000B24 [1B0C0000]          <1>  dd %1
  3287                                                          tsvce   PutWeekdayString                                ;put weekday string
  3287                              <1> e%1 equ ($-tsvc)/4
  3287 00000B28 [500C0000]          <1>  dd %1
  3288                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  3288                              <1> e%1 equ ($-tsvc)/4
  3288 00000B2C [5E0C0000]          <1>  dd %1
  3289                                                          tsvce   PutYearString                                   ;put YYYY string
  3289                              <1> e%1 equ ($-tsvc)/4
  3289 00000B30 [810C0000]          <1>  dd %1
  3290                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  3290                              <1> e%1 equ ($-tsvc)/4
  3290 00000B34 [02150000]          <1>  dd %1
  3291                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  3291                              <1> e%1 equ ($-tsvc)/4
  3291 00000B38 [6D150000]          <1>  dd %1
  3292                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  3292                              <1> e%1 equ ($-tsvc)/4
  3292 00000B3C [F3120000]          <1>  dd %1
  3293                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  3293                              <1> e%1 equ ($-tsvc)/4
  3293 00000B40 [97130000]          <1>  dd %1
  3294                                                          tsvce   UpperCaseString                                 ;upper-case string
  3294                              <1> e%1 equ ($-tsvc)/4
  3294 00000B44 [E40F0000]          <1>  dd %1
  3295                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  3296                                  ;-----------------------------------------------------------------------------------------------------------------------
  3297                                  ;
  3298                                  ;       Service Request Macros
  3299                                  ;
  3300                                  ;       These macros provide positional parameterization of service request calls.
  3301                                  ;
  3302                                  ;-----------------------------------------------------------------------------------------------------------------------
  3303                                  %macro                  allocateMemory 1
  3304                                                          push    ecx                                             ;save non-volatile registers
  3305                                                          mov     ecx,%1                                          ;bytes to allocate
  3306                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  3307                                                          int     _svc                                            ;invoke OS service
  3308                                                          pop     ecx                                             ;restore non-volatile registers
  3309                                  %endmacro
  3310                                  %macro                  clearConsoleScreen 0
  3311                                                          mov     al,eClearConsoleScreen                          ;function code
  3312                                                          int     _svc                                            ;invoke OS service
  3313                                  %endmacro
  3314                                  %macro                  compareMemory 0
  3315                                                          mov     al,eCompareMemory                               ;function code
  3316                                                          int     _svc                                            ;invoke OS service
  3317                                  %endmacro
  3318                                  %macro                  decimalToUnsigned 0
  3319                                                          mov     al,eDecimalToUnsigned                           ;function code
  3320                                                          int     _svc                                            ;invoke OS servie
  3321                                  %endmacro
  3322                                  %macro                  freeMemory 1
  3323                                                          mov     edx,%1                                          ;address of memory block
  3324                                                          mov     al,eFreeMemory                                  ;function code
  3325                                                          int     _svc                                            ;invoke OS service
  3326                                  %endmacro
  3327                                  %macro                  getBaseMemSize 0
  3328                                                          mov     al,eGetBaseMemSize                              ;function code
  3329                                                          int     _svc                                            ;invoke OS service
  3330                                  %endmacro
  3331                                  %macro                  getConsoleString 4
  3332                                                          mov     edx,%1                                          ;buffer address
  3333                                                          mov     ecx,%2                                          ;max characters
  3334                                                          mov     bh,%3                                           ;echo indicator
  3335                                                          mov     bl,%4                                           ;terminator
  3336                                                          mov     al,eGetConsoleString                            ;function code
  3337                                                          int     _svc                                            ;invoke OS service
  3338                                  %endmacro
  3339                                  %macro                  getExtendedMemSize 0
  3340                                                          mov     al,eGetExtendedMemSize                          ;function code
  3341                                                          int     _svc                                            ;invoke OS service
  3342                                  %endmacro
  3343                                  %macro                  getROMMemSize 0
  3344                                                          mov     al,eGetROMMemSize                               ;function code
  3345                                                          int     _svc                                            ;invoke OS service
  3346                                  %endmacro
  3347                                  %macro                  hexadecimalToUnsigned 0
  3348                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  3349                                                          int     _svc                                            ;invoke OS service
  3350                                  %endmacro
  3351                                  %macro                  isLeapYear 1
  3352                                                          mov     ebx,%1                                          ;DATETIME addr
  3353                                                          mov     al,eIsLeapYear                                  ;function code
  3354                                                          int     _svc                                            ;invoke OS service
  3355                                  %endmacro
  3356                                  %macro                  placeCursor 0
  3357                                                          mov     al,ePlaceCursor                                 ;function code
  3358                                                          int     _svc                                            ;invoke OS service
  3359                                  %endmacro
  3360                                  %macro                  putConsoleString 0
  3361                                                          mov     al,ePutConsoleString                            ;function code
  3362                                                          int     _svc                                            ;invoke OS service
  3363                                  %endmacro
  3364                                  %macro                  putConsoleString 1
  3365                                                          mov     edx,%1                                          ;string address
  3366                                                          mov     al,ePutConsoleString                            ;function code
  3367                                                          int     _svc                                            ;invoke OS service
  3368                                  %endmacro
  3369                                  %macro                  putDateString 0
  3370                                                          mov     al,ePutDateString                               ;function code
  3371                                                          int     _svc                                            ;invoke OS service
  3372                                  %endmacro
  3373                                  %macro                  putDateString 2
  3374                                                          mov     ebx,%1                                          ;DATETIME addr
  3375                                                          mov     edx,%2                                          ;output buffer addr
  3376                                                          mov     al,ePutDateString                               ;function code
  3377                                                          int     _svc                                            ;invoke OS service
  3378                                  %endmacro
  3379                                  %macro                  putDayString 2
  3380                                                          mov     ebx,%1                                          ;DATETIME addr
  3381                                                          mov     edx,%2                                          ;output buffer addr
  3382                                                          mov     al,ePutDayString                                ;function code
  3383                                                          int     _svc                                            ;invoke OS service
  3384                                  %endmacro
  3385                                  %macro                  putHourString 2
  3386                                                          mov     ebx,%1                                          ;DATETIME addr
  3387                                                          mov     edx,%2                                          ;output buffer addr
  3388                                                          mov     al,ePutHourString                               ;function code
  3389                                                          int     _svc                                            ;invoke OS service
  3390                                  %endmacro
  3391                                  %macro                  putMACString 1
  3392                                                          mov     edx,%1                                          ;output buffer address
  3393                                                          mov     al,ePutMACString                                ;function code
  3394                                                          int     _svc                                            ;invoke OS service
  3395                                  %endmacro
  3396                                  %macro                  putMinuteString 2
  3397                                                          mov     ebx,%1                                          ;DATETIME addr
  3398                                                          mov     edx,%2                                          ;output buffer addr
  3399                                                          mov     al,ePutMinuteString                             ;function code
  3400                                                          int     _svc                                            ;invoke OS service
  3401                                  %endmacro
  3402                                  %macro                  putMonthString 2
  3403                                                          mov     ebx,%1                                          ;DATETIME addr
  3404                                                          mov     edx,%2                                          ;output buffer addr
  3405                                                          mov     al,ePutMonthString                              ;function code
  3406                                                          int     _svc                                            ;invoke OS service
  3407                                  %endmacro
  3408                                  %macro                  putMonthNameString 2
  3409                                                          mov     ebx,%1                                          ;DATETIME addr
  3410                                                          mov     edx,%2                                          ;output buffer addr
  3411                                                          mov     al,ePutMonthNameString                          ;function code
  3412                                                          int     _svc                                            ;invoke OS service
  3413                                  %endmacro
  3414                                  %macro                  putSecondString 2
  3415                                                          mov     ebx,%1                                          ;DATETIME addr
  3416                                                          mov     edx,%2                                          ;output buffer addr
  3417                                                          mov     al,ePutSecondString                             ;function code
  3418                                                          int     _svc                                            ;invoke OS service
  3419                                  %endmacro
  3420                                  %macro                  putTimeString 0
  3421                                                          mov     al,ePutTimeString                               ;function code
  3422                                                          int     _svc                                            ;invoke OS service
  3423                                  %endmacro
  3424                                  %macro                  putTimeString 2
  3425                                                          mov     ebx,%1                                          ;DATETIME addr
  3426                                                          mov     edx,%2                                          ;output buffer addr
  3427                                                          mov     al,ePutTimeString                               ;function code
  3428                                                          int     _svc                                            ;invoke OS service
  3429                                  %endmacro
  3430                                  %macro                  putWeekdayString 2
  3431                                                          mov     ebx,%1                                          ;DATETIME addr
  3432                                                          mov     edx,%2                                          ;output buffer addr
  3433                                                          mov     al,ePutWeekdayString                            ;function code
  3434                                                          int     _svc                                            ;invoke OS service
  3435                                  %endmacro
  3436                                  %macro                  putWeekdayNameString 2
  3437                                                          mov     ebx,%1                                          ;DATETIME addr
  3438                                                          mov     edx,%2                                          ;output buffer addr
  3439                                                          mov     al,ePutWeekdayNameString                        ;function code
  3440                                                          int     _svc                                            ;invoke OS service
  3441                                  %endmacro
  3442                                  %macro                  putYearString 2
  3443                                                          mov     ebx,%1                                          ;DATETIME addr
  3444                                                          mov     edx,%2                                          ;output buffer addr
  3445                                                          mov     al,ePutYearString                               ;function code
  3446                                                          int     _svc                                            ;invoke OS service
  3447                                  %endmacro
  3448                                  %macro                  readRealTimeClock 0
  3449                                                          mov     al,eReadRealTimeClock                           ;function code
  3450                                                          int     _svc                                            ;invoke OS service
  3451                                  %endmacro
  3452                                  %macro                  readRealTimeClock 1
  3453                                                          mov     ebx,%1                                          ;DATETIME addr
  3454                                                          mov     al,eReadRealTimeClock                           ;function code
  3455                                                          int     _svc                                            ;invoke OS service
  3456                                  %endmacro
  3457                                  %macro                  resetSystem 0
  3458                                                          mov     al,eResetSystem                                 ;function code
  3459                                                          int     _svc                                            ;invoke OS service
  3460                                  %endmacro
  3461                                  %macro                  unsignedToDecimalString 0
  3462                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3463                                                          int     _svc                                            ;invoke OS service
  3464                                  %endmacro
  3465                                  %macro                  unsignedToHexadecimal 0
  3466                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3467                                                          int     _svc                                            ;invoke OS service
  3468                                  %endmacro
  3469                                  %macro                  upperCaseString 0
  3470                                                          mov     al,eUpperCaseString                             ;function code
  3471                                                          int     _svc                                            ;invoke OS service
  3472                                  %endmacro
  3473                                  ;=======================================================================================================================
  3474                                  ;
  3475                                  ;       Kernel Function Library
  3476                                  ;
  3477                                  ;=======================================================================================================================
  3478                                  ;=======================================================================================================================
  3479                                  ;
  3480                                  ;       Date and Time Helper Routines
  3481                                  ;
  3482                                  ;       GetYear
  3483                                  ;       IsLeapYear
  3484                                  ;       PutDateString
  3485                                  ;       PutDayString
  3486                                  ;       PutHourString
  3487                                  ;       PutMinuteString
  3488                                  ;       PutMonthString
  3489                                  ;       PutMonthNameString
  3490                                  ;       PutSecondString
  3491                                  ;       PutTimeString
  3492                                  ;       PutWeekdayString
  3493                                  ;       PutWeekdayNameString
  3494                                  ;       PutYearString
  3495                                  ;
  3496                                  ;=======================================================================================================================
  3497                                  ;-----------------------------------------------------------------------------------------------------------------------
  3498                                  ;
  3499                                  ;       Routine:        GetYear
  3500                                  ;
  3501                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3502                                  ;
  3503                                  ;       In:             DS:EBX  DATETIME address
  3504                                  ;
  3505                                  ;       Out:            ECX     year
  3506                                  ;
  3507                                  ;-----------------------------------------------------------------------------------------------------------------------
  3508 00000B48 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3509 00000B4C 6BC964                                          imul    ecx,100                                         ;century * 100
  3510 00000B4F 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3511 00000B53 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3512 00000B55 C3                                              ret                                                     ;return
  3513                                  ;-----------------------------------------------------------------------------------------------------------------------
  3514                                  ;
  3515                                  ;       Routine:        IsLeapYear
  3516                                  ;
  3517                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3518                                  ;
  3519                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3520                                  ;
  3521                                  ;       Out:            ECX     0 = not a leap year
  3522                                  ;                               1 = leap year
  3523                                  ;
  3524                                  ;-----------------------------------------------------------------------------------------------------------------------
  3525 00000B56 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3526 00000B5B 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3527 00000B5D 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3528 00000B5F A803                                            test    al,00000011b                                    ;multiple of four?
  3529 00000B61 750D                                            jnz     .no                                             ;no, branch
  3530 00000B63 B264                                            mov     dl,100                                          ;divisor
  3531 00000B65 F6F2                                            div     dl                                              ;divide by 100
  3532 00000B67 84E4                                            test    ah,ah                                           ;multiple of 100?
  3533 00000B69 7504                                            jnz     .yes                                            ;yes, branch
  3534 00000B6B A803                                            test    al,00000011b                                    ;multiple of 400?
  3535 00000B6D 7501                                            jnz     .no                                             ;no, branch
  3536 00000B6F 41                      .yes                    inc     ecx                                             ;indicate leap
  3537 00000B70 C3                      .no                     ret                                                     ;return
  3538                                  ;-----------------------------------------------------------------------------------------------------------------------
  3539                                  ;
  3540                                  ;       Routine:        PutDateString
  3541                                  ;
  3542                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3543                                  ;                       structure at ds:ebx.
  3544                                  ;
  3545                                  ;       In:             DS:EBX  DATETIME address
  3546                                  ;                       DS:EDX  output buffer address
  3547                                  ;
  3548                                  ;-----------------------------------------------------------------------------------------------------------------------
  3549 00000B71 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3550 00000B72 57                                              push    edi                                             ;
  3551 00000B73 06                                              push    es                                              ;
  3552 00000B74 1E                                              push    ds                                              ;store data selector ...
  3553 00000B75 07                                              pop     es                                              ;... in extra segment reg
  3554 00000B76 89D7                                            mov     edi,edx                                         ;output buffer address
  3555 00000B78 B10A                                            mov     cl,10                                           ;divisor
  3556 00000B7A BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3557 00000B7F 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3558 00000B83 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3559 00000B85 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3560 00000B87 FC                                              cld                                                     ;forward strings
  3561 00000B88 AB                                              stosd                                                   ;store "mm/"nul
  3562 00000B89 4F                                              dec     edi                                             ;address of terminator
  3563 00000B8A 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3564 00000B8E F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3565 00000B90 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3566 00000B92 AB                                              stosd                                                   ;store "dd/"nul
  3567 00000B93 4F                                              dec     edi                                             ;address of terminator
  3568 00000B94 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3569 00000B98 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3570 00000B9A 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3571 00000B9C AB                                              stosd                                                   ;store "cc/"null
  3572 00000B9D 4F                                              dec     edi                                             ;address of terminator
  3573 00000B9E 4F                                              dec     edi                                             ;address of delimiter
  3574 00000B9F 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3575 00000BA3 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3576 00000BA5 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3577 00000BA7 AA                                              stosb                                                   ;store quotient
  3578 00000BA8 88E0                                            mov     al,ah                                           ;remainder
  3579 00000BAA AA                                              stosb                                                   ;store remainder
  3580 00000BAB 30C0                                            xor     al,al                                           ;null terminator
  3581 00000BAD AA                                              stosb                                                   ;store terminator
  3582 00000BAE 07                                              pop     es                                              ;restore non-volatile regs
  3583 00000BAF 5F                                              pop     edi                                             ;
  3584 00000BB0 59                                              pop     ecx                                             ;
  3585 00000BB1 C3                                              ret                                                     ;return
  3586                                  ;-----------------------------------------------------------------------------------------------------------------------
  3587                                  ;
  3588                                  ;       Routine:        PutDayString
  3589                                  ;
  3590                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3591                                  ;                       structure at ds:ebx.
  3592                                  ;
  3593                                  ;       In:             DS:EBX  DATETIME address
  3594                                  ;                       DS:EDX  output buffer address
  3595                                  ;
  3596                                  ;-----------------------------------------------------------------------------------------------------------------------
  3597 00000BB2 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3598 00000BB3 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3599 00000BB7 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3600 00000BB9 E835070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3601 00000BBE 59                                              pop     ecx                                             ;
  3602 00000BBF C3                                              ret                                                     ;return
  3603                                  ;-----------------------------------------------------------------------------------------------------------------------
  3604                                  ;
  3605                                  ;       Routine:        PutHourString
  3606                                  ;
  3607                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3608                                  ;                       structure at ds:ebx.
  3609                                  ;
  3610                                  ;       In:             DS:EBX  DATETIME address
  3611                                  ;                       DS:EDX  output buffer address
  3612                                  ;
  3613                                  ;-----------------------------------------------------------------------------------------------------------------------
  3614 00000BC0 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3615 00000BC1 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3616 00000BC5 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3617 00000BC7 E827070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3618 00000BCC 59                                              pop     ecx                                             ;
  3619 00000BCD C3                                              ret                                                     ;return
  3620                                  ;-----------------------------------------------------------------------------------------------------------------------
  3621                                  ;
  3622                                  ;       Routine:        PutMinuteString
  3623                                  ;
  3624                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3625                                  ;                       structure at ds:ebx.
  3626                                  ;
  3627                                  ;       In:             DS:EBX  DATETIME address
  3628                                  ;                       DS:EDX  output buffer address
  3629                                  ;
  3630                                  ;-----------------------------------------------------------------------------------------------------------------------
  3631 00000BCE 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3632 00000BCF 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3633 00000BD3 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3634 00000BD5 E819070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3635 00000BDA 59                                              pop     ecx                                             ;
  3636 00000BDB C3                                              ret                                                     ;return
  3637                                  ;-----------------------------------------------------------------------------------------------------------------------
  3638                                  ;
  3639                                  ;       Routine:        PutMonthString
  3640                                  ;
  3641                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3642                                  ;                       structure at ds:ebx.
  3643                                  ;
  3644                                  ;       In:             DS:EBX  DATETIME address
  3645                                  ;                       DS:EDX  output buffer address
  3646                                  ;
  3647                                  ;-----------------------------------------------------------------------------------------------------------------------
  3648 00000BDC 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3649 00000BDD 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3650 00000BE1 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3651 00000BE3 E80B070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3652 00000BE8 59                                              pop     ecx                                             ;
  3653 00000BE9 C3                                              ret                                                     ;return
  3654                                  ;-----------------------------------------------------------------------------------------------------------------------
  3655                                  ;
  3656                                  ;       Routine:        PutMonthNameString
  3657                                  ;
  3658                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3659                                  ;                       structure at ds:ebx.
  3660                                  ;
  3661                                  ;       In:             DS:EBX  DATETIME address
  3662                                  ;                       DS:EDX  output buffer address
  3663                                  ;
  3664                                  ;-----------------------------------------------------------------------------------------------------------------------
  3665 00000BEA 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3666 00000BEB 57                                              push    edi                                             ;
  3667 00000BEC 1E                                              push    ds                                              ;
  3668 00000BED 06                                              push    es                                              ;
  3669 00000BEE 1E                                              push    ds                                              ;load data selector ...
  3670 00000BEF 07                                              pop     es                                              ;... into extra segment
  3671 00000BF0 89D7                                            mov     edi,edx                                         ;output buffer address
  3672 00000BF2 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3673 00000BF6 48                                              dec     eax                                             ;month (0-11)
  3674 00000BF7 C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3675 00000BFA 0E                                              push    cs                                              ;load code selector ...
  3676 00000BFB 1F                                              pop     ds                                              ;... into data segment
  3677 00000BFC 8BB0[3C0D0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3678 00000C02 FC                                              cld                                                     ;forward strings
  3679 00000C03 AC                      .10                     lodsb                                                   ;name character
  3680 00000C04 AA                                              stosb                                                   ;store in output buffer
  3681 00000C05 84C0                                            test    al,al                                           ;end of string?
  3682 00000C07 75FA                                            jnz     .10                                             ;no, continue
  3683 00000C09 07                                              pop     es                                              ;restore non-volatile regs
  3684 00000C0A 1F                                              pop     ds                                              ;
  3685 00000C0B 5F                                              pop     edi                                             ;
  3686 00000C0C 5E                                              pop     esi                                             ;
  3687 00000C0D C3                                              ret                                                     ;return
  3688                                  ;-----------------------------------------------------------------------------------------------------------------------
  3689                                  ;
  3690                                  ;       Routine:        PutSecondString
  3691                                  ;
  3692                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3693                                  ;                       structure at ds:ebx.
  3694                                  ;
  3695                                  ;       In:             DS:EBX  DATETIME address
  3696                                  ;                       DS:EDX  output buffer address
  3697                                  ;
  3698                                  ;-----------------------------------------------------------------------------------------------------------------------
  3699 00000C0E 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3700 00000C0F 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3701 00000C12 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3702 00000C14 E8DA060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3703 00000C19 59                                              pop     ecx                                             ;
  3704 00000C1A C3                                              ret                                                     ;return
  3705                                  ;-----------------------------------------------------------------------------------------------------------------------
  3706                                  ;
  3707                                  ;       Routine:        PutTimeString
  3708                                  ;
  3709                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3710                                  ;                       structure at ds:ebx.
  3711                                  ;
  3712                                  ;       In:             DS:EBX  DATETIME address
  3713                                  ;                       DS:EDX  output buffer address
  3714                                  ;
  3715                                  ;-----------------------------------------------------------------------------------------------------------------------
  3716 00000C1B 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3717 00000C1C 57                                              push    edi                                             ;
  3718 00000C1D 06                                              push    es                                              ;
  3719 00000C1E 1E                                              push    ds                                              ;store data selector ...
  3720 00000C1F 07                                              pop     es                                              ;... in extra segment reg
  3721 00000C20 89D7                                            mov     edi,edx                                         ;output buffer address
  3722 00000C22 B10A                                            mov     cl,10                                           ;divisor
  3723 00000C24 BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3724 00000C29 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3725 00000C2D F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3726 00000C2F 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3727 00000C31 FC                                              cld                                                     ;forward strings
  3728 00000C32 AB                                              stosd                                                   ;store "mm/"nul
  3729 00000C33 4F                                              dec     edi                                             ;address of terminator
  3730 00000C34 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3731 00000C38 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3732 00000C3A 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3733 00000C3C AB                                              stosd                                                   ;store "dd/"nul
  3734 00000C3D 4F                                              dec     edi                                             ;address of terminator
  3735 00000C3E 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3736 00000C41 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3737 00000C43 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3738 00000C45 AA                                              stosb                                                   ;store quotient
  3739 00000C46 88E0                                            mov     al,ah                                           ;remainder
  3740 00000C48 AA                                              stosb                                                   ;store remainder
  3741 00000C49 30C0                                            xor     al,al                                           ;null terminator
  3742 00000C4B AA                                              stosb                                                   ;store terminator
  3743 00000C4C 07                                              pop     es                                              ;restore non-volatile regs
  3744 00000C4D 5F                                              pop     edi                                             ;
  3745 00000C4E 59                                              pop     ecx                                             ;
  3746 00000C4F C3                                              ret                                                     ;return
  3747                                  ;-----------------------------------------------------------------------------------------------------------------------
  3748                                  ;
  3749                                  ;       Routine:        PutWeekdayString
  3750                                  ;
  3751                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3752                                  ;                       structure at ds:ebx.
  3753                                  ;
  3754                                  ;       In:             DS:EBX  DATETIME address
  3755                                  ;                       DS:EDX  output buffer address
  3756                                  ;
  3757                                  ;-----------------------------------------------------------------------------------------------------------------------
  3758 00000C50 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3759 00000C51 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3760 00000C55 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3761 00000C57 E897060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3762 00000C5C 59                                              pop     ecx                                             ;
  3763 00000C5D C3                                              ret                                                     ;return
  3764                                  ;-----------------------------------------------------------------------------------------------------------------------
  3765                                  ;
  3766                                  ;       Routine:        PutWeekdayNameString
  3767                                  ;
  3768                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3769                                  ;                       structure at ds:ebx.
  3770                                  ;
  3771                                  ;       In:             DS:EBX  DATETIME address
  3772                                  ;                       DS:EDX  output buffer address
  3773                                  ;
  3774                                  ;-----------------------------------------------------------------------------------------------------------------------
  3775 00000C5E 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3776 00000C5F 57                                              push    edi                                             ;
  3777 00000C60 1E                                              push    ds                                              ;
  3778 00000C61 06                                              push    es                                              ;
  3779 00000C62 1E                                              push    ds                                              ;load data selector ...
  3780 00000C63 07                                              pop     es                                              ;... into extra segment
  3781 00000C64 89D7                                            mov     edi,edx                                         ;output buffer address
  3782 00000C66 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3783 00000C6A C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3784 00000C6D 0E                                              push    cs                                              ;load code selector ...
  3785 00000C6E 1F                                              pop     ds                                              ;... into data segment
  3786 00000C6F 8BB0[200D0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3787 00000C75 FC                                              cld                                                     ;forward strings
  3788 00000C76 AC                      .10                     lodsb                                                   ;name character
  3789 00000C77 AA                                              stosb                                                   ;store in output buffer
  3790 00000C78 84C0                                            test    al,al                                           ;end of string?
  3791 00000C7A 75FA                                            jnz     .10                                             ;no, continue
  3792 00000C7C 07                                              pop     es                                              ;restore non-volatile regs
  3793 00000C7D 1F                                              pop     ds                                              ;
  3794 00000C7E 5F                                              pop     edi                                             ;
  3795 00000C7F 5E                                              pop     esi                                             ;
  3796 00000C80 C3                                              ret                                                     ;return
  3797                                  ;-----------------------------------------------------------------------------------------------------------------------
  3798                                  ;
  3799                                  ;       Routine:        PutYearString
  3800                                  ;
  3801                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3802                                  ;                       structure at ds:ebx.
  3803                                  ;
  3804                                  ;       In:             DS:EBX  DATETIME address
  3805                                  ;                       DS:EDX  output buffer address
  3806                                  ;
  3807                                  ;-----------------------------------------------------------------------------------------------------------------------
  3808 00000C81 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3809 00000C82 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3810 00000C87 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3811 00000C89 E865060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3812 00000C8E 59                                              pop     ecx                                             ;restore non-volatile regs
  3813 00000C8F C3                                              ret                                                     ;return
  3814                                  ;-----------------------------------------------------------------------------------------------------------------------
  3815                                  ;
  3816                                  ;       Day Names
  3817                                  ;
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819 00000C90 53756E64617900          czSunday                db      "Sunday",0
  3820 00000C97 4D6F6E64617900          czMonday                db      "Monday",0
  3821 00000C9E 5475657364617900        czTuesday               db      "Tuesday",0
  3822 00000CA6 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3822 00000CAF 00                 
  3823 00000CB0 546875727364617900      czThursday              db      "Thursday",0
  3824 00000CB9 46726964617900          czFriday                db      "Friday",0
  3825 00000CC0 536174757264617900      czSaturday              db      "Saturday",0
  3826                                  ;-----------------------------------------------------------------------------------------------------------------------
  3827                                  ;
  3828                                  ;       Month Names
  3829                                  ;
  3830                                  ;-----------------------------------------------------------------------------------------------------------------------
  3831 00000CC9 4A616E7561727900        czJanuary               db      "January",0
  3832 00000CD1 466562727561727900      czFebruary              db      "February",0
  3833 00000CDA 4D6172636800            czMarch                 db      "March",0
  3834 00000CE0 417072696C00            czApril                 db      "April",0
  3835 00000CE6 4D617900                czMay                   db      "May",0
  3836 00000CEA 4A756E6500              czJune                  db      "June",0
  3837 00000CEF 4A756C7900              czJuly                  db      "July",0
  3838 00000CF4 41756775737400          czAugust                db      "August",0
  3839 00000CFB 53657074656D626572-     czSeptember             db      "September",0
  3839 00000D04 00                 
  3840 00000D05 4F63746F62657200        czOctober               db      "October",0
  3841 00000D0D 4E6F76656D62657200      czNovember              db      "November",0
  3842 00000D16 446563656D62657200      czDecember              db      "December",0
  3843                                  ;-----------------------------------------------------------------------------------------------------------------------
  3844                                  ;
  3845                                  ;       Day Names Lookup Table
  3846                                  ;
  3847                                  ;-----------------------------------------------------------------------------------------------------------------------
  3848 00000D1F 90                                              align   4
  3849                                  tDayNames               equ     $
  3850 00000D20 [900C0000]                                      dd      czSunday
  3851 00000D24 [970C0000]                                      dd      czMonday
  3852 00000D28 [9E0C0000]                                      dd      czTuesday
  3853 00000D2C [A60C0000]                                      dd      czWednesday
  3854 00000D30 [B00C0000]                                      dd      czThursday
  3855 00000D34 [B90C0000]                                      dd      czFriday
  3856 00000D38 [C00C0000]                                      dd      czSaturday
  3857                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3858                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3859                                  ;-----------------------------------------------------------------------------------------------------------------------
  3860                                  ;
  3861                                  ;       Month Names Lookup Table
  3862                                  ;
  3863                                  ;-----------------------------------------------------------------------------------------------------------------------
  3864                                                          align   4
  3865                                  tMonthNames             equ     $
  3866 00000D3C [C90C0000]                                      dd      czJanuary
  3867 00000D40 [D10C0000]                                      dd      czFebruary
  3868 00000D44 [DA0C0000]                                      dd      czMarch
  3869 00000D48 [E00C0000]                                      dd      czApril
  3870 00000D4C [E60C0000]                                      dd      czMay
  3871 00000D50 [EA0C0000]                                      dd      czJune
  3872 00000D54 [EF0C0000]                                      dd      czJuly
  3873 00000D58 [F40C0000]                                      dd      czAugust
  3874 00000D5C [FB0C0000]                                      dd      czSeptember
  3875 00000D60 [050D0000]                                      dd      czOctober
  3876 00000D64 [0D0D0000]                                      dd      czNovember
  3877 00000D68 [160D0000]                                      dd      czDecember
  3878                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3879                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3880                                  ;=======================================================================================================================
  3881                                  ;
  3882                                  ;       Memory Helper Routines
  3883                                  ;
  3884                                  ;       AllocateMemory
  3885                                  ;       FreeMemory
  3886                                  ;
  3887                                  ;=======================================================================================================================
  3888                                  ;-----------------------------------------------------------------------------------------------------------------------
  3889                                  ;
  3890                                  ;       Routine:        AllocateMemory
  3891                                  ;
  3892                                  ;       Description:    This routine allocates a memory block for the given task.
  3893                                  ;
  3894                                  ;       In:             ECX     bytes of memory to allocate
  3895                                  ;
  3896                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3897                                  ;                               0       unable to allocate memory
  3898                                  ;
  3899                                  ;-----------------------------------------------------------------------------------------------------------------------
  3900 00000D6C 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3901 00000D6D 51                                              push    ecx                                             ;
  3902 00000D6E 56                                              push    esi                                             ;
  3903 00000D6F 1E                                              push    ds                                              ;
  3904                                  ;
  3905                                  ;       Address kernel memory structures
  3906                                  ;
  3907 00000D70 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3908 00000D72 1F                                              pop     ds                                              ;... into data segment reg
  3909 00000D73 BE1E090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3910                                  ;
  3911                                  ;       Set requested size to minimum block size if requested size is too small.
  3912                                  ;
  3913 00000D78 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3914 00000D7E 7305                                            jae     .10                                             ;no, branch
  3915 00000D80 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3916 00000D85 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3917                                  ;
  3918                                  ;       Find the first free memory block large enough to satisfy the request.
  3919                                  ;
  3920 00000D88 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3921 00000D8B 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3922 00000D8D 0F84F2000000                                    jz      .220                                            ;yes, branch
  3923 00000D93 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3924 00000D96 7605                                            jbe     .30                                             ;yes, branch
  3925 00000D98 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3926 00000D9B EBEE                                            jmp     .20                                             ;continue
  3927                                  ;-----------------------------------------------------------------------------------------------------------------------
  3928                                  ;
  3929                                  ;       Address the previous and next free memory blocks.
  3930                                  ;
  3931 00000D9D 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3932 00000DA0 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3933                                  ;
  3934                                  ;       Remove the free memory block from the forward free memory block chain.
  3935                                  ;
  3936 00000DA3 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3937 00000DA5 7405                                            jz      .40                                             ;no, branch
  3938 00000DA7 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3939 00000DAA EB03                                            jmp     .50                                             ;continue
  3940 00000DAC 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3941                                  ;
  3942                                  ;       Remove the free memory block from the reverse free memory block chain.
  3943                                  ;
  3944 00000DAF 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3945 00000DB1 7405                                            jz      .60                                             ;no, branch
  3946 00000DB3 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3947 00000DB6 EB03                                            jmp     .70                                             ;continue
  3948 00000DB8 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3949                                  ;-----------------------------------------------------------------------------------------------------------------------
  3950                                  ;
  3951                                  ;       Determine if the free memory block can be split.
  3952                                  ;
  3953 00000DBB 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3954 00000DBE 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3955 00000DC0 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3956 00000DC6 7263                                            jb      .150                                            ;no, branch
  3957                                  ;
  3958                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3959                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3960                                  ;       of the requested memory size.
  3961                                  ;
  3962 00000DC8 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3963 00000DCB 89C2                                            mov     edx,eax                                         ;memory block address
  3964 00000DCD 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3965 00000DCF 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3966 00000DD2 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3967                                  ;
  3968                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3969                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3970                                  ;
  3971 00000DD5 E305                                            jecxz   .80                                             ;no next contig, branch
  3972 00000DD7 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3973 00000DDA EB03                                            jmp     .90                                             ;continue
  3974 00000DDC 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3975                                  ;
  3976                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3977                                  ;
  3978 00000DDF 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3979 00000DE2 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3980 00000DE5 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3981 00000DE8 BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3982 00000DED 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3983 00000DEF 31DB                                            xor     ebx,ebx                                         ;zero register
  3984 00000DF1 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3985 00000DF4 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3986                                  ;
  3987                                  ;       Find the proper location in the free block chain for the new free block
  3988                                  ;
  3989 00000DF7 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3990 00000DFA 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3991 00000DFD E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3992 00000DFF 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3993 00000E02 7605                                            jbe     .110                                            ;yes, branch
  3994 00000E04 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3995 00000E07 EBF4                                            jmp     .100                                            ;continue
  3996                                  ;
  3997                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3998                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3999                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  4000                                  ;       block of hte next block, if there is one.
  4001                                  ;
  4002 00000E09 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  4003 00000E0C 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  4004 00000E0F E308                                            jecxz   .120                                            ;branch if no next block
  4005 00000E11 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  4006 00000E14 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  4007 00000E17 EB03                                            jmp     .130                                            ;continue
  4008 00000E19 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  4009                                  ;
  4010                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  4011                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  4012                                  ;       last user block pointers if necessary.
  4013                                  ;
  4014 00000E1C 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  4015 00000E1F 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  4016 00000E21 7405                                            jz      .140                                            ;no, branch
  4017 00000E23 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  4018 00000E26 EB03                                            jmp     .150                                            ;continue
  4019 00000E28 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  4020                                  ;
  4021                                  ;       Update the newly allocated block's owner and signature.
  4022                                  ;
  4023 00000E2B BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  4024 00000E30 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  4025 00000E32 31D2                                            xor     edx,edx                                         ;zero register
  4026 00000E34 660F00CA                                        str     dx                                              ;load the task state register
  4027 00000E38 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  4028                                  ;
  4029                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  4030                                  ;
  4031 00000E3B 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  4032 00000E3E E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  4033 00000E40 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  4034 00000E43 721E                                            jb      .180                                            ;branch if block belongs to next task
  4035 00000E45 7405                                            je      .170                                            ;branch if block belongs to this task
  4036 00000E47 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  4037 00000E4A EBF2                                            jmp     .160                                            ;continue
  4038                                  ;
  4039                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  4040                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  4041                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  4042                                  ;       place to insert the block.
  4043                                  ;
  4044 00000E4C 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  4045 00000E4F 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  4046 00000E52 760F                                            jbe     .180                                            ;yes, branch
  4047 00000E54 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  4048 00000E57 85C9                                            test    ecx,ecx                                         ;end of chain?
  4049 00000E59 7408                                            jz      .180                                            ;yes, branch
  4050 00000E5B 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  4051 00000E5E 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  4052 00000E61 74E9                                            je      .170                                            ;yes, continue search
  4053                                  ;
  4054                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  4055                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  4056                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  4057                                  ;       do have a previous-block, we update that block's next-block pointer.
  4058                                  ;
  4059 00000E63 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  4060 00000E66 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  4061 00000E69 E308                                            jecxz   .190                                            ;branch if no next-task block
  4062 00000E6B 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  4063 00000E6E 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  4064 00000E71 EB03                                            jmp     .200                                            ;continue
  4065 00000E73 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  4066                                  ;
  4067                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  4068                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  4069                                  ;       global first and/or last user-block pointers if necessary.
  4070                                  ;
  4071 00000E76 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  4072 00000E79 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  4073 00000E7B 7405                                            jz      .210                                            ;no, branch
  4074 00000E7D 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  4075 00000E80 EB03                                            jmp     .220                                            ;continue
  4076 00000E82 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  4077                                  ;
  4078                                  ;       Restore registers and return to caller.
  4079                                  ;
  4080 00000E85 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  4081 00000E86 5E                                              pop     esi                                             ;
  4082 00000E87 59                                              pop     ecx                                             ;
  4083 00000E88 5B                                              pop     ebx                                             ;
  4084 00000E89 C3                                              ret                                                     ;return
  4085                                  ;-----------------------------------------------------------------------------------------------------------------------
  4086                                  ;
  4087                                  ;       Routine:        FreeMemory
  4088                                  ;
  4089                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  4090                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  4091                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  4092                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  4093                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  4094                                  ;
  4095                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  4096                                  ;
  4097                                  ;       Out:            EAX     -1      invalid memory block
  4098                                  ;                               0       memory block freed
  4099                                  ;
  4100                                  ;-----------------------------------------------------------------------------------------------------------------------
  4101 00000E8A 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  4102 00000E8B 51                                              push    ecx                                             ;
  4103 00000E8C 56                                              push    esi                                             ;
  4104 00000E8D 57                                              push    edi                                             ;
  4105 00000E8E 1E                                              push    ds                                              ;
  4106 00000E8F 06                                              push    es                                              ;
  4107                                  ;
  4108                                  ;       Address the root memory structure
  4109                                  ;
  4110 00000E90 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4111 00000E92 07                                              pop     es                                              ;... into extra segment reg
  4112 00000E93 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4113 00000E95 1F                                              pop     ds                                              ;... into data segment reg
  4114 00000E96 BE1E090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  4115 00000E9B 89D7                                            mov     edi,edx                                         ;memory block address
  4116                                  ;
  4117                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  4118                                  ;
  4119 00000E9D 31C0                                            xor     eax,eax                                         ;indicate success
  4120 00000E9F 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  4121 00000EA5 0F8415010000                                    je      .240                                            ;yes, branch
  4122 00000EAB 48                                              dec     eax                                             ;indicate failure
  4123 00000EAC 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  4124 00000EB2 0F8508010000                                    jne     .240                                            ;no, branch
  4125                                  ;-----------------------------------------------------------------------------------------------------------------------
  4126                                  ;
  4127                                  ;       Unlink the USER memory block.
  4128                                  ;
  4129                                  ;-----------------------------------------------------------------------------------------------------------------------
  4130                                  ;
  4131                                  ;       Set the block signature. Reset owner.
  4132                                  ;
  4133 00000EB8 C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  4134 00000EBE 31C0                                            xor     eax,eax                                         ;zero register
  4135 00000EC0 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  4136                                  ;
  4137                                  ;       Wipe user area.
  4138                                  ;
  4139 00000EC3 57                                              push    edi                                             ;save block address
  4140 00000EC4 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  4141 00000EC7 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  4142 00000ECA 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  4143 00000ECD B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  4144 00000ECF F3AA                                            rep     stosb                                           ;clear memory
  4145 00000ED1 5F                                              pop     edi                                             ;restore block address
  4146                                  ;
  4147                                  ;       Address the preceding and following USER memory blocks
  4148                                  ;
  4149 00000ED2 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  4150 00000ED5 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  4151                                  ;
  4152                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  4153                                  ;       pointer to point to the USER block following this block.
  4154                                  ;
  4155 00000ED8 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  4156 00000EDA 7405                                            jz      .10                                             ;no, branch
  4157 00000EDC 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  4158 00000EDF EB03                                            jmp     .20                                             ;continue
  4159 00000EE1 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  4160                                  ;
  4161                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  4162                                  ;       pointer to point to the USER block preceding this block.
  4163                                  ;
  4164 00000EE4 E305                    .20                     jecxz   .30                                             ;branch if no next block
  4165 00000EE6 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  4166 00000EE9 EB03                                            jmp     .40                                             ;continue
  4167 00000EEB 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  4168                                  ;-----------------------------------------------------------------------------------------------------------------------
  4169                                  ;
  4170                                  ;       Merge with a previous contiguous FREE memory block.
  4171                                  ;
  4172                                  ;-----------------------------------------------------------------------------------------------------------------------
  4173                                  ;
  4174                                  ;       Address the preceding and following contiguous memory blocks.
  4175                                  ;
  4176 00000EEE 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  4177 00000EF1 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  4178                                  ;
  4179                                  ;       Verify we have a previous contiguous FREE block.
  4180                                  ;
  4181 00000EF4 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  4182 00000EF6 7442                                            jz      .100                                            ;no, branch
  4183 00000EF8 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  4184 00000EFE 753A                                            jne     .100                                            ;no, branch
  4185                                  ;
  4186                                  ;       Update adjacent block's contiguous pointers.
  4187                                  ;
  4188 00000F00 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  4189 00000F03 E305                                            jecxz   .50                                             ;branch if no next contiguous block
  4190 00000F05 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  4191 00000F08 EB03                                            jmp     .60                                             ;continue
  4192 00000F0A 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  4193                                  ;
  4194                                  ;       Update the size of the merged FREE block.
  4195                                  ;
  4196 00000F0D 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  4197 00000F10 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  4198                                  ;
  4199                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  4200                                  ;
  4201 00000F13 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  4202 00000F18 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  4203 00000F1A F3AA                                            rep     stosb                                           ;clear memory header
  4204 00000F1C 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  4205                                  ;-----------------------------------------------------------------------------------------------------------------------
  4206                                  ;
  4207                                  ;       Unlink the previous contiguous FREE memory block
  4208                                  ;
  4209                                  ;-----------------------------------------------------------------------------------------------------------------------
  4210                                  ;
  4211                                  ;       Address the preceding and following USER memory blocks
  4212                                  ;
  4213 00000F1E 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  4214 00000F21 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  4215                                  ;
  4216                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  4217                                  ;       block pointer.
  4218                                  ;
  4219 00000F24 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  4220 00000F26 7405                                            jz      .70                                             ;no, branch
  4221 00000F28 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  4222 00000F2B EB03                                            jmp     .80                                             ;branch
  4223 00000F2D 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  4224                                  ;
  4225                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  4226                                  ;       pointer.
  4227                                  ;
  4228 00000F30 E305                    .80                     jecxz   .90                                             ;branch if no next block
  4229 00000F32 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  4230 00000F35 EB03                                            jmp     .100                                            ;continue
  4231 00000F37 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  4232                                  ;-----------------------------------------------------------------------------------------------------------------------
  4233                                  ;
  4234                                  ;       Merge with a following contiguous FREE memory block.
  4235                                  ;
  4236                                  ;-----------------------------------------------------------------------------------------------------------------------
  4237                                  ;
  4238                                  ;       Verify we have a following contiguous FREE block.
  4239                                  ;
  4240 00000F3A 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  4241 00000F3D E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  4242 00000F3F 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  4243 00000F45 7543                                            jne     .170                                            ;no, branch
  4244                                  ;
  4245                                  ;       Add the size of the following adjacent FREE block to this block's size.
  4246                                  ;
  4247 00000F47 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  4248 00000F4A 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  4249                                  ;
  4250                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  4251                                  ;
  4252 00000F4D 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  4253 00000F50 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  4254 00000F53 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  4255 00000F55 7405                                            jz      .110                                            ;no, branch
  4256 00000F57 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  4257 00000F5A EB03                                            jmp     .120                                            ;continue
  4258 00000F5C 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  4259                                  ;-----------------------------------------------------------------------------------------------------------------------
  4260                                  ;
  4261                                  ;       Unlink the following contiguous FREE memory block
  4262                                  ;
  4263                                  ;-----------------------------------------------------------------------------------------------------------------------
  4264                                  ;
  4265                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  4266                                  ;
  4267 00000F5F 57                      .120                    push    edi                                             ;save this block
  4268 00000F60 89CF                                            mov     edi,ecx                                         ;next contiguous block
  4269 00000F62 51                                              push    ecx                                             ;save next contiguous block
  4270                                  ;
  4271                                  ;       Address the preceding and following USER memory blocks
  4272                                  ;
  4273 00000F63 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  4274 00000F66 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  4275                                  ;
  4276                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  4277                                  ;       block pointer.
  4278                                  ;
  4279 00000F69 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  4280 00000F6B 7405                                            jz      .130                                            ;no, branch
  4281 00000F6D 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  4282 00000F70 EB03                                            jmp     .140                                            ;branch
  4283 00000F72 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  4284                                  ;
  4285                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  4286                                  ;       pointer.
  4287                                  ;
  4288 00000F75 E305                    .140                    jecxz   .150                                            ;branch if no next block
  4289 00000F77 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  4290 00000F7A EB03                                            jmp     .160                                            ;continue
  4291 00000F7C 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  4292                                  ;
  4293                                  ;       Clear next contiguous block's header
  4294                                  ;
  4295 00000F7F 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  4296 00000F80 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  4297 00000F85 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  4298 00000F87 F3AA                                            rep     stosb                                           ;clear memory header
  4299 00000F89 5F                                              pop     edi                                             ;this block's pointer
  4300                                  ;-----------------------------------------------------------------------------------------------------------------------
  4301                                  ;
  4302                                  ;       Insert the final FREE block back into the block chain.
  4303                                  ;
  4304                                  ;-----------------------------------------------------------------------------------------------------------------------
  4305                                  ;
  4306                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  4307                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  4308                                  ;       all are smaller in size.
  4309                                  ;
  4310 00000F8A 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  4311 00000F8D 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  4312 00000F90 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  4313 00000F92 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  4314 00000F95 7205                                            jb      .190                                            ;yes, branch
  4315 00000F97 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  4316 00000F9A EBF4                                            jmp     .180                                            ;continue
  4317                                  ;
  4318                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  4319                                  ;       larger free block. Update the next block's previous block pointer.
  4320                                  ;
  4321 00000F9C 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  4322 00000F9F 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  4323 00000FA2 E308                                            jecxz   .200                                            ;branch if no block found
  4324 00000FA4 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  4325 00000FA7 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  4326 00000FAA EB03                                            jmp     .210                                            ;continue
  4327 00000FAC 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  4328                                  ;
  4329                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  4330                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  4331                                  ;       next pointer.
  4332                                  ;
  4333 00000FAF 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  4334 00000FB2 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  4335 00000FB4 7405                                            jz      .220                                            ;no, branch
  4336 00000FB6 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  4337 00000FB9 EB03                                            jmp     .230                                            ;continue
  4338 00000FBB 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  4339                                  ;
  4340                                  ;       The memory free has completed.
  4341                                  ;
  4342 00000FBE 31C0                    .230                    xor     eax,eax                                         ;indicate success
  4343                                  ;
  4344                                  ;       Restore and return.
  4345                                  ;
  4346 00000FC0 07                      .240                    pop     es                                              ;restore non-volatile regs
  4347 00000FC1 1F                                              pop     ds                                              ;
  4348 00000FC2 5F                                              pop     edi                                             ;
  4349 00000FC3 5E                                              pop     esi                                             ;
  4350 00000FC4 59                                              pop     ecx                                             ;
  4351 00000FC5 5B                                              pop     ebx                                             ;
  4352 00000FC6 C3                                              ret                                                     ;return
  4353                                  ;=======================================================================================================================
  4354                                  ;
  4355                                  ;       String Helper Routines
  4356                                  ;
  4357                                  ;       CompareMemory
  4358                                  ;       UpperCaseString
  4359                                  ;
  4360                                  ;=======================================================================================================================
  4361                                  ;-----------------------------------------------------------------------------------------------------------------------
  4362                                  ;
  4363                                  ;       Routine:        CompareMemory
  4364                                  ;
  4365                                  ;       Description:    This routine compares two byte arrays.
  4366                                  ;
  4367                                  ;       In:             DS:EDX  first source address
  4368                                  ;                       DS:EBX  second source address
  4369                                  ;                       ECX     comparison length
  4370                                  ;
  4371                                  ;       Out:            EDX     first source address
  4372                                  ;                       EBX     second source address
  4373                                  ;                       ECX     0       array 1 = array 2
  4374                                  ;                               <0      array 1 < array 2
  4375                                  ;                               >0      array 1 > array 2
  4376                                  ;
  4377                                  ;-----------------------------------------------------------------------------------------------------------------------
  4378 00000FC7 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  4379 00000FC8 57                                              push    edi                                             ;
  4380 00000FC9 06                                              push    es                                              ;
  4381 00000FCA 1E                                              push    ds                                              ;copy DS
  4382 00000FCB 07                                              pop     es                                              ;... to ES
  4383 00000FCC 89D6                                            mov     esi,edx                                         ;first source address
  4384 00000FCE 89DF                                            mov     edi,ebx                                         ;second source address
  4385 00000FD0 FC                                              cld                                                     ;forward strings
  4386 00000FD1 F3A6                                            rep     cmpsb                                           ;compare bytes
  4387 00000FD3 B000                                            mov     al,0                                            ;default result
  4388 00000FD5 7406                                            jz      .10                                             ;branch if arrays equal
  4389 00000FD7 B001                                            mov     al,1                                            ;positive result
  4390 00000FD9 7302                                            jnc     .10                                             ;branch if target > source
  4391 00000FDB B0FF                                            mov     al,-1                                           ;negative result
  4392 00000FDD 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  4393 00000FE0 07                                              pop     es                                              ;restore non-volatile regs
  4394 00000FE1 5F                                              pop     edi                                             ;
  4395 00000FE2 5E                                              pop     esi                                             ;
  4396 00000FE3 C3                                              ret                                                     ;return
  4397                                  ;-----------------------------------------------------------------------------------------------------------------------
  4398                                  ;
  4399                                  ;       Routine:        UpperCaseString
  4400                                  ;
  4401                                  ;       Description:    This routine places all characters in the given string to upper case.
  4402                                  ;
  4403                                  ;       In:             DS:EDX  string address
  4404                                  ;
  4405                                  ;       Out:            EDX     string address
  4406                                  ;
  4407                                  ;-----------------------------------------------------------------------------------------------------------------------
  4408 00000FE4 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  4409 00000FE5 89D6                                            mov     esi,edx                                         ;string address
  4410 00000FE7 FC                                              cld                                                     ;forward strings
  4411 00000FE8 AC                      .10                     lodsb                                                   ;string character
  4412 00000FE9 84C0                                            test    al,al                                           ;null?
  4413 00000FEB 740F                                            jz      .20                                             ;yes, skip ahead
  4414 00000FED 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4415 00000FEF 72F7                                            jb      .10                                             ;no, continue
  4416 00000FF1 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4417 00000FF3 77F3                                            ja      .10                                             ;no, continue
  4418 00000FF5 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  4419 00000FF7 8846FF                                          mov     [esi-1],al                                      ;upper character
  4420 00000FFA EBEC                                            jmp     .10                                             ;continue
  4421 00000FFC 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4422 00000FFD C3                                              ret                                                     ;return
  4423                                  ;=======================================================================================================================
  4424                                  ;
  4425                                  ;       Console Helper Routines
  4426                                  ;
  4427                                  ;       FirstConsoleColumn
  4428                                  ;       GetConsoleChar
  4429                                  ;       GetConsoleString
  4430                                  ;       NextConsoleColumn
  4431                                  ;       NextConsoleRow
  4432                                  ;       PreviousConsoleColumn
  4433                                  ;       PutConsoleChar
  4434                                  ;       PutConsoleHexByte
  4435                                  ;       PutConsoleHexDword
  4436                                  ;       PutConsoleHexWord
  4437                                  ;       PutConsoleOIAChar
  4438                                  ;       PutConsoleOIAShift
  4439                                  ;       PutConsoleString
  4440                                  ;       Yield
  4441                                  ;
  4442                                  ;=======================================================================================================================
  4443                                  ;-----------------------------------------------------------------------------------------------------------------------
  4444                                  ;
  4445                                  ;       Routine:        FirstConsoleColumn
  4446                                  ;
  4447                                  ;       Description:    This routine resets the console column to start of the row.
  4448                                  ;
  4449                                  ;       In:             DS      OS data selector
  4450                                  ;
  4451                                  ;-----------------------------------------------------------------------------------------------------------------------
  4452 00000FFE 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  4453 00001000 A218080000                                      mov     [wbConsoleColumn],al                            ;save column
  4454 00001005 C3                                              ret                                                     ;return
  4455                                  ;-----------------------------------------------------------------------------------------------------------------------
  4456                                  ;
  4457                                  ;       Routine:        GetConsoleChar
  4458                                  ;
  4459                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4460                                  ;
  4461                                  ;       Out:            AL      ASCII character code
  4462                                  ;                       AH      keyboard scan code
  4463                                  ;
  4464                                  ;-----------------------------------------------------------------------------------------------------------------------
  4465 00001006 E85C020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4466 0000100B E8A7030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  4467 00001010 09C0                                            or      eax,eax                                         ;do we have a message?
  4468 00001012 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  4469 00001014 50                                              push    eax                                             ;save key codes
  4470 00001015 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  4471 0000101A 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4472 0000101F 58                                              pop     eax                                             ;restore key codes
  4473 00001020 75E9                                            jne     GetConsoleChar                                  ;no, try again
  4474 00001022 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4475 00001027 C3                                              ret                                                     ;return
  4476                                  ;-----------------------------------------------------------------------------------------------------------------------
  4477                                  ;
  4478                                  ;       Routine:        GetConsoleString
  4479                                  ;
  4480                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4481                                  ;
  4482                                  ;       In:             DS:EDX  target buffer address
  4483                                  ;                       ECX     maximum number of characters to accept
  4484                                  ;                       BH      Bit 0:  1 = echo to terminal
  4485                                  ;                               Bit 1:  1 = break on attention identifier key (F)
  4486                                  ;                       BL      terminating character
  4487                                  ;
  4488                                  ;-----------------------------------------------------------------------------------------------------------------------
  4489 00001028 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4490 00001029 56                                              push    esi                                             ;
  4491 0000102A 57                                              push    edi                                             ;
  4492 0000102B 06                                              push    es                                              ;
  4493 0000102C 1E                                              push    ds                                              ;load data segment selector ...
  4494 0000102D 07                                              pop     es                                              ;... into extra segment register
  4495 0000102E 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4496 00001030 51                                              push    ecx                                             ;save maximum characters
  4497 00001031 30C0                                            xor     al,al                                           ;zero register
  4498 00001033 FC                                              cld                                                     ;forward strings
  4499 00001034 F3AA                                            rep     stosb                                           ;zero fill buffer
  4500 00001036 59                                              pop     ecx                                             ;maximum characters
  4501 00001037 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4502 00001039 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4503 0000103B E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4504 0000103D E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4505 00001042 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4506 00001044 7445                                            je      .50                                             ;yes, exit
  4507 00001046 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4508 00001048 7521                                            jne     .30                                             ;no, skip ahead
  4509 0000104A 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4510 0000104C 74EF                                            je      .20                                             ;yes, get next character
  4511 0000104E 4F                                              dec     edi                                             ;backup target pointer
  4512 0000104F C60700                                          mov     byte [edi],0                                    ;zero previous character
  4513 00001052 41                                              inc     ecx                                             ;increment remaining chars
  4514 00001053 F6C701                                          test    bh,1                                            ;echo to console?
  4515 00001056 74E5                                            jz      .20                                             ;no, get next character
  4516 00001058 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4517 0000105D B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4518 0000105F E891000000                                      call    PutConsoleChar                                  ;write space to console
  4519 00001064 E863040000                                      call    PlaceCursor                                     ;position the cursor
  4520 00001069 EBD2                                            jmp     .20                                             ;get next character
  4521 0000106B 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4522 0000106D 72CE                                            jb      .20                                             ;no, get another character
  4523 0000106F 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4524 00001071 77CA                                            ja      .20                                             ;no, get another character
  4525 00001073 AA                                              stosb                                                   ;store character in buffer
  4526 00001074 F6C701                                          test    bh,1                                            ;echo to console?
  4527 00001077 740F                                            jz      .40                                             ;no, skip ahead
  4528 00001079 E877000000                                      call    PutConsoleChar                                  ;write character to console
  4529 0000107E E810000000                                      call    NextConsoleColumn                               ;advance console position
  4530 00001083 E844040000                                      call    PlaceCursor                                     ;position the cursor
  4531 00001088 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4532 00001089 EBB0                                            jmp     .10                                             ;next
  4533 0000108B 30C0                    .50                     xor     al,al                                           ;null
  4534 0000108D AA                                              stosb                                                   ;terminate buffer
  4535 0000108E 07                                              pop     es                                              ;restore non-volatile regs
  4536 0000108F 5F                                              pop     edi                                             ;
  4537 00001090 5E                                              pop     esi                                             ;
  4538 00001091 59                                              pop     ecx                                             ;
  4539 00001092 C3                                              ret                                                     ;return
  4540                                  ;-----------------------------------------------------------------------------------------------------------------------
  4541                                  ;
  4542                                  ;       Routine:        NextConsoleColumn
  4543                                  ;
  4544                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4545                                  ;                       incremented if the end of the current row is reached.
  4546                                  ;
  4547                                  ;       In:             DS      OS data selector
  4548                                  ;
  4549                                  ;-----------------------------------------------------------------------------------------------------------------------
  4550 00001093 A018080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4551 00001098 FEC0                                            inc     al                                              ;increment column
  4552 0000109A A218080000                                      mov     [wbConsoleColumn],al                            ;save column
  4553 0000109F 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4554 000010A1 720A                                            jb      .10                                             ;no, skip ahead
  4555 000010A3 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4556 000010A8 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4557 000010AD C3                      .10                     ret                                                     ;return
  4558                                  ;-----------------------------------------------------------------------------------------------------------------------
  4559                                  ;
  4560                                  ;       Routine:        NextConsoleRow
  4561                                  ;
  4562                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4563                                  ;
  4564                                  ;       In:             DS      OS data selector
  4565                                  ;
  4566                                  ;-----------------------------------------------------------------------------------------------------------------------
  4567 000010AE A019080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4568 000010B3 FEC0                                            inc     al                                              ;increment row
  4569 000010B5 A219080000                                      mov     [wbConsoleRow],al                               ;save row
  4570 000010BA 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4571 000010BC 7211                                            jb      .10                                             ;no, skip ahead
  4572 000010BE E88C030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4573 000010C3 A019080000                                      mov     al,[wbConsoleRow]                               ;row
  4574 000010C8 FEC8                                            dec     al                                              ;decrement row
  4575 000010CA A219080000                                      mov     [wbConsoleRow],al                               ;save row
  4576 000010CF C3                      .10                     ret                                                     ;return
  4577                                  ;-----------------------------------------------------------------------------------------------------------------------
  4578                                  ;
  4579                                  ;       Routine:        PreviousConsoleColumn
  4580                                  ;
  4581                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4582                                  ;                       the column is set to the last position in the row and the row is decremented.
  4583                                  ;
  4584                                  ;       In:             DS      OS data selector
  4585                                  ;
  4586                                  ;-----------------------------------------------------------------------------------------------------------------------
  4587 000010D0 A018080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4588 000010D5 08C0                                            or      al,al                                           ;start of row?
  4589 000010D7 7514                                            jnz     .10                                             ;no, skip ahead
  4590 000010D9 8A2519080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4591 000010DF 08E4                                            or      ah,ah                                           ;top of screen?
  4592 000010E1 7411                                            jz      .20                                             ;yes, exit with no change
  4593 000010E3 FECC                                            dec     ah                                              ;decrement row
  4594 000010E5 882519080000                                    mov     [wbConsoleRow],ah                               ;save row
  4595 000010EB B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4596 000010ED FEC8                    .10                     dec     al                                              ;decrement column
  4597 000010EF A218080000                                      mov     [wbConsoleColumn],al                            ;save column
  4598 000010F4 C3                      .20                     ret                                                     ;return
  4599                                  ;-----------------------------------------------------------------------------------------------------------------------
  4600                                  ;
  4601                                  ;       Routine:        PutConsoleChar
  4602                                  ;
  4603                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4604                                  ;
  4605                                  ;       In:             AL      ASCII character
  4606                                  ;                       DS      OS data selector
  4607                                  ;
  4608                                  ;-----------------------------------------------------------------------------------------------------------------------
  4609 000010F5 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4610 000010F6 06                                              push    es                                              ;
  4611 000010F7 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4612 000010F9 07                                              pop     es                                              ;... into extra segment reg
  4613 000010FA 8A0D18080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4614 00001100 8A2D19080000                                    mov     ch,[wbConsoleRow]                               ;row
  4615 00001106 E870030000                                      call    SetConsoleChar                                  ;put character at row, column
  4616 0000110B 07                                              pop     es                                              ;restore non-volatile regs
  4617 0000110C 59                                              pop     ecx                                             ;
  4618 0000110D C3                                              ret                                                     ;return
  4619                                  ;-----------------------------------------------------------------------------------------------------------------------
  4620                                  ;
  4621                                  ;       Routine:        PutConsoleHexByte
  4622                                  ;
  4623                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4624                                  ;
  4625                                  ;       In:             AL      byte value
  4626                                  ;                       CL      column
  4627                                  ;                       CH      row
  4628                                  ;                       DS      OS data selector
  4629                                  ;                       ES      CGA selector
  4630                                  ;
  4631                                  ;-----------------------------------------------------------------------------------------------------------------------
  4632 0000110E 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  4633 0000110F C0E804                                          shr     al,4                                            ;hi-order nybble
  4634 00001112 E803000000                                      call    .10                                             ;make ASCII and store
  4635 00001117 58                                              pop     eax                                             ;byte value
  4636 00001118 240F                                            and     al,0Fh                                          ;lo-order nybble
  4637 0000111A 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  4638 0000111C 3C3A                                            cmp     al,03Ah                                         ;numeric?
  4639 0000111E 7202                                            jb      .20                                             ;yes, skip ahead
  4640 00001120 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4641 00001122 E854030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4642 00001127 C3                                              ret                                                     ;return
  4643                                  ;-----------------------------------------------------------------------------------------------------------------------
  4644                                  ;
  4645                                  ;       Routine:        PutConsoleHexDword
  4646                                  ;
  4647                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4648                                  ;
  4649                                  ;       In:             EAX     value
  4650                                  ;                       CL      column
  4651                                  ;                       CH      row
  4652                                  ;                       DS      OS data selector
  4653                                  ;                       ES      CGA selector
  4654                                  ;
  4655                                  ;-----------------------------------------------------------------------------------------------------------------------
  4656 00001128 50                      PutConsoleHexDword      push    eax
  4657 00001129 C1E810                                          shr     eax,16
  4658 0000112C E807000000                                      call    PutConsoleHexWord
  4659 00001131 58                                              pop     eax
  4660 00001132 E801000000                                      call    PutConsoleHexWord
  4661 00001137 C3                                              ret
  4662                                  ;-----------------------------------------------------------------------------------------------------------------------
  4663                                  ;
  4664                                  ;       Routine:        PutConsoleHexWord
  4665                                  ;
  4666                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4667                                  ;
  4668                                  ;       In:             EAX     value
  4669                                  ;                       CL      column
  4670                                  ;                       CH      row
  4671                                  ;                       DS      OS data selector
  4672                                  ;                       ES      CGA selector
  4673                                  ;
  4674                                  ;-----------------------------------------------------------------------------------------------------------------------
  4675 00001138 50                      PutConsoleHexWord       push    eax
  4676 00001139 C1E808                                          shr     eax,8
  4677 0000113C E8CDFFFFFF                                      call    PutConsoleHexByte
  4678 00001141 58                                              pop     eax
  4679 00001142 E8C7FFFFFF                                      call    PutConsoleHexByte
  4680 00001147 C3                                              ret
  4681                                  ;-----------------------------------------------------------------------------------------------------------------------
  4682                                  ;
  4683                                  ;       Routine:        PutConsoleOIAChar
  4684                                  ;
  4685                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4686                                  ;
  4687                                  ;       In:             DS      OS data selector
  4688                                  ;
  4689                                  ;-----------------------------------------------------------------------------------------------------------------------
  4690 00001148 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4691 00001149 51                                              push    ecx                                             ;
  4692 0000114A 56                                              push    esi                                             ;
  4693 0000114B 1E                                              push    ds                                              ;
  4694 0000114C 06                                              push    es                                              ;
  4695 0000114D 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4696 0000114F 1F                                              pop     ds                                              ;... into data segment register
  4697 00001150 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4698 00001152 07                                              pop     es                                              ;... into extra segment register
  4699 00001153 BE1D080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4700 00001158 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4701 0000115A B300                                            mov     bl,0                                            ;starting column
  4702 0000115C B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4703 00001161 51                      .10                     push    ecx                                             ;save remaining count
  4704 00001162 89D9                                            mov     ecx,ebx                                         ;row, column
  4705 00001164 AC                                              lodsb                                                   ;read scan code
  4706 00001165 08C0                                            or      al,al                                           ;scan code present?
  4707 00001167 7407                                            jz      .20                                             ;no, skip ahead
  4708 00001169 E8A0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4709 0000116E EB0E                                            jmp     .30                                             ;continue
  4710 00001170 B020                    .20                     mov     al,' '                                          ;ASCII space
  4711 00001172 E804030000                                      call    SetConsoleChar                                  ;display space
  4712 00001177 B020                                            mov     al,' '                                          ;ASCII space
  4713 00001179 E8FD020000                                      call    SetConsoleChar                                  ;display space
  4714 0000117E 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4715 00001181 59                                              pop     ecx                                             ;restore remaining
  4716 00001182 E2DD                                            loop    .10                                             ;next code
  4717 00001184 A023080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4718 00001189 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4719 0000118B 720D                                            jb      .40                                             ;no, skip ahead
  4720 0000118D 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4721 0000118F 7709                                            ja      .40                                             ;no, skip ahead
  4722 00001191 88FD                                            mov     ch,bh                                           ;OIA row
  4723 00001193 B128                                            mov     cl,40                                           ;character display column
  4724 00001195 E8E1020000                                      call    SetConsoleChar                                  ;display ASCII character
  4725 0000119A 07                      .40                     pop     es                                              ;restore non-volatile regs
  4726 0000119B 1F                                              pop     ds                                              ;
  4727 0000119C 5E                                              pop     esi                                             ;
  4728 0000119D 59                                              pop     ecx                                             ;
  4729 0000119E 5B                                              pop     ebx                                             ;
  4730 0000119F C3                                              ret                                                     ;return
  4731                                  ;-----------------------------------------------------------------------------------------------------------------------
  4732                                  ;
  4733                                  ;       Routine:        PutConsoleOIAShift
  4734                                  ;
  4735                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4736                                  ;
  4737                                  ;       In:             BL      shift flags
  4738                                  ;                       BH      lock flags
  4739                                  ;                       DS      OS data selector
  4740                                  ;
  4741                                  ;-----------------------------------------------------------------------------------------------------------------------
  4742 000011A0 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4743 000011A1 06                                              push    es                                              ;
  4744 000011A2 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4745 000011A4 07                                              pop     es                                              ;... into ES register
  4746 000011A5 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4747 000011A7 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4748 000011A9 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4749 000011AC 7402                                            jz      .10                                             ;no, skip ahead
  4750 000011AE B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4751 000011B0 B10D                    .10                     mov     cl,13                                           ;indicator column
  4752 000011B2 E8C4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4753 000011B7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4754 000011B9 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4755 000011BC 7402                                            jz      .20                                             ;no, skip ahead
  4756 000011BE B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4757 000011C0 B146                    .20                     mov     cl,70                                           ;indicator column
  4758 000011C2 E8B4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4759 000011C7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4760 000011C9 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4761 000011CC 7402                                            jz      .30                                             ;no, skip ahead
  4762 000011CE B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4763 000011D0 B10E                    .30                     mov     cl,14                                           ;indicator column
  4764 000011D2 E8A4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4765 000011D7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4766 000011D9 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4767 000011DC 7402                                            jz      .40                                             ;no, skip ahead
  4768 000011DE B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4769 000011E0 B145                    .40                     mov     cl,69                                           ;indicator column
  4770 000011E2 E894020000                                      call    SetConsoleChar                                  ;display ASCII character
  4771 000011E7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4772 000011E9 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4773 000011EC 7402                                            jz      .50                                             ;no, skip ahead
  4774 000011EE B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4775 000011F0 B10F                    .50                     mov     cl,15                                           ;indicator column
  4776 000011F2 E884020000                                      call    SetConsoleChar                                  ;display ASCII character
  4777 000011F7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4778 000011F9 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4779 000011FC 7402                                            jz      .60                                             ;no, skip ahead
  4780 000011FE B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4781 00001200 B144                    .60                     mov     cl,68                                           ;indicator column
  4782 00001202 E874020000                                      call    SetConsoleChar                                  ;display ASCII character
  4783 00001207 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4784 00001209 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4785 0000120C 7402                                            jz      .70                                             ;no, skip ahead
  4786 0000120E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4787 00001210 B149                    .70                     mov     cl,73                                           ;indicator column
  4788 00001212 E864020000                                      call    SetConsoleChar                                  ;display ASCII character
  4789 00001217 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4790 00001219 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4791 0000121C 7402                                            jz      .80                                             ;no, skip ahead
  4792 0000121E B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4793 00001220 B148                    .80                     mov     cl,72                                           ;indicator column
  4794 00001222 E854020000                                      call    SetConsoleChar                                  ;display ASCII character
  4795 00001227 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4796 00001229 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4797 0000122C 7402                                            jz      .90                                             ;no, skip ahead
  4798 0000122E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4799 00001230 B14A                    .90                     mov     cl,74                                           ;indicator column
  4800 00001232 E844020000                                      call    SetConsoleChar                                  ;display ASCII character
  4801 00001237 07                                              pop     es                                              ;restore non-volatile regs
  4802 00001238 59                                              pop     ecx                                             ;
  4803 00001239 C3                                              ret                                                     ;return
  4804                                  ;-----------------------------------------------------------------------------------------------------------------------
  4805                                  ;
  4806                                  ;       Routine:        PutConsoleString
  4807                                  ;
  4808                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4809                                  ;                       console position as needed.
  4810                                  ;
  4811                                  ;       In:             EDX     source address
  4812                                  ;                       DS      OS data selector
  4813                                  ;
  4814                                  ;-----------------------------------------------------------------------------------------------------------------------
  4815 0000123A 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4816 0000123B 89D6                                            mov     esi,edx                                         ;source address
  4817 0000123D FC                                              cld                                                     ;forward strings
  4818 0000123E AC                      .10                     lodsb                                                   ;ASCII character
  4819 0000123F 08C0                                            or      al,al                                           ;end of string?
  4820 00001241 7422                                            jz      .40                                             ;yes, skip ahead
  4821 00001243 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4822 00001245 7507                                            jne     .20                                             ;no, skip ahead
  4823 00001247 E8B2FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4824 0000124C EBF0                                            jmp     .10                                             ;next character
  4825 0000124E 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4826 00001250 7507                                            jne     .30                                             ;no, skip ahead
  4827 00001252 E857FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4828 00001257 EBE5                                            jmp     .10                                             ;next character
  4829 00001259 E897FEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4830 0000125E E830FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4831 00001263 EBD9                                            jmp     .10                                             ;next character
  4832 00001265 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4833 00001266 C3                                              ret                                                     ;return
  4834                                  ;-----------------------------------------------------------------------------------------------------------------------
  4835                                  ;
  4836                                  ;       Routine:        Yield
  4837                                  ;
  4838                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4839                                  ;
  4840                                  ;-----------------------------------------------------------------------------------------------------------------------
  4841 00001267 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4842 00001268 F4                                              hlt                                                     ;halt until external interrupt
  4843 00001269 C3                                              ret                                                     ;return
  4844                                  ;=======================================================================================================================
  4845                                  ;
  4846                                  ;       Data-Type Conversion Helper Routines
  4847                                  ;
  4848                                  ;       ByteToHex
  4849                                  ;       DecimalToUnsigned
  4850                                  ;       HexadecimalToUnsigned
  4851                                  ;       PutMACString
  4852                                  ;       UnsignedToDecimalString
  4853                                  ;       UnsignedToHexadecimal
  4854                                  ;
  4855                                  ;=======================================================================================================================
  4856                                  ;-----------------------------------------------------------------------------------------------------------------------
  4857                                  ;
  4858                                  ;       Routine:        ByteToHex
  4859                                  ;
  4860                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of 8-bit binary input.
  4861                                  ;
  4862                                  ;       Input:          DS:ESI  source address of byte
  4863                                  ;                       ES:EDI  target address of ASCIIZ string
  4864                                  ;
  4865                                  ;-----------------------------------------------------------------------------------------------------------------------
  4866 0000126A AC                      ByteToHex               lodsb                                                   ;input byte
  4867 0000126B 50                                              push    eax                                             ;save input byte
  4868 0000126C C0E804                                          shr     al,4                                            ;hi-order nybble
  4869 0000126F E803000000                                      call    .10                                             ;make ASCII and store
  4870 00001274 58                                              pop     eax                                             ;input byte
  4871 00001275 240F                                            and     al,00Fh                                         ;lo-order nybble
  4872 00001277 0C30                    .10                     or      al,030h                                         ;ASCII numeral zone
  4873 00001279 3C3A                                            cmp     al,03Ah                                         ;'A' through 'F'?
  4874 0000127B 7202                                            jb      .20                                             ;no, branch
  4875 0000127D 0407                                            add     al,7                                            ;ajdust for 'A' through 'F'
  4876 0000127F AA                      .20                     stosb                                                   ;store to output buffer
  4877 00001280 C3                                              ret                                                     ;return
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ;
  4880                                  ;       Routine:        DecimalToUnsigned
  4881                                  ;
  4882                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4883                                  ;
  4884                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4885                                  ;
  4886                                  ;       Output:         EAX     unsigned integer value
  4887                                  ;
  4888                                  ;-----------------------------------------------------------------------------------------------------------------------
  4889 00001281 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4890 00001282 89D6                                            mov     esi,edx                                         ;source address
  4891 00001284 31D2                                            xor     edx,edx                                         ;zero total
  4892 00001286 AC                      .10                     lodsb                                                   ;source byte
  4893 00001287 3C2C                                            cmp     al,','                                          ;comma?
  4894 00001289 74FB                                            je      .10                                             ;yes, ignore
  4895 0000128B 84C0                                            test    al,al                                           ;end of string?
  4896 0000128D 7421                                            jz      .30                                             ;yes, done
  4897 0000128F 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4898 00001291 741D                                            je      .30                                             ;yes, done
  4899 00001293 3C30                                            cmp     al,'0'                                          ;numeral?
  4900 00001295 7217                                            jb      .20                                             ;no, invalid string
  4901 00001297 3C39                                            cmp     al,'9'                                          ;numeral?
  4902 00001299 7713                                            ja      .20                                             ;no, invalid string
  4903 0000129B 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4904 0000129D 50                                              push    eax                                             ;save numeral
  4905 0000129E D1E2                                            shl     edx,1                                           ;total * 2
  4906 000012A0 89D0                                            mov     eax,edx                                         ;total * 2
  4907 000012A2 C1E202                                          shl     edx,2                                           ;total * 8
  4908 000012A5 01C2                                            add     edx,eax                                         ;total * 10
  4909 000012A7 58                                              pop     eax                                             ;restore numeral
  4910 000012A8 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4911 000012AA 31C0                                            xor     eax,eax                                         ;zero register
  4912 000012AC EBD8                                            jmp     .10                                             ;next
  4913 000012AE 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4914 000012B0 89D0                    .30                     mov     eax,edx                                         ;result
  4915 000012B2 5E                                              pop     esi                                             ;restore non-volatile regs
  4916 000012B3 C3                                              ret                                                     ;return
  4917                                  ;-----------------------------------------------------------------------------------------------------------------------
  4918                                  ;
  4919                                  ;       Routine:        HexadecimalToUnsigned
  4920                                  ;
  4921                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4922                                  ;
  4923                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4924                                  ;
  4925                                  ;       Output:         EAX     unsigned integer value
  4926                                  ;
  4927                                  ;-----------------------------------------------------------------------------------------------------------------------
  4928 000012B4 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4929 000012B5 89D6                                            mov     esi,edx                                         ;source address
  4930 000012B7 31D2                                            xor     edx,edx                                         ;zero register
  4931 000012B9 AC                      .10                     lodsb                                                   ;source byte
  4932 000012BA 84C0                                            test    al,al                                           ;end of string?
  4933 000012BC 7410                                            jz      .30                                             ;yes, branch
  4934 000012BE 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4935 000012C0 7602                                            jna     .20                                             ;no, skip ahead
  4936 000012C2 2C37                                            sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  4937 000012C4 83E00F                  .20                     and     eax,00Fh                                        ;remove ascii zone
  4938 000012C7 C1E204                                          shl     edx,4                                           ;previous total x 16
  4939 000012CA 01C2                                            add     edx,eax                                         ;add prior value x 16
  4940 000012CC EBEB                                            jmp     .10                                             ;next
  4941 000012CE 89D0                    .30                     mov     eax,edx                                         ;result
  4942 000012D0 5E                                              pop     esi                                             ;restore non-volatile regs
  4943 000012D1 C3                                              ret                                                     ;return
  4944                                  ;-----------------------------------------------------------------------------------------------------------------------
  4945                                  ;
  4946                                  ;       Routine:        PutMACString
  4947                                  ;
  4948                                  ;       Description:    This routine creates an ASCIIZ string representing the MAC address at the source address
  4949                                  ;
  4950                                  ;       Input:          ECX     source address of byte
  4951                                  ;                       EDX     target address of ASCIIZ string
  4952                                  ;
  4953                                  ;-----------------------------------------------------------------------------------------------------------------------
  4954 000012D2 51                      PutMACString            push    ecx                                             ;save non-volatile regs
  4955 000012D3 56                                              push    esi                                             ;
  4956 000012D4 57                                              push    edi                                             ;
  4957 000012D5 89D7                                            mov     edi,edx                                         ;output buffer address
  4958 000012D7 89CE                                            mov     esi,ecx                                         ;source buffer address
  4959 000012D9 31C9                                            xor     ecx,ecx                                         ;zero ecx
  4960 000012DB B105                                            mov     cl,5                                            ;bytes that precede dashes
  4961 000012DD E888FFFFFF              .10                     call    ByteToHex                                       ;store hexadecimal ASCII
  4962 000012E2 B02D                                            mov     al,EASCIIDASH                                   ;delimiter
  4963 000012E4 AA                                              stosb                                                   ;store delimiter
  4964 000012E5 E2F6                                            loop    .10                                             ;next
  4965 000012E7 E87EFFFFFF                                      call    ByteToHex                                       ;store hexadecimal ASCII
  4966 000012EC 30C0                                            xor     al,al                                           ;terminator
  4967 000012EE AA                                              stosb                                                   ;store terminator
  4968 000012EF 5F                                              pop     edi                                             ;restore non-volatile regs
  4969 000012F0 5E                                              pop     esi                                             ;
  4970 000012F1 59                                              pop     ecx                                             ;
  4971 000012F2 C3                                              ret                                                     ;return
  4972                                  ;-----------------------------------------------------------------------------------------------------------------------
  4973                                  ;
  4974                                  ;       Routine:        UnsignedToDecimalString
  4975                                  ;
  4976                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4977                                  ;
  4978                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4979                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4980                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4981                                  ;                       ECX     32-bit binary
  4982                                  ;                       DS:EDX  output buffer address
  4983                                  ;
  4984                                  ;-----------------------------------------------------------------------------------------------------------------------
  4985 000012F3 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4986 000012F4 51                                              push    ecx                                             ;
  4987 000012F5 57                                              push    edi                                             ;
  4988 000012F6 06                                              push    es                                              ;
  4989 000012F7 1E                                              push    ds                                              ;load data selector
  4990 000012F8 07                                              pop     es                                              ;... into extra segment reg
  4991 000012F9 89D7                                            mov     edi,edx                                         ;output buffer address
  4992 000012FB 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4993 000012FE 89CA                                            mov     edx,ecx                                         ;binary
  4994 00001300 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4995 00001305 E871000000                                      call    .30                                             ;divide and store
  4996 0000130A B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4997 0000130F E855000000                                      call    .10                                             ;divide and store
  4998 00001314 B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4999 00001319 E85D000000                                      call    .30                                             ;divide and store
  5000 0000131E B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  5001 00001323 E853000000                                      call    .30                                             ;divide and store
  5002 00001328 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  5003 0000132D E837000000                                      call    .10                                             ;divide and store
  5004 00001332 B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  5005 00001337 E83F000000                                      call    .30                                             ;divide and store
  5006 0000133C B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  5007 00001341 E835000000                                      call    .30                                             ;divide and store
  5008 00001346 B964000000                                      mov     ecx,100                                         ;10^2 divisor
  5009 0000134B E819000000                                      call    .10                                             ;divide and store
  5010 00001350 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  5011 00001355 E821000000                                      call    .30                                             ;divide and store
  5012 0000135A 89D0                                            mov     eax,edx                                         ;10^1 remainder
  5013 0000135C E827000000                                      call    .40                                             ;store
  5014 00001361 30C0                                            xor     al,al                                           ;null terminator
  5015 00001363 AA                                              stosb                                                   ;store in output buffer
  5016 00001364 07                                              pop     es                                              ;restore non-volatile regs
  5017 00001365 5F                                              pop     edi                                             ;
  5018 00001366 59                                              pop     ecx                                             ;
  5019 00001367 5B                                              pop     ebx                                             ;
  5020 00001368 C3                                              ret                                                     ;return
  5021 00001369 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  5022 0000136C 740D                                            jz      .30                                             ;no, branch
  5023 0000136E F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  5024 00001371 7405                                            jz      .20                                             ;no, store delim
  5025 00001373 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  5026 00001376 7403                                            jz      .30                                             ;no, branch
  5027 00001378 B02C                    .20                     mov     al,','                                          ;delimiter
  5028 0000137A AA                                              stosb                                                   ;store delimiter
  5029 0000137B 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  5030 0000137D 31D2                                            xor     edx,edx                                         ;zero hi-order
  5031 0000137F F7F1                                            div     ecx                                             ;divide by power of 10
  5032 00001381 84C0                                            test    al,al                                           ;zero?
  5033 00001383 7407                                            jz      .50                                             ;yes, branch
  5034 00001385 80CF10                                          or      bh,00010000b                                    ;non-zero found
  5035 00001388 0C30                    .40                     or      al,030h                                         ;ASCII zone
  5036 0000138A AA                                              stosb                                                   ;store digit
  5037 0000138B C3                                              ret                                                     ;return
  5038 0000138C F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  5039 0000138F 74F7                                            jz      .40                                             ;no, store and continue
  5040 00001391 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  5041 00001394 75F2                                            jnz     .40                                             ;yes, store and continue
  5042 00001396 C3                                              ret                                                     ;return
  5043                                  ;-----------------------------------------------------------------------------------------------------------------------
  5044                                  ;
  5045                                  ;       Routine:        UnsignedToHexadecimal
  5046                                  ;
  5047                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  5048                                  ;
  5049                                  ;       Input:          DS:EDX  output buffer address
  5050                                  ;                       ECX     32-bit binary
  5051                                  ;
  5052                                  ;-----------------------------------------------------------------------------------------------------------------------
  5053 00001397 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  5054 00001398 89D7                                            mov     edi,edx                                         ;output buffer address
  5055 0000139A 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  5056 0000139C 31C9                                            xor     ecx,ecx                                         ;zero register
  5057 0000139E B108                                            mov     cl,8                                            ;nybble count
  5058 000013A0 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  5059 000013A3 88D0                                            mov     al,dl                                           ;????bbbb
  5060 000013A5 240F                                            and     al,00Fh                                         ;mask out bits 4-7
  5061 000013A7 0C30                                            or      al,030h                                         ;mask in ascii zone
  5062 000013A9 3C3A                                            cmp     al,03Ah                                         ;A through F?
  5063 000013AB 7202                                            jb      .20                                             ;no, skip ahead
  5064 000013AD 0407                                            add     al,7                                            ;41h through 46h
  5065 000013AF AA                      .20                     stosb                                                   ;store hexnum
  5066 000013B0 E2EE                                            loop    .10                                             ;next nybble
  5067 000013B2 30C0                                            xor     al,al                                           ;zero reg
  5068 000013B4 AA                                              stosb                                                   ;null terminate
  5069 000013B5 5F                                              pop     edi                                             ;restore non-volatile regs
  5070 000013B6 C3                                              ret                                                     ;return
  5071                                  ;=======================================================================================================================
  5072                                  ;
  5073                                  ;       Message Queue Helper Routines
  5074                                  ;
  5075                                  ;       GetMessage
  5076                                  ;       PutMessage
  5077                                  ;
  5078                                  ;=======================================================================================================================
  5079                                  ;-----------------------------------------------------------------------------------------------------------------------
  5080                                  ;
  5081                                  ;       Routine:        GetMessage
  5082                                  ;
  5083                                  ;       Description:    This routine reads and removes a message from the message queue.
  5084                                  ;
  5085                                  ;       Out:            EAX     lo-order message data
  5086                                  ;                       EDX     hi-order message data
  5087                                  ;
  5088                                  ;                       CY      0 = message read
  5089                                  ;                               1 = no message to read
  5090                                  ;
  5091                                  ;-----------------------------------------------------------------------------------------------------------------------
  5092 000013B7 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  5093 000013B8 51                                              push    ecx                                             ;
  5094 000013B9 1E                                              push    ds                                              ;
  5095 000013BA 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  5096 000013BC 1F                                              pop     ds                                              ;... into data segment register
  5097 000013BD 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  5098 000013C3 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  5099 000013C5 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  5100 000013C8 09D0                                            or      eax,edx                                         ;is queue empty?
  5101 000013CA F9                                              stc                                                     ;assume queue is emtpy
  5102 000013CB 741B                                            jz      .20                                             ;yes, skip ahead
  5103 000013CD 31C9                                            xor     ecx,ecx                                         ;store zero
  5104 000013CF 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  5105 000013D1 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  5106 000013D4 83C308                                          add     ebx,8                                           ;next queue element
  5107 000013D7 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  5108 000013DD 7502                                            jnz     .10                                             ;no, skip ahead
  5109 000013DF B308                                            mov     bl,8                                            ;reset to 1st entry
  5110 000013E1 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  5111 000013E7 F8                                              clc                                                     ;indicate message read
  5112 000013E8 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  5113 000013E9 59                                              pop     ecx                                             ;
  5114 000013EA 5B                                              pop     ebx                                             ;
  5115 000013EB C3                                              ret                                                     ;return
  5116                                  ;-----------------------------------------------------------------------------------------------------------------------
  5117                                  ;
  5118                                  ;       Routine:        PutMessage
  5119                                  ;
  5120                                  ;       Description:    This routine adds a message to the message queue.
  5121                                  ;
  5122                                  ;       In:             ECX     hi-order data word
  5123                                  ;                       EDX     lo-order data word
  5124                                  ;
  5125                                  ;       Out:            CY      0 = success
  5126                                  ;                               1 = fail: queue is full
  5127                                  ;
  5128                                  ;-----------------------------------------------------------------------------------------------------------------------
  5129 000013EC 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  5130 000013ED 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  5131 000013EF 1F                                              pop     ds                                              ;... into data segment register
  5132 000013F0 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  5133 000013F5 833800                                          cmp     dword [eax],0                                   ;is queue full?
  5134 000013F8 F9                                              stc                                                     ;assume failure
  5135 000013F9 7517                                            jne     .20                                             ;yes, cannot store
  5136 000013FB 8910                                            mov     [eax],edx                                       ;store lo-order data
  5137 000013FD 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  5138 00001400 83C008                                          add     eax,8                                           ;next queue element adr
  5139 00001403 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  5140 00001408 7502                                            jnz     .10                                             ;no, skip ahead
  5141 0000140A B008                                            mov     al,8                                            ;reset to top of queue
  5142 0000140C A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  5143 00001411 F8                                              clc                                                     ;indicate success
  5144 00001412 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  5145 00001413 C3                                              ret                                                     ;return
  5146                                  ;=======================================================================================================================
  5147                                  ;
  5148                                  ;       Memory-Mapped Video Routines
  5149                                  ;
  5150                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  5151                                  ;
  5152                                  ;       ClearConsoleScreen
  5153                                  ;       ScrollConsoleRow
  5154                                  ;       SetConsoleChar
  5155                                  ;       SetConsoleString
  5156                                  ;
  5157                                  ;=======================================================================================================================
  5158                                  ;-----------------------------------------------------------------------------------------------------------------------
  5159                                  ;
  5160                                  ;       Routine:        ClearConsoleScreen
  5161                                  ;
  5162                                  ;       Description:    This routine clears the console (CGA) screen.
  5163                                  ;
  5164                                  ;-----------------------------------------------------------------------------------------------------------------------
  5165 00001414 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  5166 00001415 57                                              push    edi                                             ;
  5167 00001416 1E                                              push    ds                                              ;
  5168 00001417 06                                              push    es                                              ;
  5169 00001418 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  5170 0000141A 1F                                              pop     ds                                              ;... into DS register
  5171 0000141B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  5172 0000141D 07                                              pop     es                                              ;... into ES register
  5173 0000141E B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  5174 00001423 B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  5175 00001428 31FF                                            xor     edi,edi                                         ;target offset
  5176 0000142A FC                                              cld                                                     ;forward strings
  5177 0000142B F3AB                                            rep     stosd                                           ;reset screen body
  5178 0000142D B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  5179 00001432 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  5180 00001437 F3AB                                            rep     stosd                                           ;reset OIA line
  5181 00001439 30C0                                            xor     al,al                                           ;zero register
  5182 0000143B A219080000                                      mov     [wbConsoleRow],al                               ;reset console row
  5183 00001440 A218080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  5184 00001445 E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  5185 0000144A 07                                              pop     es                                              ;restore non-volatile regs
  5186 0000144B 1F                                              pop     ds                                              ;
  5187 0000144C 5F                                              pop     edi                                             ;
  5188 0000144D 59                                              pop     ecx                                             ;
  5189 0000144E C3                                              ret                                                     ;return
  5190                                  ;-----------------------------------------------------------------------------------------------------------------------
  5191                                  ;
  5192                                  ;       Routine:        ScrollConsoleRow
  5193                                  ;
  5194                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  5195                                  ;
  5196                                  ;-----------------------------------------------------------------------------------------------------------------------
  5197 0000144F 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  5198 00001450 56                                              push    esi                                             ;
  5199 00001451 57                                              push    edi                                             ;
  5200 00001452 1E                                              push    ds                                              ;
  5201 00001453 06                                              push    es                                              ;
  5202 00001454 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  5203 00001456 1F                                              pop     ds                                              ;... into DS
  5204 00001457 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  5205 00001459 07                                              pop     es                                              ;... into ES
  5206 0000145A B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  5207 0000145F BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  5208 00001464 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  5209 00001466 FC                                              cld                                                     ;forward strings
  5210 00001467 F3A5                                            rep     movsd                                           ;move 24 lines up
  5211 00001469 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  5212 0000146E B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  5213 00001473 F3AB                                            rep     stosd                                           ;clear bottom row
  5214 00001475 07                                              pop     es                                              ;restore non-volatile regs
  5215 00001476 1F                                              pop     ds                                              ;
  5216 00001477 5F                                              pop     edi                                             ;
  5217 00001478 5E                                              pop     esi                                             ;
  5218 00001479 59                                              pop     ecx                                             ;
  5219 0000147A C3                                              ret                                                     ;return
  5220                                  ;-----------------------------------------------------------------------------------------------------------------------
  5221                                  ;
  5222                                  ;       Routine:        SetConsoleChar
  5223                                  ;
  5224                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  5225                                  ;
  5226                                  ;       In:             AL      ASCII character
  5227                                  ;                       CL      column
  5228                                  ;                       CH      row
  5229                                  ;                       ES      CGA selector
  5230                                  ;
  5231                                  ;       Out:            EAX     last target address written (ES:)
  5232                                  ;                       CL      column + 1
  5233                                  ;
  5234                                  ;-----------------------------------------------------------------------------------------------------------------------
  5235 0000147B 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  5236 0000147D 0FB6C5                                          movzx   eax,ch                                          ;row
  5237 00001480 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  5238 00001482 F6E4                                            mul     ah                                              ;row * cols/row
  5239 00001484 00C8                                            add     al,cl                                           ;add column
  5240 00001486 80D400                                          adc     ah,0                                            ;handle carry
  5241 00001489 D1E0                                            shl     eax,1                                           ;screen offset
  5242 0000148B 268810                                          mov     [es:eax],dl                                     ;store character
  5243 0000148E FEC1                                            inc     cl                                              ;next column
  5244 00001490 C3                                              ret                                                     ;return
  5245                                  ;-----------------------------------------------------------------------------------------------------------------------
  5246                                  ;
  5247                                  ;       Routine:        SetConsoleString
  5248                                  ;
  5249                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  5250                                  ;
  5251                                  ;       In:             ESI     source offset (DS:)
  5252                                  ;                       CL      column
  5253                                  ;                       CH      row
  5254                                  ;                       ES      CGA selector
  5255                                  ;
  5256                                  ;-----------------------------------------------------------------------------------------------------------------------
  5257 00001491 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  5258 00001492 FC                                              cld                                                     ;forward strings
  5259 00001493 AC                      .10                     lodsb                                                   ;next ASCII character
  5260 00001494 84C0                                            test    al,al                                           ;end of string?
  5261 00001496 7407                                            jz      .20                                             ;yes, branch
  5262 00001498 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  5263 0000149D EBF4                                            jmp     .10                                             ;continue
  5264 0000149F 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  5265 000014A0 C3                                              ret                                                     ;return
  5266                                  ;=======================================================================================================================
  5267                                  ;
  5268                                  ;       Input/Output Routines
  5269                                  ;
  5270                                  ;       These routines read and/or write directly to ports.
  5271                                  ;
  5272                                  ;       GetBaseMemSize
  5273                                  ;       GetExtendedMemSize
  5274                                  ;       GetROMMemSize
  5275                                  ;       PlaceCursor
  5276                                  ;       PutPrimaryEndOfInt
  5277                                  ;       PutSecondaryEndOfInt
  5278                                  ;       ReadRealTimeClock
  5279                                  ;       ResetSystem
  5280                                  ;       SetKeyboardLamps
  5281                                  ;       WaitForKeyInBuffer
  5282                                  ;       WaitForKeyOutBuffer
  5283                                  ;
  5284                                  ;=======================================================================================================================
  5285                                  ;-----------------------------------------------------------------------------------------------------------------------
  5286                                  ;
  5287                                  ;       Routine:        GetBaseMemSize
  5288                                  ;
  5289                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  5290                                  ;
  5291                                  ;       Output:         EAX     base RAM size in kilobytes
  5292                                  ;
  5293                                  ;-----------------------------------------------------------------------------------------------------------------------
  5294 000014A1 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  5295 000014A3 B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  5296 000014A5 E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  5297 000014A7 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  5298 000014A9 88C4                                            mov     ah,al                                           ;save base RAM high
  5299 000014AB B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  5300 000014AD E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  5301 000014AF E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  5302 000014B1 C3                                              ret                                                     ;return to caller
  5303                                  ;-----------------------------------------------------------------------------------------------------------------------
  5304                                  ;
  5305                                  ;       Routine:        GetExtendedMemSize
  5306                                  ;
  5307                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  5308                                  ;
  5309                                  ;       Output:         EAX     extended RAM size in kilobytes
  5310                                  ;
  5311                                  ;-----------------------------------------------------------------------------------------------------------------------
  5312 000014B2 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  5313 000014B4 B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  5314 000014B6 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  5315 000014B8 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  5316 000014BA 88C4                                            mov     ah,al                                           ;save extended RAM high
  5317 000014BC B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  5318 000014BE E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  5319 000014C0 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  5320 000014C2 C3                                              ret                                                     ;return to caller
  5321                                  ;-----------------------------------------------------------------------------------------------------------------------
  5322                                  ;
  5323                                  ;       Routine:        GetROMMemSize
  5324                                  ;
  5325                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  5326                                  ;
  5327                                  ;       Output:         EAX     RAM size in kilobytes
  5328                                  ;
  5329                                  ;-----------------------------------------------------------------------------------------------------------------------
  5330 000014C3 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  5331 000014C5 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  5332 000014CB C3                                              ret                                                     ;return
  5333                                  ;-----------------------------------------------------------------------------------------------------------------------
  5334                                  ;
  5335                                  ;       Routine:        PlaceCursor
  5336                                  ;
  5337                                  ;       Description:    This routine positions the cursor on the console.
  5338                                  ;
  5339                                  ;       In:             DS      OS data selector
  5340                                  ;
  5341                                  ;-----------------------------------------------------------------------------------------------------------------------
  5342 000014CC 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  5343 000014CD A019080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  5344 000014D2 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  5345 000014D4 F6E4                                            mul     ah                                              ;row offset
  5346 000014D6 020518080000                                    add     al,[wbConsoleColumn]                            ;add column
  5347 000014DC 80D400                                          adc     ah,0                                            ;add overflow
  5348 000014DF 89C1                                            mov     ecx,eax                                         ;screen offset
  5349 000014E1 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  5350 000014E3 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  5351 000014E5 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  5352 000014E7 EE                                              out     dx,al                                           ;select register
  5353 000014E8 42                                              inc     edx                                             ;data port
  5354 000014E9 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  5355 000014EB EE                                              out     dx,al                                           ;store hi-order loc
  5356 000014EC 4A                                              dec     edx                                             ;register select port
  5357 000014ED B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  5358 000014EF EE                                              out     dx,al                                           ;select register
  5359 000014F0 42                                              inc     edx                                             ;data port
  5360 000014F1 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  5361 000014F3 EE                                              out     dx,al                                           ;store lo-order loc
  5362 000014F4 59                                              pop     ecx                                             ;restore non-volatile regs
  5363 000014F5 C3                                              ret                                                     ;return
  5364                                  ;-----------------------------------------------------------------------------------------------------------------------
  5365                                  ;
  5366                                  ;       Routine:        PutPrimaryEndOfInt
  5367                                  ;
  5368                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  5369                                  ;
  5370                                  ;-----------------------------------------------------------------------------------------------------------------------
  5371 000014F6 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  5372 000014F7 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5373 000014F9 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  5374 000014FB C3                                              ret                                                     ;return
  5375                                  ;-----------------------------------------------------------------------------------------------------------------------
  5376                                  ;
  5377                                  ;       Routine:        PutSecondaryEndOfInt
  5378                                  ;
  5379                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  5380                                  ;
  5381                                  ;-----------------------------------------------------------------------------------------------------------------------
  5382 000014FC FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  5383 000014FD B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5384 000014FF E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  5385 00001501 C3                                              ret                                                     ;return
  5386                                  ;-----------------------------------------------------------------------------------------------------------------------
  5387                                  ;
  5388                                  ;       Routine:        ReadRealTimeClock
  5389                                  ;
  5390                                  ;       Description:    This routine gets current date time from the real-time clock.
  5391                                  ;
  5392                                  ;       In:             DS:EBX  DATETIME structure
  5393                                  ;
  5394                                  ;-----------------------------------------------------------------------------------------------------------------------
  5395 00001502 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  5396 00001503 57                                              push    edi                                             ;
  5397 00001504 06                                              push    es                                              ;
  5398 00001505 1E                                              push    ds                                              ;store data selector ...
  5399 00001506 07                                              pop     es                                              ;... in es register
  5400 00001507 89DF                                            mov     edi,ebx                                         ;date-time structure
  5401 00001509 B000                                            mov     al,ERTCSECONDREG                                ;second register
  5402 0000150B E670                                            out     ERTCREGPORT,al                                  ;select second register
  5403 0000150D E471                                            in      al,ERTCDATAPORT                                 ;read second register
  5404 0000150F FC                                              cld                                                     ;forward strings
  5405 00001510 AA                                              stosb                                                   ;store second value
  5406 00001511 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  5407 00001513 E670                                            out     ERTCREGPORT,al                                  ;select minute register
  5408 00001515 E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  5409 00001517 AA                                              stosb                                                   ;store minute value
  5410 00001518 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  5411 0000151A E670                                            out     ERTCREGPORT,al                                  ;select hour register
  5412 0000151C E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  5413 0000151E AA                                              stosb                                                   ;store hour value
  5414 0000151F B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  5415 00001521 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  5416 00001523 E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  5417 00001525 AA                                              stosb                                                   ;store weekday value
  5418 00001526 B007                                            mov     al,ERTCDAYREG                                   ;day register
  5419 00001528 E670                                            out     ERTCREGPORT,al                                  ;select day register
  5420 0000152A E471                                            in      al,ERTCDATAPORT                                 ;read day register
  5421 0000152C AA                                              stosb                                                   ;store day value
  5422 0000152D B008                                            mov     al,ERTCMONTHREG                                 ;month register
  5423 0000152F E670                                            out     ERTCREGPORT,al                                  ;select month register
  5424 00001531 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  5425 00001533 AA                                              stosb                                                   ;store month value
  5426 00001534 B009                                            mov     al,ERTCYEARREG                                  ;year register
  5427 00001536 E670                                            out     ERTCREGPORT,al                                  ;select year register
  5428 00001538 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  5429 0000153A AA                                              stosb                                                   ;store year value
  5430 0000153B B032                                            mov     al,ERTCCENTURYREG                               ;century register
  5431 0000153D E670                                            out     ERTCREGPORT,al                                  ;select century register
  5432 0000153F E471                                            in      al,ERTCDATAPORT                                 ;read century register
  5433 00001541 AA                                              stosb                                                   ;store century value
  5434 00001542 B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  5435 00001544 E670                                            out     ERTCREGPORT,al                                  ;select status register
  5436 00001546 E471                                            in      al,ERTCDATAPORT                                 ;read status register
  5437 00001548 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  5438 0000154A 751D                                            jnz     .20                                             ;skip ahead if binary values
  5439 0000154C 89DE                                            mov     esi,ebx                                         ;date-time structure address
  5440 0000154E 89DF                                            mov     edi,ebx                                         ;date-time structure address
  5441 00001550 B908000000                                      mov     ecx,8                                           ;loop counter
  5442 00001555 AC                      .10                     lodsb                                                   ;BCD value
  5443 00001556 88C4                                            mov     ah,al                                           ;BCD value
  5444 00001558 240F                                            and     al,00001111b                                    ;low-order decimal zone
  5445 0000155A 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  5446 0000155D D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  5447 0000155F 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  5448 00001561 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  5449 00001564 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  5450 00001566 AA                                              stosb                                                   ;replace BCD with binary
  5451 00001567 E2EC                                            loop    .10                                             ;next value
  5452 00001569 07                      .20                     pop     es                                              ;restore non-volatile regs
  5453 0000156A 5F                                              pop     edi                                             ;
  5454 0000156B 5E                                              pop     esi                                             ;
  5455 0000156C C3                                              ret                                                     ;return
  5456                                  ;-----------------------------------------------------------------------------------------------------------------------
  5457                                  ;
  5458                                  ;       Routine:        ResetSystem
  5459                                  ;
  5460                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5461                                  ;
  5462                                  ;       Out:            N/A     This routine does not return.
  5463                                  ;
  5464                                  ;-----------------------------------------------------------------------------------------------------------------------
  5465 0000156D B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5466 00001572 E2FE                                            loop    $                                               ;clear interrupts
  5467 00001574 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5468 00001576 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5469 00001578 FB                      .10                     sti                                                     ;enable maskable interrupts
  5470 00001579 F4                                              hlt                                                     ;halt until interrupt
  5471 0000157A EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  5472                                  ;-----------------------------------------------------------------------------------------------------------------------
  5473                                  ;
  5474                                  ;       Routine:        SetKeyboardLamps
  5475                                  ;
  5476                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5477                                  ;
  5478                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5479                                  ;
  5480                                  ;-----------------------------------------------------------------------------------------------------------------------
  5481 0000157C E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5482 00001581 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5483 00001583 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  5484 00001585 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5485 0000158A E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5486 0000158C E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5487 00001591 88F8                                            mov     al,bh                                           ;set/reset lamps value
  5488 00001593 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  5489 00001595 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5490 0000159A E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5491 0000159C C3                                              ret                                                     ;return
  5492                                  ;-----------------------------------------------------------------------------------------------------------------------
  5493                                  ;
  5494                                  ;       Routine:        WaitForKeyInBuffer
  5495                                  ;
  5496                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5497                                  ;
  5498                                  ;       Out:            ZF      1 = Input buffer ready
  5499                                  ;                               0 = Input buffer not ready after timeout
  5500                                  ;
  5501                                  ;-----------------------------------------------------------------------------------------------------------------------
  5502 0000159D 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5503 0000159E B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5504 000015A3 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5505 000015A5 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  5506 000015A7 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  5507 000015A9 59                                              pop     ecx                                             ;restore non-volatile regs
  5508 000015AA C3                                              ret                                                     ;return
  5509                                  ;-----------------------------------------------------------------------------------------------------------------------
  5510                                  ;
  5511                                  ;       Routine:        WaitForKeyOutBuffer
  5512                                  ;
  5513                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5514                                  ;
  5515                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5516                                  ;                               0 = Output buffer empty after timeout
  5517                                  ;
  5518                                  ;-----------------------------------------------------------------------------------------------------------------------
  5519 000015AB 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5520 000015AC B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5521 000015B1 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5522 000015B3 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5523 000015B5 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5524 000015B7 59                                              pop     ecx                                             ;restore non-volatile regs
  5525 000015B8 C3                                              ret                                                     ;return
  5526                                  ;-----------------------------------------------------------------------------------------------------------------------
  5527                                  ;
  5528                                  ;       End of the Kernel Function Library
  5529                                  ;
  5530                                  ;-----------------------------------------------------------------------------------------------------------------------
  5531 000015B9 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5532                                  ;=======================================================================================================================
  5533                                  ;
  5534                                  ;       Console Task
  5535                                  ;
  5536                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5537                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5538                                  ;       screen and responds to user commands.
  5539                                  ;
  5540                                  ;=======================================================================================================================
  5541                                  ;-----------------------------------------------------------------------------------------------------------------------
  5542                                  ;
  5543                                  ;       Console Panel - Common Fields
  5544                                  ;
  5545                                  ;               0         1         2         3         4         5         6         7
  5546                                  ;               01234567890123456789012345678901234567890123456789012345678901234567890123456789
  5547                                  ;
  5548                                  ;       00      PPPPPPPP                TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT       DD-MMM-YYYY HH:MM
  5549                                  ;       22      RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
  5550                                  ;       23      :
  5551                                  ;       24      KKKKKKKKKKKK SCA                        C                        /F ACS NCS CCCC
  5552                                  ;
  5553                                  ;       PPPPPPPP        Panel Identifier
  5554                                  ;       TTTT....TTTT    Panel Title
  5555                                  ;       DD-MM-YYYY      Current Date
  5556                                  ;       HH:MM           Current Local Time (24-Hour)
  5557                                  ;       RRRR....RRRR    Last Command Response
  5558                                  ;       :               Command Prompt
  5559                                  ;       KKKKKKKKKKKK    Keyboard Scan Codes
  5560                                  ;       SCA             Left Shift, Control, Alt Condition
  5561                                  ;       C               Keyboard ASCII character
  5562                                  ;       /(-\|)          Network Adapter Interrupt Indicator
  5563                                  ;       F               Floppy Disk Motor On
  5564                                  ;       ACS             Right Alt, Control, Shift Condition
  5565                                  ;       NCS             Num, Caps, Scroll-Lock Condition
  5566                                  ;       SSSS            System Status
  5567                                  ;
  5568                                  ;       Console Panel - Home Status Panel
  5569                                  ;
  5570                                  ;               0         1         2         3         4         5         6         7
  5571                                  ;               01234567890123456789012345678901234567890123456789012345678901234567890123456789
  5572                                  ;
  5573                                  ;       01      PCI/PCI-X Gigabit Ethernet Adapter
  5574                                  ;       02      ETH0 bbb.dd.f vvvv:dddd mmmmmmmm pppp mm-mm-mm-mm-mm-mm qq
  5575                                  ;       03      CTRL FD LRST ASDE SLU ILOS 1000 FRCSPD
  5576                                  ;       04      STAT FD LU TXOFF TBI/PHY 1000 ASDV 66 64 X 
  5577                                  ;       05      ICR  TXDW TXQE LSC RXSEQ RXDMT0 RXO RXT0 MDAC RXCFG PHYINT TXDLOW SRPD
  5578                                  ;       06      ITR  XXXX RDTR XXXX RADV XXXX TIDV XXXX TADV XXXX
  5579                                  ;       07      RCTL EN SBP UPE MPE LPE LBM RDMTS MO BAM 1024 VFE PMCF BSEX SECRC
  5580                                  ;       08      RDBA hhhhhhhh llllllll RDLEN LLLLL RDH XXXX RDT XXXX RSRPD XXX
  5581                                  ;       09      TCTL EN PSP CT COLD SWXOFF RTLC NRTU
  5582                                  ;       10      TDBA hhhhhhhh llllllll TDLEN LLLLL TDH XXXX TDT XXXX 
  5583                                  ;       11
  5584                                  ;       12
  5585                                  ;       13
  5586                                  ;       14
  5587                                  ;       15
  5588                                  ;       16
  5589                                  ;       17
  5590                                  ;       18
  5591                                  ;       19
  5592                                  ;       20
  5593                                  ;       21
  5594                                  ;
  5595                                  ;       bbb.dd.f        Ethernet Adapter PCI Bus, Device, Function
  5596                                  ;       vvvv:dddd       Ethernet Adapter PCI Vendor and Device IDs
  5597                                  ;       mmmmmmmm        Mapped Memory Address (--none-- if no MMIO)
  5598                                  ;       pppp            I/O Port Number (n/a if no port access)
  5599                                  ;       qq              IRQ number (11, 12, etc.)
  5600                                  ;
  5601                                  ;=======================================================================================================================
  5602                                  ;-----------------------------------------------------------------------------------------------------------------------
  5603                                  ;
  5604                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5605                                  ;
  5606                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5607                                  ;
  5608                                  ;-----------------------------------------------------------------------------------------------------------------------
  5609                                  section                 constack                                                ;console task stack
  5610 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5611                                  ;-----------------------------------------------------------------------------------------------------------------------
  5612                                  ;
  5613                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5614                                  ;
  5615                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5616                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5617                                  ;       16 descriptors. Six are initially defined.
  5618                                  ;
  5619                                  ;-----------------------------------------------------------------------------------------------------------------------
  5620                                  section                 conldt                                                  ;console local descriptors
  5621 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5622 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5623 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5624 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5625 00000020 FF2F0050009B4000                                dq      00409B0050002FFFh                               ;24 code
  5626 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5627 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5628                                  ;-----------------------------------------------------------------------------------------------------------------------
  5629                                  ;
  5630                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5631                                  ;
  5632                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5633                                  ;       segment. CS to console code.
  5634                                  ;
  5635                                  ;-----------------------------------------------------------------------------------------------------------------------
  5636                                  section                 contss                                                  ;console task state segment
  5637 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5638 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5639 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5640 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5641 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5642 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5643 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5644 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5645 00000020 00000000                                        dd      0                                               ;20 eip
  5646 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5647 00000028 00000000                                        dd      0                                               ;28 eax
  5648 0000002C 00000000                                        dd      0                                               ;2c ecx
  5649 00000030 00000000                                        dd      0                                               ;30 edx
  5650 00000034 00000000                                        dd      0                                               ;34 ebx
  5651 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5652 0000003C 00000000                                        dd      0                                               ;3c ebp
  5653 00000040 00000000                                        dd      0                                               ;40 esi
  5654 00000044 00000000                                        dd      0                                               ;44 edi
  5655 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5656 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5657 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5658 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5659 00000058 00000000                                        dd      0                                               ;58 fs
  5660 0000005C 00000000                                        dd      0                                               ;5c gs
  5661 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5662 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5663                                  ;-----------------------------------------------------------------------------------------------------------------------
  5664                                  ;
  5665                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5666                                  ;
  5667                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5668                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5669                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5670                                  ;       event.
  5671                                  ;
  5672                                  ;-----------------------------------------------------------------------------------------------------------------------
  5673                                  section                 conmque                                                 ;console message queue
  5674 00000000 08000000                                        dd      8                                               ;head pointer
  5675 00000004 08000000                                        dd      8                                               ;tail pointer
  5676 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678                                  ;
  5679                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5680                                  ;
  5681                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5682                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5683                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5684                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5685                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5686                                  ;       board input, echoing to the console screen and responding to user commands.
  5687                                  ;
  5688                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5689                                  ;
  5690                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5691                                  ;                               |  Real Mode Interrupt Vectors                  |
  5692                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5693                                  ;                               |  Reserved BIOS Memory Area                    |
  5694                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5695                                  ;                               |  Shared Kernel Memory Area                    |
  5696                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5697                                  ;                               |  Global Descriptor Table (GDT)                |
  5698                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5699                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5700                                  ;                       002000  +-----------------------------------------------+
  5701                                  ;                               |  Interrupt Handlers                           |
  5702                                  ;                               |  Kernel Function Library                      |
  5703                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5704                                  ;                               |  Console Task Stack Area                      |
  5705                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5706                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5707                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5708                                  ;                               |  Console Task Task State Segment (TSS)        |
  5709                                  ;                       004800  +-----------------------------------------------+
  5710                                  ;                               |  Console Task Message Queue                   |
  5711                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5712                                  ;                               |  Console Task Code                            |
  5713                                  ;                               |  Console Task Constants                       |
  5714                                  ;                       008000  +===============================================+
  5715                                  ;
  5716                                  ;-----------------------------------------------------------------------------------------------------------------------
  5717                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5718                                  ;
  5719                                  ;       Initialize console work areas to low values.
  5720                                  ;
  5721 00000000 BF00080000              ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  5722 00000005 30C0                                            xor     al,al                                           ;initialization value
  5723 00000007 B98D010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5724 0000000C FC                                              cld                                                     ;forward strings
  5725 0000000D F3AA                                            rep     stosb                                           ;initialize data
  5726                                  ;
  5727                                  ;       Read extended RAM KB (above 1MB) from CMOS ROM (might be determined by VM settings).
  5728                                  ;       Set available heap to the lesser of the reported extended memory and max-supported heap.
  5729                                  ;       We reserve base RAM (below 1MB) for the kernel.
  5730                                  ;
  5731                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5731 0000000F B007                <1>  mov al,eGetExtendedMemSize
  5731 00000011 CD30                <1>  int _svc
  5732 00000013 3D00000020                                      cmp     eax,EKRNHEAPSIZE                                ;more than the OS can support?
  5733 00000018 7605                                            jna     .10                                             ;no, continue
  5734 0000001A B800000020                                      mov     eax,EKRNHEAPSIZE                                ;set to max supported RAM
  5735 0000001F A300080000              .10                     mov     [wdConsoleHeapSize],eax                         ;set heap size
  5736                                  ;
  5737                                  ;       Initialize the single MEMROOT structure.
  5738                                  ;
  5739 00000024 BF1E090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5740 00000029 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5741 0000002E 31C9                                            xor     ecx,ecx                                         ;zero register
  5742 00000030 B104                                            mov     cl,4                                            ;count
  5743 00000032 F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5744 00000034 31C0                                            xor     eax,eax                                         ;zero register
  5745 00000036 AB                                              stosd                                                   ;zero first task block
  5746 00000037 AB                                              stosd                                                   ;zero last task block
  5747                                  ;
  5748                                  ;       Initialize a single MEMBLOCK structure in heap memory at EMEMBASE.
  5749                                  ;
  5750 00000038 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5751 0000003D B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5752 00000042 AB                                              stosd                                                   ;store signature
  5753 00000043 A100080000                                      mov     eax,[wdConsoleHeapSize]                         ;heap size KB
  5754 00000048 C1E00A                                          shl     eax,10                                          ;heap size bytes
  5755 0000004B AB                                              stosd                                                   ;store block size
  5756 0000004C 31C9                                            xor     ecx,ecx                                         ;zero register
  5757 0000004E B106                                            mov     cl,6                                            ;count
  5758 00000050 31C0                                            xor     eax,eax                                         ;zero register
  5759 00000052 F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5760                                  ;
  5761                                  ;       Initialize the active panel variables.
  5762                                  ;
  5763 00000054 B8[360B0000]                                    mov     eax,czPnlMain                                   ;initial console panel
  5764 00000059 A304080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  5765                                  ;                        mov     [wdConsoleField],eax                            ;save current field address
  5766                                  ;                        mov     al,007h                                         ;default screen color attribute
  5767                                  ;                        mov     [wbConsoleFieldColor],al                        ;save field color attribute
  5768                                  ;
  5769                                  ;       Address the console screen memory.
  5770                                  ;
  5771 0000005E 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  5772 00000060 07                                              pop     es                                              ;...into extra segment reg
  5773                                  ;
  5774                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  5775                                  ;
  5776 00000061 BF000F0000                                      mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  5777 00000066 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  5778 0000006B B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  5779 00000070 F3AB                                            rep     stosd                                           ;reset OIA
  5780                                  ;
  5781                                  ;       Clear the console rows. (This is done after every attention key).
  5782                                  ;
  5783 00000072 31FF                    .20                     xor     edi,edi                                         ;target offset
  5784 00000074 B9C0030000                                      mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  5785 00000079 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initialization value
  5786 0000007E F3AB                                            rep     stosd                                           ;reset screen body
  5787                                  ;
  5788                                  ;       Reset the input field row and column. Address the panel template.
  5789                                  ;
  5790 00000080 31C0                                            xor     eax,eax                                         ;zero register
  5791 00000082 A308080000                                      mov     [wdConsoleInput],eax                            ;zero input addr
  5792 00000087 A219080000                                      mov     [wbConsoleRow],al                               ;zero console row
  5793 0000008C A218080000                                      mov     [wbConsoleColumn],al                            ;zero console column
  5794                                  ;
  5795                                  ;       Load the field address. Exit loop if address is null.
  5796                                  ;
  5797 00000091 8B3504080000                                    mov     esi,[wdConsolePanel]                            ;panel template
  5798 00000097 AD                      .30                     lodsd                                                   ;field value addr
  5799 00000098 85C0                                            test    eax,eax                                         ;end of panel?
  5800 0000009A 7453                                            jz      .70                                             ;yes, exit loop
  5801 0000009C 89C3                                            mov     ebx,eax                                         ;field value addr
  5802                                  ;
  5803                                  ;       Load the field row, column, color and length.
  5804                                  ;
  5805 0000009E AC                                              lodsb                                                   ;attributes
  5806 0000009F 88C5                                            mov     ch,al                                           ;row
  5807 000000A1 AC                                              lodsb                                                   ;column
  5808 000000A2 88C1                                            mov     cl,al                                           ;column
  5809 000000A4 AC                                              lodsb                                                   ;color
  5810 000000A5 88C6                                            mov     dh,al                                           ;color
  5811 000000A7 AC                                              lodsb                                                   ;length
  5812 000000A8 88C2                                            mov     dl,al                                           ;length
  5813                                  ;
  5814                                  ;       Test the row high-bit for input field indication
  5815                                  ;
  5816 000000AA F6C580                                          test    ch,080h                                         ;input field?
  5817 000000AD 741C                                            jz      .40                                             ;no, branch
  5818 000000AF 80E57F                                          and     ch,07Fh                                         ;clear input field indicator
  5819                                  ;
  5820                                  ;       Save the row and column if this is the first input field
  5821                                  ;
  5822 000000B2 A019080000                                      mov     al,[wbConsoleRow]                               ;console row
  5823 000000B7 0A0518080000                                    or      al,[wbConsoleColumn]                            ;already have an input field?
  5824 000000BD 750C                                            jnz     .40                                             ;yes, branch
  5825 000000BF 882D19080000                                    mov     [wbConsoleRow],ch                               ;update console row
  5826 000000C5 880D18080000                                    mov     [wbConsoleColumn],cl                            ;update console column
  5827                                  ;
  5828                                  ;       Compute the target offset.
  5829                                  ;
  5830 000000CB 0FB6C5                  .40                     movzx   eax,ch                                          ;row
  5831 000000CE B450                                            mov     ah,ECONCOLS                                     ;columns per row
  5832 000000D0 F6E4                                            mul     ah                                              ;row offset
  5833 000000D2 00C8                                            add     al,cl                                           ;add column
  5834 000000D4 80D400                                          adc     ah,0                                            ;handle overflow
  5835 000000D7 D1E0                                            shl     eax,1                                           ;two-bytes per column
  5836 000000D9 89C7                                            mov     edi,eax                                         ;target offset
  5837                                  ;
  5838                                  ;       Display the field contents
  5839                                  ;
  5840 000000DB 87DE                                            xchg    ebx,esi                                         ;swap panel and field addr
  5841 000000DD 0FB6CA                                          movzx   ecx,dl                                          ;length
  5842 000000E0 88F4                                            mov     ah,dh                                           ;color
  5843 000000E2 AC                      .50                     lodsb                                                   ;character
  5844 000000E3 84C0                                            test    al,al                                           ;end of value?
  5845 000000E5 7404                                            jz      .60                                             ;yes, branch
  5846 000000E7 66AB                                            stosw                                                   ;store character and color
  5847 000000E9 E2F7                                            loop    .50                                             ;next character
  5848 000000EB 87DE                    .60                     xchg    ebx,esi                                         ;swap panel and field addr
  5849 000000ED EBA8                                            jmp     short .30                                       ;next field
  5850                                  ;
  5851                                  ;       Place the cursor if we have an input field
  5852                                  ;
  5853 000000EF 8A2519080000            .70                     mov     ah,[wbConsoleRow]                               ;field row
  5854 000000F5 A018080000                                      mov     al,[wbConsoleColumn]                            ;field column
  5855 000000FA 08E0                                            or      al,ah                                           ;input field?
  5856 000000FC 7404                                            jz      .80                                             ;no, branch
  5857                                                          placeCursor                                             ;position the cursor
  5857 000000FE B00B                <1>  mov al,ePlaceCursor
  5857 00000100 CD30                <1>  int _svc
  5858                                  ;
  5859                                  ;       Address the message queue.
  5860                                  ;       Yield until the next message arrives in the message queue.
  5861                                  ;       Repeat until the message is a character input.
  5862                                  ;
  5863 00000102 1E                      .80                     push    ds                                              ;save non-volatile regs
  5864 00000103 6A2C                                            push    ELDTMQ                                          ;load message queue selector...
  5865 00000105 1F                                              pop     ds                                              ;...into data segment register
  5866 00000106 FB                      .81                     sti                                                     ;enable maskable ints
  5867 00000107 F4                                              hlt                                                     ;halt until external interrupt
  5868 00000108 8B1D00000000            .82                     mov     ebx,[MQHead]                                    ;head ptr
  5869 0000010E 8B03                                            mov     eax,[ebx]                                       ;lo-order 32-bits
  5870 00000110 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32-bits
  5871 00000113 89C1                                            mov     ecx,eax                                         ;lo-order 32-bits
  5872 00000115 09D1                                            or      ecx,edx                                         ;queue empty?
  5873 00000117 74ED                                            jz      .81                                             ;yes, continue
  5874 00000119 31C9                                            xor     ecx,ecx                                         ;zero register
  5875 0000011B 890B                                            mov     [ebx],ecx                                       ;zero lo-order dword
  5876 0000011D 894B04                                          mov     [ebx+4],ecx                                     ;zero hi-order dword
  5877 00000120 83C308                                          add     ebx,8                                           ;next queue element
  5878 00000123 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  5879 00000129 7502                                            jnz     .90                                             ;no, branch
  5880 0000012B B308                                            mov     bl,8                                            ;reset to 1st entry
  5881 0000012D 891D00000000            .90                     mov     [MQHead],ebx                                    ;save new head ptr
  5882 00000133 89C1                                            mov     ecx,eax
  5883 00000135 81E10000FFFF                                    and     ecx,0FFFF0000h
  5884 0000013B 81F900000241                                    cmp     ecx,EMSGKEYCHAR
  5885 00000141 75C5                                            jne     .82
  5886 00000143 25FFFF0000                                      and     eax,00000FFFFh
  5887 00000148 1F                                              pop     ds                                              ;restore non-volatile regs
  5888                                  ;
  5889                                  ;       Reset the system
  5890                                  ;
  5891                                                          resetSystem
  5891 00000149 B01A                <1>  mov al,eResetSystem
  5891 0000014B CD30                <1>  int _svc
  5892                                  
  5893 0000014D FB                      .180                    sti
  5894 0000014E F4                                              hlt
  5895 0000014F EBFC                                            jmp     .180
  5896                                  
  5897                                  
  5898 00000151 BA25080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5899 00000156 BB75080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5900 0000015B E8B6030000                                      call    ConTakeToken                                    ;handle console input
  5901 00000160 BA75080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5902 00000165 E8E1030000                                      call    ConDetermineCommand                             ;determine command number
  5903 0000016A 83F81A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5904 0000016D 0F83FFFEFFFF                                    jae     .20                                             ;yes, branch
  5905 00000173 C1E002                                          shl     eax,2                                          ;index into jump table
  5906 00000176 BA[070A0000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5907 0000017B 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5908 0000017E FFD0                                            call    eax                                             ;call command handler
  5909 00000180 E9EDFEFFFF                                      jmp     .20
  5910                                  ;-----------------------------------------------------------------------------------------------------------------------
  5911                                  ;
  5912                                  ;       Routine:        ConPutNewLine
  5913                                  ;
  5914                                  ;       Description:    Write a new-line to the console.
  5915                                  ;
  5916                                  ;-----------------------------------------------------------------------------------------------------------------------
  5917                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  5917                              <1> ConPutNewLine :
  5917 00000185 BA[870C0000]        <1>  mov edx,%1
  5917 0000018A B00C                <1>  mov al,ePutConsoleString
  5917 0000018C CD30                <1>  int _svc
  5918 0000018E C3                                              ret                                                     ;return
  5919                                  ;-----------------------------------------------------------------------------------------------------------------------
  5920                                  ;
  5921                                  ;       Routine:        ConInitializeNetwork
  5922                                  ;
  5923                                  ;       Description:    This routine initializes console network variables.
  5924                                  ;
  5925                                  ;-----------------------------------------------------------------------------------------------------------------------
  5926 0000018F 53                      ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5927 00000190 51                                              push    ecx                                             ;
  5928 00000191 56                                              push    esi                                             ;
  5929 00000192 57                                              push    edi                                             ;
  5930                                  ;
  5931                                  ;       Initialize ETHER structure.
  5932                                  ;
  5933 00000193 BB4A090000                                      mov     ebx,wsConsoleEther                              ;ETHER structure address
  5934 00000198 E899020000                                      call    ConInitEtherContext                             ;initialize ETHER struct
  5935 0000019D 89DE                                            mov     esi,ebx                                         ;ETHER structure address
  5936                                  ;
  5937                                  ;       Initialize variables.
  5938                                  ;       Construct PCI selector.
  5939                                  ;       Read PCI configuration data.
  5940                                  ;
  5941 0000019F BB3E090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  5942 000001A4 E8A2020000                                      call    ConInitPCIContext                               ;initialize PCI struct
  5943 000001A9 E8B2020000              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5944 000001AE E8CE020000                                      call    ConReadPCIConfigData                            ;read the configuration data
  5945                                  ;
  5946                                  ;       Interpret PCI data value.
  5947                                  ;
  5948 000001B3 83F8FF                                          cmp     eax,-1		                                ;function defined?
  5949 000001B6 7508                                            jne     .20                                             ;yes, branch
  5950 000001B8 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  5951 000001BC 7410                                            je      .40                                             ;yes, skip to next device
  5952 000001BE EB07                                            jmp     short .30                                       ;no, skip to next function
  5953                                  ;
  5954                                  ;       Exit PCI probe if supported adapter found.
  5955                                  ;
  5956 000001C0 3D86800F10              .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5957 000001C5 7413                                            je      .50                                             ;yes, found!
  5958                                  ;
  5959                                  ;       Next function.
  5960                                  ;
  5961 000001C7 E8C6020000              .30                     call    ConNextPCIFunction                              ;next function
  5962 000001CC 72DB                                            jb      .10                                             ;continue if no overflow
  5963                                  ;
  5964                                  ;       Next device, bus.
  5965                                  ;
  5966 000001CE E8CD020000              .40                     call    ConNextPCIDevice                                ;next device, bus.
  5967 000001D3 72D4                                            jb      .10                                             ;continue if no overflow
  5968 000001D5 E93C010000                                      jmp     .90                                             ;done, ETHER not found
  5969                                  ;
  5970                                  ;       Set hardware flag and save selector.
  5971                                  ;
  5972 000001DA 8B4304                  .50                     mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5973 000001DD 8906                                            mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5974 000001DF 800D2408000080                                  or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5975                                                          putConsoleString czEthernetAdapterFound                 ;ethernet adapter found message
  5975 000001E6 BA[C40B0000]        <1>  mov edx,%1
  5975 000001EB B00C                <1>  mov al,ePutConsoleString
  5975 000001ED CD30                <1>  int _svc
  5976                                  ;
  5977                                  ;       Save and report PCI data.
  5978                                  ;
  5979 000001EF 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5980 000001F1 89C1                                            mov     ecx,eax                                         ;ethernet adapter PCI selector
  5981 000001F3 BA[1B0C0000]                                    mov     edx,czEthernetSelector                          ;message label
  5982 000001F8 E8BB020000                                      call    ConPutLabeledHexValue                           ;output labeled message to console
  5983                                  
  5984 000001FD 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5985 000001FF 30C0                                            xor     al,al                                           ;register 0
  5986 00000201 E8D1020000                                      call    ConReadPCIRegister                              ;EAX = device id | vendor id
  5987 00000206 894604                                          mov     [esi+ETHER.devicevendor],eax                    ;save device id | vendor id
  5988 00000209 89C1                                            mov     ecx,eax                                         ;device id | vendor id
  5989 0000020B BA[DD0B0000]                                    mov     edx,czEthernetDeviceVendor                      ;message label
  5990 00000210 E8A3020000                                      call    ConPutLabeledHexValue                           ;output labeled message to console
  5991                                  
  5992 00000215 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5993 00000217 B004                                            mov     al,004h                                         ;status and command register
  5994 00000219 E8B9020000                                      call    ConReadPCIRegister                              ;EAX = status | command
  5995 0000021E 894608                                          mov     [esi+ETHER.statuscommand],eax                   ;save status | command
  5996 00000221 89C1                                            mov     ecx,eax                                         ;status | command
  5997 00000223 BA[2B0C0000]                                    mov     edx,czEthernetStatusCommand                     ;message label
  5998 00000228 E8B3020000                                      call    ConPutLabeledHexLine                            ;output labeled message to console
  5999                                  
  6000 0000022D 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  6001 0000022F B010                                            mov     al,010h                                         ;mapped memory I/O (BAR0) register
  6002 00000231 E8A1020000                                      call    ConReadPCIRegister                              ;EAX = MMIO
  6003 00000236 894614                                          mov     [esi+ETHER.mmio],eax                            ;save MMIO
  6004 00000239 89C1                                            mov     ecx,eax                                         ;MMIO
  6005 0000023B BA[010C0000]                                    mov     edx,czEthernetMemoryAddr                        ;message label
  6006 00000240 E873020000                                      call    ConPutLabeledHexValue                           ;output labeled message to console
  6007                                  
  6008 00000245 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  6009 00000247 B018                                            mov     al,018h                                         ;I/O port (BAR1) register
  6010 00000249 E889020000                                      call    ConReadPCIRegister                              ;EAX = I/O port
  6011 0000024E 83E0F8                                          and     eax,-8                                          ;mask out bits 2:0
  6012 00000251 89461C                                          mov     [esi+ETHER.port],eax                            ;save I/O port
  6013 00000254 89C1                                            mov     ecx,eax                                         ;I/O port
  6014 00000256 BA[110C0000]                                    mov     edx,czEthernetPort                              ;message label
  6015 0000025B E858020000                                      call    ConPutLabeledHexValue                           ;output labeled message to console
  6016                                  
  6017 00000260 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet device PCI selector
  6018 00000262 B03C                                            mov     al,03Ch                                         ;interrupt number register
  6019 00000264 E86E020000                                      call    ConReadPCIRegister                              ;EAX = interrupt number
  6020 00000269 884642                                          mov     [esi+ETHER.irq],al                              ;save interrupt number
  6021 0000026C 0FB6C8                                          movzx   ecx,al                                          ;interrupt number
  6022 0000026F BA[E70B0000]                                    mov     edx,czEthernetIRQ                               ;message label
  6023 00000274 E872020000                                      call    ConPutLabeledDecLine                            ;output labeled message to console
  6024                                  ;
  6025                                  ;       Read MAC address from MMIO
  6026                                  ;
  6027 00000279 8B4E14                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  6028 0000027C 85C9                                            test    ecx,ecx
  6029 0000027E 7505                                            jnz     .60
  6030 00000280 E991000000                                      jmp     .90
  6031                                  
  6032 00000285 81C100540000            .60                     add     ecx,05400h                                      ;MAC address offset
  6033 0000028B 8B01                                            mov     eax,[ecx]                                       ;MAC address lo-order dword
  6034 0000028D 89463C                                          mov     [esi+ETHER.mac],eax                             ;save
  6035 00000290 668B4104                                        mov     ax,[ecx+4]                                      ;MAC address hi-order word
  6036 00000294 66894640                                        mov     [esi+ETHER.mac+4],ax                            ;save
  6037 00000298 8D4E3C                                          lea     ecx,[esi+ETHER.mac]                             ;address of MAC bytes
  6038                                                          putMACString wzConsoleToken                             ;output MAC ASCIIZ string
  6038 0000029B BA75080000          <1>  mov edx,%1
  6038 000002A0 B010                <1>  mov al,ePutMACString
  6038 000002A2 CD30                <1>  int _svc
  6039 000002A4 BA[F10B0000]                                    mov     edx,czEthernetMAC                               ;label string
  6040 000002A9 E85D020000                                      call    ConPutLabeledLine                               ;output labeled line to console
  6041                                  ;
  6042                                  ;       Set the link up
  6043                                  ;
  6044 000002AE 8B4E14                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  6045 000002B1 8B01                                            mov     eax,[ecx+EI825REGCTRL]                          ;control register
  6046 000002B3 0C40                                            or      al,EI825CTRLSLU                                 ;set link up
  6047 000002B5 8901                                            mov     [ecx+EI825REGCTRL],eax                          ;update control register
  6048                                                          putConsoleString czLinkUp
  6048 000002B7 BA[6B0C0000]        <1>  mov edx,%1
  6048 000002BC B00C                <1>  mov al,ePutConsoleString
  6048 000002BE CD30                <1>  int _svc
  6049                                  ;
  6050                                  ;       Initialize the Multicast Table Array
  6051                                  ;
  6052 000002C0 31C9                                            xor     ecx,ecx                                         ;zero register
  6053 000002C2 B180                                            mov     cl,128                                          ;element count
  6054 000002C4 8B7E14                                          mov     edi,[esi+ETHER.mmio]                            ;MMIO address
  6055 000002C7 81C700520000                                    add     edi,EI825REGMTA                                 ;MTA base address
  6056 000002CD 31C0                                            xor     eax,eax                                         ;zero register
  6057 000002CF FC                                              cld                                                     ;forward strings
  6058 000002D0 F3AB                                            rep     stosd                                           ;store dword
  6059                                                          putConsoleString czMTAInit
  6059 000002D2 BA[750C0000]        <1>  mov edx,%1
  6059 000002D7 B00C                <1>  mov al,ePutConsoleString
  6059 000002D9 CD30                <1>  int _svc
  6060                                  ;
  6061                                  ;       Enable interrupts
  6062                                  ;
  6063 000002DB 8B4E14                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  6064 000002DE B8DCF60100                                      mov     eax,01F6DCh                                     ;SRPD|TXD_LOW|GPI|PHYINT|RXCFG|MDAC|RXT0|RXO|RXDMT0|RXSEQ|LSC
  6065 000002E3 8981D0000000                                    mov     [ecx+EI825REGIMS],eax                           ;enable
  6066 000002E9 8B81C0000000                                    mov     eax,[ecx+EI825REGICR]                           ;clear pending ints
  6067                                                          putConsoleString czIntsEnabled
  6067 000002EF BA[530C0000]        <1>  mov edx,%1
  6067 000002F4 B00C                <1>  mov al,ePutConsoleString
  6067 000002F6 CD30                <1>  int _svc
  6068                                  ;
  6069                                  ;       Set interrupt throttling register
  6070                                  ;
  6071 000002F8 8B4E14                                          mov     ecx,[esi+ETHER.mmio]
  6072 000002FB B800100000                                      mov     eax,1000h
  6073 00000300 8981C4000000                                    mov     [ecx+EI825REGITR],eax
  6074                                  ;
  6075                                  ;       Start the receive process.
  6076                                  ;
  6077 00000306 E810000000                                      call    ConInitEtherReceive
  6078 0000030B 7209                                            jc      .90
  6079                                                          putConsoleString czReceiveStarted
  6079 0000030D BA[0A0D0000]        <1>  mov edx,%1
  6079 00000312 B00C                <1>  mov al,ePutConsoleString
  6079 00000314 CD30                <1>  int _svc
  6080                                  ;
  6081                                  ;       Start the transmit process.
  6082                                  ;
  6083                                  ;                        call    ConInitEtherTransmit
  6084                                  ;                        jc      .90
  6085                                  ;                        putConsoleString czTransmitStarted
  6086                                  ;
  6087                                  ;       Restore and return.
  6088                                  ;
  6089 00000316 5F                      .90                     pop     edi                                             ;restore non-volatile regs
  6090 00000317 5E                                              pop     esi                                             ;
  6091 00000318 59                                              pop     ecx                                             ;
  6092 00000319 5B                                              pop     ebx                                             ;
  6093 0000031A C3                                              ret                                                     ;return
  6094                                  ;-----------------------------------------------------------------------------------------------------------------------
  6095                                  ;
  6096                                  ;       Routine:        ConInitEtherReceive
  6097                                  ;
  6098                                  ;       Description:    This routine initializes the ethernet adapter for receiving.
  6099                                  ;
  6100                                  ;-----------------------------------------------------------------------------------------------------------------------
  6101 0000031B 53                      ConInitEtherReceive     push    ebx                                             ;save non-volatile regs
  6102 0000031C 51                                              push    ecx                                             ;
  6103                                  ;
  6104                                  ;       Setup addressability
  6105                                  ;
  6106 0000031D BB4A090000                                      mov     ebx,wsConsoleEther                              ;ETHER struct address
  6107                                  ;
  6108                                  ;       Allocate receive descriptors
  6109                                  ;
  6110 00000322 B810010000                                      mov     eax,EI825RXDESCLEN * ENETRXDESCCT + 16          ;memory size to allocate
  6111                                                          allocateMemory eax                                      ;allocate memory
  6111 00000327 51                  <1>  push ecx
  6111 00000328 89C1                <1>  mov ecx,%1
  6111 0000032A B000                <1>  mov al,eAllocateMemory
  6111 0000032C CD30                <1>  int _svc
  6111 0000032E 59                  <1>  pop ecx
  6112 0000032F 85C0                                            test    eax,eax                                         ;test result
  6113 00000331 747E                                            jz      .20                                             ;branch if error
  6114 00000333 894320                                          mov     [ebx+ETHER.rxblock],eax                         ;save allocated storage address
  6115 00000336 83C030                                          add     eax,EMEMBLOCKLEN + 16                           ;usable memory start + 16
  6116 00000339 24F0                                            and     al,0F0h                                         ;align on 16-byte boundary
  6117 0000033B 894324                                          mov     [ebx+ETHER.rxbase],eax                          ;save descriptor base
  6118                                  ;
  6119                                  ;       Initialize receive descriptors
  6120                                  ;
  6121 0000033E 8B5324                                          mov     edx,[ebx+ETHER.rxbase]                          ;descriptor base address
  6122 00000341 31C9                                            xor     ecx,ecx                                         ;zero register
  6123 00000343 B110                                            mov     cl,ENETRXDESCCT                                 ;descriptor count
  6124 00000345 52                      .10                     push    edx                                             ;save descriptor addr
  6125 00000346 B810040000                                      mov     eax,ENETRXBUFSIZ+16                             ;receive buffer size
  6126                                                          allocateMemory eax                                      ;allocate memory
  6126 0000034B 51                  <1>  push ecx
  6126 0000034C 89C1                <1>  mov ecx,%1
  6126 0000034E B000                <1>  mov al,eAllocateMemory
  6126 00000350 CD30                <1>  int _svc
  6126 00000352 59                  <1>  pop ecx
  6127 00000353 5A                                              pop     edx                                             ;descriptor memory
  6128 00000354 85C0                                            test    eax,eax                                         ;test for error
  6129 00000356 7459                                            jz      .20                                             ;branch if error
  6130 00000358 83C030                                          add     eax,EMEMBLOCKLEN+16                             ;usable memory start + 16
  6131 0000035B 24F0                                            and     al,0F0h                                         ;align on 16-byte boundary
  6132 0000035D 8902                                            mov     [edx+I825RXDESC.addresslo],eax                  ;zero address low
  6133 0000035F 31C0                                            xor     eax,eax                                         ;zero register
  6134 00000361 894204                                          mov     [edx+I825RXDESC.addresshi],eax                  ;zero address hi
  6135 00000364 88420C                                          mov     [edx+I825RXDESC.status],al                      ;zero status
  6136 00000367 83C210                                          add     edx,EI825RXDESCLEN                              ;next descr address
  6137 0000036A E2D9                                            loop    .10                                             ;continue
  6138                                  ;
  6139                                  ;       Setup receive descriptor ring buffer
  6140                                  ;
  6141 0000036C 8B4B14                                          mov     ecx,[ebx+ETHER.mmio]                            ;memory i/o address
  6142 0000036F 31C0                                            xor     eax,eax                                         ;zero register
  6143 00000371 898104280000                                    mov     [ecx+EI825REGRDBAH],eax                         ;set receive descr base address hi
  6144 00000377 8B4324                                          mov     eax,[ebx+ETHER.rxbase]                          ;receive descr base address lo
  6145 0000037A 898100280000                                    mov     [ecx+EI825REGRDBAL],eax                         ;set receive descr base address lo
  6146                                  ;
  6147                                  ;       Setup receive descriptor ring length
  6148                                  ;
  6149 00000380 B800010000                                      mov     eax,EI825RXDESCLEN * ENETRXDESCCT               ;descriptors size
  6150 00000385 898108280000                                    mov     [ecx+EI825REGRDLEN],eax                         ;set receive descr size
  6151                                  ;
  6152                                  ;       Setup receive head and tail pointers.
  6153                                  ;
  6154 0000038B 31C0                                            xor     eax,eax                                         ;zero register
  6155 0000038D 898110280000                                    mov     [ecx+EI825REGRDH],eax                           ;initialize receive descriptor head
  6156 00000393 B810000000                                      mov     eax,ENETRXDESCCT                                ;descriptor count
  6157 00000398 898118280000                                    mov     [ecx+EI825REGRDT],eax                           ;initialize receive descriptor tail
  6158 0000039E 31C0                                            xor     eax,eax                                         ;zero register
  6159 000003A0 894328                                          mov     [ebx+ETHER.rxtail],eax                          ;initialize tail
  6160                                  ;
  6161                                  ;       Set the receive control register
  6162                                  ;
  6163                                  ;                        mov     eax,EI825RCTLBSZ1024|EI825RCTLBAM|EI825RCTLLPE|EI825RCTLMPE|EI825RCTLUPE|EI825RCTLSBP|EI825RCTLEN
  6164                                  ;                        mov     eax,EI825RCTLBSZ1024|EI825RCTLSBP|EI825RCTLEN
  6165                                  ;                        mov     eax,EI825RCTLBSZ1024|EI825RCTLBAM|EI825RCTLLPE|EI825RCTLMPE|EI825RCTLUPE|EI825RCTLSBP|EI825RCTLEN      ;add BAM|MPE
  6166 000003A3 B8FE808104                                      mov     eax,048180FEh                        
  6167 000003A8 898100010000                                    mov     [ecx+EI825REGRCTL],eax
  6168 000003AE F8                                              clc
  6169 000003AF EB01                                            jmp     .30
  6170                                  ;
  6171                                  ;       Exit with error indicated.
  6172                                  ;
  6173 000003B1 F9                      .20                     stc                                                     ;set carry
  6174                                  ;
  6175                                  ;       Restore and return.
  6176                                  ;
  6177 000003B2 59                      .30                     pop     ecx                                             ;restore non-volatile regs
  6178 000003B3 5B                                              pop     ebx                                             ;
  6179 000003B4 C3                                              ret                                                     ;return
  6180                                  ;-----------------------------------------------------------------------------------------------------------------------
  6181                                  ;
  6182                                  ;       Routine:        ConInitEtherTransmit
  6183                                  ;
  6184                                  ;       Description:    This routine initializes the ethernet adapter for transmitting.
  6185                                  ;
  6186                                  ;-----------------------------------------------------------------------------------------------------------------------
  6187 000003B5 53                      ConInitEtherTransmit    push    ebx                                             ;save non-volatile regs
  6188 000003B6 51                                              push    ecx                                             ;
  6189                                  ;
  6190                                  ;       Setup addressability
  6191                                  ;
  6192 000003B7 BB4A090000                                      mov     ebx,wsConsoleEther                              ;ETHER struct address
  6193                                  ;
  6194                                  ;       Allocate transmit descriptors
  6195                                  ;
  6196 000003BC B810010000                                      mov     eax,EI825TXDESCLEN * ENETTXDESCCT + 16          ;memory required for transmit descrs
  6197                                                          allocateMemory eax                                      ;allocate memory
  6197 000003C1 51                  <1>  push ecx
  6197 000003C2 89C1                <1>  mov ecx,%1
  6197 000003C4 B000                <1>  mov al,eAllocateMemory
  6197 000003C6 CD30                <1>  int _svc
  6197 000003C8 59                  <1>  pop ecx
  6198 000003C9 85C0                                            test    eax,eax                                         ;test result
  6199 000003CB 7465                                            jz      .20                                             ;branch if error
  6200 000003CD 894330                                          mov     [ebx+ETHER.txblock],eax                         ;save allocated storage address
  6201 000003D0 83C030                                          add     eax,EMEMBLOCKLEN + 16                           ;usable memory start + 16
  6202 000003D3 24F0                                            and     al,0F0h                                         ;align on 16-byte boundary
  6203 000003D5 894334                                          mov     [ebx+ETHER.txbase],eax                          ;save descriptor base
  6204                                  ;
  6205                                  ;       Initialize transmit descriptors
  6206                                  ;
  6207 000003D8 31C9                                            xor     ecx,ecx                                         ;zero register
  6208 000003DA B110                                            mov     cl,ENETTXDESCCT                                 ;descriptor count
  6209 000003DC 31C0                                            xor     eax,eax                                         ;zero register
  6210 000003DE 8B5334                                          mov     edx,[ebx+ETHER.txbase]                          ;descriptor base address
  6211 000003E1 8902                    .10                     mov     [edx+I825TXDESC.addresslo],eax                  ;zero address low
  6212 000003E3 894204                                          mov     [edx+I825TXDESC.addresshi],eax                  ;zero address hi
  6213 000003E6 88420B                                          mov     [edx+I825TXDESC.cmd],al                         ;zero command
  6214 000003E9 83C210                                          add     edx,EI825TXDESCLEN                              ;next descr address
  6215 000003EC E2F3                                            loop    .10                                             ;continue
  6216                                  ;
  6217                                  ;       Setup transmit descriptor ring buffer
  6218                                  ;
  6219 000003EE 8B4B14                                          mov     ecx,[ebx+ETHER.mmio]                            ;memory i/o address
  6220 000003F1 31C0                                            xor     eax,eax                                         ;zero register
  6221 000003F3 898104380000                                    mov     [ecx+EI825REGTDBAH],eax                         ;set transmit descr base address hi
  6222 000003F9 8B4334                                          mov     eax,[ebx+ETHER.txbase]                          ;transmit descr base address lo
  6223 000003FC 898100380000                                    mov     [ecx+EI825REGTDBAL],eax                         ;set transmit descr base address lo
  6224                                  ;
  6225                                  ;       Setup transmit descriptor ring length
  6226                                  ;
  6227 00000402 B800010000                                      mov     eax,EI825TXDESCLEN * ENETTXDESCCT               ;descriptors size
  6228 00000407 898108380000                                    mov     [ecx+EI825REGTDLEN],eax                         ;set transmit descr size
  6229                                  ;
  6230                                  ;       Setup transmit head and tail pointers.
  6231                                  ;
  6232 0000040D 31C0                                            xor     eax,eax                                         ;zero register
  6233 0000040F 898110380000                                    mov     [ecx+EI825REGTDH],eax                           ;initialize transmit descriptor head
  6234 00000415 B810000000                                      mov     eax,ENETTXDESCCT                                ;descriptor count
  6235 0000041A 898118380000                                    mov     [ecx+EI825REGTDT],eax                           ;initialize transmit descriptor tail
  6236 00000420 31C0                                            xor     eax,eax                                         ;zero register
  6237 00000422 894338                                          mov     [ebx+ETHER.txtail],eax                          ;initialize transmit tail
  6238                                  ;
  6239                                  ;       Enable transmit and pad short packets.
  6240                                  ;
  6241 00000425 31C0                                            xor     eax,eax                                         ;zero register
  6242 00000427 B00A                                            mov     al,EI825TCTLEN|EI825TCTLPSP                     ;enable|pad-short-packets
  6243 00000429 898100040000                                    mov     [ecx+EI825REGTCTL],eax                          ;enable and pad short packets
  6244 0000042F F8                                              clc
  6245 00000430 EB01                                            jmp     .30                                             ;branch to exit
  6246                                  ;
  6247                                  ;       Indicate error on return.
  6248                                  ;
  6249 00000432 F9                      .20                      stc                                                     ;set carry
  6250                                  ;
  6251                                  ;       Restore and return.
  6252                                  ;
  6253 00000433 59                      .30                     pop     ecx                                             ;restore non-volatile registers
  6254 00000434 5B                                              pop     ebx                                             ;
  6255 00000435 C3                                              ret                                                     ;return
  6256                                  ;-----------------------------------------------------------------------------------------------------------------------
  6257                                  ;
  6258                                  ;       Routine:        ConInitEtherContext
  6259                                  ;
  6260                                  ;       Description:    This routine zeros an ETHER structure
  6261                                  ;
  6262                                  ;       In:             DS:EBX  ETHER structure address
  6263                                  ;
  6264                                  ;-----------------------------------------------------------------------------------------------------------------------
  6265 00000436 51                      ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  6266 00000437 57                                              push    edi                                             ;
  6267 00000438 06                                              push    es                                              ;
  6268                                  ;
  6269                                  ;       Zero context.
  6270                                  ;
  6271 00000439 1E                                              push    ds                                              ;load data segment...
  6272 0000043A 07                                              pop     es                                              ;...into extra segment
  6273 0000043B 89DF                                            mov     edi,ebx                                         ;ETHER structure offset
  6274 0000043D B943000000                                      mov     ecx,EETHERLEN                                   ;ETHER structure length
  6275 00000442 30C0                                            xor     al,al                                           ;zero
  6276 00000444 FC                                              cld                                                     ;forward strings
  6277 00000445 F3AA                                            rep     stosb                                           ;zero structure members
  6278                                  ;
  6279                                  ;       Restore and return.
  6280                                  ;
  6281 00000447 07                                              pop     es                                              ;restore non-volatile regs
  6282 00000448 5F                                              pop     edi                                             ;
  6283 00000449 59                                              pop     ecx                                             ;
  6284 0000044A C3                                              ret                                                     ;return
  6285                                  ;-----------------------------------------------------------------------------------------------------------------------
  6286                                  ;
  6287                                  ;       Routine:        ConInitPCIContext
  6288                                  ;
  6289                                  ;       Description:    This routine initializes a PCI structure.
  6290                                  ;
  6291                                  ;       In:             DS:EBX  PCI structure address
  6292                                  ;
  6293                                  ;-----------------------------------------------------------------------------------------------------------------------
  6294 0000044B 51                      ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  6295 0000044C 57                                              push    edi                                             ;
  6296 0000044D 06                                              push    es                                              ;
  6297                                  ;
  6298                                  ;       Zero context.
  6299                                  ;
  6300 0000044E 1E                                              push    ds                                              ;load data segment...
  6301 0000044F 07                                              pop     es                                              ;...into extra segment
  6302 00000450 89DF                                            mov     edi,ebx                                         ;PCI structure offset
  6303 00000452 B90C000000                                      mov     ecx,EPCILEN                                     ;PCI structure length
  6304 00000457 30C0                                            xor     al,al                                           ;zero
  6305 00000459 FC                                              cld                                                     ;forward strings
  6306 0000045A F3AA                                            rep     stosb                                           ;zero structure members
  6307                                  ;
  6308                                  ;       Restore and return.
  6309                                  ;
  6310 0000045C 07                                              pop     es                                              ;restore non-volatile regs
  6311 0000045D 5F                                              pop     edi                                             ;
  6312 0000045E 59                                              pop     ecx                                             ;
  6313 0000045F C3                                              ret                                                     ;return
  6314                                  ;-----------------------------------------------------------------------------------------------------------------------
  6315                                  ;
  6316                                  ;       Routine:        ConBuildPCISelector
  6317                                  ;
  6318                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  6319                                  ;
  6320                                  ;       In:             DS:EBX  PCI structure address
  6321                                  ;
  6322                                  ;       Out:            EAX     bus, device, function, register selector
  6323                                  ;
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325 00000460 8A23                    ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  6326 00000462 8A5301                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  6327 00000465 C0E203                                          shl     dl,3                                            ;DL = dddd d000
  6328 00000468 8A4302                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  6329 0000046B 2407                                            and     al,007h                                         ;AL = 0000 0fff
  6330 0000046D 08D0                                            or      al,dl                                           ;AL = dddd dfff
  6331 0000046F 0FB7C0                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  6332 00000472 C1E008                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  6333 00000475 8A4303                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6334 00000478 0D00000080                                      or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6335 0000047D 894304                                          mov     [ebx+PCI.selector],eax                          ;set selector
  6336 00000480 C3                                              ret                                                     ;return
  6337                                  ;-----------------------------------------------------------------------------------------------------------------------
  6338                                  ;
  6339                                  ;       Routine:        ConReadPCIConfigData
  6340                                  ;
  6341                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  6342                                  ;
  6343                                  ;       In:             DS:EBX  PCI structure address
  6344                                  ;
  6345                                  ;       Out:            EAX     config data
  6346                                  ;
  6347                                  ;-----------------------------------------------------------------------------------------------------------------------
  6348 00000481 B60C                    ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  6349 00000483 B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  6350 00000485 8B4304                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  6351 00000488 EF                                              out     dx,eax                                          ;select bus, device, function, reg
  6352 00000489 B60C                                            mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  6353 0000048B B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  6354 0000048D ED                                              in      eax,dx                                          ;read register
  6355 0000048E 894308                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  6356 00000491 C3                                              ret                                                     ;return
  6357                                  ;-----------------------------------------------------------------------------------------------------------------------
  6358                                  ;
  6359                                  ;       Routine:        ConNextPCIFunction
  6360                                  ;
  6361                                  ;       Description:    This routine increments the function of the device.
  6362                                  ;
  6363                                  ;       In:             DS:EBX  PCI structure address
  6364                                  ;
  6365                                  ;       Out:            CY      0 = overflow
  6366                                  ;                               1 = no overflow, continue
  6367                                  ;
  6368                                  ;-----------------------------------------------------------------------------------------------------------------------
  6369 00000492 FE4302                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  6370 00000495 807B0208                                        cmp     byte [ebx+PCI.function],8                       ;at limit?
  6371 00000499 7204                                            jb      .10                                             ;no, continue
  6372 0000049B C6430200                                        mov     byte [ebx+PCI.function],0                       ;zero function
  6373 0000049F C3                      .10                     ret                                                     ;return
  6374                                  ;-----------------------------------------------------------------------------------------------------------------------
  6375                                  ;
  6376                                  ;       Routine:        ConNextPCIDevice
  6377                                  ;
  6378                                  ;       Description:    This routine increments the device of the PCI across buses.
  6379                                  ;
  6380                                  ;       In:             DS:EBX  PCI structure address
  6381                                  ;
  6382                                  ;       Out:            CY      0 = overflow
  6383                                  ;                               1 = no overflow, continue
  6384                                  ;
  6385                                  ;-----------------------------------------------------------------------------------------------------------------------
  6386 000004A0 FE4301                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  6387 000004A3 807B0120                                        cmp     byte [ebx+PCI.device],32                        ;at limit?
  6388 000004A7 720E                                            jb      .10                                             ;no, continue
  6389 000004A9 C6430100                                        mov     byte [ebx+PCI.device],0                         ;zero device
  6390 000004AD FE03                                            inc     byte [ebx+PCI.bus]                              ;next bus
  6391 000004AF 803B08                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  6392 000004B2 7203                                            jb      .10                                             ;no, continue
  6393 000004B4 C60300                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  6394 000004B7 C3                      .10                     ret                                                     ;return
  6395                                  ;-----------------------------------------------------------------------------------------------------------------------
  6396                                  ;
  6397                                  ;       Routine:        ConPutLabeledHexValue
  6398                                  ;
  6399                                  ;       Description:    Write labeled binary value as a hexadecimal string.
  6400                                  ;
  6401                                  ;       In:             ECX     binary value
  6402                                  ;                       EDX     prompt string address
  6403                                  ;
  6404                                  ;-----------------------------------------------------------------------------------------------------------------------
  6405 000004B8 52                      ConPutLabeledHexValue   push    edx                                             ;save prompt string address
  6406 000004B9 BA75080000                                      mov     edx,wzConsoleToken                              ;output buffer address
  6407                                                          unsignedToHexadecimal                                   ;convert binary to ASCII hex
  6407 000004BE B01C                <1>  mov al,eUnsignedToHexadecimal
  6407 000004C0 CD30                <1>  int _svc
  6408 000004C2 5A                                              pop     edx                                             ;prompt string address
  6409 000004C3 E801000000                                      call    ConPutLabeledString                             ;write labeled string to console
  6410 000004C8 C3                                              ret                                                     ;return
  6411                                  ;-----------------------------------------------------------------------------------------------------------------------
  6412                                  ;
  6413                                  ;       Routine:        ConPutLabeledString
  6414                                  ;
  6415                                  ;       Description:    Write labeled string to the console.
  6416                                  ;
  6417                                  ;       In:             EDX     prompt string address
  6418                                  ;
  6419                                  ;-----------------------------------------------------------------------------------------------------------------------
  6420                                  ConPutLabeledString     putConsoleString                                        ;write value at DS:EDX to console
  6420                              <1> ConPutLabeledString :
  6420 000004C9 B00C                <1>  mov al,ePutConsoleString
  6420 000004CB CD30                <1>  int _svc
  6421                                                          putConsoleString wzConsoleToken                         ;write token value to console
  6421 000004CD BA75080000          <1>  mov edx,%1
  6421 000004D2 B00C                <1>  mov al,ePutConsoleString
  6421 000004D4 CD30                <1>  int _svc
  6422 000004D6 C3                                              ret                                                     ;return
  6423                                  ;-----------------------------------------------------------------------------------------------------------------------
  6424                                  ;
  6425                                  ;       Routine:        ConReadPCIRegister
  6426                                  ;
  6427                                  ;       Description:    This routine reads a PCI register
  6428                                  ;
  6429                                  ;       In:             EAX     PCI register
  6430                                  ;
  6431                                  ;       Out:            EAX     PCI register value
  6432                                  ;-----------------------------------------------------------------------------------------------------------------------
  6433 000004D7 B60C                    ConReadPCIRegister      mov     dh,EPCIPORTCONFIGADDRHI                         ;hi-order PCI configuration addr port
  6434 000004D9 B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;lo-order PCI configuration addr port
  6435 000004DB EF                                              out     dx,eax                                          ;select PCI register
  6436 000004DC B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  6437 000004DE ED                                              in      eax,dx                                          ;read register
  6438 000004DF C3                                              ret                                                     ;return
  6439                                  ;-----------------------------------------------------------------------------------------------------------------------
  6440                                  ;
  6441                                  ;       Routine:        ConPutLabeledHexLine
  6442                                  ;
  6443                                  ;       Description:    Write labeled binary value as a hexadecimal string with new-line.
  6444                                  ;
  6445                                  ;       In:             ECX     binary value
  6446                                  ;                       EDX     prompt string address
  6447                                  ;
  6448                                  ;-----------------------------------------------------------------------------------------------------------------------
  6449 000004E0 E8D3FFFFFF              ConPutLabeledHexLine    call    ConPutLabeledHexValue                           ;write labeled value to console
  6450 000004E5 E89BFCFFFF                                      call    ConPutNewLine                                   ;write new-line to console
  6451 000004EA C3                                              ret                                                     ;return
  6452                                  ;-----------------------------------------------------------------------------------------------------------------------
  6453                                  ;
  6454                                  ;       Routine:        ConPutLabeledDecLine
  6455                                  ;
  6456                                  ;       Description:    Write labeled binary value as a decimal string with new-line.
  6457                                  ;
  6458                                  ;       In:             ECX     binary value
  6459                                  ;                       EDX     prompt string address
  6460                                  ;
  6461                                  ;-----------------------------------------------------------------------------------------------------------------------
  6462 000004EB E806000000              ConPutLabeledDecLine    call    ConPutLabeledDecValue                           ;write labeled value to console
  6463 000004F0 E890FCFFFF                                      call    ConPutNewLine                                   ;write new-line to console
  6464 000004F5 C3                                              ret                                                     ;return
  6465                                  ;-----------------------------------------------------------------------------------------------------------------------
  6466                                  ;
  6467                                  ;       Routine:        ConPutLabeledDecValue
  6468                                  ;
  6469                                  ;       Description:    Write labeled binary value as a decimal string.
  6470                                  ;
  6471                                  ;       In:             ECX     binary value
  6472                                  ;                       EDX     prompt string address
  6473                                  ;
  6474                                  ;-----------------------------------------------------------------------------------------------------------------------
  6475 000004F6 53                      ConPutLabeledDecValue   push    ebx                                             ;save non-volatile regs
  6476 000004F7 52                                              push    edx                                             ;save prompt string address
  6477 000004F8 BA75080000                                      mov     edx,wzConsoleToken                              ;output bufer address
  6478 000004FD B701                                            mov     bh,1                                            ;suppress leading zeros
  6479                                                          unsignedToDecimalString                                 ;convert binary to decimal string
  6479 000004FF B01B                <1>  mov al,eUnsignedToDecimalString
  6479 00000501 CD30                <1>  int _svc
  6480 00000503 5A                                              pop     edx                                             ;prompt string address
  6481 00000504 E8C0FFFFFF                                      call    ConPutLabeledString                             ;write labeled string to console
  6482 00000509 5B                                              pop     ebx                                             ;restore non-volatile regs
  6483 0000050A C3                                              ret                                                     ;return
  6484                                  ;-----------------------------------------------------------------------------------------------------------------------
  6485                                  ;
  6486                                  ;       Routine:        ConPutLabeledLine
  6487                                  ;
  6488                                  ;       Description:    Write labeled string value with new-line.
  6489                                  ;
  6490                                  ;       In:             EDX     prompt string address
  6491                                  ;
  6492                                  ;-----------------------------------------------------------------------------------------------------------------------
  6493 0000050B E8B9FFFFFF              ConPutLabeledLine       call    ConPutLabeledString                             ;write labeled string to console
  6494 00000510 E870FCFFFF                                      call    ConPutNewLine                                   ;write new-line to console
  6495 00000515 C3                                              ret                                                     ;return
  6496                                  ;-----------------------------------------------------------------------------------------------------------------------
  6497                                  ;
  6498                                  ;       Routine:        ConTakeToken
  6499                                  ;
  6500                                  ;       Description:    This routine extracts the next token from the given source buffer.
  6501                                  ;
  6502                                  ;       In:             DS:EDX  source buffer address
  6503                                  ;                       DS:EBX  target buffer address
  6504                                  ;
  6505                                  ;       Out:            DS:EDX  source buffer address
  6506                                  ;                       DS:EBX  target buffer address
  6507                                  ;
  6508                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  6509                                  ;
  6510                                  ;-----------------------------------------------------------------------------------------------------------------------
  6511 00000516 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  6512 00000517 57                                              push    edi                                             ;
  6513 00000518 06                                              push    es                                              ;
  6514 00000519 1E                                              push    ds                                              ;load data segment selector ...
  6515 0000051A 07                                              pop     es                                              ;... into extra segment reg
  6516 0000051B 89D6                                            mov     esi,edx                                         ;source buffer address
  6517 0000051D 89DF                                            mov     edi,ebx                                         ;target buffer address
  6518 0000051F C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  6519 00000522 FC                                              cld                                                     ;forward strings
  6520 00000523 AC                      .10                     lodsb                                                   ;load byte
  6521 00000524 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  6522 00000526 74FB                                            je      .10                                             ;yes, continue
  6523 00000528 84C0                                            test    al,al                                           ;end of line?
  6524 0000052A 7410                                            jz      .40                                             ;yes, branch
  6525 0000052C AA                      .20                     stosb                                                   ;store byte
  6526 0000052D AC                                              lodsb                                                   ;load byte
  6527 0000052E 84C0                                            test    al,al                                           ;end of line?
  6528 00000530 740A                                            jz      .40                                             ;no, continue
  6529 00000532 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  6530 00000534 75F6                                            jne     .20                                             ;no, continue
  6531 00000536 AC                      .30                     lodsb                                                   ;load byte
  6532 00000537 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  6533 00000539 74FB                                            je      .30                                             ;yes, continue
  6534 0000053B 4E                                              dec     esi                                             ;pre-position
  6535 0000053C C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  6536 0000053F 89D7                                            mov     edi,edx                                         ;source buffer address
  6537 00000541 AC                      .50                     lodsb                                                   ;remaining byte
  6538 00000542 AA                                              stosb                                                   ;move to front of buffer
  6539 00000543 84C0                                            test    al,al                                           ;end of line?
  6540 00000545 75FA                                            jnz     .50                                             ;no, continue
  6541 00000547 07                                              pop     es                                              ;restore non-volatile regs
  6542 00000548 5F                                              pop     edi                                             ;
  6543 00000549 5E                                              pop     esi                                             ;
  6544 0000054A C3                                              ret                                                     ;return
  6545                                  ;-----------------------------------------------------------------------------------------------------------------------
  6546                                  ;
  6547                                  ;       Routine:        ConDetermineCommand
  6548                                  ;
  6549                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  6550                                  ;
  6551                                  ;       input:          DS:EDX  command address
  6552                                  ;
  6553                                  ;       output:         EAX     >=0     = command nbr
  6554                                  ;                               0       = unknown command
  6555                                  ;
  6556                                  ;-----------------------------------------------------------------------------------------------------------------------
  6557 0000054B 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  6558 0000054C 51                                              push    ecx                                             ;
  6559 0000054D 56                                              push    esi                                             ;
  6560 0000054E 57                                              push    edi                                             ;
  6561                                                          upperCaseString                                         ;upper-case string at EDX
  6561 0000054F B01D                <1>  mov al,eUpperCaseString
  6561 00000551 CD30                <1>  int _svc
  6562 00000553 BE[6F0A0000]                                    mov     esi,tConCmdTbl                                  ;commands table
  6563 00000558 31FF                                            xor     edi,edi                                         ;intialize command number
  6564 0000055A FC                                              cld                                                     ;forward strings
  6565 0000055B AC                      .10                     lodsb                                                   ;command length
  6566 0000055C 0FB6C8                                          movzx   ecx,al                                          ;command length
  6567 0000055F E30D                                            jecxz   .20                                             ;branch if end of table
  6568 00000561 89F3                                            mov     ebx,esi                                         ;table entry address
  6569 00000563 01CE                                            add     esi,ecx                                         ;next table entry address
  6570                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  6570 00000565 B002                <1>  mov al,eCompareMemory
  6570 00000567 CD30                <1>  int _svc
  6571 00000569 E303                                            jecxz   .20                                             ;branch if equal
  6572 0000056B 47                                              inc     edi                                             ;increment command nbr
  6573 0000056C EBED                                            jmp     .10                                             ;repeat
  6574 0000056E 89F8                    .20                     mov     eax,edi                                         ;command number
  6575 00000570 5F                                              pop     edi                                             ;restore non-volatile regs
  6576 00000571 5E                                              pop     esi                                             ;
  6577 00000572 59                                              pop     ecx                                             ;
  6578 00000573 5B                                              pop     ebx                                             ;
  6579 00000574 C3                                              ret                                                     ;return
  6580                                  ;-----------------------------------------------------------------------------------------------------------------------
  6581                                  ;
  6582                                  ;       Routine:        ConClear
  6583                                  ;
  6584                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  6585                                  ;
  6586                                  ;-----------------------------------------------------------------------------------------------------------------------
  6587                                  ConClear                clearConsoleScreen                                      ;clear console screen
  6587                              <1> ConClear :
  6587 00000575 B001                <1>  mov al,eClearConsoleScreen
  6587 00000577 CD30                <1>  int _svc
  6588 00000579 C3                                              ret                                                     ;return
  6589                                  ;-----------------------------------------------------------------------------------------------------------------------
  6590                                  ;
  6591                                  ;       Routine:        ConDate
  6592                                  ;
  6593                                  ;       Description:    This routine handles the DATE command.
  6594                                  ;
  6595                                  ;-----------------------------------------------------------------------------------------------------------------------
  6596                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6596                              <1> ConDate :
  6596 0000057A BB36090000          <1>  mov ebx,%1
  6596 0000057F B019                <1>  mov al,eReadRealTimeClock
  6596 00000581 CD30                <1>  int _svc
  6597                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  6597 00000583 BB36090000          <1>  mov ebx,%1
  6597 00000588 BAC5080000          <1>  mov edx,%2
  6597 0000058D B00D                <1>  mov al,ePutDateString
  6597 0000058F CD30                <1>  int _svc
  6598                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6598 00000591 BAC5080000          <1>  mov edx,%1
  6598 00000596 B00C                <1>  mov al,ePutConsoleString
  6598 00000598 CD30                <1>  int _svc
  6599 0000059A E8E6FBFFFF                                      call    ConPutNewLine                                   ;write newline to console
  6600 0000059F C3                                              ret                                                     ;return
  6601                                  ;-----------------------------------------------------------------------------------------------------------------------
  6602                                  ;
  6603                                  ;       Routine:        ConDay
  6604                                  ;
  6605                                  ;       Description:    This routine handles the DAY command.
  6606                                  ;
  6607                                  ;-----------------------------------------------------------------------------------------------------------------------
  6608                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6608                              <1> ConDay :
  6608 000005A0 BB36090000          <1>  mov ebx,%1
  6608 000005A5 B019                <1>  mov al,eReadRealTimeClock
  6608 000005A7 CD30                <1>  int _svc
  6609                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  6609 000005A9 BB36090000          <1>  mov ebx,%1
  6609 000005AE BAC5080000          <1>  mov edx,%2
  6609 000005B3 B00E                <1>  mov al,ePutDayString
  6609 000005B5 CD30                <1>  int _svc
  6610                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6610 000005B7 BAC5080000          <1>  mov edx,%1
  6610 000005BC B00C                <1>  mov al,ePutConsoleString
  6610 000005BE CD30                <1>  int _svc
  6611 000005C0 E8C0FBFFFF                                      call    ConPutNewLine                                   ;write newline to console
  6612 000005C5 C3                                              ret                                                     ;return
  6613                                  ;-----------------------------------------------------------------------------------------------------------------------
  6614                                  ;
  6615                                  ;       Routine:        ConDev
  6616                                  ;
  6617                                  ;       Description:    This routine handles the DEV command.
  6618                                  ;
  6619                                  ;       Input:          wzConsoleInBuffer contains parameters(s)
  6620                                  ;
  6621                                  ;-----------------------------------------------------------------------------------------------------------------------
  6622                                  ;ConDev                  push    ebx                                             ;save non-volatile regs
  6623                                  ;                        push    esi                                             ;
  6624                                  ;
  6625                                  ;                        mov     esi,wsConsoleEther                              ;ETHER struct addr
  6626                                  ;                        lea     ebx,[esi+ETHER.pci]                             ;PCI address
  6627                                  ;                        call    ConFindPCIEther                                 ;find Intel Pro/1000 MT
  6628                                  ;                        jc      .10                                             ;branch if not found
  6629                                  ;
  6630                                  ;                        putConsoleString czEthernetAdapterFound
  6631                                  ;
  6632                                  ;                        mov     al,010h                                         ;Base Address Register (BAR) 0
  6633                                  ;                        call    ConSetPCIRegister                               ;set PCI register
  6634                                  ;                        call    ConBuildPCISelector                             ;build PCI selector
  6635                                  ;                        call    ConReadPCIConfigData                            ;read BAR 0
  6636                                  ;                        mov     [esi+ETHER.mmio],eax                            ;store MMIO address
  6637                                  ;
  6638                                  ;                        mov     al,018h                                         ;Base Address Register (BAR) 2
  6639                                  ;                        call    ConSetPCIRegister                               ;set PCI register
  6640                                  ;                        call    ConBuildPCISelector                             ;build PCI selector
  6641                                  ;                        call    ConReadPCIConfigData                            ;read BAR 2
  6642                                  ;                        mov     [esi+ETHER.port],eax                            ;store i/o port
  6643                                  ;
  6644                                  ;.10                     pop     esi                                             ;restore non-volatile regs
  6645                                  ;                        pop     ebx                                             ;
  6646                                  ;                        ret                                                     ;return
  6647                                  ;-----------------------------------------------------------------------------------------------------------------------
  6648                                  ;
  6649                                  ;       Routine:        ConFindPCIEther
  6650                                  ;
  6651                                  ;       Description:    This routine attempts to locate the first PCI ethernet adapter.
  6652                                  ;
  6653                                  ;       In:             DS:EBX  PCI structure address
  6654                                  ;
  6655                                  ;-----------------------------------------------------------------------------------------------------------------------
  6656                                  ;ConFindPCIEther         call    ConInitPCIContext                               ;initialize PCI
  6657                                  ;.10                     call    ConGetPCIDeviceVendor                           ;EAX = vendor id
  6658                                  ;                        cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Pro/1000 MT?
  6659                                   ;                       je      .30                                             ;no, branch
  6660                                  ;.20                     call    ConNextPCIFunction                              ;step to next bus, device, function
  6661                                  ;                        jb      .10                                             ;next
  6662                                  ;                        stc                                                     ;indicate not found
  6663                                  ;.30                     ret                                                     ;return
  6664                                  ;-----------------------------------------------------------------------------------------------------------------------
  6665                                  ;
  6666                                  ;       Routine:        ConGetPCIDeviceVendor
  6667                                  ;
  6668                                  ;       Description:    This routine returns the PCI device and vendor IDs
  6669                                  ;
  6670                                  ;       In:             DS:EBX  PCI structure address
  6671                                  ;
  6672                                  ;       Out:            EAX     devivce/vendor ID
  6673                                  ;
  6674                                  ;-----------------------------------------------------------------------------------------------------------------------
  6675                                  ;ConGetPCIDeviceVendor   mov     al,EPCIREGVENDORDEVICE                          ;PCI vendor/device register
  6676                                  ;                        call    ConSetPCIRegister                               ;set the PCICONTEXT register
  6677                                  ;                        call    ConBuildPCISelector                             ;build selector from bus, dev, fn, reg
  6678                                  ;                        call    ConReadPCIConfigData                            ;read config data from register
  6679                                  
  6680                                  ;                        cmp     eax,-1
  6681                                  ;                        je      .10
  6682                                  ;                        mov     ecx,eax                                         ;unsigned integer param
  6683                                  ;                        mov     edx,wzConsoleToken                              ;target buffer address
  6684                                  ;                        unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  6685                                  ;                        putConsoleString wzConsoleToken                         ;output string to console
  6686                                  ;                        putConsoleString czNewLine                              ;output newline to console
  6687                                  
  6688                                  ;.10                     ret                                                     ;return
  6689                                  ;-----------------------------------------------------------------------------------------------------------------------
  6690                                  ;
  6691                                  ;       Routine:        ConSetPCIRegister
  6692                                  ;
  6693                                  ;       Description:    This routine sets the register member of the PCI structure
  6694                                  ;
  6695                                  ;       In:             AL      register value (00-FF)
  6696                                  ;
  6697                                  ;-----------------------------------------------------------------------------------------------------------------------
  6698                                  ;ConSetPCIRegister       mov     [ebx+PCI.register],al                           ;set register
  6699                                  ;                        ret                                                     ;return
  6700                                  ;-----------------------------------------------------------------------------------------------------------------------
  6701                                  ;
  6702                                  ;       Routine:        ConExit
  6703                                  ;
  6704                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  6705                                  ;
  6706                                  ;-----------------------------------------------------------------------------------------------------------------------
  6707                                  ConExit                 resetSystem                                             ;issue system reset
  6707                              <1> ConExit :
  6707 000005C6 B01A                <1>  mov al,eResetSystem
  6707 000005C8 CD30                <1>  int _svc
  6708 000005CA C3                                              ret                                                     ;return
  6709                                  ;-----------------------------------------------------------------------------------------------------------------------
  6710                                  ;
  6711                                  ;       Routine:        ConFree
  6712                                  ;
  6713                                  ;       Description:    This routine handles the FREE command.
  6714                                  ;
  6715                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  6716                                  ;
  6717                                  ;-----------------------------------------------------------------------------------------------------------------------
  6718 000005CB 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  6719 000005CC 51                                              push    ecx                                             ;
  6720 000005CD 56                                              push    esi                                             ;
  6721 000005CE 57                                              push    edi                                             ;
  6722                                  ;
  6723                                  ;       Get address parameter
  6724                                  ;
  6725 000005CF BA25080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  6726 000005D4 BB75080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  6727 000005D9 E838FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  6728                                  ;
  6729                                  ;       Convert input parameter from hexadecimal string to binary
  6730                                  ;
  6731 000005DE 803D7508000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  6732 000005E5 7421                                            je      .10                                             ;no, branch
  6733 000005E7 BA75080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  6734                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  6734 000005EC B009                <1>  mov al,eHexadecimalToUnsigned
  6734 000005EE CD30                <1>  int _svc
  6735 000005F0 85C0                                            test    eax,eax                                         ;valid parameter?
  6736 000005F2 7414                                            jz      .10                                             ;no, branch
  6737                                  ;
  6738                                  ;       Free memory block
  6739                                  ;
  6740                                                          freeMemory eax                                          ;free memory
  6740 000005F4 89C2                <1>  mov edx,%1
  6740 000005F6 B004                <1>  mov al,eFreeMemory
  6740 000005F8 CD30                <1>  int _svc
  6741 000005FA 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  6742 000005FD 7409                                            je      .10                                             ;no, branch
  6743                                  ;
  6744                                  ;       Indicate memory freed
  6745                                  ;
  6746                                                          putConsoleString czOK                                   ;indicate success
  6746 000005FF BA[8A0C0000]        <1>  mov edx,%1
  6746 00000604 B00C                <1>  mov al,ePutConsoleString
  6746 00000606 CD30                <1>  int _svc
  6747                                  ;
  6748                                  ;       Restore and return
  6749                                  ;
  6750 00000608 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  6751 00000609 5E                                              pop     esi                                             ;
  6752 0000060A 59                                              pop     ecx                                             ;
  6753 0000060B 5B                                              pop     ebx                                             ;
  6754 0000060C C3                                              ret                                                     ;return
  6755                                  ;-----------------------------------------------------------------------------------------------------------------------
  6756                                  ;
  6757                                  ;       Routine:        ConHour
  6758                                  ;
  6759                                  ;       Description:    This routine Handles the HOUR command.
  6760                                  ;
  6761                                  ;-----------------------------------------------------------------------------------------------------------------------
  6762                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6762                              <1> ConHour :
  6762 0000060D BB36090000          <1>  mov ebx,%1
  6762 00000612 B019                <1>  mov al,eReadRealTimeClock
  6762 00000614 CD30                <1>  int _svc
  6763                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  6763 00000616 BB36090000          <1>  mov ebx,%1
  6763 0000061B BAC5080000          <1>  mov edx,%2
  6763 00000620 B00F                <1>  mov al,ePutHourString
  6763 00000622 CD30                <1>  int _svc
  6764                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6764 00000624 BAC5080000          <1>  mov edx,%1
  6764 00000629 B00C                <1>  mov al,ePutConsoleString
  6764 0000062B CD30                <1>  int _svc
  6765 0000062D E853FBFFFF                                      call    ConPutNewLine                                   ;write newline to console
  6766 00000632 C3                                              ret                                                     ;return
  6767                                  ;-----------------------------------------------------------------------------------------------------------------------
  6768                                  ;
  6769                                  ;       Routine:        ConInt6
  6770                                  ;
  6771                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  6772                                  ;
  6773                                  ;-----------------------------------------------------------------------------------------------------------------------
  6774 00000633 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  6775 00000635 C3                                              ret                                                     ;return (not executed)
  6776                                  ;-----------------------------------------------------------------------------------------------------------------------
  6777                                  ;
  6778                                  ;       Routine:        ConMalloc
  6779                                  ;
  6780                                  ;       Description:    This routine handles the MALLOC command.
  6781                                  ;
  6782                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  6783                                  ;
  6784                                  ;-----------------------------------------------------------------------------------------------------------------------
  6785 00000636 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  6786 00000637 51                                              push    ecx                                             ;
  6787 00000638 56                                              push    esi                                             ;
  6788 00000639 57                                              push    edi                                             ;
  6789                                  ;
  6790                                  ;       Get size parameter
  6791                                  ;
  6792 0000063A BA25080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  6793 0000063F BB75080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  6794 00000644 E8CDFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  6795                                  ;
  6796                                  ;       Convert input parameter from decimal string to binary
  6797                                  ;
  6798 00000649 803D7508000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  6799 00000650 7432                                            je      .10                                             ;no, branch
  6800 00000652 BA75080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  6801                                                          decimalToUnsigned                                       ;convert string token to unsigned
  6801 00000657 B003                <1>  mov al,eDecimalToUnsigned
  6801 00000659 CD30                <1>  int _svc
  6802 0000065B 85C0                                            test    eax,eax                                         ;valid parameter?
  6803 0000065D 7425                                            jz      .10                                             ;no, branch
  6804                                  ;
  6805                                  ;       Allocate memory block
  6806                                  ;
  6807                                                          allocateMemory eax                                      ;allocate memory
  6807 0000065F 51                  <1>  push ecx
  6807 00000660 89C1                <1>  mov ecx,%1
  6807 00000662 B000                <1>  mov al,eAllocateMemory
  6807 00000664 CD30                <1>  int _svc
  6807 00000666 59                  <1>  pop ecx
  6808 00000667 85C0                                            test    eax,eax                                         ;memory allocated?
  6809 00000669 7419                                            jz      .10                                             ;no, branch
  6810                                  ;
  6811                                  ;       Report allocated memory block address
  6812                                  ;
  6813 0000066B BAC5080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  6814 00000670 89C1                                            mov     ecx,eax                                         ;memory address
  6815                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  6815 00000672 B01C                <1>  mov al,eUnsignedToHexadecimal
  6815 00000674 CD30                <1>  int _svc
  6816                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  6816 00000676 BAC5080000          <1>  mov edx,%1
  6816 0000067B B00C                <1>  mov al,ePutConsoleString
  6816 0000067D CD30                <1>  int _svc
  6817 0000067F E801FBFFFF                                      call    ConPutNewLine                                   ;display new line
  6818 00000684 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  6819 00000685 5E                                              pop     esi                                             ;
  6820 00000686 59                                              pop     ecx                                             ;
  6821 00000687 5B                                              pop     ebx                                             ;
  6822 00000688 C3                                              ret                                                     ;return
  6823                                  ;-----------------------------------------------------------------------------------------------------------------------
  6824                                  ;
  6825                                  ;       Routine:        ConMem
  6826                                  ;
  6827                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  6828                                  ;
  6829                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  6830                                  ;
  6831                                  ;-----------------------------------------------------------------------------------------------------------------------
  6832 00000689 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  6833 0000068A 56                                              push    esi                                             ;
  6834 0000068B 57                                              push    edi                                             ;
  6835                                  ;
  6836                                  ;       Update the source address if a parameter is given.
  6837                                  ;
  6838 0000068C BA25080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  6839 00000691 BB75080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  6840 00000696 E87BFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  6841 0000069B 803D7508000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  6842 000006A2 740E                                            je      .10                                             ;no, branch
  6843 000006A4 BA75080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  6844                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  6844 000006A9 B009                <1>  mov al,eHexadecimalToUnsigned
  6844 000006AB CD30                <1>  int _svc
  6845 000006AD A30C080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  6846                                  ;
  6847                                  ;       Setup source address and row count.
  6848                                  ;
  6849 000006B2 8B350C080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  6850 000006B8 31C9                                            xor     ecx,ecx                                         ;zero register
  6851 000006BA B110                                            mov     cl,16                                           ;row count
  6852                                  ;
  6853                                  ;       Start the row with the source address in hexadecimal.
  6854                                  ;
  6855 000006BC 51                      .20                     push    ecx                                             ;save remaining rows
  6856 000006BD BFC5080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  6857 000006C2 89FA                                            mov     edx,edi                                         ;output buffer address
  6858 000006C4 89F1                                            mov     ecx,esi                                         ;console memory address
  6859                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  6859 000006C6 B01C                <1>  mov al,eUnsignedToHexadecimal
  6859 000006C8 CD30                <1>  int _svc
  6860 000006CA 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  6861 000006CD B020                                            mov     al,' '                                          ;ascii space
  6862 000006CF AA                                              stosb                                                   ;store delimiter
  6863                                  ;
  6864                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  6865                                  ;
  6866 000006D0 31C9                                            xor     ecx,ecx                                         ;zero register
  6867 000006D2 B110                                            mov     cl,16                                           ;loop count
  6868 000006D4 51                      .30                     push    ecx                                             ;save loop count
  6869 000006D5 AC                                              lodsb                                                   ;memory byte
  6870 000006D6 88C4                                            mov     ah,al                                           ;memory byte
  6871 000006D8 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  6872 000006DB 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  6873 000006DD 3C3A                                            cmp     al,3ah                                          ;numeric range?
  6874 000006DF 7202                                            jb      .40                                             ;yes, skip ahead
  6875 000006E1 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  6876 000006E3 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  6877 000006E4 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  6878 000006E6 240F                                            and     al,0fh                                          ;mask out high-order bits
  6879 000006E8 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  6880 000006EA 3C3A                                            cmp     al,3ah                                          ;numeric range?
  6881 000006EC 7202                                            jb      .50                                             ;yes, skip ahead
  6882 000006EE 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  6883 000006F0 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  6884 000006F1 B020                                            mov     al,' '                                          ;ascii space
  6885 000006F3 AA                                              stosb                                                   ;store ascii space delimiter
  6886 000006F4 59                                              pop     ecx                                             ;loop count
  6887 000006F5 E2DD                                            loop    .30                                             ;next
  6888                                  ;
  6889                                  ;       Output printable ASCII character section for the row.
  6890                                  ;
  6891 000006F7 83EE10                                          sub     esi,16                                          ;reset source pointer
  6892 000006FA B110                                            mov     cl,16                                           ;loop count
  6893 000006FC AC                      .60                     lodsb                                                   ;source byte
  6894 000006FD 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  6895 000006FF 7204                                            jb      .70                                             ;no, skip ahead
  6896 00000701 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  6897 00000703 7202                                            jb      .80                                             ;yes, skip ahead
  6898 00000705 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  6899 00000707 AA                      .80                     stosb                                                   ;store printable ascii byte
  6900 00000708 E2F2                                            loop    .60                                             ;next source byte
  6901 0000070A 30C0                                            xor     al,al                                           ;nul-terminator
  6902 0000070C AA                                              stosb                                                   ;terminate output line
  6903                                  ;
  6904                                  ;       Display constructed output buffer and newline.
  6905                                  ;
  6906                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  6906 0000070D BAC5080000          <1>  mov edx,%1
  6906 00000712 B00C                <1>  mov al,ePutConsoleString
  6906 00000714 CD30                <1>  int _svc
  6907 00000716 E86AFAFFFF                                      call    ConPutNewLine                                   ;display new line
  6908                                  ;
  6909                                  ;       Repeat until all lines displayed and preserve source address.
  6910                                  ;
  6911 0000071B 59                                              pop     ecx                                             ;remaining rows
  6912 0000071C E29E                                            loop    .20                                             ;next row
  6913 0000071E 89350C080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  6914 00000724 5F                                              pop     edi                                             ;restore regs
  6915 00000725 5E                                              pop     esi                                             ;
  6916 00000726 5B                                              pop     ebx                                             ;
  6917 00000727 C3                                              ret                                                     ;return
  6918                                  ;-----------------------------------------------------------------------------------------------------------------------
  6919                                  ;
  6920                                  ;       Routine:        ConMinute
  6921                                  ;
  6922                                  ;       Description:    This routine Handles the MINUTE command.
  6923                                  ;
  6924                                  ;-----------------------------------------------------------------------------------------------------------------------
  6925                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6925                              <1> ConMinute :
  6925 00000728 BB36090000          <1>  mov ebx,%1
  6925 0000072D B019                <1>  mov al,eReadRealTimeClock
  6925 0000072F CD30                <1>  int _svc
  6926                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  6926 00000731 BB36090000          <1>  mov ebx,%1
  6926 00000736 BAC5080000          <1>  mov edx,%2
  6926 0000073B B011                <1>  mov al,ePutMinuteString
  6926 0000073D CD30                <1>  int _svc
  6927                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6927 0000073F BAC5080000          <1>  mov edx,%1
  6927 00000744 B00C                <1>  mov al,ePutConsoleString
  6927 00000746 CD30                <1>  int _svc
  6928 00000748 E838FAFFFF                                      call    ConPutNewLine                                   ;write newline to console
  6929 0000074D C3                                              ret                                                     ;return
  6930                                  ;-----------------------------------------------------------------------------------------------------------------------
  6931                                  ;
  6932                                  ;       Routine:        ConMonth
  6933                                  ;
  6934                                  ;       Description:    This routine Handles the MONTH command.
  6935                                  ;
  6936                                  ;-----------------------------------------------------------------------------------------------------------------------
  6937                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6937                              <1> ConMonth :
  6937 0000074E BB36090000          <1>  mov ebx,%1
  6937 00000753 B019                <1>  mov al,eReadRealTimeClock
  6937 00000755 CD30                <1>  int _svc
  6938                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  6938 00000757 BB36090000          <1>  mov ebx,%1
  6938 0000075C BAC5080000          <1>  mov edx,%2
  6938 00000761 B012                <1>  mov al,ePutMonthString
  6938 00000763 CD30                <1>  int _svc
  6939                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6939 00000765 BAC5080000          <1>  mov edx,%1
  6939 0000076A B00C                <1>  mov al,ePutConsoleString
  6939 0000076C CD30                <1>  int _svc
  6940 0000076E E812FAFFFF                                      call    ConPutNewLine                                   ;write newline to console
  6941 00000773 C3                                              ret                                                     ;return
  6942                                  ;-----------------------------------------------------------------------------------------------------------------------
  6943                                  ;
  6944                                  ;       Routine:        ConMonthName
  6945                                  ;
  6946                                  ;       Description:    This routine Handles the MONTH.NAME command.
  6947                                  ;
  6948                                  ;-----------------------------------------------------------------------------------------------------------------------
  6949                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  6949                              <1> ConMonthName :
  6949 00000774 BB36090000          <1>  mov ebx,%1
  6949 00000779 B019                <1>  mov al,eReadRealTimeClock
  6949 0000077B CD30                <1>  int _svc
  6950                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  6950 0000077D BB36090000          <1>  mov ebx,%1
  6950 00000782 BAC5080000          <1>  mov edx,%2
  6950 00000787 B013                <1>  mov al,ePutMonthNameString
  6950 00000789 CD30                <1>  int _svc
  6951                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  6951 0000078B BAC5080000          <1>  mov edx,%1
  6951 00000790 B00C                <1>  mov al,ePutConsoleString
  6951 00000792 CD30                <1>  int _svc
  6952 00000794 E8ECF9FFFF                                      call    ConPutNewLine                                   ;write newline to console
  6953 00000799 C3                                              ret                                                     ;return
  6954                                  ;-----------------------------------------------------------------------------------------------------------------------
  6955                                  ;
  6956                                  ;       Routine:        ConPCIProbe
  6957                                  ;
  6958                                  ;       Description:    This routine handles the PCIProbe command.
  6959                                  ;
  6960                                  ;-----------------------------------------------------------------------------------------------------------------------
  6961 0000079A 53                      ConPCIProbe             push    ebx                                             ;save non-volatile regs
  6962                                  ;
  6963                                  ;       Initialize variables.
  6964                                  ;       Construct PCI selector.
  6965                                  ;       Read PCI configuration data.
  6966                                  ;
  6967 0000079B BB3E090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  6968 000007A0 E8A6FCFFFF                                      call    ConInitPCIContext                               ;initialize PCI struct
  6969 000007A5 E8B6FCFFFF              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  6970 000007AA E8D2FCFFFF                                      call    ConReadPCIConfigData                            ;read the configuration data
  6971                                  ;
  6972                                  ;       Interpret PCI data value and display finding.
  6973                                  ;
  6974 000007AF 83F8FF                                          cmp     eax,-1                                          ;function defined?
  6975 000007B2 7508                                            jne     .20                                             ;yes, branch
  6976 000007B4 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  6977 000007B8 7446                                            je      .40                                             ;yes, skip to next device
  6978 000007BA EB3D                                            jmp     short .30                                       ;no, skip to next function
  6979                                  ;
  6980                                  ;       Build PCI identifying string.
  6981                                  ;       Write identifying string to console.
  6982                                  ;       Determine the vendor and chip.
  6983                                  ;       Write vendor and chip to console.
  6984                                  ;
  6985 000007BC BA15090000              .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6986 000007C1 E843000000                                      call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6987 000007C6 E87F000000                                      call    ConInterpretPCIData                             ;update flags based on data
  6988                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6988 000007CB BA15090000          <1>  mov edx,%1
  6988 000007D0 B00C                <1>  mov al,ePutConsoleString
  6988 000007D2 CD30                <1>  int _svc
  6989                                                          putConsoleString czSpace                                ;space delimiter
  6989 000007D4 BA[340D0000]        <1>  mov edx,%1
  6989 000007D9 B00C                <1>  mov al,ePutConsoleString
  6989 000007DB CD30                <1>  int _svc
  6990                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6990 000007DD 8B530C              <1>  mov edx,%1
  6990 000007E0 B00C                <1>  mov al,ePutConsoleString
  6990 000007E2 CD30                <1>  int _svc
  6991                                                          putConsoleString czSpace                                ;space delimiter
  6991 000007E4 BA[340D0000]        <1>  mov edx,%1
  6991 000007E9 B00C                <1>  mov al,ePutConsoleString
  6991 000007EB CD30                <1>  int _svc
  6992                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6992 000007ED 8B5310              <1>  mov edx,%1
  6992 000007F0 B00C                <1>  mov al,ePutConsoleString
  6992 000007F2 CD30                <1>  int _svc
  6993 000007F4 E88CF9FFFF                                      call    ConPutNewLine                                   ;display new line
  6994                                  ;
  6995                                  ;       Next function.
  6996                                  ;
  6997 000007F9 E894FCFFFF              .30                     call    ConNextPCIFunction                              ;next function
  6998 000007FE 72A5                                            jb      .10                                             ;continue if no overflow
  6999                                  ;
  7000                                  ;       Next device, bus.
  7001                                  ;
  7002 00000800 E89BFCFFFF              .40                     call    ConNextPCIDevice                                ;next device, bus
  7003 00000805 729E                                            jb      .10                                             ;continue if no overflow
  7004                                  ;
  7005                                  ;       Restore and return.
  7006                                  ;
  7007 00000807 5B                                              pop     ebx                                             ;restore non-volatile regs
  7008 00000808 C3                                              ret                                                     ;return
  7009                                  ;-----------------------------------------------------------------------------------------------------------------------
  7010                                  ;
  7011                                  ;       Routine:        ConBuildPCIIdent
  7012                                  ;
  7013                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  7014                                  ;                       Function code values.
  7015                                  ;
  7016                                  ;       In:             DS:EBX  PCI structure address
  7017                                  ;                       DS:EDX  output buffer address 999.99.9\0
  7018                                  ;
  7019                                  ;-----------------------------------------------------------------------------------------------------------------------
  7020 00000809 57                      ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  7021 0000080A 06                                              push    es                                              ;
  7022                                  ;
  7023                                  ;       Establish addressability
  7024                                  ;
  7025 0000080B 1E                                              push    ds                                              ;load data segment...
  7026 0000080C 07                                              pop     es                                              ;...into extra segment reg
  7027                                  ;
  7028                                  ;       Build identifier string (bus.device.function)
  7029                                  ;
  7030 0000080D 89D7                                            mov     edi,edx                                         ;output buffer address
  7031 0000080F 8A03                                            mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  7032 00000811 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  7033 00000813 B164                                            mov     cl,100                                          ;divisor (10^2)
  7034 00000815 F6F1                                            div     cl                                              ;AL=100's, AH=bus MOD 100
  7035 00000817 0C30                                            or      al,30h                                          ;apply ASCII zone
  7036 00000819 FC                                              cld                                                     ;forward strings
  7037 0000081A AA                                              stosb                                                   ;store 100's digit
  7038 0000081B 88E0                                            mov     al,ah                                           ;bus MOD 100
  7039 0000081D 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  7040 0000081F B10A                                            mov     cl,10                                           ;divisor (10^1)
  7041 00000821 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  7042 00000823 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  7043 00000827 66AB                                            stosw                                                   ;store 10's and 1's
  7044 00000829 B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  7045 0000082B AA                                              stosb                                                   ;store delimiter
  7046 0000082C 8A4301                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  7047 0000082F 30E4                                            xor     ah,ah                                           ;zero high order dividend
  7048 00000831 B10A                                            mov     cl,10                                           ;divisor (10^1)
  7049 00000833 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  7050 00000835 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  7051 00000839 66AB                                            stosw                                                   ;store 10's and 1's
  7052 0000083B B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  7053 0000083D AA                                              stosb                                                   ;store delimiter
  7054 0000083E 8A4302                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  7055 00000841 0C30                                            or      al,30h                                          ;apply ASCII zone
  7056 00000843 AA                                              stosb                                                   ;store 1's
  7057 00000844 30C0                                            xor     al,al                                           ;null terminator
  7058 00000846 AA                                              stosb                                                   ;store terminator
  7059                                  ;
  7060                                  ;       Restore and return.
  7061                                  ;
  7062 00000847 07                                              pop     es                                              ;restore non-volatile regs
  7063 00000848 5F                                              pop     edi                                             ;
  7064 00000849 C3                                              ret                                                     ;return
  7065                                  ;-----------------------------------------------------------------------------------------------------------------------
  7066                                  ;
  7067                                  ;       Routine:        ConInterpretPCIData
  7068                                  ;
  7069                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  7070                                  ;
  7071                                  ;       In:             DS:EBX  PCI structure address
  7072                                  ;
  7073                                  ;-----------------------------------------------------------------------------------------------------------------------
  7074 0000084A B8[8F0B0000]            ConInterpretPCIData     mov     eax,czApple
  7075 0000084F 66817B086B10                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  7076 00000855 751A                                            jne     .10                                             ;no, branch
  7077 00000857 BA[790D0000]                                    mov     edx,czUSBController
  7078 0000085C 66837B0A3F                                      cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  7079 00000861 0F84A8000000                                    je      .40                                             ;yes, branch
  7080 00000867 BA[960C0000]                                    mov     edx,czOther                                     ;other
  7081 0000086C E99E000000                                      jmp     .40                                             ;continue
  7082 00000871 B8[4D0C0000]            .10                     mov     eax,czIntel                                     ;Intel
  7083 00000876 66817B088680                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  7084 0000087C 7559                                            jne     .20                                             ;no, branch
  7085 0000087E BA[ED0C0000]                                    mov     edx,czPro1000MT                                 ;Pro/1000 MT
  7086 00000883 66817B0A0F10                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  7087 00000889 0F8480000000                                    je      .40                                             ;yes, branch
  7088 0000088F BA[9C0C0000]                                    mov     edx,czPCIAndMem                                 ;PCI and Memory
  7089 00000894 66817B0A3712                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  7090 0000089A 7473                                            je      .40                                             ;yes, branch
  7091 0000089C BA[950B0000]                                    mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  7092 000008A1 66817B0A1524                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  7093 000008A7 7466                                            je      .40                                             ;yes, branch
  7094 000008A9 BA[AB0C0000]                                    mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  7095 000008AE 66817B0A0070                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  7096 000008B4 7459                                            je      .40                                             ;yes, branch
  7097 000008B6 BA[F00D0000]                                    mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  7098 000008BB 66817B0A1171                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  7099 000008C1 744C                                            je      .40                                             ;yes, branch
  7100 000008C3 BA[C30C0000]                                    mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  7101 000008C8 66817B0A1371                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  7102 000008CE 743F                                            je      .40                                             ;yes, branch
  7103 000008D0 BA[960C0000]                                    mov     edx,czOther                                     ;other
  7104 000008D5 EB38                                            jmp     .40                                             ;continue
  7105 000008D7 B8[8F0C0000]            .20                     mov     eax,czOracle                                    ;Oracle
  7106 000008DC 66817B08EE80                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  7107 000008E2 7521                                            jne     .30                                             ;no, branch
  7108 000008E4 BA[9A0D0000]                                    mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  7109 000008E9 66817B0AEFBE                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  7110 000008EF 741E                                            je      .40                                             ;yes, branch
  7111 000008F1 BA[880D0000]                                    mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  7112 000008F6 66817B0AFECA                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  7113 000008FC 7411                                            je      .40                                             ;yes, branch
  7114 000008FE BA[960C0000]                                    mov     edx,czOther                                     ;other
  7115 00000903 EB0A                                            jmp     .40                                             ;continue
  7116 00000905 B8[960C0000]            .30                     mov     eax,czOther                                     ;other
  7117 0000090A BA[960C0000]                                    mov     edx,czOther                                     ;other
  7118 0000090F 89430C                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  7119 00000912 895310                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  7120 00000915 C3                                              ret                                                     ;return
  7121                                  ;-----------------------------------------------------------------------------------------------------------------------
  7122                                  ;
  7123                                  ;       Routine:        ConSecond
  7124                                  ;
  7125                                  ;       Description:    This routine Handles the SECOND command.
  7126                                  ;
  7127                                  ;-----------------------------------------------------------------------------------------------------------------------
  7128                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7128                              <1> ConSecond :
  7128 00000916 BB36090000          <1>  mov ebx,%1
  7128 0000091B B019                <1>  mov al,eReadRealTimeClock
  7128 0000091D CD30                <1>  int _svc
  7129                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  7129 0000091F BB36090000          <1>  mov ebx,%1
  7129 00000924 BAC5080000          <1>  mov edx,%2
  7129 00000929 B014                <1>  mov al,ePutSecondString
  7129 0000092B CD30                <1>  int _svc
  7130                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  7130 0000092D BAC5080000          <1>  mov edx,%1
  7130 00000932 B00C                <1>  mov al,ePutConsoleString
  7130 00000934 CD30                <1>  int _svc
  7131 00000936 E84AF8FFFF                                      call    ConPutNewLine                                   ;write newline to console
  7132 0000093B C3                                              ret                                                     ;return
  7133                                  ;-----------------------------------------------------------------------------------------------------------------------
  7134                                  ;
  7135                                  ;       Routine:        ConTime
  7136                                  ;
  7137                                  ;       Description:    This routine Handles the TIME command.
  7138                                  ;
  7139                                  ;-----------------------------------------------------------------------------------------------------------------------
  7140                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7140                              <1> ConTime :
  7140 0000093C BB36090000          <1>  mov ebx,%1
  7140 00000941 B019                <1>  mov al,eReadRealTimeClock
  7140 00000943 CD30                <1>  int _svc
  7141                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  7141 00000945 BB36090000          <1>  mov ebx,%1
  7141 0000094A BAC5080000          <1>  mov edx,%2
  7141 0000094F B015                <1>  mov al,ePutTimeString
  7141 00000951 CD30                <1>  int _svc
  7142                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  7142 00000953 BAC5080000          <1>  mov edx,%1
  7142 00000958 B00C                <1>  mov al,ePutConsoleString
  7142 0000095A CD30                <1>  int _svc
  7143 0000095C E824F8FFFF                                      call    ConPutNewLine                                   ;write newline to console
  7144 00000961 C3                                              ret                                                     ;return
  7145                                  ;-----------------------------------------------------------------------------------------------------------------------
  7146                                  ;
  7147                                  ;       Routine:        ConVersion
  7148                                  ;
  7149                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  7150                                  ;
  7151                                  ;-----------------------------------------------------------------------------------------------------------------------
  7152                                  ConVersion              putConsoleString czTitle                                ;display version message
  7152                              <1> ConVersion :
  7152 00000962 BA[360D0000]        <1>  mov edx,%1
  7152 00000967 B00C                <1>  mov al,ePutConsoleString
  7152 00000969 CD30                <1>  int _svc
  7153 0000096B C3                                              ret                                                     ;return
  7154                                  ;-----------------------------------------------------------------------------------------------------------------------
  7155                                  ;
  7156                                  ;       Routine:        ConWeekday
  7157                                  ;
  7158                                  ;       Description:    This routine handles the WEEKDAY command.
  7159                                  ;
  7160                                  ;-----------------------------------------------------------------------------------------------------------------------
  7161                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7161                              <1> ConWeekday :
  7161 0000096C BB36090000          <1>  mov ebx,%1
  7161 00000971 B019                <1>  mov al,eReadRealTimeClock
  7161 00000973 CD30                <1>  int _svc
  7162                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  7162 00000975 BB36090000          <1>  mov ebx,%1
  7162 0000097A BAC5080000          <1>  mov edx,%2
  7162 0000097F B016                <1>  mov al,ePutWeekdayString
  7162 00000981 CD30                <1>  int _svc
  7163                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  7163 00000983 BAC5080000          <1>  mov edx,%1
  7163 00000988 B00C                <1>  mov al,ePutConsoleString
  7163 0000098A CD30                <1>  int _svc
  7164 0000098C E8F4F7FFFF                                      call    ConPutNewLine                                   ;write newline to console
  7165 00000991 C3                                              ret                                                     ;return
  7166                                  ;-----------------------------------------------------------------------------------------------------------------------
  7167                                  ;
  7168                                  ;       Routine:        ConWeekdayName
  7169                                  ;
  7170                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  7171                                  ;
  7172                                  ;-----------------------------------------------------------------------------------------------------------------------
  7173                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  7173                              <1> ConWeekdayName :
  7173 00000992 BB36090000          <1>  mov ebx,%1
  7173 00000997 B019                <1>  mov al,eReadRealTimeClock
  7173 00000999 CD30                <1>  int _svc
  7174                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  7174 0000099B BB36090000          <1>  mov ebx,%1
  7174 000009A0 BAC5080000          <1>  mov edx,%2
  7174 000009A5 B017                <1>  mov al,ePutWeekdayNameString
  7174 000009A7 CD30                <1>  int _svc
  7175                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  7175 000009A9 BAC5080000          <1>  mov edx,%1
  7175 000009AE B00C                <1>  mov al,ePutConsoleString
  7175 000009B0 CD30                <1>  int _svc
  7176 000009B2 E8CEF7FFFF                                      call    ConPutNewLine                                           ;write newline to console
  7177 000009B7 C3                                              ret                                                             ;return
  7178                                  ;-----------------------------------------------------------------------------------------------------------------------
  7179                                  ;
  7180                                  ;       Routine:        ConYear
  7181                                  ;
  7182                                  ;       Description:    This routine Handles the YEAR command.
  7183                                  ;
  7184                                  ;-----------------------------------------------------------------------------------------------------------------------
  7185                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7185                              <1> ConYear :
  7185 000009B8 BB36090000          <1>  mov ebx,%1
  7185 000009BD B019                <1>  mov al,eReadRealTimeClock
  7185 000009BF CD30                <1>  int _svc
  7186                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  7186 000009C1 BB36090000          <1>  mov ebx,%1
  7186 000009C6 BAC5080000          <1>  mov edx,%2
  7186 000009CB B018                <1>  mov al,ePutYearString
  7186 000009CD CD30                <1>  int _svc
  7187                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  7187 000009CF BAC5080000          <1>  mov edx,%1
  7187 000009D4 B00C                <1>  mov al,ePutConsoleString
  7187 000009D6 CD30                <1>  int _svc
  7188 000009D8 E8A8F7FFFF                                      call    ConPutNewLine                                   ;write newline to console
  7189 000009DD C3                                              ret                                                     ;return
  7190                                  ;-----------------------------------------------------------------------------------------------------------------------
  7191                                  ;
  7192                                  ;       Routine:        ConYearIsLeap
  7193                                  ;
  7194                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  7195                                  ;
  7196                                  ;-----------------------------------------------------------------------------------------------------------------------
  7197                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7197                              <1> ConYearIsLeap :
  7197 000009DE BB36090000          <1>  mov ebx,%1
  7197 000009E3 B019                <1>  mov al,eReadRealTimeClock
  7197 000009E5 CD30                <1>  int _svc
  7198                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  7198 000009E7 BB36090000          <1>  mov ebx,%1
  7198 000009EC B00A                <1>  mov al,eIsLeapYear
  7198 000009EE CD30                <1>  int _svc
  7199 000009F0 E30B                                            jecxz   .10                                             ;branch if not leap
  7200                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  7200 000009F2 BA[B60D0000]        <1>  mov edx,%1
  7200 000009F7 B00C                <1>  mov al,ePutConsoleString
  7200 000009F9 CD30                <1>  int _svc
  7201 000009FB EB09                                            jmp     .20                                             ;continue
  7202                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  7202                              <1> .10 :
  7202 000009FD BA[D10D0000]        <1>  mov edx,%1
  7202 00000A02 B00C                <1>  mov al,ePutConsoleString
  7202 00000A04 CD30                <1>  int _svc
  7203 00000A06 C3                      .20                     ret                                                     ;return
  7204                                  ;-----------------------------------------------------------------------------------------------------------------------
  7205                                  ;
  7206                                  ;       Tables
  7207                                  ;
  7208                                  ;-----------------------------------------------------------------------------------------------------------------------
  7209                                                                                                                  ;---------------------------------------
  7210                                                                                                                  ;  Command Jump Table
  7211                                                                                                                  ;---------------------------------------
  7212                                  tConJmpTbl              equ     $                                               ;command jump table
  7213 00000A07 92090000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  7214 00000A0B DE090000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  7215 00000A0F 74070000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  7216 00000A13 9A070000                                        dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  7217 00000A17 C6050000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  7218 00000A1B 62090000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  7219 00000A1F 6C090000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  7220 00000A23 36060000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  7221 00000A27 89060000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  7222 00000A2B 28070000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  7223 00000A2F 16090000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  7224 00000A33 75050000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  7225 00000A37 9A070000                                        dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  7226 00000A3B 4E070000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  7227 00000A3F 7A050000                                        dd      ConDate         - ConCode                       ;date command routine offset
  7228 00000A43 C6050000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  7229 00000A47 CB050000                                        dd      ConFree         - ConCode                       ;free command routine offset
  7230 00000A4B 0D060000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  7231 00000A4F 33060000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  7232 00000A53 C6050000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  7233 00000A57 3C090000                                        dd      ConTime         - ConCode                       ;time command routine offset
  7234 00000A5B B8090000                                        dd      ConYear         - ConCode                       ;year command routine offset
  7235 00000A5F 75050000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  7236 00000A63 A0050000                                        dd      ConDay          - ConCode                       ;day command routine offset
  7237                                  ;                        dd      ConDev          - ConCode                       ;dev command routine offset
  7238 00000A67 89060000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  7239 00000A6B 62090000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  7240                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  7241                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  7242                                                                                                                  ;---------------------------------------
  7243                                                                                                                  ;  Command Name Table
  7244                                                                                                                  ;---------------------------------------
  7245                                  tConCmdTbl              equ     $                                               ;command name table
  7246 00000A6F 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  7246 00000A78 4E414D4500         
  7247 00000A7D 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  7247 00000A86 45415000           
  7248 00000A8A 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  7248 00000A93 4D4500             
  7249 00000A96 0950434950524F4245-                             db      9,"PCIPROBE",0                                  ;pciprobe command
  7249 00000A9F 00                 
  7250 00000AA0 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  7250 00000AA9 00                 
  7251 00000AAA 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  7252 00000AB3 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  7253 00000ABC 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  7254 00000AC4 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  7255 00000ACC 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  7256 00000AD4 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  7257 00000ADC 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  7258 00000AE3 064C5350434900                                  db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  7259 00000AEA 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  7260 00000AF1 054441544500                                    db      5,"DATE",0                                      ;date command
  7261 00000AF7 054558495400                                    db      5,"EXIT",0                                      ;exit command
  7262 00000AFD 054652454500                                    db      5,"FREE",0                                      ;free command
  7263 00000B03 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  7264 00000B09 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  7265 00000B0F 055155495400                                    db      5,"QUIT",0                                      ;quit command
  7266 00000B15 0554494D4500                                    db      5,"TIME",0                                      ;time command
  7267 00000B1B 055945415200                                    db      5,"YEAR",0                                      ;year command
  7268 00000B21 04434C5300                                      db      4,"CLS",0                                       ;cls command
  7269 00000B26 0444415900                                      db      4,"DAY",0                                       ;day command
  7270                                  ;                        db      4,"DEV",0                                       ;dev command
  7271 00000B2B 044D454D00                                      db      4,"MEM",0                                       ;mem command
  7272 00000B30 0456455200                                      db      4,"VER",0                                       ;ver command
  7273 00000B35 00                                              db      0                                               ;end of table
  7274                                  ;-----------------------------------------------------------------------------------------------------------------------
  7275                                  ;
  7276                                  ;       Constants
  7277                                  ;
  7278                                  ;-----------------------------------------------------------------------------------------------------------------------
  7279                                  ;-----------------------------------------------------------------------------------------------------------------------
  7280                                  ;
  7281                                  ;       Panels
  7282                                  ;
  7283                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  7284                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  7285                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  7286                                  ;
  7287                                  ;-----------------------------------------------------------------------------------------------------------------------
  7288 00000B36 [620B0000]              czPnlMain               dd      czFldPnlIdCon001
  7289 00000B3A 00000206                                        db      00,00,02h,06
  7290 00000B3E [680B0000]                                      dd      czFldTitleCon001
  7291 00000B42 001D0715                                        db      00,29,07h,21
  7292 00000B46 [7D0B0000]                                      dd      czFldDatTmCon001
  7293 00000B4A 003F0211                                        db      00,63,02h,17
  7294 00000B4E [8E0B0000]                                      dd      czFldPrmptCon001
  7295 00000B52 17000701                                        db      23,00,07h,01
  7296 00000B56 25080000                                        dd      wzConsoleInBuffer
  7297 00000B5A 97010F4F                                        db      128+23,01,0Fh,79
  7298 00000B5E 00000000                                        dd      0
  7299                                  ;-----------------------------------------------------------------------------------------------------------------------
  7300                                  ;
  7301                                  ;       Strings
  7302                                  ;
  7303                                  ;-----------------------------------------------------------------------------------------------------------------------
  7304 00000B62 434F4E303031            czFldPnlIdCon001        db      "CON001"
  7305 00000B68 437573746F6D4F5320-     czFldTitleCon001        db      "CustomOS Version 0.15"
  7305 00000B71 56657273696F6E2030-
  7305 00000B7A 2E3135             
  7306 00000B7D 44442D4D4D4D2D5959-     czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"
  7306 00000B86 59592048483A4D4D   
  7307 00000B8E 3A                      czFldPrmptCon001        db      ":"
  7308                                  
  7309 00000B8F 4170706C6500            czApple                 db      "Apple",0                                       ;vendor name string
  7310 00000B95 41757265616C204144-     czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  7310 00000B9E 3138383120534F554E-
  7310 00000BA7 444D415800         
  7311 00000BAC 42617365206D656D6F-     czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  7311 00000BB5 72792028525443293A-
  7311 00000BBE 202020202000       
  7312 00000BC4 45746865726E657420-     czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  7312 00000BCD 616461707465722066-
  7312 00000BD6 6F756E640D0A00     
  7313 00000BDD 204465766963653A20-     czEthernetDeviceVendor  db      " Device: ",0                                   ;PCI device label
  7313 00000BE6 00                 
  7314 00000BE7 204952513A20202020-     czEthernetIRQ           db      " IRQ:    ",0                                   ;ethernet IRQ
  7314 00000BF0 00                 
  7315 00000BF1 204D41432041646472-     czEthernetMAC           db      " MAC Address:  ",0                             ;MAC address
  7315 00000BFA 6573733A202000     
  7316 00000C01 20202020204D4D494F-     czEthernetMemoryAddr    db      "     MMIO:     ",0                             ;ethernet I/O memory address
  7316 00000C0A 3A202020202000     
  7317 00000C11 20506F72743A202020-     czEthernetPort          db      " Port:   ",0                                   ;ethernet I/O port address
  7317 00000C1A 00                 
  7318 00000C1B 205043492053656C65-     czEthernetSelector      db      " PCI Selector: ",0                             ;PCI selector label
  7318 00000C24 63746F723A2000     
  7319 00000C2B 205374617475733A20-     czEthernetStatusCommand db      " Status: ",0                                   ;PCI status label
  7319 00000C34 00                 
  7320 00000C35 20457874656E646564-     czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  7320 00000C3E 2028525443293A2020-
  7320 00000C47 202020202000       
  7321 00000C4D 496E74656C00            czIntel                 db      "Intel",0                                       ;vendor name string
  7322 00000C53 496E74657272757074-     czIntsEnabled           db      "Interrupts enabled",13,10,0
  7322 00000C5C 7320656E61626C6564-
  7322 00000C65 0D0A00             
  7323 00000C68 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  7324 00000C6B 4C696E6B2075700D0A-     czLinkUp                db      "Link up",13,10,0
  7324 00000C74 00                 
  7325 00000C75 4D544120496E697469-     czMTAInit               db      "MTA Initialized",13,10,0
  7325 00000C7E 616C697A65640D0A00 
  7326 00000C87 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  7327 00000C8A 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  7328 00000C8F 4F7261636C6500          czOracle                db      "Oracle",0                                      ;vendor name string
  7329 00000C96 4F7468657200            czOther                 db      "Other",0                                       ;default name string
  7330 00000C9C 5043492026204D656D-     czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  7330 00000CA5 6F727900           
  7331 00000CA9 2E00                    czPeriod                db      ".",0                                           ;period delimiter
  7332 00000CAB 504949583320504349-     czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  7332 00000CB4 2D746F2D4953412042-
  7332 00000CBD 726964676500       
  7333 00000CC3 50494958342F34452F-     czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  7333 00000CCC 344D20506F77657220-
  7333 00000CD5 4D616E6167656D656E-
  7333 00000CDE 7420436F6E74726F6C-
  7333 00000CE7 6C657200           
  7334 00000CEB 3A00                    czPrompt                db      ":",0                                           ;prompt string
  7335 00000CED 50726F2F3130303020-     czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  7335 00000CF6 4D542045746865726E-
  7335 00000CFF 657420416461707465-
  7335 00000D08 7200               
  7336 00000D0A 526563656976652073-     czReceiveStarted        db      "Receive started",13,10,0
  7336 00000D13 7461727465640D0A00 
  7337 00000D1C 2042656C6F77204542-     czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  7337 00000D25 44412028496E742031-
  7337 00000D2E 3268293A2000       
  7338 00000D34 2000                    czSpace                 db      " ",0                                           ;space delimiter
  7339 00000D36 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  7339 00000D3F 65726174696E672053-
  7339 00000D48 797374656D20312E30-
  7339 00000D51 0D0A00             
  7340 00000D54 5472616E736D697420-     czTransmitStarted       db      "Transmit started",13,10,0
  7340 00000D5D 737461727465640D0A-
  7340 00000D66 00                 
  7341 00000D67 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  7341 00000D70 6F6D6D616E640D0A00 
  7342 00000D79 55534220436F6E7472-     czUSBController         db      "USB Controller",0                              ;USB controller string
  7342 00000D82 6F6C6C657200       
  7343 00000D88 5669727475616C426F-     czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  7343 00000D91 782044657669636500 
  7344 00000D9A 5669727475616C426F-     czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  7344 00000DA3 782047726170686963-
  7344 00000DAC 732041646170746572-
  7344 00000DB5 00                 
  7345 00000DB6 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  7345 00000DBF 69732061206C656170-
  7345 00000DC8 20796561722E0D0A00 
  7346 00000DD1 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  7346 00000DDA 6973206E6F74206120-
  7346 00000DE3 6C6561702079656172-
  7346 00000DEC 2E0D0A00           
  7347 00000DF0 383233373141422F45-     cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  7347 00000DF9 422050434920427573-
  7347 00000E02 204D61737465722049-
  7347 00000E0B 444520436F6E74726F-
  7347 00000E14 6C6C657200         
  7348 00000E19 00<rept>                                        times   03000h-($-$$) db 0h                             ;zero fill to end of section
  7349                                  %endif
  7350                                  %ifdef BUILDDISK
  7351                                  ;-----------------------------------------------------------------------------------------------------------------------
  7352                                  ;
  7353                                  ;       Free Disk Space                                                         @disk: 00b600   @mem:  n/a
  7354                                  ;
  7355                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  7356                                  ;
  7357                                  ;-----------------------------------------------------------------------------------------------------------------------
  7358                                  section                 unused                                                  ;unused disk space
  7359                                                          times   EBOOTDISKBYTES-0B600h db 0F6h                   ;fill to end of disk image
  7360                                  %endif
  7361                                  ;=======================================================================================================================
  7362                                  ;
  7363                                  ;       End of Program Code
  7364                                  ;
  7365                                  ;=======================================================================================================================
