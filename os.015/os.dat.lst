     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.015
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to add code to initialize the ethernet adapter.
     8                                  ;
     9                                  ;       Revised:        December 25, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Logical tabs are set after each eight columns.
    46                                  ;                       Tabs are simulated using SPACE characters.
    47                                  ;                       For comments that span an entire line, comment text begins in column 9.
    48                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    49                                  ;                       Assembly operands begin in column 33.
    50                                  ;                       Inline comments begin in column 81.
    51                                  ;                       Lines should not extend beyond column 120.
    52                                  ;
    53                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    54                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    55                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    56                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    57                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    58                                  ;                       ouput buffers, respectively.
    59                                  ;
    60                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    61                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    62                                  ;
    63                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    64                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    65                                  ;                       Register names in comments are in upper case (EAX, EDI).
    66                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    67                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    68                                  ;                       register contents on entry and exit.
    69                                  ;
    70                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    71                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    72                                  ;                       The 2nd letter of the constant label indicates the storage type.
    73                                  ;
    74                                  ;                       cq......        constant quad-word (dq)
    75                                  ;                       cd......        constant double-word (dd)
    76                                  ;                       cw......        constant word (dw)
    77                                  ;                       cb......        constant byte (db)
    78                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    79                                  ;
    80                                  ;       Instructions:   32-bit instructions are generally favored.
    81                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    82                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    83                                  ;
    84                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    85                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    86                                  ;
    87                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    88                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    89                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    90                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    91                                  ;                       Octal literal values are avoided.
    92                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    93                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    94                                  ;
    95                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    96                                  ;                       Macro names describe an action and so DO begin with a verb.
    97                                  ;
    98                                  ;       Memory Use:     Operating system memory allocation is minimized.
    99                                  ;                       Buffers are kept to as small a size as practicable.
   100                                  ;                       Data and code intermingling is avoided wherever possible.
   101                                  ;
   102                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   103                                  ;                       Register names in source code are in lower case (eax, edx).
   104                                  ;
   105                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   106                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   107                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   108                                  ;
   109                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   110                                  ;                       Routine names begin with a verb (Get, Read, Load).
   111                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   112                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   113                                  ;                       function but begin with a leading underscore (_) character.
   114                                  ;
   115                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   116                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   117                                  ;
   118                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   119                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   120                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   121                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   122                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   123                                  ;
   124                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   125                                  ;                       The 2nd letter of the variable label indicates the storage type.
   126                                  ;
   127                                  ;                       wq......        variable quad-word (resq)
   128                                  ;                       wd......        variable double-word (resd)
   129                                  ;                       ww......        variable word (resw)
   130                                  ;                       wb......        variable byte (resb)
   131                                  ;                       ws......        writable structure
   132                                  ;
   133                                  ;-----------------------------------------------------------------------------------------------------------------------
   134                                  ;=======================================================================================================================
   135                                  ;
   136                                  ;       Equates
   137                                  ;
   138                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   139                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   140                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   141                                  ;       sets. Equates here are defined in the following groupings:
   142                                  ;
   143                                  ;       Hardware-Defined Values
   144                                  ;
   145                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   146                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   147                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   148                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   149                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   150                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   161                                  ;
   162                                  ;       Operating System Values
   163                                  ;
   164                                  ;       EBOOT...        Boot sector and loader values
   165                                  ;       ECON...         Console values (dimensions and attributes)
   166                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   167                                  ;       EHWF...         Hardware flags
   168                                  ;       EKEYF...        Keyboard status flags
   169                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   170                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   171                                  ;       EMEM...         Memory Management values
   172                                  ;       EMSG...         Message identifers
   173                                  ;
   174                                  ;=======================================================================================================================
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       Hardware-Defined Values
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;
   182                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   183                                  ;
   184                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   185                                  ;       for CGA, EGA, VGA and compatible video modes.
   186                                  ;
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   189                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   190                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   191                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  ;
   194                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   195                                  ;
   196                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   197                                  ;
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   200                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   201                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   202                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   203                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  ;
   206                                  ;       Intel 8254X PCI/PCI-X Gigibit Ethernet Controller
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EI825REGCTRL            equ     00000h                                          ;control register
   210                                  EI825REGICR             equ     000C0h                                          ;interrupt cause read
   211                                  EI825REGITR             equ     000C4h                                          ;interrupt throttling register
   212                                  EI825REGIMS             equ     000D0h                                          ;interrupt mask set/read
   213                                  EI825REGRCTL            equ     00100h                                          ;receive control register
   214                                  EI825REGRDBAL           equ     02800h                                          ;receive descriptor base address lo
   215                                  EI825REGRDBAH           equ     02804h                                          ;receive descriptor base address hi
   216                                  EI825REGRDLEN           equ     02808h                                          ;receive descriptor length register
   217                                  EI825REGRDH             equ     02810h                                          ;receive descriptor head register
   218                                  EI825REGRDT             equ     02818h                                          ;receive descriptor tail register
   219                                  EI825REGTCTL            equ     00400h                                          ;transmit control register
   220                                  EI825REGTDBAL           equ     03800h                                          ;transmit descriptor base address lo
   221                                  EI825REGTDBAH           equ     03804h                                          ;transmit descriptor base address hi
   222                                  EI825REGTDLEN           equ     03808h                                          ;transmit descriptor length register
   223                                  EI825REGTDH             equ     03810h                                          ;transmit descriptor head register
   224                                  EI825REGTDT             equ     03818h                                          ;transmit descriptor tail register
   225                                  EI825REGMTA             equ     05200h                                          ;multicast table array registers
   226                                  EI825REGRAL             equ     05400h                                          ;receive address lo
   227                                  EI825REGRAH             equ     05404h                                          ;receive address hi
   228                                  EI825CTRLSLU            equ     040h                                            ;set link up
   229                                  EI825ICRLSC             equ     004h                                            ;link status change
   230                                  EI825ICRRXDMT0          equ     010h                                            ;receive descr min threshold reached
   231                                  EI825ICRRXO             equ     040h                                            ;receiver overrun
   232                                  EI825ICRRXT0            equ     080h                                            ;receiver timer interrupt
   233                                  EI825RCTLEN             equ     00002h                                          ;receive enable
   234                                  EI825RCTLSBP            equ     00004h                                          ;store bad packets
   235                                  EI825RCTLUPE            equ     00008h                                          ;unicast promiscuous enabled
   236                                  EI825RCTLMPE            equ     00010h                                          ;multicast promiscuous enabled
   237                                  EI825RCTLLPE            equ     00020h                                          ;long package reception enable
   238                                  EI825RCTLBAM            equ     08000h                                          ;broadcast accept mode
   239                                  EI825RCTLBSZ1024        equ     000010000h                                      ;1024-bit buffer size
   240                                  EI825TCTLEN             equ     002h                                            ;transmit enable
   241                                  EI825TCTLPSP            equ     008h                                            ;pad short packets
   242                                  ;-----------------------------------------------------------------------------------------------------------------------
   243                                  ;
   244                                  ;       8042 Keyboard Controller                                                EKEYB...
   245                                  ;
   246                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   247                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   248                                  ;
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  EKEYBPORTDATA           equ     060h                                            ;data port
   251                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   252                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   253                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   254                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   255                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   256                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   257                                                                                                                  ;---------------------------------------
   258                                                                                                                  ;       Keyboard Scan Codes
   259                                                                                                                  ;---------------------------------------
   260                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   261                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   262                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   263                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   264                                  EKEYBSLASH              equ     035h                                            ;slash
   265                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   266                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   267                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   268                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   269                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   270                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   271                                  EKEYBUP                 equ     080h                                            ;up
   272                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   273                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   274                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   275                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   276                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   277                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   278                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   279                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   280                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   281                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   282                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   283                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  ;
   286                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   287                                  ;
   288                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   289                                  ;       external devices and signals a hardware interrupt to the CPU.
   290                                  ;
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   293                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   294                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   295                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   296                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       8253 Programmable Interval Timer                                        EPIT...
   300                                  ;
   301                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   302                                  ;       approximately 18.2 times per second.
   303                                  ;
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;
   308                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   309                                  ;
   310                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   311                                  ;
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  ERTCREGPORT             equ     070h                                            ;register select port
   314                                  ERTCDATAPORT            equ     071h                                            ;data port
   315                                  ERTCSECONDREG           equ     000h                                            ;second
   316                                  ERTCMINUTEREG           equ     002h                                            ;minute
   317                                  ERTCHOURREG             equ     004h                                            ;hour
   318                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   319                                  ERTCDAYREG              equ     007h                                            ;day
   320                                  ERTCMONTHREG            equ     008h                                            ;month
   321                                  ERTCYEARREG             equ     009h                                            ;year of the century
   322                                  ERTCSTATUSREG           equ     00bh                                            ;status
   323                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   324                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   325                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   326                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   327                                  ERTCCENTURYREG          equ     032h                                            ;century
   328                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;
   331                                  ;       x86 CPU Architecture                                                    ;EX86...
   332                                  ;
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  ;
   337                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   338                                  ;
   339                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   340                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   341                                  ;
   342                                  ;       0.......        Segment is not present in memory (triggers int 11)
   343                                  ;       1.......        Segment is present in memory
   344                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   345                                  ;       ...0....        Segment is a system segment
   346                                  ;       ...00010                Local Descriptor Table
   347                                  ;       ...00101                Task Gate
   348                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   349                                  ;       ...01100                Call Gate (386)
   350                                  ;       ...01110                Interrupt Gate (386)
   351                                  ;       ...01111                Trap Gate (386)
   352                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   353                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   354                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   358                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   359                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   360                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   361                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   362                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   363                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   364                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   365                                  ;-----------------------------------------------------------------------------------------------------------------------
   366                                  ;
   367                                  ;       Firmware-Defined Values
   368                                  ;
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ;
   372                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   373                                  ;
   374                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   375                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   376                                  ;
   377                                  ;-----------------------------------------------------------------------------------------------------------------------
   378                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   379                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   380                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   381                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   382                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   383                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   384                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   385                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   386                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   387                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   388                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   389                                  ;-----------------------------------------------------------------------------------------------------------------------
   390                                  ;
   391                                  ;       Standards-Based Values
   392                                  ;
   393                                  ;-----------------------------------------------------------------------------------------------------------------------
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  ;
   396                                  ;       ASCII                                                                   EASCII...
   397                                  ;
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   400                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   401                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   402                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   403                                  EASCIISPACE             equ     020h                                            ;space
   404                                  EASCIIDASH              equ     02Dh                                            ;dash or minus
   405                                  EASCIIPERIOD            equ     02Eh                                            ;period
   406                                  EASCIIUPPERA            equ     041h                                            ;'A'
   407                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   408                                  EASCIILOWERA            equ     061h                                            ;'a'
   409                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   410                                  EASCIITILDE             equ     07Eh                                            ;'~'
   411                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   412                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   413                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   414                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   415                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   416                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   417                                  EASCIICASE              equ     00100000b                                       ;case bit
   418                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;
   421                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   422                                  ;
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   425                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   426                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   427                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   428                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   429                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   430                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   431                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   432                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   433                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   434                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   435                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   436                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   437                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   438                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   439                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   440                                  ;-----------------------------------------------------------------------------------------------------------------------
   441                                  ;
   442                                  ;       Operating System Values
   443                                  ;
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ;
   447                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   448                                  ;
   449                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   450                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   451                                  ;
   452                                  ;-----------------------------------------------------------------------------------------------------------------------
   453                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   454                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   455                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   456                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   457                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   458                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   459                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   460                                  ;-----------------------------------------------------------------------------------------------------------------------
   461                                  ;       Console Constants                                                       ECON...
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ECONCOLS                equ     80                                              ;columns per row
   464                                  ECONROWS                equ     24                                              ;console rows
   465                                  ECONOIAROW              equ     24                                              ;operator information area row
   466                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   467                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   468                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   469                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   470                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   475                                  EGDTCGA                 equ     020h                                            ;cga video selector
   476                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   477                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   478                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   479                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   480                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   481                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  ;       Hardware Flags                                                          EHWF...
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   486                                  ;-----------------------------------------------------------------------------------------------------------------------
   487                                  ;       Keyboard Flags                                                          EKEYF...
   488                                  ;-----------------------------------------------------------------------------------------------------------------------
   489                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   490                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   491                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   492                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   493                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   494                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   495                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   496                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   497                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   498                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   499                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   500                                  ;-----------------------------------------------------------------------------------------------------------------------
   501                                  ;       Kernel Constants                                                        EKRN...
   502                                  ;-----------------------------------------------------------------------------------------------------------------------
   503                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   504                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   505                                  EKRNCODELEN             equ     07000h                                          ;kernel code size (1000h to 8000h)
   506                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   507                                  EKRNHEAPSIZE            equ     020000000h                                      ;kernel heap size max (512MB)
   508                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   509                                  EKRNMINRAMKB            equ     ((EKRNCODEBASE+EKRNCODELEN)/1024)               ;kernel minimum RAM KB required
   510                                  EKRNMINEXTKB            equ     (31*1024)                                       ;kernel minimum extended RAM KB required
   511                                  ;-----------------------------------------------------------------------------------------------------------------------
   512                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516                                  ;       Memory Management Constants                                             EMEM...
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   519                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   520                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   521                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   522                                  ;-----------------------------------------------------------------------------------------------------------------------
   523                                  ;       Message Identifiers                                                     EMSG...
   524                                  ;-----------------------------------------------------------------------------------------------------------------------
   525                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   526                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   527                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   528                                  ;-----------------------------------------------------------------------------------------------------------------------
   529                                  ;       Networking Identifiers                                                  ENET...
   530                                  ;-----------------------------------------------------------------------------------------------------------------------
   531                                  ENETRXBUFSIZ            equ     1024                                            ;receive buffer size
   532                                  ENETRXDESCCT            equ     16                                              ;receive descritor count
   533                                  ENETTXDESCCT            equ     16                                              ;transmit descriptor count
   534                                  ;=======================================================================================================================
   535                                  ;
   536                                  ;       Structures
   537                                  ;
   538                                  ;=======================================================================================================================
   539                                  ;-----------------------------------------------------------------------------------------------------------------------
   540                                  ;
   541                                  ;       DATETIME
   542                                  ;
   543                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   544                                  ;
   545                                  ;-----------------------------------------------------------------------------------------------------------------------
   546                                  struc                   DATETIME
   547 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   548 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   549 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   550 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   551 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   552 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   553 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   554 00000007 <res 00000001>          .century                resb    1                                               ;century
   555                                  EDATETIMELEN            equ     ($-.second)
   556                                  endstruc
   557                                  ;-----------------------------------------------------------------------------------------------------------------------
   558                                  ;
   559                                  ;       ETHER
   560                                  ;
   561                                  ;       The ETHER structure defines an Ethernet adapter context.
   562                                  ;
   563                                  ;-----------------------------------------------------------------------------------------------------------------------
   564                                  struc                   ETHER
   565 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   566                                  .devicevendor           equ     $                                               ;device id | vendor id
   567 00000004 <res 00000002>          .vendor                 resw    1                                               ;vendor id
   568 00000006 <res 00000002>          .device                 resw    1                                               ;device id
   569                                  .statuscommand          equ     $                                               ;status reg | command reg
   570 00000008 <res 00000002>          .commandreg             resw    1                                               ;command register
   571 0000000A <res 00000002>          .statusreg              resw    1                                               ;status register
   572 0000000C <res 00000004>          .classrev               resd    1                                               ;class code | revision id
   573 00000010 <res 00000004>          .misc                   resd    1                                               ;BIST | Hdr | latency | cache
   574 00000014 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address (bar 0)
   575 00000018 <res 00000004>          .flash                  resd    1                                               ;flash base address (bar 1)
   576 0000001C <res 00000004>          .port                   resd    1                                               ;i/o port (base 2)
   577 00000020 <res 00000004>          .rxblock                resd    1                                               ;allocated rx memory block
   578 00000024 <res 00000004>          .rxbase                 resd    1                                               ;16-byte aligned
   579 00000028 <res 00000004>          .rxtail                 resd    1
   580 0000002C <res 00000004>          .rxcount                resd    1
   581 00000030 <res 00000004>          .txblock                resd    1                                               ;allocated tx memory block
   582 00000034 <res 00000004>          .txbase                 resd    1                                               ;16-byte aligned
   583 00000038 <res 00000004>          .txtail                 resd    1
   584 0000003C <res 00000006>          .mac                    resb    6                                               ;mac address
   585 00000042 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   586                                  EETHERLEN               equ     ($-.selector)
   587                                  endstruc
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  ;
   590                                  ;       I825RXDESC
   591                                  ;
   592                                  ;       The Intel 8254X PCI/PCI-X Gigabit Ethernet controller receive descriptor.
   593                                  ;
   594                                  ;-----------------------------------------------------------------------------------------------------------------------
   595                                  struc                   I825RXDESC
   596                                  .address                equ     $                                               ;64-bit address
   597 00000000 <res 00000004>          .addresslo              resd    1                                               ;address lo
   598 00000004 <res 00000004>          .addresshi              resd    1                                               ;address hi
   599 00000008 <res 00000002>          .length                 resw    1                                               ;length
   600 0000000A <res 00000002>          .checksum               resw    1                                               ;checksum
   601 0000000C <res 00000001>          .status                 resb    1                                               ;status
   602 0000000D <res 00000001>          .errors                 resb    1                                               ;errors
   603 0000000E <res 00000002>          .special                resw    1                                               ;special
   604                                  EI825RXDESCLEN          equ     ($-.address)
   605                                  endstruc
   606                                  ;-----------------------------------------------------------------------------------------------------------------------
   607                                  ;
   608                                  ;       I825TXDESC
   609                                  ;
   610                                  ;       The Intel 8254X PCI/PCI-X Gigabit Ethernet controller transmit descriptor.
   611                                  ;
   612                                  ;-----------------------------------------------------------------------------------------------------------------------
   613                                  struc                   I825TXDESC
   614                                  .address                equ     $                                               ;64-bit address
   615 00000000 <res 00000004>          .addresslo              resd    1                                               ;address lo
   616 00000004 <res 00000004>          .addresshi              resd    1                                               ;address hi
   617 00000008 <res 00000002>          .length                 resw    1                                               ;length
   618 0000000A <res 00000001>          .cso                    resb    1                                               ;cso
   619 0000000B <res 00000001>          .cmd                    resb    1                                               ;cmd
   620 0000000C <res 00000001>          .sta                    resb    1                                               ;sta
   621 0000000D <res 00000001>          .css                    resb    1                                               ;css
   622 0000000E <res 00000002>          .special                resw    1                                               ;special
   623                                  EI825TXDESCLEN          equ     ($-.address)
   624                                  endstruc
   625                                  ;-----------------------------------------------------------------------------------------------------------------------
   626                                  ;
   627                                  ;       MEMBLOCK
   628                                  ;
   629                                  ;       The MEMBLOCK structure defines a memory block.
   630                                  ;
   631                                  ;-----------------------------------------------------------------------------------------------------------------------
   632                                  struc                   MEMBLOCK
   633 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   634 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   635 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   636 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   637 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   638 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   639 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   640 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   641                                  EMEMBLOCKLEN            equ     ($-.signature)
   642                                  endstruc
   643                                  ;-----------------------------------------------------------------------------------------------------------------------
   644                                  ;
   645                                  ;       MEMROOT
   646                                  ;
   647                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   648                                  ;
   649                                  ;-----------------------------------------------------------------------------------------------------------------------
   650                                  struc                   MEMROOT
   651 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   652 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   653 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   654 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   655 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   656 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   657                                  EMEMROOTLEN             equ     ($-.firstcontig)
   658                                  endstruc
   659                                  ;-----------------------------------------------------------------------------------------------------------------------
   660                                  ;
   661                                  ;       MQUEUE
   662                                  ;
   663                                  ;       The MQUEUE structure maps memory used for a message queue.
   664                                  ;
   665                                  ;-----------------------------------------------------------------------------------------------------------------------
   666                                  struc                   MQUEUE
   667 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   668 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   669 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   670                                  endstruc
   671                                  ;-----------------------------------------------------------------------------------------------------------------------
   672                                  ;
   673                                  ;       PCI
   674                                  ;
   675                                  ;       The PCI structure defines a PCI bus, device and function context.
   676                                  ;
   677                                  ;-----------------------------------------------------------------------------------------------------------------------
   678                                  struc                   PCI
   679 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   680 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   681 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   682 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   683 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   684                                  .configdata             equ     $                                               ;data read from port 0CFCh
   685 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   686 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   687 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   688 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   689                                  EPCILEN                 equ     ($-.configdata)
   690                                  endstruc
   691                                  ;-----------------------------------------------------------------------------------------------------------------------
   692                                  ;
   693                                  ;       OSDATA
   694                                  ;
   695                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   696                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   697                                  ;
   698                                  ;-----------------------------------------------------------------------------------------------------------------------
   699                                  struc                   OSDATA
   700 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   701 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   702 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   703 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   704 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   705 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   706 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   707 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   708 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   709 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   710 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   711 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 free memory KB below EBDA
   712 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   713 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   714 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   715 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   716 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   717 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   718 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   719 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   720 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   721 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   722 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   723 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   724 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   725 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   726 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   727 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   728 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   729 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   730 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   731 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   732 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   733 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   734 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   735 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   736 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   737 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   738 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   739 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   740 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   741 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   742 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   743 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   744 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   745 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   746 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   747 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   748 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   749 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   750 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   751 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   752 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   753 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   754 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   755 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   756 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   757 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   758 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   759 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   760 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   761 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   762 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   763 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   764 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   765 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   766 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   767 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   768 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   769 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   770 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   771 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   772 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   773 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   774 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   775 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   776 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   777 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   778 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   779 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   780 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   781 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   782 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   783 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   784 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   785 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   786 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   787 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   788 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   789 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   790 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   791 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   792 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   793 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   794 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   795 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   796 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   797 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   798 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   799 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   800 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   801                                  ;-----------------------------------------------------------------------------------------------------------------------
   802                                  ;
   803                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   804                                  ;
   805                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   806                                  ;
   807                                  ;-----------------------------------------------------------------------------------------------------------------------
   808                                  ECONDATA                equ     ($)
   809 00000800 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap bytes
   810 00000804 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   811 00000808 <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   812                                  
   813 0000080C <res 00000004>          wdConsoleMemBase        resd    1                                               ;memory display source addr
   814 00000810 <res 00000004>          wdConsoleField          resd    1                                               ;console field definition address
   815 00000814 <res 00000001>          wbConsoleFieldColumn    resb    1
   816 00000815 <res 00000001>          wbConsoleFieldRow       resb    1
   817 00000816 <res 00000001>          wbConsoleFieldColor     resb    1
   818 00000817 <res 00000001>          wbConsoleFieldLength    resb    1
   819                                  
   820 00000818 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   821 00000819 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   822                                  
   823 0000081A <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   824 0000081B <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   825 0000081C <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   826 0000081D <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   827 0000081E <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   828 0000081F <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   829 00000820 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   830 00000821 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   831 00000822 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   832 00000823 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   833 00000824 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   834                                  
   835 00000825 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   836                                  
   837 00000875 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   838 000008C5 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   839 00000915 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   840                                  
   841 0000091E <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   842                                  
   843 00000936 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   844 0000093E <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   845 0000094A <res 00000043>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   846                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   847                                  ;-----------------------------------------------------------------------------------------------------------------------
   848                                  ;
   849                                  ;       End of OS Variables
   850                                  ;
   851                                  ;-----------------------------------------------------------------------------------------------------------------------
   852                                  endstruc
   853                                  ;-----------------------------------------------------------------------------------------------------------------------
   854                                  ;
   855                                  ;       Macros
   856                                  ;
   857                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   858                                  ;
   859                                  ;-----------------------------------------------------------------------------------------------------------------------
   860                                  %macro                  mint    1
   861                                  _%1                     equ     ($-$$) / EX86DESCLEN
   862                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   863                                  %endmacro
   864                                  %macro                  mtrap   1
   865                                  _%1                     equ     ($-$$) / EX86DESCLEN
   866                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   867                                  %endmacro
   868                                  %macro                  menter  1
   869                                  ?%1                     equ     ($-$$)
   870                                  %endmacro
   871                                  %macro                  tsvce   1
   872                                  e%1                     equ     ($-tsvc)/4
   873                                                          dd      %1
   874                                  %endmacro
   875                                  %ifdef BUILDBOOT
   876                                  ;=======================================================================================================================
   877                                  ;
   878                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   879                                  ;
   880                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   881                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   882                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   883                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   884                                  ;
   885                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   886                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   887                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   888                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   889                                  ;       immediately followed by a disk parameter table.
   890                                  ;
   891                                  ;=======================================================================================================================
   892                                                          cpu     8086                                            ;assume minimal CPU
   893                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   894                                                          bits    16                                              ;16-bit code at power-up
   895                                  %ifdef BUILDPREP
   896                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   897                                  %else
   898 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   899                                  %endif
   900                                  ;-----------------------------------------------------------------------------------------------------------------------
   901                                  ;
   902                                  ;       Disk Parameter Table
   903                                  ;
   904                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   905                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   906                                  ;
   907                                  ;-----------------------------------------------------------------------------------------------------------------------
   908 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   909 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   910 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   911 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   912 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   913 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   914 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   915 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   916 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   917                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   918 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   919 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   920 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   921                                  ;
   922                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   923                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   924                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   925                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   926                                  ;       given several possible starting values for CS:IP.
   927                                  ;
   928                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   929 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   930                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   931 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   932 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   933 00000025 B104                                            mov     cl,4                                            ;shift count
   934 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   935 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   936 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   937                                  ;
   938                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   939                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   940                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   941                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   942                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   943                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   944                                  ;
   945 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   946 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   947 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   948 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   949 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   950                                  ;
   951                                  ;       Our boot addressability is now set up according to the following diagram.
   952                                  ;
   953                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   954                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   955                                  ;                               |  256 = 100h bytes                             |
   956                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   957                                  ;                               |  Boot Sector (vstart=0100h)                   |
   958                                  ;                               |  1 sector = 512 = 200h bytes                  |
   959                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   960                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   961                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   962                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   963                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   964                                  ;                               |  2 sectors = 1024 = 400h bytes
   965                                  ;                       009400  +-----------------------------------------------+ DS:1900
   966                                  ;
   967                                  ;       On entry, DL indicates the drive being booted from.
   968                                  ;
   969 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   970                                  ;
   971                                  ;       Compute directory i/o buffer address.
   972                                  ;
   973 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   974 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   975 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   976 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   977                                  ;
   978                                  ;       Compute segment where os.com will be loaded.
   979                                  ;
   980 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   981 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   982 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   983 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   984                                  ;
   985                                  ;       Set the video mode to 80 column, 25 row, text.
   986                                  ;
   987 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   988 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   989                                  ;
   990                                  ;       Write a message to the console so we know we have our addressability established.
   991                                  ;
   992 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   993 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   994                                  ;
   995                                  ;       Initialize the number of directory sectors to search.
   996                                  ;
   997 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   998 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   999                                  ;
  1000                                  ;       Compute number of directory sectors and initialize overhead count.
  1001                                  ;
  1002 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
  1003 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
  1004 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
  1005 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
  1006                                  ;
  1007                                  ;       Compute directory entries per sector.
  1008                                  ;
  1009 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
  1010 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
  1011 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
  1012                                  ;
  1013                                  ;       Compute first logical directory sector and update overhead count.
  1014                                  ;
  1015 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
  1016 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
  1017 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
  1018 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
  1019 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
  1020 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
  1021                                  ;
  1022                                  ;       Read directory sector.
  1023                                  ;
  1024 0000008E B001                    .30                     mov     al,1                                            ;sector count
  1025 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
  1026 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
  1027 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
  1028                                  ;
  1029                                  ;       Setup variables to search this directory sector.
  1030                                  ;
  1031 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
  1032 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
  1033 000000A1 7603                                            jna     .40                                             ;no, continue
  1034 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
  1035 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
  1036 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
  1037 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
  1038                                  ;
  1039                                  ;       Loop through directory sectors searching for kernel program.
  1040                                  ;
  1041 000000B1 56                      .50                     push    si                                              ;save kernel name address
  1042 000000B2 57                                              push    di                                              ;save dir i/o buffer address
  1043 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
  1044 000000B6 FC                                              cld                                                     ;forward strings
  1045 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
  1046 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
  1047 000000BA 5E                                              pop     si                                              ;restore kernel name address
  1048 000000BB 7418                                            je      .60                                             ;exit loop if found
  1049 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
  1050 000000C1 48                                              dec     ax                                              ;decrement remaining entries
  1051 000000C2 75ED                                            jnz     .50                                             ;next entry
  1052                                  ;
  1053                                  ;       Repeat search if we are not at the end of the directory.
  1054                                  ;
  1055 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
  1056 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
  1057 000000CD 75BF                                            jne     .30                                             ;no, get next sector
  1058 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
  1059 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
  1060                                  ;
  1061                                  ;       If we find the kernel program in the directory, read the FAT.
  1062                                  ;
  1063 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
  1064 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
  1065 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
  1066 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
  1067 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
  1068 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
  1069                                  ;
  1070                                  ;       Get the starting cluster of the kernel program and target address.
  1071                                  ;
  1072 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
  1073 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
  1074                                  ;
  1075                                  ;       Read each program cluster into RAM.
  1076                                  ;
  1077 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
  1078 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
  1079 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
  1080 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
  1081 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
  1082 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
  1083 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
  1084 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
  1085 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
  1086                                  ;
  1087                                  ;       Update buffer pointer for next cluster.
  1088                                  ;
  1089 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
  1090 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
  1091 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
  1092 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
  1093 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
  1094                                  ;
  1095                                  ;       Compute next cluster number.
  1096                                  ;
  1097 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
  1098 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
  1099 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
  1100 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
  1101 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
  1102 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
  1103 00000120 83E701                                          and     di,1                                            ;get low bit
  1104 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
  1105 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
  1106 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
  1107                                  ;
  1108                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1109                                  ;
  1110 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
  1111 0000012E 7404                                            jz      .80                                             ;no, skip ahead
  1112 00000130 B104                                            mov     cl,4                                            ;shift count
  1113 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
  1114 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1115 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1116 0000013A 75B2                                            jne     .70                                             ;no, continue
  1117                                  ;
  1118                                  ;       Transfer control to the operating system program.
  1119                                  ;
  1120 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1121 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1122 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1123                                  ;
  1124                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1125                                  ;
  1126 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1127 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1128 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1129 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1130 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1131 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1132 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1133 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1134 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1135 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1136                                  ;
  1137                                  ;       Try maxtries times to read sector.
  1138                                  ;
  1139 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1140 00000160 53                      .10                     push    bx                                              ;save buffer address
  1141 00000161 51                                              push    cx                                              ;save retry count
  1142 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1143 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1144 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1145 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1146 0000016F 59                                              pop     cx                                              ;restore retry count
  1147 00000170 5B                                              pop     bx                                              ;restore buffer address
  1148 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1149 00000173 E2EB                                            loop    .10                                             ;retry
  1150                                  ;
  1151                                  ;       Handle disk error: convert to ASCII and store in error string.
  1152                                  ;
  1153 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1154 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1155 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1156 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1157 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1158 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1159 00000183 7203                                            jb      .20                                             ;continue if numeral
  1160 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1161 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1162 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1163 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1164 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1165 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1166 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1167                                  ;
  1168                                  ;       Wait for a key press.
  1169                                  ;
  1170 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1171 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1172 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1173 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1174 0000019F F4                                              hlt                                                     ;wait for interrupt
  1175 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1176                                  ;
  1177                                  ;       Reset the system.
  1178                                  ;
  1179 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1180 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1181 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1182 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1183 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1184                                  ;
  1185                                  ;       Display text message.
  1186                                  ;
  1187 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1188 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1189 000001AC 84C0                                            test    al,al                                           ;end of string?
  1190 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1191 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1192 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1193 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1194 000001B6 C3                      BootReturn              ret                                                     ;return
  1195                                  ;-----------------------------------------------------------------------------------------------------------------------
  1196                                  ;
  1197                                  ;       Constants
  1198                                  ;
  1199                                  ;-----------------------------------------------------------------------------------------------------------------------
  1200 000001B7 90                                              align   2
  1201 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1202 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1202 000001C3 4F4D               
  1203 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1203 000001CE 530D0A00           
  1204 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1204 000001DB 7220               
  1205 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1206 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1206 000001E9 6700               
  1207                                  ;-----------------------------------------------------------------------------------------------------------------------
  1208                                  ;
  1209                                  ;       Work Areas
  1210                                  ;
  1211                                  ;-----------------------------------------------------------------------------------------------------------------------
  1212 000001EB 90                                              align   2
  1213 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1214 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1215 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1216 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1217 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1218                                  wwReadCountCommand      equ     $                                               ;read count and command
  1219 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1220 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1221                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1222 000001F8 00                      wbDrive                 db      0                                               ;drive
  1223 000001F9 00                      wbHead                  db      0                                               ;head
  1224                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1225 000001FA 00                                              db      0                                               ;sector
  1226 000001FB 00                      wbTrack                 db      0                                               ;track
  1227 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1228 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1229                                  %endif
  1230                                  %ifdef BUILDPREP
  1231                                  ;=======================================================================================================================
  1232                                  ;
  1233                                  ;       Diskette Preparation Code
  1234                                  ;
  1235                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1236                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1237                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1238                                  ;
  1239                                  ;=======================================================================================================================
  1240                                  ;
  1241                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1242                                  ;
  1243                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1244                                                          call    BootPrint                                       ;display message
  1245                                  ;
  1246                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1247                                  ;
  1248                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1249                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1250                                                          jnz     .20                                             ;continue if key pressed
  1251                                                          sti                                                     ;enable interrupts
  1252                                                          hlt                                                     ;wait for interrupt
  1253                                                          jmp     .10                                             ;repeat
  1254                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1255                                                          je      .30                                             ;yes, branch
  1256                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1257                                                          jne     .10                                             ;no, repeat
  1258                                                          jmp     .120                                            ;yes, exit program
  1259                                  ;
  1260                                  ;       Display writing-sector message and patch the JMP instruction.
  1261                                  ;
  1262                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1263                                                          call    BootPrint                                       ;display message
  1264                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1265                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1266                                                          mov     [bx],ax                                         ;update the JMP instruction
  1267                                  ;
  1268                                  ;       Try to read the boot sector.
  1269                                  ;
  1270                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1271                                  .40                     push    cx                                              ;save remaining tries
  1272                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1273                                                          mov     dx,0                                            ;head zero, drive zero
  1274                                                          mov     cx,1                                            ;track zero, sector one
  1275                                                          mov     al,1                                            ;one sector
  1276                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1277                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1278                                                          pop     cx                                              ;restore remaining retries
  1279                                                          jnc     .50                                             ;skip ahead if successful
  1280                                                          loop    .40                                             ;try again
  1281                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1282                                                          jmp     .70                                             ;branch to error routine
  1283                                  ;
  1284                                  ;       Copy diskette parms from input buffer to output buffer.
  1285                                  ;
  1286                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1287                                                          add     si,11                                           ;skip over JMP and system ID
  1288                                                          mov     di,Boot                                         ;output buffer address
  1289                                                          add     di,11                                           ;skip over JMP and system ID
  1290                                                          mov     cx,19                                           ;length of diskette parameters
  1291                                                          cld                                                     ;forward string copies
  1292                                                          rep     movsb                                           ;copy diskette parameters
  1293                                  ;
  1294                                  ;       Try to write boot sector to diskette.
  1295                                  ;
  1296                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1297                                  .60                     push    cx                                              ;save remaining tries
  1298                                                          mov     bx,Boot                                         ;output buffer address
  1299                                                          mov     dx,0                                            ;head zero, drive zero
  1300                                                          mov     cx,1                                            ;track zero, sector one
  1301                                                          mov     al,1                                            ;one sector
  1302                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1303                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1304                                                          pop     cx                                              ;restore remaining retries
  1305                                                          jnc     .100                                            ;skip ahead if successful
  1306                                                          loop    .60                                             ;try again
  1307                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1308                                  ;
  1309                                  ;       Convert the error code to ASCII and display the error message.
  1310                                  ;
  1311                                  .70                     push    ax                                              ;save error code
  1312                                                          mov     al,ah                                           ;copy error code
  1313                                                          mov     ah,0                                            ;AX = error code
  1314                                                          mov     dl,10h                                          ;hexadecimal divisor
  1315                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1316                                                          or      ax,03030h                                       ;add ASCII zone digits
  1317                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1318                                                          jb      .80                                             ;yes, continue
  1319                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1320                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1321                                                          jb      .90                                             ;yes, continue
  1322                                                          add     al,7                                            ;no, make ASCII
  1323                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1324                                                          call    BootPrint                                       ;write error message
  1325                                                          pop     ax                                              ;restore error code
  1326                                  ;
  1327                                  ;       Display the completion message.
  1328                                  ;
  1329                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1330                                                          mov     al,ah                                           ;BIOS return code
  1331                                                          cmp     al,0                                            ;success?
  1332                                                          je      .110                                            ;yes, continue
  1333                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1334                                                          cmp     al,1                                            ;disk parameter error?
  1335                                                          je      .110                                            ;yes, continue
  1336                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1337                                                          cmp     al,2                                            ;address mark not found?
  1338                                                          je      .110                                            ;yes, continue
  1339                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1340                                                          cmp     al,3                                            ;protected disk?
  1341                                                          je      .110                                            ;yes, continue
  1342                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1343                                                          cmp     al,6                                            ;diskette removed?
  1344                                                          je      .110                                            ;yes, continue
  1345                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1346                                                          cmp     al,80H                                          ;drive timed out?
  1347                                                          je      .110                                            ;yes, continue
  1348                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1349                                  .110                    call    BootPrint                                       ;display result message
  1350                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1351                                                          int     021h                                            ;terminate DOS program
  1352                                                          ret                                                     ;return (should not execute)
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;
  1355                                  ;       Diskette Preparation Messages
  1356                                  ;
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1359                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1360                                                          db      13,10
  1361                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1362                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1363                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1364                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1365                                                          db      13,10,0
  1366                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1367                                                          db      13,10,0
  1368                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1369                                                          db      13,10,0
  1370                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1371                                                          db      13,10,0
  1372                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1373                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1374                                                          db      13,10,0
  1375                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1376                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1377                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1378                                                          db      13,10,"and retry."
  1379                                                          db      13,10,0
  1380                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1381                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1382                                                          db      13,10,"using another diskette."
  1383                                                          db      13,10,0
  1384                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1385                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1386                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1387                                                          db      13,10,0
  1388                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1389                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1390                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1391                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1392                                                          db      13,10,"is properly inserted in the diskette drive."
  1393                                                          db      13,10,0
  1394                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1395                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1396                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1397                                                          db      13,10,0
  1398                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1399                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1400                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1401                                                          db      13,10,0
  1402                                  wcPrepInBuf             equ     $
  1403                                  %endif
  1404                                  %ifdef BUILDDISK
  1405                                  ;=======================================================================================================================
  1406                                  ;
  1407                                  ;       File Allocation Tables
  1408                                  ;
  1409                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1410                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1411                                  ;       OS.COM file here is 7400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 7000h
  1412                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1413                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 58 clusters for OS.COM. The clusters used by
  1414                                  ;       OS.COM, then, will be cluster 2 through 59. The entry for cluster 59 is set to "0fffh" to indicate that it is
  1415                                  ;       the last cluster in the chain.
  1416                                  ;
  1417                                  ;       Every three bytes encode two FAT entries as follows:
  1418                                  ;
  1419                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1420                                  ;
  1421                                  ;=======================================================================================================================
  1422                                  ;-----------------------------------------------------------------------------------------------------------------------
  1423                                  ;
  1424                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                  section                 fat1                                                    ;first copy of FAT
  1428                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h                  ;0-3
  1429                                                          db      005h,060h,000h, 007h,080h,000h                  ;4-7
  1430                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h                  ;8-11
  1431                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h                  ;12-15
  1432                                                          db      011h,020h,001h, 013h,040h,001h                  ;16-19
  1433                                                          db      015h,060h,001h, 017h,080h,001h                  ;20-23
  1434                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h                  ;24-27
  1435                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h                  ;28-31
  1436                                                          db      021h,020h,002h, 023h,040h,002h                  ;32-35
  1437                                                          db      025h,060h,002h, 027h,080h,002h                  ;36-39
  1438                                                          db      029h,0A0h,002h, 02Bh,0C0h,002h                  ;40-43
  1439                                                          db      02Dh,0E0h,002h, 02Fh,000h,003h                  ;44-47
  1440                                                          db      031h,020h,003h, 033h,040h,003h                  ;48-51
  1441                                                          db      035h,060h,003h, 037h,080h,003h                  ;52-55
  1442                                                          db      039h,0A0h,003h, 03Bh,0F0h,0FFh                  ;56-59
  1443                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1444                                  ;-----------------------------------------------------------------------------------------------------------------------
  1445                                  ;
  1446                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1447                                  ;
  1448                                  ;-----------------------------------------------------------------------------------------------------------------------
  1449                                  section                 fat2                                                    ;second copy of FAT
  1450                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h                  ;0-3
  1451                                                          db      005h,060h,000h, 007h,080h,000h                  ;4-7
  1452                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h                  ;8-11
  1453                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h                  ;12-15
  1454                                                          db      011h,020h,001h, 013h,040h,001h                  ;16-19
  1455                                                          db      015h,060h,001h, 017h,080h,001h                  ;20-23
  1456                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h                  ;24-27
  1457                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h                  ;28-31
  1458                                                          db      021h,020h,002h, 023h,040h,002h                  ;32-35
  1459                                                          db      025h,060h,002h, 027h,080h,002h                  ;36-39
  1460                                                          db      029h,0A0h,002h, 02Bh,0C0h,002h                  ;40-43
  1461                                                          db      02Dh,0E0h,002h, 02Fh,000h,003h                  ;44-47
  1462                                                          db      031h,020h,003h, 033h,040h,003h                  ;48-51
  1463                                                          db      035h,060h,003h, 037h,080h,003h                  ;52-55
  1464                                                          db      039h,0A0h,003h, 03Bh,0F0h,0FFh                  ;56-59
  1465                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1466                                  ;-----------------------------------------------------------------------------------------------------------------------
  1467                                  ;
  1468                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1469                                  ;
  1470                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1471                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1472                                  ;       copy.
  1473                                  ;
  1474                                  ;-----------------------------------------------------------------------------------------------------------------------
  1475                                  section                 dir                                                     ;diskette directory
  1476                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1477                                                          db      020h                                            ;attribute (archive bit set)
  1478                                                          times   10 db 0                                         ;unused
  1479                                                          dw      0h                                              ;time
  1480                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1481                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1482                                                          dw      2                                               ;first cluster
  1483                                                          dd      07400h                                          ;file size
  1484                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1485                                  %endif
  1486                                  %ifdef BUILDCOM
  1487                                  ;=======================================================================================================================
  1488                                  ;
  1489                                  ;       OS.COM
  1490                                  ;
  1491                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1492                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1493                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1494                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1495                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1496                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1497                                  ;
  1498                                  ;       Our loader addressability is set up according to the following diagram.
  1499                                  ;
  1500                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1501                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1502                                  ;                               |  256 = 100h bytes                             |
  1503                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1504                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1505                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1506                                  ;                       007e00  +-----------------------------------------------+
  1507                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1508                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1509                                  ;                               |                                               |
  1510                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1511                                  ;                               |                                               |
  1512                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1513                                  ;                               |  Loader Code                                  |
  1514                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1515                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1516                                  ;
  1517                                  ;=======================================================================================================================
  1518                                  ;-----------------------------------------------------------------------------------------------------------------------
  1519                                  ;
  1520                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1521                                  ;
  1522                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1523                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1524                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1525                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1526                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1527                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1528                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1529                                  ;       registers.
  1530                                  ;
  1531                                  ;-----------------------------------------------------------------------------------------------------------------------
  1532                                                          cpu     8086                                            ;assume minimal CPU
  1533                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1534                                                          bits    16                                              ;this is 16-bit code
  1535                                  Loader                  push    cs                                              ;use the code segment
  1536                                                          pop     ds                                              ;...as our data segment
  1537                                                          push    cs                                              ;use the code segment
  1538                                                          pop     es                                              ;...as our extra segment
  1539                                  ;
  1540                                  ;       Write a message to the console so we know we have our addressability established.
  1541                                  ;
  1542                                                          mov     si,czStartingMsg                                ;starting message
  1543                                                          call    PutTTYString                                    ;display loader message
  1544                                  ;
  1545                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1546                                  ;
  1547                                                          call    GetCPUType                                      ;AL = cpu type
  1548                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1549                                                          cmp     al,3                                            ;80386+?
  1550                                                          jb      LoaderExit                                      ;no, exit with error message
  1551                                                          cpu     386                                             ;allow 80386 instructions
  1552                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1553                                                          call    PutTTYString                                    ;display message
  1554                                  ;
  1555                                  ;       Make sure we have enough available RAM below the EBDA for the kernel
  1556                                  ;
  1557                                                          push    ds                                              ;save data segment register
  1558                                                          push    0                                               ;load base memory address...
  1559                                                          pop     ds                                              ;...into data segment register
  1560                                                          mov     ax,[wwROMMemSize]                               ;load available memory below EBDA
  1561                                                          pop     ds                                              ;restore data segment register
  1562                                                          cmp     ax,EKRNMINRAMKB                                 ;minimum RAM KB available?
  1563                                                          jnb     .10                                             ;yes, continue
  1564                                                          mov     si,czMemErrorMsg                                ;memory size error message
  1565                                                          jmp     LoaderExit.10                                   ;exit with error message
  1566                                  .10                     mov     si,czMemOKMsg                                   ;memory ok message
  1567                                                          call    PutTTYString                                    ;display message
  1568                                  ;
  1569                                  ;       Make sure we have enough extended RAM above 1MB for the heap.
  1570                                  ;
  1571                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  1572                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  1573                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  1574                                                          mov     ah,al                                           ;save extended RAM high
  1575                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  1576                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  1577                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  1578                                                          cmp     ax,EKRNMINEXTKB                                 ;minimum extended RAM KB?
  1579                                                          jnb     .20                                             ;yes, continue
  1580                                                          mov     si,czExtErrorMsg                                ;extended memory error message
  1581                                                          jmp     LoaderExit.10                                   ;display message
  1582                                  .20                     mov     si,czExtOKMsg                                   ;extended memory ok message
  1583                                                          call    PutTTYString                                    ;display message
  1584                                  ;
  1585                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1586                                  ;
  1587                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1588                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1589                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1590                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1591                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1592                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1593                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1594                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1595                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1596                                                          call    PutTTYString                                    ;display message
  1597                                  ;
  1598                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1599                                  ;
  1600                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1601                                                          pop     es                                              ;... as target segment
  1602                                                          xor     di,di                                           ;ES:DI = target address
  1603                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1604                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1605                                                          cld                                                     ;forward strings
  1606                                                          rep     movsb                                           ;copy kernel image
  1607                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1608                                                          call    PutTTYString                                    ;display message
  1609                                  ;
  1610                                  ;       Switch to protected mode.
  1611                                  ;
  1612                                                          xor     si,si                                           ;ES:SI = gdt addr
  1613                                                          mov     ss,si                                           ;protected mode ss
  1614                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1615                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1616                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1617                                                          mov     dx,001Fh                                        ;outer delay loop count
  1618                                  .30                     mov     cx,0FFFFh                                       ;inner delay loop count
  1619                                                          loop    $                                               ;wait out pending interrupts
  1620                                                          dec     dx                                              ;restore outer loop count
  1621                                                          jnz     .30                                             ;continue outer loop
  1622                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1623                                  ;
  1624                                  ;       Enable hardware and maskable interrupts.
  1625                                  ;
  1626                                                          xor     al,al                                           ;enable all registers code
  1627                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1628                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1629                                                          sti                                                     ;enable maskable interrupts
  1630                                  ;
  1631                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1632                                  ;
  1633                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1634                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1635                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       Routine:        LoaderExit
  1639                                  ;
  1640                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1641                                  ;
  1642                                  ;       In:             DS:SI   string address
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  LoaderExit.10           call    PutTTYString                                    ;display error message
  1646                                                          mov     si,czRestartMsg                                 ;press key to restart message
  1647                                  LoaderExit              call    PutTTYString                                    ;display error message
  1648                                  ;
  1649                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1650                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1651                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1652                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1653                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1654                                  ;
  1655                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1656                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1657                                                          jnz     .40                                             ;exit if key pressed
  1658                                                          sti                                                     ;enable maskable interrupts
  1659                                                          hlt                                                     ;wait for interrupt
  1660                                                          jmp     .30                                             ;repeat until keypress
  1661                                  ;
  1662                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1663                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1664                                  ;       HLT until the system resets.
  1665                                  ;
  1666                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1667                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1668                                  .50                     sti                                                     ;enable maskable interrupts
  1669                                                          hlt                                                     ;stop until reset, int, nmi
  1670                                                          jmp     .50                                             ;loop until restart kicks in
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  ;
  1673                                  ;       Routine:        GetCPUType
  1674                                  ;
  1675                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1676                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1677                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1678                                  ;
  1679                                  ;       Out:            AX      0 = 808x, v20, etc.
  1680                                  ;                               1 = 80186
  1681                                  ;                               2 = 80286
  1682                                  ;                               3 = 80386
  1683                                  ;
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685                                  GetCPUType              mov     al,1                                            ;AL = 1
  1686                                                          mov     cl,32                                           ;shift count
  1687                                                          shr     al,cl                                           ;try a 32-bit shift
  1688                                                          or      al,al                                           ;did the shift happen?
  1689                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1690                                                          cpu     186
  1691                                                          push    sp                                              ;save stack pointer
  1692                                                          pop     cx                                              ;...into cx
  1693                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1694                                                          jne     .10                                             ;yes, cpu is 80186
  1695                                                          cpu     286
  1696                                                          inc     ax                                              ;AX = 2
  1697                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1698                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1699                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1700                                                          jz      .10                                             ;yes, cpu is 80286
  1701                                                          inc     ax                                              ;AX = 3
  1702                                  .10                     ret                                                     ;return
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       Routine:        PutTTYString
  1706                                  ;
  1707                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1708                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1709                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1710                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1711                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1712                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1713                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1714                                  ;                       to LODSB is not needed.
  1715                                  ;
  1716                                  ;       In:             DS:SI   address of string
  1717                                  ;
  1718                                  ;       Out:            DF      0
  1719                                  ;                       ZF      1
  1720                                  ;                       AL      0
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  PutTTYString            cld                                                     ;forward strings
  1724                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1725                                                          test    al,al                                           ;end of string?
  1726                                                          jz      .20                                             ;... yes, exit our loop
  1727                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1728                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1729                                                          jmp     .10                                             ;repeat until done
  1730                                  .20                     ret                                                     ;return
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       Loader Data
  1734                                  ;
  1735                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1736                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1737                                  ;
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                                          align   2
  1740                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1741                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1742                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1743                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1744                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1745                                  czRestartMsg            db      "Please press any key to restart the computer.",13,10,0
  1746                                  czMemErrorMsg           db      "The operating system kernel requires at least 32KB of available RAM.",13,10,0
  1747                                  czExtErrorMsg           db      "The operating system requires at least 31MB of extended RAM.",13,10,0
  1748                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1749                                  czMemOKMsg              db      "RAM OK",13,10,0                                ;RAM ok message
  1750                                  czExtOKMsg              db      "Extended RAM OK",13,10,0                       ;Extended RAM ok message
  1751                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1752                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1753                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1754                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1755                                  ;=======================================================================================================================
  1756                                  ;
  1757                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1758                                  ;
  1759                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1760                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1761                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1762                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1763                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1764                                  ;
  1765                                  ;=======================================================================================================================
  1766                                  ;=======================================================================================================================
  1767                                  ;
  1768                                  ;       Kernel Tables
  1769                                  ;
  1770                                  ;=======================================================================================================================
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1774                                  ;
  1775                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1776                                  ;       first descriptor must be all nulls.
  1777                                  ;
  1778                                  ;       6   5         4         3         2         1         0
  1779                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1780                                  ;       ----------------------------------------------------------------
  1781                                  ;       h......hffffmmmma......ab......................bn..............n
  1782                                  ;
  1783                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1784                                  ;               ffff                                                            flags
  1785                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1786                                  ;                       a......a                                                access
  1787                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1788                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1789                                  ;
  1790                                  ;       00000000                                                                all areas have base addresses below 2^24
  1791                                  ;               0...                                                            single-byte size granularity
  1792                                  ;               1...                                                            4-kilobyte size granularity
  1793                                  ;               .0..                                                            16-bit default for code segments
  1794                                  ;               .1..                                                            32-bit default for code segments
  1795                                  ;               ..0.                                                            intel-reserved; should be zero
  1796                                  ;               ...0                                                            available for operating system use
  1797                                  ;                   0000                                                        segment is less than 2^16 in size
  1798                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1799                                  ;                       1.......                                                segment is present in memory
  1800                                  ;                       .00.....                                                segment is of privilege level 0
  1801                                  ;                       ...0....                                                segment is of system or gate type
  1802                                  ;                       ...00010                                                local decriptor table (LDT)
  1803                                  ;                       ...01001                                                task state segment (TSS) available
  1804                                  ;                       ...01011                                                task state segment (TSS) busy
  1805                                  ;                       ...10...                                                data segment
  1806                                  ;                       ...10011                                                writable data (accessed)
  1807                                  ;                       ...11...                                                code segment
  1808                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1809                                  ;
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  section                 gdt                                                     ;global descriptor table
  1812                                                          dq      0000000000000000h                               ;00 required null selector
  1813                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1814                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1815                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1816                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1817                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1818                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1819                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1820                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1821                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1822                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1823                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1824                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1825                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1826                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1830                                  ;
  1831                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1832                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1833                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1834                                  ;
  1835                                  ;       6   5         4         3         2         1         0
  1836                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1837                                  ;       ----------------------------------------------------------------
  1838                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1839                                  ;
  1840                                  ;       h...h   high-order offset (bits 16-31)
  1841                                  ;       P       present (0=unused interrupt)
  1842                                  ;       zz      descriptor privilege level
  1843                                  ;       S       storage segment (must be zero for IDT)
  1844                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1845                                  ;       S...S   handling code selector in GDT
  1846                                  ;       l...l   lo-order offset (bits 0-15)
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  section                 idt                                                     ;interrupt descriptor table
  1850                                                          mint    dividebyzero                                    ;00 divide by zero
  1851                                                          mint    singlestep                                      ;01 single step
  1852                                                          mint    nmi                                             ;02 non-maskable
  1853                                                          mint    break                                           ;03 break
  1854                                                          mint    into                                            ;04 into
  1855                                                          mint    bounds                                          ;05 bounds
  1856                                                          mint    badopcode                                       ;06 bad op code
  1857                                                          mint    nocoproc                                        ;07 no coprocessor
  1858                                                          mint    doublefault                                     ;08 double-fault
  1859                                                          mint    operand                                         ;09 operand
  1860                                                          mint    badtss                                          ;0a bad TSS
  1861                                                          mint    notpresent                                      ;0b not-present
  1862                                                          mint    stacklimit                                      ;0c stack limit
  1863                                                          mint    protection                                      ;0d general protection fault
  1864                                                          mint    int14                                           ;0e (reserved)
  1865                                                          mint    int15                                           ;0f (reserved)
  1866                                                          mint    coproccalc                                      ;10 (reserved)
  1867                                                          mint    int17                                           ;11 (reserved)
  1868                                                          mint    int18                                           ;12 (reserved)
  1869                                                          mint    int19                                           ;13 (reserved)
  1870                                                          mint    int20                                           ;14 (reserved)
  1871                                                          mint    int21                                           ;15 (reserved)
  1872                                                          mint    int22                                           ;16 (reserved)
  1873                                                          mint    int23                                           ;17 (reserved)
  1874                                                          mint    int24                                           ;18 (reserved)
  1875                                                          mint    int25                                           ;19 (reserved)
  1876                                                          mint    int26                                           ;1a (reserved)
  1877                                                          mint    int27                                           ;1b (reserved)
  1878                                                          mint    int28                                           ;1c (reserved)
  1879                                                          mint    int29                                           ;1d (reserved)
  1880                                                          mint    int30                                           ;1e (reserved)
  1881                                                          mint    int31                                           ;1f (reserved)
  1882                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1883                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1884                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1885                                                          mtrap   com2                                            ;23 IRQ3 com2
  1886                                                          mtrap   com1                                            ;24 IRQ4 com1
  1887                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1888                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1889                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1890                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1891                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1892                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1893                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1894                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1895                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1896                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1897                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1898                                                          mtrap   svc                                             ;30 OS services
  1899                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1900                                  ;=======================================================================================================================
  1901                                  ;
  1902                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1903                                  ;
  1904                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1905                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1906                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1907                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1908                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1909                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1910                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1911                                  ;
  1912                                  ;=======================================================================================================================
  1913                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1914                                                          cpu     386                                             ;allow 80386 instructions
  1915                                                          bits    32                                              ;this is 32-bit code
  1916                                  ;=======================================================================================================================
  1917                                  ;
  1918                                  ;       CPU Interrupt Handlers
  1919                                  ;
  1920                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1921                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1922                                  ;
  1923                                  ;=======================================================================================================================
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                  ;
  1926                                  ;       INT0    Divide By Zero
  1927                                  ;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                                          menter  dividebyzero                                    ;divide by zero
  1930                                                          push    0                                               ;store interrupt nbr
  1931                                                          push    czIntDivideByZero                               ;store message offset
  1932                                                          jmp     ReportInterrupt                                 ;report interrupt
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                  ;
  1935                                  ;       INT1    Single Step
  1936                                  ;
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                                          menter  singlestep                                      ;single step
  1939                                                          push    1                                               ;store interrupt nbr
  1940                                                          push    czIntSingleStep                                 ;store message offset
  1941                                                          jmp     ReportInterrupt                                 ;report interrupt
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                  ;
  1944                                  ;       INT2    Non-Maskable Interrupt
  1945                                  ;
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                                          menter  nmi                                             ;non-maskable
  1948                                                          push    2                                               ;store interrupt nbr
  1949                                                          push    czIntNonMaskable                                ;store message offset
  1950                                                          jmp     ReportInterrupt                                 ;report interrupt
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                  ;
  1953                                  ;       INT3    Break
  1954                                  ;
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                                          menter  break                                           ;break
  1957                                                          push    3                                               ;store interrupt nbr
  1958                                                          push    czIntBreak                                      ;store message offset
  1959                                                          jmp     ReportInterrupt                                 ;report interrupt
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                  ;
  1962                                  ;       INT4    Into
  1963                                  ;
  1964                                  ;-----------------------------------------------------------------------------------------------------------------------
  1965                                                          menter  into                                            ;into
  1966                                                          push    4                                               ;store interrupt nbr
  1967                                                          push    czIntInto                                       ;store message offset
  1968                                                          jmp     ReportInterrupt                                 ;report interrupt
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                  ;
  1971                                  ;       INT5    Bounds
  1972                                  ;
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                                          menter  bounds                                          ;bounds
  1975                                                          push    5                                               ;store interrupt nbr
  1976                                                          push    czIntBounds                                     ;store message offset
  1977                                                          jmp     ReportInterrupt                                 ;report interrupt
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                  ;
  1980                                  ;       INT6    Bad Operation Code
  1981                                  ;
  1982                                  ;-----------------------------------------------------------------------------------------------------------------------
  1983                                                          menter  badopcode                                       ;bad opcode interrupt
  1984                                                          push    6                                               ;store interrupt nbr
  1985                                                          push    czIntBadOpCode                                  ;store message offset
  1986                                                          jmp     ReportInterrupt                                 ;report interrupt
  1987                                  ;-----------------------------------------------------------------------------------------------------------------------
  1988                                  ;
  1989                                  ;       INT7    No Coprocessor
  1990                                  ;
  1991                                  ;-----------------------------------------------------------------------------------------------------------------------
  1992                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1993                                                          push    7                                               ;store interrupt nbr
  1994                                                          push    czIntNoCoprocessor                              ;store message offset
  1995                                                          jmp     ReportInterrupt                                 ;report interrupt
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                  ;
  1998                                  ;       INT8    Double Fault
  1999                                  ;
  2000                                  ;-----------------------------------------------------------------------------------------------------------------------
  2001                                                          menter  doublefault                                     ;doublefault interrupt
  2002                                                          push    8                                               ;store interrupt nbr
  2003                                                          push    czIntDoubleFault                                ;store message offset
  2004                                                          jmp     ReportInterrupt                                 ;report interrupt
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                  ;
  2007                                  ;       INT9    Operand
  2008                                  ;
  2009                                  ;-----------------------------------------------------------------------------------------------------------------------
  2010                                                          menter  operand                                         ;operand interrupt
  2011                                                          push    9                                               ;store interrupt nbr
  2012                                                          push    czIntOperand                                    ;store message offset
  2013                                                          jmp     ReportInterrupt                                 ;report interrupt
  2014                                  ;-----------------------------------------------------------------------------------------------------------------------
  2015                                  ;
  2016                                  ;       INT10   Bad Task State Segment
  2017                                  ;
  2018                                  ;-----------------------------------------------------------------------------------------------------------------------
  2019                                                          menter  badtss                                          ;bad TSS interrupt
  2020                                                          push    10                                              ;store interrupt nbr
  2021                                                          push    czIntBadTSS                                     ;store message offset
  2022                                                          jmp     ReportInterrupt                                 ;report interrupt
  2023                                  ;-----------------------------------------------------------------------------------------------------------------------
  2024                                  ;
  2025                                  ;       INT11   Not Present
  2026                                  ;
  2027                                  ;-----------------------------------------------------------------------------------------------------------------------
  2028                                                          menter  notpresent                                      ;not present interrupt
  2029                                                          push    11                                              ;store interrupt nbr
  2030                                                          push    czIntNotPresent                                 ;store message offset
  2031                                                          jmp     ReportInterrupt                                 ;report interrupt
  2032                                  ;-----------------------------------------------------------------------------------------------------------------------
  2033                                  ;
  2034                                  ;       INT12   Stack Limit
  2035                                  ;
  2036                                  ;-----------------------------------------------------------------------------------------------------------------------
  2037                                                          menter  stacklimit                                      ;stack limit interrupt
  2038                                                          push    12                                              ;store interrupt nbr
  2039                                                          push    czIntStackLimit                                 ;store message offset
  2040                                                          jmp     ReportInterrupt                                 ;report interrupt
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  ;
  2043                                  ;       INT13   General Protection Fault
  2044                                  ;
  2045                                  ;-----------------------------------------------------------------------------------------------------------------------
  2046                                                          menter  protection                                      ;protection fault interrupt
  2047                                                          push    13                                              ;store interrupt nbr
  2048                                                          push    czIntProtection                                 ;store message offset
  2049                                                          jmp     ReportInterrupt                                 ;report interrupt
  2050                                  ;-----------------------------------------------------------------------------------------------------------------------
  2051                                  ;
  2052                                  ;       INT14   Reserved
  2053                                  ;
  2054                                  ;-----------------------------------------------------------------------------------------------------------------------
  2055                                                          menter  int14                                           ;(reserved)
  2056                                                          push    14                                              ;store interrupt nbr
  2057                                                          push    czIntReserved                                   ;store message offset
  2058                                                          jmp     ReportInterrupt                                 ;report interrupt
  2059                                  ;-----------------------------------------------------------------------------------------------------------------------
  2060                                  ;
  2061                                  ;       INT15   Reserved
  2062                                  ;
  2063                                  ;-----------------------------------------------------------------------------------------------------------------------
  2064                                                          menter  int15                                           ;(reserved)
  2065                                                          push    15                                              ;store interrupt nbr
  2066                                                          push    czIntReserved                                   ;store message offset
  2067                                                          jmp     ReportInterrupt                                 ;report interrupt
  2068                                  ;-----------------------------------------------------------------------------------------------------------------------
  2069                                  ;
  2070                                  ;       INT16   Coprocessor Calculation
  2071                                  ;
  2072                                  ;-----------------------------------------------------------------------------------------------------------------------
  2073                                                          menter  coproccalc                                      ;coprocessor calculation
  2074                                                          push    16                                              ;store interrupt nbr
  2075                                                          push    czIntCoprocessorCalc                            ;store message offset
  2076                                                          jmp     ReportInterrupt                                 ;report interrupt
  2077                                  ;-----------------------------------------------------------------------------------------------------------------------
  2078                                  ;
  2079                                  ;       INT17   Reserved
  2080                                  ;
  2081                                  ;-----------------------------------------------------------------------------------------------------------------------
  2082                                                          menter  int17                                           ;(reserved)
  2083                                                          push    17                                              ;store interrupt nbr
  2084                                                          push    czIntReserved                                   ;store message offset
  2085                                                          jmp     ReportInterrupt                                 ;report interrupt
  2086                                  ;-----------------------------------------------------------------------------------------------------------------------
  2087                                  ;
  2088                                  ;       INT18   Reserved
  2089                                  ;
  2090                                  ;-----------------------------------------------------------------------------------------------------------------------
  2091                                                          menter  int18                                           ;(reserved)
  2092                                                          push    18                                              ;store interrupt nbr
  2093                                                          push    czIntReserved                                   ;store message offset
  2094                                                          jmp     ReportInterrupt                                 ;report interrupt
  2095                                  ;-----------------------------------------------------------------------------------------------------------------------
  2096                                  ;
  2097                                  ;       INT19   Reserved
  2098                                  ;
  2099                                  ;-----------------------------------------------------------------------------------------------------------------------
  2100                                                          menter  int19                                           ;(reserved)
  2101                                                          push    19                                              ;store interrupt nbr
  2102                                                          push    czIntReserved                                   ;store message offset
  2103                                                          jmp     ReportInterrupt                                 ;report interrupt
  2104                                  ;-----------------------------------------------------------------------------------------------------------------------
  2105                                  ;
  2106                                  ;       INT20   Reserved
  2107                                  ;
  2108                                  ;-----------------------------------------------------------------------------------------------------------------------
  2109                                                          menter  int20                                           ;(reserved)
  2110                                                          push    20                                              ;store interrupt nbr
  2111                                                          push    czIntReserved                                   ;store message offset
  2112                                                          jmp     ReportInterrupt                                 ;report interrupt
  2113                                  ;-----------------------------------------------------------------------------------------------------------------------
  2114                                  ;
  2115                                  ;       INT21   Reserved
  2116                                  ;
  2117                                  ;-----------------------------------------------------------------------------------------------------------------------
  2118                                                          menter  int21                                           ;(reserved)
  2119                                                          push    21                                              ;store interrupt nbr
  2120                                                          push    czIntReserved                                   ;store message offset
  2121                                                          jmp     ReportInterrupt                                 ;report interrupt
  2122                                  ;-----------------------------------------------------------------------------------------------------------------------
  2123                                  ;
  2124                                  ;       INT22   Reserved
  2125                                  ;
  2126                                  ;-----------------------------------------------------------------------------------------------------------------------
  2127                                                          menter  int22                                           ;(reserved)
  2128                                                          push    22                                              ;store interrupt nbr
  2129                                                          push    czIntReserved                                   ;store message offset
  2130                                                          jmp     ReportInterrupt                                 ;report interrupt
  2131                                  ;-----------------------------------------------------------------------------------------------------------------------
  2132                                  ;
  2133                                  ;       INT23   Reserved
  2134                                  ;
  2135                                  ;-----------------------------------------------------------------------------------------------------------------------
  2136                                                          menter  int23                                           ;(reserved)
  2137                                                          push    23                                              ;store interrupt nbr
  2138                                                          push    czIntReserved                                   ;store message offset
  2139                                                          jmp     ReportInterrupt                                 ;report interrupt
  2140                                  ;-----------------------------------------------------------------------------------------------------------------------
  2141                                  ;
  2142                                  ;       INT24   Reserved
  2143                                  ;
  2144                                  ;-----------------------------------------------------------------------------------------------------------------------
  2145                                                          menter  int24                                           ;(reserved)
  2146                                                          push    24                                              ;store interrupt nbr
  2147                                                          push    czIntReserved                                   ;store message offset
  2148                                                          jmp     ReportInterrupt                                 ;report interrupt
  2149                                  ;-----------------------------------------------------------------------------------------------------------------------
  2150                                  ;
  2151                                  ;       INT25   Reserved
  2152                                  ;
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154                                                          menter  int25                                           ;(reserved)
  2155                                                          push    25                                              ;store interrupt nbr
  2156                                                          push    czIntReserved                                   ;store message offset
  2157                                                          jmp     ReportInterrupt                                 ;report interrupt
  2158                                  ;-----------------------------------------------------------------------------------------------------------------------
  2159                                  ;
  2160                                  ;       INT26   Reserved
  2161                                  ;
  2162                                  ;-----------------------------------------------------------------------------------------------------------------------
  2163                                                          menter  int26                                           ;(reserved)
  2164                                                          push    26                                              ;store interrupt nbr
  2165                                                          push    czIntReserved                                   ;store message offset
  2166                                                          jmp     ReportInterrupt                                 ;report interrupt
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  ;
  2169                                  ;       INT27   Reserved
  2170                                  ;
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                                          menter  int27                                           ;(reserved)
  2173                                                          push    27                                              ;store interrupt nbr
  2174                                                          push    czIntReserved                                   ;store message offset
  2175                                                          jmp     ReportInterrupt                                 ;report interrupt
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                  ;
  2178                                  ;       INT28   Reserved
  2179                                  ;
  2180                                  ;-----------------------------------------------------------------------------------------------------------------------
  2181                                                          menter  int28                                           ;(reserved)
  2182                                                          push    28                                              ;store interrupt nbr
  2183                                                          push    czIntReserved                                   ;store message offset
  2184                                                          jmp     ReportInterrupt                                 ;report interrupt
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186                                  ;
  2187                                  ;       INT29   Reserved
  2188                                  ;
  2189                                  ;-----------------------------------------------------------------------------------------------------------------------
  2190                                                          menter  int29                                           ;(reserved)
  2191                                                          push    29                                              ;store interrupt nbr
  2192                                                          push    czIntReserved                                   ;store message offset
  2193                                                          jmp     ReportInterrupt                                 ;report interrupt
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;       INT30   Reserved
  2197                                  ;
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                                          menter  int30                                           ;(reserved)
  2200                                                          push    30                                              ;store interrupt nbr
  2201                                                          push    czIntReserved                                   ;store message offset
  2202                                                          jmp     ReportInterrupt                                 ;report interrupt
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                  ;
  2205                                  ;       INT31   Reserved
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                                          menter  int31                                           ;(reserved)
  2209                                                          push    31                                              ;store interrupt nbr
  2210                                                          push    czIntReserved                                   ;store message offset
  2211                                                          jmp     ReportInterrupt                                 ;report interrupt
  2212                                  ;-----------------------------------------------------------------------------------------------------------------------
  2213                                  ;
  2214                                  ;       Routine:        ReportInterrupt
  2215                                  ;
  2216                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2217                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2218                                  ;
  2219                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2220                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2221                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2222                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2223                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2224                                  ;
  2225                                  ;       Out:            N/A             This routine does not exit.
  2226                                  ;
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2229                                                          push    es                                              ;save ES at time of interrupt
  2230                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2231                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2232                                  ;
  2233                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2234                                  ;
  2235                                  ;                       [EBP+56]        EFLAGS
  2236                                  ;                       [EBP+52]        CS
  2237                                  ;                       [EBP+48]        EIP
  2238                                  ;                       [EBP+44]        interrupt number (0-31)
  2239                                  ;                       [EBP+40]        error message address
  2240                                  ;                       [EBP+36]        DS
  2241                                  ;                       [EBP+32]        ES
  2242                                  ;                       [EBP+28]        EAX
  2243                                  ;                       [EBP+24]        ECX
  2244                                  ;                       [EBP+20]        EDX
  2245                                  ;                       [EBP+16]        EBX
  2246                                  ;                       [EBP+12]        ESP
  2247                                  ;                       [EBP+8]         EBP
  2248                                  ;                       [EBP+4]         ESI
  2249                                  ;                       [EBP+0]         EDI
  2250                                  ;
  2251                                                          push    cs                                              ;load code selector ...
  2252                                                          pop     ds                                              ;... into DS
  2253                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2254                                                          pop     es                                              ;... into ES
  2255                                  ;
  2256                                  ;       Display the interrupt report boundary box
  2257                                  ;
  2258                                                          mov     cl,13                                           ;column
  2259                                                          mov     ch,6                                            ;row
  2260                                                          mov     dl,50                                           ;width
  2261                                                          mov     dh,8                                            ;height
  2262                                                          mov     bh,07h                                          ;attribute
  2263                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2264                                  ;
  2265                                  ;       Display the report header
  2266                                  ;
  2267                                                          mov     cl,15                                           ;column
  2268                                                          mov     ch,7                                            ;row
  2269                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2270                                                          call    SetConsoleString                                ;draw text string
  2271                                  ;
  2272                                  ;       Display the interrupt description label
  2273                                  ;
  2274                                                          mov     cl,15                                           ;column
  2275                                                          mov     ch,8                                            ;row
  2276                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2277                                                          call    SetConsoleString                                ;draw text string
  2278                                  ;
  2279                                  ;       Display the interrupt number
  2280                                  ;
  2281                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2282                                                          mov     cl,26                                           ;column
  2283                                                          mov     ch,8                                            ;row
  2284                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2285                                  ;
  2286                                  ;       Display the interrupt name
  2287                                  ;
  2288                                                          mov     cl,29                                           ;column
  2289                                                          mov     ch,8                                            ;row
  2290                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2291                                                          call    SetConsoleString                                ;display interrupt description
  2292                                  ;
  2293                                  ;       Display the register values header
  2294                                  ;
  2295                                                          mov     cl,15                                           ;column
  2296                                                          mov     ch,10                                           ;row
  2297                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2298                                                          call    SetConsoleString                                ;draw text string
  2299                                  ;
  2300                                  ;       Display the EAX register label and value
  2301                                  ;
  2302                                                          mov     cl,15                                           ;column
  2303                                                          mov     ch,11                                           ;row
  2304                                                          mov     esi,czIntEAX                                    ;register EAX label
  2305                                                          call    SetConsoleString                                ;draw label
  2306                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2307                                                          mov     cl,19                                           ;column
  2308                                                          mov     ch,11                                           ;row
  2309                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2310                                  ;
  2311                                  ;       Display the ECX register label and value
  2312                                  ;
  2313                                                          mov     cl,15                                           ;column
  2314                                                          mov     ch,12                                           ;row
  2315                                                          mov     esi,czIntECX                                    ;label
  2316                                                          call    SetConsoleString                                ;draw label
  2317                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2318                                                          mov     cl,19                                           ;column
  2319                                                          mov     ch,12                                           ;row
  2320                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2321                                  ;
  2322                                  ;       Display the EDX register label and value
  2323                                  ;
  2324                                                          mov     cl,15                                           ;column
  2325                                                          mov     ch,13                                           ;row
  2326                                                          mov     esi,czIntEDX                                    ;label
  2327                                                          call    SetConsoleString                                ;draw label
  2328                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2329                                                          mov     cl,19                                           ;column
  2330                                                          mov     ch,13                                           ;row
  2331                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2332                                  ;
  2333                                  ;       Display the EBX register label and value
  2334                                  ;
  2335                                                          mov     cl,15                                           ;column
  2336                                                          mov     ch,14                                           ;row
  2337                                                          mov     esi,czIntEBX                                    ;label
  2338                                                          call    SetConsoleString                                ;draw label
  2339                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2340                                                          mov     cl,19                                           ;column
  2341                                                          mov     ch,14                                           ;row
  2342                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2343                                  ;
  2344                                  ;       Display the ESI register label and value
  2345                                  ;
  2346                                                          mov     cl,29                                           ;column
  2347                                                          mov     ch,11                                           ;row
  2348                                                          mov     esi,czIntESI                                    ;label
  2349                                                          call    SetConsoleString                                ;draw label
  2350                                                          mov     eax,[ebp+4]                                     ;ESI
  2351                                                          mov     cl,33                                           ;column
  2352                                                          mov     ch,11                                           ;row
  2353                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2354                                  ;
  2355                                  ;       Display the EDI register label and value
  2356                                  ;
  2357                                                          mov     cl,29                                           ;column
  2358                                                          mov     ch,12                                           ;row
  2359                                                          mov     esi,czIntEDI                                    ;label
  2360                                                          call    SetConsoleString                                ;draw label
  2361                                                          mov     eax,[ebp+0]                                     ;EDI
  2362                                                          mov     cl,33                                           ;column
  2363                                                          mov     ch,12                                           ;row
  2364                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2365                                  ;
  2366                                  ;       Display the EBP register label and value
  2367                                  ;
  2368                                                          mov     cl,29                                           ;column
  2369                                                          mov     ch,13                                           ;row
  2370                                                          mov     esi,czIntEBP                                    ;label
  2371                                                          call    SetConsoleString                                ;draw label
  2372                                                          mov     eax,[ebp+8]                                     ;EBP
  2373                                                          mov     cl,33                                           ;column
  2374                                                          mov     ch,13                                           ;row
  2375                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2376                                  ;
  2377                                  ;       Display the DS register label and value
  2378                                  ;
  2379                                                          mov     cl,42                                           ;column
  2380                                                          mov     ch,11                                           ;row
  2381                                                          mov     esi,czIntDS                                     ;label
  2382                                                          call    SetConsoleString                                ;draw label
  2383                                                          xor     eax,eax                                         ;zero register
  2384                                                          mov     ax,[ebp+36]                                     ;DS
  2385                                                          mov     cl,46                                           ;column
  2386                                                          mov     ch,11                                           ;row
  2387                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2388                                  ;
  2389                                  ;       Display the ES register label and value
  2390                                  ;
  2391                                                          mov     cl,42                                           ;column
  2392                                                          mov     ch,12                                           ;row
  2393                                                          mov     esi,czIntES                                     ;label
  2394                                                          call    SetConsoleString                                ;draw label
  2395                                                          xor     eax,eax                                         ;zero register
  2396                                                          mov     ax,[ebp+32]                                     ;ES
  2397                                                          mov     cl,46                                           ;column
  2398                                                          mov     ch,12                                           ;row
  2399                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2400                                  ;
  2401                                  ;       Display the SS register label and value
  2402                                  ;
  2403                                                          mov     cl,42                                           ;column
  2404                                                          mov     ch,13                                           ;row
  2405                                                          mov     esi,czIntSS                                     ;label
  2406                                                          call    SetConsoleString                                ;draw label
  2407                                                          xor     eax,eax                                         ;zero register
  2408                                                          mov     ax,ss                                           ;SS
  2409                                                          mov     cl,46                                           ;column
  2410                                                          mov     ch,13                                           ;row
  2411                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2412                                  ;
  2413                                  ;       Display the CS register lable and value
  2414                                  ;
  2415                                                          mov     cl,42                                           ;column
  2416                                                          mov     ch,14                                           ;row
  2417                                                          mov     esi,czIntCS                                     ;label
  2418                                                          call    SetConsoleString                                ;draw label
  2419                                                          xor     eax,eax                                         ;zero register
  2420                                                          mov     ax,[ebp+52]                                     ;CS
  2421                                                          mov     cl,46                                           ;column
  2422                                                          mov     ch,14                                           ;row
  2423                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2424                                  ;
  2425                                  ;       Display the EFLAGS register label and value
  2426                                  ;
  2427                                                          mov     cl,51                                           ;column
  2428                                                          mov     ch,11                                           ;row
  2429                                                          mov     esi,czIntEFLAGS                                 ;label
  2430                                                          call    SetConsoleString                                ;draw label
  2431                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2432                                                          mov     cl,55                                           ;column
  2433                                                          mov     ch,11                                           ;row
  2434                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2435                                  ;
  2436                                  ;       Display the ESP register label and value
  2437                                  ;
  2438                                                          mov     cl,51                                           ;column
  2439                                                          mov     ch,13                                           ;row
  2440                                                          mov     esi,czIntESP                                    ;label
  2441                                                          call    SetConsoleString                                ;draw label
  2442                                                          mov     eax,[ebp+12]                                    ;ESP
  2443                                                          mov     cl,55                                           ;column
  2444                                                          mov     ch,13                                           ;row
  2445                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2446                                  ;
  2447                                  ;       Display the EIP register label and value
  2448                                  ;
  2449                                                          mov     cl,51                                           ;column
  2450                                                          mov     ch,14                                           ;row
  2451                                                          mov     esi,czIntEIP                                    ;label
  2452                                                          call    SetConsoleString                                ;draw label
  2453                                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2454                                                          mov     cl,55                                           ;column
  2455                                                          mov     ch,14                                           ;row
  2456                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2457                                  ;
  2458                                  ;       Halt and loop until reset
  2459                                  ;
  2460                                  .10                     sti                                                     ;enable maskable interrupts
  2461                                                          hlt                                                     ;halt processor
  2462                                                          jmp     .10                                             ;resume on interrupt
  2463                                  ;-----------------------------------------------------------------------------------------------------------------------
  2464                                  ;
  2465                                  ;       Processor Interrupt Name Strings
  2466                                  ;
  2467                                  ;-----------------------------------------------------------------------------------------------------------------------
  2468                                  czIntDivideByZero       db      "Division by zero",0
  2469                                  czIntSingleStep         db      "Single step",0
  2470                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2471                                  czIntBreak              db      "Break",0
  2472                                  czIntInto               db      "Into",0
  2473                                  czIntBounds             db      "Bounds",0
  2474                                  czIntBadOpCode          db      "Bad Operation Code",0
  2475                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2476                                  czIntDoubleFault        db      "Double Fault",0
  2477                                  czIntOperand            db      "Operand",0
  2478                                  czIntBadTSS             db      "Bad Task State Segment",0
  2479                                  czIntNotPresent         db      "Not Present",0
  2480                                  czIntStackLimit         db      "Stack Limit",0
  2481                                  czIntProtection         db      "General Protection Fault",0
  2482                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2483                                  czIntReserved           db      "Reserved",0
  2484                                  ;-----------------------------------------------------------------------------------------------------------------------
  2485                                  ;
  2486                                  ;       Processor Interrupt Handling Strings
  2487                                  ;
  2488                                  ;-----------------------------------------------------------------------------------------------------------------------
  2489                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2490                                  czIntLabel              db      "Interrupt #",0
  2491                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2492                                  czIntEAX                db      "EAX:",0
  2493                                  czIntECX                db      "ECX:",0
  2494                                  czIntEDX                db      "EDX:",0
  2495                                  czIntEBX                db      "EBX:",0
  2496                                  czIntESI                db      "ESI:",0
  2497                                  czIntEDI                db      "EDI:",0
  2498                                  czIntEBP                db      "EBP:",0
  2499                                  czIntESP                db      "ESP:",0
  2500                                  czIntDS                 db      " DS:",0
  2501                                  czIntES                 db      " ES:",0
  2502                                  czIntSS                 db      " SS:",0
  2503                                  czIntCS                 db      " CS:",0
  2504                                  czIntEFLAGS             db      "FLG:",0
  2505                                  czIntEIP                db      "EIP:",0
  2506                                  ;-----------------------------------------------------------------------------------------------------------------------
  2507                                  ;
  2508                                  ;       Routine:        DrawTextDialogBox
  2509                                  ;
  2510                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2511                                  ;
  2512                                  ;       In:             CL      upper left column (0-79)
  2513                                  ;                       CH      upper left row (0-24)
  2514                                  ;                       DL      column width, excluding border
  2515                                  ;                       DH      row height, excluding border
  2516                                  ;                       BH      color attribute
  2517                                  ;
  2518                                  ;-----------------------------------------------------------------------------------------------------------------------
  2519                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2520                                                          push    esi                                             ;
  2521                                                          push    edi                                             ;
  2522                                                          push    es                                              ;
  2523                                                          push    EGDTCGA                                         ;load CGA selector ...
  2524                                                          pop     es                                              ;... into ES
  2525                                  ;
  2526                                  ;       Compute target display offset
  2527                                  ;
  2528                                                          xor     eax,eax                                         ;zero register
  2529                                                          mov     al,ch                                           ;row
  2530                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2531                                                          mul     ah                                              ;row offset
  2532                                                          add     al,cl                                           ;add column
  2533                                                          adc     ah,0                                            ;add overflow
  2534                                                          add     al,cl                                           ;add column
  2535                                                          adc     ah,0                                            ;add overflow
  2536                                                          mov     edi,eax                                         ;target row offset
  2537                                  ;
  2538                                  ;       Display top border row
  2539                                  ;
  2540                                                          push    edi                                             ;save target row offset
  2541                                                          mov     ah,bh                                           ;attribute
  2542                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2543                                                          stosw                                                   ;display character and attribute
  2544                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2545                                                          xor     ecx,ecx                                         ;zero register
  2546                                                          mov     cl,dl                                           ;width, excluding border
  2547                                                          rep     stosw                                           ;display horizontal border
  2548                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2549                                                          stosw                                                   ;display character and attribute
  2550                                                          pop     edi                                             ;restore target row offset
  2551                                                          add     edi,ECONROWBYTES                                ;next row
  2552                                  ;
  2553                                  ;       Display dialog box body rows
  2554                                  ;
  2555                                                          xor     ecx,ecx                                         ;zero register
  2556                                                          mov     cl,dh                                           ;height, excluding border
  2557                                  .10                     push    ecx                                             ;save remaining rows
  2558                                                          push    edi                                             ;save target row offset
  2559                                                          mov     ah,bh                                           ;attribute
  2560                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2561                                                          stosw                                                   ;display character and attribute
  2562                                                          mov     al,EASCIISPACE                                  ;space
  2563                                                          xor     ecx,ecx                                         ;zero register
  2564                                                          mov     cl,dl                                           ;width, excluding border
  2565                                                          rep     stosw                                           ;display row
  2566                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2567                                                          stosw                                                   ;display character and attribute
  2568                                                          pop     edi                                             ;restore target row offset
  2569                                                          add     edi,ECONROWBYTES                                ;next row
  2570                                                          pop     ecx                                             ;remaining rows
  2571                                                          loop    .10                                             ;next row
  2572                                  ;
  2573                                  ;       Display bottom border row
  2574                                  ;
  2575                                                          push    edi                                             ;save target row offset
  2576                                                          mov     ah,bh                                           ;attribute
  2577                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2578                                                          stosw                                                   ;display character and attribute
  2579                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2580                                                          xor     ecx,ecx                                         ;zero register
  2581                                                          mov     cl,dl                                           ;width, excluding border
  2582                                                          rep     stosw                                           ;display horizontal border
  2583                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2584                                                          stosw                                                   ;display character and attribute
  2585                                                          pop     edi                                             ;restore target row offset
  2586                                                          add     edi,ECONROWBYTES                                ;next row
  2587                                  ;
  2588                                  ;       Restore and return
  2589                                  ;
  2590                                                          pop     es                                              ;restore non-volatile regs
  2591                                                          pop     edi                                             ;
  2592                                                          pop     esi                                             ;
  2593                                                          pop     ecx                                             ;
  2594                                                          ret                                                     ;return
  2595                                  ;=======================================================================================================================
  2596                                  ;
  2597                                  ;       Hardware Device Interupts
  2598                                  ;
  2599                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2600                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2601                                  ;       (BX=2028h).
  2602                                  ;
  2603                                  ;=======================================================================================================================
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                  ;
  2606                                  ;       IRQ0    Clock Tick Interrupt
  2607                                  ;
  2608                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2609                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2610                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2611                                  ;
  2612                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2613                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2614                                  ;
  2615                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2616                                  ;       zero, the floppy disk motors are turned off.
  2617                                  ;
  2618                                  ;-----------------------------------------------------------------------------------------------------------------------
  2619                                                          menter  clocktick                                       ;clock tick interrupt
  2620                                                          push    eax                                             ;save non-volatile regs
  2621                                                          push    edx                                             ;
  2622                                                          push    ds                                              ;
  2623                                  ;
  2624                                  ;       Update the clock tick count and the elapsed days as needed.
  2625                                  ;
  2626                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2627                                                          pop     ds                                              ;... into data segment register
  2628                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2629                                                          inc     eax                                             ;increment clock ticks
  2630                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2631                                                          jb      irq0.10                                         ;no, skip ahead
  2632                                                          inc     byte [wbClockDays]                              ;increment clock days
  2633                                                          xor     eax,eax                                         ;reset clock ticks
  2634                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2635                                  ;
  2636                                  ;       Decrement floppy disk motor timeout.
  2637                                  ;
  2638                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2639                                                          je      irq0.20                                         ;yes, skip ahead
  2640                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2641                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2642                                  ;
  2643                                  ;       Turn off the floppy disk motor if appropriate.
  2644                                  ;
  2645                                                          sti                                                     ;enable maskable interrupts
  2646                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2647                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2648                                                          in      al,dx                                           ;FDC main status byte
  2649                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2650                                                          jnz     irq0.15                                         ;wait while busy
  2651                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2652                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2653                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2654                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2655                                                          out     dx,al                                           ;turn motor off
  2656                                  ;
  2657                                  ;       Signal the end of the hardware interrupt.
  2658                                  ;
  2659                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2660                                  ;
  2661                                  ;       Restore and return.
  2662                                  ;
  2663                                                          pop     ds                                              ;restore modified regs
  2664                                                          pop     edx                                             ;
  2665                                                          pop     eax                                             ;
  2666                                                          iretd                                                   ;return
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                  ;
  2669                                  ;       IRQ1    Keyboard Interrupt
  2670                                  ;
  2671                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2672                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2673                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2674                                  ;       ALL modified registers upon return.
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                                          menter  keyboard                                        ;keyboard interrrupt
  2678                                                          push    eax                                             ;save non-volatile regs
  2679                                                          push    ebx                                             ;
  2680                                                          push    ecx                                             ;
  2681                                                          push    esi                                             ;
  2682                                                          push    ds                                              ;
  2683                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2684                                                          pop     ds                                              ;... into data segment register
  2685                                                          xor     al,al                                           ;zero
  2686                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2687                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2688                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2689                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2690                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2691                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2692                                                          mov     al,' '                                          ;space
  2693                                                          mov     [wbConsoleChar],al                              ;set character to space
  2694                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2695                                                          not     al                                              ;controller timeout mask
  2696                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2697                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2698                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2699                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2700                                                          jz      irq1.140                                        ;yes, skip ahead
  2701                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2702                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2703                                                          mov     ah,al                                           ;copy scan code 0
  2704                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2705                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2706                                                          je      irq1.30                                         ;yes, set flag
  2707                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2708                                                          je      irq1.40                                         ;yes, reset flag
  2709                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2710                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2711                                                          je      irq1.30                                         ;yes, set flag
  2712                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2713                                                          je      irq1.40                                         ;yes, reset flag
  2714                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2715                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2716                                                          je      irq1.30                                         ;yes, set flag
  2717                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2718                                                          je      irq1.40                                         ;yes, reset flag
  2719                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2720                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2721                                                          je      irq1.30                                         ;yes, set flag
  2722                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2723                                                          je      irq1.40                                         ;yes, reset flag
  2724                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2725                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2726                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2727                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2728                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2729                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2730                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2731                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2732                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2733                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2734                                                          jne     irq1.70                                         ;no, skip ahead
  2735                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2736                                                          jz      irq1.140                                        ;yes, skip ahead
  2737                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2738                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2739                                                          mov     ah,al                                           ;copy scan code 1
  2740                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2741                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2742                                                          je      irq1.30                                         ;yes, set flag
  2743                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2744                                                          je      irq1.40                                         ;yes, reset flag
  2745                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2746                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2747                                                          je      irq1.30                                         ;yes, set flag
  2748                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2749                                                          je      irq1.40                                         ;yes, reset flag
  2750                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2751                                                          je      irq1.80                                         ;yes, skip ahead
  2752                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2753                                                          je      irq1.80                                         ;yes, skip ahead
  2754                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2755                                                          je      irq1.10                                         ;yes, continue
  2756                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2757                                                          jne     irq1.20                                         ;no, skip ahead
  2758                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2759                                                          jz      irq1.140                                        ;yes, skip ahead
  2760                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2761                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2762                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2763                                                          jz      irq1.140                                        ;yes, skip ahead
  2764                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2765                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2766                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2767                                  irq1.30                 or      bl,al                                           ;set shift flag
  2768                                                          jmp     irq1.60                                         ;skip ahead
  2769                                  irq1.40                 not     al                                              ;convert flag to mask
  2770                                                          and     bl,al                                           ;reset shift flag
  2771                                                          jmp     irq1.60                                         ;skip ahead
  2772                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2773                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2774                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2775                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2776                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2777                                                          jmp     irq1.150                                        ;finish keyboard handling
  2778                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2779                                                          jne     irq1.80                                         ;no continue
  2780                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2781                                                          jz      irq1.140                                        ;yes, skip ahead
  2782                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2783                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2784                                                          mov     ah,al                                           ;copy scan code 1
  2785                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2786                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2787                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2788                                                          jz      irq1.140                                        ;yes, skip ahead
  2789                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2790                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2791                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2792                                                          jz      irq1.140                                        ;yes, skip ahead
  2793                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2794                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2795                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2796                                                          jz      irq1.140                                        ;yes, skip ahead
  2797                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2798                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2799                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2800                                                          jz      irq1.140                                        ;yes, skip ahead
  2801                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2802                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2803                                                          jmp     irq1.150                                        ;continue
  2804                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2805                                                          test    ah,EKEYBUP                                      ;release code?
  2806                                                          jnz     irq1.130                                        ;yes, skip ahead
  2807                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2808                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2809                                                          jz      irq1.90                                         ;no, skip ahead
  2810                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2811                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2812                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2813                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2814                                                          jz      irq1.100                                        ;no skip ahead
  2815                                                          mov     cl,al                                           ;copy ASCII code
  2816                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2817                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2818                                                          jb      irq1.100                                        ;yes, skip ahead
  2819                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2820                                                          ja      irq1.100                                        ;yes, skip ahead
  2821                                                          xor     al,EASCIICASE                                   ;switch case
  2822                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2823                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2824                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2825                                                          jz      irq1.120                                        ;no, skip ahead
  2826                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2827                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2828                                                          or      edx,eax                                         ;msg id and codes
  2829                                                          xor     ecx,ecx                                         ;null param
  2830                                                          push    eax                                             ;save codes
  2831                                                          call    PutMessage                                      ;put message to console
  2832                                                          pop     eax                                             ;restore codes
  2833                                                          test    al,al                                           ;ASCII translation?
  2834                                                          jz      irq1.130                                        ;no, skip ahead
  2835                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2836                                                          and     eax,0FFFFh                                      ;clear high-order word
  2837                                                          or      edx,eax                                         ;msg id and codes
  2838                                                          xor     ecx,ecx                                         ;null param
  2839                                                          call    PutMessage                                      ;put message to console
  2840                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2841                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2842                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2843                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2844                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2845                                                          pop     ds                                              ;restore non-volatile regs
  2846                                                          pop     esi                                             ;
  2847                                                          pop     ecx                                             ;
  2848                                                          pop     ebx                                             ;
  2849                                                          pop     eax                                             ;
  2850                                                          iretd                                                   ;return
  2851                                  ;-----------------------------------------------------------------------------------------------------------------------
  2852                                  ;       Scan-Code to ASCII Translation Tables
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2855                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2856                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2857                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2858                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2859                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2860                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2861                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2862                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2863                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2864                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2865                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2866                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2867                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2868                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2869                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2870                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2871                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2872                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2873                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2874                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2875                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2876                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2877                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2878                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2879                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2880                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2881                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2882                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2883                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2884                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2885                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2886                                  ;-----------------------------------------------------------------------------------------------------------------------
  2887                                  ;
  2888                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2889                                  ;
  2890                                  ;-----------------------------------------------------------------------------------------------------------------------
  2891                                                          menter  iochannel                                       ;secondary 8259A cascade
  2892                                                          push    eax                                             ;save modified regs
  2893                                                          jmp     hwint                                           ;end interrupt and return
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895                                  ;
  2896                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2897                                  ;
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                                          menter  com2                                            ;serial port 2 interrupt
  2900                                                          push    eax                                             ;save modified regs
  2901                                                          jmp     hwint                                           ;end interrupt and return
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2905                                  ;
  2906                                  ;-----------------------------------------------------------------------------------------------------------------------
  2907                                                          menter  com1                                            ;serial port 1 interrupt
  2908                                                          push    eax                                             ;save modified regs
  2909                                                          jmp     hwint                                           ;end interrupt and return
  2910                                  ;-----------------------------------------------------------------------------------------------------------------------
  2911                                  ;
  2912                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2913                                  ;
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2916                                                          push    eax                                             ;save modified regs
  2917                                                          jmp     hwint                                           ;end interrupt and return
  2918                                  ;-----------------------------------------------------------------------------------------------------------------------
  2919                                  ;
  2920                                  ;       IRQ6    Diskette Hardware Interrupt
  2921                                  ;
  2922                                  ;-----------------------------------------------------------------------------------------------------------------------
  2923                                                          menter  diskette                                        ;floppy disk interrupt
  2924                                                          push    eax                                             ;save non-volatile regs
  2925                                                          push    ds                                              ;
  2926                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2927                                                          pop     ds                                              ;... into DS register
  2928                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2929                                                          or      al,10000000b                                    ;set IRQ flag
  2930                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2931                                                          pop     ds                                              ;restore non-volatile regs
  2932                                                          jmp     hwint                                           ;end primary PIC interrupt
  2933                                  ;-----------------------------------------------------------------------------------------------------------------------
  2934                                  ;
  2935                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2936                                  ;
  2937                                  ;-----------------------------------------------------------------------------------------------------------------------
  2938                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2939                                                          push    eax                                             ;save modified regs
  2940                                                          jmp     hwint                                           ;end interrupt and return
  2941                                  ;-----------------------------------------------------------------------------------------------------------------------
  2942                                  ;
  2943                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2944                                  ;
  2945                                  ;-----------------------------------------------------------------------------------------------------------------------
  2946                                                          menter  rtclock                                         ;real-time clock interrupt
  2947                                                          push    eax                                             ;save modified regs
  2948                                                          jmp     hwwint                                          ;end interrupt and return
  2949                                  ;-----------------------------------------------------------------------------------------------------------------------
  2950                                  ;
  2951                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2952                                  ;
  2953                                  ;-----------------------------------------------------------------------------------------------------------------------
  2954                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2955                                                          push    eax                                             ;save modified regs
  2956                                                          jmp     hwwint                                          ;end interrupt and return
  2957                                  ;-----------------------------------------------------------------------------------------------------------------------
  2958                                  ;
  2959                                  ;       IRQ10   Reserved Hardware Interrupt
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                                          menter  irq10                                           ;reserved
  2963                                                          push    eax                                             ;save modified regs
  2964                                                          jmp     hwwint                                          ;end interrupt and return
  2965                                  ;-----------------------------------------------------------------------------------------------------------------------
  2966                                  ;
  2967                                  ;       IRQ11   Reserved Hardware Interrupt
  2968                                  ;
  2969                                  ;       Repurpose for Intel 82545 EM Ethernet adapter hardware interrupt.
  2970                                  ;
  2971                                  ;-----------------------------------------------------------------------------------------------------------------------
  2972                                                          menter  irq11                                           ;reserved
  2973                                                          push    eax                                             ;save non-volatile regs
  2974                                                          push    ebx                                             ;
  2975                                                          push    ecx                                             ;
  2976                                                          push    edi                                             ;
  2977                                                          push    ds                                              ;
  2978                                                          push    es                                              ;
  2979                                  ;
  2980                                  ;       Mask IRQ 11 to prevent reentrance.
  2981                                  ;
  2982                                                          in      al,0A1h                                         ;secondary PIC mask
  2983                                                          or      al,008h                                         ;set (mask) bit 3 (IRQ 11)
  2984                                                          out     0A1h,al                                         ;mask IRQ 11
  2985                                  ;
  2986                                  ;       enable maskable interrupts.
  2987                                  ;
  2988                                                          sti                                                     ;enable maskable interrupts
  2989                                  ;
  2990                                  ;       Setup addressability.
  2991                                  ;
  2992                                                          push    EGDTOSDATA                                      ;load OS data selector...
  2993                                                          pop     ds                                              ;...into DS
  2994                                                          push    EGDTCGA                                         ;load CGA video selector...
  2995                                                          pop     es                                              ;...into ES
  2996                                  ;
  2997                                  ;       Notify OIA of the interrupt state '0'
  2998                                  ;
  2999                                                          mov     edi,24*160+82                                   ;row and column offset
  3000                                                          mov     al,'|'
  3001                                                          mov     ah,[es:edi]
  3002                                                          cmp     ah,al
  3003                                                          mov     al,'/'
  3004                                                          je      irq11.01
  3005                                                          cmp     ah,al
  3006                                                          mov     al,'-'
  3007                                                          je      irq11.01
  3008                                                          cmp     ah,al
  3009                                                          mov     al,'\'
  3010                                                          je      irq11.01
  3011                                                          cmp     ah,al
  3012                                                          mov     al,'|'
  3013                                                          je      irq11.01
  3014                                  irq11.01                mov     ah,007h
  3015                                                          mov     word [es:edi+0],ax                              ;indicator character and attribute
  3016                                  ;
  3017                                  ;       Read pending interrupt status
  3018                                  ;
  3019                                                          mov     ebx,wsConsoleEther                              ;ETHER struct address
  3020                                                          mov     ecx,[ebx+ETHER.mmio]                            ;memory mapped I/O address
  3021                                                          jecxz   irq11.90                                        ;exit if no MMIO
  3022                                                          mov     word [es:edi+2],074Dh                           ;MMIO indicator 'M'
  3023                                  ;
  3024                                  ;       Read the pending interrupt status
  3025                                  ;
  3026                                                          mov     edx,[ecx+EI825REGICR]                           ;interrupt cause read register
  3027                                                          test    dl,EI825ICRLSC                                  ;link status change?
  3028                                                          jz      irq11.10                                        ;no, branch
  3029                                                          and     dl,~EI825ICRLSC                                 ;clear link status change bit
  3030                                                          mov     eax,[ecx+EI825REGCTRL]                          ;control register
  3031                                                          or      al,EI825CTRLSLU                                 ;set link up bit
  3032                                                          mov     [ecx+EI825REGCTRL],eax                          ;update control register
  3033                                                          mov     word [es:edi+4],074Ch                           ;link status change indicator 'L'
  3034                                  ;
  3035                                  ;       Handle receive underrun / min threshold
  3036                                  ;
  3037                                  irq11.10                test    dl,EI825ICRRXO|EI825ICRRXDMT0                   ;rx overrun or rx descr min threshold rcd?
  3038                                                          jz      irq11.20                                        ;no, branch
  3039                                                          and     dl,~(EI825ICRRXO|EI825ICRRXDMT0)                ;clear rx overrun and rx descr min thr rcd
  3040                                                          mov     word [es:edi+6],0755h                           ;notify OIA of underrun ('U')
  3041                                                          jmp     irq11.30                                        ;continue to rx poll
  3042                                  ;
  3043                                  ;       check if packet is pending
  3044                                  ;
  3045                                  irq11.20                test    dl,EI825ICRRXT0                                 ;packet pending?
  3046                                                          jz      irq11.40                                        ;no, branch
  3047                                                          and     dl,~EI825ICRRXT0                                ;clear packet pending
  3048                                                          mov     word [es:edi+8],0750h                           ;notify OIA of packet ('P')
  3049                                  ;
  3050                                  ;       do rx poll
  3051                                  irq11.30                push    edx
  3052                                                          call    EtherRxPoll
  3053                                                          pop     edx
  3054                                  
  3055                                  
  3056                                  irq11.40                test    edx,edx                                         ;unhandled int?
  3057                                                          jz      irq11.50                                        ;no, branch
  3058                                                          mov     word [es:edi+10],073Fh                          ;notify OIA of unhandled ('?')
  3059                                  ;
  3060                                  ;       Read the pending interrupt status
  3061                                  ;
  3062                                  irq11.50                mov     edx,[ecx+EI825REGICR]                           ;clear pending int status
  3063                                  ;
  3064                                  ;       Notify OIA of the interrupt state '2'
  3065                                  ;
  3066                                                          mov     word [es:edi+12],0732h
  3067                                  ;
  3068                                  ;       Enable IRQ 11
  3069                                  ;
  3070                                  irq11.90                in      al,0A1h                                         ;mask settings
  3071                                                          and     al,0F7h                                         ;clear (unmask) bit 3 (IRA 11)
  3072                                                          out     0A1h,al                                         ;unmask IRQ 11
  3073                                  ;
  3074                                  ;       End the IRQ interrupt
  3075                                  ;
  3076                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3077                                                          out     0A0h,al                                         ;secondary 8259 PIC command port
  3078                                                          out     020h,al                                         ;primary 8259 PIC ocmmand port
  3079                                  ;
  3080                                  ;       Notify OIA of the interrupt state '3'
  3081                                  ;
  3082                                                          mov     word [es:edi+14],0733h
  3083                                  ;
  3084                                  ;       Restore and return.
  3085                                  ;
  3086                                                          pop     es                                              ;restore non-volatile regs
  3087                                                          pop     ds                                              ;
  3088                                                          pop     edi                                             ;
  3089                                                          pop     ecx                                             ;
  3090                                                          pop     ebx                                             ;
  3091                                                          pop     eax                                             ;
  3092                                                          iretd                                                   ;return from interrupt
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094                                  ;
  3095                                  ;       In:             EBX     wsConsoleEther
  3096                                  ;
  3097                                  ;-----------------------------------------------------------------------------------------------------------------------
  3098                                  EtherRxPoll             push    ebx                                             ;save non-volatile regs
  3099                                                          push    ecx                                             ;
  3100                                                          push    edi                                             ;
  3101                                                          push    ds                                              ;
  3102                                                          push    es                                              ;
  3103                                  ;
  3104                                  ;       Setup addressability.
  3105                                  ;
  3106                                                          push    EGDTCGA
  3107                                                          pop     es
  3108                                                          push    EGDTOSDATA
  3109                                                          pop     ds
  3110                                                          mov     ebx,wsConsoleEther                              ;ETHER base address
  3111                                                          mov     edi,24*160+98
  3112                                  .01                     mov     word [es:edi+0],0740h                           ;indicate in RxPoll
  3113                                  ;
  3114                                  ;       Get the status of the tail descriptor
  3115                                  ;
  3116                                                          mov     ecx,[ebx+ETHER.rxtail]                          ;receive tail
  3117                                                          cmp     ecx,ENETRXDESCCT                                ;range test
  3118                                                          jb      .02                                             ;branch if ok
  3119                                                          xor     ecx,ecx                                         ;reset
  3120                                                          mov     [ebx+ETHER.rxtail],ecx                          ;update tail
  3121                                  .02                     shl     ecx,4                                           ;tail * 16
  3122                                                          add     ecx,[ebx+ETHER.rxbase]                          ;ECX = tail address
  3123                                  ;
  3124                                  ;       Check status and errors.
  3125                                  ;
  3126                                                          xor     eax,eax                                         ;zero register
  3127                                                          mov     al,[ecx+I825RXDESC.status]                      ;status
  3128                                  
  3129                                                          mov     ah,al
  3130                                                          shr     al,4
  3131                                                          or      al,30h
  3132                                                          cmp     al,3ah
  3133                                                          jb      .04
  3134                                                          add     al,7
  3135                                  .04                     mov     [es:edi+10],al
  3136                                                          mov     al,ah
  3137                                                          and     al,0fh
  3138                                                          or      al,30h
  3139                                                          cmp     al,3ah
  3140                                                          jb      .06
  3141                                                          add     al,7
  3142                                  .06                     mov     [es:edi+12],al
  3143                                  
  3144                                                          xor     eax,eax
  3145                                                          mov     al,[ecx+I825RXDESC.status]
  3146                                                          test    al,1                                            ;descriptor done?
  3147                                                          jz      .90                                             ;no, branch
  3148                                  
  3149                                                          mov     word [es:edi+0],0741h                           ;descriptor done indicator
  3150                                  
  3151                                                          mov     ax,[ecx+I825RXDESC.length]                      ;packet lenth
  3152                                                          cmp     ax,60                                           ;short packet?
  3153                                                          jae     .07                                             ;no, branch
  3154                                                          mov     word [es:edi+0],0742h
  3155                                                          jmp     .10
  3156                                  
  3157                                  .07                     test    al,2                                            ;end-of-packet?
  3158                                                          jnz     .08                                             ;yes, branch
  3159                                                          mov     word [es:edi+0],0743h
  3160                                                          jmp     .10
  3161                                  
  3162                                  .08                     mov     al,[ecx+I825RXDESC.errors]                      ;packet errors
  3163                                                          test    al,al                                           ;errors?
  3164                                                          jz      .09                                             ;no, branch
  3165                                                          mov     word [es:edi+0],0744h
  3166                                                          jmp     .10
  3167                                  ;
  3168                                  ;       Pass packet to network layer
  3169                                  ;
  3170                                  .09                     mov     eax,[ecx+I825RXDESC.addresslo]
  3171                                                          mov     word [es:edi+0],0745h                           ;network layer indicator ('E')
  3172                                  ;
  3173                                  ;       Update counter, status, tail
  3174                                  ;
  3175                                  .10                     inc     dword [ebx+ETHER.rxcount]
  3176                                                          mov     byte [ecx+I825RXDESC.status],0
  3177                                                          mov     eax,[ebx+ETHER.rxtail]
  3178                                                          inc     eax
  3179                                                          cmp     eax,ENETRXDESCCT
  3180                                                          jb      .20
  3181                                                          xor     eax,eax
  3182                                  .20                     mov     [ebx+ETHER.rxtail],eax
  3183                                  ;
  3184                                  ;       Update active tail
  3185                                  ;
  3186                                                          mov     ecx,[ebx+ETHER.mmio]                            ;mapped memory i/o address
  3187                                                          mov     [ecx+EI825REGRDT],eax                           ;update receive tail register
  3188                                                          jmp     .01                                             ;next
  3189                                  ;
  3190                                  ;       Restore and return.
  3191                                  ;
  3192                                  .90                     pop     es                                              ;restore non-volatile regs
  3193                                                          pop     ds                                              ;
  3194                                                          pop     edi                                             ;
  3195                                                          pop     ecx                                             ;
  3196                                                          pop     ebx                                             ;
  3197                                                          ret                                                     ;return
  3198                                  ;-----------------------------------------------------------------------------------------------------------------------
  3199                                  ;
  3200                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  3201                                  ;
  3202                                  ;-----------------------------------------------------------------------------------------------------------------------
  3203                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  3204                                                          push    eax                                             ;save modified regs
  3205                                                          jmp     hwwint                                          ;end interrupt and return
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207                                  ;
  3208                                  ;       IRQ13   Coprocessor Hardware Interrupt
  3209                                  ;
  3210                                  ;-----------------------------------------------------------------------------------------------------------------------
  3211                                                          menter  coprocessor                                     ;coprocessor interrupt
  3212                                                          push    eax                                             ;save modified regs
  3213                                                          jmp     hwwint                                          ;end interrupt and return
  3214                                  ;-----------------------------------------------------------------------------------------------------------------------
  3215                                  ;
  3216                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  3217                                  ;
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219                                                          menter  fixeddisk                                       ;fixed disk interrupt
  3220                                                          push    eax                                             ;save modified regs
  3221                                                          jmp     hwwint                                          ;end interrupt and return
  3222                                  ;-----------------------------------------------------------------------------------------------------------------------
  3223                                  ;
  3224                                  ;       IRQ15   Reserved Hardware Interrupt
  3225                                  ;
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227                                                          menter  irq15                                           ;reserved
  3228                                                          push    eax                                             ;save modified regs
  3229                                                          jmp     hwwint                                          ;end interrupt and return
  3230                                  ;-----------------------------------------------------------------------------------------------------------------------
  3231                                  ;
  3232                                  ;       Exit from hardware interrupt
  3233                                  ;
  3234                                  ;-----------------------------------------------------------------------------------------------------------------------
  3235                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  3236                                                          jmp     hwint90                                         ;skip ahead
  3237                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  3238                                  hwint90                 pop     eax                                             ;restore modified regs
  3239                                                          iretd                                                   ;return from interrupt
  3240                                  ;-----------------------------------------------------------------------------------------------------------------------
  3241                                  ;
  3242                                  ;       INT 30h Operating System Software Service Interrupt
  3243                                  ;
  3244                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  3245                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  3246                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  3247                                  ;       the entry address of the specific function from a table.
  3248                                  ;
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                                          menter  svc
  3251                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  3252                                                          jae     svc90                                           ;yes, skip ahead
  3253                                                          movzx   eax,al                                          ;function
  3254                                                          shl     eax,2                                           ;offset into table
  3255                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  3256                                  svc90                   iretd                                                   ;return from interrupt
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  ;
  3259                                  ;       Service Request Table
  3260                                  ;
  3261                                  ;
  3262                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  3263                                  ;
  3264                                  ;-----------------------------------------------------------------------------------------------------------------------
  3265                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  3266                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  3267                                                          tsvce   CompareMemory                                   ;compare memory
  3268                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  3269                                                          tsvce   FreeMemory                                      ;free memory block
  3270                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  3271                                                          tsvce   GetConsoleString                                ;get string input
  3272                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  3273                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  3274                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  3275                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  3276                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  3277                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  3278                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  3279                                                          tsvce   PutDayString                                    ;put DD string
  3280                                                          tsvce   PutHourString                                   ;put hh string
  3281                                                          tsvce   PutMACString                                    ;put MAC address string
  3282                                                          tsvce   PutMinuteString                                 ;put mm string
  3283                                                          tsvce   PutMonthString                                  ;put MM string
  3284                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  3285                                                          tsvce   PutSecondString                                 ;put ss string
  3286                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  3287                                                          tsvce   PutWeekdayString                                ;put weekday string
  3288                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  3289                                                          tsvce   PutYearString                                   ;put YYYY string
  3290                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  3291                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  3292                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  3293                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  3294                                                          tsvce   UpperCaseString                                 ;upper-case string
  3295                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  3296                                  ;-----------------------------------------------------------------------------------------------------------------------
  3297                                  ;
  3298                                  ;       Service Request Macros
  3299                                  ;
  3300                                  ;       These macros provide positional parameterization of service request calls.
  3301                                  ;
  3302                                  ;-----------------------------------------------------------------------------------------------------------------------
  3303                                  %macro                  allocateMemory 1
  3304                                                          push    ecx                                             ;save non-volatile registers
  3305                                                          mov     ecx,%1                                          ;bytes to allocate
  3306                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  3307                                                          int     _svc                                            ;invoke OS service
  3308                                                          pop     ecx                                             ;restore non-volatile registers
  3309                                  %endmacro
  3310                                  %macro                  clearConsoleScreen 0
  3311                                                          mov     al,eClearConsoleScreen                          ;function code
  3312                                                          int     _svc                                            ;invoke OS service
  3313                                  %endmacro
  3314                                  %macro                  compareMemory 0
  3315                                                          mov     al,eCompareMemory                               ;function code
  3316                                                          int     _svc                                            ;invoke OS service
  3317                                  %endmacro
  3318                                  %macro                  decimalToUnsigned 0
  3319                                                          mov     al,eDecimalToUnsigned                           ;function code
  3320                                                          int     _svc                                            ;invoke OS servie
  3321                                  %endmacro
  3322                                  %macro                  freeMemory 1
  3323                                                          mov     edx,%1                                          ;address of memory block
  3324                                                          mov     al,eFreeMemory                                  ;function code
  3325                                                          int     _svc                                            ;invoke OS service
  3326                                  %endmacro
  3327                                  %macro                  getBaseMemSize 0
  3328                                                          mov     al,eGetBaseMemSize                              ;function code
  3329                                                          int     _svc                                            ;invoke OS service
  3330                                  %endmacro
  3331                                  %macro                  getConsoleString 4
  3332                                                          mov     edx,%1                                          ;buffer address
  3333                                                          mov     ecx,%2                                          ;max characters
  3334                                                          mov     bh,%3                                           ;echo indicator
  3335                                                          mov     bl,%4                                           ;terminator
  3336                                                          mov     al,eGetConsoleString                            ;function code
  3337                                                          int     _svc                                            ;invoke OS service
  3338                                  %endmacro
  3339                                  %macro                  getExtendedMemSize 0
  3340                                                          mov     al,eGetExtendedMemSize                          ;function code
  3341                                                          int     _svc                                            ;invoke OS service
  3342                                  %endmacro
  3343                                  %macro                  getROMMemSize 0
  3344                                                          mov     al,eGetROMMemSize                               ;function code
  3345                                                          int     _svc                                            ;invoke OS service
  3346                                  %endmacro
  3347                                  %macro                  hexadecimalToUnsigned 0
  3348                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  3349                                                          int     _svc                                            ;invoke OS service
  3350                                  %endmacro
  3351                                  %macro                  isLeapYear 1
  3352                                                          mov     ebx,%1                                          ;DATETIME addr
  3353                                                          mov     al,eIsLeapYear                                  ;function code
  3354                                                          int     _svc                                            ;invoke OS service
  3355                                  %endmacro
  3356                                  %macro                  placeCursor 0
  3357                                                          mov     al,ePlaceCursor                                 ;function code
  3358                                                          int     _svc                                            ;invoke OS service
  3359                                  %endmacro
  3360                                  %macro                  putConsoleString 0
  3361                                                          mov     al,ePutConsoleString                            ;function code
  3362                                                          int     _svc                                            ;invoke OS service
  3363                                  %endmacro
  3364                                  %macro                  putConsoleString 1
  3365                                                          mov     edx,%1                                          ;string address
  3366                                                          mov     al,ePutConsoleString                            ;function code
  3367                                                          int     _svc                                            ;invoke OS service
  3368                                  %endmacro
  3369                                  %macro                  putDateString 0
  3370                                                          mov     al,ePutDateString                               ;function code
  3371                                                          int     _svc                                            ;invoke OS service
  3372                                  %endmacro
  3373                                  %macro                  putDateString 2
  3374                                                          mov     ebx,%1                                          ;DATETIME addr
  3375                                                          mov     edx,%2                                          ;output buffer addr
  3376                                                          mov     al,ePutDateString                               ;function code
  3377                                                          int     _svc                                            ;invoke OS service
  3378                                  %endmacro
  3379                                  %macro                  putDayString 2
  3380                                                          mov     ebx,%1                                          ;DATETIME addr
  3381                                                          mov     edx,%2                                          ;output buffer addr
  3382                                                          mov     al,ePutDayString                                ;function code
  3383                                                          int     _svc                                            ;invoke OS service
  3384                                  %endmacro
  3385                                  %macro                  putHourString 2
  3386                                                          mov     ebx,%1                                          ;DATETIME addr
  3387                                                          mov     edx,%2                                          ;output buffer addr
  3388                                                          mov     al,ePutHourString                               ;function code
  3389                                                          int     _svc                                            ;invoke OS service
  3390                                  %endmacro
  3391                                  %macro                  putMACString 1
  3392                                                          mov     edx,%1                                          ;output buffer address
  3393                                                          mov     al,ePutMACString                                ;function code
  3394                                                          int     _svc                                            ;invoke OS service
  3395                                  %endmacro
  3396                                  %macro                  putMinuteString 2
  3397                                                          mov     ebx,%1                                          ;DATETIME addr
  3398                                                          mov     edx,%2                                          ;output buffer addr
  3399                                                          mov     al,ePutMinuteString                             ;function code
  3400                                                          int     _svc                                            ;invoke OS service
  3401                                  %endmacro
  3402                                  %macro                  putMonthString 2
  3403                                                          mov     ebx,%1                                          ;DATETIME addr
  3404                                                          mov     edx,%2                                          ;output buffer addr
  3405                                                          mov     al,ePutMonthString                              ;function code
  3406                                                          int     _svc                                            ;invoke OS service
  3407                                  %endmacro
  3408                                  %macro                  putMonthNameString 2
  3409                                                          mov     ebx,%1                                          ;DATETIME addr
  3410                                                          mov     edx,%2                                          ;output buffer addr
  3411                                                          mov     al,ePutMonthNameString                          ;function code
  3412                                                          int     _svc                                            ;invoke OS service
  3413                                  %endmacro
  3414                                  %macro                  putSecondString 2
  3415                                                          mov     ebx,%1                                          ;DATETIME addr
  3416                                                          mov     edx,%2                                          ;output buffer addr
  3417                                                          mov     al,ePutSecondString                             ;function code
  3418                                                          int     _svc                                            ;invoke OS service
  3419                                  %endmacro
  3420                                  %macro                  putTimeString 0
  3421                                                          mov     al,ePutTimeString                               ;function code
  3422                                                          int     _svc                                            ;invoke OS service
  3423                                  %endmacro
  3424                                  %macro                  putTimeString 2
  3425                                                          mov     ebx,%1                                          ;DATETIME addr
  3426                                                          mov     edx,%2                                          ;output buffer addr
  3427                                                          mov     al,ePutTimeString                               ;function code
  3428                                                          int     _svc                                            ;invoke OS service
  3429                                  %endmacro
  3430                                  %macro                  putWeekdayString 2
  3431                                                          mov     ebx,%1                                          ;DATETIME addr
  3432                                                          mov     edx,%2                                          ;output buffer addr
  3433                                                          mov     al,ePutWeekdayString                            ;function code
  3434                                                          int     _svc                                            ;invoke OS service
  3435                                  %endmacro
  3436                                  %macro                  putWeekdayNameString 2
  3437                                                          mov     ebx,%1                                          ;DATETIME addr
  3438                                                          mov     edx,%2                                          ;output buffer addr
  3439                                                          mov     al,ePutWeekdayNameString                        ;function code
  3440                                                          int     _svc                                            ;invoke OS service
  3441                                  %endmacro
  3442                                  %macro                  putYearString 2
  3443                                                          mov     ebx,%1                                          ;DATETIME addr
  3444                                                          mov     edx,%2                                          ;output buffer addr
  3445                                                          mov     al,ePutYearString                               ;function code
  3446                                                          int     _svc                                            ;invoke OS service
  3447                                  %endmacro
  3448                                  %macro                  readRealTimeClock 0
  3449                                                          mov     al,eReadRealTimeClock                           ;function code
  3450                                                          int     _svc                                            ;invoke OS service
  3451                                  %endmacro
  3452                                  %macro                  readRealTimeClock 1
  3453                                                          mov     ebx,%1                                          ;DATETIME addr
  3454                                                          mov     al,eReadRealTimeClock                           ;function code
  3455                                                          int     _svc                                            ;invoke OS service
  3456                                  %endmacro
  3457                                  %macro                  resetSystem 0
  3458                                                          mov     al,eResetSystem                                 ;function code
  3459                                                          int     _svc                                            ;invoke OS service
  3460                                  %endmacro
  3461                                  %macro                  unsignedToDecimalString 0
  3462                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3463                                                          int     _svc                                            ;invoke OS service
  3464                                  %endmacro
  3465                                  %macro                  unsignedToHexadecimal 0
  3466                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3467                                                          int     _svc                                            ;invoke OS service
  3468                                  %endmacro
  3469                                  %macro                  upperCaseString 0
  3470                                                          mov     al,eUpperCaseString                             ;function code
  3471                                                          int     _svc                                            ;invoke OS service
  3472                                  %endmacro
  3473                                  ;=======================================================================================================================
  3474                                  ;
  3475                                  ;       Kernel Function Library
  3476                                  ;
  3477                                  ;=======================================================================================================================
  3478                                  ;=======================================================================================================================
  3479                                  ;
  3480                                  ;       Date and Time Helper Routines
  3481                                  ;
  3482                                  ;       GetYear
  3483                                  ;       IsLeapYear
  3484                                  ;       PutDateString
  3485                                  ;       PutDayString
  3486                                  ;       PutHourString
  3487                                  ;       PutMinuteString
  3488                                  ;       PutMonthString
  3489                                  ;       PutMonthNameString
  3490                                  ;       PutSecondString
  3491                                  ;       PutTimeString
  3492                                  ;       PutWeekdayString
  3493                                  ;       PutWeekdayNameString
  3494                                  ;       PutYearString
  3495                                  ;
  3496                                  ;=======================================================================================================================
  3497                                  ;-----------------------------------------------------------------------------------------------------------------------
  3498                                  ;
  3499                                  ;       Routine:        GetYear
  3500                                  ;
  3501                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3502                                  ;
  3503                                  ;       In:             DS:EBX  DATETIME address
  3504                                  ;
  3505                                  ;       Out:            ECX     year
  3506                                  ;
  3507                                  ;-----------------------------------------------------------------------------------------------------------------------
  3508                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3509                                                          imul    ecx,100                                         ;century * 100
  3510                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3511                                                          add     ecx,eax                                         ;year (YYYY)
  3512                                                          ret                                                     ;return
  3513                                  ;-----------------------------------------------------------------------------------------------------------------------
  3514                                  ;
  3515                                  ;       Routine:        IsLeapYear
  3516                                  ;
  3517                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3518                                  ;
  3519                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3520                                  ;
  3521                                  ;       Out:            ECX     0 = not a leap year
  3522                                  ;                               1 = leap year
  3523                                  ;
  3524                                  ;-----------------------------------------------------------------------------------------------------------------------
  3525                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3526                                                          mov     eax,ecx                                         ;EAX = YYYY
  3527                                                          xor     ecx,ecx                                         ;assume not leap year
  3528                                                          test    al,00000011b                                    ;multiple of four?
  3529                                                          jnz     .no                                             ;no, branch
  3530                                                          mov     dl,100                                          ;divisor
  3531                                                          div     dl                                              ;divide by 100
  3532                                                          test    ah,ah                                           ;multiple of 100?
  3533                                                          jnz     .yes                                            ;yes, branch
  3534                                                          test    al,00000011b                                    ;multiple of 400?
  3535                                                          jnz     .no                                             ;no, branch
  3536                                  .yes                    inc     ecx                                             ;indicate leap
  3537                                  .no                     ret                                                     ;return
  3538                                  ;-----------------------------------------------------------------------------------------------------------------------
  3539                                  ;
  3540                                  ;       Routine:        PutDateString
  3541                                  ;
  3542                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3543                                  ;                       structure at ds:ebx.
  3544                                  ;
  3545                                  ;       In:             DS:EBX  DATETIME address
  3546                                  ;                       DS:EDX  output buffer address
  3547                                  ;
  3548                                  ;-----------------------------------------------------------------------------------------------------------------------
  3549                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3550                                                          push    edi                                             ;
  3551                                                          push    es                                              ;
  3552                                                          push    ds                                              ;store data selector ...
  3553                                                          pop     es                                              ;... in extra segment reg
  3554                                                          mov     edi,edx                                         ;output buffer address
  3555                                                          mov     cl,10                                           ;divisor
  3556                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3557                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3558                                                          div     cl                                              ;AH = rem; AL = quotient
  3559                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3560                                                          cld                                                     ;forward strings
  3561                                                          stosd                                                   ;store "mm/"nul
  3562                                                          dec     edi                                             ;address of terminator
  3563                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3564                                                          div     cl                                              ;AH = rem; AL = quotient
  3565                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3566                                                          stosd                                                   ;store "dd/"nul
  3567                                                          dec     edi                                             ;address of terminator
  3568                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3569                                                          div     cl                                              ;AH = rem; AL = quotient
  3570                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3571                                                          stosd                                                   ;store "cc/"null
  3572                                                          dec     edi                                             ;address of terminator
  3573                                                          dec     edi                                             ;address of delimiter
  3574                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3575                                                          div     cl                                              ;AH = rem; AL = quotient
  3576                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3577                                                          stosb                                                   ;store quotient
  3578                                                          mov     al,ah                                           ;remainder
  3579                                                          stosb                                                   ;store remainder
  3580                                                          xor     al,al                                           ;null terminator
  3581                                                          stosb                                                   ;store terminator
  3582                                                          pop     es                                              ;restore non-volatile regs
  3583                                                          pop     edi                                             ;
  3584                                                          pop     ecx                                             ;
  3585                                                          ret                                                     ;return
  3586                                  ;-----------------------------------------------------------------------------------------------------------------------
  3587                                  ;
  3588                                  ;       Routine:        PutDayString
  3589                                  ;
  3590                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3591                                  ;                       structure at ds:ebx.
  3592                                  ;
  3593                                  ;       In:             DS:EBX  DATETIME address
  3594                                  ;                       DS:EDX  output buffer address
  3595                                  ;
  3596                                  ;-----------------------------------------------------------------------------------------------------------------------
  3597                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3598                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3599                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3600                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3601                                                          pop     ecx                                             ;
  3602                                                          ret                                                     ;return
  3603                                  ;-----------------------------------------------------------------------------------------------------------------------
  3604                                  ;
  3605                                  ;       Routine:        PutHourString
  3606                                  ;
  3607                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3608                                  ;                       structure at ds:ebx.
  3609                                  ;
  3610                                  ;       In:             DS:EBX  DATETIME address
  3611                                  ;                       DS:EDX  output buffer address
  3612                                  ;
  3613                                  ;-----------------------------------------------------------------------------------------------------------------------
  3614                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3615                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3616                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3617                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3618                                                          pop     ecx                                             ;
  3619                                                          ret                                                     ;return
  3620                                  ;-----------------------------------------------------------------------------------------------------------------------
  3621                                  ;
  3622                                  ;       Routine:        PutMinuteString
  3623                                  ;
  3624                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3625                                  ;                       structure at ds:ebx.
  3626                                  ;
  3627                                  ;       In:             DS:EBX  DATETIME address
  3628                                  ;                       DS:EDX  output buffer address
  3629                                  ;
  3630                                  ;-----------------------------------------------------------------------------------------------------------------------
  3631                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3632                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3633                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3634                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3635                                                          pop     ecx                                             ;
  3636                                                          ret                                                     ;return
  3637                                  ;-----------------------------------------------------------------------------------------------------------------------
  3638                                  ;
  3639                                  ;       Routine:        PutMonthString
  3640                                  ;
  3641                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3642                                  ;                       structure at ds:ebx.
  3643                                  ;
  3644                                  ;       In:             DS:EBX  DATETIME address
  3645                                  ;                       DS:EDX  output buffer address
  3646                                  ;
  3647                                  ;-----------------------------------------------------------------------------------------------------------------------
  3648                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3649                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3650                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3651                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3652                                                          pop     ecx                                             ;
  3653                                                          ret                                                     ;return
  3654                                  ;-----------------------------------------------------------------------------------------------------------------------
  3655                                  ;
  3656                                  ;       Routine:        PutMonthNameString
  3657                                  ;
  3658                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3659                                  ;                       structure at ds:ebx.
  3660                                  ;
  3661                                  ;       In:             DS:EBX  DATETIME address
  3662                                  ;                       DS:EDX  output buffer address
  3663                                  ;
  3664                                  ;-----------------------------------------------------------------------------------------------------------------------
  3665                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3666                                                          push    edi                                             ;
  3667                                                          push    ds                                              ;
  3668                                                          push    es                                              ;
  3669                                                          push    ds                                              ;load data selector ...
  3670                                                          pop     es                                              ;... into extra segment
  3671                                                          mov     edi,edx                                         ;output buffer address
  3672                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3673                                                          dec     eax                                             ;month (0-11)
  3674                                                          shl     eax,2                                           ;offset into month name lookup table
  3675                                                          push    cs                                              ;load code selector ...
  3676                                                          pop     ds                                              ;... into data segment
  3677                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3678                                                          cld                                                     ;forward strings
  3679                                  .10                     lodsb                                                   ;name character
  3680                                                          stosb                                                   ;store in output buffer
  3681                                                          test    al,al                                           ;end of string?
  3682                                                          jnz     .10                                             ;no, continue
  3683                                                          pop     es                                              ;restore non-volatile regs
  3684                                                          pop     ds                                              ;
  3685                                                          pop     edi                                             ;
  3686                                                          pop     esi                                             ;
  3687                                                          ret                                                     ;return
  3688                                  ;-----------------------------------------------------------------------------------------------------------------------
  3689                                  ;
  3690                                  ;       Routine:        PutSecondString
  3691                                  ;
  3692                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3693                                  ;                       structure at ds:ebx.
  3694                                  ;
  3695                                  ;       In:             DS:EBX  DATETIME address
  3696                                  ;                       DS:EDX  output buffer address
  3697                                  ;
  3698                                  ;-----------------------------------------------------------------------------------------------------------------------
  3699                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3700                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3701                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3702                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3703                                                          pop     ecx                                             ;
  3704                                                          ret                                                     ;return
  3705                                  ;-----------------------------------------------------------------------------------------------------------------------
  3706                                  ;
  3707                                  ;       Routine:        PutTimeString
  3708                                  ;
  3709                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3710                                  ;                       structure at ds:ebx.
  3711                                  ;
  3712                                  ;       In:             DS:EBX  DATETIME address
  3713                                  ;                       DS:EDX  output buffer address
  3714                                  ;
  3715                                  ;-----------------------------------------------------------------------------------------------------------------------
  3716                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3717                                                          push    edi                                             ;
  3718                                                          push    es                                              ;
  3719                                                          push    ds                                              ;store data selector ...
  3720                                                          pop     es                                              ;... in extra segment reg
  3721                                                          mov     edi,edx                                         ;output buffer address
  3722                                                          mov     cl,10                                           ;divisor
  3723                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3724                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3725                                                          div     cl                                              ;ah = rem; al = quotient
  3726                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3727                                                          cld                                                     ;forward strings
  3728                                                          stosd                                                   ;store "mm/"nul
  3729                                                          dec     edi                                             ;address of terminator
  3730                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3731                                                          div     cl                                              ;ah = rem; al = quotient
  3732                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3733                                                          stosd                                                   ;store "dd/"nul
  3734                                                          dec     edi                                             ;address of terminator
  3735                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3736                                                          div     cl                                              ;ah = rem; al = quotient
  3737                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3738                                                          stosb                                                   ;store quotient
  3739                                                          mov     al,ah                                           ;remainder
  3740                                                          stosb                                                   ;store remainder
  3741                                                          xor     al,al                                           ;null terminator
  3742                                                          stosb                                                   ;store terminator
  3743                                                          pop     es                                              ;restore non-volatile regs
  3744                                                          pop     edi                                             ;
  3745                                                          pop     ecx                                             ;
  3746                                                          ret                                                     ;return
  3747                                  ;-----------------------------------------------------------------------------------------------------------------------
  3748                                  ;
  3749                                  ;       Routine:        PutWeekdayString
  3750                                  ;
  3751                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3752                                  ;                       structure at ds:ebx.
  3753                                  ;
  3754                                  ;       In:             DS:EBX  DATETIME address
  3755                                  ;                       DS:EDX  output buffer address
  3756                                  ;
  3757                                  ;-----------------------------------------------------------------------------------------------------------------------
  3758                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3759                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3760                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3761                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3762                                                          pop     ecx                                             ;
  3763                                                          ret                                                     ;return
  3764                                  ;-----------------------------------------------------------------------------------------------------------------------
  3765                                  ;
  3766                                  ;       Routine:        PutWeekdayNameString
  3767                                  ;
  3768                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3769                                  ;                       structure at ds:ebx.
  3770                                  ;
  3771                                  ;       In:             DS:EBX  DATETIME address
  3772                                  ;                       DS:EDX  output buffer address
  3773                                  ;
  3774                                  ;-----------------------------------------------------------------------------------------------------------------------
  3775                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3776                                                          push    edi                                             ;
  3777                                                          push    ds                                              ;
  3778                                                          push    es                                              ;
  3779                                                          push    ds                                              ;load data selector ...
  3780                                                          pop     es                                              ;... into extra segment
  3781                                                          mov     edi,edx                                         ;output buffer address
  3782                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3783                                                          shl     eax,2                                           ;offset into day name lookup table
  3784                                                          push    cs                                              ;load code selector ...
  3785                                                          pop     ds                                              ;... into data segment
  3786                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3787                                                          cld                                                     ;forward strings
  3788                                  .10                     lodsb                                                   ;name character
  3789                                                          stosb                                                   ;store in output buffer
  3790                                                          test    al,al                                           ;end of string?
  3791                                                          jnz     .10                                             ;no, continue
  3792                                                          pop     es                                              ;restore non-volatile regs
  3793                                                          pop     ds                                              ;
  3794                                                          pop     edi                                             ;
  3795                                                          pop     esi                                             ;
  3796                                                          ret                                                     ;return
  3797                                  ;-----------------------------------------------------------------------------------------------------------------------
  3798                                  ;
  3799                                  ;       Routine:        PutYearString
  3800                                  ;
  3801                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3802                                  ;                       structure at ds:ebx.
  3803                                  ;
  3804                                  ;       In:             DS:EBX  DATETIME address
  3805                                  ;                       DS:EDX  output buffer address
  3806                                  ;
  3807                                  ;-----------------------------------------------------------------------------------------------------------------------
  3808                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3809                                                          call    GetYear                                         ;ECX = YYYY
  3810                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3811                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3812                                                          pop     ecx                                             ;restore non-volatile regs
  3813                                                          ret                                                     ;return
  3814                                  ;-----------------------------------------------------------------------------------------------------------------------
  3815                                  ;
  3816                                  ;       Day Names
  3817                                  ;
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819                                  czSunday                db      "Sunday",0
  3820                                  czMonday                db      "Monday",0
  3821                                  czTuesday               db      "Tuesday",0
  3822                                  czWednesday             db      "Wednesday",0
  3823                                  czThursday              db      "Thursday",0
  3824                                  czFriday                db      "Friday",0
  3825                                  czSaturday              db      "Saturday",0
  3826                                  ;-----------------------------------------------------------------------------------------------------------------------
  3827                                  ;
  3828                                  ;       Month Names
  3829                                  ;
  3830                                  ;-----------------------------------------------------------------------------------------------------------------------
  3831                                  czJanuary               db      "January",0
  3832                                  czFebruary              db      "February",0
  3833                                  czMarch                 db      "March",0
  3834                                  czApril                 db      "April",0
  3835                                  czMay                   db      "May",0
  3836                                  czJune                  db      "June",0
  3837                                  czJuly                  db      "July",0
  3838                                  czAugust                db      "August",0
  3839                                  czSeptember             db      "September",0
  3840                                  czOctober               db      "October",0
  3841                                  czNovember              db      "November",0
  3842                                  czDecember              db      "December",0
  3843                                  ;-----------------------------------------------------------------------------------------------------------------------
  3844                                  ;
  3845                                  ;       Day Names Lookup Table
  3846                                  ;
  3847                                  ;-----------------------------------------------------------------------------------------------------------------------
  3848                                                          align   4
  3849                                  tDayNames               equ     $
  3850                                                          dd      czSunday
  3851                                                          dd      czMonday
  3852                                                          dd      czTuesday
  3853                                                          dd      czWednesday
  3854                                                          dd      czThursday
  3855                                                          dd      czFriday
  3856                                                          dd      czSaturday
  3857                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3858                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3859                                  ;-----------------------------------------------------------------------------------------------------------------------
  3860                                  ;
  3861                                  ;       Month Names Lookup Table
  3862                                  ;
  3863                                  ;-----------------------------------------------------------------------------------------------------------------------
  3864                                                          align   4
  3865                                  tMonthNames             equ     $
  3866                                                          dd      czJanuary
  3867                                                          dd      czFebruary
  3868                                                          dd      czMarch
  3869                                                          dd      czApril
  3870                                                          dd      czMay
  3871                                                          dd      czJune
  3872                                                          dd      czJuly
  3873                                                          dd      czAugust
  3874                                                          dd      czSeptember
  3875                                                          dd      czOctober
  3876                                                          dd      czNovember
  3877                                                          dd      czDecember
  3878                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3879                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3880                                  ;=======================================================================================================================
  3881                                  ;
  3882                                  ;       Memory Helper Routines
  3883                                  ;
  3884                                  ;       AllocateMemory
  3885                                  ;       FreeMemory
  3886                                  ;
  3887                                  ;=======================================================================================================================
  3888                                  ;-----------------------------------------------------------------------------------------------------------------------
  3889                                  ;
  3890                                  ;       Routine:        AllocateMemory
  3891                                  ;
  3892                                  ;       Description:    This routine allocates a memory block for the given task.
  3893                                  ;
  3894                                  ;       In:             ECX     bytes of memory to allocate
  3895                                  ;
  3896                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3897                                  ;                               0       unable to allocate memory
  3898                                  ;
  3899                                  ;-----------------------------------------------------------------------------------------------------------------------
  3900                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3901                                                          push    ecx                                             ;
  3902                                                          push    esi                                             ;
  3903                                                          push    ds                                              ;
  3904                                  ;
  3905                                  ;       Address kernel memory structures
  3906                                  ;
  3907                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3908                                                          pop     ds                                              ;... into data segment reg
  3909                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3910                                  ;
  3911                                  ;       Set requested size to minimum block size if requested size is too small.
  3912                                  ;
  3913                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3914                                                          jae     .10                                             ;no, branch
  3915                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3916                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3917                                  ;
  3918                                  ;       Find the first free memory block large enough to satisfy the request.
  3919                                  ;
  3920                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3921                                  .20                     test    eax,eax                                         ;end of free block chain?
  3922                                                          jz      .220                                            ;yes, branch
  3923                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3924                                                          jbe     .30                                             ;yes, branch
  3925                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3926                                                          jmp     .20                                             ;continue
  3927                                  ;-----------------------------------------------------------------------------------------------------------------------
  3928                                  ;
  3929                                  ;       Address the previous and next free memory blocks.
  3930                                  ;
  3931                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3932                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3933                                  ;
  3934                                  ;       Remove the free memory block from the forward free memory block chain.
  3935                                  ;
  3936                                                          test    ebx,ebx                                         ;any previous free memory block?
  3937                                                          jz      .40                                             ;no, branch
  3938                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3939                                                          jmp     .50                                             ;continue
  3940                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3941                                  ;
  3942                                  ;       Remove the free memory block from the reverse free memory block chain.
  3943                                  ;
  3944                                  .50                     test    edx,edx                                         ;any next free memory block?
  3945                                                          jz      .60                                             ;no, branch
  3946                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3947                                                          jmp     .70                                             ;continue
  3948                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3949                                  ;-----------------------------------------------------------------------------------------------------------------------
  3950                                  ;
  3951                                  ;       Determine if the free memory block can be split.
  3952                                  ;
  3953                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3954                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3955                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3956                                                          jb      .150                                            ;no, branch
  3957                                  ;
  3958                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3959                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3960                                  ;       of the requested memory size.
  3961                                  ;
  3962                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3963                                                          mov     edx,eax                                         ;memory block address
  3964                                                          add     edx,ecx                                         ;address new new next contig block
  3965                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3966                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3967                                  ;
  3968                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3969                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3970                                  ;
  3971                                                          jecxz   .80                                             ;no next contig, branch
  3972                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3973                                                          jmp     .90                                             ;continue
  3974                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3975                                  ;
  3976                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3977                                  ;
  3978                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3979                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3980                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3981                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3982                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3983                                                          xor     ebx,ebx                                         ;zero register
  3984                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3985                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3986                                  ;
  3987                                  ;       Find the proper location in the free block chain for the new free block
  3988                                  ;
  3989                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3990                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3991                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3992                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3993                                                          jbe     .110                                            ;yes, branch
  3994                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3995                                                          jmp     .100                                            ;continue
  3996                                  ;
  3997                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3998                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3999                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  4000                                  ;       block of hte next block, if there is one.
  4001                                  ;
  4002                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  4003                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  4004                                                          jecxz   .120                                            ;branch if no next block
  4005                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  4006                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  4007                                                          jmp     .130                                            ;continue
  4008                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  4009                                  ;
  4010                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  4011                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  4012                                  ;       last user block pointers if necessary.
  4013                                  ;
  4014                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  4015                                                          test    ebx,ebx                                         ;is there a previous block?
  4016                                                          jz      .140                                            ;no, branch
  4017                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  4018                                                          jmp     .150                                            ;continue
  4019                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  4020                                  ;
  4021                                  ;       Update the newly allocated block's owner and signature.
  4022                                  ;
  4023                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  4024                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  4025                                                          xor     edx,edx                                         ;zero register
  4026                                                          str     dx                                              ;load the task state register
  4027                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  4028                                  ;
  4029                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  4030                                  ;
  4031                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  4032                                  .160                    jecxz   .180                                            ;branch if at end of chain
  4033                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  4034                                                          jb      .180                                            ;branch if block belongs to next task
  4035                                                          je      .170                                            ;branch if block belongs to this task
  4036                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  4037                                                          jmp     .160                                            ;continue
  4038                                  ;
  4039                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  4040                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  4041                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  4042                                  ;       place to insert the block.
  4043                                  ;
  4044                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  4045                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  4046                                                          jbe     .180                                            ;yes, branch
  4047                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  4048                                                          test    ecx,ecx                                         ;end of chain?
  4049                                                          jz      .180                                            ;yes, branch
  4050                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  4051                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  4052                                                          je      .170                                            ;yes, continue search
  4053                                  ;
  4054                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  4055                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  4056                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  4057                                  ;       do have a previous-block, we update that block's next-block pointer.
  4058                                  ;
  4059                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  4060                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  4061                                                          jecxz   .190                                            ;branch if no next-task block
  4062                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  4063                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  4064                                                          jmp     .200                                            ;continue
  4065                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  4066                                  ;
  4067                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  4068                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  4069                                  ;       global first and/or last user-block pointers if necessary.
  4070                                  ;
  4071                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  4072                                                          test    ebx,ebx                                         ;do we have a previous task block?
  4073                                                          jz      .210                                            ;no, branch
  4074                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  4075                                                          jmp     .220                                            ;continue
  4076                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  4077                                  ;
  4078                                  ;       Restore registers and return to caller.
  4079                                  ;
  4080                                  .220                    pop     ds                                              ;restore non-volatie regs
  4081                                                          pop     esi                                             ;
  4082                                                          pop     ecx                                             ;
  4083                                                          pop     ebx                                             ;
  4084                                                          ret                                                     ;return
  4085                                  ;-----------------------------------------------------------------------------------------------------------------------
  4086                                  ;
  4087                                  ;       Routine:        FreeMemory
  4088                                  ;
  4089                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  4090                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  4091                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  4092                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  4093                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  4094                                  ;
  4095                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  4096                                  ;
  4097                                  ;       Out:            EAX     -1      invalid memory block
  4098                                  ;                               0       memory block freed
  4099                                  ;
  4100                                  ;-----------------------------------------------------------------------------------------------------------------------
  4101                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  4102                                                          push    ecx                                             ;
  4103                                                          push    esi                                             ;
  4104                                                          push    edi                                             ;
  4105                                                          push    ds                                              ;
  4106                                                          push    es                                              ;
  4107                                  ;
  4108                                  ;       Address the root memory structure
  4109                                  ;
  4110                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4111                                                          pop     es                                              ;... into extra segment reg
  4112                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4113                                                          pop     ds                                              ;... into data segment reg
  4114                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  4115                                                          mov     edi,edx                                         ;memory block address
  4116                                  ;
  4117                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  4118                                  ;
  4119                                                          xor     eax,eax                                         ;indicate success
  4120                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  4121                                                          je      .240                                            ;yes, branch
  4122                                                          dec     eax                                             ;indicate failure
  4123                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  4124                                                          jne     .240                                            ;no, branch
  4125                                  ;-----------------------------------------------------------------------------------------------------------------------
  4126                                  ;
  4127                                  ;       Unlink the USER memory block.
  4128                                  ;
  4129                                  ;-----------------------------------------------------------------------------------------------------------------------
  4130                                  ;
  4131                                  ;       Set the block signature. Reset owner.
  4132                                  ;
  4133                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  4134                                                          xor     eax,eax                                         ;zero register
  4135                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  4136                                  ;
  4137                                  ;       Wipe user area.
  4138                                  ;
  4139                                                          push    edi                                             ;save block address
  4140                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  4141                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  4142                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  4143                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  4144                                                          rep     stosb                                           ;clear memory
  4145                                                          pop     edi                                             ;restore block address
  4146                                  ;
  4147                                  ;       Address the preceding and following USER memory blocks
  4148                                  ;
  4149                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  4150                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  4151                                  ;
  4152                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  4153                                  ;       pointer to point to the USER block following this block.
  4154                                  ;
  4155                                                          test    ebx,ebx                                         ;is there a previous block?
  4156                                                          jz      .10                                             ;no, branch
  4157                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  4158                                                          jmp     .20                                             ;continue
  4159                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  4160                                  ;
  4161                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  4162                                  ;       pointer to point to the USER block preceding this block.
  4163                                  ;
  4164                                  .20                     jecxz   .30                                             ;branch if no next block
  4165                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  4166                                                          jmp     .40                                             ;continue
  4167                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  4168                                  ;-----------------------------------------------------------------------------------------------------------------------
  4169                                  ;
  4170                                  ;       Merge with a previous contiguous FREE memory block.
  4171                                  ;
  4172                                  ;-----------------------------------------------------------------------------------------------------------------------
  4173                                  ;
  4174                                  ;       Address the preceding and following contiguous memory blocks.
  4175                                  ;
  4176                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  4177                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  4178                                  ;
  4179                                  ;       Verify we have a previous contiguous FREE block.
  4180                                  ;
  4181                                                          test    ebx,ebx                                         ;is there a previous block?
  4182                                                          jz      .100                                            ;no, branch
  4183                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  4184                                                          jne     .100                                            ;no, branch
  4185                                  ;
  4186                                  ;       Update adjacent block's contiguous pointers.
  4187                                  ;
  4188                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  4189                                                          jecxz   .50                                             ;branch if no next contiguous block
  4190                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  4191                                                          jmp     .60                                             ;continue
  4192                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  4193                                  ;
  4194                                  ;       Update the size of the merged FREE block.
  4195                                  ;
  4196                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  4197                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  4198                                  ;
  4199                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  4200                                  ;
  4201                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  4202                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  4203                                                          rep     stosb                                           ;clear memory header
  4204                                                          mov     edi,ebx                                         ;current block is now previous block
  4205                                  ;-----------------------------------------------------------------------------------------------------------------------
  4206                                  ;
  4207                                  ;       Unlink the previous contiguous FREE memory block
  4208                                  ;
  4209                                  ;-----------------------------------------------------------------------------------------------------------------------
  4210                                  ;
  4211                                  ;       Address the preceding and following USER memory blocks
  4212                                  ;
  4213                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  4214                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  4215                                  ;
  4216                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  4217                                  ;       block pointer.
  4218                                  ;
  4219                                                          test    ebx,ebx                                         ;is there a previous block?
  4220                                                          jz      .70                                             ;no, branch
  4221                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  4222                                                          jmp     .80                                             ;branch
  4223                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  4224                                  ;
  4225                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  4226                                  ;       pointer.
  4227                                  ;
  4228                                  .80                     jecxz   .90                                             ;branch if no next block
  4229                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  4230                                                          jmp     .100                                            ;continue
  4231                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  4232                                  ;-----------------------------------------------------------------------------------------------------------------------
  4233                                  ;
  4234                                  ;       Merge with a following contiguous FREE memory block.
  4235                                  ;
  4236                                  ;-----------------------------------------------------------------------------------------------------------------------
  4237                                  ;
  4238                                  ;       Verify we have a following contiguous FREE block.
  4239                                  ;
  4240                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  4241                                                          jecxz   .170                                            ;branch if no next contiguous block
  4242                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  4243                                                          jne     .170                                            ;no, branch
  4244                                  ;
  4245                                  ;       Add the size of the following adjacent FREE block to this block's size.
  4246                                  ;
  4247                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  4248                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  4249                                  ;
  4250                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  4251                                  ;
  4252                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  4253                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  4254                                                          test    eax,eax                                         ;does a block follow the next contig blk
  4255                                                          jz      .110                                            ;no, branch
  4256                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  4257                                                          jmp     .120                                            ;continue
  4258                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  4259                                  ;-----------------------------------------------------------------------------------------------------------------------
  4260                                  ;
  4261                                  ;       Unlink the following contiguous FREE memory block
  4262                                  ;
  4263                                  ;-----------------------------------------------------------------------------------------------------------------------
  4264                                  ;
  4265                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  4266                                  ;
  4267                                  .120                    push    edi                                             ;save this block
  4268                                                          mov     edi,ecx                                         ;next contiguous block
  4269                                                          push    ecx                                             ;save next contiguous block
  4270                                  ;
  4271                                  ;       Address the preceding and following USER memory blocks
  4272                                  ;
  4273                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  4274                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  4275                                  ;
  4276                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  4277                                  ;       block pointer.
  4278                                  ;
  4279                                                          test    ebx,ebx                                         ;is there a previous block?
  4280                                                          jz      .130                                            ;no, branch
  4281                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  4282                                                          jmp     .140                                            ;branch
  4283                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  4284                                  ;
  4285                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  4286                                  ;       pointer.
  4287                                  ;
  4288                                  .140                    jecxz   .150                                            ;branch if no next block
  4289                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  4290                                                          jmp     .160                                            ;continue
  4291                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  4292                                  ;
  4293                                  ;       Clear next contiguous block's header
  4294                                  ;
  4295                                  .160                    pop     edi                                             ;next congiguous block pointer
  4296                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  4297                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  4298                                                          rep     stosb                                           ;clear memory header
  4299                                                          pop     edi                                             ;this block's pointer
  4300                                  ;-----------------------------------------------------------------------------------------------------------------------
  4301                                  ;
  4302                                  ;       Insert the final FREE block back into the block chain.
  4303                                  ;
  4304                                  ;-----------------------------------------------------------------------------------------------------------------------
  4305                                  ;
  4306                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  4307                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  4308                                  ;       all are smaller in size.
  4309                                  ;
  4310                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  4311                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  4312                                  .180                    jecxz   .190                                            ;exit if no ptr
  4313                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  4314                                                          jb      .190                                            ;yes, branch
  4315                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  4316                                                          jmp     .180                                            ;continue
  4317                                  ;
  4318                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  4319                                  ;       larger free block. Update the next block's previous block pointer.
  4320                                  ;
  4321                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  4322                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  4323                                                          jecxz   .200                                            ;branch if no block found
  4324                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  4325                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  4326                                                          jmp     .210                                            ;continue
  4327                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  4328                                  ;
  4329                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  4330                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  4331                                  ;       next pointer.
  4332                                  ;
  4333                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  4334                                                          test    ebx,ebx                                         ;do we have a previous block?
  4335                                                          jz      .220                                            ;no, branch
  4336                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  4337                                                          jmp     .230                                            ;continue
  4338                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  4339                                  ;
  4340                                  ;       The memory free has completed.
  4341                                  ;
  4342                                  .230                    xor     eax,eax                                         ;indicate success
  4343                                  ;
  4344                                  ;       Restore and return.
  4345                                  ;
  4346                                  .240                    pop     es                                              ;restore non-volatile regs
  4347                                                          pop     ds                                              ;
  4348                                                          pop     edi                                             ;
  4349                                                          pop     esi                                             ;
  4350                                                          pop     ecx                                             ;
  4351                                                          pop     ebx                                             ;
  4352                                                          ret                                                     ;return
  4353                                  ;=======================================================================================================================
  4354                                  ;
  4355                                  ;       String Helper Routines
  4356                                  ;
  4357                                  ;       CompareMemory
  4358                                  ;       UpperCaseString
  4359                                  ;
  4360                                  ;=======================================================================================================================
  4361                                  ;-----------------------------------------------------------------------------------------------------------------------
  4362                                  ;
  4363                                  ;       Routine:        CompareMemory
  4364                                  ;
  4365                                  ;       Description:    This routine compares two byte arrays.
  4366                                  ;
  4367                                  ;       In:             DS:EDX  first source address
  4368                                  ;                       DS:EBX  second source address
  4369                                  ;                       ECX     comparison length
  4370                                  ;
  4371                                  ;       Out:            EDX     first source address
  4372                                  ;                       EBX     second source address
  4373                                  ;                       ECX     0       array 1 = array 2
  4374                                  ;                               <0      array 1 < array 2
  4375                                  ;                               >0      array 1 > array 2
  4376                                  ;
  4377                                  ;-----------------------------------------------------------------------------------------------------------------------
  4378                                  CompareMemory           push    esi                                             ;save non-volatile regs
  4379                                                          push    edi                                             ;
  4380                                                          push    es                                              ;
  4381                                                          push    ds                                              ;copy DS
  4382                                                          pop     es                                              ;... to ES
  4383                                                          mov     esi,edx                                         ;first source address
  4384                                                          mov     edi,ebx                                         ;second source address
  4385                                                          cld                                                     ;forward strings
  4386                                                          rep     cmpsb                                           ;compare bytes
  4387                                                          mov     al,0                                            ;default result
  4388                                                          jz      .10                                             ;branch if arrays equal
  4389                                                          mov     al,1                                            ;positive result
  4390                                                          jnc     .10                                             ;branch if target > source
  4391                                                          mov     al,-1                                           ;negative result
  4392                                  .10                     movsx   ecx,al                                          ;extend sign
  4393                                                          pop     es                                              ;restore non-volatile regs
  4394                                                          pop     edi                                             ;
  4395                                                          pop     esi                                             ;
  4396                                                          ret                                                     ;return
  4397                                  ;-----------------------------------------------------------------------------------------------------------------------
  4398                                  ;
  4399                                  ;       Routine:        UpperCaseString
  4400                                  ;
  4401                                  ;       Description:    This routine places all characters in the given string to upper case.
  4402                                  ;
  4403                                  ;       In:             DS:EDX  string address
  4404                                  ;
  4405                                  ;       Out:            EDX     string address
  4406                                  ;
  4407                                  ;-----------------------------------------------------------------------------------------------------------------------
  4408                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  4409                                                          mov     esi,edx                                         ;string address
  4410                                                          cld                                                     ;forward strings
  4411                                  .10                     lodsb                                                   ;string character
  4412                                                          test    al,al                                           ;null?
  4413                                                          jz      .20                                             ;yes, skip ahead
  4414                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4415                                                          jb      .10                                             ;no, continue
  4416                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4417                                                          ja      .10                                             ;no, continue
  4418                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4419                                                          mov     [esi-1],al                                      ;upper character
  4420                                                          jmp     .10                                             ;continue
  4421                                  .20                     pop     esi                                             ;restore non-volatile regs
  4422                                                          ret                                                     ;return
  4423                                  ;=======================================================================================================================
  4424                                  ;
  4425                                  ;       Console Helper Routines
  4426                                  ;
  4427                                  ;       FirstConsoleColumn
  4428                                  ;       GetConsoleChar
  4429                                  ;       GetConsoleString
  4430                                  ;       NextConsoleColumn
  4431                                  ;       NextConsoleRow
  4432                                  ;       PreviousConsoleColumn
  4433                                  ;       PutConsoleChar
  4434                                  ;       PutConsoleHexByte
  4435                                  ;       PutConsoleHexDword
  4436                                  ;       PutConsoleHexWord
  4437                                  ;       PutConsoleOIAChar
  4438                                  ;       PutConsoleOIAShift
  4439                                  ;       PutConsoleString
  4440                                  ;       Yield
  4441                                  ;
  4442                                  ;=======================================================================================================================
  4443                                  ;-----------------------------------------------------------------------------------------------------------------------
  4444                                  ;
  4445                                  ;       Routine:        FirstConsoleColumn
  4446                                  ;
  4447                                  ;       Description:    This routine resets the console column to start of the row.
  4448                                  ;
  4449                                  ;       In:             DS      OS data selector
  4450                                  ;
  4451                                  ;-----------------------------------------------------------------------------------------------------------------------
  4452                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4453                                                          mov     [wbConsoleColumn],al                            ;save column
  4454                                                          ret                                                     ;return
  4455                                  ;-----------------------------------------------------------------------------------------------------------------------
  4456                                  ;
  4457                                  ;       Routine:        GetConsoleChar
  4458                                  ;
  4459                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4460                                  ;
  4461                                  ;       Out:            AL      ASCII character code
  4462                                  ;                       AH      keyboard scan code
  4463                                  ;
  4464                                  ;-----------------------------------------------------------------------------------------------------------------------
  4465                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4466                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4467                                                          or      eax,eax                                         ;do we have a message?
  4468                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4469                                                          push    eax                                             ;save key codes
  4470                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4471                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4472                                                          pop     eax                                             ;restore key codes
  4473                                                          jne     GetConsoleChar                                  ;no, try again
  4474                                                          and     eax,0000ffffh                                   ;mask for key codes
  4475                                                          ret                                                     ;return
  4476                                  ;-----------------------------------------------------------------------------------------------------------------------
  4477                                  ;
  4478                                  ;       Routine:        GetConsoleString
  4479                                  ;
  4480                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4481                                  ;
  4482                                  ;       In:             DS:EDX  target buffer address
  4483                                  ;                       ECX     maximum number of characters to accept
  4484                                  ;                       BH      Bit 0:  1 = echo to terminal
  4485                                  ;                               Bit 1:  1 = break on attention identifier key (F)
  4486                                  ;                       BL      terminating character
  4487                                  ;
  4488                                  ;-----------------------------------------------------------------------------------------------------------------------
  4489                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4490                                                          push    esi                                             ;
  4491                                                          push    edi                                             ;
  4492                                                          push    es                                              ;
  4493                                                          push    ds                                              ;load data segment selector ...
  4494                                                          pop     es                                              ;... into extra segment register
  4495                                                          mov     edi,edx                                         ;edi = target buffer
  4496                                                          push    ecx                                             ;save maximum characters
  4497                                                          xor     al,al                                           ;zero register
  4498                                                          cld                                                     ;forward strings
  4499                                                          rep     stosb                                           ;zero fill buffer
  4500                                                          pop     ecx                                             ;maximum characters
  4501                                                          mov     edi,edx                                         ;edi = target buffer
  4502                                                          mov     esi,edx                                         ;esi = target buffer
  4503                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4504                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4505                                                          cmp     al,bl                                           ;is this the terminator?
  4506                                                          je      .50                                             ;yes, exit
  4507                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4508                                                          jne     .30                                             ;no, skip ahead
  4509                                                          cmp     esi,edi                                         ;at start of buffer?
  4510                                                          je      .20                                             ;yes, get next character
  4511                                                          dec     edi                                             ;backup target pointer
  4512                                                          mov     byte [edi],0                                    ;zero previous character
  4513                                                          inc     ecx                                             ;increment remaining chars
  4514                                                          test    bh,1                                            ;echo to console?
  4515                                                          jz      .20                                             ;no, get next character
  4516                                                          call    PreviousConsoleColumn                           ;backup console position
  4517                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4518                                                          call    PutConsoleChar                                  ;write space to console
  4519                                                          call    PlaceCursor                                     ;position the cursor
  4520                                                          jmp     .20                                             ;get next character
  4521                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4522                                                          jb      .20                                             ;no, get another character
  4523                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4524                                                          ja      .20                                             ;no, get another character
  4525                                                          stosb                                                   ;store character in buffer
  4526                                                          test    bh,1                                            ;echo to console?
  4527                                                          jz      .40                                             ;no, skip ahead
  4528                                                          call    PutConsoleChar                                  ;write character to console
  4529                                                          call    NextConsoleColumn                               ;advance console position
  4530                                                          call    PlaceCursor                                     ;position the cursor
  4531                                  .40                     dec     ecx                                             ;decrement remaining chars
  4532                                                          jmp     .10                                             ;next
  4533                                  .50                     xor     al,al                                           ;null
  4534                                                          stosb                                                   ;terminate buffer
  4535                                                          pop     es                                              ;restore non-volatile regs
  4536                                                          pop     edi                                             ;
  4537                                                          pop     esi                                             ;
  4538                                                          pop     ecx                                             ;
  4539                                                          ret                                                     ;return
  4540                                  ;-----------------------------------------------------------------------------------------------------------------------
  4541                                  ;
  4542                                  ;       Routine:        NextConsoleColumn
  4543                                  ;
  4544                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4545                                  ;                       incremented if the end of the current row is reached.
  4546                                  ;
  4547                                  ;       In:             DS      OS data selector
  4548                                  ;
  4549                                  ;-----------------------------------------------------------------------------------------------------------------------
  4550                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4551                                                          inc     al                                              ;increment column
  4552                                                          mov     [wbConsoleColumn],al                            ;save column
  4553                                                          cmp     al,ECONCOLS                                     ;end of row?
  4554                                                          jb      .10                                             ;no, skip ahead
  4555                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4556                                                          call    NextConsoleRow                                  ;line feed to next row
  4557                                  .10                     ret                                                     ;return
  4558                                  ;-----------------------------------------------------------------------------------------------------------------------
  4559                                  ;
  4560                                  ;       Routine:        NextConsoleRow
  4561                                  ;
  4562                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4563                                  ;
  4564                                  ;       In:             DS      OS data selector
  4565                                  ;
  4566                                  ;-----------------------------------------------------------------------------------------------------------------------
  4567                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4568                                                          inc     al                                              ;increment row
  4569                                                          mov     [wbConsoleRow],al                               ;save row
  4570                                                          cmp     al,ECONROWS                                     ;end of screen?
  4571                                                          jb      .10                                             ;no, skip ahead
  4572                                                          call    ScrollConsoleRow                                ;scroll up one row
  4573                                                          mov     al,[wbConsoleRow]                               ;row
  4574                                                          dec     al                                              ;decrement row
  4575                                                          mov     [wbConsoleRow],al                               ;save row
  4576                                  .10                     ret                                                     ;return
  4577                                  ;-----------------------------------------------------------------------------------------------------------------------
  4578                                  ;
  4579                                  ;       Routine:        PreviousConsoleColumn
  4580                                  ;
  4581                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4582                                  ;                       the column is set to the last position in the row and the row is decremented.
  4583                                  ;
  4584                                  ;       In:             DS      OS data selector
  4585                                  ;
  4586                                  ;-----------------------------------------------------------------------------------------------------------------------
  4587                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4588                                                          or      al,al                                           ;start of row?
  4589                                                          jnz     .10                                             ;no, skip ahead
  4590                                                          mov     ah,[wbConsoleRow]                               ;current row
  4591                                                          or      ah,ah                                           ;top of screen?
  4592                                                          jz      .20                                             ;yes, exit with no change
  4593                                                          dec     ah                                              ;decrement row
  4594                                                          mov     [wbConsoleRow],ah                               ;save row
  4595                                                          mov     al,ECONCOLS                                     ;set maximum column
  4596                                  .10                     dec     al                                              ;decrement column
  4597                                                          mov     [wbConsoleColumn],al                            ;save column
  4598                                  .20                     ret                                                     ;return
  4599                                  ;-----------------------------------------------------------------------------------------------------------------------
  4600                                  ;
  4601                                  ;       Routine:        PutConsoleChar
  4602                                  ;
  4603                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4604                                  ;
  4605                                  ;       In:             AL      ASCII character
  4606                                  ;                       DS      OS data selector
  4607                                  ;
  4608                                  ;-----------------------------------------------------------------------------------------------------------------------
  4609                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4610                                                          push    es                                              ;
  4611                                                          push    EGDTCGA                                         ;load CGA selector ...
  4612                                                          pop     es                                              ;... into extra segment reg
  4613                                                          mov     cl,[wbConsoleColumn]                            ;column
  4614                                                          mov     ch,[wbConsoleRow]                               ;row
  4615                                                          call    SetConsoleChar                                  ;put character at row, column
  4616                                                          pop     es                                              ;restore non-volatile regs
  4617                                                          pop     ecx                                             ;
  4618                                                          ret                                                     ;return
  4619                                  ;-----------------------------------------------------------------------------------------------------------------------
  4620                                  ;
  4621                                  ;       Routine:        PutConsoleHexByte
  4622                                  ;
  4623                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4624                                  ;
  4625                                  ;       In:             AL      byte value
  4626                                  ;                       CL      column
  4627                                  ;                       CH      row
  4628                                  ;                       DS      OS data selector
  4629                                  ;                       ES      CGA selector
  4630                                  ;
  4631                                  ;-----------------------------------------------------------------------------------------------------------------------
  4632                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  4633                                                          shr     al,4                                            ;hi-order nybble
  4634                                                          call    .10                                             ;make ASCII and store
  4635                                                          pop     eax                                             ;byte value
  4636                                                          and     al,0Fh                                          ;lo-order nybble
  4637                                  .10                     or      al,030h                                         ;apply ASCII zone
  4638                                                          cmp     al,03Ah                                         ;numeric?
  4639                                                          jb      .20                                             ;yes, skip ahead
  4640                                                          add     al,7                                            ;add ASCII offset for alpha
  4641                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4642                                                          ret                                                     ;return
  4643                                  ;-----------------------------------------------------------------------------------------------------------------------
  4644                                  ;
  4645                                  ;       Routine:        PutConsoleHexDword
  4646                                  ;
  4647                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4648                                  ;
  4649                                  ;       In:             EAX     value
  4650                                  ;                       CL      column
  4651                                  ;                       CH      row
  4652                                  ;                       DS      OS data selector
  4653                                  ;                       ES      CGA selector
  4654                                  ;
  4655                                  ;-----------------------------------------------------------------------------------------------------------------------
  4656                                  PutConsoleHexDword      push    eax
  4657                                                          shr     eax,16
  4658                                                          call    PutConsoleHexWord
  4659                                                          pop     eax
  4660                                                          call    PutConsoleHexWord
  4661                                                          ret
  4662                                  ;-----------------------------------------------------------------------------------------------------------------------
  4663                                  ;
  4664                                  ;       Routine:        PutConsoleHexWord
  4665                                  ;
  4666                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4667                                  ;
  4668                                  ;       In:             EAX     value
  4669                                  ;                       CL      column
  4670                                  ;                       CH      row
  4671                                  ;                       DS      OS data selector
  4672                                  ;                       ES      CGA selector
  4673                                  ;
  4674                                  ;-----------------------------------------------------------------------------------------------------------------------
  4675                                  PutConsoleHexWord       push    eax
  4676                                                          shr     eax,8
  4677                                                          call    PutConsoleHexByte
  4678                                                          pop     eax
  4679                                                          call    PutConsoleHexByte
  4680                                                          ret
  4681                                  ;-----------------------------------------------------------------------------------------------------------------------
  4682                                  ;
  4683                                  ;       Routine:        PutConsoleOIAChar
  4684                                  ;
  4685                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4686                                  ;
  4687                                  ;       In:             DS      OS data selector
  4688                                  ;
  4689                                  ;-----------------------------------------------------------------------------------------------------------------------
  4690                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4691                                                          push    ecx                                             ;
  4692                                                          push    esi                                             ;
  4693                                                          push    ds                                              ;
  4694                                                          push    es                                              ;
  4695                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4696                                                          pop     ds                                              ;... into data segment register
  4697                                                          push    EGDTCGA                                         ;load CGA selector ...
  4698                                                          pop     es                                              ;... into extra segment register
  4699                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4700                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4701                                                          mov     bl,0                                            ;starting column
  4702                                                          mov     ecx,6                                           ;maximum scan codes
  4703                                  .10                     push    ecx                                             ;save remaining count
  4704                                                          mov     ecx,ebx                                         ;row, column
  4705                                                          lodsb                                                   ;read scan code
  4706                                                          or      al,al                                           ;scan code present?
  4707                                                          jz      .20                                             ;no, skip ahead
  4708                                                          call    PutConsoleHexByte                               ;display scan code
  4709                                                          jmp     .30                                             ;continue
  4710                                  .20                     mov     al,' '                                          ;ASCII space
  4711                                                          call    SetConsoleChar                                  ;display space
  4712                                                          mov     al,' '                                          ;ASCII space
  4713                                                          call    SetConsoleChar                                  ;display space
  4714                                  .30                     add     bl,2                                            ;next column (+2)
  4715                                                          pop     ecx                                             ;restore remaining
  4716                                                          loop    .10                                             ;next code
  4717                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4718                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4719                                                          jb      .40                                             ;no, skip ahead
  4720                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4721                                                          ja      .40                                             ;no, skip ahead
  4722                                                          mov     ch,bh                                           ;OIA row
  4723                                                          mov     cl,40                                           ;character display column
  4724                                                          call    SetConsoleChar                                  ;display ASCII character
  4725                                  .40                     pop     es                                              ;restore non-volatile regs
  4726                                                          pop     ds                                              ;
  4727                                                          pop     esi                                             ;
  4728                                                          pop     ecx                                             ;
  4729                                                          pop     ebx                                             ;
  4730                                                          ret                                                     ;return
  4731                                  ;-----------------------------------------------------------------------------------------------------------------------
  4732                                  ;
  4733                                  ;       Routine:        PutConsoleOIAShift
  4734                                  ;
  4735                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4736                                  ;
  4737                                  ;       In:             BL      shift flags
  4738                                  ;                       BH      lock flags
  4739                                  ;                       DS      OS data selector
  4740                                  ;
  4741                                  ;-----------------------------------------------------------------------------------------------------------------------
  4742                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4743                                                          push    es                                              ;
  4744                                                          push    EGDTCGA                                         ;load CGA selector ...
  4745                                                          pop     es                                              ;... into ES register
  4746                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4747                                                          mov     al,EASCIISPACE                                  ;space is default character
  4748                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4749                                                          jz      .10                                             ;no, skip ahead
  4750                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4751                                  .10                     mov     cl,13                                           ;indicator column
  4752                                                          call    SetConsoleChar                                  ;display ASCII character
  4753                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4754                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4755                                                          jz      .20                                             ;no, skip ahead
  4756                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4757                                  .20                     mov     cl,70                                           ;indicator column
  4758                                                          call    SetConsoleChar                                  ;display ASCII character
  4759                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4760                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4761                                                          jz      .30                                             ;no, skip ahead
  4762                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4763                                  .30                     mov     cl,14                                           ;indicator column
  4764                                                          call    SetConsoleChar                                  ;display ASCII character
  4765                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4766                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4767                                                          jz      .40                                             ;no, skip ahead
  4768                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4769                                  .40                     mov     cl,69                                           ;indicator column
  4770                                                          call    SetConsoleChar                                  ;display ASCII character
  4771                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4772                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4773                                                          jz      .50                                             ;no, skip ahead
  4774                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4775                                  .50                     mov     cl,15                                           ;indicator column
  4776                                                          call    SetConsoleChar                                  ;display ASCII character
  4777                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4778                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4779                                                          jz      .60                                             ;no, skip ahead
  4780                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4781                                  .60                     mov     cl,68                                           ;indicator column
  4782                                                          call    SetConsoleChar                                  ;display ASCII character
  4783                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4784                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4785                                                          jz      .70                                             ;no, skip ahead
  4786                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4787                                  .70                     mov     cl,73                                           ;indicator column
  4788                                                          call    SetConsoleChar                                  ;display ASCII character
  4789                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4790                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4791                                                          jz      .80                                             ;no, skip ahead
  4792                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4793                                  .80                     mov     cl,72                                           ;indicator column
  4794                                                          call    SetConsoleChar                                  ;display ASCII character
  4795                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4796                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4797                                                          jz      .90                                             ;no, skip ahead
  4798                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4799                                  .90                     mov     cl,74                                           ;indicator column
  4800                                                          call    SetConsoleChar                                  ;display ASCII character
  4801                                                          pop     es                                              ;restore non-volatile regs
  4802                                                          pop     ecx                                             ;
  4803                                                          ret                                                     ;return
  4804                                  ;-----------------------------------------------------------------------------------------------------------------------
  4805                                  ;
  4806                                  ;       Routine:        PutConsoleString
  4807                                  ;
  4808                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4809                                  ;                       console position as needed.
  4810                                  ;
  4811                                  ;       In:             EDX     source address
  4812                                  ;                       DS      OS data selector
  4813                                  ;
  4814                                  ;-----------------------------------------------------------------------------------------------------------------------
  4815                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4816                                                          mov     esi,edx                                         ;source address
  4817                                                          cld                                                     ;forward strings
  4818                                  .10                     lodsb                                                   ;ASCII character
  4819                                                          or      al,al                                           ;end of string?
  4820                                                          jz      .40                                             ;yes, skip ahead
  4821                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4822                                                          jne     .20                                             ;no, skip ahead
  4823                                                          call    FirstConsoleColumn                              ;move to start of row
  4824                                                          jmp     .10                                             ;next character
  4825                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4826                                                          jne     .30                                             ;no, skip ahead
  4827                                                          call    NextConsoleRow                                  ;move to next row
  4828                                                          jmp     .10                                             ;next character
  4829                                  .30                     call    PutConsoleChar                                  ;output character to console
  4830                                                          call    NextConsoleColumn                               ;advance to next column
  4831                                                          jmp     .10                                             ;next character
  4832                                  .40                     pop     esi                                             ;restore non-volatile regs
  4833                                                          ret                                                     ;return
  4834                                  ;-----------------------------------------------------------------------------------------------------------------------
  4835                                  ;
  4836                                  ;       Routine:        Yield
  4837                                  ;
  4838                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4839                                  ;
  4840                                  ;-----------------------------------------------------------------------------------------------------------------------
  4841                                  Yield                   sti                                                     ;enable maskagle interrupts
  4842                                                          hlt                                                     ;halt until external interrupt
  4843                                                          ret                                                     ;return
  4844                                  ;=======================================================================================================================
  4845                                  ;
  4846                                  ;       Data-Type Conversion Helper Routines
  4847                                  ;
  4848                                  ;       ByteToHex
  4849                                  ;       DecimalToUnsigned
  4850                                  ;       HexadecimalToUnsigned
  4851                                  ;       PutMACString
  4852                                  ;       UnsignedToDecimalString
  4853                                  ;       UnsignedToHexadecimal
  4854                                  ;
  4855                                  ;=======================================================================================================================
  4856                                  ;-----------------------------------------------------------------------------------------------------------------------
  4857                                  ;
  4858                                  ;       Routine:        ByteToHex
  4859                                  ;
  4860                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of 8-bit binary input.
  4861                                  ;
  4862                                  ;       Input:          DS:ESI  source address of byte
  4863                                  ;                       ES:EDI  target address of ASCIIZ string
  4864                                  ;
  4865                                  ;-----------------------------------------------------------------------------------------------------------------------
  4866                                  ByteToHex               lodsb                                                   ;input byte
  4867                                                          push    eax                                             ;save input byte
  4868                                                          shr     al,4                                            ;hi-order nybble
  4869                                                          call    .10                                             ;make ASCII and store
  4870                                                          pop     eax                                             ;input byte
  4871                                                          and     al,00Fh                                         ;lo-order nybble
  4872                                  .10                     or      al,030h                                         ;ASCII numeral zone
  4873                                                          cmp     al,03Ah                                         ;'A' through 'F'?
  4874                                                          jb      .20                                             ;no, branch
  4875                                                          add     al,7                                            ;ajdust for 'A' through 'F'
  4876                                  .20                     stosb                                                   ;store to output buffer
  4877                                                          ret                                                     ;return
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ;
  4880                                  ;       Routine:        DecimalToUnsigned
  4881                                  ;
  4882                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4883                                  ;
  4884                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4885                                  ;
  4886                                  ;       Output:         EAX     unsigned integer value
  4887                                  ;
  4888                                  ;-----------------------------------------------------------------------------------------------------------------------
  4889                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4890                                                          mov     esi,edx                                         ;source address
  4891                                                          xor     edx,edx                                         ;zero total
  4892                                  .10                     lodsb                                                   ;source byte
  4893                                                          cmp     al,','                                          ;comma?
  4894                                                          je      .10                                             ;yes, ignore
  4895                                                          test    al,al                                           ;end of string?
  4896                                                          jz      .30                                             ;yes, done
  4897                                                          cmp     al,'.'                                          ;decimal point?
  4898                                                          je      .30                                             ;yes, done
  4899                                                          cmp     al,'0'                                          ;numeral?
  4900                                                          jb      .20                                             ;no, invalid string
  4901                                                          cmp     al,'9'                                          ;numeral?
  4902                                                          ja      .20                                             ;no, invalid string
  4903                                                          and     al,00Fh                                         ;mask ASCII zone
  4904                                                          push    eax                                             ;save numeral
  4905                                                          shl     edx,1                                           ;total * 2
  4906                                                          mov     eax,edx                                         ;total * 2
  4907                                                          shl     edx,2                                           ;total * 8
  4908                                                          add     edx,eax                                         ;total * 10
  4909                                                          pop     eax                                             ;restore numeral
  4910                                                          add     edx,eax                                         ;accumulate decimal digit
  4911                                                          xor     eax,eax                                         ;zero register
  4912                                                          jmp     .10                                             ;next
  4913                                  .20                     xor     edx,edx                                         ;zero result on error
  4914                                  .30                     mov     eax,edx                                         ;result
  4915                                                          pop     esi                                             ;restore non-volatile regs
  4916                                                          ret                                                     ;return
  4917                                  ;-----------------------------------------------------------------------------------------------------------------------
  4918                                  ;
  4919                                  ;       Routine:        HexadecimalToUnsigned
  4920                                  ;
  4921                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4922                                  ;
  4923                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4924                                  ;
  4925                                  ;       Output:         EAX     unsigned integer value
  4926                                  ;
  4927                                  ;-----------------------------------------------------------------------------------------------------------------------
  4928                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4929                                                          mov     esi,edx                                         ;source address
  4930                                                          xor     edx,edx                                         ;zero register
  4931                                  .10                     lodsb                                                   ;source byte
  4932                                                          test    al,al                                           ;end of string?
  4933                                                          jz      .30                                             ;yes, branch
  4934                                                          cmp     al,'9'                                          ;hexadecimal?
  4935                                                          jna     .20                                             ;no, skip ahead
  4936                                                          sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  4937                                  .20                     and     eax,00Fh                                        ;remove ascii zone
  4938                                                          shl     edx,4                                           ;previous total x 16
  4939                                                          add     edx,eax                                         ;add prior value x 16
  4940                                                          jmp     .10                                             ;next
  4941                                  .30                     mov     eax,edx                                         ;result
  4942                                                          pop     esi                                             ;restore non-volatile regs
  4943                                                          ret                                                     ;return
  4944                                  ;-----------------------------------------------------------------------------------------------------------------------
  4945                                  ;
  4946                                  ;       Routine:        PutMACString
  4947                                  ;
  4948                                  ;       Description:    This routine creates an ASCIIZ string representing the MAC address at the source address
  4949                                  ;
  4950                                  ;       Input:          ECX     source address of byte
  4951                                  ;                       EDX     target address of ASCIIZ string
  4952                                  ;
  4953                                  ;-----------------------------------------------------------------------------------------------------------------------
  4954                                  PutMACString            push    ecx                                             ;save non-volatile regs
  4955                                                          push    esi                                             ;
  4956                                                          push    edi                                             ;
  4957                                                          mov     edi,edx                                         ;output buffer address
  4958                                                          mov     esi,ecx                                         ;source buffer address
  4959                                                          xor     ecx,ecx                                         ;zero ecx
  4960                                                          mov     cl,5                                            ;bytes that precede dashes
  4961                                  .10                     call    ByteToHex                                       ;store hexadecimal ASCII
  4962                                                          mov     al,EASCIIDASH                                   ;delimiter
  4963                                                          stosb                                                   ;store delimiter
  4964                                                          loop    .10                                             ;next
  4965                                                          call    ByteToHex                                       ;store hexadecimal ASCII
  4966                                                          xor     al,al                                           ;terminator
  4967                                                          stosb                                                   ;store terminator
  4968                                                          pop     edi                                             ;restore non-volatile regs
  4969                                                          pop     esi                                             ;
  4970                                                          pop     ecx                                             ;
  4971                                                          ret                                                     ;return
  4972                                  ;-----------------------------------------------------------------------------------------------------------------------
  4973                                  ;
  4974                                  ;       Routine:        UnsignedToDecimalString
  4975                                  ;
  4976                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4977                                  ;
  4978                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4979                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4980                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4981                                  ;                       ECX     32-bit binary
  4982                                  ;                       DS:EDX  output buffer address
  4983                                  ;
  4984                                  ;-----------------------------------------------------------------------------------------------------------------------
  4985                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4986                                                          push    ecx                                             ;
  4987                                                          push    edi                                             ;
  4988                                                          push    es                                              ;
  4989                                                          push    ds                                              ;load data selector
  4990                                                          pop     es                                              ;... into extra segment reg
  4991                                                          mov     edi,edx                                         ;output buffer address
  4992                                                          and     bh,00001111b                                    ;zero internal flags
  4993                                                          mov     edx,ecx                                         ;binary
  4994                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4995                                                          call    .30                                             ;divide and store
  4996                                                          mov     ecx,100000000                                   ;10^8 divisor
  4997                                                          call    .10                                             ;divide and store
  4998                                                          mov     ecx,10000000                                    ;10^7 divisor
  4999                                                          call    .30                                             ;divide and store
  5000                                                          mov     ecx,1000000                                     ;10^6 divisor
  5001                                                          call    .30                                             ;divide and store
  5002                                                          mov     ecx,100000                                      ;10^5 divisor
  5003                                                          call    .10                                             ;divide and store
  5004                                                          mov     ecx,10000                                       ;10^4 divisor
  5005                                                          call    .30                                             ;divide and store
  5006                                                          mov     ecx,1000                                        ;10^3 divisor
  5007                                                          call    .30                                             ;divide and store
  5008                                                          mov     ecx,100                                         ;10^2 divisor
  5009                                                          call    .10                                             ;divide and store
  5010                                                          mov     ecx,10                                          ;10^2 divisor
  5011                                                          call    .30                                             ;divide and store
  5012                                                          mov     eax,edx                                         ;10^1 remainder
  5013                                                          call    .40                                             ;store
  5014                                                          xor     al,al                                           ;null terminator
  5015                                                          stosb                                                   ;store in output buffer
  5016                                                          pop     es                                              ;restore non-volatile regs
  5017                                                          pop     edi                                             ;
  5018                                                          pop     ecx                                             ;
  5019                                                          pop     ebx                                             ;
  5020                                                          ret                                                     ;return
  5021                                  .10                     test    bh,00000010b                                    ;comma group delims?
  5022                                                          jz      .30                                             ;no, branch
  5023                                                          test    bh,00000001b                                    ;trim leading zeros?
  5024                                                          jz      .20                                             ;no, store delim
  5025                                                          test    bh,00010000b                                    ;non-zero found?
  5026                                                          jz      .30                                             ;no, branch
  5027                                  .20                     mov     al,','                                          ;delimiter
  5028                                                          stosb                                                   ;store delimiter
  5029                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  5030                                                          xor     edx,edx                                         ;zero hi-order
  5031                                                          div     ecx                                             ;divide by power of 10
  5032                                                          test    al,al                                           ;zero?
  5033                                                          jz      .50                                             ;yes, branch
  5034                                                          or      bh,00010000b                                    ;non-zero found
  5035                                  .40                     or      al,030h                                         ;ASCII zone
  5036                                                          stosb                                                   ;store digit
  5037                                                          ret                                                     ;return
  5038                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  5039                                                          jz      .40                                             ;no, store and continue
  5040                                                          test    bh,00010000b                                    ;non-zero found?
  5041                                                          jnz     .40                                             ;yes, store and continue
  5042                                                          ret                                                     ;return
  5043                                  ;-----------------------------------------------------------------------------------------------------------------------
  5044                                  ;
  5045                                  ;       Routine:        UnsignedToHexadecimal
  5046                                  ;
  5047                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  5048                                  ;
  5049                                  ;       Input:          DS:EDX  output buffer address
  5050                                  ;                       ECX     32-bit binary
  5051                                  ;
  5052                                  ;-----------------------------------------------------------------------------------------------------------------------
  5053                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  5054                                                          mov     edi,edx                                         ;output buffer address
  5055                                                          mov     edx,ecx                                         ;32-bit unsigned
  5056                                                          xor     ecx,ecx                                         ;zero register
  5057                                                          mov     cl,8                                            ;nybble count
  5058                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  5059                                                          mov     al,dl                                           ;????bbbb
  5060                                                          and     al,00Fh                                         ;mask out bits 4-7
  5061                                                          or      al,030h                                         ;mask in ascii zone
  5062                                                          cmp     al,03Ah                                         ;A through F?
  5063                                                          jb      .20                                             ;no, skip ahead
  5064                                                          add     al,7                                            ;41h through 46h
  5065                                  .20                     stosb                                                   ;store hexnum
  5066                                                          loop    .10                                             ;next nybble
  5067                                                          xor     al,al                                           ;zero reg
  5068                                                          stosb                                                   ;null terminate
  5069                                                          pop     edi                                             ;restore non-volatile regs
  5070                                                          ret                                                     ;return
  5071                                  ;=======================================================================================================================
  5072                                  ;
  5073                                  ;       Message Queue Helper Routines
  5074                                  ;
  5075                                  ;       GetMessage
  5076                                  ;       PutMessage
  5077                                  ;
  5078                                  ;=======================================================================================================================
  5079                                  ;-----------------------------------------------------------------------------------------------------------------------
  5080                                  ;
  5081                                  ;       Routine:        GetMessage
  5082                                  ;
  5083                                  ;       Description:    This routine reads and removes a message from the message queue.
  5084                                  ;
  5085                                  ;       Out:            EAX     lo-order message data
  5086                                  ;                       EDX     hi-order message data
  5087                                  ;
  5088                                  ;                       CY      0 = message read
  5089                                  ;                               1 = no message to read
  5090                                  ;
  5091                                  ;-----------------------------------------------------------------------------------------------------------------------
  5092                                  GetMessage              push    ebx                                             ;save non-volatile regs
  5093                                                          push    ecx                                             ;
  5094                                                          push    ds                                              ;
  5095                                                          push    ELDTMQ                                          ;load message queue selector ...
  5096                                                          pop     ds                                              ;... into data segment register
  5097                                                          mov     ebx,[MQHead]                                    ;head ptr
  5098                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  5099                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  5100                                                          or      eax,edx                                         ;is queue empty?
  5101                                                          stc                                                     ;assume queue is emtpy
  5102                                                          jz      .20                                             ;yes, skip ahead
  5103                                                          xor     ecx,ecx                                         ;store zero
  5104                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  5105                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  5106                                                          add     ebx,8                                           ;next queue element
  5107                                                          and     ebx,03FCh                                       ;at end of queue?
  5108                                                          jnz     .10                                             ;no, skip ahead
  5109                                                          mov     bl,8                                            ;reset to 1st entry
  5110                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  5111                                                          clc                                                     ;indicate message read
  5112                                  .20                     pop     ds                                              ;restore non-volatile regs
  5113                                                          pop     ecx                                             ;
  5114                                                          pop     ebx                                             ;
  5115                                                          ret                                                     ;return
  5116                                  ;-----------------------------------------------------------------------------------------------------------------------
  5117                                  ;
  5118                                  ;       Routine:        PutMessage
  5119                                  ;
  5120                                  ;       Description:    This routine adds a message to the message queue.
  5121                                  ;
  5122                                  ;       In:             ECX     hi-order data word
  5123                                  ;                       EDX     lo-order data word
  5124                                  ;
  5125                                  ;       Out:            CY      0 = success
  5126                                  ;                               1 = fail: queue is full
  5127                                  ;
  5128                                  ;-----------------------------------------------------------------------------------------------------------------------
  5129                                  PutMessage              push    ds                                              ;save non-volatile regs
  5130                                                          push    ELDTMQ                                          ;load task message queue selector ...
  5131                                                          pop     ds                                              ;... into data segment register
  5132                                                          mov     eax,[MQTail]                                    ;tail ptr
  5133                                                          cmp     dword [eax],0                                   ;is queue full?
  5134                                                          stc                                                     ;assume failure
  5135                                                          jne     .20                                             ;yes, cannot store
  5136                                                          mov     [eax],edx                                       ;store lo-order data
  5137                                                          mov     [eax+4],ecx                                     ;store hi-order data
  5138                                                          add     eax,8                                           ;next queue element adr
  5139                                                          and     eax,03FCh                                       ;at end of queue?
  5140                                                          jnz     .10                                             ;no, skip ahead
  5141                                                          mov     al,8                                            ;reset to top of queue
  5142                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  5143                                                          clc                                                     ;indicate success
  5144                                  .20                     pop     ds                                              ;restore non-volatile regs
  5145                                                          ret                                                     ;return
  5146                                  ;=======================================================================================================================
  5147                                  ;
  5148                                  ;       Memory-Mapped Video Routines
  5149                                  ;
  5150                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  5151                                  ;
  5152                                  ;       ClearConsoleScreen
  5153                                  ;       ScrollConsoleRow
  5154                                  ;       SetConsoleChar
  5155                                  ;       SetConsoleString
  5156                                  ;
  5157                                  ;=======================================================================================================================
  5158                                  ;-----------------------------------------------------------------------------------------------------------------------
  5159                                  ;
  5160                                  ;       Routine:        ClearConsoleScreen
  5161                                  ;
  5162                                  ;       Description:    This routine clears the console (CGA) screen.
  5163                                  ;
  5164                                  ;-----------------------------------------------------------------------------------------------------------------------
  5165                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  5166                                                          push    edi                                             ;
  5167                                                          push    ds                                              ;
  5168                                                          push    es                                              ;
  5169                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  5170                                                          pop     ds                                              ;... into DS register
  5171                                                          push    EGDTCGA                                         ;load CGA selector ...
  5172                                                          pop     es                                              ;... into ES register
  5173                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  5174                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  5175                                                          xor     edi,edi                                         ;target offset
  5176                                                          cld                                                     ;forward strings
  5177                                                          rep     stosd                                           ;reset screen body
  5178                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  5179                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  5180                                                          rep     stosd                                           ;reset OIA line
  5181                                                          xor     al,al                                           ;zero register
  5182                                                          mov     [wbConsoleRow],al                               ;reset console row
  5183                                                          mov     [wbConsoleColumn],al                            ;reset console column
  5184                                                          call    PlaceCursor                                     ;place cursor at current position
  5185                                                          pop     es                                              ;restore non-volatile regs
  5186                                                          pop     ds                                              ;
  5187                                                          pop     edi                                             ;
  5188                                                          pop     ecx                                             ;
  5189                                                          ret                                                     ;return
  5190                                  ;-----------------------------------------------------------------------------------------------------------------------
  5191                                  ;
  5192                                  ;       Routine:        ScrollConsoleRow
  5193                                  ;
  5194                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  5195                                  ;
  5196                                  ;-----------------------------------------------------------------------------------------------------------------------
  5197                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  5198                                                          push    esi                                             ;
  5199                                                          push    edi                                             ;
  5200                                                          push    ds                                              ;
  5201                                                          push    es                                              ;
  5202                                                          push    EGDTCGA                                         ;load CGA video selector ...
  5203                                                          pop     ds                                              ;... into DS
  5204                                                          push    EGDTCGA                                         ;load CGA video selector ...
  5205                                                          pop     es                                              ;... into ES
  5206                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  5207                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  5208                                                          xor     edi,edi                                         ;EDI = target (line 1)
  5209                                                          cld                                                     ;forward strings
  5210                                                          rep     movsd                                           ;move 24 lines up
  5211                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  5212                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  5213                                                          rep     stosd                                           ;clear bottom row
  5214                                                          pop     es                                              ;restore non-volatile regs
  5215                                                          pop     ds                                              ;
  5216                                                          pop     edi                                             ;
  5217                                                          pop     esi                                             ;
  5218                                                          pop     ecx                                             ;
  5219                                                          ret                                                     ;return
  5220                                  ;-----------------------------------------------------------------------------------------------------------------------
  5221                                  ;
  5222                                  ;       Routine:        SetConsoleChar
  5223                                  ;
  5224                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  5225                                  ;
  5226                                  ;       In:             AL      ASCII character
  5227                                  ;                       CL      column
  5228                                  ;                       CH      row
  5229                                  ;                       ES      CGA selector
  5230                                  ;
  5231                                  ;       Out:            EAX     last target address written (ES:)
  5232                                  ;                       CL      column + 1
  5233                                  ;
  5234                                  ;-----------------------------------------------------------------------------------------------------------------------
  5235                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  5236                                                          movzx   eax,ch                                          ;row
  5237                                                          mov     ah,ECONCOLS                                     ;cols/row
  5238                                                          mul     ah                                              ;row * cols/row
  5239                                                          add     al,cl                                           ;add column
  5240                                                          adc     ah,0                                            ;handle carry
  5241                                                          shl     eax,1                                           ;screen offset
  5242                                                          mov     [es:eax],dl                                     ;store character
  5243                                                          inc     cl                                              ;next column
  5244                                                          ret                                                     ;return
  5245                                  ;-----------------------------------------------------------------------------------------------------------------------
  5246                                  ;
  5247                                  ;       Routine:        SetConsoleString
  5248                                  ;
  5249                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  5250                                  ;
  5251                                  ;       In:             ESI     source offset (DS:)
  5252                                  ;                       CL      column
  5253                                  ;                       CH      row
  5254                                  ;                       ES      CGA selector
  5255                                  ;
  5256                                  ;-----------------------------------------------------------------------------------------------------------------------
  5257                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  5258                                                          cld                                                     ;forward strings
  5259                                  .10                     lodsb                                                   ;next ASCII character
  5260                                                          test    al,al                                           ;end of string?
  5261                                                          jz      .20                                             ;yes, branch
  5262                                                          call    SetConsoleChar                                  ;store character
  5263                                                          jmp     .10                                             ;continue
  5264                                  .20                     pop     esi                                             ;restore non-volatile regs
  5265                                                          ret                                                     ;return
  5266                                  ;=======================================================================================================================
  5267                                  ;
  5268                                  ;       Input/Output Routines
  5269                                  ;
  5270                                  ;       These routines read and/or write directly to ports.
  5271                                  ;
  5272                                  ;       GetBaseMemSize
  5273                                  ;       GetExtendedMemSize
  5274                                  ;       GetROMMemSize
  5275                                  ;       PlaceCursor
  5276                                  ;       PutPrimaryEndOfInt
  5277                                  ;       PutSecondaryEndOfInt
  5278                                  ;       ReadRealTimeClock
  5279                                  ;       ResetSystem
  5280                                  ;       SetKeyboardLamps
  5281                                  ;       WaitForKeyInBuffer
  5282                                  ;       WaitForKeyOutBuffer
  5283                                  ;
  5284                                  ;=======================================================================================================================
  5285                                  ;-----------------------------------------------------------------------------------------------------------------------
  5286                                  ;
  5287                                  ;       Routine:        GetBaseMemSize
  5288                                  ;
  5289                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  5290                                  ;
  5291                                  ;       Output:         EAX     base RAM size in kilobytes
  5292                                  ;
  5293                                  ;-----------------------------------------------------------------------------------------------------------------------
  5294                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  5295                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  5296                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  5297                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  5298                                                          mov     ah,al                                           ;save base RAM high
  5299                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  5300                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  5301                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  5302                                                          ret                                                     ;return to caller
  5303                                  ;-----------------------------------------------------------------------------------------------------------------------
  5304                                  ;
  5305                                  ;       Routine:        GetExtendedMemSize
  5306                                  ;
  5307                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  5308                                  ;
  5309                                  ;       Output:         EAX     extended RAM size in kilobytes
  5310                                  ;
  5311                                  ;-----------------------------------------------------------------------------------------------------------------------
  5312                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  5313                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  5314                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  5315                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  5316                                                          mov     ah,al                                           ;save extended RAM high
  5317                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  5318                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  5319                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  5320                                                          ret                                                     ;return to caller
  5321                                  ;-----------------------------------------------------------------------------------------------------------------------
  5322                                  ;
  5323                                  ;       Routine:        GetROMMemSize
  5324                                  ;
  5325                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  5326                                  ;
  5327                                  ;       Output:         EAX     RAM size in kilobytes
  5328                                  ;
  5329                                  ;-----------------------------------------------------------------------------------------------------------------------
  5330                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  5331                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  5332                                                          ret                                                     ;return
  5333                                  ;-----------------------------------------------------------------------------------------------------------------------
  5334                                  ;
  5335                                  ;       Routine:        PlaceCursor
  5336                                  ;
  5337                                  ;       Description:    This routine positions the cursor on the console.
  5338                                  ;
  5339                                  ;       In:             DS      OS data selector
  5340                                  ;
  5341                                  ;-----------------------------------------------------------------------------------------------------------------------
  5342                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  5343                                                          mov     al,[wbConsoleRow]                               ;AL = row
  5344                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  5345                                                          mul     ah                                              ;row offset
  5346                                                          add     al,[wbConsoleColumn]                            ;add column
  5347                                                          adc     ah,0                                            ;add overflow
  5348                                                          mov     ecx,eax                                         ;screen offset
  5349                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  5350                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  5351                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  5352                                                          out     dx,al                                           ;select register
  5353                                                          inc     edx                                             ;data port
  5354                                                          mov     al,ch                                           ;hi-order cursor loc
  5355                                                          out     dx,al                                           ;store hi-order loc
  5356                                                          dec     edx                                             ;register select port
  5357                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  5358                                                          out     dx,al                                           ;select register
  5359                                                          inc     edx                                             ;data port
  5360                                                          mov     al,cl                                           ;lo-order cursor loc
  5361                                                          out     dx,al                                           ;store lo-order loc
  5362                                                          pop     ecx                                             ;restore non-volatile regs
  5363                                                          ret                                                     ;return
  5364                                  ;-----------------------------------------------------------------------------------------------------------------------
  5365                                  ;
  5366                                  ;       Routine:        PutPrimaryEndOfInt
  5367                                  ;
  5368                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  5369                                  ;
  5370                                  ;-----------------------------------------------------------------------------------------------------------------------
  5371                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  5372                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5373                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  5374                                                          ret                                                     ;return
  5375                                  ;-----------------------------------------------------------------------------------------------------------------------
  5376                                  ;
  5377                                  ;       Routine:        PutSecondaryEndOfInt
  5378                                  ;
  5379                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  5380                                  ;
  5381                                  ;-----------------------------------------------------------------------------------------------------------------------
  5382                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  5383                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5384                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  5385                                                          ret                                                     ;return
  5386                                  ;-----------------------------------------------------------------------------------------------------------------------
  5387                                  ;
  5388                                  ;       Routine:        ReadRealTimeClock
  5389                                  ;
  5390                                  ;       Description:    This routine gets current date time from the real-time clock.
  5391                                  ;
  5392                                  ;       In:             DS:EBX  DATETIME structure
  5393                                  ;
  5394                                  ;-----------------------------------------------------------------------------------------------------------------------
  5395                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  5396                                                          push    edi                                             ;
  5397                                                          push    es                                              ;
  5398                                                          push    ds                                              ;store data selector ...
  5399                                                          pop     es                                              ;... in es register
  5400                                                          mov     edi,ebx                                         ;date-time structure
  5401                                                          mov     al,ERTCSECONDREG                                ;second register
  5402                                                          out     ERTCREGPORT,al                                  ;select second register
  5403                                                          in      al,ERTCDATAPORT                                 ;read second register
  5404                                                          cld                                                     ;forward strings
  5405                                                          stosb                                                   ;store second value
  5406                                                          mov     al,ERTCMINUTEREG                                ;minute register
  5407                                                          out     ERTCREGPORT,al                                  ;select minute register
  5408                                                          in      al,ERTCDATAPORT                                 ;read minute register
  5409                                                          stosb                                                   ;store minute value
  5410                                                          mov     al,ERTCHOURREG                                  ;hour register
  5411                                                          out     ERTCREGPORT,al                                  ;select hour register
  5412                                                          in      al,ERTCDATAPORT                                 ;read hour register
  5413                                                          stosb                                                   ;store hour value
  5414                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  5415                                                          out     ERTCREGPORT,al                                  ;select weekday register
  5416                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  5417                                                          stosb                                                   ;store weekday value
  5418                                                          mov     al,ERTCDAYREG                                   ;day register
  5419                                                          out     ERTCREGPORT,al                                  ;select day register
  5420                                                          in      al,ERTCDATAPORT                                 ;read day register
  5421                                                          stosb                                                   ;store day value
  5422                                                          mov     al,ERTCMONTHREG                                 ;month register
  5423                                                          out     ERTCREGPORT,al                                  ;select month register
  5424                                                          in      al,ERTCDATAPORT                                 ;read month register
  5425                                                          stosb                                                   ;store month value
  5426                                                          mov     al,ERTCYEARREG                                  ;year register
  5427                                                          out     ERTCREGPORT,al                                  ;select year register
  5428                                                          in      al,ERTCDATAPORT                                 ;read year register
  5429                                                          stosb                                                   ;store year value
  5430                                                          mov     al,ERTCCENTURYREG                               ;century register
  5431                                                          out     ERTCREGPORT,al                                  ;select century register
  5432                                                          in      al,ERTCDATAPORT                                 ;read century register
  5433                                                          stosb                                                   ;store century value
  5434                                                          mov     al,ERTCSTATUSREG                                ;status register
  5435                                                          out     ERTCREGPORT,al                                  ;select status register
  5436                                                          in      al,ERTCDATAPORT                                 ;read status register
  5437                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  5438                                                          jnz     .20                                             ;skip ahead if binary values
  5439                                                          mov     esi,ebx                                         ;date-time structure address
  5440                                                          mov     edi,ebx                                         ;date-time structure address
  5441                                                          mov     ecx,8                                           ;loop counter
  5442                                  .10                     lodsb                                                   ;BCD value
  5443                                                          mov     ah,al                                           ;BCD value
  5444                                                          and     al,00001111b                                    ;low-order decimal zone
  5445                                                          and     ah,11110000b                                    ;hi-order decimal zone
  5446                                                          shr     ah,1                                            ;hi-order decimal * 8
  5447                                                          add     al,ah                                           ;low-order + hi-order * 8
  5448                                                          shr     ah,2                                            ;hi-order decimal * 2
  5449                                                          add     al,ah                                           ;low-order + hi-order * 10
  5450                                                          stosb                                                   ;replace BCD with binary
  5451                                                          loop    .10                                             ;next value
  5452                                  .20                     pop     es                                              ;restore non-volatile regs
  5453                                                          pop     edi                                             ;
  5454                                                          pop     esi                                             ;
  5455                                                          ret                                                     ;return
  5456                                  ;-----------------------------------------------------------------------------------------------------------------------
  5457                                  ;
  5458                                  ;       Routine:        ResetSystem
  5459                                  ;
  5460                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5461                                  ;
  5462                                  ;       Out:            N/A     This routine does not return.
  5463                                  ;
  5464                                  ;-----------------------------------------------------------------------------------------------------------------------
  5465                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5466                                                          loop    $                                               ;clear interrupts
  5467                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5468                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5469                                  .10                     sti                                                     ;enable maskable interrupts
  5470                                                          hlt                                                     ;halt until interrupt
  5471                                                          jmp     .10                                             ;repeat until reset kicks in
  5472                                  ;-----------------------------------------------------------------------------------------------------------------------
  5473                                  ;
  5474                                  ;       Routine:        SetKeyboardLamps
  5475                                  ;
  5476                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5477                                  ;
  5478                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5479                                  ;
  5480                                  ;-----------------------------------------------------------------------------------------------------------------------
  5481                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5482                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5483                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5484                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5485                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5486                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5487                                                          mov     al,bh                                           ;set/reset lamps value
  5488                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5489                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5490                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5491                                                          ret                                                     ;return
  5492                                  ;-----------------------------------------------------------------------------------------------------------------------
  5493                                  ;
  5494                                  ;       Routine:        WaitForKeyInBuffer
  5495                                  ;
  5496                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5497                                  ;
  5498                                  ;       Out:            ZF      1 = Input buffer ready
  5499                                  ;                               0 = Input buffer not ready after timeout
  5500                                  ;
  5501                                  ;-----------------------------------------------------------------------------------------------------------------------
  5502                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5503                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5504                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5505                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5506                                                          loopnz  .10                                             ;yes, repeat till timeout
  5507                                                          pop     ecx                                             ;restore non-volatile regs
  5508                                                          ret                                                     ;return
  5509                                  ;-----------------------------------------------------------------------------------------------------------------------
  5510                                  ;
  5511                                  ;       Routine:        WaitForKeyOutBuffer
  5512                                  ;
  5513                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5514                                  ;
  5515                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5516                                  ;                               0 = Output buffer empty after timeout
  5517                                  ;
  5518                                  ;-----------------------------------------------------------------------------------------------------------------------
  5519                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5520                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5521                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5522                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5523                                                          loopz   .10                                             ;loop until output buffer bit
  5524                                                          pop     ecx                                             ;restore non-volatile regs
  5525                                                          ret                                                     ;return
  5526                                  ;-----------------------------------------------------------------------------------------------------------------------
  5527                                  ;
  5528                                  ;       End of the Kernel Function Library
  5529                                  ;
  5530                                  ;-----------------------------------------------------------------------------------------------------------------------
  5531                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5532                                  ;=======================================================================================================================
  5533                                  ;
  5534                                  ;       Console Task
  5535                                  ;
  5536                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5537                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5538                                  ;       screen and responds to user commands.
  5539                                  ;
  5540                                  ;=======================================================================================================================
  5541                                  ;-----------------------------------------------------------------------------------------------------------------------
  5542                                  ;
  5543                                  ;       Console Panel - Common Fields
  5544                                  ;
  5545                                  ;               0         1         2         3         4         5         6         7
  5546                                  ;               01234567890123456789012345678901234567890123456789012345678901234567890123456789
  5547                                  ;
  5548                                  ;       00      PPPPPPPP                TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT       DD-MMM-YYYY HH:MM
  5549                                  ;       22      RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
  5550                                  ;       23      :
  5551                                  ;       24      KKKKKKKKKKKK SCA                        C                        /F ACS NCS CCCC
  5552                                  ;
  5553                                  ;       PPPPPPPP        Panel Identifier
  5554                                  ;       TTTT....TTTT    Panel Title
  5555                                  ;       DD-MM-YYYY      Current Date
  5556                                  ;       HH:MM           Current Local Time (24-Hour)
  5557                                  ;       RRRR....RRRR    Last Command Response
  5558                                  ;       :               Command Prompt
  5559                                  ;       KKKKKKKKKKKK    Keyboard Scan Codes
  5560                                  ;       SCA             Left Shift, Control, Alt Condition
  5561                                  ;       C               Keyboard ASCII character
  5562                                  ;       /(-\|)          Network Adapter Interrupt Indicator
  5563                                  ;       F               Floppy Disk Motor On
  5564                                  ;       ACS             Right Alt, Control, Shift Condition
  5565                                  ;       NCS             Num, Caps, Scroll-Lock Condition
  5566                                  ;       SSSS            System Status
  5567                                  ;
  5568                                  ;       Console Panel - Home Status Panel
  5569                                  ;
  5570                                  ;               0         1         2         3         4         5         6         7
  5571                                  ;               01234567890123456789012345678901234567890123456789012345678901234567890123456789
  5572                                  ;
  5573                                  ;       01      PCI/PCI-X Gigabit Ethernet Adapter
  5574                                  ;       02      ETH0 bbb.dd.f vvvv:dddd mmmmmmmm pppp mm-mm-mm-mm-mm-mm qq
  5575                                  ;       03      CTRL FD LRST ASDE SLU ILOS 1000 FRCSPD
  5576                                  ;       04      STAT FD LU TXOFF TBI/PHY 1000 ASDV 66 64 X 
  5577                                  ;       05      ICR  TXDW TXQE LSC RXSEQ RXDMT0 RXO RXT0 MDAC RXCFG PHYINT TXDLOW SRPD
  5578                                  ;       06      ITR  XXXX RDTR XXXX RADV XXXX TIDV XXXX TADV XXXX
  5579                                  ;       07      RCTL EN SBP UPE MPE LPE LBM RDMTS MO BAM 1024 VFE PMCF BSEX SECRC
  5580                                  ;       08      RDBA hhhhhhhh llllllll RDLEN LLLLL RDH XXXX RDT XXXX RSRPD XXX
  5581                                  ;       09      TCTL EN PSP CT COLD SWXOFF RTLC NRTU
  5582                                  ;       10      TDBA hhhhhhhh llllllll TDLEN LLLLL TDH XXXX TDT XXXX 
  5583                                  ;       11
  5584                                  ;       12
  5585                                  ;       13
  5586                                  ;       14
  5587                                  ;       15
  5588                                  ;       16
  5589                                  ;       17
  5590                                  ;       18
  5591                                  ;       19
  5592                                  ;       20
  5593                                  ;       21
  5594                                  ;
  5595                                  ;       bbb.dd.f        Ethernet Adapter PCI Bus, Device, Function
  5596                                  ;       vvvv:dddd       Ethernet Adapter PCI Vendor and Device IDs
  5597                                  ;       mmmmmmmm        Mapped Memory Address (--none-- if no MMIO)
  5598                                  ;       pppp            I/O Port Number (n/a if no port access)
  5599                                  ;       qq              IRQ number (11, 12, etc.)
  5600                                  ;
  5601                                  ;=======================================================================================================================
  5602                                  ;-----------------------------------------------------------------------------------------------------------------------
  5603                                  ;
  5604                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5605                                  ;
  5606                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5607                                  ;
  5608                                  ;-----------------------------------------------------------------------------------------------------------------------
  5609                                  section                 constack                                                ;console task stack
  5610                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5611                                  ;-----------------------------------------------------------------------------------------------------------------------
  5612                                  ;
  5613                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5614                                  ;
  5615                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5616                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5617                                  ;       16 descriptors. Six are initially defined.
  5618                                  ;
  5619                                  ;-----------------------------------------------------------------------------------------------------------------------
  5620                                  section                 conldt                                                  ;console local descriptors
  5621                                                          dq      004093004780007Fh                               ;04 TSS alias
  5622                                                          dq      004093004700007Fh                               ;0c LDT alias
  5623                                                          dq      00409300400006FFh                               ;14 stack
  5624                                                          dq      00CF93000000FFFFh                               ;1c data
  5625                                                          dq      00409B0050002FFFh                               ;24 code
  5626                                                          dq      00409300480007FFh                               ;2c message queue
  5627                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5628                                  ;-----------------------------------------------------------------------------------------------------------------------
  5629                                  ;
  5630                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5631                                  ;
  5632                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5633                                  ;       segment. CS to console code.
  5634                                  ;
  5635                                  ;-----------------------------------------------------------------------------------------------------------------------
  5636                                  section                 contss                                                  ;console task state segment
  5637                                                          dd      0                                               ;00 back-link tss
  5638                                                          dd      0700h                                           ;04 esp ring 0
  5639                                                          dd      0014h                                           ;08 ss ring 0
  5640                                                          dd      0700h                                           ;0c esp ring 1
  5641                                                          dd      0014h                                           ;10 es ring 1
  5642                                                          dd      0700h                                           ;14 esp ring 2
  5643                                                          dd      0014h                                           ;18 ss ring 2
  5644                                                          dd      0                                               ;1c cr ring 3
  5645                                                          dd      0                                               ;20 eip
  5646                                                          dd      0200h                                           ;24 eflags
  5647                                                          dd      0                                               ;28 eax
  5648                                                          dd      0                                               ;2c ecx
  5649                                                          dd      0                                               ;30 edx
  5650                                                          dd      0                                               ;34 ebx
  5651                                                          dd      0700h                                           ;38 esp ring 3
  5652                                                          dd      0                                               ;3c ebp
  5653                                                          dd      0                                               ;40 esi
  5654                                                          dd      0                                               ;44 edi
  5655                                                          dd      001Ch                                           ;48 es
  5656                                                          dd      0024h                                           ;4c cs
  5657                                                          dd      0014h                                           ;50 ss ring 3
  5658                                                          dd      001Ch                                           ;54 ds
  5659                                                          dd      0                                               ;58 fs
  5660                                                          dd      0                                               ;5c gs
  5661                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5662                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5663                                  ;-----------------------------------------------------------------------------------------------------------------------
  5664                                  ;
  5665                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5666                                  ;
  5667                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5668                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5669                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5670                                  ;       event.
  5671                                  ;
  5672                                  ;-----------------------------------------------------------------------------------------------------------------------
  5673                                  section                 conmque                                                 ;console message queue
  5674                                                          dd      8                                               ;head pointer
  5675                                                          dd      8                                               ;tail pointer
  5676                                                          times   510 dd 0                                        ;queue elements
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678                                  ;
  5679                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5680                                  ;
  5681                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5682                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5683                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5684                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5685                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5686                                  ;       board input, echoing to the console screen and responding to user commands.
  5687                                  ;
  5688                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5689                                  ;
  5690                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5691                                  ;                               |  Real Mode Interrupt Vectors                  |
  5692                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5693                                  ;                               |  Reserved BIOS Memory Area                    |
  5694                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5695                                  ;                               |  Shared Kernel Memory Area                    |
  5696                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5697                                  ;                               |  Global Descriptor Table (GDT)                |
  5698                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5699                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5700                                  ;                       002000  +-----------------------------------------------+
  5701                                  ;                               |  Interrupt Handlers                           |
  5702                                  ;                               |  Kernel Function Library                      |
  5703                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5704                                  ;                               |  Console Task Stack Area                      |
  5705                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5706                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5707                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5708                                  ;                               |  Console Task Task State Segment (TSS)        |
  5709                                  ;                       004800  +-----------------------------------------------+
  5710                                  ;                               |  Console Task Message Queue                   |
  5711                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5712                                  ;                               |  Console Task Code                            |
  5713                                  ;                               |  Console Task Constants                       |
  5714                                  ;                       008000  +===============================================+
  5715                                  ;
  5716                                  ;-----------------------------------------------------------------------------------------------------------------------
  5717                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5718                                  ;
  5719                                  ;       Initialize console work areas to low values.
  5720                                  ;
  5721                                  ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  5722                                                          xor     al,al                                           ;initialization value
  5723                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5724                                                          cld                                                     ;forward strings
  5725                                                          rep     stosb                                           ;initialize data
  5726                                  ;
  5727                                  ;       Read extended RAM KB (above 1MB) from CMOS ROM (might be determined by VM settings).
  5728                                  ;       Set available heap to the lesser of the reported extended memory and max-supported heap.
  5729                                  ;       We reserve base RAM (below 1MB) for the kernel.
  5730                                  ;
  5731                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5732                                                          cmp     eax,EKRNHEAPSIZE                                ;more than the OS can support?
  5733                                                          jna     .10                                             ;no, continue
  5734                                                          mov     eax,EKRNHEAPSIZE                                ;set to max supported RAM
  5735                                  .10                     mov     [wdConsoleHeapSize],eax                         ;set heap size
  5736                                  ;
  5737                                  ;       Initialize the single MEMROOT structure.
  5738                                  ;
  5739                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5740                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5741                                                          xor     ecx,ecx                                         ;zero register
  5742                                                          mov     cl,4                                            ;count
  5743                                                          rep     stosd                                           ;store first/last contig and free addrs
  5744                                                          xor     eax,eax                                         ;zero register
  5745                                                          stosd                                                   ;zero first task block
  5746                                                          stosd                                                   ;zero last task block
  5747                                  ;
  5748                                  ;       Initialize a single MEMBLOCK structure in heap memory at EMEMBASE.
  5749                                  ;
  5750                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5751                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5752                                                          stosd                                                   ;store signature
  5753                                                          mov     eax,[wdConsoleHeapSize]                         ;heap size KB
  5754                                                          shl     eax,10                                          ;heap size bytes
  5755                                                          stosd                                                   ;store block size
  5756                                                          xor     ecx,ecx                                         ;zero register
  5757                                                          mov     cl,6                                            ;count
  5758                                                          xor     eax,eax                                         ;zero register
  5759                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5760                                  ;
  5761                                  ;       Initialize the active panel variables.
  5762                                  ;
  5763                                                          mov     eax,czPnlMain                                   ;initial console panel
  5764                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  5765                                  ;                        mov     [wdConsoleField],eax                            ;save current field address
  5766                                  ;                        mov     al,007h                                         ;default screen color attribute
  5767                                  ;                        mov     [wbConsoleFieldColor],al                        ;save field color attribute
  5768                                  ;
  5769                                  ;       Address the console screen memory.
  5770                                  ;
  5771                                                          push    EGDTCGA                                         ;load CGA video selector...
  5772                                                          pop     es                                              ;...into extra segment reg
  5773                                  ;
  5774                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  5775                                  ;
  5776                                                          mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  5777                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  5778                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  5779                                                          rep     stosd                                           ;reset OIA
  5780                                  ;
  5781                                  ;       Clear the console rows. (This is done after every attention key).
  5782                                  ;
  5783                                  .20                     xor     edi,edi                                         ;target offset
  5784                                                          mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  5785                                                          mov     eax,ECONCLEARDWORD                              ;initialization value
  5786                                                          rep     stosd                                           ;reset screen body
  5787                                  ;
  5788                                  ;       Reset the input field row and column. Address the panel template.
  5789                                  ;
  5790                                                          xor     eax,eax                                         ;zero register
  5791                                                          mov     [wdConsoleInput],eax                            ;zero input addr
  5792                                                          mov     [wbConsoleRow],al                               ;zero console row
  5793                                                          mov     [wbConsoleColumn],al                            ;zero console column
  5794                                  ;
  5795                                  ;       Load the field address. Exit loop if address is null.
  5796                                  ;
  5797                                                          mov     esi,[wdConsolePanel]                            ;panel template
  5798                                  .30                     lodsd                                                   ;field value addr
  5799                                                          test    eax,eax                                         ;end of panel?
  5800                                                          jz      .70                                             ;yes, exit loop
  5801                                                          mov     ebx,eax                                         ;field value addr
  5802                                  ;
  5803                                  ;       Load the field row, column, color and length.
  5804                                  ;
  5805                                                          lodsb                                                   ;attributes
  5806                                                          mov     ch,al                                           ;row
  5807                                                          lodsb                                                   ;column
  5808                                                          mov     cl,al                                           ;column
  5809                                                          lodsb                                                   ;color
  5810                                                          mov     dh,al                                           ;color
  5811                                                          lodsb                                                   ;length
  5812                                                          mov     dl,al                                           ;length
  5813                                  ;
  5814                                  ;       Test the row high-bit for input field indication
  5815                                  ;
  5816                                                          test    ch,080h                                         ;input field?
  5817                                                          jz      .40                                             ;no, branch
  5818                                                          and     ch,07Fh                                         ;clear input field indicator
  5819                                  ;
  5820                                  ;       Save the row and column if this is the first input field
  5821                                  ;
  5822                                                          mov     al,[wbConsoleRow]                               ;console row
  5823                                                          or      al,[wbConsoleColumn]                            ;already have an input field?
  5824                                                          jnz     .40                                             ;yes, branch
  5825                                                          mov     [wbConsoleRow],ch                               ;update console row
  5826                                                          mov     [wbConsoleColumn],cl                            ;update console column
  5827                                  ;
  5828                                  ;       Compute the target offset.
  5829                                  ;
  5830                                  .40                     movzx   eax,ch                                          ;row
  5831                                                          mov     ah,ECONCOLS                                     ;columns per row
  5832                                                          mul     ah                                              ;row offset
  5833                                                          add     al,cl                                           ;add column
  5834                                                          adc     ah,0                                            ;handle overflow
  5835                                                          shl     eax,1                                           ;two-bytes per column
  5836                                                          mov     edi,eax                                         ;target offset
  5837                                  ;
  5838                                  ;       Display the field contents
  5839                                  ;
  5840                                                          xchg    ebx,esi                                         ;swap panel and field addr
  5841                                                          movzx   ecx,dl                                          ;length
  5842                                                          mov     ah,dh                                           ;color
  5843                                  .50                     lodsb                                                   ;character
  5844                                                          test    al,al                                           ;end of value?
  5845                                                          jz      .60                                             ;yes, branch
  5846                                                          stosw                                                   ;store character and color
  5847                                                          loop    .50                                             ;next character
  5848                                  .60                     xchg    ebx,esi                                         ;swap panel and field addr
  5849                                                          jmp     short .30                                       ;next field
  5850                                  ;
  5851                                  ;       Place the cursor if we have an input field
  5852                                  ;
  5853                                  .70                     mov     ah,[wbConsoleRow]                               ;field row
  5854                                                          mov     al,[wbConsoleColumn]                            ;field column
  5855                                                          or      al,ah                                           ;input field?
  5856                                                          jz      .80                                             ;no, branch
  5857                                                          placeCursor                                             ;position the cursor
  5858                                  ;
  5859                                  ;       Address the message queue.
  5860                                  ;       Yield until the next message arrives in the message queue.
  5861                                  ;       Repeat until the message is a character input.
  5862                                  ;
  5863                                  .80                     push    ds                                              ;save non-volatile regs
  5864                                                          push    ELDTMQ                                          ;load message queue selector...
  5865                                                          pop     ds                                              ;...into data segment register
  5866                                  .81                     sti                                                     ;enable maskable ints
  5867                                                          hlt                                                     ;halt until external interrupt
  5868                                  .82                     mov     ebx,[MQHead]                                    ;head ptr
  5869                                                          mov     eax,[ebx]                                       ;lo-order 32-bits
  5870                                                          mov     edx,[ebx+4]                                     ;hi-order 32-bits
  5871                                                          mov     ecx,eax                                         ;lo-order 32-bits
  5872                                                          or      ecx,edx                                         ;queue empty?
  5873                                                          jz      .81                                             ;yes, continue
  5874                                                          xor     ecx,ecx                                         ;zero register
  5875                                                          mov     [ebx],ecx                                       ;zero lo-order dword
  5876                                                          mov     [ebx+4],ecx                                     ;zero hi-order dword
  5877                                                          add     ebx,8                                           ;next queue element
  5878                                                          and     ebx,03FCh                                       ;at end of queue?
  5879                                                          jnz     .90                                             ;no, branch
  5880                                                          mov     bl,8                                            ;reset to 1st entry
  5881                                  .90                     mov     [MQHead],ebx                                    ;save new head ptr
  5882                                                          mov     ecx,eax
  5883                                                          and     ecx,0FFFF0000h
  5884                                                          cmp     ecx,EMSGKEYCHAR
  5885                                                          jne     .82
  5886                                                          and     eax,00000FFFFh
  5887                                                          pop     ds                                              ;restore non-volatile regs
  5888                                  ;
  5889                                  ;       Reset the system
  5890                                  ;
  5891                                                          resetSystem
  5892                                  
  5893                                  .180                    sti
  5894                                                          hlt
  5895                                                          jmp     .180
  5896                                  
  5897                                  
  5898                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5899                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5900                                                          call    ConTakeToken                                    ;handle console input
  5901                                                          mov     edx,wzConsoleToken                              ;token buffer
  5902                                                          call    ConDetermineCommand                             ;determine command number
  5903                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5904                                                          jae     .20                                             ;yes, branch
  5905                                                          shl     eax,2                                          ;index into jump table
  5906                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5907                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5908                                                          call    eax                                             ;call command handler
  5909                                                          jmp     .20
  5910                                  ;-----------------------------------------------------------------------------------------------------------------------
  5911                                  ;
  5912                                  ;       Routine:        ConPutNewLine
  5913                                  ;
  5914                                  ;       Description:    Write a new-line to the console.
  5915                                  ;
  5916                                  ;-----------------------------------------------------------------------------------------------------------------------
  5917                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  5918                                                          ret                                                     ;return
  5919                                  ;-----------------------------------------------------------------------------------------------------------------------
  5920                                  ;
  5921                                  ;       Routine:        ConInitializeNetwork
  5922                                  ;
  5923                                  ;       Description:    This routine initializes console network variables.
  5924                                  ;
  5925                                  ;-----------------------------------------------------------------------------------------------------------------------
  5926                                  ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5927                                                          push    ecx                                             ;
  5928                                                          push    esi                                             ;
  5929                                                          push    edi                                             ;
  5930                                  ;
  5931                                  ;       Initialize ETHER structure.
  5932                                  ;
  5933                                                          mov     ebx,wsConsoleEther                              ;ETHER structure address
  5934                                                          call    ConInitEtherContext                             ;initialize ETHER struct
  5935                                                          mov     esi,ebx                                         ;ETHER structure address
  5936                                  ;
  5937                                  ;       Initialize variables.
  5938                                  ;       Construct PCI selector.
  5939                                  ;       Read PCI configuration data.
  5940                                  ;
  5941                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5942                                                          call    ConInitPCIContext                               ;initialize PCI struct
  5943                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5944                                                          call    ConReadPCIConfigData                            ;read the configuration data
  5945                                  ;
  5946                                  ;       Interpret PCI data value.
  5947                                  ;
  5948                                                          cmp     eax,-1		                                ;function defined?
  5949                                                          jne     .20                                             ;yes, branch
  5950                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  5951                                                          je      .40                                             ;yes, skip to next device
  5952                                                          jmp     short .30                                       ;no, skip to next function
  5953                                  ;
  5954                                  ;       Exit PCI probe if supported adapter found.
  5955                                  ;
  5956                                  .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5957                                                          je      .50                                             ;yes, found!
  5958                                  ;
  5959                                  ;       Next function.
  5960                                  ;
  5961                                  .30                     call    ConNextPCIFunction                              ;next function
  5962                                                          jb      .10                                             ;continue if no overflow
  5963                                  ;
  5964                                  ;       Next device, bus.
  5965                                  ;
  5966                                  .40                     call    ConNextPCIDevice                                ;next device, bus.
  5967                                                          jb      .10                                             ;continue if no overflow
  5968                                                          jmp     .90                                             ;done, ETHER not found
  5969                                  ;
  5970                                  ;       Set hardware flag and save selector.
  5971                                  ;
  5972                                  .50                     mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5973                                                          mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5974                                                          or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5975                                                          putConsoleString czEthernetAdapterFound                 ;ethernet adapter found message
  5976                                  ;
  5977                                  ;       Save and report PCI data.
  5978                                  ;
  5979                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5980                                                          mov     ecx,eax                                         ;ethernet adapter PCI selector
  5981                                                          mov     edx,czEthernetSelector                          ;message label
  5982                                                          call    ConPutLabeledHexValue                           ;output labeled message to console
  5983                                  
  5984                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5985                                                          xor     al,al                                           ;register 0
  5986                                                          call    ConReadPCIRegister                              ;EAX = device id | vendor id
  5987                                                          mov     [esi+ETHER.devicevendor],eax                    ;save device id | vendor id
  5988                                                          mov     ecx,eax                                         ;device id | vendor id
  5989                                                          mov     edx,czEthernetDeviceVendor                      ;message label
  5990                                                          call    ConPutLabeledHexValue                           ;output labeled message to console
  5991                                  
  5992                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5993                                                          mov     al,004h                                         ;status and command register
  5994                                                          call    ConReadPCIRegister                              ;EAX = status | command
  5995                                                          mov     [esi+ETHER.statuscommand],eax                   ;save status | command
  5996                                                          mov     ecx,eax                                         ;status | command
  5997                                                          mov     edx,czEthernetStatusCommand                     ;message label
  5998                                                          call    ConPutLabeledHexLine                            ;output labeled message to console
  5999                                  
  6000                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  6001                                                          mov     al,010h                                         ;mapped memory I/O (BAR0) register
  6002                                                          call    ConReadPCIRegister                              ;EAX = MMIO
  6003                                                          mov     [esi+ETHER.mmio],eax                            ;save MMIO
  6004                                                          mov     ecx,eax                                         ;MMIO
  6005                                                          mov     edx,czEthernetMemoryAddr                        ;message label
  6006                                                          call    ConPutLabeledHexValue                           ;output labeled message to console
  6007                                  
  6008                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  6009                                                          mov     al,018h                                         ;I/O port (BAR1) register
  6010                                                          call    ConReadPCIRegister                              ;EAX = I/O port
  6011                                                          and     eax,-8                                          ;mask out bits 2:0
  6012                                                          mov     [esi+ETHER.port],eax                            ;save I/O port
  6013                                                          mov     ecx,eax                                         ;I/O port
  6014                                                          mov     edx,czEthernetPort                              ;message label
  6015                                                          call    ConPutLabeledHexValue                           ;output labeled message to console
  6016                                  
  6017                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet device PCI selector
  6018                                                          mov     al,03Ch                                         ;interrupt number register
  6019                                                          call    ConReadPCIRegister                              ;EAX = interrupt number
  6020                                                          mov     [esi+ETHER.irq],al                              ;save interrupt number
  6021                                                          movzx   ecx,al                                          ;interrupt number
  6022                                                          mov     edx,czEthernetIRQ                               ;message label
  6023                                                          call    ConPutLabeledDecLine                            ;output labeled message to console
  6024                                  ;
  6025                                  ;       Read MAC address from MMIO
  6026                                  ;
  6027                                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  6028                                                          test    ecx,ecx
  6029                                                          jnz     .60
  6030                                                          jmp     .90
  6031                                  
  6032                                  .60                     add     ecx,05400h                                      ;MAC address offset
  6033                                                          mov     eax,[ecx]                                       ;MAC address lo-order dword
  6034                                                          mov     [esi+ETHER.mac],eax                             ;save
  6035                                                          mov     ax,[ecx+4]                                      ;MAC address hi-order word
  6036                                                          mov     [esi+ETHER.mac+4],ax                            ;save
  6037                                                          lea     ecx,[esi+ETHER.mac]                             ;address of MAC bytes
  6038                                                          putMACString wzConsoleToken                             ;output MAC ASCIIZ string
  6039                                                          mov     edx,czEthernetMAC                               ;label string
  6040                                                          call    ConPutLabeledLine                               ;output labeled line to console
  6041                                  ;
  6042                                  ;       Set the link up
  6043                                  ;
  6044                                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  6045                                                          mov     eax,[ecx+EI825REGCTRL]                          ;control register
  6046                                                          or      al,EI825CTRLSLU                                 ;set link up
  6047                                                          mov     [ecx+EI825REGCTRL],eax                          ;update control register
  6048                                                          putConsoleString czLinkUp
  6049                                  ;
  6050                                  ;       Initialize the Multicast Table Array
  6051                                  ;
  6052                                                          xor     ecx,ecx                                         ;zero register
  6053                                                          mov     cl,128                                          ;element count
  6054                                                          mov     edi,[esi+ETHER.mmio]                            ;MMIO address
  6055                                                          add     edi,EI825REGMTA                                 ;MTA base address
  6056                                                          xor     eax,eax                                         ;zero register
  6057                                                          cld                                                     ;forward strings
  6058                                                          rep     stosd                                           ;store dword
  6059                                                          putConsoleString czMTAInit
  6060                                  ;
  6061                                  ;       Enable interrupts
  6062                                  ;
  6063                                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  6064                                                          mov     eax,01F6DCh                                     ;SRPD|TXD_LOW|GPI|PHYINT|RXCFG|MDAC|RXT0|RXO|RXDMT0|RXSEQ|LSC
  6065                                                          mov     [ecx+EI825REGIMS],eax                           ;enable
  6066                                                          mov     eax,[ecx+EI825REGICR]                           ;clear pending ints
  6067                                                          putConsoleString czIntsEnabled
  6068                                  ;
  6069                                  ;       Set interrupt throttling register
  6070                                  ;
  6071                                                          mov     ecx,[esi+ETHER.mmio]
  6072                                                          mov     eax,1000h
  6073                                                          mov     [ecx+EI825REGITR],eax
  6074                                  ;
  6075                                  ;       Start the receive process.
  6076                                  ;
  6077                                                          call    ConInitEtherReceive
  6078                                                          jc      .90
  6079                                                          putConsoleString czReceiveStarted
  6080                                  ;
  6081                                  ;       Start the transmit process.
  6082                                  ;
  6083                                  ;                        call    ConInitEtherTransmit
  6084                                  ;                        jc      .90
  6085                                  ;                        putConsoleString czTransmitStarted
  6086                                  ;
  6087                                  ;       Restore and return.
  6088                                  ;
  6089                                  .90                     pop     edi                                             ;restore non-volatile regs
  6090                                                          pop     esi                                             ;
  6091                                                          pop     ecx                                             ;
  6092                                                          pop     ebx                                             ;
  6093                                                          ret                                                     ;return
  6094                                  ;-----------------------------------------------------------------------------------------------------------------------
  6095                                  ;
  6096                                  ;       Routine:        ConInitEtherReceive
  6097                                  ;
  6098                                  ;       Description:    This routine initializes the ethernet adapter for receiving.
  6099                                  ;
  6100                                  ;-----------------------------------------------------------------------------------------------------------------------
  6101                                  ConInitEtherReceive     push    ebx                                             ;save non-volatile regs
  6102                                                          push    ecx                                             ;
  6103                                  ;
  6104                                  ;       Setup addressability
  6105                                  ;
  6106                                                          mov     ebx,wsConsoleEther                              ;ETHER struct address
  6107                                  ;
  6108                                  ;       Allocate receive descriptors
  6109                                  ;
  6110                                                          mov     eax,EI825RXDESCLEN * ENETRXDESCCT + 16          ;memory size to allocate
  6111                                                          allocateMemory eax                                      ;allocate memory
  6112                                                          test    eax,eax                                         ;test result
  6113                                                          jz      .20                                             ;branch if error
  6114                                                          mov     [ebx+ETHER.rxblock],eax                         ;save allocated storage address
  6115                                                          add     eax,EMEMBLOCKLEN + 16                           ;usable memory start + 16
  6116                                                          and     al,0F0h                                         ;align on 16-byte boundary
  6117                                                          mov     [ebx+ETHER.rxbase],eax                          ;save descriptor base
  6118                                  ;
  6119                                  ;       Initialize receive descriptors
  6120                                  ;
  6121                                                          mov     edx,[ebx+ETHER.rxbase]                          ;descriptor base address
  6122                                                          xor     ecx,ecx                                         ;zero register
  6123                                                          mov     cl,ENETRXDESCCT                                 ;descriptor count
  6124                                  .10                     push    edx                                             ;save descriptor addr
  6125                                                          mov     eax,ENETRXBUFSIZ+16                             ;receive buffer size
  6126                                                          allocateMemory eax                                      ;allocate memory
  6127                                                          pop     edx                                             ;descriptor memory
  6128                                                          test    eax,eax                                         ;test for error
  6129                                                          jz      .20                                             ;branch if error
  6130                                                          add     eax,EMEMBLOCKLEN+16                             ;usable memory start + 16
  6131                                                          and     al,0F0h                                         ;align on 16-byte boundary
  6132                                                          mov     [edx+I825RXDESC.addresslo],eax                  ;zero address low
  6133                                                          xor     eax,eax                                         ;zero register
  6134                                                          mov     [edx+I825RXDESC.addresshi],eax                  ;zero address hi
  6135                                                          mov     [edx+I825RXDESC.status],al                      ;zero status
  6136                                                          add     edx,EI825RXDESCLEN                              ;next descr address
  6137                                                          loop    .10                                             ;continue
  6138                                  ;
  6139                                  ;       Setup receive descriptor ring buffer
  6140                                  ;
  6141                                                          mov     ecx,[ebx+ETHER.mmio]                            ;memory i/o address
  6142                                                          xor     eax,eax                                         ;zero register
  6143                                                          mov     [ecx+EI825REGRDBAH],eax                         ;set receive descr base address hi
  6144                                                          mov     eax,[ebx+ETHER.rxbase]                          ;receive descr base address lo
  6145                                                          mov     [ecx+EI825REGRDBAL],eax                         ;set receive descr base address lo
  6146                                  ;
  6147                                  ;       Setup receive descriptor ring length
  6148                                  ;
  6149                                                          mov     eax,EI825RXDESCLEN * ENETRXDESCCT               ;descriptors size
  6150                                                          mov     [ecx+EI825REGRDLEN],eax                         ;set receive descr size
  6151                                  ;
  6152                                  ;       Setup receive head and tail pointers.
  6153                                  ;
  6154                                                          xor     eax,eax                                         ;zero register
  6155                                                          mov     [ecx+EI825REGRDH],eax                           ;initialize receive descriptor head
  6156                                                          mov     eax,ENETRXDESCCT                                ;descriptor count
  6157                                                          mov     [ecx+EI825REGRDT],eax                           ;initialize receive descriptor tail
  6158                                                          xor     eax,eax                                         ;zero register
  6159                                                          mov     [ebx+ETHER.rxtail],eax                          ;initialize tail
  6160                                  ;
  6161                                  ;       Set the receive control register
  6162                                  ;
  6163                                  ;                        mov     eax,EI825RCTLBSZ1024|EI825RCTLBAM|EI825RCTLLPE|EI825RCTLMPE|EI825RCTLUPE|EI825RCTLSBP|EI825RCTLEN
  6164                                  ;                        mov     eax,EI825RCTLBSZ1024|EI825RCTLSBP|EI825RCTLEN
  6165                                  ;                        mov     eax,EI825RCTLBSZ1024|EI825RCTLBAM|EI825RCTLLPE|EI825RCTLMPE|EI825RCTLUPE|EI825RCTLSBP|EI825RCTLEN      ;add BAM|MPE
  6166                                                          mov     eax,048180FEh                        
  6167                                                          mov     [ecx+EI825REGRCTL],eax
  6168                                                          clc
  6169                                                          jmp     .30
  6170                                  ;
  6171                                  ;       Exit with error indicated.
  6172                                  ;
  6173                                  .20                     stc                                                     ;set carry
  6174                                  ;
  6175                                  ;       Restore and return.
  6176                                  ;
  6177                                  .30                     pop     ecx                                             ;restore non-volatile regs
  6178                                                          pop     ebx                                             ;
  6179                                                          ret                                                     ;return
  6180                                  ;-----------------------------------------------------------------------------------------------------------------------
  6181                                  ;
  6182                                  ;       Routine:        ConInitEtherTransmit
  6183                                  ;
  6184                                  ;       Description:    This routine initializes the ethernet adapter for transmitting.
  6185                                  ;
  6186                                  ;-----------------------------------------------------------------------------------------------------------------------
  6187                                  ConInitEtherTransmit    push    ebx                                             ;save non-volatile regs
  6188                                                          push    ecx                                             ;
  6189                                  ;
  6190                                  ;       Setup addressability
  6191                                  ;
  6192                                                          mov     ebx,wsConsoleEther                              ;ETHER struct address
  6193                                  ;
  6194                                  ;       Allocate transmit descriptors
  6195                                  ;
  6196                                                          mov     eax,EI825TXDESCLEN * ENETTXDESCCT + 16          ;memory required for transmit descrs
  6197                                                          allocateMemory eax                                      ;allocate memory
  6198                                                          test    eax,eax                                         ;test result
  6199                                                          jz      .20                                             ;branch if error
  6200                                                          mov     [ebx+ETHER.txblock],eax                         ;save allocated storage address
  6201                                                          add     eax,EMEMBLOCKLEN + 16                           ;usable memory start + 16
  6202                                                          and     al,0F0h                                         ;align on 16-byte boundary
  6203                                                          mov     [ebx+ETHER.txbase],eax                          ;save descriptor base
  6204                                  ;
  6205                                  ;       Initialize transmit descriptors
  6206                                  ;
  6207                                                          xor     ecx,ecx                                         ;zero register
  6208                                                          mov     cl,ENETTXDESCCT                                 ;descriptor count
  6209                                                          xor     eax,eax                                         ;zero register
  6210                                                          mov     edx,[ebx+ETHER.txbase]                          ;descriptor base address
  6211                                  .10                     mov     [edx+I825TXDESC.addresslo],eax                  ;zero address low
  6212                                                          mov     [edx+I825TXDESC.addresshi],eax                  ;zero address hi
  6213                                                          mov     [edx+I825TXDESC.cmd],al                         ;zero command
  6214                                                          add     edx,EI825TXDESCLEN                              ;next descr address
  6215                                                          loop    .10                                             ;continue
  6216                                  ;
  6217                                  ;       Setup transmit descriptor ring buffer
  6218                                  ;
  6219                                                          mov     ecx,[ebx+ETHER.mmio]                            ;memory i/o address
  6220                                                          xor     eax,eax                                         ;zero register
  6221                                                          mov     [ecx+EI825REGTDBAH],eax                         ;set transmit descr base address hi
  6222                                                          mov     eax,[ebx+ETHER.txbase]                          ;transmit descr base address lo
  6223                                                          mov     [ecx+EI825REGTDBAL],eax                         ;set transmit descr base address lo
  6224                                  ;
  6225                                  ;       Setup transmit descriptor ring length
  6226                                  ;
  6227                                                          mov     eax,EI825TXDESCLEN * ENETTXDESCCT               ;descriptors size
  6228                                                          mov     [ecx+EI825REGTDLEN],eax                         ;set transmit descr size
  6229                                  ;
  6230                                  ;       Setup transmit head and tail pointers.
  6231                                  ;
  6232                                                          xor     eax,eax                                         ;zero register
  6233                                                          mov     [ecx+EI825REGTDH],eax                           ;initialize transmit descriptor head
  6234                                                          mov     eax,ENETTXDESCCT                                ;descriptor count
  6235                                                          mov     [ecx+EI825REGTDT],eax                           ;initialize transmit descriptor tail
  6236                                                          xor     eax,eax                                         ;zero register
  6237                                                          mov     [ebx+ETHER.txtail],eax                          ;initialize transmit tail
  6238                                  ;
  6239                                  ;       Enable transmit and pad short packets.
  6240                                  ;
  6241                                                          xor     eax,eax                                         ;zero register
  6242                                                          mov     al,EI825TCTLEN|EI825TCTLPSP                     ;enable|pad-short-packets
  6243                                                          mov     [ecx+EI825REGTCTL],eax                          ;enable and pad short packets
  6244                                                          clc
  6245                                                          jmp     .30                                             ;branch to exit
  6246                                  ;
  6247                                  ;       Indicate error on return.
  6248                                  ;
  6249                                  .20                      stc                                                     ;set carry
  6250                                  ;
  6251                                  ;       Restore and return.
  6252                                  ;
  6253                                  .30                     pop     ecx                                             ;restore non-volatile registers
  6254                                                          pop     ebx                                             ;
  6255                                                          ret                                                     ;return
  6256                                  ;-----------------------------------------------------------------------------------------------------------------------
  6257                                  ;
  6258                                  ;       Routine:        ConInitEtherContext
  6259                                  ;
  6260                                  ;       Description:    This routine zeros an ETHER structure
  6261                                  ;
  6262                                  ;       In:             DS:EBX  ETHER structure address
  6263                                  ;
  6264                                  ;-----------------------------------------------------------------------------------------------------------------------
  6265                                  ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  6266                                                          push    edi                                             ;
  6267                                                          push    es                                              ;
  6268                                  ;
  6269                                  ;       Zero context.
  6270                                  ;
  6271                                                          push    ds                                              ;load data segment...
  6272                                                          pop     es                                              ;...into extra segment
  6273                                                          mov     edi,ebx                                         ;ETHER structure offset
  6274                                                          mov     ecx,EETHERLEN                                   ;ETHER structure length
  6275                                                          xor     al,al                                           ;zero
  6276                                                          cld                                                     ;forward strings
  6277                                                          rep     stosb                                           ;zero structure members
  6278                                  ;
  6279                                  ;       Restore and return.
  6280                                  ;
  6281                                                          pop     es                                              ;restore non-volatile regs
  6282                                                          pop     edi                                             ;
  6283                                                          pop     ecx                                             ;
  6284                                                          ret                                                     ;return
  6285                                  ;-----------------------------------------------------------------------------------------------------------------------
  6286                                  ;
  6287                                  ;       Routine:        ConInitPCIContext
  6288                                  ;
  6289                                  ;       Description:    This routine initializes a PCI structure.
  6290                                  ;
  6291                                  ;       In:             DS:EBX  PCI structure address
  6292                                  ;
  6293                                  ;-----------------------------------------------------------------------------------------------------------------------
  6294                                  ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  6295                                                          push    edi                                             ;
  6296                                                          push    es                                              ;
  6297                                  ;
  6298                                  ;       Zero context.
  6299                                  ;
  6300                                                          push    ds                                              ;load data segment...
  6301                                                          pop     es                                              ;...into extra segment
  6302                                                          mov     edi,ebx                                         ;PCI structure offset
  6303                                                          mov     ecx,EPCILEN                                     ;PCI structure length
  6304                                                          xor     al,al                                           ;zero
  6305                                                          cld                                                     ;forward strings
  6306                                                          rep     stosb                                           ;zero structure members
  6307                                  ;
  6308                                  ;       Restore and return.
  6309                                  ;
  6310                                                          pop     es                                              ;restore non-volatile regs
  6311                                                          pop     edi                                             ;
  6312                                                          pop     ecx                                             ;
  6313                                                          ret                                                     ;return
  6314                                  ;-----------------------------------------------------------------------------------------------------------------------
  6315                                  ;
  6316                                  ;       Routine:        ConBuildPCISelector
  6317                                  ;
  6318                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  6319                                  ;
  6320                                  ;       In:             DS:EBX  PCI structure address
  6321                                  ;
  6322                                  ;       Out:            EAX     bus, device, function, register selector
  6323                                  ;
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325                                  ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  6326                                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  6327                                                          shl     dl,3                                            ;DL = dddd d000
  6328                                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  6329                                                          and     al,007h                                         ;AL = 0000 0fff
  6330                                                          or      al,dl                                           ;AL = dddd dfff
  6331                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  6332                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  6333                                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6334                                                          or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6335                                                          mov     [ebx+PCI.selector],eax                          ;set selector
  6336                                                          ret                                                     ;return
  6337                                  ;-----------------------------------------------------------------------------------------------------------------------
  6338                                  ;
  6339                                  ;       Routine:        ConReadPCIConfigData
  6340                                  ;
  6341                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  6342                                  ;
  6343                                  ;       In:             DS:EBX  PCI structure address
  6344                                  ;
  6345                                  ;       Out:            EAX     config data
  6346                                  ;
  6347                                  ;-----------------------------------------------------------------------------------------------------------------------
  6348                                  ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  6349                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  6350                                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  6351                                                          out     dx,eax                                          ;select bus, device, function, reg
  6352                                                          mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  6353                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  6354                                                          in      eax,dx                                          ;read register
  6355                                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  6356                                                          ret                                                     ;return
  6357                                  ;-----------------------------------------------------------------------------------------------------------------------
  6358                                  ;
  6359                                  ;       Routine:        ConNextPCIFunction
  6360                                  ;
  6361                                  ;       Description:    This routine increments the function of the device.
  6362                                  ;
  6363                                  ;       In:             DS:EBX  PCI structure address
  6364                                  ;
  6365                                  ;       Out:            CY      0 = overflow
  6366                                  ;                               1 = no overflow, continue
  6367                                  ;
  6368                                  ;-----------------------------------------------------------------------------------------------------------------------
  6369                                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  6370                                                          cmp     byte [ebx+PCI.function],8                       ;at limit?
  6371                                                          jb      .10                                             ;no, continue
  6372                                                          mov     byte [ebx+PCI.function],0                       ;zero function
  6373                                  .10                     ret                                                     ;return
  6374                                  ;-----------------------------------------------------------------------------------------------------------------------
  6375                                  ;
  6376                                  ;       Routine:        ConNextPCIDevice
  6377                                  ;
  6378                                  ;       Description:    This routine increments the device of the PCI across buses.
  6379                                  ;
  6380                                  ;       In:             DS:EBX  PCI structure address
  6381                                  ;
  6382                                  ;       Out:            CY      0 = overflow
  6383                                  ;                               1 = no overflow, continue
  6384                                  ;
  6385                                  ;-----------------------------------------------------------------------------------------------------------------------
  6386                                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  6387                                                          cmp     byte [ebx+PCI.device],32                        ;at limit?
  6388                                                          jb      .10                                             ;no, continue
  6389                                                          mov     byte [ebx+PCI.device],0                         ;zero device
  6390                                                          inc     byte [ebx+PCI.bus]                              ;next bus
  6391                                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  6392                                                          jb      .10                                             ;no, continue
  6393                                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  6394                                  .10                     ret                                                     ;return
  6395                                  ;-----------------------------------------------------------------------------------------------------------------------
  6396                                  ;
  6397                                  ;       Routine:        ConPutLabeledHexValue
  6398                                  ;
  6399                                  ;       Description:    Write labeled binary value as a hexadecimal string.
  6400                                  ;
  6401                                  ;       In:             ECX     binary value
  6402                                  ;                       EDX     prompt string address
  6403                                  ;
  6404                                  ;-----------------------------------------------------------------------------------------------------------------------
  6405                                  ConPutLabeledHexValue   push    edx                                             ;save prompt string address
  6406                                                          mov     edx,wzConsoleToken                              ;output buffer address
  6407                                                          unsignedToHexadecimal                                   ;convert binary to ASCII hex
  6408                                                          pop     edx                                             ;prompt string address
  6409                                                          call    ConPutLabeledString                             ;write labeled string to console
  6410                                                          ret                                                     ;return
  6411                                  ;-----------------------------------------------------------------------------------------------------------------------
  6412                                  ;
  6413                                  ;       Routine:        ConPutLabeledString
  6414                                  ;
  6415                                  ;       Description:    Write labeled string to the console.
  6416                                  ;
  6417                                  ;       In:             EDX     prompt string address
  6418                                  ;
  6419                                  ;-----------------------------------------------------------------------------------------------------------------------
  6420                                  ConPutLabeledString     putConsoleString                                        ;write value at DS:EDX to console
  6421                                                          putConsoleString wzConsoleToken                         ;write token value to console
  6422                                                          ret                                                     ;return
  6423                                  ;-----------------------------------------------------------------------------------------------------------------------
  6424                                  ;
  6425                                  ;       Routine:        ConReadPCIRegister
  6426                                  ;
  6427                                  ;       Description:    This routine reads a PCI register
  6428                                  ;
  6429                                  ;       In:             EAX     PCI register
  6430                                  ;
  6431                                  ;       Out:            EAX     PCI register value
  6432                                  ;-----------------------------------------------------------------------------------------------------------------------
  6433                                  ConReadPCIRegister      mov     dh,EPCIPORTCONFIGADDRHI                         ;hi-order PCI configuration addr port
  6434                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;lo-order PCI configuration addr port
  6435                                                          out     dx,eax                                          ;select PCI register
  6436                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  6437                                                          in      eax,dx                                          ;read register
  6438                                                          ret                                                     ;return
  6439                                  ;-----------------------------------------------------------------------------------------------------------------------
  6440                                  ;
  6441                                  ;       Routine:        ConPutLabeledHexLine
  6442                                  ;
  6443                                  ;       Description:    Write labeled binary value as a hexadecimal string with new-line.
  6444                                  ;
  6445                                  ;       In:             ECX     binary value
  6446                                  ;                       EDX     prompt string address
  6447                                  ;
  6448                                  ;-----------------------------------------------------------------------------------------------------------------------
  6449                                  ConPutLabeledHexLine    call    ConPutLabeledHexValue                           ;write labeled value to console
  6450                                                          call    ConPutNewLine                                   ;write new-line to console
  6451                                                          ret                                                     ;return
  6452                                  ;-----------------------------------------------------------------------------------------------------------------------
  6453                                  ;
  6454                                  ;       Routine:        ConPutLabeledDecLine
  6455                                  ;
  6456                                  ;       Description:    Write labeled binary value as a decimal string with new-line.
  6457                                  ;
  6458                                  ;       In:             ECX     binary value
  6459                                  ;                       EDX     prompt string address
  6460                                  ;
  6461                                  ;-----------------------------------------------------------------------------------------------------------------------
  6462                                  ConPutLabeledDecLine    call    ConPutLabeledDecValue                           ;write labeled value to console
  6463                                                          call    ConPutNewLine                                   ;write new-line to console
  6464                                                          ret                                                     ;return
  6465                                  ;-----------------------------------------------------------------------------------------------------------------------
  6466                                  ;
  6467                                  ;       Routine:        ConPutLabeledDecValue
  6468                                  ;
  6469                                  ;       Description:    Write labeled binary value as a decimal string.
  6470                                  ;
  6471                                  ;       In:             ECX     binary value
  6472                                  ;                       EDX     prompt string address
  6473                                  ;
  6474                                  ;-----------------------------------------------------------------------------------------------------------------------
  6475                                  ConPutLabeledDecValue   push    ebx                                             ;save non-volatile regs
  6476                                                          push    edx                                             ;save prompt string address
  6477                                                          mov     edx,wzConsoleToken                              ;output bufer address
  6478                                                          mov     bh,1                                            ;suppress leading zeros
  6479                                                          unsignedToDecimalString                                 ;convert binary to decimal string
  6480                                                          pop     edx                                             ;prompt string address
  6481                                                          call    ConPutLabeledString                             ;write labeled string to console
  6482                                                          pop     ebx                                             ;restore non-volatile regs
  6483                                                          ret                                                     ;return
  6484                                  ;-----------------------------------------------------------------------------------------------------------------------
  6485                                  ;
  6486                                  ;       Routine:        ConPutLabeledLine
  6487                                  ;
  6488                                  ;       Description:    Write labeled string value with new-line.
  6489                                  ;
  6490                                  ;       In:             EDX     prompt string address
  6491                                  ;
  6492                                  ;-----------------------------------------------------------------------------------------------------------------------
  6493                                  ConPutLabeledLine       call    ConPutLabeledString                             ;write labeled string to console
  6494                                                          call    ConPutNewLine                                   ;write new-line to console
  6495                                                          ret                                                     ;return
  6496                                  ;-----------------------------------------------------------------------------------------------------------------------
  6497                                  ;
  6498                                  ;       Routine:        ConTakeToken
  6499                                  ;
  6500                                  ;       Description:    This routine extracts the next token from the given source buffer.
  6501                                  ;
  6502                                  ;       In:             DS:EDX  source buffer address
  6503                                  ;                       DS:EBX  target buffer address
  6504                                  ;
  6505                                  ;       Out:            DS:EDX  source buffer address
  6506                                  ;                       DS:EBX  target buffer address
  6507                                  ;
  6508                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  6509                                  ;
  6510                                  ;-----------------------------------------------------------------------------------------------------------------------
  6511                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  6512                                                          push    edi                                             ;
  6513                                                          push    es                                              ;
  6514                                                          push    ds                                              ;load data segment selector ...
  6515                                                          pop     es                                              ;... into extra segment reg
  6516                                                          mov     esi,edx                                         ;source buffer address
  6517                                                          mov     edi,ebx                                         ;target buffer address
  6518                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  6519                                                          cld                                                     ;forward strings
  6520                                  .10                     lodsb                                                   ;load byte
  6521                                                          cmp     al,EASCIISPACE                                  ;space?
  6522                                                          je      .10                                             ;yes, continue
  6523                                                          test    al,al                                           ;end of line?
  6524                                                          jz      .40                                             ;yes, branch
  6525                                  .20                     stosb                                                   ;store byte
  6526                                                          lodsb                                                   ;load byte
  6527                                                          test    al,al                                           ;end of line?
  6528                                                          jz      .40                                             ;no, continue
  6529                                                          cmp     al,EASCIISPACE                                  ;space?
  6530                                                          jne     .20                                             ;no, continue
  6531                                  .30                     lodsb                                                   ;load byte
  6532                                                          cmp     al,EASCIISPACE                                  ;space?
  6533                                                          je      .30                                             ;yes, continue
  6534                                                          dec     esi                                             ;pre-position
  6535                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  6536                                                          mov     edi,edx                                         ;source buffer address
  6537                                  .50                     lodsb                                                   ;remaining byte
  6538                                                          stosb                                                   ;move to front of buffer
  6539                                                          test    al,al                                           ;end of line?
  6540                                                          jnz     .50                                             ;no, continue
  6541                                                          pop     es                                              ;restore non-volatile regs
  6542                                                          pop     edi                                             ;
  6543                                                          pop     esi                                             ;
  6544                                                          ret                                                     ;return
  6545                                  ;-----------------------------------------------------------------------------------------------------------------------
  6546                                  ;
  6547                                  ;       Routine:        ConDetermineCommand
  6548                                  ;
  6549                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  6550                                  ;
  6551                                  ;       input:          DS:EDX  command address
  6552                                  ;
  6553                                  ;       output:         EAX     >=0     = command nbr
  6554                                  ;                               0       = unknown command
  6555                                  ;
  6556                                  ;-----------------------------------------------------------------------------------------------------------------------
  6557                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  6558                                                          push    ecx                                             ;
  6559                                                          push    esi                                             ;
  6560                                                          push    edi                                             ;
  6561                                                          upperCaseString                                         ;upper-case string at EDX
  6562                                                          mov     esi,tConCmdTbl                                  ;commands table
  6563                                                          xor     edi,edi                                         ;intialize command number
  6564                                                          cld                                                     ;forward strings
  6565                                  .10                     lodsb                                                   ;command length
  6566                                                          movzx   ecx,al                                          ;command length
  6567                                                          jecxz   .20                                             ;branch if end of table
  6568                                                          mov     ebx,esi                                         ;table entry address
  6569                                                          add     esi,ecx                                         ;next table entry address
  6570                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  6571                                                          jecxz   .20                                             ;branch if equal
  6572                                                          inc     edi                                             ;increment command nbr
  6573                                                          jmp     .10                                             ;repeat
  6574                                  .20                     mov     eax,edi                                         ;command number
  6575                                                          pop     edi                                             ;restore non-volatile regs
  6576                                                          pop     esi                                             ;
  6577                                                          pop     ecx                                             ;
  6578                                                          pop     ebx                                             ;
  6579                                                          ret                                                     ;return
  6580                                  ;-----------------------------------------------------------------------------------------------------------------------
  6581                                  ;
  6582                                  ;       Routine:        ConClear
  6583                                  ;
  6584                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  6585                                  ;
  6586                                  ;-----------------------------------------------------------------------------------------------------------------------
  6587                                  ConClear                clearConsoleScreen                                      ;clear console screen
  6588                                                          ret                                                     ;return
  6589                                  ;-----------------------------------------------------------------------------------------------------------------------
  6590                                  ;
  6591                                  ;       Routine:        ConDate
  6592                                  ;
  6593                                  ;       Description:    This routine handles the DATE command.
  6594                                  ;
  6595                                  ;-----------------------------------------------------------------------------------------------------------------------
  6596                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6597                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  6598                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6599                                                          call    ConPutNewLine                                   ;write newline to console
  6600                                                          ret                                                     ;return
  6601                                  ;-----------------------------------------------------------------------------------------------------------------------
  6602                                  ;
  6603                                  ;       Routine:        ConDay
  6604                                  ;
  6605                                  ;       Description:    This routine handles the DAY command.
  6606                                  ;
  6607                                  ;-----------------------------------------------------------------------------------------------------------------------
  6608                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6609                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  6610                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6611                                                          call    ConPutNewLine                                   ;write newline to console
  6612                                                          ret                                                     ;return
  6613                                  ;-----------------------------------------------------------------------------------------------------------------------
  6614                                  ;
  6615                                  ;       Routine:        ConDev
  6616                                  ;
  6617                                  ;       Description:    This routine handles the DEV command.
  6618                                  ;
  6619                                  ;       Input:          wzConsoleInBuffer contains parameters(s)
  6620                                  ;
  6621                                  ;-----------------------------------------------------------------------------------------------------------------------
  6622                                  ;ConDev                  push    ebx                                             ;save non-volatile regs
  6623                                  ;                        push    esi                                             ;
  6624                                  ;
  6625                                  ;                        mov     esi,wsConsoleEther                              ;ETHER struct addr
  6626                                  ;                        lea     ebx,[esi+ETHER.pci]                             ;PCI address
  6627                                  ;                        call    ConFindPCIEther                                 ;find Intel Pro/1000 MT
  6628                                  ;                        jc      .10                                             ;branch if not found
  6629                                  ;
  6630                                  ;                        putConsoleString czEthernetAdapterFound
  6631                                  ;
  6632                                  ;                        mov     al,010h                                         ;Base Address Register (BAR) 0
  6633                                  ;                        call    ConSetPCIRegister                               ;set PCI register
  6634                                  ;                        call    ConBuildPCISelector                             ;build PCI selector
  6635                                  ;                        call    ConReadPCIConfigData                            ;read BAR 0
  6636                                  ;                        mov     [esi+ETHER.mmio],eax                            ;store MMIO address
  6637                                  ;
  6638                                  ;                        mov     al,018h                                         ;Base Address Register (BAR) 2
  6639                                  ;                        call    ConSetPCIRegister                               ;set PCI register
  6640                                  ;                        call    ConBuildPCISelector                             ;build PCI selector
  6641                                  ;                        call    ConReadPCIConfigData                            ;read BAR 2
  6642                                  ;                        mov     [esi+ETHER.port],eax                            ;store i/o port
  6643                                  ;
  6644                                  ;.10                     pop     esi                                             ;restore non-volatile regs
  6645                                  ;                        pop     ebx                                             ;
  6646                                  ;                        ret                                                     ;return
  6647                                  ;-----------------------------------------------------------------------------------------------------------------------
  6648                                  ;
  6649                                  ;       Routine:        ConFindPCIEther
  6650                                  ;
  6651                                  ;       Description:    This routine attempts to locate the first PCI ethernet adapter.
  6652                                  ;
  6653                                  ;       In:             DS:EBX  PCI structure address
  6654                                  ;
  6655                                  ;-----------------------------------------------------------------------------------------------------------------------
  6656                                  ;ConFindPCIEther         call    ConInitPCIContext                               ;initialize PCI
  6657                                  ;.10                     call    ConGetPCIDeviceVendor                           ;EAX = vendor id
  6658                                  ;                        cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Pro/1000 MT?
  6659                                   ;                       je      .30                                             ;no, branch
  6660                                  ;.20                     call    ConNextPCIFunction                              ;step to next bus, device, function
  6661                                  ;                        jb      .10                                             ;next
  6662                                  ;                        stc                                                     ;indicate not found
  6663                                  ;.30                     ret                                                     ;return
  6664                                  ;-----------------------------------------------------------------------------------------------------------------------
  6665                                  ;
  6666                                  ;       Routine:        ConGetPCIDeviceVendor
  6667                                  ;
  6668                                  ;       Description:    This routine returns the PCI device and vendor IDs
  6669                                  ;
  6670                                  ;       In:             DS:EBX  PCI structure address
  6671                                  ;
  6672                                  ;       Out:            EAX     devivce/vendor ID
  6673                                  ;
  6674                                  ;-----------------------------------------------------------------------------------------------------------------------
  6675                                  ;ConGetPCIDeviceVendor   mov     al,EPCIREGVENDORDEVICE                          ;PCI vendor/device register
  6676                                  ;                        call    ConSetPCIRegister                               ;set the PCICONTEXT register
  6677                                  ;                        call    ConBuildPCISelector                             ;build selector from bus, dev, fn, reg
  6678                                  ;                        call    ConReadPCIConfigData                            ;read config data from register
  6679                                  
  6680                                  ;                        cmp     eax,-1
  6681                                  ;                        je      .10
  6682                                  ;                        mov     ecx,eax                                         ;unsigned integer param
  6683                                  ;                        mov     edx,wzConsoleToken                              ;target buffer address
  6684                                  ;                        unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  6685                                  ;                        putConsoleString wzConsoleToken                         ;output string to console
  6686                                  ;                        putConsoleString czNewLine                              ;output newline to console
  6687                                  
  6688                                  ;.10                     ret                                                     ;return
  6689                                  ;-----------------------------------------------------------------------------------------------------------------------
  6690                                  ;
  6691                                  ;       Routine:        ConSetPCIRegister
  6692                                  ;
  6693                                  ;       Description:    This routine sets the register member of the PCI structure
  6694                                  ;
  6695                                  ;       In:             AL      register value (00-FF)
  6696                                  ;
  6697                                  ;-----------------------------------------------------------------------------------------------------------------------
  6698                                  ;ConSetPCIRegister       mov     [ebx+PCI.register],al                           ;set register
  6699                                  ;                        ret                                                     ;return
  6700                                  ;-----------------------------------------------------------------------------------------------------------------------
  6701                                  ;
  6702                                  ;       Routine:        ConExit
  6703                                  ;
  6704                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  6705                                  ;
  6706                                  ;-----------------------------------------------------------------------------------------------------------------------
  6707                                  ConExit                 resetSystem                                             ;issue system reset
  6708                                                          ret                                                     ;return
  6709                                  ;-----------------------------------------------------------------------------------------------------------------------
  6710                                  ;
  6711                                  ;       Routine:        ConFree
  6712                                  ;
  6713                                  ;       Description:    This routine handles the FREE command.
  6714                                  ;
  6715                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  6716                                  ;
  6717                                  ;-----------------------------------------------------------------------------------------------------------------------
  6718                                  ConFree                 push    ebx                                             ;save non-volatile regs
  6719                                                          push    ecx                                             ;
  6720                                                          push    esi                                             ;
  6721                                                          push    edi                                             ;
  6722                                  ;
  6723                                  ;       Get address parameter
  6724                                  ;
  6725                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  6726                                                          mov     ebx,wzConsoleToken                              ;console command token address
  6727                                                          call    ConTakeToken                                    ;take first param as token
  6728                                  ;
  6729                                  ;       Convert input parameter from hexadecimal string to binary
  6730                                  ;
  6731                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  6732                                                          je      .10                                             ;no, branch
  6733                                                          mov     edx,wzConsoleToken                              ;first param as token address
  6734                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  6735                                                          test    eax,eax                                         ;valid parameter?
  6736                                                          jz      .10                                             ;no, branch
  6737                                  ;
  6738                                  ;       Free memory block
  6739                                  ;
  6740                                                          freeMemory eax                                          ;free memory
  6741                                                          cmp     eax,-1                                          ;memory freed?
  6742                                                          je      .10                                             ;no, branch
  6743                                  ;
  6744                                  ;       Indicate memory freed
  6745                                  ;
  6746                                                          putConsoleString czOK                                   ;indicate success
  6747                                  ;
  6748                                  ;       Restore and return
  6749                                  ;
  6750                                  .10                     pop     edi                                             ;restore non-volatile regs
  6751                                                          pop     esi                                             ;
  6752                                                          pop     ecx                                             ;
  6753                                                          pop     ebx                                             ;
  6754                                                          ret                                                     ;return
  6755                                  ;-----------------------------------------------------------------------------------------------------------------------
  6756                                  ;
  6757                                  ;       Routine:        ConHour
  6758                                  ;
  6759                                  ;       Description:    This routine Handles the HOUR command.
  6760                                  ;
  6761                                  ;-----------------------------------------------------------------------------------------------------------------------
  6762                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6763                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  6764                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6765                                                          call    ConPutNewLine                                   ;write newline to console
  6766                                                          ret                                                     ;return
  6767                                  ;-----------------------------------------------------------------------------------------------------------------------
  6768                                  ;
  6769                                  ;       Routine:        ConInt6
  6770                                  ;
  6771                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  6772                                  ;
  6773                                  ;-----------------------------------------------------------------------------------------------------------------------
  6774                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  6775                                                          ret                                                     ;return (not executed)
  6776                                  ;-----------------------------------------------------------------------------------------------------------------------
  6777                                  ;
  6778                                  ;       Routine:        ConMalloc
  6779                                  ;
  6780                                  ;       Description:    This routine handles the MALLOC command.
  6781                                  ;
  6782                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  6783                                  ;
  6784                                  ;-----------------------------------------------------------------------------------------------------------------------
  6785                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  6786                                                          push    ecx                                             ;
  6787                                                          push    esi                                             ;
  6788                                                          push    edi                                             ;
  6789                                  ;
  6790                                  ;       Get size parameter
  6791                                  ;
  6792                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  6793                                                          mov     ebx,wzConsoleToken                              ;console command token address
  6794                                                          call    ConTakeToken                                    ;take first param as token
  6795                                  ;
  6796                                  ;       Convert input parameter from decimal string to binary
  6797                                  ;
  6798                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  6799                                                          je      .10                                             ;no, branch
  6800                                                          mov     edx,wzConsoleToken                              ;first param as token address
  6801                                                          decimalToUnsigned                                       ;convert string token to unsigned
  6802                                                          test    eax,eax                                         ;valid parameter?
  6803                                                          jz      .10                                             ;no, branch
  6804                                  ;
  6805                                  ;       Allocate memory block
  6806                                  ;
  6807                                                          allocateMemory eax                                      ;allocate memory
  6808                                                          test    eax,eax                                         ;memory allocated?
  6809                                                          jz      .10                                             ;no, branch
  6810                                  ;
  6811                                  ;       Report allocated memory block address
  6812                                  ;
  6813                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  6814                                                          mov     ecx,eax                                         ;memory address
  6815                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  6816                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  6817                                                          call    ConPutNewLine                                   ;display new line
  6818                                  .10                     pop     edi                                             ;restore non-volatile regs
  6819                                                          pop     esi                                             ;
  6820                                                          pop     ecx                                             ;
  6821                                                          pop     ebx                                             ;
  6822                                                          ret                                                     ;return
  6823                                  ;-----------------------------------------------------------------------------------------------------------------------
  6824                                  ;
  6825                                  ;       Routine:        ConMem
  6826                                  ;
  6827                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  6828                                  ;
  6829                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  6830                                  ;
  6831                                  ;-----------------------------------------------------------------------------------------------------------------------
  6832                                  ConMem                  push    ebx                                             ;save non-volatile regs
  6833                                                          push    esi                                             ;
  6834                                                          push    edi                                             ;
  6835                                  ;
  6836                                  ;       Update the source address if a parameter is given.
  6837                                  ;
  6838                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  6839                                                          mov     ebx,wzConsoleToken                              ;console command token address
  6840                                                          call    ConTakeToken                                    ;take first param as token
  6841                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  6842                                                          je      .10                                             ;no, branch
  6843                                                          mov     edx,wzConsoleToken                              ;first param as token address
  6844                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  6845                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  6846                                  ;
  6847                                  ;       Setup source address and row count.
  6848                                  ;
  6849                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  6850                                                          xor     ecx,ecx                                         ;zero register
  6851                                                          mov     cl,16                                           ;row count
  6852                                  ;
  6853                                  ;       Start the row with the source address in hexadecimal.
  6854                                  ;
  6855                                  .20                     push    ecx                                             ;save remaining rows
  6856                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  6857                                                          mov     edx,edi                                         ;output buffer address
  6858                                                          mov     ecx,esi                                         ;console memory address
  6859                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  6860                                                          add     edi,8                                           ;end of memory addr hexnum
  6861                                                          mov     al,' '                                          ;ascii space
  6862                                                          stosb                                                   ;store delimiter
  6863                                  ;
  6864                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  6865                                  ;
  6866                                                          xor     ecx,ecx                                         ;zero register
  6867                                                          mov     cl,16                                           ;loop count
  6868                                  .30                     push    ecx                                             ;save loop count
  6869                                                          lodsb                                                   ;memory byte
  6870                                                          mov     ah,al                                           ;memory byte
  6871                                                          shr     al,4                                            ;high-order in bits 3-0
  6872                                                          or      al,30h                                          ;apply ascii numeric zone
  6873                                                          cmp     al,3ah                                          ;numeric range?
  6874                                                          jb      .40                                             ;yes, skip ahead
  6875                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  6876                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  6877                                                          mov     al,ah                                           ;low-order in bits 3-0
  6878                                                          and     al,0fh                                          ;mask out high-order bits
  6879                                                          or      al,30h                                          ;apply ascii numeric zone
  6880                                                          cmp     al,3ah                                          ;numeric range?
  6881                                                          jb      .50                                             ;yes, skip ahead
  6882                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  6883                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  6884                                                          mov     al,' '                                          ;ascii space
  6885                                                          stosb                                                   ;store ascii space delimiter
  6886                                                          pop     ecx                                             ;loop count
  6887                                                          loop    .30                                             ;next
  6888                                  ;
  6889                                  ;       Output printable ASCII character section for the row.
  6890                                  ;
  6891                                                          sub     esi,16                                          ;reset source pointer
  6892                                                          mov     cl,16                                           ;loop count
  6893                                  .60                     lodsb                                                   ;source byte
  6894                                                          cmp     al,32                                           ;printable? (low-range test)
  6895                                                          jb      .70                                             ;no, skip ahead
  6896                                                          cmp     al,128                                          ;printable? (high-range test)
  6897                                                          jb      .80                                             ;yes, skip ahead
  6898                                  .70                     mov     al,' '                                          ;display space instead of printable
  6899                                  .80                     stosb                                                   ;store printable ascii byte
  6900                                                          loop    .60                                             ;next source byte
  6901                                                          xor     al,al                                           ;nul-terminator
  6902                                                          stosb                                                   ;terminate output line
  6903                                  ;
  6904                                  ;       Display constructed output buffer and newline.
  6905                                  ;
  6906                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  6907                                                          call    ConPutNewLine                                   ;display new line
  6908                                  ;
  6909                                  ;       Repeat until all lines displayed and preserve source address.
  6910                                  ;
  6911                                                          pop     ecx                                             ;remaining rows
  6912                                                          loop    .20                                             ;next row
  6913                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  6914                                                          pop     edi                                             ;restore regs
  6915                                                          pop     esi                                             ;
  6916                                                          pop     ebx                                             ;
  6917                                                          ret                                                     ;return
  6918                                  ;-----------------------------------------------------------------------------------------------------------------------
  6919                                  ;
  6920                                  ;       Routine:        ConMinute
  6921                                  ;
  6922                                  ;       Description:    This routine Handles the MINUTE command.
  6923                                  ;
  6924                                  ;-----------------------------------------------------------------------------------------------------------------------
  6925                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6926                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  6927                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6928                                                          call    ConPutNewLine                                   ;write newline to console
  6929                                                          ret                                                     ;return
  6930                                  ;-----------------------------------------------------------------------------------------------------------------------
  6931                                  ;
  6932                                  ;       Routine:        ConMonth
  6933                                  ;
  6934                                  ;       Description:    This routine Handles the MONTH command.
  6935                                  ;
  6936                                  ;-----------------------------------------------------------------------------------------------------------------------
  6937                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6938                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  6939                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6940                                                          call    ConPutNewLine                                   ;write newline to console
  6941                                                          ret                                                     ;return
  6942                                  ;-----------------------------------------------------------------------------------------------------------------------
  6943                                  ;
  6944                                  ;       Routine:        ConMonthName
  6945                                  ;
  6946                                  ;       Description:    This routine Handles the MONTH.NAME command.
  6947                                  ;
  6948                                  ;-----------------------------------------------------------------------------------------------------------------------
  6949                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  6950                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  6951                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  6952                                                          call    ConPutNewLine                                   ;write newline to console
  6953                                                          ret                                                     ;return
  6954                                  ;-----------------------------------------------------------------------------------------------------------------------
  6955                                  ;
  6956                                  ;       Routine:        ConPCIProbe
  6957                                  ;
  6958                                  ;       Description:    This routine handles the PCIProbe command.
  6959                                  ;
  6960                                  ;-----------------------------------------------------------------------------------------------------------------------
  6961                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  6962                                  ;
  6963                                  ;       Initialize variables.
  6964                                  ;       Construct PCI selector.
  6965                                  ;       Read PCI configuration data.
  6966                                  ;
  6967                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  6968                                                          call    ConInitPCIContext                               ;initialize PCI struct
  6969                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  6970                                                          call    ConReadPCIConfigData                            ;read the configuration data
  6971                                  ;
  6972                                  ;       Interpret PCI data value and display finding.
  6973                                  ;
  6974                                                          cmp     eax,-1                                          ;function defined?
  6975                                                          jne     .20                                             ;yes, branch
  6976                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  6977                                                          je      .40                                             ;yes, skip to next device
  6978                                                          jmp     short .30                                       ;no, skip to next function
  6979                                  ;
  6980                                  ;       Build PCI identifying string.
  6981                                  ;       Write identifying string to console.
  6982                                  ;       Determine the vendor and chip.
  6983                                  ;       Write vendor and chip to console.
  6984                                  ;
  6985                                  .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6986                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6987                                                          call    ConInterpretPCIData                             ;update flags based on data
  6988                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6989                                                          putConsoleString czSpace                                ;space delimiter
  6990                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6991                                                          putConsoleString czSpace                                ;space delimiter
  6992                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6993                                                          call    ConPutNewLine                                   ;display new line
  6994                                  ;
  6995                                  ;       Next function.
  6996                                  ;
  6997                                  .30                     call    ConNextPCIFunction                              ;next function
  6998                                                          jb      .10                                             ;continue if no overflow
  6999                                  ;
  7000                                  ;       Next device, bus.
  7001                                  ;
  7002                                  .40                     call    ConNextPCIDevice                                ;next device, bus
  7003                                                          jb      .10                                             ;continue if no overflow
  7004                                  ;
  7005                                  ;       Restore and return.
  7006                                  ;
  7007                                                          pop     ebx                                             ;restore non-volatile regs
  7008                                                          ret                                                     ;return
  7009                                  ;-----------------------------------------------------------------------------------------------------------------------
  7010                                  ;
  7011                                  ;       Routine:        ConBuildPCIIdent
  7012                                  ;
  7013                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  7014                                  ;                       Function code values.
  7015                                  ;
  7016                                  ;       In:             DS:EBX  PCI structure address
  7017                                  ;                       DS:EDX  output buffer address 999.99.9\0
  7018                                  ;
  7019                                  ;-----------------------------------------------------------------------------------------------------------------------
  7020                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  7021                                                          push    es                                              ;
  7022                                  ;
  7023                                  ;       Establish addressability
  7024                                  ;
  7025                                                          push    ds                                              ;load data segment...
  7026                                                          pop     es                                              ;...into extra segment reg
  7027                                  ;
  7028                                  ;       Build identifier string (bus.device.function)
  7029                                  ;
  7030                                                          mov     edi,edx                                         ;output buffer address
  7031                                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  7032                                                          xor     ah,ah                                           ;zero high-order dividend
  7033                                                          mov     cl,100                                          ;divisor (10^2)
  7034                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  7035                                                          or      al,30h                                          ;apply ASCII zone
  7036                                                          cld                                                     ;forward strings
  7037                                                          stosb                                                   ;store 100's digit
  7038                                                          mov     al,ah                                           ;bus MOD 100
  7039                                                          xor     ah,ah                                           ;zero high-order dividend
  7040                                                          mov     cl,10                                           ;divisor (10^1)
  7041                                                          div     cl                                              ;AL=10's, AH=1's
  7042                                                          or      ax,3030h                                        ;apply ASCII zone
  7043                                                          stosw                                                   ;store 10's and 1's
  7044                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  7045                                                          stosb                                                   ;store delimiter
  7046                                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  7047                                                          xor     ah,ah                                           ;zero high order dividend
  7048                                                          mov     cl,10                                           ;divisor (10^1)
  7049                                                          div     cl                                              ;AL=10's, AH=1's
  7050                                                          or      ax,3030h                                        ;apply ASCII zone
  7051                                                          stosw                                                   ;store 10's and 1's
  7052                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  7053                                                          stosb                                                   ;store delimiter
  7054                                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  7055                                                          or      al,30h                                          ;apply ASCII zone
  7056                                                          stosb                                                   ;store 1's
  7057                                                          xor     al,al                                           ;null terminator
  7058                                                          stosb                                                   ;store terminator
  7059                                  ;
  7060                                  ;       Restore and return.
  7061                                  ;
  7062                                                          pop     es                                              ;restore non-volatile regs
  7063                                                          pop     edi                                             ;
  7064                                                          ret                                                     ;return
  7065                                  ;-----------------------------------------------------------------------------------------------------------------------
  7066                                  ;
  7067                                  ;       Routine:        ConInterpretPCIData
  7068                                  ;
  7069                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  7070                                  ;
  7071                                  ;       In:             DS:EBX  PCI structure address
  7072                                  ;
  7073                                  ;-----------------------------------------------------------------------------------------------------------------------
  7074                                  ConInterpretPCIData     mov     eax,czApple
  7075                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  7076                                                          jne     .10                                             ;no, branch
  7077                                                          mov     edx,czUSBController
  7078                                                          cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  7079                                                          je      .40                                             ;yes, branch
  7080                                                          mov     edx,czOther                                     ;other
  7081                                                          jmp     .40                                             ;continue
  7082                                  .10                     mov     eax,czIntel                                     ;Intel
  7083                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  7084                                                          jne     .20                                             ;no, branch
  7085                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  7086                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  7087                                                          je      .40                                             ;yes, branch
  7088                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  7089                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  7090                                                          je      .40                                             ;yes, branch
  7091                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  7092                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  7093                                                          je      .40                                             ;yes, branch
  7094                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  7095                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  7096                                                          je      .40                                             ;yes, branch
  7097                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  7098                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  7099                                                          je      .40                                             ;yes, branch
  7100                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  7101                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  7102                                                          je      .40                                             ;yes, branch
  7103                                                          mov     edx,czOther                                     ;other
  7104                                                          jmp     .40                                             ;continue
  7105                                  .20                     mov     eax,czOracle                                    ;Oracle
  7106                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  7107                                                          jne     .30                                             ;no, branch
  7108                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  7109                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  7110                                                          je      .40                                             ;yes, branch
  7111                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  7112                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  7113                                                          je      .40                                             ;yes, branch
  7114                                                          mov     edx,czOther                                     ;other
  7115                                                          jmp     .40                                             ;continue
  7116                                  .30                     mov     eax,czOther                                     ;other
  7117                                                          mov     edx,czOther                                     ;other
  7118                                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  7119                                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  7120                                                          ret                                                     ;return
  7121                                  ;-----------------------------------------------------------------------------------------------------------------------
  7122                                  ;
  7123                                  ;       Routine:        ConSecond
  7124                                  ;
  7125                                  ;       Description:    This routine Handles the SECOND command.
  7126                                  ;
  7127                                  ;-----------------------------------------------------------------------------------------------------------------------
  7128                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7129                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  7130                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  7131                                                          call    ConPutNewLine                                   ;write newline to console
  7132                                                          ret                                                     ;return
  7133                                  ;-----------------------------------------------------------------------------------------------------------------------
  7134                                  ;
  7135                                  ;       Routine:        ConTime
  7136                                  ;
  7137                                  ;       Description:    This routine Handles the TIME command.
  7138                                  ;
  7139                                  ;-----------------------------------------------------------------------------------------------------------------------
  7140                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7141                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  7142                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  7143                                                          call    ConPutNewLine                                   ;write newline to console
  7144                                                          ret                                                     ;return
  7145                                  ;-----------------------------------------------------------------------------------------------------------------------
  7146                                  ;
  7147                                  ;       Routine:        ConVersion
  7148                                  ;
  7149                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  7150                                  ;
  7151                                  ;-----------------------------------------------------------------------------------------------------------------------
  7152                                  ConVersion              putConsoleString czTitle                                ;display version message
  7153                                                          ret                                                     ;return
  7154                                  ;-----------------------------------------------------------------------------------------------------------------------
  7155                                  ;
  7156                                  ;       Routine:        ConWeekday
  7157                                  ;
  7158                                  ;       Description:    This routine handles the WEEKDAY command.
  7159                                  ;
  7160                                  ;-----------------------------------------------------------------------------------------------------------------------
  7161                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7162                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  7163                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  7164                                                          call    ConPutNewLine                                   ;write newline to console
  7165                                                          ret                                                     ;return
  7166                                  ;-----------------------------------------------------------------------------------------------------------------------
  7167                                  ;
  7168                                  ;       Routine:        ConWeekdayName
  7169                                  ;
  7170                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  7171                                  ;
  7172                                  ;-----------------------------------------------------------------------------------------------------------------------
  7173                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  7174                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  7175                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  7176                                                          call    ConPutNewLine                                           ;write newline to console
  7177                                                          ret                                                             ;return
  7178                                  ;-----------------------------------------------------------------------------------------------------------------------
  7179                                  ;
  7180                                  ;       Routine:        ConYear
  7181                                  ;
  7182                                  ;       Description:    This routine Handles the YEAR command.
  7183                                  ;
  7184                                  ;-----------------------------------------------------------------------------------------------------------------------
  7185                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7186                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  7187                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  7188                                                          call    ConPutNewLine                                   ;write newline to console
  7189                                                          ret                                                     ;return
  7190                                  ;-----------------------------------------------------------------------------------------------------------------------
  7191                                  ;
  7192                                  ;       Routine:        ConYearIsLeap
  7193                                  ;
  7194                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  7195                                  ;
  7196                                  ;-----------------------------------------------------------------------------------------------------------------------
  7197                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  7198                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  7199                                                          jecxz   .10                                             ;branch if not leap
  7200                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  7201                                                          jmp     .20                                             ;continue
  7202                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  7203                                  .20                     ret                                                     ;return
  7204                                  ;-----------------------------------------------------------------------------------------------------------------------
  7205                                  ;
  7206                                  ;       Tables
  7207                                  ;
  7208                                  ;-----------------------------------------------------------------------------------------------------------------------
  7209                                                                                                                  ;---------------------------------------
  7210                                                                                                                  ;  Command Jump Table
  7211                                                                                                                  ;---------------------------------------
  7212                                  tConJmpTbl              equ     $                                               ;command jump table
  7213                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  7214                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  7215                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  7216                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  7217                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  7218                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  7219                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  7220                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  7221                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  7222                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  7223                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  7224                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  7225                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  7226                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  7227                                                          dd      ConDate         - ConCode                       ;date command routine offset
  7228                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  7229                                                          dd      ConFree         - ConCode                       ;free command routine offset
  7230                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  7231                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  7232                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  7233                                                          dd      ConTime         - ConCode                       ;time command routine offset
  7234                                                          dd      ConYear         - ConCode                       ;year command routine offset
  7235                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  7236                                                          dd      ConDay          - ConCode                       ;day command routine offset
  7237                                  ;                        dd      ConDev          - ConCode                       ;dev command routine offset
  7238                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  7239                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  7240                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  7241                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  7242                                                                                                                  ;---------------------------------------
  7243                                                                                                                  ;  Command Name Table
  7244                                                                                                                  ;---------------------------------------
  7245                                  tConCmdTbl              equ     $                                               ;command name table
  7246                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  7247                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  7248                                                          db      11,"MONTH.NAME",0                               ;month.name command
  7249                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  7250                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  7251                                                          db      8,"VERSION",0                                   ;version command
  7252                                                          db      8,"WEEKDAY",0                                   ;weekday command
  7253                                                          db      7,"MALLOC",0                                    ;malloc command
  7254                                                          db      7,"MEMORY",0                                    ;memory command
  7255                                                          db      7,"MINUTE",0                                    ;minute command
  7256                                                          db      7,"SECOND",0                                    ;second command
  7257                                                          db      6,"CLEAR",0                                     ;clear command
  7258                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  7259                                                          db      6,"MONTH",0                                     ;month command
  7260                                                          db      5,"DATE",0                                      ;date command
  7261                                                          db      5,"EXIT",0                                      ;exit command
  7262                                                          db      5,"FREE",0                                      ;free command
  7263                                                          db      5,"HOUR",0                                      ;hour command
  7264                                                          db      5,"INT6",0                                      ;int6 command
  7265                                                          db      5,"QUIT",0                                      ;quit command
  7266                                                          db      5,"TIME",0                                      ;time command
  7267                                                          db      5,"YEAR",0                                      ;year command
  7268                                                          db      4,"CLS",0                                       ;cls command
  7269                                                          db      4,"DAY",0                                       ;day command
  7270                                  ;                        db      4,"DEV",0                                       ;dev command
  7271                                                          db      4,"MEM",0                                       ;mem command
  7272                                                          db      4,"VER",0                                       ;ver command
  7273                                                          db      0                                               ;end of table
  7274                                  ;-----------------------------------------------------------------------------------------------------------------------
  7275                                  ;
  7276                                  ;       Constants
  7277                                  ;
  7278                                  ;-----------------------------------------------------------------------------------------------------------------------
  7279                                  ;-----------------------------------------------------------------------------------------------------------------------
  7280                                  ;
  7281                                  ;       Panels
  7282                                  ;
  7283                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  7284                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  7285                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  7286                                  ;
  7287                                  ;-----------------------------------------------------------------------------------------------------------------------
  7288                                  czPnlMain               dd      czFldPnlIdCon001
  7289                                                          db      00,00,02h,06
  7290                                                          dd      czFldTitleCon001
  7291                                                          db      00,29,07h,21
  7292                                                          dd      czFldDatTmCon001
  7293                                                          db      00,63,02h,17
  7294                                                          dd      czFldPrmptCon001
  7295                                                          db      23,00,07h,01
  7296                                                          dd      wzConsoleInBuffer
  7297                                                          db      128+23,01,0Fh,79
  7298                                                          dd      0
  7299                                  ;-----------------------------------------------------------------------------------------------------------------------
  7300                                  ;
  7301                                  ;       Strings
  7302                                  ;
  7303                                  ;-----------------------------------------------------------------------------------------------------------------------
  7304                                  czFldPnlIdCon001        db      "CON001"
  7305                                  czFldTitleCon001        db      "CustomOS Version 0.15"
  7306                                  czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"
  7307                                  czFldPrmptCon001        db      ":"
  7308                                  
  7309                                  czApple                 db      "Apple",0                                       ;vendor name string
  7310                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  7311                                  czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  7312                                  czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  7313                                  czEthernetDeviceVendor  db      " Device: ",0                                   ;PCI device label
  7314                                  czEthernetIRQ           db      " IRQ:    ",0                                   ;ethernet IRQ
  7315                                  czEthernetMAC           db      " MAC Address:  ",0                             ;MAC address
  7316                                  czEthernetMemoryAddr    db      "     MMIO:     ",0                             ;ethernet I/O memory address
  7317                                  czEthernetPort          db      " Port:   ",0                                   ;ethernet I/O port address
  7318                                  czEthernetSelector      db      " PCI Selector: ",0                             ;PCI selector label
  7319                                  czEthernetStatusCommand db      " Status: ",0                                   ;PCI status label
  7320                                  czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  7321                                  czIntel                 db      "Intel",0                                       ;vendor name string
  7322                                  czIntsEnabled           db      "Interrupts enabled",13,10,0
  7323                                  czKB                    db      "KB",0                                          ;Kilobytes
  7324                                  czLinkUp                db      "Link up",13,10,0
  7325                                  czMTAInit               db      "MTA Initialized",13,10,0
  7326                                  czNewLine               db      13,10,0                                         ;new line string
  7327                                  czOK                    db      "ok",13,10,0                                    ;ok string
  7328                                  czOracle                db      "Oracle",0                                      ;vendor name string
  7329                                  czOther                 db      "Other",0                                       ;default name string
  7330                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  7331                                  czPeriod                db      ".",0                                           ;period delimiter
  7332                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  7333                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  7334                                  czPrompt                db      ":",0                                           ;prompt string
  7335                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  7336                                  czReceiveStarted        db      "Receive started",13,10,0
  7337                                  czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  7338                                  czSpace                 db      " ",0                                           ;space delimiter
  7339                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  7340                                  czTransmitStarted       db      "Transmit started",13,10,0
  7341                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  7342                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  7343                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  7344                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  7345                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  7346                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  7347                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  7348                                                          times   03000h-($-$$) db 0h                             ;zero fill to end of section
  7349                                  %endif
  7350                                  %ifdef BUILDDISK
  7351                                  ;-----------------------------------------------------------------------------------------------------------------------
  7352                                  ;
  7353                                  ;       Free Disk Space                                                         @disk: 00b600   @mem:  n/a
  7354                                  ;
  7355                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  7356                                  ;
  7357                                  ;-----------------------------------------------------------------------------------------------------------------------
  7358                                  section                 unused                                                  ;unused disk space
  7359                                                          times   EBOOTDISKBYTES-0B600h db 0F6h                   ;fill to end of disk image
  7360                                  %endif
  7361                                  ;=======================================================================================================================
  7362                                  ;
  7363                                  ;       End of Program Code
  7364                                  ;
  7365                                  ;=======================================================================================================================
