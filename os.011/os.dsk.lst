     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.011
     6                                  ;
     7                                  ;	Description:	In this sample, the kernel is expanded to iterate across tasks in a task queue.
     8                                  ;
     9                                  ;	Revised:	July 1, 2017
    10                                  ;
    11                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    17                                  ;
    18                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;	Assembly Directives
    24                                  ;
    25                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK
    34                                  %define BUILDBOOT
    35                                  %define BUILDCOM
    36                                  %endif
    37                                  %ifdef BUILDPREP
    38                                  %define BUILDBOOT
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;	Conventions
    43                                  ;
    44                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    45                                  ;			Labels within a routine begin at ".10" and increment by 10.
    46                                  ;
    47                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    48                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    49                                  ;			Register names in comments are in upper case.
    50                                  ;			Hexadecimal values in comments are in lower case.
    51                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    52                                  ;			register contents on entry and exit.
    53                                  ;
    54                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    55                                  ;			Assembly operands begin in column 33.
    56                                  ;			Lines should not extend beyond column 120.
    57                                  ;
    58                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    59                                  ;			Routine names begin with a verb (Get, Read, etc.).
    60                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    61                                  ;
    62                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    63                                  ;			Constant stored values are named in camel case, starting with 'c'.
    64                                  ;			The 2nd letter of the constant label indicates the storage type.
    65                                  ;
    66                                  ;			cq......	constant quad-word (dq)
    67                                  ;			cd......	constant double-word (dd)
    68                                  ;			cw......	constant word (dw)
    69                                  ;			cb......	constant byte (db)
    70                                  ;			cz......	constant ASCIIZ (null-terminated) string
    71                                  ;
    72                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    73                                  ;			The 2nd letter of the variable label indicates the storage type.
    74                                  ;
    75                                  ;			wq......	variable quad-word (resq)
    76                                  ;			wd......	variable double-word (resd)
    77                                  ;			ww......	variable word (resw)
    78                                  ;			wb......	variable byte (resb)
    79                                  ;
    80                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    81                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    82                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    83                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    84                                  ;			Octal literal values are avoided.
    85                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    86                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    87                                  ;
    88                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    89                                  ;			Structure names do not begin with a verb.
    90                                  ;
    91                                  ;	Macros:		Macro names are in camel case (getDateString).
    92                                  ;			Macro names do begin with a verb.
    93                                  ;
    94                                  ;	Registers:	Register names in comments are in upper case.
    95                                  ;			Register names in source code are in lower case.
    96                                  ;
    97                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    98                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    99                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   100                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   101                                  ;
   102                                  ;-----------------------------------------------------------------------------------------------------------------------
   103                                  ;=======================================================================================================================
   104                                  ;
   105                                  ;	Equates
   106                                  ;
   107                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   108                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   109                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   110                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   111                                  ;
   112                                  ;=======================================================================================================================
   113                                  ;-----------------------------------------------------------------------------------------------------------------------
   114                                  ;
   115                                  ;	8042 Keyboard Controller						EKEYB...
   116                                  ;
   117                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   118                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   119                                  ;
   120                                  ;-----------------------------------------------------------------------------------------------------------------------
   121                                  EKEYBPORTDATA		equ	060h						;data port
   122                                  EKEYBPORTSTAT		equ	064h						;status port
   123                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   124                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   125                                  EKEYBBITIN		equ	002h						;input buffer status bit
   126                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   127                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   128                                  										;---------------------------------------
   129                                  										;	Keyboard Scan Codes
   130                                  										;---------------------------------------
   131                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   132                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   133                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   134                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   135                                  EKEYBSLASH		equ	035h						;slash
   136                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   137                                  EKEYBALTDOWN		equ	038h						;alt key down
   138                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   139                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   140                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   141                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   142                                  EKEYBUP			equ	080h						;up
   143                                  EKEYBCTRLUP		equ	09Dh						;control key up
   144                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   145                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   146                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   147                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   148                                  EKEYBALTUP		equ	0B8h						;alt key up
   149                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   150                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   151                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   152                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   153                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   154                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   155                                  ;-----------------------------------------------------------------------------------------------------------------------
   156                                  ;
   157                                  ;	8253 Programmable Interrupt Timer					EPIT...
   158                                  ;
   159                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   160                                  ;	approximately 18.2 times per second.
   161                                  ;
   162                                  ;-----------------------------------------------------------------------------------------------------------------------
   163                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   164                                  ;-----------------------------------------------------------------------------------------------------------------------
   165                                  ;
   166                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   167                                  ;
   168                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   169                                  ;	external devices and signals a hardware interrupt to the CPU.
   170                                  ;
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  EPICPORTPRI		equ	020h						;primary control port 0
   173                                  EPICPORTPRI1		equ	021h						;primary control port 1
   174                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   175                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   176                                  EPICEOI			equ	020h						;non-specific EOI code
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   180                                  ;
   181                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;	for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI		equ	003h						;controller port hi
   186                                  ECRTPORTLO		equ	0D4h						;controller port lo
   187                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   188                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   192                                  ;
   193                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI		equ	003h						;controller port hi
   197                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   198                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   199                                  EFDCSTATBUSY		equ	010h						;main status is busy
   200                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   204                                  ;
   205                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   206                                  ;
   207                                  ;-----------------------------------------------------------------------------------------------------------------------
   208                                  ERTCREGPORT		equ	70h						;register select port
   209                                  ERTCDATAPORT		equ	71h						;data port
   210                                  ERTCSECONDREG		equ	00h						;second
   211                                  ERTCMINUTEREG		equ	02h						;minute
   212                                  ERTCHOURREG		equ	04h						;hour
   213                                  ERTCWEEKDAYREG		equ	06h						;weekday
   214                                  ERTCDAYREG		equ	07h						;day
   215                                  ERTCMONTHREG		equ	08h						;month
   216                                  ERTCYEARREG		equ	09h						;year of the century
   217                                  ERTCSTATUSREG		equ	0bh						;status
   218                                  ERTCCENTURYREG		equ	32h						;century
   219                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   220                                  ;-----------------------------------------------------------------------------------------------------------------------
   221                                  ;
   222                                  ;	x86 Descriptor Access Codes						EACC...
   223                                  ;
   224                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   225                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   226                                  ;
   227                                  ;	0.......	Segment is not present in memory (triggers int 11)
   228                                  ;	1.......	Segment is present in memory
   229                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   230                                  ;	...0....	Segment is a system segment
   231                                  ;	...00010		Local Descriptor Table
   232                                  ;	...00101		Task Gate
   233                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   234                                  ;	...01100		Call Gate (386)
   235                                  ;	...01110		Interrupt Gate (386)
   236                                  ;	...01111		Trap Gate (386)
   237                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   238                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   239                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   240                                  ;
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  EACCLDT			equ	10000010b					;local descriptor table
   243                                  EACCTASK		equ	10000101b					;task gate
   244                                  EACCTSS			equ	10001001b					;task-state segment
   245                                  EACCGATE		equ	10001100b					;call gate
   246                                  EACCINT			equ	10001110b					;interrupt gate
   247                                  EACCTRAP		equ	10001111b					;trap gate
   248                                  EACCDATA		equ	10010011b					;upward writable data
   249                                  EACCCODE		equ	10011011b					;non-conforming readable code
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  ;
   252                                  ;	BIOS Interrupts and Functions						EBIOS...
   253                                  ;
   254                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   255                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   256                                  ;
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   259                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   260                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   261                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   262                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   263                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   264                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   265                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   266                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;	ASCII									EASCII...
   270                                  ;
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  EASCIIBACKSPACE		equ	008h						;backspace
   273                                  EASCIILINEFEED		equ	00Ah						;line feed
   274                                  EASCIIRETURN		equ	00Dh						;carriage return
   275                                  EASCIIESCAPE		equ	01Bh						;escape
   276                                  EASCIISPACE		equ	020h						;space
   277                                  EASCIIUPPERA		equ	041h						;'A'
   278                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   279                                  EASCIILOWERA		equ	061h						;'a'
   280                                  EASCIILOWERZ		equ	07Ah						;'z'
   281                                  EASCIITILDE		equ	07Eh						;'~'
   282                                  EASCIIBORDSGLVERT	equ	0B3h						;vertical single border
   283                                  EASCIIBORDSGLUPRRGT	equ	0BFh						;upper-right single border
   284                                  EASCIIBORDSGLLWRLFT	equ	0C0h						;lower-left single border
   285                                  EASCIIBORDSGLHORZ	equ	0C4h						;horizontal single border
   286                                  EASCIIBORDSGLLWRRGT	equ	0D9h						;lower-right single border
   287                                  EASCIIBORDSGLUPRLFT	equ	0DAh						;upper-left single border
   288                                  EASCIICASE		equ	00100000b					;case bit
   289                                  EASCIICASEMASK		equ	11011111b					;case mask
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;
   292                                  ;	Boot Sector and Loader Constants					EBOOT...
   293                                  ;
   294                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   295                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   296                                  ;
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   299                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   300                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   301                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   302                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   303                                  EBOOTMAXTRIES		equ	5						;max read retries
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ESELGDT			equ	008h						;gdt alias selector
   308                                  ESELDAT			equ	018h						;kernel data selector
   309                                  ESELCGA			equ	020h						;cga video selector
   310                                  ESELOSCODE		equ	048h						;os kernel code selector
   311                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   312                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   313                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   314                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   315                                  ESELBACKGROUNDLDT	equ	070h						;background local descr table selector
   316                                  ESELBACKGROUNDTSS	equ	078h						;background task state segment selector
   317                                  ESELKEYBOARDMQ		equ	080h						;keyboard focus message queue (IRQ1)
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;	LDT Selectors								ESEL...
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ESELMQ			equ	02Ch						;console task message queue
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;	Kernel Constants							EKRN...
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  EKRNDESLEN		equ	8						;size of descriptor
   326                                  EKRNDATASEG		equ	00000h						;kernel data segment (0000:0800)
   327                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   328                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;	Keyboard Flags								EKEYF...
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   333                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   334                                  EKEYFALTLEFT		equ	00000100b					;left alt
   335                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   336                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   337                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   338                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   339                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   340                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   341                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   342                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   343                                  ;-----------------------------------------------------------------------------------------------------------------------
   344                                  ;	Console Constants							ECON...
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ECONCOLS		equ	80						;columns per row
   347                                  ECONROWS		equ	24						;console rows
   348                                  ECONOIAROW		equ	24						;operator information area row
   349                                  ECONCOLBYTES		equ	2						;bytes per column
   350                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   351                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   352                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   353                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;	Kernel Message Identifiers						EMSG...
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  EMSGKEYDOWN		equ	041000000h					;key-down
   358                                  EMSGKEYUP		equ	041010000h					;key-up
   359                                  EMSGKEYCHAR		equ	041020000h					;character
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  ;	Background Task Identifiers						EBG...
   362                                  ;-----------------------------------------------------------------------------------------------------------------------
   363                                  EBGTIMELEN		equ	9						;length of time string HH:MM:SS\0
   364                                  ;=======================================================================================================================
   365                                  ;
   366                                  ;	Structures
   367                                  ;
   368                                  ;=======================================================================================================================
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ;
   371                                  ;	DATETIME
   372                                  ;
   373                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   374                                  ;
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  struc			DATETIME
   377 00000000 <res 00000001>          .second			resb	1						;seconds
   378 00000001 <res 00000001>          .minute			resb	1						;minutes
   379 00000002 <res 00000001>          .hour			resb	1						;hours
   380 00000003 <res 00000001>          .weekday		resb	1						;day of week
   381 00000004 <res 00000001>          .day			resb	1						;day of month
   382 00000005 <res 00000001>          .month			resb	1						;month of year
   383 00000006 <res 00000001>          .year			resb	1						;year of century
   384 00000007 <res 00000001>          .century		resb	1						;century
   385                                  EDATETIMELEN		equ	($-.second)
   386                                  endstruc
   387                                  ;-----------------------------------------------------------------------------------------------------------------------
   388                                  ;
   389                                  ;	MQUEUE
   390                                  ;
   391                                  ;	The MQUEUE structure maps memory used for a message queue.
   392                                  ;
   393                                  ;-----------------------------------------------------------------------------------------------------------------------
   394                                  struc			MQUEUE
   395 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   396 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   397 00000008 <res 000003F8>          MQData			resd	254						;message queue
   398                                  endstruc
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  ;
   401                                  ;	OSDATA
   402                                  ;
   403                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   404                                  ;	used by the BIOS.
   405                                  ;
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  struc			OSDATA
   408 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   409 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   410 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   411 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   412 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   413 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   414 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   415 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   416 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   417 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   418 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   419 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   420 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   421 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   422 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   423 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   424 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   425 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   426 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   427 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   428 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   429 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   430 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   431 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   432 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   433 00000449 <res 00000001>          			resb	1						;449 current video mode
   434 0000044A <res 00000002>          			resw	1						;44a screen columns
   435 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   436 0000044E <res 00000002>          			resw	1						;44e current video page offset
   437 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   438 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   439 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   440 00000462 <res 00000001>          			resb	1						;462 active display page number
   441 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   442 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   443 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   444 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   445 00000469 <res 00000003>          			resb	3						;469 vague
   446 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   447 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   448 00000471 <res 00000001>          			resb	1						;471 bios break flag
   449 00000472 <res 00000002>          			resw	1						;472 soft reset
   450 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   451 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   452 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   453 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   454 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   455 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   456 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   457 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   458 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   459 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   460 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   461 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   462 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   463 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   464 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   465 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   466 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   467 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   468 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   469 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   470 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   471 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   472 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   473 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   474 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   475 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   476 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   477 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   478 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   479 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   480 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   481 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   482 000004AC <res 00000008>          			resb	8						;4ac reserved
   483 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   484 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   485 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   486 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   487 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   488 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   489 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   490 000004CD <res 00000001>          			resb	1						;4cd unknown
   491 000004CE <res 00000002>          			resw	1						;4de day counter
   492 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   493 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   494 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   495 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   496 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   497 00000505 <res 0000000A>          			resb	10						;505 POST work area
   498 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   499 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   500 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   501 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   502 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   503 0000051E <res 00000002>          			resw	1						;51e unknown
   504 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   505 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   506 00000530 <res 00000004>          			resb	4						;530 MODE command
   507 00000534 <res 000001CC>          			resb	460						;534 unused
   508 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   509                                  ;-----------------------------------------------------------------------------------------------------------------------
   510                                  ;
   511                                  ;	OS Variables								@disk: N/A	@mem: 000800
   512                                  ;
   513                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   514                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   515                                  ;	are organized based on the task that usually accesses them.
   516                                  ;
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  ;-----------------------------------------------------------------------------------------------------------------------
   519                                  ;
   520                                  ;	Kernel Variables
   521                                  ;
   522                                  ;	These variables are not task-specific. They are initialized by the OS loader before the system is placed into
   523                                  ;	protected mode. This is necessary because as soon as the system enters protected mode, the timer interrupt
   524                                  ;	(IRQ0) will begin to reference the task selectors queue to implement task switching.
   525                                  ;
   526                                  ;-----------------------------------------------------------------------------------------------------------------------
   527                                  			align	4
   528                                  EKERNELDATA		equ	($)
   529 00000800 <res 00000200>          wwTaskQueue		resw	256						;task selector queue
   530 00000A00 <res 00000004>          wdFarJumpEIP		resd	1						;destination EIP of next task (ignored)
   531 00000A04 <res 00000002>          wwFarJumpSelector	resw	1						;destination task gate
   532 00000A06 <res 00000001>          wbTaskIndex		resb	1						;task selector index
   533 00000A07 <res 00000001>          wbInCriticalSection	resb	1						;task in critical section
   534                                  EKERNELDATALEN		equ	($-EKERNELDATA)
   535                                  ;-----------------------------------------------------------------------------------------------------------------------
   536                                  ;
   537                                  ;	Console Task Variables
   538                                  ;
   539                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   540                                  ;	the console task starts.
   541                                  ;
   542                                  ;-----------------------------------------------------------------------------------------------------------------------
   543                                  			align	4
   544                                  ECONDATA		equ	($)
   545 00000A08 <res 00000004>          wfConsoleMemAddr	resd	1						;console memory address
   546 00000A0C <res 00000001>          wbConsoleColumn		resb	1						;console column
   547 00000A0D <res 00000001>          wbConsoleRow		resb	1						;console row
   548 00000A0E <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   549 00000A0F <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   550 00000A10 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   551 00000A11 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   552 00000A12 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   553 00000A13 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   554 00000A14 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   555 00000A15 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   556 00000A16 <res 00000001>          wbConsoleScan5		resb	1						;scan code
   557 00000A17 <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   558 00000A18 <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   559 00000A68 <res 00000050>          wzConsoleToken		resb	80						;token buffer
   560 00000AB8 <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   561 00000B08 <res 00000008>          wsConsoleDateTime	resb	EDATETIMELEN					;date-time buffer
   562                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   563                                  ;-----------------------------------------------------------------------------------------------------------------------
   564                                  ;
   565                                  ;	Background Task Variables
   566                                  ;
   567                                  ;	These variables are exclusve to the background task. These variables are initialized by the background task when
   568                                  ;	the task starts.
   569                                  ;
   570                                  ;-----------------------------------------------------------------------------------------------------------------------
   571                                  			align	4
   572                                  EBGDATA			equ	($)
   573 00000B10 <res 00000008>          wsBgDateTime		resb	EDATETIMELEN					;date-time buffer
   574 00000B18 <res 00000009>          wzBgTime		resb	EBGTIMELEN					;time string buffer
   575 00000B21 <res 00000009>          wzBgTimeCmpr		resb	EBGTIMELEN					;time string comparison buffer
   576                                  EBGDATALEN		equ	($-EBGDATA)
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  ;
   579                                  ;	End of OS Variables
   580                                  ;
   581                                  ;-----------------------------------------------------------------------------------------------------------------------
   582                                  endstruc
   583                                  ;-----------------------------------------------------------------------------------------------------------------------
   584                                  ;
   585                                  ;	Macros
   586                                  ;
   587                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   588                                  ;
   589                                  ;-----------------------------------------------------------------------------------------------------------------------
   590                                  %macro			mint	1
   591                                  _%1			equ	($-$$) / EKRNDESLEN
   592                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   593                                  %endmacro
   594                                  %macro			mtrap	1
   595                                  _%1			equ	($-$$) / EKRNDESLEN
   596                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   597                                  %endmacro
   598                                  %macro			menter	1
   599                                  ?%1			equ	($-$$)
   600                                  %endmacro
   601                                  %macro			tsvce	1
   602                                  e%1			equ	($-tsvc)/4
   603                                  			dd	%1
   604                                  %endmacro
   605                                  %ifdef BUILDBOOT
   606                                  ;=======================================================================================================================
   607                                  ;
   608                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   609                                  ;
   610                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   611                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   612                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   613                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   614                                  ;
   615                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   616                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   617                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   618                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   619                                  ;	immediately followed by a disk parameter table.
   620                                  ;
   621                                  ;=======================================================================================================================
   622                                  			cpu	8086						;assume minimal CPU
   623                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   624                                  			bits	16						;16-bit code at power-up
   625                                  %ifdef BUILDPREP
   626                                  Boot			jmp	word Prep					;jump to preparation code
   627                                  %else
   628 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   629                                  %endif
   630                                  ;-----------------------------------------------------------------------------------------------------------------------
   631                                  ;
   632                                  ;	Disk Parameter Table
   633                                  ;
   634                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   635                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   636                                  ;
   637                                  ;-----------------------------------------------------------------------------------------------------------------------
   638 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   639 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   640 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   641 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   642 00000010 02                      cbFatCount		db	2						;file allocation table copies
   643 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   644 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   645 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   646 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   647                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   648 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   649 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   650 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   651                                  ;
   652                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   653                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   654                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   655                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   656                                  ;	given several possible starting values for CS:IP.
   657                                  ;
   658                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   659 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   660                                  .@20			equ	$-$$						;.@20 = 021h
   661 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   662 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   663 00000025 B104                    			mov	cl,4						;shift count
   664 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   665 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   666 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   667                                  ;
   668                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   669                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   670                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   671                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   672                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   673                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   674                                  ;
   675 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   676 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   677 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   678 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   679 00000036 BC0001                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   680                                  ;
   681                                  ;	Our boot addressability is now set up according to the following diagram.
   682                                  ;
   683                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   684                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   685                                  ;				|  256 = 100h bytes				|
   686                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   687                                  ;				|  Boot Sector (vstart=0100h)			|
   688                                  ;				|  1 sector = 512 = 200h bytes			|
   689                                  ;			007e00	+-----------------------------------------------+ DS:0300
   690                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   691                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   692                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   693                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   694                                  ;			009200	+-----------------------------------------------+ DS:1700
   695                                  ;
   696                                  ;	On entry, DL indicates the drive being booted from.
   697                                  ;
   698 00000039 8816[F801]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   699                                  ;
   700                                  ;	Compute directory i/o buffer address.
   701                                  ;
   702 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   703 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   704 00000044 050003                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   705 00000047 A3[EC01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   706                                  ;
   707                                  ;	Compute segment where os.com will be loaded.
   708                                  ;
   709 0000004A D3E8                    			shr	ax,cl						;AX = 0150
   710 0000004C 01D8                    			add	ax,bx						;AX = 0150 + 07b0 = 0900
   711 0000004E 83E810                  			sub	ax,16						;AX = 08f0
   712 00000051 A3[3F01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   713                                  ;
   714                                  ;	Set the video mode to 80 column, 25 row, text.
   715                                  ;
   716 00000054 B80300                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   717 00000057 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   718                                  ;
   719                                  ;	Write a message to the console so we know we have our addressability established.
   720                                  ;
   721 00000059 BE[C501]                			mov	si,czLoadMsg					;loading message
   722 0000005C E84B01                  			call	BootPrint					;display loader message
   723                                  ;
   724                                  ;	Initialize the number of directory sectors to search.
   725                                  ;
   726 0000005F A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   727 00000062 A3[EE01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   728                                  ;
   729                                  ;	Compute number of directory sectors and initialize overhead count.
   730                                  ;
   731 00000065 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   732 00000067 F726[B801]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   733 0000006B F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   734 0000006F A3[F001]                			mov	[wwOverhead],ax					;[overhead] = 000e
   735                                  ;
   736                                  ;	Compute directory entries per sector.
   737                                  ;
   738 00000072 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   739 00000073 F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   740 00000075 A3[F201]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   741                                  ;
   742                                  ;	Compute first logical directory sector and update overhead count.
   743                                  ;
   744 00000078 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   745 0000007B F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   746 0000007F 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   747 00000083 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   748 00000087 A3[F401]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   749 0000008A 0106[F001]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   750                                  ;
   751                                  ;	Read directory sector.
   752                                  ;
   753 0000008E B001                    .30			mov	al,1						;sector count
   754 00000090 A2[F601]                			mov	[wbReadCount],al				;[readcount] = 01
   755 00000093 8B1E[EC01]              			mov	bx,[wwDirBuffer]				;BX = 1500
   756 00000097 E8A700                  			call	ReadSector					;read sector into es:bx
   757                                  ;
   758                                  ;	Setup variables to search this directory sector.
   759                                  ;
   760 0000009A A1[EE01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   761 0000009D 3B06[F201]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   762 000000A1 7603                    			jna	.40						;no, continue
   763 000000A3 A1[F201]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   764 000000A6 2906[EE01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   765 000000AA BE[BA01]                			mov	si,cbKernelProgram				;program name
   766 000000AD 8B3E[EC01]              			mov	di,[wwDirBuffer]				;DI = 1500
   767                                  ;
   768                                  ;	Loop through directory sectors searching for kernel program.
   769                                  ;
   770 000000B1 56                      .50			push	si						;save kernel name address
   771 000000B2 57                      			push	di						;save dir i/o buffer address
   772 000000B3 B90B00                  			mov	cx,11						;length of 8+3 name
   773 000000B6 FC                      			cld							;forward strings
   774 000000B7 F3A6                    			repe	cmpsb						;compare entry name
   775 000000B9 5F                      			pop	di						;restore dir i/o buffer address
   776 000000BA 5E                      			pop	si						;restore kernel name address
   777 000000BB 7418                    			je	.60						;exit loop if found
   778 000000BD 033E[B801]              			add	di,[cwEntryLen]					;point to next dir entry
   779 000000C1 48                      			dec	ax						;decrement remaining entries
   780 000000C2 75ED                    			jnz	.50						;next entry
   781                                  ;
   782                                  ;	Repeat search if we are not at the end of the directory.
   783                                  ;
   784 000000C4 FF06[F401]              			inc	word [wwLogicalSector]				;increment logical sector
   785 000000C8 833E[EE01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   786 000000CD 75BF                    			jne	.30						;no, get next sector
   787 000000CF BE[E001]                			mov	si,czNoKernel					;missing kernel message
   788 000000D2 E9C000                  			jmp	BootExit					;display message and exit
   789                                  ;
   790                                  ;	If we find the kernel program in the directory, read the FAT.
   791                                  ;
   792 000000D5 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   793 000000D8 A3[F401]                			mov	[wwLogicalSector],ax				;start past boot sector
   794 000000DB A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   795 000000DE A2[F601]                			mov	[wbReadCount],al				;[readcount] = 09
   796 000000E1 BB0003                  			mov	bx,EBOOTFATBASE					;BX = 0300
   797 000000E4 E85A00                  			call	ReadSector					;read FAT into buffer
   798                                  ;
   799                                  ;	Get the starting cluster of the kernel program and target address.
   800                                  ;
   801 000000E7 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   802 000000EA C41E[3D01]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   803                                  ;
   804                                  ;	Read each program cluster into RAM.
   805                                  ;
   806 000000EE 50                      .70			push	ax						;save cluster nbr
   807 000000EF 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   808 000000F2 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   809 000000F6 880E[F601]              			mov	[wbReadCount],cl				;save sectors to read
   810 000000FA 30ED                    			xor	ch,ch						;CX = sectors per cluster
   811 000000FC F7E1                    			mul	cx						;DX:AX = logical cluster sector
   812 000000FE 0306[F001]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   813 00000102 A3[F401]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   814 00000105 E83900                  			call	ReadSector					;read sectors into ES:BX
   815                                  ;
   816                                  ;	Update buffer pointer for next cluster.
   817                                  ;
   818 00000108 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   819 0000010B 30E4                    			xor	ah,ah						;AX = sectors per cluster
   820 0000010D F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   821 00000111 01C3                    			add	bx,ax						;BX = next cluster target address
   822 00000113 58                      			pop	ax						;AX = restore cluster nbr
   823                                  ;
   824                                  ;	Compute next cluster number.
   825                                  ;
   826 00000114 89C1                    			mov	cx,ax						;CX = cluster nbr
   827 00000116 89C7                    			mov	di,ax						;DI = cluster nbr
   828 00000118 D1E8                    			shr	ax,1						;AX = cluster/2
   829 0000011A 89C2                    			mov	dx,ax						;DX = cluster/2
   830 0000011C 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   831 0000011E 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   832 00000120 83E701                  			and	di,1						;get low bit
   833 00000123 01C7                    			add	di,ax						;add one if cluster is odd
   834 00000125 81C70003                			add	di,EBOOTFATBASE					;add FAT buffer address
   835 00000129 8B05                    			mov	ax,[di]						;get cluster bytes
   836                                  ;
   837                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   838                                  ;
   839 0000012B F6C101                  			test	cl,1						;is cluster odd?
   840 0000012E 7404                    			jz	.80						;no, skip ahead
   841 00000130 B104                    			mov	cl,4						;shift count
   842 00000132 D3E8                    			shr	ax,cl						;shift nybble low
   843 00000134 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   844 00000137 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   845 0000013A 75B2                    			jne	.70						;no, continue
   846                                  ;
   847                                  ;	Transfer control to the operating system program.
   848                                  ;
   849 0000013C EA                      			db	0EAh						;jmp seg:offset
   850 0000013D 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   851 0000013F F008                    wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   852                                  ;
   853                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   854                                  ;
   855 00000141 A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   856 00000144 F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   857 00000148 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   858 0000014A A1[F401]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   859 0000014D F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   860 0000014F A2[FB01]                			mov	[wbTrack],al					;[track] = cylinder
   861 00000152 89D0                    			mov	ax,dx						;AX = cyl sector
   862 00000154 F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   863 00000158 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   864 0000015A A3[F901]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   865                                  ;
   866                                  ;	Try maxtries times to read sector.
   867                                  ;
   868 0000015D B90500                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   869 00000160 53                      .10			push	bx						;save buffer address
   870 00000161 51                      			push	cx						;save retry count
   871 00000162 8B16[F801]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   872 00000166 8B0E[FA01]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   873 0000016A A1[F601]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   874 0000016D CD13                    			int	EBIOSINTDISKETTE				;read sector
   875 0000016F 59                      			pop	cx						;restore retry count
   876 00000170 5B                      			pop	bx						;restore buffer address
   877 00000171 7343                    			jnc	BootReturn					;skip ahead if done
   878 00000173 E2EB                    			loop	.10						;retry
   879                                  ;
   880                                  ;	Handle disk error: convert to ASCII and store in error string.
   881                                  ;
   882 00000175 88E0                    			mov	al,ah						;AL = bios error code
   883 00000177 30E4                    			xor	ah,ah						;AX = bios error code
   884 00000179 B210                    			mov	dl,16						;divisor for base 16
   885 0000017B F6F2                    			div	dl						;AL = hi order, AH = lo order
   886 0000017D 0D3030                  			or	ax,03030h					;apply ASCII zone bits
   887 00000180 80FC3A                  			cmp	ah,03Ah						;range test ASCII numeral
   888 00000183 7203                    			jb	.20						;continue if numeral
   889 00000185 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   890 00000188 3C3A                    .20			cmp	al,03Ah						;range test ASCII numeral
   891 0000018A 7203                    			jb	.30						;continue if numeral
   892 0000018C 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   893 0000018F A3[DD01]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   894 00000192 BE[D201]                			mov	si,czErrorMsg					;error message address
   895 00000195 E81200                  BootExit		call	BootPrint					;display messge to console
   896 00000198 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   897 0000019A CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   898 0000019C 7504                    			jnz	.20						;continue if key pressed
   899 0000019E FB                      			sti							;enable maskable interrupts
   900 0000019F F4                      			hlt							;wait for interrupt
   901 000001A0 EBF6                    			jmp	.10						;repeat
   902 000001A2 B0FE                    .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   903 000001A4 E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   904 000001A6 FB                      .30			sti							;enable maskable interrupts
   905 000001A7 F4                      			hlt							;stop until reset, int, nmi
   906 000001A8 EBFC                    			jmp	.30						;loop until restart kicks in
   907                                  ;
   908                                  ;	Display text message.
   909                                  ;
   910 000001AA FC                      BootPrint		cld							;forward strings
   911 000001AB AC                      			lodsb							;load next byte at DS:SI in AL
   912 000001AC 84C0                    			test	al,al						;end of string?
   913 000001AE 7406                    			jz	BootReturn					;... yes, exit our loop
   914 000001B0 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   915 000001B2 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   916 000001B4 EBF4                    			jmp	BootPrint					;repeat until done
   917 000001B6 C3                      BootReturn		ret							;return
   918                                  ;-----------------------------------------------------------------------------------------------------------------------
   919                                  ;
   920                                  ;	Constants
   921                                  ;
   922                                  ;-----------------------------------------------------------------------------------------------------------------------
   923 000001B7 90                      			align	2
   924 000001B8 2000                    cwEntryLen		dw	32						;length of directory entry
   925 000001BA 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   925 000001C3 4F4D               
   926 000001C5 4C6F6164696E67204F-     czLoadMsg		db	"Loading OS",13,10,0				;loading message
   926 000001CE 530D0A00           
   927 000001D2 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   927 000001DB 7220               
   928 000001DD 202000                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   929 000001E0 4F53206D697373696E-     czNoKernel		db	"OS missing",0					;missing kernel message
   929 000001E9 6700               
   930                                  ;-----------------------------------------------------------------------------------------------------------------------
   931                                  ;
   932                                  ;	Work Areas
   933                                  ;
   934                                  ;-----------------------------------------------------------------------------------------------------------------------
   935 000001EB 90                      			align	2
   936 000001EC 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   937 000001EE 0000                    wwEntriesLeft		dw	0						;directory entries to search
   938 000001F0 0000                    wwOverhead		dw	0						;overhead sectors
   939 000001F2 0000                    wwSectorEntries		dw	0						;directory entries per sector
   940 000001F4 0000                    wwLogicalSector		dw	0						;current logical sector
   941                                  wwReadCountCommand	equ	$						;read count and command
   942 000001F6 00                      wbReadCount		db	0						;sectors to read
   943 000001F7 02                      cbReadCommand		db	2						;BIOS read disk fn code
   944                                  wwDriveHead		equ	$						;drive, head (word)
   945 000001F8 00                      wbDrive			db	0						;drive
   946 000001F9 00                      wbHead			db	0						;head
   947                                  wwSectorTrack		equ	$						;sector, track (word)
   948 000001FA 00                      			db	0						;sector
   949 000001FB 00                      wbTrack			db	0						;track
   950 000001FC 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   951 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   952                                  %endif
   953                                  %ifdef BUILDPREP
   954                                  ;=======================================================================================================================
   955                                  ;
   956                                  ;	Diskette Preparation Code
   957                                  ;
   958                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   959                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   960                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   961                                  ;
   962                                  ;=======================================================================================================================
   963                                  ;
   964                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   965                                  ;
   966                                  Prep			mov	si,czPrepMsg10					;starting message address
   967                                  			call	BootPrint					;display message
   968                                  ;
   969                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   970                                  ;
   971                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   972                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   973                                  			jnz	.12						;continue if key pressed
   974                                  			sti							;enable interrupts
   975                                  			hlt							;wait for interrupt
   976                                  			jmp	.10						;repeat
   977                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   978                                  			je	.15						;yes, branch
   979                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   980                                  			jne	.10						;no, repeat
   981                                  			jmp	.90						;yes, exit program
   982                                  ;
   983                                  ;	Display writing-sector message and patch the JMP instruction.
   984                                  ;
   985                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   986                                  			call	BootPrint					;display message
   987                                  			mov	bx,Boot+1					;address of JMP instruction operand
   988                                  			mov	ax,01Bh						;address past disk parameter table
   989                                  			mov	[bx],ax						;update the JMP instruction
   990                                  ;
   991                                  ;	Try to read the boot sector.
   992                                  ;
   993                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   994                                  .20			push	cx						;save remaining tries
   995                                  			mov	bx,wcPrepInBuf					;input buffer address
   996                                  			mov	dx,0						;head zero, drive zero
   997                                  			mov	cx,1						;track zero, sector one
   998                                  			mov	ax,0201h					;read one sector
   999                                  			int	EBIOSINTDISKETTE				;attempt the read
  1000                                  			pop	cx						;restore remaining retries
  1001                                  			jnc	.30						;skip ahead if successful
  1002                                  			loop	.20						;try again
  1003                                  			mov	si,czPrepMsg20					;read-error message address
  1004                                  			jmp	.50						;branch to error routine
  1005                                  ;
  1006                                  ;	Copy diskette parms from input buffer to output buffer.
  1007                                  ;
  1008                                  .30			mov	si,wcPrepInBuf					;input buffer address
  1009                                  			add	si,11						;skip over JMP and system ID
  1010                                  			mov	di,Boot						;output buffer address
  1011                                  			add	di,11						;skip over JMP and system ID
  1012                                  			mov	cx,19						;length of diskette parameters
  1013                                  			cld							;forward string copies
  1014                                  			rep	movsb						;copy diskette parameters
  1015                                  ;
  1016                                  ;	Try to write boot sector to diskette.
  1017                                  ;
  1018                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
  1019                                  .40			push	cx						;save remaining tries
  1020                                  			mov	bx,Boot						;output buffer address
  1021                                  			mov	dx,0						;head zero, drive zero
  1022                                  			mov	cx,1						;track zero, sector one
  1023                                  			mov	ax,0301h					;write one sector
  1024                                  			int	EBIOSINTDISKETTE				;attempt the write
  1025                                  			pop	cx						;restore remaining retries
  1026                                  			jnc	.80						;skip ahead if successful
  1027                                  			loop	.40						;try again
  1028                                  			mov	si,czPrepMsg30					;write-error message address
  1029                                  ;
  1030                                  ;	Convert the error code to ASCII and display the error message.
  1031                                  ;
  1032                                  .50			push	ax						;save error code
  1033                                  			mov	al,ah						;copy error code
  1034                                  			mov	ah,0						;AX = error code
  1035                                  			mov	dl,10h						;hexadecimal divisor
  1036                                  			idiv	dl						;AL = hi-order, AH = lo-order
  1037                                  			or	ax,03030h					;add ASCII zone digits
  1038                                  			cmp	ah,03Ah						;AH ASCII numeral?
  1039                                  			jb	.60						;yes, continue
  1040                                  			add	ah,7						;no, make ASCII 'A'-'F'
  1041                                  .60			cmp	al,03Ah						;al ASCII numeral?
  1042                                  			jb	.70						;yes, continue
  1043                                  			add	al,7						;no, make ASCII
  1044                                  .70			mov	[si+17],ax					;put ASCII error code in message
  1045                                  			call	BootPrint					;write error message
  1046                                  			pop	ax						;restore error code
  1047                                  ;
  1048                                  ;	Display the completion message.
  1049                                  ;
  1050                                  .80			mov	si,czPrepMsgOK					;assume successful completion
  1051                                  			mov	al,ah						;BIOS return code
  1052                                  			cmp	al,0						;success?
  1053                                  			je	.85						;yes, continue
  1054                                  			mov	si,czPrepMsgErr1				;disk parameter error message
  1055                                  			cmp	al,1						;disk parameter error?
  1056                                  			je	.85						;yes, continue
  1057                                  			mov	si,czPrepMsgErr2				;address mark not found message
  1058                                  			cmp	al,2						;address mark not found?
  1059                                  			je	.85						;yes, continue
  1060                                  			mov	si,czPrepMsgErr3				;protected disk message
  1061                                  			cmp	al,3						;protected disk?
  1062                                  			je	.85						;yes, continue
  1063                                  			mov	si,czPrepMsgErr6				;diskette removed message
  1064                                  			cmp	al,6						;diskette removed?
  1065                                  			je	.85						;yes, continue
  1066                                  			mov	si,czPrepMsgErr80				;drive timed out message
  1067                                  			cmp	al,80H						;drive timed out?
  1068                                  			je	.85						;yes, continue
  1069                                  			mov	si,czPrepMsgErrXX				;unknown error message
  1070                                  .85			call	BootPrint					;display result message
  1071                                  .90			mov	ax,04C00H					;terminate with zero result code
  1072                                  			int	021h						;terminate DOS program
  1073                                  			ret							;return (should not execute)
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  ;
  1076                                  ;	Diskette Preparation Messages
  1077                                  ;
  1078                                  ;-----------------------------------------------------------------------------------------------------------------------
  1079                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
  1080                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1081                                  			db	13,10
  1082                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1083                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
  1084                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1085                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1086                                  			db	13,10,0
  1087                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1088                                  			db	13,10,0
  1089                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1090                                  			db	13,10,0
  1091                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1092                                  			db	13,10,0
  1093                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1094                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1095                                  			db	13,10,0
  1096                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1097                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1098                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1099                                  			db	13,10,"and retry."
  1100                                  			db	13,10,0
  1101                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1102                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1103                                  			db	13,10,"using another diskette."
  1104                                  			db	13,10,0
  1105                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1106                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1107                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1108                                  			db	13,10,0
  1109                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1110                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1111                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1112                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1113                                  			db	13,10,"is properly inserted in the diskette drive."
  1114                                  			db	13,10,0
  1115                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1116                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1117                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1118                                  			db	13,10,0
  1119                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1120                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1121                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1122                                  			db	13,10,0
  1123                                  wcPrepInBuf		equ	$
  1124                                  %endif
  1125                                  %ifdef BUILDDISK
  1126                                  ;=======================================================================================================================
  1127                                  ;
  1128                                  ;	File Allocation Tables
  1129                                  ;
  1130                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1131                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1132                                  ;	OS.COM file will be 7200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 7000h
  1133                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1134                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 57 clusters for OS.COM. The clusters used by
  1135                                  ;	OS.COM, then, will be cluster 2 through 59. The entry for cluster 59 is set to "0FFFh" to indicate that it is
  1136                                  ;	the last cluster in the chain.
  1137                                  ;
  1138                                  ;	Every three bytes encode two FAT entries as follows:
  1139                                  ;
  1140                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1141                                  ;
  1142                                  ;=======================================================================================================================
  1143                                  ;-----------------------------------------------------------------------------------------------------------------------
  1144                                  ;
  1145                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1146                                  ;
  1147                                  ;-----------------------------------------------------------------------------------------------------------------------
  1148                                  section			fat1							;first copy of FAT
  1149 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h			;clusters 0-3		ff0 fff 003 004
  1150 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h			;custters 4-7   	005 006 007 008
  1151 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h			;clusters 8-11  	009 00a 00b 00c
  1152 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h			;clusters 12-15 	00d 00e 00f 010
  1153 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h			;clusters 16-19 	011 012 013 014
  1154 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h			;clusters 20-23		015 016 017 018
  1155 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h			;clusters 24-27		019 01a 01b 01c
  1156 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h			;clusters 28-31		01d 01e 01f 020
  1157 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h			;clusters 32-35		021 022 023 024
  1158 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h			;clusters 36-39		025 026 027 028
  1159 0000003C 29A0022BC002            			db	029h,0A0h,002h,	02Bh,0C0h,002h			;clusters 40-43		029 02A 02B 02C
  1160 00000042 2DE0022F0003            			db	02Dh,0E0h,002h, 02Fh,000h,003h			;clusters 44-47		02D 02E 02F 030
  1161 00000048 312003334003            			db	031h,020h,003h, 033h,040h,003h			;clusters 48-51		031 032 033 034
  1162 0000004E 356003378003            			db	035h,060h,003h, 037h,080h,003h			;clusters 52-55		035 036 037 038
  1163 00000054 39A003FF0F00            			db	039h,0A0h,003h, 0FFh,00Fh,000h			;clusters 56-59		039 03A FFF 000
  1164 0000005A 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1165                                  ;-----------------------------------------------------------------------------------------------------------------------
  1166                                  ;
  1167                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1168                                  ;
  1169                                  ;-----------------------------------------------------------------------------------------------------------------------
  1170                                  section			fat2							;second copy of FAT
  1171 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h			;clusters 0-3		ff0 fff 003 004
  1172 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h			;custters 4-7   	005 006 007 008
  1173 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h			;clusters 8-11  	009 00a 00b 00c
  1174 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h			;clusters 12-15 	00d 00e 00f 010
  1175 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h			;clusters 16-19 	011 012 013 014
  1176 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h			;clusters 20-23		015 016 017 018
  1177 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h			;clusters 24-27		019 01a 01b 01c
  1178 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h			;clusters 28-31		01d 01e 01f 020
  1179 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h			;clusters 32-35		021 022 023 024
  1180 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h			;clusters 36-39		025 026 027 028
  1181 0000003C 29A0022BC002            			db	029h,0A0h,002h,	02Bh,0C0h,002h			;clusters 40-43		029 02A 02B 02C
  1182 00000042 2DE0022F0003            			db	02Dh,0E0h,002h, 02Fh,000h,003h			;clusters 44-47		02D 02E 02F 030
  1183 00000048 312003334003            			db	031h,020h,003h, 033h,040h,003h			;clusters 48-51		031 032 033 034
  1184 0000004E 356003378003            			db	035h,060h,003h, 037h,080h,003h			;clusters 52-55		035 036 037 038
  1185 00000054 39A003FF0F00            			db	039h,0A0h,003h, 0FFh,00Fh,000h			;clusters 56-59		039 03A FFF 000
  1186 0000005A 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  ;
  1189                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1190                                  ;
  1191                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1192                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1193                                  ;	copy.
  1194                                  ;
  1195                                  ;-----------------------------------------------------------------------------------------------------------------------
  1196                                  section			dir							;diskette directory
  1197 00000000 4F5320202020202043-     			db	"OS      COM"					;file name (must contain spaces)
  1197 00000009 4F4D               
  1198 0000000B 20                      			db	020h						;attribute (archive bit set)
  1199 0000000C 00<rept>                			times	10 db 0						;unused
  1200 00000016 0000                    			dw	0h						;time
  1201 00000018 41                      			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1202 00000019 49                      			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1203 0000001A 0200                    			dw	2						;first cluster
  1204 0000001C 00720000                			dd	07200h						;file size
  1205 00000020 00<rept>                			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1206                                  %endif
  1207                                  %ifdef BUILDCOM
  1208                                  ;=======================================================================================================================
  1209                                  ;
  1210                                  ;	OS.COM
  1211                                  ;
  1212                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1213                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1214                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1215                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1216                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1217                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1218                                  ;
  1219                                  ;	Our loader addressability is set up according to the following diagram.
  1220                                  ;
  1221                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1222                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1223                                  ;				|  256 = 100h bytes				|
  1224                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1225                                  ;				|  Boot Sector (vstart=0100h)			|
  1226                                  ;				|  1 sector = 512 = 200h bytes			|
  1227                                  ;			007e00	+-----------------------------------------------+
  1228                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1229                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1230                                  ;				|						|
  1231                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1232                                  ;				|						|
  1233                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1234                                  ;				|  Loader Code					|
  1235                                  ;				|  1 sector = 512 = 200h bytes			|
  1236                                  ;			009200	+-----------------------------------------------+ DS:0300
  1237                                  ;
  1238                                  ;=======================================================================================================================
  1239                                  ;-----------------------------------------------------------------------------------------------------------------------
  1240                                  ;
  1241                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1242                                  ;
  1243                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1244                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1245                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1246                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1247                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1248                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1249                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1250                                  ;	registers.
  1251                                  ;
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                  			cpu	8086						;assume minimal CPU
  1254                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1255                                  			bits	16						;this is 16-bit code
  1256 00000000 0E                      Loader			push	cs						;use the code segment
  1257 00000001 1F                      			pop	ds						;...as our data segment
  1258 00000002 0E                      			push	cs						;use the code segment
  1259 00000003 07                      			pop	es						;...as our extra segment
  1260                                  ;
  1261                                  ;	Write a message to the console so we know we have our addressability established.
  1262                                  ;
  1263 00000004 BE[7D01]                			mov	si,czStartingMsg				;starting message
  1264 00000007 E8C900                  			call	PutTTYString					;display loader message
  1265                                  ;
  1266                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1267                                  ;
  1268 0000000A E8A600                  			call	GetCPUType					;AL = cpu type
  1269 0000000D BE[EA00]                			mov	si,czCPUErrorMsg				;loader error message
  1270 00000010 3C03                    			cmp	al,3						;80386+?
  1271 00000012 7303E98700              			jb	LoaderExit					;no, exit with error message
  1272                                  			cpu	386						;allow 80386 instructions
  1273 00000017 BE[5501]                			mov	si,czCPUOKMsg					;cpu ok message
  1274 0000001A E8B600                  			call	PutTTYString					;display message
  1275                                  ;
  1276                                  ;	Initialize kernel data areas. The task queue is initialized here because as soon as we enter protected mode,
  1277                                  ;	the timer interrupt code will begin inspecting the task queue to determine if a task switch must be made. To
  1278                                  ;	start with, we set every 16th queue element to reference the background task selector. This will ensure that
  1279                                  ;	the background task, which updates the visible clock on the console, will be called at least once per second.
  1280                                  ;
  1281 0000001D 6A00                    			push	EKRNDATASEG					;load kernel data segment address ...
  1282 0000001F 07                      			pop	es						;... into extra segment reg
  1283 00000020 BF0008                  			mov	di,wwTaskQueue					;task queue address
  1284 00000023 B94000                  			mov	cx,64						;outer loop
  1285 00000026 51                      .10			push	cx						;save remaining outer iterations
  1286 00000027 B90300                  			mov	cx,3						;inner loop
  1287 0000002A B86800                  			mov	ax,ESELCONSOLETSS				;console task state segment selector
  1288 0000002D FC                      			cld							;forward strings
  1289 0000002E F3AB                    			rep	stosw						;store selectors in task queue
  1290 00000030 B87800                  			mov	ax,ESELBACKGROUNDTSS				;background task state segment selector
  1291 00000033 AB                      			stosw							;store selector in task queue
  1292 00000034 59                      			pop	cx						;restore remaining outer iterations
  1293 00000035 E2EF                    			loop	.10						;next
  1294 00000037 31C0                    			xor	ax,ax						;zero register
  1295 00000039 B104                    			mov	cl,4						;remaining words to reset
  1296 0000003B F3AB                    			rep	stosw						;reset remaining kernel data
  1297                                  ;
  1298                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1299                                  ;
  1300 0000003D BE0003                  			mov	si,0300h					;GDT offset
  1301 00000040 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1302 00000042 C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1303 00000045 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1304 00000047 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1305 00000049 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1306 0000004C 894432                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1307 0000004F 884C34                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1308 00000052 BE[5E01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1309 00000055 E87B00                  			call	PutTTYString					;display message
  1310                                  ;
  1311                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1312                                  ;
  1313 00000058 680001                  			push	EKRNCODESEG					;use kernel code segment ...
  1314 0000005B 07                      			pop	es						;... as target segment
  1315 0000005C 31FF                    			xor	di,di						;ES:DI = target address
  1316 0000005E BE0003                  			mov	si,0300h					;DS:SI = source address
  1317 00000061 B90070                  			mov	cx,07000h					;CX = kernel size
  1318 00000064 FC                      			cld							;forward strings
  1319 00000065 F3A4                    			rep	movsb						;copy kernel image
  1320 00000067 BE[6D01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1321 0000006A E86600                  			call	PutTTYString					;display message
  1322                                  ;
  1323                                  ;	Switch to protected mode.
  1324                                  ;
  1325 0000006D 31F6                    			xor	si,si						;ES:SI = gdt addr
  1326 0000006F 8ED6                    			mov	ss,si						;protected mode ss
  1327 00000071 BC0010                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1328 00000074 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1329 00000076 BB2820                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1330 00000079 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1331 0000007C B9FFFF                  .20			mov	cx,0FFFFh					;inner delay loop count
  1332 0000007F E2FE                    			loop	$						;wait out pending interrupts
  1333 00000081 4A                      			dec	dx						;restore outer loop count
  1334 00000082 75F8                    			jnz	.20						;continue outer loop
  1335 00000084 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1336                                  ;
  1337                                  ;	Enable hardware and maskable interrupts
  1338                                  ;
  1339 00000086 30C0                    			xor	al,al						;enable all registers code
  1340 00000088 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1341 0000008A E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1342 0000008C FB                      			sti							;enable maskable interrupts
  1343                                  ;
  1344                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1345                                  ;
  1346 0000008D 2E0F001E[E200]          			ltr	[cs:cwLoaderTSS]				;load task register
  1347 00000093 2E0F0016[E000]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1348 00000099 EA00006800              			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1349                                  ;-----------------------------------------------------------------------------------------------------------------------
  1350                                  ;
  1351                                  ;	Routine:	LoaderExit
  1352                                  ;
  1353                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1354                                  ;
  1355                                  ;	In:		DS:SI	string address
  1356                                  ;
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358 0000009E E83200                  LoaderExit		call	PutTTYString					;display error message
  1359                                  ;
  1360                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1361                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1362                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1363                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1364                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1365                                  ;
  1366 000000A1 B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1367 000000A3 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1368 000000A5 7504                    			jnz	.40						;exit if key pressed
  1369 000000A7 FB                      			sti							;enable maskable interrupts
  1370 000000A8 F4                      			hlt							;wait for interrupt
  1371 000000A9 EBF6                    			jmp	.30						;repeat until keypress
  1372                                  ;
  1373                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1374                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1375                                  ;	HLT until the system resets.
  1376                                  ;
  1377 000000AB B0FE                    .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1378 000000AD E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1379 000000AF FB                      .50			sti							;enable maskable interrupts
  1380 000000B0 F4                      			hlt							;stop until reset, int, nmi
  1381 000000B1 EBFC                    			jmp	.50						;loop until restart kicks in
  1382                                  ;-----------------------------------------------------------------------------------------------------------------------
  1383                                  ;
  1384                                  ;	Routine:	GetCPUType
  1385                                  ;
  1386                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1387                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1388                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1389                                  ;
  1390                                  ;	Out:		AX	0 = 808x, v20, etc.
  1391                                  ;				1 = 80186
  1392                                  ;				2 = 80286
  1393                                  ;				3 = 80386
  1394                                  ;
  1395                                  ;-----------------------------------------------------------------------------------------------------------------------
  1396 000000B3 B001                    GetCPUType		mov	al,1						;AL = 1
  1397 000000B5 B120                    			mov	cl,32						;shift count
  1398 000000B7 D2E8                    			shr	al,cl						;try a 32-bit shift
  1399 000000B9 08C0                    			or	al,al						;did the shift happen?
  1400 000000BB 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1401                                  			cpu	186
  1402 000000BD 54                      			push	sp						;save stack pointer
  1403 000000BE 59                      			pop	cx						;...into cx
  1404 000000BF 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1405 000000C1 750F                    			jne	.10						;yes, cpu is 80186
  1406                                  			cpu	286
  1407 000000C3 40                      			inc	ax						;AX = 2
  1408 000000C4 0F0106[E400]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1409 000000C9 8A0E[E900]              			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1410 000000CD FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1411 000000CF 7401                    			jz	.10						;yes, cpu is 80286
  1412 000000D1 40                      			inc	ax						;AX = 3
  1413 000000D2 C3                      .10			ret							;return
  1414                                  ;-----------------------------------------------------------------------------------------------------------------------
  1415                                  ;
  1416                                  ;	Routine:	PutTTYString
  1417                                  ;
  1418                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1419                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1420                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1421                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1422                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1423                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1424                                  ;			registers and flags unless used to indicate return status.
  1425                                  ;
  1426                                  ;	In:		DS:SI	address of string
  1427                                  ;
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429 000000D3 FC                      PutTTYString		cld							;forward strings
  1430 000000D4 AC                      			lodsb							;load next byte at DS:SI in AL
  1431 000000D5 84C0                    			test	al,al						;end of string?
  1432 000000D7 7406                    			jz	.10						;... yes, exit our loop
  1433 000000D9 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1434 000000DB CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1435 000000DD EBF4                    			jmp	PutTTYString					;repeat until done
  1436 000000DF C3                      .10			ret							;return
  1437                                  ;-----------------------------------------------------------------------------------------------------------------------
  1438                                  ;
  1439                                  ;	Loader Data
  1440                                  ;
  1441                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1442                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1443                                  ;
  1444                                  ;-----------------------------------------------------------------------------------------------------------------------
  1445                                  			align	2
  1446 000000E0 5000                    cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1447 000000E2 5800                    cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1448 000000E4 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1449 000000E9 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1450 000000EA 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1450 000000F3 74696E672073797374-
  1450 000000FC 656D20726571756972-
  1450 00000105 657320616E20693338-
  1450 0000010E 36206F72206C617465-
  1450 00000117 722070726F63657373-
  1450 00000120 6F722E0D0A         
  1451 00000125 506C65617365207072-     			db	"Please press any key to restart the computer.",13,10,0
  1451 0000012E 65737320616E79206B-
  1451 00000137 657920746F20726573-
  1451 00000140 746172742074686520-
  1451 00000149 636F6D70757465722E-
  1451 00000152 0D0A00             
  1452 00000155 435055204F4B0D0A00      czCPUOKMsg		db	"CPU OK",13,10,0
  1453 0000015E 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1453 00000167 7265640D0A00       
  1454 0000016D 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1454 00000176 616465640D0A00     
  1455 0000017D 5374617274696E6720-     czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1455 00000186 4F530D0A00         
  1456 0000018B 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1457 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1458                                  ;=======================================================================================================================
  1459                                  ;
  1460                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1461                                  ;
  1462                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1463                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1464                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1465                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1466                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1467                                  ;
  1468                                  ;=======================================================================================================================
  1469                                  ;=======================================================================================================================
  1470                                  ;
  1471                                  ;	Kernel Tables
  1472                                  ;
  1473                                  ;=======================================================================================================================
  1474                                  ;-----------------------------------------------------------------------------------------------------------------------
  1475                                  ;
  1476                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1477                                  ;
  1478                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1479                                  ;	first descriptor must be all nulls.
  1480                                  ;
  1481                                  ;	6   5         4         3         2         1         0
  1482                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1483                                  ;	----------------------------------------------------------------
  1484                                  ;	h......hffffmmmma......ab......................bn..............n
  1485                                  ;	00000000			all areas have base addresses below 2^24
  1486                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1487                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1488                                  ;	            1001		present, ring-0, selector
  1489                                  ;
  1490                                  ;	h...h	hi-order base address (bits 24-31)
  1491                                  ;	ffff	flags
  1492                                  ;	mmmm	hi-order limit (bits 16-19)
  1493                                  ;	a...a	access
  1494                                  ;	b...b	lo-order base address (bits 0-23)
  1495                                  ;	n...n	lo-order limit (bits 0-15)
  1496                                  ;
  1497                                  ;-----------------------------------------------------------------------------------------------------------------------
  1498                                  section			gdt							;global descriptor table
  1499 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1500 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1501 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1502 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1503 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1504 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1505 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1506 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1507 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1508 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1509 00000050 7F00000F00824000        			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1510 00000058 7F00800F00894000        			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1511 00000060 7F00004700824000        			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1512 00000068 7F00804700894000        			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1513 00000070 7F00006700824000        			dq	004082006700007Fh				;70 80B  writable LDT   (background)
  1514 00000078 7F00806700894000        			dq	004089006780007Fh				;78 80B  writable TSS   (background)
  1515 00000080 FF07004800934000        			dq	00409300480007FFh				;80 2KB  foreground task message queue
  1516 00000088 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1517                                  ;-----------------------------------------------------------------------------------------------------------------------
  1518                                  ;
  1519                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1520                                  ;
  1521                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1522                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1523                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1524                                  ;
  1525                                  ;	6   5         4         3         2         1         0
  1526                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1527                                  ;	----------------------------------------------------------------
  1528                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1529                                  ;
  1530                                  ;	h...h	high-order offset (bits 16-31)
  1531                                  ;	P	present (0=unused interrupt)
  1532                                  ;	zz	descriptor privilege level
  1533                                  ;	S	storage segment (must be zero for IDT)
  1534                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1535                                  ;	S...S	handling code selector in GDT
  1536                                  ;	l...l	lo-order offset (bits 0-15)
  1537                                  ;
  1538                                  ;-----------------------------------------------------------------------------------------------------------------------
  1539                                  section			idt							;interrupt descriptor table
  1540                                  			mint	dividebyzero					;00 divide by zero
  1540                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1540 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                  			mint	singlestep					;01 single step
  1541                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1541 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                  			mint	nmi						;02 non-maskable
  1542                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1542 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                  			mint	break						;03 break
  1543                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1543 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                  			mint	into						;04 into
  1544                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1544 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                  			mint	bounds						;05 bounds
  1545                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1545 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                  			mint	badopcode					;06 bad op code
  1546                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1546 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                  			mint	nocoproc					;07 no coprocessor
  1547                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1547 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                  			mint	doublefault					;08 double-fault
  1548                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1548 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                  			mint	operand						;09 operand
  1549                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1549 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                  			mint	badtss						;0a bad TSS
  1550                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1550 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                  			mint	notpresent					;0b not-present
  1551                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1551 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                  			mint	stacklimit					;0c stack limit
  1552                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1552 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                  			mint	protection					;0d general protection fault
  1553                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1553 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                  			mint	int14						;0e (reserved)
  1554                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1554 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                  			mint	int15						;0f (reserved)
  1555                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1555 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                  			mint	coproccalc					;10 (reserved)
  1556                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1556 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                  			mint	int17						;11 (reserved)
  1557                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1557 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                  			mint	int18						;12 (reserved)
  1558                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1558 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                  			mint	int19						;13 (reserved)
  1559                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1559 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                  			mint	int20						;14 (reserved)
  1560                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1560 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                  			mint	int21						;15 (reserved)
  1561                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1561 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                  			mint	int22						;16 (reserved)
  1562                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1562 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                  			mint	int23						;17 (reserved)
  1563                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1563 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                  			mint	int24						;18 (reserved)
  1564                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1564 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                  			mint	int25						;19 (reserved)
  1565                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1565 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                  			mint	int26						;1a (reserved)
  1566                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1566 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                  			mint	int27						;1b (reserved)
  1567                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1567 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                  			mint	int28						;1c (reserved)
  1568                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1568 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                  			mint	int29						;1d (reserved)
  1569                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1569 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                  			mint	int30						;1e (reserved)
  1570                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1570 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                  			mint	int31						;1f (reserved)
  1571                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1571 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1572                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1572 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1573                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1573 00000108 BF054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1574                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1574 00000110 2B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                  			mtrap	com2						;23 IRQ3 com2
  1575                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1575 00000118 2E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576                                  			mtrap	com1						;24 IRQ4 com1
  1576                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1576 00000120 31094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1577                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1577                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1577 00000128 34094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1578                                  			mtrap	diskette					;26 IRQ6 diskette
  1578                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1578 00000130 37094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1579                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1579                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1579 00000138 4B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1580                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1580                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1580 00000140 4E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1581                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1581                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1581 00000148 51094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1582                                  			mtrap	irq10						;2a IRQA (reserved)
  1582                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1582 00000150 54094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1583                                  			mtrap	irq11						;2b IRQB (reserved)
  1583                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1583 00000158 57094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1584                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1584                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1584 00000160 5A094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1585                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1585                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1585 00000168 5D094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1586                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1586                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1586 00000170 60094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1587                                  			mtrap	irq15						;2f IRQF (reserved)
  1587                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1587 00000178 63094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1588                                  			mtrap	svc						;30 OS services
  1588                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1588 00000180 74094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1589 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1590                                  ;=======================================================================================================================
  1591                                  ;
  1592                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1593                                  ;
  1594                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1595                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1596                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1597                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1598                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1599                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1600                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1601                                  ;
  1602                                  ;=======================================================================================================================
  1603                                  section			kernel	vstart=0h					;data offsets relative to 0
  1604                                  			cpu	386						;allow 80386 instructions
  1605                                  			bits	32						;this is 32-bit code
  1606                                  ;=======================================================================================================================
  1607                                  ;
  1608                                  ;	CPU Interrupt Handlers
  1609                                  ;
  1610                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1611                                  ;	of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1612                                  ;
  1613                                  ;=======================================================================================================================
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                  ;
  1616                                  ;	INT0	Divide By Zero
  1617                                  ;
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  			menter	dividebyzero					;divide by zero
  1619                              <1> ?%1 equ ($-$$)
  1620 00000000 6A00                    			push	0						;store interrupt nbr
  1621 00000002 68[29030000]            			push	czIntDivideByZero				;store message offset
  1622 00000007 E947010000              			jmp	ReportInterrupt					;report interrupt
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                  ;
  1625                                  ;	INT1	Single Step
  1626                                  ;
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  			menter	singlestep					;single step
  1628                              <1> ?%1 equ ($-$$)
  1629 0000000C 6A01                    			push	1						;store interrupt nbr
  1630 0000000E 68[3A030000]            			push	czIntSingleStep					;store message offset
  1631 00000013 E93B010000              			jmp	ReportInterrupt					;report interrupt
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;	INT2	Non-Maskable Interrupt
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  			menter	nmi						;non-maskable
  1637                              <1> ?%1 equ ($-$$)
  1638 00000018 6A02                    			push	2						;store interrupt nbr
  1639 0000001A 68[46030000]            			push	czIntNonMaskable				;store message offset
  1640 0000001F E92F010000              			jmp	ReportInterrupt					;report interrupt
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                  ;
  1643                                  ;	INT3	Break
  1644                                  ;
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  			menter	break						;break
  1646                              <1> ?%1 equ ($-$$)
  1647 00000024 6A03                    			push	3						;store interrupt nbr
  1648 00000026 68[5D030000]            			push	czIntBreak					;store message offset
  1649 0000002B E923010000              			jmp	ReportInterrupt					;report interrupt
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  ;
  1652                                  ;	INT4	Into
  1653                                  ;
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  			menter	into						;into
  1655                              <1> ?%1 equ ($-$$)
  1656 00000030 6A04                    			push	4						;store interrupt nbr
  1657 00000032 68[63030000]            			push	czIntInto					;store message offset
  1658 00000037 E917010000              			jmp	ReportInterrupt					;report interrupt
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  ;
  1661                                  ;	INT5	Bounds
  1662                                  ;
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  			menter	bounds						;bounds
  1664                              <1> ?%1 equ ($-$$)
  1665 0000003C 6A05                    			push	5						;store interrupt nbr
  1666 0000003E 68[68030000]            			push	czIntBounds					;store message offset
  1667 00000043 E90B010000              			jmp	ReportInterrupt					;report interrupt
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  ;
  1670                                  ;	INT6	Bad Operation Code
  1671                                  ;
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  			menter	badopcode					;bad opcode interrupt
  1673                              <1> ?%1 equ ($-$$)
  1674 00000048 6A06                    			push	6						;store interrupt nbr
  1675 0000004A 68[6F030000]            			push	czIntBadOpCode					;store message offset
  1676 0000004F E9FF000000              			jmp	ReportInterrupt					;report interrupt
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                  ;
  1679                                  ;	INT7	No Coprocessor
  1680                                  ;
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  			menter	nocoproc					;no coprocessor interrupt
  1682                              <1> ?%1 equ ($-$$)
  1683 00000054 6A07                    			push	7						;store interrupt nbr
  1684 00000056 68[82030000]            			push	czIntNoCoprocessor				;store message offset
  1685 0000005B E9F3000000              			jmp	ReportInterrupt					;report interrupt
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;	INT8	Double Fault
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  			menter	doublefault					;doublefault interrupt
  1691                              <1> ?%1 equ ($-$$)
  1692 00000060 6A08                    			push	8						;store interrupt nbr
  1693 00000062 68[91030000]            			push	czIntDoubleFault				;store message offset
  1694 00000067 E9E7000000              			jmp	ReportInterrupt					;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;	INT9	Operand
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  			menter	operand						;operand interrupt
  1700                              <1> ?%1 equ ($-$$)
  1701 0000006C 6A09                    			push	9						;store interrupt nbr
  1702 0000006E 68[9E030000]            			push	czIntOperand					;store message offset
  1703 00000073 E9DB000000              			jmp	ReportInterrupt					;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;	INT10	Bad Task State Segment
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  			menter	badtss						;bad tss interrupt
  1709                              <1> ?%1 equ ($-$$)
  1710 00000078 6A0A                    			push	10						;store interrupt nbr
  1711 0000007A 68[A6030000]            			push	czIntBadTSS					;store message offset
  1712 0000007F E9CF000000              			jmp	ReportInterrupt					;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;	INT11	Not Present
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  			menter	notpresent					;not present interrupt
  1718                              <1> ?%1 equ ($-$$)
  1719 00000084 6A0B                    			push	11						;store interrupt nbr
  1720 00000086 68[BD030000]            			push	czIntNotPresent					;store message offset
  1721 0000008B E9C3000000              			jmp	ReportInterrupt					;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;	INT12	Stack Limit
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  			menter	stacklimit					;stack limit interrupt
  1727                              <1> ?%1 equ ($-$$)
  1728 00000090 6A0C                    			push	12						;store interrupt nbr
  1729 00000092 68[C9030000]            			push	czIntStackLimit					;store message offset
  1730 00000097 E9B7000000              			jmp	ReportInterrupt					;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;	INT13	General Protection Fault
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  			menter	protection					;protection fault interrupt
  1736                              <1> ?%1 equ ($-$$)
  1737 0000009C 6A0D                    			push	13						;store interrupt nbr
  1738 0000009E 68[D5030000]            			push	czIntProtection					;store message offset
  1739 000000A3 E9AB000000              			jmp	ReportInterrupt					;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;	INT14	Reserved
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  			menter	int14						;(reserved)
  1745                              <1> ?%1 equ ($-$$)
  1746 000000A8 6A0E                    			push	14						;store interrupt nbr
  1747 000000AA 68[06040000]            			push	czIntReserved					;store message offset
  1748 000000AF E99F000000              			jmp	ReportInterrupt					;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;	INT15	Reserved
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  			menter	int15						;(reserved)
  1754                              <1> ?%1 equ ($-$$)
  1755 000000B4 6A0F                    			push	15						;store interrupt nbr
  1756 000000B6 68[06040000]            			push	czIntReserved					;store message offset
  1757 000000BB E993000000              			jmp	ReportInterrupt					;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;	INT16	Coprocessor Calculation
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  			menter	coproccalc					;coprocessor calculation
  1763                              <1> ?%1 equ ($-$$)
  1764 000000C0 6A10                    			push	16						;store interrupt nbr
  1765 000000C2 68[EE030000]            			push	czIntCoprocessorCalc				;store message offset
  1766 000000C7 E987000000              			jmp	ReportInterrupt					;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;	INT17	Reserved
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  			menter	int17						;(reserved)
  1772                              <1> ?%1 equ ($-$$)
  1773 000000CC 6A11                    			push	17						;store interrupt nbr
  1774 000000CE 68[06040000]            			push	czIntReserved					;store message offset
  1775 000000D3 EB7E                    			jmp	ReportInterrupt					;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;	INT18	Reserved
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  			menter	int18						;(reserved)
  1781                              <1> ?%1 equ ($-$$)
  1782 000000D5 6A12                    			push	18						;store interrupt nbr
  1783 000000D7 68[06040000]            			push	czIntReserved					;store message offset
  1784 000000DC EB75                    			jmp	ReportInterrupt					;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;	INT19	Reserved
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  			menter	int19						;(reserved)
  1790                              <1> ?%1 equ ($-$$)
  1791 000000DE 6A13                    			push	19						;store interrupt nbr
  1792 000000E0 68[06040000]            			push	czIntReserved					;store message offset
  1793 000000E5 EB6C                    			jmp	ReportInterrupt					;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;	INT20	Reserved
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  			menter	int20						;(reserved)
  1799                              <1> ?%1 equ ($-$$)
  1800 000000E7 6A14                    			push	20						;store interrupt nbr
  1801 000000E9 68[06040000]            			push	czIntReserved					;store message offset
  1802 000000EE EB63                    			jmp	ReportInterrupt					;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;	INT21	Reserved
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  			menter	int21						;(reserved)
  1808                              <1> ?%1 equ ($-$$)
  1809 000000F0 6A15                    			push	21						;store interrupt nbr
  1810 000000F2 68[06040000]            			push	czIntReserved					;store message offset
  1811 000000F7 EB5A                    			jmp	ReportInterrupt					;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;	INT22	Reserved
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  			menter	int22						;(reserved)
  1817                              <1> ?%1 equ ($-$$)
  1818 000000F9 6A16                    			push	22						;store interrupt nbr
  1819 000000FB 68[06040000]            			push	czIntReserved					;store message offset
  1820 00000100 EB51                    			jmp	ReportInterrupt					;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;	INT23	Reserved
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  			menter	int23						;(reserved)
  1826                              <1> ?%1 equ ($-$$)
  1827 00000102 6A17                    			push	23						;store interrupt nbr
  1828 00000104 68[06040000]            			push	czIntReserved					;store message offset
  1829 00000109 EB48                    			jmp	ReportInterrupt					;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;	INT24	Reserved
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  			menter	int24						;(reserved)
  1835                              <1> ?%1 equ ($-$$)
  1836 0000010B 6A18                    			push	24						;store interrupt nbr
  1837 0000010D 68[06040000]            			push	czIntReserved					;store message offset
  1838 00000112 EB3F                    			jmp	ReportInterrupt					;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;	INT25	Reserved
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  			menter	int25						;(reserved)
  1844                              <1> ?%1 equ ($-$$)
  1845 00000114 6A19                    			push	25						;store interrupt nbr
  1846 00000116 68[06040000]            			push	czIntReserved					;store message offset
  1847 0000011B EB36                    			jmp	ReportInterrupt					;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;	INT26	Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  			menter	int26						;(reserved)
  1853                              <1> ?%1 equ ($-$$)
  1854 0000011D 6A1A                    			push	26						;store interrupt nbr
  1855 0000011F 68[06040000]            			push	czIntReserved					;store message offset
  1856 00000124 EB2D                    			jmp	ReportInterrupt					;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;	INT27	Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  			menter	int27						;(reserved)
  1862                              <1> ?%1 equ ($-$$)
  1863 00000126 6A1B                    			push	27						;store interrupt nbr
  1864 00000128 68[06040000]            			push	czIntReserved					;store message offset
  1865 0000012D EB24                    			jmp	ReportInterrupt					;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;	INT28	Reserved
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  			menter	int28						;(reserved)
  1871                              <1> ?%1 equ ($-$$)
  1872 0000012F 6A1C                    			push	28						;store interrupt nbr
  1873 00000131 68[06040000]            			push	czIntReserved					;store message offset
  1874 00000136 EB1B                    			jmp	ReportInterrupt					;report interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;	INT29	Reserved
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  			menter	int29						;(reserved)
  1880                              <1> ?%1 equ ($-$$)
  1881 00000138 6A1D                    			push	29						;store interrupt nbr
  1882 0000013A 68[06040000]            			push	czIntReserved					;store message offset
  1883 0000013F EB12                    			jmp	ReportInterrupt					;report interrupt
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;	INT30	Reserved
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                  			menter	int30						;(reserved)
  1889                              <1> ?%1 equ ($-$$)
  1890 00000141 6A1E                    			push	30						;store interrupt nbr
  1891 00000143 68[06040000]            			push	czIntReserved					;store message offset
  1892 00000148 EB09                    			jmp	ReportInterrupt					;report interrupt
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  ;
  1895                                  ;	INT31	Reserved
  1896                                  ;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                  			menter	int31						;(reserved)
  1898                              <1> ?%1 equ ($-$$)
  1899 0000014A 6A1F                    			push	31						;store interrupt nbr
  1900 0000014C 68[06040000]            			push	czIntReserved					;store message offset
  1901 00000151 EB00                    			jmp	ReportInterrupt					;report interrupt
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  ;
  1904                                  ;	Routine:	ReportInterrupt
  1905                                  ;
  1906                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1907                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1908                                  ;
  1909                                  ;	In:		[esp+16]	eflags					stored by interrupt call
  1910                                  ;			[esp+12]	cs					stored by interrupt call
  1911                                  ;			[esp+8]		eip					stored by interrupt call
  1912                                  ;			[esp+4]		interrupt number (0-31)			stored by push instruction
  1913                                  ;			[esp+0]		error message address			stored by push instructions
  1914                                  ;
  1915                                  ;	Out:		N/A		This routine does not exit.
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918 00000153 1E                      ReportInterrupt		push	ds						;save DS at time of interrupt
  1919 00000154 06                      			push	es						;save ES at time of interrupt
  1920 00000155 60                      			pushad							;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1921 00000156 89E5                    			mov	ebp,esp						;ebp --> [EDI]
  1922                                  ;
  1923                                  ;	Addressability to registers at the time of the interrupt is now established as:
  1924                                  ;
  1925                                  ;			[ebp+56]	eflags
  1926                                  ;			[ebp+52]	cs
  1927                                  ;			[ebp+48]	eip
  1928                                  ;			[ebp+44]	interrupt number (0-31)
  1929                                  ;			[ebp+40]	error message address
  1930                                  ;			[ebp+36]	ds
  1931                                  ;			[ebp+32]	es
  1932                                  ;			[ebp+28]	eax
  1933                                  ;			[ebp+24]	ecx
  1934                                  ;			[ebp+20]	edx
  1935                                  ;			[ebp+16]	ebx
  1936                                  ;			[ebp+12]	esp
  1937                                  ;			[ebp+8]		ebp
  1938                                  ;			[ebp+4]		esi
  1939                                  ;			[ebp+0]		edi
  1940                                  ;
  1941 00000158 0E                      			push	cs						;load code selector ...
  1942 00000159 1F                      			pop	ds						;... into DS
  1943 0000015A 6A20                    			push	ESELCGA						;load CGA memory selector ...
  1944 0000015C 07                      			pop	es						;... into ES
  1945                                  ;
  1946                                  ;	Display the interrupt report boundary box
  1947                                  ;
  1948 0000015D B10D                    			mov	cl,13						;column
  1949 0000015F B506                    			mov	ch,6						;row
  1950 00000161 B232                    			mov	dl,50						;width
  1951 00000163 B608                    			mov	dh,8						;height
  1952 00000165 B707                    			mov	bh,07h						;attribute
  1953 00000167 E84C030000              			call	DrawTextDialogBox				;draw text dialog box
  1954                                  ;
  1955                                  ;	Display the report header
  1956                                  ;
  1957 0000016C B10F                    			mov	cl,15						;column
  1958 0000016E B507                    			mov	ch,7						;row
  1959 00000170 BE[0F040000]            			mov	esi,czIntHeader					;interrupt message header
  1960 00000175 E8000F0000              			call	SetConsoleString				;draw text string
  1961                                  ;
  1962                                  ;	Display the interrupt description label
  1963                                  ;
  1964 0000017A B10F                    			mov	cl,15						;column
  1965 0000017C B508                    			mov	ch,8						;row
  1966 0000017E BE[3E040000]            			mov	esi,czIntLabel					;interrupt message description lead
  1967 00000183 E8F20E0000              			call	SetConsoleString				;draw text string
  1968                                  ;
  1969                                  ;	Display the interrupt number
  1970                                  ;
  1971 00000188 8B452C                  			mov	eax,[ebp+44]					;interrupt number
  1972 0000018B B11A                    			mov	cl,26						;column
  1973 0000018D B508                    			mov	ch,8						;row
  1974 0000018F E81B0D0000              			call	PutConsoleHexByte				;draw ASCII hex byte
  1975                                  ;
  1976                                  ;	Display the interrupt name
  1977                                  ;
  1978 00000194 B11D                    			mov	cl,29						;column
  1979 00000196 B508                    			mov	ch,8						;row
  1980 00000198 8B7528                  			mov	esi,[ebp+40]					;interrupt-specific message
  1981 0000019B E8DA0E0000              			call	SetConsoleString				;display interrupt description
  1982                                  ;
  1983                                  ;	Display the register values header
  1984                                  ;
  1985 000001A0 B10F                    			mov	cl,15						;column
  1986 000001A2 B50A                    			mov	ch,10						;row
  1987 000001A4 BE[4A040000]            			mov	esi,czIntRegsHeader				;interrupt registers header
  1988 000001A9 E8CC0E0000              			call	SetConsoleString				;draw text string
  1989                                  ;
  1990                                  ;	Display the EAX register label and value
  1991                                  ;
  1992 000001AE B10F                    			mov	cl,15						;column
  1993 000001B0 B50B                    			mov	ch,11						;row
  1994 000001B2 BE[72040000]            			mov	esi,czIntEAX					;register EAX label
  1995 000001B7 E8BE0E0000              			call	SetConsoleString				;draw label
  1996 000001BC 8B451C                  			mov	eax,[ebp+28]					;EAX value at interrupt
  1997 000001BF B113                    			mov	cl,19						;column
  1998 000001C1 B50B                    			mov	ch,11						;row
  1999 000001C3 E8C70C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2000                                  ;
  2001                                  ;	Display the ECX register label and value
  2002                                  ;
  2003 000001C8 B10F                    			mov	cl,15						;column
  2004 000001CA B50C                    			mov	ch,12						;row
  2005 000001CC BE[77040000]            			mov	esi,czIntECX					;label
  2006 000001D1 E8A40E0000              			call	SetConsoleString				;draw label
  2007 000001D6 8B4518                  			mov	eax,[ebp+24]					;ECX value at interrupt
  2008 000001D9 B113                    			mov	cl,19						;column
  2009 000001DB B50C                    			mov	ch,12						;row
  2010 000001DD E8AD0C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2011                                  ;
  2012                                  ;	Display the EDX register label and value
  2013                                  ;
  2014 000001E2 B10F                    			mov	cl,15						;column
  2015 000001E4 B50D                    			mov	ch,13						;row
  2016 000001E6 BE[7C040000]            			mov	esi,czIntEDX					;label
  2017 000001EB E88A0E0000              			call	SetConsoleString				;draw label
  2018 000001F0 8B4514                  			mov	eax,[ebp+20]					;EDX value at interrupt
  2019 000001F3 B113                    			mov	cl,19						;column
  2020 000001F5 B50D                    			mov	ch,13						;row
  2021 000001F7 E8930C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2022                                  ;
  2023                                  ;	Display the EBX register label and value
  2024                                  ;
  2025 000001FC B10F                    			mov	cl,15						;column
  2026 000001FE B50E                    			mov	ch,14						;row
  2027 00000200 BE[81040000]            			mov	esi,czIntEBX					;label
  2028 00000205 E8700E0000              			call	SetConsoleString				;draw label
  2029 0000020A 8B4510                  			mov	eax,[ebp+16]					;EBX value at interrupt
  2030 0000020D B113                    			mov	cl,19						;column
  2031 0000020F B50E                    			mov	ch,14						;row
  2032 00000211 E8790C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2033                                  ;
  2034                                  ;	Display the ESI register label and value
  2035                                  ;
  2036 00000216 B11D                    			mov	cl,29						;column
  2037 00000218 B50B                    			mov	ch,11						;row
  2038 0000021A BE[86040000]            			mov	esi,czIntESI					;label
  2039 0000021F E8560E0000              			call	SetConsoleString				;draw label
  2040 00000224 8B4504                  			mov	eax,[ebp+4]					;ESI
  2041 00000227 B121                    			mov	cl,33						;column
  2042 00000229 B50B                    			mov	ch,11						;row
  2043 0000022B E85F0C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2044                                  ;
  2045                                  ;	Display the EDI register label and value
  2046                                  ;
  2047 00000230 B11D                    			mov	cl,29						;column
  2048 00000232 B50C                    			mov	ch,12						;row
  2049 00000234 BE[8B040000]            			mov	esi,czIntEDI					;label
  2050 00000239 E83C0E0000              			call	SetConsoleString				;draw label
  2051 0000023E 8B4500                  			mov	eax,[ebp+0]					;EDI
  2052 00000241 B121                    			mov	cl,33						;column
  2053 00000243 B50C                    			mov	ch,12						;row
  2054 00000245 E8450C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2055                                  ;
  2056                                  ;	Display the EBP register label and value
  2057                                  ;
  2058 0000024A B11D                    			mov	cl,29						;column
  2059 0000024C B50D                    			mov	ch,13						;row
  2060 0000024E BE[90040000]            			mov	esi,czIntEBP					;label
  2061 00000253 E8220E0000              			call	SetConsoleString				;draw label
  2062 00000258 8B4508                  			mov	eax,[ebp+8]					;EBP
  2063 0000025B B121                    			mov	cl,33						;column
  2064 0000025D B50D                    			mov	ch,13						;row
  2065 0000025F E82B0C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2066                                  ;
  2067                                  ;	Display the DS register label and value
  2068                                  ;
  2069 00000264 B12A                    			mov	cl,42						;column
  2070 00000266 B50B                    			mov	ch,11						;row
  2071 00000268 BE[9A040000]            			mov	esi,czIntDS					;label
  2072 0000026D E8080E0000              			call	SetConsoleString				;draw label
  2073 00000272 31C0                    			xor	eax,eax						;zero register
  2074 00000274 668B4524                			mov	ax,[ebp+36]					;DS
  2075 00000278 B12E                    			mov	cl,46						;column
  2076 0000027A B50B                    			mov	ch,11						;row
  2077 0000027C E81E0C0000              			call	PutConsoleHexWord				;draw ASCII hex word
  2078                                  ;
  2079                                  ;	Display the ES register label and value
  2080                                  ;
  2081 00000281 B12A                    			mov	cl,42						;column
  2082 00000283 B50C                    			mov	ch,12						;row
  2083 00000285 BE[9F040000]            			mov	esi,czIntES					;label
  2084 0000028A E8EB0D0000              			call	SetConsoleString				;draw label
  2085 0000028F 31C0                    			xor	eax,eax						;zero register
  2086 00000291 668B4520                			mov	ax,[ebp+32]					;ES
  2087 00000295 B12E                    			mov	cl,46						;column
  2088 00000297 B50C                    			mov	ch,12						;row
  2089 00000299 E8010C0000              			call	PutConsoleHexWord				;draw ASCII hex word
  2090                                  ;
  2091                                  ;	Display the SS register label and value
  2092                                  ;
  2093 0000029E B12A                    			mov	cl,42						;column
  2094 000002A0 B50D                    			mov	ch,13						;row
  2095 000002A2 BE[A4040000]            			mov	esi,czIntSS					;label
  2096 000002A7 E8CE0D0000              			call	SetConsoleString				;draw label
  2097 000002AC 31C0                    			xor	eax,eax						;zero register
  2098 000002AE 668CD0                  			mov	ax,ss						;SS
  2099 000002B1 B12E                    			mov	cl,46						;column
  2100 000002B3 B50D                    			mov	ch,13						;row
  2101 000002B5 E8E50B0000              			call	PutConsoleHexWord				;draw ASCII hex word
  2102                                  ;
  2103                                  ;	Display the CS register lable and value
  2104                                  ;
  2105 000002BA B12A                    			mov	cl,42						;column
  2106 000002BC B50E                    			mov	ch,14						;row
  2107 000002BE BE[A9040000]            			mov	esi,czIntCS					;label
  2108 000002C3 E8B20D0000              			call	SetConsoleString				;draw label
  2109 000002C8 31C0                    			xor	eax,eax						;zero register
  2110 000002CA 668B4534                			mov	ax,[ebp+52]					;CS
  2111 000002CE B12E                    			mov	cl,46						;column
  2112 000002D0 B50E                    			mov	ch,14						;row
  2113 000002D2 E8C80B0000              			call	PutConsoleHexWord				;draw ASCII hex word
  2114                                  ;
  2115                                  ;	Display the EFLAGS register label and value
  2116                                  ;
  2117 000002D7 B133                    			mov	cl,51						;column
  2118 000002D9 B50B                    			mov	ch,11						;row
  2119 000002DB BE[AE040000]            			mov	esi,czIntEFLAGS					;label
  2120 000002E0 E8950D0000              			call	SetConsoleString				;draw label
  2121 000002E5 8B4538                  			mov	eax,[ebp+56]					;EFLAGS
  2122 000002E8 B137                    			mov	cl,55						;column
  2123 000002EA B50B                    			mov	ch,11						;row
  2124 000002EC E89E0B0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2125                                  ;
  2126                                  ;	Display the ESP register label and value
  2127                                  ;
  2128 000002F1 B133                    			mov	cl,51						;column
  2129 000002F3 B50D                    			mov	ch,13						;row
  2130 000002F5 BE[95040000]            			mov	esi,czIntESP					;label
  2131 000002FA E87B0D0000              			call	SetConsoleString				;draw label
  2132 000002FF 8B450C                  			mov	eax,[ebp+12]					;ESP
  2133 00000302 B137                    			mov	cl,55						;column
  2134 00000304 B50D                    			mov	ch,13						;row
  2135 00000306 E8840B0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2136                                  ;
  2137                                  ;	Display the EIP register label and value
  2138                                  ;
  2139 0000030B B133                    			mov	cl,51						;column
  2140 0000030D B50E                    			mov	ch,14						;row
  2141 0000030F BE[B3040000]            			mov	esi,czIntEIP					;label
  2142 00000314 E8610D0000              			call	SetConsoleString				;draw label
  2143 00000319 8B4530                  			mov	eax,[ebp+48]					;EIP
  2144 0000031C B137                    			mov	cl,55						;column
  2145 0000031E B50E                    			mov	ch,14						;row
  2146 00000320 E86A0B0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2147                                  ;
  2148                                  ;	Halt and loop until reset
  2149                                  ;
  2150 00000325 FB                      .10			sti							;enable maskable interrupts
  2151 00000326 F4                      			hlt							;halt processor
  2152 00000327 EBFC                    			jmp	.10						;resume on interrupt
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154                                  ;
  2155                                  ;	Processor Interrupt Name Strings
  2156                                  ;
  2157                                  ;-----------------------------------------------------------------------------------------------------------------------
  2158 00000329 4469766973696F6E20-     czIntDivideByZero	db	"Division by zero",0
  2158 00000332 6279207A65726F00   
  2159 0000033A 53696E676C65207374-     czIntSingleStep		db	"Single step",0
  2159 00000343 657000             
  2160 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable	db	"Non-maskable interrupt",0
  2160 0000034F 626C6520696E746572-
  2160 00000358 7275707400         
  2161 0000035D 427265616B00            czIntBreak		db	"Break",0
  2162 00000363 496E746F00              czIntInto		db	"Into",0
  2163 00000368 426F756E647300          czIntBounds		db	"Bounds",0
  2164 0000036F 426164204F70657261-     czIntBadOpCode		db	"Bad Operation Code",0
  2164 00000378 74696F6E20436F6465-
  2164 00000381 00                 
  2165 00000382 4E6F20436F70726F63-     czIntNoCoprocessor	db	"No Coprocessor",0
  2165 0000038B 6573736F7200       
  2166 00000391 446F75626C65204661-     czIntDoubleFault	db	"Double Fault",0
  2166 0000039A 756C7400           
  2167 0000039E 4F706572616E6400        czIntOperand		db	"Operand",0
  2168 000003A6 426164205461736B20-     czIntBadTSS		db	"Bad Task State Segment",0
  2168 000003AF 537461746520536567-
  2168 000003B8 6D656E7400         
  2169 000003BD 4E6F74205072657365-     czIntNotPresent		db	"Not Present",0
  2169 000003C6 6E7400             
  2170 000003C9 537461636B204C696D-     czIntStackLimit		db	"Stack Limit",0
  2170 000003D2 697400             
  2171 000003D5 47656E6572616C2050-     czIntProtection		db	"General Protection Fault",0
  2171 000003DE 726F74656374696F6E-
  2171 000003E7 204661756C7400     
  2172 000003EE 436F70726F63657373-     czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  2172 000003F7 6F722043616C63756C-
  2172 00000400 6174696F6E00       
  2173 00000406 526573657276656400      czIntReserved		db	"Reserved",0
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175                                  ;
  2176                                  ;	Processor Interrupt Handling Strings
  2177                                  ;
  2178                                  ;-----------------------------------------------------------------------------------------------------------------------
  2179 0000040F 416E20756E68616E64-     czIntHeader		db	"An unhandled processor interrupt has occurred:",0
  2179 00000418 6C65642070726F6365-
  2179 00000421 73736F7220696E7465-
  2179 0000042A 727275707420686173-
  2179 00000433 206F63637572726564-
  2179 0000043C 3A00               
  2180 0000043E 496E74657272757074-     czIntLabel		db	"Interrupt #",0
  2180 00000447 202300             
  2181 0000044A 526567697374657273-     czIntRegsHeader		db	"Registers at the time of the interrupt:",0
  2181 00000453 206174207468652074-
  2181 0000045C 696D65206F66207468-
  2181 00000465 6520696E7465727275-
  2181 0000046E 70743A00           
  2182 00000472 4541583A00              czIntEAX		db	"EAX:",0
  2183 00000477 4543583A00              czIntECX		db	"ECX:",0
  2184 0000047C 4544583A00              czIntEDX		db	"EDX:",0
  2185 00000481 4542583A00              czIntEBX		db	"EBX:",0
  2186 00000486 4553493A00              czIntESI		db	"ESI:",0
  2187 0000048B 4544493A00              czIntEDI		db	"EDI:",0
  2188 00000490 4542503A00              czIntEBP		db	"EBP:",0
  2189 00000495 4553503A00              czIntESP		db	"ESP:",0
  2190 0000049A 2044533A00              czIntDS			db	" DS:",0
  2191 0000049F 2045533A00              czIntES			db	" ES:",0
  2192 000004A4 2053533A00              czIntSS			db	" SS:",0
  2193 000004A9 2043533A00              czIntCS			db	" CS:",0
  2194 000004AE 464C473A00              czIntEFLAGS		db	"FLG:",0
  2195 000004B3 4549503A00              czIntEIP		db	"EIP:",0
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                  ;
  2198                                  ;	Routine:	DrawTextDialogBox
  2199                                  ;
  2200                                  ;	Description:	This routine opens a text-mode dialog box with an ASCII border.
  2201                                  ;
  2202                                  ;	In:		CL	upper left column (0-79)
  2203                                  ;			CH	upper left row (0-24)
  2204                                  ;			DL	column width, excluding border
  2205                                  ;			DH	row height, excluding border
  2206                                  ;			BH	color attribute
  2207                                  ;
  2208                                  ;-----------------------------------------------------------------------------------------------------------------------
  2209 000004B8 51                      DrawTextDialogBox	push	ecx						;save non-volatile regs
  2210 000004B9 56                      			push	esi						;
  2211 000004BA 57                      			push	edi						;
  2212 000004BB 06                      			push	es						;
  2213 000004BC 6A20                    			push	ESELCGA						;load CGA selector ...
  2214 000004BE 07                      			pop	es						;... into ES
  2215                                  ;
  2216                                  ;	Compute target display offset
  2217                                  ;
  2218 000004BF 31C0                    			xor	eax,eax						;zero register
  2219 000004C1 88E8                    			mov	al,ch						;row
  2220 000004C3 B4A0                    			mov	ah,ECONROWBYTES					;mulitplicand
  2221 000004C5 F6E4                    			mul	ah						;row offset
  2222 000004C7 00C8                    			add	al,cl						;add column
  2223 000004C9 80D400                  			adc	ah,0						;add overflow
  2224 000004CC 00C8                    			add	al,cl						;add column
  2225 000004CE 80D400                  			adc	ah,0						;add overflow
  2226 000004D1 89C7                    			mov	edi,eax						;target row offset
  2227                                  ;
  2228                                  ;	Display top border row
  2229                                  ;
  2230 000004D3 57                      			push	edi						;save target row offset
  2231 000004D4 88FC                    			mov	ah,bh						;attribute
  2232 000004D6 B0DA                    			mov	al,EASCIIBORDSGLUPRLFT				;upper-left single border
  2233 000004D8 66AB                    			stosw							;display character and attribute
  2234 000004DA B0C4                    			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2235 000004DC 31C9                    			xor	ecx,ecx						;zero register
  2236 000004DE 88D1                    			mov	cl,dl						;width, excluding border
  2237 000004E0 F366AB                  			rep	stosw						;display horizontal border
  2238 000004E3 B0BF                    			mov	al,EASCIIBORDSGLUPRRGT				;upper-right single border
  2239 000004E5 66AB                    			stosw							;display character and attribute
  2240 000004E7 5F                      			pop	edi						;restore target row offset
  2241 000004E8 81C7A0000000            			add	edi,ECONROWBYTES				;next row
  2242                                  ;
  2243                                  ;	Display dialog box body rows
  2244                                  ;
  2245 000004EE 31C9                    			xor	ecx,ecx						;zero register
  2246 000004F0 88F1                    			mov	cl,dh						;height, excluding border
  2247 000004F2 51                      .10			push	ecx						;save remaining rows
  2248 000004F3 57                      			push	edi						;save target row offset
  2249 000004F4 88FC                    			mov	ah,bh						;attribute
  2250 000004F6 B0B3                    			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2251 000004F8 66AB                    			stosw							;display character and attribute
  2252 000004FA B020                    			mov	al,EASCIISPACE					;space
  2253 000004FC 31C9                    			xor	ecx,ecx						;zero register
  2254 000004FE 88D1                    			mov	cl,dl						;width, excluding border
  2255 00000500 F366AB                  			rep	stosw						;display row
  2256 00000503 B0B3                    			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2257 00000505 66AB                    			stosw							;display character and attribute
  2258 00000507 5F                      			pop	edi						;restore target row offset
  2259 00000508 81C7A0000000            			add	edi,ECONROWBYTES				;next row
  2260 0000050E 59                      			pop	ecx						;remaining rows
  2261 0000050F E2E1                    			loop	.10						;next row
  2262                                  ;
  2263                                  ;	Display bottom border row
  2264                                  ;
  2265 00000511 57                      			push	edi						;save target row offset
  2266 00000512 88FC                    			mov	ah,bh						;attribute
  2267 00000514 B0C0                    			mov	al,EASCIIBORDSGLLWRLFT				;lower-left single border
  2268 00000516 66AB                    			stosw							;display character and attribute
  2269 00000518 B0C4                    			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2270 0000051A 31C9                    			xor	ecx,ecx						;zero register
  2271 0000051C 88D1                    			mov	cl,dl						;width, excluding border
  2272 0000051E F366AB                  			rep	stosw						;display horizontal border
  2273 00000521 B0D9                    			mov	al,EASCIIBORDSGLLWRRGT				;lower-right single border
  2274 00000523 66AB                    			stosw							;display character and attribute
  2275 00000525 5F                      			pop	edi						;restore target row offset
  2276 00000526 81C7A0000000            			add	edi,ECONROWBYTES				;next row
  2277                                  ;
  2278                                  ;	Restore and return
  2279                                  ;
  2280 0000052C 07                      			pop	es						;restore non-volatile regs
  2281 0000052D 5F                      			pop	edi						;
  2282 0000052E 5E                      			pop	esi						;
  2283 0000052F 59                      			pop	ecx						;
  2284 00000530 C3                      			ret							;return
  2285                                  ;=======================================================================================================================
  2286                                  ;
  2287                                  ;	Hardware Device Interupts
  2288                                  ;
  2289                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2290                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2291                                  ;	(BX=2028h).
  2292                                  ;
  2293                                  ;=======================================================================================================================
  2294                                  ;-----------------------------------------------------------------------------------------------------------------------
  2295                                  ;
  2296                                  ;	IRQ0	Clock Tick Interrupt
  2297                                  ;
  2298                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2299                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2300                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2301                                  ;
  2302                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2303                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2304                                  ;
  2305                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2306                                  ;	zero, the floppy disk motors are turned off.
  2307                                  ;
  2308                                  ;-----------------------------------------------------------------------------------------------------------------------
  2309                                  			menter	clocktick					;clock tick interrupt
  2309                              <1> ?%1 equ ($-$$)
  2310 00000531 50                      			push	eax						;save modified regs
  2311 00000532 52                      			push	edx						;
  2312 00000533 1E                      			push	ds						;
  2313                                  ;
  2314                                  ;	Update the clock tick count and the elapsed days as needed
  2315                                  ;
  2316 00000534 6A18                    			push	ESELDAT						;load OS data selector ...
  2317 00000536 1F                      			pop	ds						;... into data segment register
  2318 00000537 A16C040000              			mov	eax,[wdClockTicks]				;eax = clock ticks
  2319 0000053C 40                      			inc	eax						;increment clock ticks
  2320 0000053D 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  2321 00000542 7208                    			jb	irq0.10						;no, skip ahead
  2322 00000544 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  2323 0000054A 31C0                    			xor	eax,eax						;reset clock ticks
  2324 0000054C A36C040000              irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  2325                                  ;
  2326                                  ;	Decrement floppy disk motor timeout
  2327                                  ;
  2328 00000551 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  2329 00000558 741E                    			je	irq0.20						;yes, skip ahead
  2330 0000055A FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  2331 00000560 7516                    			jnz	irq0.20						;skip ahead if non-zero
  2332                                  ;
  2333                                  ;	Turn off the floppy disk motor if appropriate
  2334                                  ;
  2335 00000562 FB                      			sti							;enable maskable interrupts
  2336 00000563 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  2337 00000565 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  2338 00000567 EC                      			in	al,dx						;FDC main status byte
  2339 00000568 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  2340 0000056A 75F7                    			jnz	irq0.15						;wait while busy
  2341 0000056C B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  2342 0000056E A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  2343 00000573 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  2344 00000575 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  2345 00000577 EE                      			out	dx,al						;turn motor off
  2346                                  ;
  2347                                  ;	Signal the end of the hardware interrupt
  2348                                  ;
  2349 00000578 E84D0B0000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2350                                  ;
  2351                                  ;	Determine if a task switch is appropriate
  2352                                  ;
  2353 0000057D 803D070A000000          			cmp	byte [wbInCriticalSection],0			;any task holding a critical section?
  2354 00000584 7535                    			jne	irq0.30						;yes, do not switch tasks
  2355 00000586 FE05060A0000            			inc	byte [wbTaskIndex]				;increment task queue index (0-255)
  2356 0000058C 0FB605060A0000          			movzx	eax,byte [wbTaskIndex]				;load task queue index
  2357 00000593 668B940000080000        			mov	dx,[wwTaskQueue+eax*2]				;next task selector
  2358 0000059B 660F00C8                			str	ax						;current task selector
  2359 0000059F 6639C2                  			cmp	dx,ax						;next task same is current task?
  2360 000005A2 7417                    			je	irq0.30						;yes, skip task switch
  2361                                  ;
  2362                                  ;	Switch task
  2363                                  ;
  2364 000005A4 06                      			push	es						;save extra segment register
  2365 000005A5 6A08                    			push	ESELGDT						;load GDT alias selector ...
  2366 000005A7 07                      			pop	es						;... into extra segment reg
  2367 000005A8 26806005FD              			and	byte [es:eax+5],0FDh				;reset task-busy bit of current task
  2368 000005AD 07                      			pop	es						;restore extra segment register
  2369 000005AE 668915040A0000          			mov	word [wwFarJumpSelector],dx			;set next task selector in jmp instr
  2370 000005B5 FF2D000A0000            			jmp	far [wdFarJumpEIP]				;jump to next task
  2371                                  ;
  2372                                  ;	Restore and return
  2373                                  ;
  2374 000005BB 1F                      irq0.30			pop	ds						;restore modified regs
  2375 000005BC 5A                      			pop	edx						;
  2376 000005BD 58                      			pop	eax						;
  2377 000005BE CF                      			iretd							;return
  2378                                  ;-----------------------------------------------------------------------------------------------------------------------
  2379                                  ;
  2380                                  ;	IRQ1	Keyboard Interrupt
  2381                                  ;
  2382                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2383                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2384                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2385                                  ;	ALL modified registers upon return. Note that keyboard messages are added to the keyboard focus message queue.
  2386                                  ;	This is a queue referenced in the global descriptor table and must always reference the message queue for the
  2387                                  ;	task that has the keyboard focus. To direct keyboard messages to another task, update the GDT descriptor to
  2388                                  ;	point to the message queue for that task.
  2389                                  ;
  2390                                  ;-----------------------------------------------------------------------------------------------------------------------
  2391                                  			menter	keyboard					;keyboard interrrupt
  2391                              <1> ?%1 equ ($-$$)
  2392 000005BF 50                      			push	eax						;save non-volatile regs
  2393 000005C0 53                      			push	ebx						;
  2394 000005C1 51                      			push	ecx						;
  2395 000005C2 56                      			push	esi						;
  2396 000005C3 1E                      			push	ds						;
  2397 000005C4 6A18                    			push	ESELDAT						;load OS data selector ...
  2398 000005C6 1F                      			pop	ds						;... into data segment register
  2399 000005C7 30C0                    			xor	al,al						;zero
  2400 000005C9 A2110A0000              			mov	[wbConsoleScan0],al				;clear scan code 0
  2401 000005CE A2120A0000              			mov	[wbConsoleScan1],al				;clear scan code 1
  2402 000005D3 A2130A0000              			mov	[wbConsoleScan2],al				;clear scan code 2
  2403 000005D8 A2140A0000              			mov	[wbConsoleScan3],al				;clear scan code 3
  2404 000005DD A2150A0000              			mov	[wbConsoleScan4],al				;clear scan code 4
  2405 000005E2 A2160A0000              			mov	[wbConsoleScan5],al				;clear scan code 5
  2406 000005E7 B020                    			mov	al,' '						;space
  2407 000005E9 A2170A0000              			mov	[wbConsoleChar],al				;set character to space
  2408 000005EE B080                    			mov	al,EKEYFTIMEOUT					;controller timeout flag
  2409 000005F0 F6D0                    			not	al						;controller timeout mask
  2410 000005F2 2005100A0000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  2411 000005F8 8A1D0E0A0000            			mov	bl,[wbConsoleShift]				;shift flags
  2412 000005FE 8A3D0F0A0000            			mov	bh,[wbConsoleLock]				;lock flags
  2413 00000604 E8760B0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2414 00000609 0F8404020000            			jz	irq1.140					;yes, skip ahead
  2415 0000060F E460                    			in	al,EKEYBPORTDATA				;read scan code 0
  2416 00000611 A2110A0000              			mov	[wbConsoleScan0],al				;save scan code 0
  2417 00000616 88C4                    			mov	ah,al						;copy scan code 0
  2418 00000618 B002                    			mov	al,EKEYFSHIFTLEFT				;left shift flag
  2419 0000061A 80FC2A                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  2420 0000061D 0F84E0000000            			je	irq1.30						;yes, set flag
  2421 00000623 80FCAA                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  2422 00000626 0F84DB000000            			je	irq1.40						;yes, reset flag
  2423 0000062C B010                    			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  2424 0000062E 80FC36                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  2425 00000631 0F84CC000000            			je	irq1.30						;yes, set flag
  2426 00000637 80FCB6                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  2427 0000063A 0F84C7000000            			je	irq1.40						;yes, reset flag
  2428 00000640 B001                    			mov	al,EKEYFCTRLLEFT				;left control flag
  2429 00000642 80FC1D                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2430 00000645 0F84B8000000            			je	irq1.30						;yes, set flag
  2431 0000064B 80FC9D                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2432 0000064E 0F84B3000000            			je	irq1.40						;yes, reset flag
  2433 00000654 B004                    			mov	al,EKEYFALTLEFT					;left alt flag
  2434 00000656 80FC38                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2435 00000659 0F84A4000000            			je	irq1.30						;yes, set flag
  2436 0000065F 80FCB8                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2437 00000662 0F849F000000            			je	irq1.40						;yes, reset flag
  2438 00000668 B004                    			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  2439 0000066A 80FC3A                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  2440 0000066D 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  2441 00000673 B002                    			mov	al,EKEYFLOCKNUM					;num-lock flag
  2442 00000675 80FC45                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  2443 00000678 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  2444 0000067E B001                    			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  2445 00000680 80FC46                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  2446 00000683 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  2447 00000689 80FCE0                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  2448 0000068C 0F8598000000            			jne	irq1.70 					;no, skip ahead
  2449 00000692 E8E80A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2450 00000697 0F8476010000            			jz	irq1.140					;yes, skip ahead
  2451 0000069D E460                    			in	al,EKEYBPORTDATA				;read scan code 1
  2452 0000069F A2120A0000              			mov	[wbConsoleScan1],al				;save scan code 1
  2453 000006A4 88C4                    			mov	ah,al						;copy scan code 1
  2454 000006A6 B008                    			mov	al,EKEYFCTRLRIGHT				;right control flag
  2455 000006A8 80FC1D                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2456 000006AB 7456                    			je	irq1.30						;yes, set flag
  2457 000006AD 80FC9D                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2458 000006B0 7455                    			je	irq1.40						;yes, reset flag
  2459 000006B2 B020                    			mov	al,EKEYFALTRIGHT				;right alt flag
  2460 000006B4 80FC38                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2461 000006B7 744A                    			je	irq1.30						;yes, set flag
  2462 000006B9 80FCB8                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2463 000006BC 7449                    			je	irq1.40						;yes, reset flag
  2464 000006BE 80FC35                  			cmp	ah,EKEYBSLASH					;slash down code?
  2465 000006C1 0F84D2000000            			je	irq1.80						;yes, skip ahead
  2466 000006C7 80FCB5                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  2467 000006CA 0F84C9000000            			je	irq1.80						;yes, skip ahead
  2468 000006D0 80FC2A                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  2469 000006D3 7405                    			je	irq1.10						;yes, continue
  2470 000006D5 80FCB7                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  2471 000006D8 7524                    			jne	irq1.20						;no, skip ahead
  2472 000006DA E8A00A0000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  2473 000006DF 0F842E010000            			jz	irq1.140					;yes, skip ahead
  2474 000006E5 E460                    			in	al,EKEYBPORTDATA				;read scan code 2
  2475 000006E7 A2130A0000              			mov	[wbConsoleScan2],al				;save scan code 2
  2476 000006EC E88E0A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2477 000006F1 0F841C010000            			jz	irq1.140					;yes, skip ahead
  2478 000006F7 E460                    			in	al,EKEYBPORTDATA				;read scan code 3
  2479 000006F9 A2140A0000              			mov	[wbConsoleScan3],al				;read scan code 3
  2480 000006FE E918010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  2481 00000703 08C3                    irq1.30			or	bl,al						;set shift flag
  2482 00000705 EB0D                    			jmp	irq1.60						;skip ahead
  2483 00000707 F6D0                    irq1.40			not	al						;convert flag to mask
  2484 00000709 20C3                    			and	bl,al						;reset shift flag
  2485 0000070B EB07                    			jmp	irq1.60						;skip ahead
  2486 0000070D 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  2487 0000070F E83C0A0000              			call	SetKeyboardLamps				;update keyboard lamps
  2488 00000714 881D0E0A0000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  2489 0000071A 883D0F0A0000            			mov	[wbConsoleLock],bh				;save lock flags
  2490 00000720 E878060000              			call	PutConsoleOIAShift				;update OIA indicators
  2491 00000725 E9F1000000              			jmp	irq1.150					;finish keyboard handling
  2492 0000072A 80FCE1                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  2493 0000072D 756A                    			jne	irq1.80						;no continue
  2494 0000072F E84B0A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2495 00000734 0F84D9000000            			jz	irq1.140					;yes, skip ahead
  2496 0000073A E460                    			in	al,EKEYBPORTDATA				;read scan code 1
  2497 0000073C A2120A0000              			mov	[wbConsoleScan1],al				;save scan code 1
  2498 00000741 88C4                    			mov	ah,al						;copy scan code 1
  2499 00000743 80FC1D                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  2500 00000746 0F85CF000000            			jne	irq1.150					;no, finish keyboard handling
  2501 0000074C E82E0A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2502 00000751 0F84BC000000            			jz	irq1.140					;yes, skip ahead
  2503 00000757 E460                    			in	al,EKEYBPORTDATA				;read scan code 2
  2504 00000759 A2130A0000              			mov	[wbConsoleScan2],al				;save scan code 2
  2505 0000075E E81C0A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2506 00000763 0F84AA000000            			jz	irq1.140					;yes, skip ahead
  2507 00000769 E460                    			in	al,EKEYBPORTDATA				;read scan code 3
  2508 0000076B A2140A0000              			mov	[wbConsoleScan3],al				;save scan code 3
  2509 00000770 E80A0A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2510 00000775 0F8498000000            			jz	irq1.140					;yes, skip ahead
  2511 0000077B E460                    			in	al,EKEYBPORTDATA				;read scan code 4
  2512 0000077D A2150A0000              			mov	[wbConsoleScan4],al				;save scan code 4
  2513 00000782 E8F8090000              			call	WaitForKeyOutBuffer				;controller timeout?
  2514 00000787 0F8486000000            			jz	irq1.140					;yes, skip ahead
  2515 0000078D E460                    			in	al,EKEYBPORTDATA				;read scan code 5
  2516 0000078F A2160A0000              			mov	[wbConsoleScan5],al				;save scan code 5
  2517 00000794 E982000000              			jmp	irq1.150					;continue
  2518 00000799 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  2519 0000079B F6C480                  			test	ah,EKEYBUP					;release code?
  2520 0000079E 7571                    			jnz	irq1.130					;yes, skip ahead
  2521 000007A0 BE[2B080000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  2522 000007A5 F6C312                  			test	bl,EKEYFSHIFT					;either shift key down?
  2523 000007A8 7405                    			jz	irq1.90						;no, skip ahead
  2524 000007AA BE[AB080000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  2525 000007AF 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  2526 000007B2 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  2527 000007B6 F6C704                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2528 000007B9 7411                    			jz	irq1.100					;no skip ahead
  2529 000007BB 88C1                    			mov	cl,al						;copy ASCII code
  2530 000007BD 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2531 000007C0 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2532 000007C3 7207                    			jb	irq1.100					;yes, skip ahead
  2533 000007C5 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2534 000007C8 7702                    			ja	irq1.100					;yes, skip ahead
  2535 000007CA 3420                    			xor	al,EASCIICASE					;switch case
  2536 000007CC A2170A0000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2537 000007D1 BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  2538 000007D6 F6C480                  			test	ah,EKEYBUP					;release scan-code?
  2539 000007D9 7405                    			jz	irq1.120					;no, skip ahead
  2540 000007DB BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  2541 000007E0 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  2542 000007E5 09C2                    			or	edx,eax						;msg id and codes
  2543 000007E7 31C9                    			xor	ecx,ecx						;null param
  2544 000007E9 50                      			push	eax						;save codes
  2545 000007EA B880000000              			mov	eax,ESELKEYBOARDMQ				;keyboard focus message queue
  2546 000007EF E8C3070000              			call	PutMessage					;put message to console
  2547 000007F4 58                      			pop	eax						;restore codes
  2548 000007F5 84C0                    			test	al,al						;ASCII translation?
  2549 000007F7 7418                    			jz	irq1.130					;no, skip ahead
  2550 000007F9 BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  2551 000007FE 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  2552 00000803 09C2                    			or	edx,eax						;msg id and codes
  2553 00000805 31C9                    			xor	ecx,ecx						;null param
  2554 00000807 B880000000              			mov	eax,ESELKEYBOARDMQ				;keyboard focus message queue
  2555 0000080C E8A6070000              			call	PutMessage					;put message to console
  2556 00000811 EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  2557 00000813 B080                    irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2558 00000815 0805100A0000            			or	[wbConsoleStatus],al				;set controller timeout flag
  2559 0000081B E817060000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  2560 00000820 E8A5080000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2561 00000825 1F                      			pop	ds						;restore non-volatile regs
  2562 00000826 5E                      			pop	esi						;
  2563 00000827 59                      			pop	ecx						;
  2564 00000828 5B                      			pop	ebx						;
  2565 00000829 58                      			pop	eax						;
  2566 0000082A CF                      			iretd							;return
  2567                                  ;-----------------------------------------------------------------------------------------------------------------------
  2568                                  ;	Scan-Code to ASCII Translation Tables
  2569                                  ;-----------------------------------------------------------------------------------------------------------------------
  2570 0000082B 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2571 00000833 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2572 0000083B 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2573 00000843 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2574 0000084B 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2575 00000853 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2576 0000085B 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2577 00000863 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2578 0000086B 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2579 00000873 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2580 0000087B 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2581 00000883 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2582 0000088B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2583 00000893 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2584 0000089B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2585 000008A3 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2586 000008AB 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2587 000008B3 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2588 000008BB 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2589 000008C3 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2590 000008CB 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2591 000008D3 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2592 000008DB 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2593 000008E3 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2594 000008EB 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2595 000008F3 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2596 000008FB 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2597 00000903 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2598 0000090B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2599 00000913 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2600 0000091B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2601 00000923 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2602                                  ;-----------------------------------------------------------------------------------------------------------------------
  2603                                  ;
  2604                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2605                                  ;
  2606                                  ;-----------------------------------------------------------------------------------------------------------------------
  2607                                  			menter	iochannel					;secondary 8259A cascade
  2607                              <1> ?%1 equ ($-$$)
  2608 0000092B 50                      			push	eax						;save modified regs
  2609 0000092C EB3F                    			jmp	hwint						;end interrupt and return
  2610                                  ;-----------------------------------------------------------------------------------------------------------------------
  2611                                  ;
  2612                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2613                                  ;
  2614                                  ;-----------------------------------------------------------------------------------------------------------------------
  2615                                  			menter	com2						;serial port 2 interrupt
  2615                              <1> ?%1 equ ($-$$)
  2616 0000092E 50                      			push	eax						;save modified regs
  2617 0000092F EB3C                    			jmp	hwint						;end interrupt and return
  2618                                  ;-----------------------------------------------------------------------------------------------------------------------
  2619                                  ;
  2620                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2621                                  ;
  2622                                  ;-----------------------------------------------------------------------------------------------------------------------
  2623                                  			menter	com1						;serial port 1 interrupt
  2623                              <1> ?%1 equ ($-$$)
  2624 00000931 50                      			push	eax						;save modified regs
  2625 00000932 EB39                    			jmp	hwint						;end interrupt and return
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  ;
  2628                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2629                                  ;
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                  			menter	lpt2						;parallel port 2 interrupt
  2631                              <1> ?%1 equ ($-$$)
  2632 00000934 50                      			push	eax						;save modified regs
  2633 00000935 EB36                    			jmp	hwint						;end interrupt and return
  2634                                  ;-----------------------------------------------------------------------------------------------------------------------
  2635                                  ;
  2636                                  ;	IRQ6	Diskette Hardware Interrupt
  2637                                  ;
  2638                                  ;-----------------------------------------------------------------------------------------------------------------------
  2639                                  			menter	diskette					;floppy disk interrupt
  2639                              <1> ?%1 equ ($-$$)
  2640 00000937 50                      			push	eax						;save non-volatile regs
  2641 00000938 1E                      			push	ds						;
  2642 00000939 6A18                    			push	ESELDAT						;load OS data selector ...
  2643 0000093B 1F                      			pop	ds						;... into DS register
  2644 0000093C A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2645 00000941 0C80                    			or	al,10000000b					;set IRQ flag
  2646 00000943 A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  2647 00000948 1F                      			pop	ds						;restore non-volatile regs
  2648 00000949 EB22                    			jmp	hwint						;end primary PIC interrupt
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650                                  ;
  2651                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2652                                  ;
  2653                                  ;-----------------------------------------------------------------------------------------------------------------------
  2654                                  			menter	lpt1						;parallel port 1 interrupt
  2654                              <1> ?%1 equ ($-$$)
  2655 0000094B 50                      			push	eax						;save modified regs
  2656 0000094C EB1F                    			jmp	hwint						;end interrupt and return
  2657                                  ;-----------------------------------------------------------------------------------------------------------------------
  2658                                  ;
  2659                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2660                                  ;
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  			menter	rtclock						;real-time clock interrupt
  2662                              <1> ?%1 equ ($-$$)
  2663 0000094E 50                      			push	eax						;save modified regs
  2664 0000094F EB15                    			jmp	hwwint						;end interrupt and return
  2665                                  ;-----------------------------------------------------------------------------------------------------------------------
  2666                                  ;
  2667                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2668                                  ;
  2669                                  ;-----------------------------------------------------------------------------------------------------------------------
  2670                                  			menter	retrace						;CGA vertical retrace interrupt
  2670                              <1> ?%1 equ ($-$$)
  2671 00000951 50                      			push	eax						;save modified regs
  2672 00000952 EB12                    			jmp	hwwint						;end interrupt and return
  2673                                  ;-----------------------------------------------------------------------------------------------------------------------
  2674                                  ;
  2675                                  ;	IRQ10	Reserved Hardware Interrupt
  2676                                  ;
  2677                                  ;-----------------------------------------------------------------------------------------------------------------------
  2678                                  			menter	irq10						;reserved
  2678                              <1> ?%1 equ ($-$$)
  2679 00000954 50                      			push	eax						;save modified regs
  2680 00000955 EB0F                    			jmp	hwwint						;end interrupt and return
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                  ;
  2683                                  ;	IRQ11	Reserved Hardware Interrupt
  2684                                  ;
  2685                                  ;-----------------------------------------------------------------------------------------------------------------------
  2686                                  			menter	irq11						;reserved
  2686                              <1> ?%1 equ ($-$$)
  2687 00000957 50                      			push	eax						;save modified regs
  2688 00000958 EB0C                    			jmp	hwwint						;end interrupt and return
  2689                                  ;-----------------------------------------------------------------------------------------------------------------------
  2690                                  ;
  2691                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2692                                  ;
  2693                                  ;-----------------------------------------------------------------------------------------------------------------------
  2694                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2694                              <1> ?%1 equ ($-$$)
  2695 0000095A 50                      			push	eax						;save modified regs
  2696 0000095B EB09                    			jmp	hwwint						;end interrupt and return
  2697                                  ;-----------------------------------------------------------------------------------------------------------------------
  2698                                  ;
  2699                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2700                                  ;
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  			menter	coprocessor					;coprocessor interrupt
  2702                              <1> ?%1 equ ($-$$)
  2703 0000095D 50                      			push	eax						;save modified regs
  2704 0000095E EB06                    			jmp	hwwint						;end interrupt and return
  2705                                  ;-----------------------------------------------------------------------------------------------------------------------
  2706                                  ;
  2707                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2708                                  ;
  2709                                  ;-----------------------------------------------------------------------------------------------------------------------
  2710                                  			menter	fixeddisk					;fixed disk interrupt
  2710                              <1> ?%1 equ ($-$$)
  2711 00000960 50                      			push	eax						;save modified regs
  2712 00000961 EB03                    			jmp	hwwint						;end interrupt and return
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                  ;
  2715                                  ;	IRQ15	Reserved Hardware Interrupt
  2716                                  ;
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  			menter	irq15						;reserved
  2718                              <1> ?%1 equ ($-$$)
  2719 00000963 50                      			push	eax						;save modified regs
  2720 00000964 EB00                    			jmp	hwwint						;end interrupt and return
  2721                                  ;-----------------------------------------------------------------------------------------------------------------------
  2722                                  ;
  2723                                  ;	Exit from hardware interrupt
  2724                                  ;
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726 00000966 E865070000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2727 0000096B EB05                    			jmp	hwint90						;skip ahead
  2728 0000096D E858070000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2729 00000972 58                      hwint90			pop	eax						;restore modified regs
  2730 00000973 CF                      			iretd							;return from interrupt
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;
  2733                                  ;	INT 30h Operating System Software Service Interrupt
  2734                                  ;
  2735                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2736                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2737                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2738                                  ;	the entry address of the specific function from a table.
  2739                                  ;
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  			menter	svc
  2741                              <1> ?%1 equ ($-$$)
  2742 00000974 3C1A                    			cmp	al,maxtsvc					;is our function out of range?
  2743 00000976 730D                    			jae	svc90						;yes, skip ahead
  2744 00000978 0FB6C0                  			movzx	eax,al						;function
  2745 0000097B C1E002                  			shl	eax,2						;offset into table
  2746 0000097E 2EFF90[86090000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  2747 00000985 CF                      svc90			iretd							;return from interrupt
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                  ;
  2750                                  ;	Service Request Table
  2751                                  ;
  2752                                  ;
  2753                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2754                                  ;
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  2756                              <1> tsvc :
  2756                              <1> e%1 equ ($-tsvc)/4
  2756 00000986 [13100000]          <1>  dd %1
  2757                                  			tsvce	CompareMemory					;compare memory
  2757                              <1> e%1 equ ($-tsvc)/4
  2757 0000098A [2E0C0000]          <1>  dd %1
  2758                                  			tsvce	CopyMemory					;copy memory
  2758                              <1> e%1 equ ($-tsvc)/4
  2758 0000098E [4B0C0000]          <1>  dd %1
  2759                                  			tsvce	GetConsoleString				;get string input
  2759                              <1> e%1 equ ($-tsvc)/4
  2759 00000992 [8A0C0000]          <1>  dd %1
  2760                                  			tsvce	HexadecimalToUnsigned				;convert hexadecimal string to unsigned integer
  2760                              <1> e%1 equ ($-tsvc)/4
  2760 00000996 [990F0000]          <1>  dd %1
  2761                                  			tsvce	IsLeapYear					;return ecx=1 if leap year
  2761                              <1> e%1 equ ($-tsvc)/4
  2761 0000099A [FC090000]          <1>  dd %1
  2762                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2762                              <1> e%1 equ ($-tsvc)/4
  2762 0000099E [A0100000]          <1>  dd %1
  2763                                  			tsvce	PutConsoleString				;tty output asciiz string
  2763                              <1> e%1 equ ($-tsvc)/4
  2763 000009A2 [5D0C0000]          <1>  dd %1
  2764                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2764                              <1> e%1 equ ($-tsvc)/4
  2764 000009A6 [170A0000]          <1>  dd %1
  2765                                  			tsvce	PutDayString					;put DD string
  2765                              <1> e%1 equ ($-tsvc)/4
  2765 000009AA [580A0000]          <1>  dd %1
  2766                                  			tsvce	PutHourString					;put hh string
  2766                              <1> e%1 equ ($-tsvc)/4
  2766 000009AE [660A0000]          <1>  dd %1
  2767                                  			tsvce	PutMinuteString					;put mm string
  2767                              <1> e%1 equ ($-tsvc)/4
  2767 000009B2 [740A0000]          <1>  dd %1
  2768                                  			tsvce	PutMonthString					;put MM string
  2768                              <1> e%1 equ ($-tsvc)/4
  2768 000009B6 [820A0000]          <1>  dd %1
  2769                                  			tsvce	PutMonthNameString				;put name(MM) string
  2769                              <1> e%1 equ ($-tsvc)/4
  2769 000009BA [900A0000]          <1>  dd %1
  2770                                  			tsvce	PutSecondString					;put ss string
  2770                              <1> e%1 equ ($-tsvc)/4
  2770 000009BE [B40A0000]          <1>  dd %1
  2771                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2771                              <1> e%1 equ ($-tsvc)/4
  2771 000009C2 [C10A0000]          <1>  dd %1
  2772                                  			tsvce	PutWeekdayString				;put weekday string
  2772                              <1> e%1 equ ($-tsvc)/4
  2772 000009C6 [F60A0000]          <1>  dd %1
  2773                                  			tsvce	PutWeekdayNameString				;put name(weekday) string
  2773                              <1> e%1 equ ($-tsvc)/4
  2773 000009CA [040B0000]          <1>  dd %1
  2774                                  			tsvce	PutYearString					;put YYYY string
  2774                              <1> e%1 equ ($-tsvc)/4
  2774 000009CE [270B0000]          <1>  dd %1
  2775                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2775                              <1> e%1 equ ($-tsvc)/4
  2775 000009D2 [D6100000]          <1>  dd %1
  2776                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2776                              <1> e%1 equ ($-tsvc)/4
  2776 000009D6 [41110000]          <1>  dd %1
  2777                                  			tsvce	SetConsoleString				;set console string
  2777                              <1> e%1 equ ($-tsvc)/4
  2777 000009DA [7A100000]          <1>  dd %1
  2778                                  			tsvce	UnsignedToDecimalString 			;convert unsigned integer to decimal string
  2778                              <1> e%1 equ ($-tsvc)/4
  2778 000009DE [D50E0000]          <1>  dd %1
  2779                                  			tsvce	UnsignedToHexadecimal				;convert unsigned integer to hexadecimal string
  2779                              <1> e%1 equ ($-tsvc)/4
  2779 000009E2 [790F0000]          <1>  dd %1
  2780                                  			tsvce	UpperCaseString					;upper-case string
  2780                              <1> e%1 equ ($-tsvc)/4
  2780 000009E6 [140C0000]          <1>  dd %1
  2781                                  			tsvce	Yield						;halt until interrupt
  2781                              <1> e%1 equ ($-tsvc)/4
  2781 000009EA [170D0000]          <1>  dd %1
  2782                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                  ;
  2785                                  ;	Service Request Macros
  2786                                  ;
  2787                                  ;	These macros provide positional parameterization of service request calls.
  2788                                  ;
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790                                  %macro			clearConsoleScreen 0
  2791                                  			mov	al,eClearConsoleScreen				;function code
  2792                                  			int	_svc						;invoke OS service
  2793                                  %endmacro
  2794                                  %macro			compareMemory 0
  2795                                  			mov	al,eCompareMemory				;function code
  2796                                  			int	_svc						;invoke OS service
  2797                                  %endmacro
  2798                                  %macro			compareMemory 3
  2799                                  			mov	edx,%1						;first memory address
  2800                                  			mov	ebx,%2						;second memory address
  2801                                  			mov	ecx,%3						;length
  2802                                  			mov	al,eCompareMemory				;function code
  2803                                  			int	_svc						;invoke OS service
  2804                                  %endmacro
  2805                                  %macro			copyMemory 3
  2806                                  			mov	edx,%1						;first memory address
  2807                                  			mov	ebx,%2						;second memory address
  2808                                  			mov	ecx,%3						;length
  2809                                  			mov	al,eCopyMemory					;function code
  2810                                  			int	_svc						;invoke OS service
  2811                                  %endmacro
  2812                                  %macro			getConsoleString 4
  2813                                  			mov	edx,%1						;buffer address
  2814                                  			mov	ecx,%2						;max characters
  2815                                  			mov	bh,%3						;echo indicator
  2816                                  			mov	bl,%4						;terminator
  2817                                  			mov	al,eGetConsoleString				;function code
  2818                                  			int	_svc						;invoke OS service
  2819                                  %endmacro
  2820                                  %macro			hexadecimalToUnsigned 0
  2821                                  			mov	al,eHexadecimalToUnsigned			;function code
  2822                                  			int	_svc						;invoke OS service
  2823                                  %endmacro
  2824                                  %macro			isLeapYear 1
  2825                                  			mov	ebx,%1						;DATETIME addr
  2826                                  			mov	al,eIsLeapYear					;function code
  2827                                  			int	_svc						;invoke OS service
  2828                                  %endmacro
  2829                                  %macro			placeCursor 0
  2830                                  			mov	al,ePlaceCursor					;function code
  2831                                  			int	_svc						;invoke OS service
  2832                                  %endmacro
  2833                                  %macro			putConsoleString 1
  2834                                  			mov	edx,%1						;string address
  2835                                  			mov	al,ePutConsoleString				;function code
  2836                                  			int	_svc						;invoke OS service
  2837                                  %endmacro
  2838                                  %macro			putDateString 0
  2839                                  			mov	al,ePutDateString				;function code
  2840                                  			int	_svc						;invoke OS service
  2841                                  %endmacro
  2842                                  %macro			putDateString 2
  2843                                  			mov	ebx,%1						;DATETIME addr
  2844                                  			mov	edx,%2						;output buffer addr
  2845                                  			mov	al,ePutDateString				;function code
  2846                                  			int	_svc						;invoke OS service
  2847                                  %endmacro
  2848                                  %macro			putDayString 2
  2849                                  			mov	ebx,%1						;DATETIME addr
  2850                                  			mov	edx,%2						;output buffer addr
  2851                                  			mov	al,ePutDayString				;function code
  2852                                  			int	_svc						;invoke OS service
  2853                                  %endmacro
  2854                                  %macro			putHourString 2
  2855                                  			mov	ebx,%1						;DATETIME addr
  2856                                  			mov	edx,%2						;output buffer addr
  2857                                  			mov	al,ePutHourString				;function code
  2858                                  			int	_svc						;invoke OS service
  2859                                  %endmacro
  2860                                  %macro			putMinuteString 2
  2861                                  			mov	ebx,%1						;DATETIME addr
  2862                                  			mov	edx,%2						;output buffer addr
  2863                                  			mov	al,ePutMinuteString				;function code
  2864                                  			int	_svc						;invoke OS service
  2865                                  %endmacro
  2866                                  %macro			putMonthString 2
  2867                                  			mov	ebx,%1						;DATETIME addr
  2868                                  			mov	edx,%2						;output buffer addr
  2869                                  			mov	al,ePutMonthString				;function code
  2870                                  			int	_svc						;invoke OS service
  2871                                  %endmacro
  2872                                  %macro			putMonthNameString 2
  2873                                  			mov	ebx,%1						;DATETIME addr
  2874                                  			mov	edx,%2						;output buffer addr
  2875                                  			mov	al,ePutMonthNameString				;function code
  2876                                  			int	_svc						;invoke OS service
  2877                                  %endmacro
  2878                                  %macro			putSecondString 2
  2879                                  			mov	ebx,%1						;DATETIME addr
  2880                                  			mov	edx,%2						;output buffer addr
  2881                                  			mov	al,ePutSecondString				;function code
  2882                                  			int	_svc						;invoke OS service
  2883                                  %endmacro
  2884                                  %macro			putTimeString 0
  2885                                  			mov	al,ePutTimeString				;function code
  2886                                  			int	_svc						;invoke OS service
  2887                                  %endmacro
  2888                                  %macro			putTimeString 2
  2889                                  			mov	ebx,%1						;DATETIME addr
  2890                                  			mov	edx,%2						;output buffer addr
  2891                                  			mov	al,ePutTimeString				;function code
  2892                                  			int	_svc						;invoke OS service
  2893                                  %endmacro
  2894                                  %macro			putWeekdayString 2
  2895                                  			mov	ebx,%1						;DATETIME addr
  2896                                  			mov	edx,%2						;output buffer addr
  2897                                  			mov	al,ePutWeekdayString				;function code
  2898                                  			int	_svc						;invoke OS service
  2899                                  %endmacro
  2900                                  %macro			putWeekdayNameString 2
  2901                                  			mov	ebx,%1						;DATETIME addr
  2902                                  			mov	edx,%2						;output buffer addr
  2903                                  			mov	al,ePutWeekdayNameString			;function code
  2904                                  			int	_svc						;invoke OS service
  2905                                  %endmacro
  2906                                  %macro			putYearString 2
  2907                                  			mov	ebx,%1						;DATETIME addr
  2908                                  			mov	edx,%2						;output buffer addr
  2909                                  			mov	al,ePutYearString				;function code
  2910                                  			int	_svc						;invoke OS service
  2911                                  %endmacro
  2912                                  %macro			readRealTimeClock 0
  2913                                  			mov	al,eReadRealTimeClock				;function code
  2914                                  			int	_svc						;invoke OS service
  2915                                  %endmacro
  2916                                  %macro			readRealTimeClock 1
  2917                                  			mov	ebx,%1						;DATETIME addr
  2918                                  			mov	al,eReadRealTimeClock				;function code
  2919                                  			int	_svc						;invoke OS service
  2920                                  %endmacro
  2921                                  %macro			resetSystem 0
  2922                                  			mov	al,eResetSystem					;AL = system reset fn.
  2923                                  			int	_svc						;invoke OS service
  2924                                  %endmacro
  2925                                  %macro			setConsoleString 0
  2926                                  			mov	al,eSetConsoleString				;function code
  2927                                  			int	_svc						;invoke OS service
  2928                                  %endmacro
  2929                                  %macro			unsignedToDecimalString 0
  2930                                  			mov	al,eUnsignedToDecimalString			;function code
  2931                                  			int	_svc						;invoke OS service
  2932                                  %endmacro
  2933                                  %macro			unsignedToHexadecimal 0
  2934                                  			mov	al,eUnsignedToHexadecimal			;function code
  2935                                  			int	_svc						;invoke OS service
  2936                                  %endmacro
  2937                                  %macro			upperCaseString 0
  2938                                  			mov	al,eUpperCaseString				;function code
  2939                                  			int	_svc						;invoke OS service
  2940                                  %endmacro
  2941                                  %macro			yield 0
  2942                                  			mov	al,eYield					;function code
  2943                                  			int	_svc						;invoke OS service
  2944                                  %endmacro
  2945                                  ;=======================================================================================================================
  2946                                  ;
  2947                                  ;	Kernel Function Library
  2948                                  ;
  2949                                  ;=======================================================================================================================
  2950                                  ;=======================================================================================================================
  2951                                  ;
  2952                                  ;	Date and Time Helper Routines
  2953                                  ;
  2954                                  ;	GetYear
  2955                                  ;	IsLeapYear
  2956                                  ;	PutDateString
  2957                                  ;	PutDayString
  2958                                  ;	PutHourString
  2959                                  ;	PutMinuteString
  2960                                  ;	PutMonthString
  2961                                  ;	PutMonthNameString
  2962                                  ;	PutSecondString
  2963                                  ;	PutTimeString
  2964                                  ;	PutWeekdayString
  2965                                  ;	PutWeekdayNameString
  2966                                  ;	PutYearString
  2967                                  ;
  2968                                  ;=======================================================================================================================
  2969                                  ;-----------------------------------------------------------------------------------------------------------------------
  2970                                  ;
  2971                                  ;	Routine:	GetYear
  2972                                  ;
  2973                                  ;	Description:	Return the four-digit year (century * 100 + year of century)
  2974                                  ;
  2975                                  ;	In:		DS:EBX	DATETIME address
  2976                                  ;
  2977                                  ;	Out:		ECX	year
  2978                                  ;
  2979                                  ;-----------------------------------------------------------------------------------------------------------------------
  2980 000009EE 0FB64B07                GetYear			movzx	ecx,byte [ebx+DATETIME.century]			;century
  2981 000009F2 6BC964                  			imul	ecx,100						;century * 100
  2982 000009F5 0FB64306                			movzx	eax,byte [ebx+DATETIME.year]			;year of century
  2983 000009F9 01C1                    			add	ecx,eax						;year (YYYY)
  2984 000009FB C3                      			ret							;return
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ;
  2987                                  ;	Routine:	IsLeapYear
  2988                                  ;
  2989                                  ;	Description:	This routine returns an indicator if the current year is a leap year.
  2990                                  ;
  2991                                  ;	In:		DS:EBX	DATETIME ADDRESS
  2992                                  ;
  2993                                  ;	Out:		ECX	0 = not a leap year
  2994                                  ;				1 = leap year
  2995                                  ;
  2996                                  ;-----------------------------------------------------------------------------------------------------------------------
  2997 000009FC E8EDFFFFFF              IsLeapYear		call	GetYear						;ECX = YYYY
  2998 00000A01 89C8                    			mov	eax,ecx						;EAX = YYYY
  2999 00000A03 31C9                    			xor	ecx,ecx						;assume not leap year
  3000 00000A05 A803                    			test	al,00000011b					;multiple of four?
  3001 00000A07 750D                    			jnz	.no						;no, branch
  3002 00000A09 B264                    			mov	dl,100						;divisor
  3003 00000A0B F6F2                    			div	dl						;divide by 100
  3004 00000A0D 84E4                    			test	ah,ah						;multiple of 100?
  3005 00000A0F 7504                    			jnz	.yes						;yes, branch
  3006 00000A11 A803                    			test	al,00000011b					;multiple of 400?
  3007 00000A13 7501                    			jnz	.no						;no, branch
  3008 00000A15 41                      .yes			inc	ecx						;indicate leap
  3009 00000A16 C3                      .no			ret							;
  3010                                  ;-----------------------------------------------------------------------------------------------------------------------
  3011                                  ;
  3012                                  ;	Routine:	PutDateString
  3013                                  ;
  3014                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3015                                  ;			structure at ds:ebx.
  3016                                  ;
  3017                                  ;	In:		DS:EBX	DATETIME address
  3018                                  ;			DS:EDX	output buffer address
  3019                                  ;
  3020                                  ;-----------------------------------------------------------------------------------------------------------------------
  3021 00000A17 51                      PutDateString		push	ecx						;save non-volatile regs
  3022 00000A18 57                      			push	edi						;
  3023 00000A19 06                      			push	es						;
  3024 00000A1A 1E                      			push	ds						;store data selector ...
  3025 00000A1B 07                      			pop	es						;... in extra segment reg
  3026 00000A1C 89D7                    			mov	edi,edx						;output buffer address
  3027 00000A1E B10A                    			mov	cl,10						;divisor
  3028 00000A20 BA30302F00              			mov	edx,0002F3030h					;ASCIIZ "00/" (reversed)
  3029 00000A25 0FB64305                			movzx	eax,byte [ebx+DATETIME.month]			;month
  3030 00000A29 F6F1                    			div	cl						;AH = rem; AL = quotient
  3031 00000A2B 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3032 00000A2D FC                      			cld							;forward strings
  3033 00000A2E AB                      			stosd							;store "mm/"nul
  3034 00000A2F 4F                      			dec	edi						;address of terminator
  3035 00000A30 0FB64304                			movzx	eax,byte [ebx+DATETIME.day]			;day
  3036 00000A34 F6F1                    			div	cl						;AH = rem; AL = quotient
  3037 00000A36 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3038 00000A38 AB                      			stosd							;store "dd/"nul
  3039 00000A39 4F                      			dec	edi						;address of terminator
  3040 00000A3A 0FB64307                			movzx	eax,byte [ebx+DATETIME.century]			;century
  3041 00000A3E F6F1                    			div	cl						;AH = rem; AL = quotient
  3042 00000A40 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3043 00000A42 AB                      			stosd							;store "cc/"null
  3044 00000A43 4F                      			dec	edi						;address of terminator
  3045 00000A44 4F                      			dec	edi						;address of delimiter
  3046 00000A45 0FB64306                			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  3047 00000A49 F6F1                    			div	cl						;AH = rem; AL = quotient
  3048 00000A4B 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3049 00000A4D AA                      			stosb							;store quotient
  3050 00000A4E 88E0                    			mov	al,ah						;remainder
  3051 00000A50 AA                      			stosb							;store remainder
  3052 00000A51 30C0                    			xor	al,al						;null terminator
  3053 00000A53 AA                      			stosb							;store terminator
  3054 00000A54 07                      			pop	es						;restore non-volatile regs
  3055 00000A55 5F                      			pop	edi						;
  3056 00000A56 59                      			pop	ecx						;
  3057 00000A57 C3                      			ret							;return
  3058                                  ;-----------------------------------------------------------------------------------------------------------------------
  3059                                  ;
  3060                                  ;	Routine:	PutDayString
  3061                                  ;
  3062                                  ;	Description:	This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3063                                  ;			structure at ds:ebx.
  3064                                  ;
  3065                                  ;	In:		DS:EBX	DATETIME address
  3066                                  ;			DS:EDX	output buffer address
  3067                                  ;
  3068                                  ;-----------------------------------------------------------------------------------------------------------------------
  3069 00000A58 51                      PutDayString		push	ecx						;save non-volatile regs
  3070 00000A59 0FB64B04                			movzx	ecx,byte [ebx+DATETIME.day]			;day
  3071 00000A5D B701                    			mov	bh,1						;trim leading zeros; no commas
  3072 00000A5F E871040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3073 00000A64 59                      			pop	ecx						;
  3074 00000A65 C3                      			ret							;return
  3075                                  ;-----------------------------------------------------------------------------------------------------------------------
  3076                                  ;
  3077                                  ;	Routine:	PutHourString
  3078                                  ;
  3079                                  ;	Description:	This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3080                                  ;			structure at ds:ebx.
  3081                                  ;
  3082                                  ;	In:		DS:EBX	DATETIME address
  3083                                  ;			DS:EDX	output buffer address
  3084                                  ;
  3085                                  ;-----------------------------------------------------------------------------------------------------------------------
  3086 00000A66 51                      PutHourString		push	ecx						;save non-volatile regs
  3087 00000A67 0FB64B02                			movzx	ecx,byte [ebx+DATETIME.hour]			;hour
  3088 00000A6B B701                    			mov	bh,1						;trim leading zeros; no commas
  3089 00000A6D E863040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3090 00000A72 59                      			pop	ecx						;
  3091 00000A73 C3                      			ret							;return
  3092                                  ;-----------------------------------------------------------------------------------------------------------------------
  3093                                  ;
  3094                                  ;	Routine:	PutMinuteString
  3095                                  ;
  3096                                  ;	Description:	This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3097                                  ;			structure at ds:ebx.
  3098                                  ;
  3099                                  ;	In:		DS:EBX	DATETIME address
  3100                                  ;			DS:EDX	output buffer address
  3101                                  ;
  3102                                  ;-----------------------------------------------------------------------------------------------------------------------
  3103 00000A74 51                      PutMinuteString		push	ecx						;save non-volatile regs
  3104 00000A75 0FB64B01                			movzx	ecx,byte [ebx+DATETIME.minute]			;minute
  3105 00000A79 B701                    			mov	bh,1						;trim leading zeros; no commas
  3106 00000A7B E855040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3107 00000A80 59                      			pop	ecx						;
  3108 00000A81 C3                      			ret							;return
  3109                                  ;-----------------------------------------------------------------------------------------------------------------------
  3110                                  ;
  3111                                  ;	Routine:	PutMonthString
  3112                                  ;
  3113                                  ;	Description:	This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3114                                  ;			structure at ds:ebx.
  3115                                  ;
  3116                                  ;	In:		DS:EBX	DATETIME address
  3117                                  ;			DS:EDX	output buffer address
  3118                                  ;
  3119                                  ;-----------------------------------------------------------------------------------------------------------------------
  3120 00000A82 51                      PutMonthString		push	ecx						;save non-volatile regs
  3121 00000A83 0FB64B05                			movzx	ecx,byte [ebx+DATETIME.month]			;month
  3122 00000A87 B701                    			mov	bh,1						;trim leading zeros; no commas
  3123 00000A89 E847040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3124 00000A8E 59                      			pop	ecx						;
  3125 00000A8F C3                      			ret							;return
  3126                                  ;-----------------------------------------------------------------------------------------------------------------------
  3127                                  ;
  3128                                  ;	Routine:	PutMonthNameString
  3129                                  ;
  3130                                  ;	Description:	This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3131                                  ;			structure at ds:ebx.
  3132                                  ;
  3133                                  ;	In:		DS:EBX	DATETIME address
  3134                                  ;			DS:EDX	output buffer address
  3135                                  ;
  3136                                  ;-----------------------------------------------------------------------------------------------------------------------
  3137 00000A90 56                      PutMonthNameString	push	esi						;save non-volatile regs
  3138 00000A91 57                      			push	edi						;
  3139 00000A92 1E                      			push	ds						;
  3140 00000A93 06                      			push	es						;
  3141 00000A94 1E                      			push	ds						;load data selector ...
  3142 00000A95 07                      			pop	es						;... into extra segment
  3143 00000A96 89D7                    			mov	edi,edx						;output buffer address
  3144 00000A98 0FB64305                			movzx	eax,byte [ebx+DATETIME.month]			;month (1-12)
  3145 00000A9C 48                      			dec	eax						;month (0-11)
  3146 00000A9D C1E002                  			shl	eax,2						;offset into month name lookup table
  3147 00000AA0 0E                      			push	cs						;load code selector ...
  3148 00000AA1 1F                      			pop	ds						;... into data segment
  3149 00000AA2 8BB0[E40B0000]          			mov	esi,[tMonthNames+eax]				;month name address
  3150 00000AA8 FC                      			cld							;forward strings
  3151 00000AA9 AC                      .10			lodsb							;name character
  3152 00000AAA AA                      			stosb							;store in output buffer
  3153 00000AAB 84C0                    			test	al,al						;end of string?
  3154 00000AAD 75FA                    			jnz	.10						;no, continue
  3155 00000AAF 07                      			pop	es						;restore non-volatile regs
  3156 00000AB0 1F                      			pop	ds						;
  3157 00000AB1 5F                      			pop	edi						;
  3158 00000AB2 5E                      			pop	esi						;
  3159 00000AB3 C3                      			ret							;return
  3160                                  ;-----------------------------------------------------------------------------------------------------------------------
  3161                                  ;
  3162                                  ;	Routine:	PutSecondString
  3163                                  ;
  3164                                  ;	Description:	This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3165                                  ;			structure at ds:ebx.
  3166                                  ;
  3167                                  ;	In:		DS:EBX	DATETIME address
  3168                                  ;			DS:EDX	output buffer address
  3169                                  ;
  3170                                  ;-----------------------------------------------------------------------------------------------------------------------
  3171 00000AB4 51                      PutSecondString		push	ecx						;save non-volatile regs
  3172 00000AB5 0FB60B                  			movzx	ecx,byte [ebx+DATETIME.second]			;second
  3173 00000AB8 B701                    			mov	bh,1						;trim leading zeros; no commas
  3174 00000ABA E816040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3175 00000ABF 59                      			pop	ecx						;
  3176 00000AC0 C3                      			ret							;return
  3177                                  ;-----------------------------------------------------------------------------------------------------------------------
  3178                                  ;
  3179                                  ;	Routine:	PutTimeString
  3180                                  ;
  3181                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3182                                  ;			structure at ds:ebx.
  3183                                  ;
  3184                                  ;	In:		DS:EBX	DATETIME address
  3185                                  ;			DS:EDX	output buffer address
  3186                                  ;
  3187                                  ;-----------------------------------------------------------------------------------------------------------------------
  3188 00000AC1 51                      PutTimeString		push	ecx						;save non-volatile regs
  3189 00000AC2 57                      			push	edi						;
  3190 00000AC3 06                      			push	es						;
  3191 00000AC4 1E                      			push	ds						;store data selector ...
  3192 00000AC5 07                      			pop	es						;... in extra segment reg
  3193 00000AC6 89D7                    			mov	edi,edx						;output buffer address
  3194 00000AC8 B10A                    			mov	cl,10						;divisor
  3195 00000ACA BA30303A00              			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  3196 00000ACF 0FB64302                			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  3197 00000AD3 F6F1                    			div	cl						;ah = rem; al = quotient
  3198 00000AD5 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3199 00000AD7 FC                      			cld							;forward strings
  3200 00000AD8 AB                      			stosd							;store "mm/"nul
  3201 00000AD9 4F                      			dec	edi						;address of terminator
  3202 00000ADA 0FB64301                			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  3203 00000ADE F6F1                    			div	cl						;ah = rem; al = quotient
  3204 00000AE0 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3205 00000AE2 AB                      			stosd							;store "dd/"nul
  3206 00000AE3 4F                      			dec	edi						;address of terminator
  3207 00000AE4 0FB603                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  3208 00000AE7 F6F1                    			div	cl						;ah = rem; al = quotient
  3209 00000AE9 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3210 00000AEB AA                      			stosb							;store quotient
  3211 00000AEC 88E0                    			mov	al,ah						;remainder
  3212 00000AEE AA                      			stosb							;store remainder
  3213 00000AEF 30C0                    			xor	al,al						;null terminator
  3214 00000AF1 AA                      			stosb							;store terminator
  3215 00000AF2 07                      			pop	es						;restore non-volatile regs
  3216 00000AF3 5F                      			pop	edi						;
  3217 00000AF4 59                      			pop	ecx						;
  3218 00000AF5 C3                      			ret							;return
  3219                                  ;-----------------------------------------------------------------------------------------------------------------------
  3220                                  ;
  3221                                  ;	Routine:	PutWeekdayString
  3222                                  ;
  3223                                  ;	Description:	This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3224                                  ;			structure at ds:ebx.
  3225                                  ;
  3226                                  ;	In:		DS:EBX	DATETIME address
  3227                                  ;			DS:EDX	output buffer address
  3228                                  ;
  3229                                  ;-----------------------------------------------------------------------------------------------------------------------
  3230 00000AF6 51                      PutWeekdayString	push	ecx						;save non-volatile regs
  3231 00000AF7 0FB64B03                			movzx	ecx,byte [ebx+DATETIME.weekday]			;weekday
  3232 00000AFB B701                    			mov	bh,1						;trim leading zeros; no commas
  3233 00000AFD E8D3030000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3234 00000B02 59                      			pop	ecx						;
  3235 00000B03 C3                      			ret							;return
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237                                  ;
  3238                                  ;	Routine:	PutWeekdayNameString
  3239                                  ;
  3240                                  ;	Description:	This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3241                                  ;			structure at ds:ebx.
  3242                                  ;
  3243                                  ;	In:		DS:EBX	DATETIME address
  3244                                  ;			DS:EDX	output buffer address
  3245                                  ;
  3246                                  ;-----------------------------------------------------------------------------------------------------------------------
  3247 00000B04 56                      PutWeekdayNameString	push	esi						;save non-volatile regs
  3248 00000B05 57                      			push	edi						;
  3249 00000B06 1E                      			push	ds						;
  3250 00000B07 06                      			push	es						;
  3251 00000B08 1E                      			push	ds						;load data selector ...
  3252 00000B09 07                      			pop	es						;... into extra segment
  3253 00000B0A 89D7                    			mov	edi,edx						;output buffer address
  3254 00000B0C 0FB64303                			movzx	eax,byte [ebx+DATETIME.weekday]			;weekday (0-6)
  3255 00000B10 C1E002                  			shl	eax,2						;offset into day name lookup table
  3256 00000B13 0E                      			push	cs						;load code selector ...
  3257 00000B14 1F                      			pop	ds						;... into data segment
  3258 00000B15 8BB0[C80B0000]          			mov	esi,[tDayNames+eax]				;day name address
  3259 00000B1B FC                      			cld							;forward strings
  3260 00000B1C AC                      .10			lodsb							;name character
  3261 00000B1D AA                      			stosb							;store in output buffer
  3262 00000B1E 84C0                    			test	al,al						;end of string?
  3263 00000B20 75FA                    			jnz	.10						;no, continue
  3264 00000B22 07                      			pop	es						;restore non-volatile regs
  3265 00000B23 1F                      			pop	ds						;
  3266 00000B24 5F                      			pop	edi						;
  3267 00000B25 5E                      			pop	esi						;
  3268 00000B26 C3                      			ret							;return
  3269                                  ;-----------------------------------------------------------------------------------------------------------------------
  3270                                  ;
  3271                                  ;	Routine:	PutYearString
  3272                                  ;
  3273                                  ;	Description:	This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3274                                  ;			structure at ds:ebx.
  3275                                  ;
  3276                                  ;	In:		DS:EBX	DATETIME address
  3277                                  ;			DS:EDX	output buffer address
  3278                                  ;
  3279                                  ;-----------------------------------------------------------------------------------------------------------------------
  3280 00000B27 51                      PutYearString		push	ecx						;save non-volatile regs
  3281 00000B28 E8C1FEFFFF              			call	GetYear						;ECX = YYYY
  3282 00000B2D B701                    			mov	bh,1						;trim leading zeros; no commas
  3283 00000B2F E8A1030000              			call	UnsignedToDecimalString				;store decimal string at DS:EDX
  3284 00000B34 59                      			pop	ecx						;restore non-volatile regs
  3285 00000B35 C3                      			ret							;return
  3286                                  ;-----------------------------------------------------------------------------------------------------------------------
  3287                                  ;
  3288                                  ;	Day Names
  3289                                  ;
  3290                                  ;-----------------------------------------------------------------------------------------------------------------------
  3291 00000B36 53756E64617900          czSunday		db	"Sunday",0
  3292 00000B3D 4D6F6E64617900          czMonday		db	"Monday",0
  3293 00000B44 5475657364617900        czTuesday		db	"Tuesday",0
  3294 00000B4C 5765646E6573646179-     czWednesday		db	"Wednesday",0
  3294 00000B55 00                 
  3295 00000B56 546875727364617900      czThursday		db	"Thursday",0
  3296 00000B5F 46726964617900          czFriday		db	"Friday",0
  3297 00000B66 536174757264617900      czSaturday		db	"Saturday",0
  3298                                  ;-----------------------------------------------------------------------------------------------------------------------
  3299                                  ;
  3300                                  ;	Month Names
  3301                                  ;
  3302                                  ;-----------------------------------------------------------------------------------------------------------------------
  3303 00000B6F 4A616E7561727900        czJanuary		db	"January",0
  3304 00000B77 466562727561727900      czFebruary		db	"February",0
  3305 00000B80 4D6172636800            czMarch			db	"March",0
  3306 00000B86 417072696C00            czApril			db	"April",0
  3307 00000B8C 4D617900                czMay			db	"May",0
  3308 00000B90 4A756E6500              czJune			db	"June",0
  3309 00000B95 4A756C7900              czJuly			db	"July",0
  3310 00000B9A 41756775737400          czAugust		db	"August",0
  3311 00000BA1 53657074656D626572-     czSeptember		db	"September",0
  3311 00000BAA 00                 
  3312 00000BAB 4F63746F62657200        czOctober		db	"October",0
  3313 00000BB3 4E6F76656D62657200      czNovember		db	"November",0
  3314 00000BBC 446563656D62657200      czDecember		db	"December",0
  3315                                  ;-----------------------------------------------------------------------------------------------------------------------
  3316                                  ;
  3317                                  ;	Day Names Lookup Table
  3318                                  ;
  3319                                  ;-----------------------------------------------------------------------------------------------------------------------
  3320 00000BC5 90<rept>                			align	4
  3321                                  tDayNames		equ	$
  3322 00000BC8 [360B0000]              			dd	czSunday
  3323 00000BCC [3D0B0000]              			dd	czMonday
  3324 00000BD0 [440B0000]              			dd	czTuesday
  3325 00000BD4 [4C0B0000]              			dd	czWednesday
  3326 00000BD8 [560B0000]              			dd	czThursday
  3327 00000BDC [5F0B0000]              			dd	czFriday
  3328 00000BE0 [660B0000]              			dd	czSaturday
  3329                                  EDAYNAMESTBLL		equ	($-tDayNames)
  3330                                  EDAYNAMESTBLCNT		equ	EDAYNAMESTBLL/4
  3331                                  ;-----------------------------------------------------------------------------------------------------------------------
  3332                                  ;
  3333                                  ;	Month Names Lookup Table
  3334                                  ;
  3335                                  ;-----------------------------------------------------------------------------------------------------------------------
  3336                                  			align	4
  3337                                  tMonthNames		equ	$
  3338 00000BE4 [6F0B0000]              			dd	czJanuary
  3339 00000BE8 [770B0000]              			dd	czFebruary
  3340 00000BEC [800B0000]              			dd	czMarch
  3341 00000BF0 [860B0000]              			dd	czApril
  3342 00000BF4 [8C0B0000]              			dd	czMay
  3343 00000BF8 [900B0000]              			dd	czJune
  3344 00000BFC [950B0000]              			dd	czJuly
  3345 00000C00 [9A0B0000]              			dd	czAugust
  3346 00000C04 [A10B0000]              			dd	czSeptember
  3347 00000C08 [AB0B0000]              			dd	czOctober
  3348 00000C0C [B30B0000]              			dd	czNovember
  3349 00000C10 [BC0B0000]              			dd	czDecember
  3350                                  EMONTHNAMESTBLL		equ	($-tMonthNames)
  3351                                  EMONTHNAMESTBLCNT	equ	EMONTHNAMESTBLL/4
  3352                                  ;=======================================================================================================================
  3353                                  ;
  3354                                  ;	String Helper Routines
  3355                                  ;
  3356                                  ;	UpperCaseString
  3357                                  ;	CompareMemory
  3358                                  ;	CopyMemory
  3359                                  ;
  3360                                  ;=======================================================================================================================
  3361                                  ;-----------------------------------------------------------------------------------------------------------------------
  3362                                  ;
  3363                                  ;	Routine:	UpperCaseString
  3364                                  ;
  3365                                  ;	Description:	This routine places all characters in the given string to upper case.
  3366                                  ;
  3367                                  ;	In:		DS:EDX	string address
  3368                                  ;
  3369                                  ;	Out:		EDX	string address
  3370                                  ;
  3371                                  ;-----------------------------------------------------------------------------------------------------------------------
  3372 00000C14 56                      UpperCaseString		push	esi						;save non-volatile regs
  3373 00000C15 89D6                    			mov	esi,edx						;string address
  3374 00000C17 FC                      			cld							;forward strings
  3375 00000C18 AC                      .10			lodsb							;string character
  3376 00000C19 84C0                    			test	al,al						;null?
  3377 00000C1B 740F                    			jz	.20						;yes, skip ahead
  3378 00000C1D 3C61                    			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  3379 00000C1F 72F7                    			jb	.10						;no, continue
  3380 00000C21 3C7A                    			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  3381 00000C23 77F3                    			ja	.10						;no, continue
  3382 00000C25 24DF                    			and	al,EASCIICASEMASK				;mask for upper case
  3383 00000C27 8846FF                  			mov	[esi-1],al					;upper character
  3384 00000C2A EBEC                    			jmp	.10						;continue
  3385 00000C2C 5E                      .20			pop	esi						;restore non-volatile regs
  3386 00000C2D C3                      			ret							;return
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388                                  ;
  3389                                  ;	Routine:	CompareMemory
  3390                                  ;
  3391                                  ;	Description:	This routine compares two byte arrays.
  3392                                  ;
  3393                                  ;	In:		DS:EDX	first source address
  3394                                  ;			DS:EBX	second source address
  3395                                  ;			ECX	comparison length
  3396                                  ;
  3397                                  ;	Out:		EDX	first source address
  3398                                  ;			EBX	second source address
  3399                                  ;			ECX	0	array 1 = array 2
  3400                                  ;				<0	array 1 < array 2
  3401                                  ;				>0	array 1 > array 2
  3402                                  ;
  3403                                  ;-----------------------------------------------------------------------------------------------------------------------
  3404 00000C2E 56                      CompareMemory		push	esi						;save non-volatile regs
  3405 00000C2F 57                      			push	edi						;
  3406 00000C30 06                      			push	es						;
  3407 00000C31 1E                      			push	ds						;copy DS
  3408 00000C32 07                      			pop	es						;... to ES
  3409 00000C33 89D6                    			mov	esi,edx						;first source address
  3410 00000C35 89DF                    			mov	edi,ebx						;second source address
  3411 00000C37 FC                      			cld							;forward strings
  3412 00000C38 F3A6                    			rep	cmpsb						;compare bytes
  3413 00000C3A B000                    			mov	al,0						;default result
  3414 00000C3C 7406                    			jz	.10						;branch if arrays equal
  3415 00000C3E B001                    			mov	al,1						;positive result
  3416 00000C40 7302                    			jnc	.10						;branch if target > source
  3417 00000C42 B0FF                    			mov	al,-1						;negative result
  3418 00000C44 0FBEC8                  .10			movsx	ecx,al						;extend sign
  3419 00000C47 07                      			pop	es						;restore non-volatile regs
  3420 00000C48 5F                      			pop	edi						;
  3421 00000C49 5E                      			pop	esi						;
  3422 00000C4A C3                      			ret							;return
  3423                                  ;-----------------------------------------------------------------------------------------------------------------------
  3424                                  ;
  3425                                  ;	Routine:	CopyMemory
  3426                                  ;
  3427                                  ;	Description:	This routine copies a byte array.
  3428                                  ;
  3429                                  ;	In:		DS:EDX	first source address
  3430                                  ;			DS:EBX	second source address
  3431                                  ;			ECX	copy length
  3432                                  ;
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434 00000C4B 51                      CopyMemory		push	ecx						;save non-volatile regs
  3435 00000C4C 56                      			push	esi						;
  3436 00000C4D 57                      			push	edi						;
  3437 00000C4E 06                      			push	es						;
  3438                                  ;
  3439                                  ;	Compare byte array
  3440                                  ;
  3441 00000C4F 1E                      			push	ds						;load data selector
  3442 00000C50 07                      			pop	es						;... into ES register
  3443 00000C51 89D6                    			mov	esi,edx						;first source address
  3444 00000C53 89DF                    			mov	edi,ebx						;second source address
  3445 00000C55 FC                      			cld							;forward strings
  3446 00000C56 F3A4                    			rep	movsb						;copy bytes
  3447                                  ;
  3448                                  ;	Restore and return
  3449                                  ;
  3450 00000C58 07                      			pop	es						;restore non-volatile regs
  3451 00000C59 5F                      			pop	edi						;
  3452 00000C5A 5E                      			pop	esi						;
  3453 00000C5B 59                      			pop	ecx						;
  3454 00000C5C C3                      			ret							;return
  3455                                  ;=======================================================================================================================
  3456                                  ;
  3457                                  ;	Console Helper Routines
  3458                                  ;
  3459                                  ;	PutConsoleString
  3460                                  ;	GetConsoleString
  3461                                  ;	GetConsoleChar
  3462                                  ;	Yield
  3463                                  ;	PreviousConsoleColumn
  3464                                  ;	NextConsoleColumn
  3465                                  ;	FirstConsoleColumn
  3466                                  ;	NextConsoleRow
  3467                                  ;	PutConsoleChar
  3468                                  ;	PutConsoleOIAShift
  3469                                  ;	PutConsoleOIAChar
  3470                                  ;	PutConsoleHexByte
  3471                                  ;
  3472                                  ;=======================================================================================================================
  3473                                  ;-----------------------------------------------------------------------------------------------------------------------
  3474                                  ;
  3475                                  ;	Routine:	PutConsoleString
  3476                                  ;
  3477                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  3478                                  ;			console position as needed.
  3479                                  ;
  3480                                  ;	In:		EDX	source address
  3481                                  ;			DS	OS data selector
  3482                                  ;
  3483                                  ;-----------------------------------------------------------------------------------------------------------------------
  3484 00000C5D 56                      PutConsoleString	push	esi						;save non-volatile regs
  3485 00000C5E 89D6                    			mov	esi,edx						;source address
  3486 00000C60 FC                      			cld							;forward strings
  3487 00000C61 AC                      .10			lodsb							;ASCII character
  3488 00000C62 08C0                    			or	al,al						;end of string?
  3489 00000C64 7422                    			jz	.40						;yes, skip ahead
  3490 00000C66 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  3491 00000C68 7507                    			jne	.20						;no, skip ahead
  3492 00000C6A E8EB000000              			call	FirstConsoleColumn				;move to start of row
  3493 00000C6F EBF0                    			jmp	.10						;next character
  3494 00000C71 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  3495 00000C73 7507                    			jne	.30						;no, skip ahead
  3496 00000C75 E8E8000000              			call	NextConsoleRow					;move to next row
  3497 00000C7A EBE5                    			jmp	.10						;next character
  3498 00000C7C E803010000              .30			call	PutConsoleChar					;output character to console
  3499 00000C81 E8B9000000              			call	NextConsoleColumn				;advance to next column
  3500 00000C86 EBD9                    			jmp	.10						;next character
  3501 00000C88 5E                      .40			pop	esi						;restore non-volatile regs
  3502 00000C89 C3                      			ret							;return
  3503                                  ;-----------------------------------------------------------------------------------------------------------------------
  3504                                  ;
  3505                                  ;	Routine:	GetConsoleString
  3506                                  ;
  3507                                  ;	Description:	This routine accepts keyboard input into a buffer.
  3508                                  ;
  3509                                  ;	In:		DS:EDX	target buffer address
  3510                                  ;			ECX	maximum number of characters to accept
  3511                                  ;			BH	echo to terminal
  3512                                  ;			BL	terminating character
  3513                                  ;
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515 00000C8A 51                      GetConsoleString	push	ecx						;save non-volatile regs
  3516 00000C8B 56                      			push	esi						;
  3517 00000C8C 57                      			push	edi						;
  3518 00000C8D 06                      			push	es						;
  3519 00000C8E 1E                      			push	ds						;load data segment selector ...
  3520 00000C8F 07                      			pop	es						;... into extra segment register
  3521 00000C90 89D7                    			mov	edi,edx						;edi = target buffer
  3522 00000C92 51                      			push	ecx						;save maximum characters
  3523 00000C93 30C0                    			xor	al,al						;zero register
  3524 00000C95 FC                      			cld							;forward strings
  3525 00000C96 F3AA                    			rep	stosb						;zero fill buffer
  3526 00000C98 59                      			pop	ecx						;maximum characters
  3527 00000C99 89D7                    			mov	edi,edx						;edi = target buffer
  3528 00000C9B 89D6                    			mov	esi,edx						;esi = target buffer
  3529 00000C9D E34E                    .10			jecxz	.50						;exit if max-length is zero
  3530 00000C9F E856000000              .20			call	GetConsoleChar					;al = next input char
  3531 00000CA4 38D8                    			cmp	al,bl						;is this the terminator?
  3532 00000CA6 7445                    			je	.50						;yes, exit
  3533 00000CA8 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  3534 00000CAA 7521                    			jne	.30						;no, skip ahead
  3535 00000CAC 39FE                    			cmp	esi,edi						;at start of buffer?
  3536 00000CAE 74EF                    			je	.20						;yes, get next character
  3537 00000CB0 4F                      			dec	edi						;backup target pointer
  3538 00000CB1 C60700                  			mov	byte [edi],0					;zero previous character
  3539 00000CB4 41                      			inc	ecx						;increment remaining chars
  3540 00000CB5 F6C701                  			test	bh,1						;echo to console?
  3541 00000CB8 74E5                    			jz	.20						;no, get next character
  3542 00000CBA E85B000000              			call	PreviousConsoleColumn				;backup console position
  3543 00000CBF B020                    			mov	al,EASCIISPACE					;ASCII space
  3544 00000CC1 E8BE000000              			call	PutConsoleChar					;write space to console
  3545 00000CC6 E8D5030000              			call	PlaceCursor					;position the cursor
  3546 00000CCB EBD2                    			jmp	.20						;get next character
  3547 00000CCD 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  3548 00000CCF 72CE                    			jb	.20						;no, get another character
  3549 00000CD1 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  3550 00000CD3 77CA                    			ja	.20						;no, get another character
  3551 00000CD5 AA                      			stosb							;store character in buffer
  3552 00000CD6 F6C701                  			test	bh,1						;echo to console?
  3553 00000CD9 740F                    			jz	.40						;no, skip ahead
  3554 00000CDB E8A4000000              			call	PutConsoleChar					;write character to console
  3555 00000CE0 E85A000000              			call	NextConsoleColumn				;advance console position
  3556 00000CE5 E8B6030000              			call	PlaceCursor					;position the cursor
  3557 00000CEA 49                      .40			dec	ecx						;decrement remaining chars
  3558 00000CEB EBB0                    			jmp	.10						;next
  3559 00000CED 30C0                    .50			xor	al,al						;null
  3560 00000CEF AA                      			stosb							;terminate buffer
  3561 00000CF0 07                      			pop	es						;restore non-volatile regs
  3562 00000CF1 5F                      			pop	edi						;
  3563 00000CF2 5E                      			pop	esi						;
  3564 00000CF3 59                      			pop	ecx						;
  3565 00000CF4 C3                      			ret							;return
  3566                                  ;-----------------------------------------------------------------------------------------------------------------------
  3567                                  ;
  3568                                  ;	Routine:	GetConsoleChar
  3569                                  ;
  3570                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  3571                                  ;
  3572                                  ;	Out:		AL	ASCII character code
  3573                                  ;			AH	keyboard scan code
  3574                                  ;
  3575                                  ;-----------------------------------------------------------------------------------------------------------------------
  3576 00000CF5 E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  3577 00000CFA E8DF020000              GetConsoleChar		call	GetMessage					;get the next message
  3578 00000CFF 09C0                    			or	eax,eax						;do we have a message?
  3579 00000D01 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  3580 00000D03 50                      			push	eax						;save key codes
  3581 00000D04 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  3582 00000D09 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  3583 00000D0E 58                      			pop	eax						;restore key codes
  3584 00000D0F 75E9                    			jne	GetConsoleChar					;no, try again
  3585 00000D11 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  3586 00000D16 C3                      			ret							;return
  3587                                  ;-----------------------------------------------------------------------------------------------------------------------
  3588                                  ;
  3589                                  ;	Routine:	Yield
  3590                                  ;
  3591                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  3592                                  ;
  3593                                  ;-----------------------------------------------------------------------------------------------------------------------
  3594 00000D17 FB                      Yield			sti							;enable maskagle interrupts
  3595 00000D18 F4                      			hlt							;halt until external interrupt
  3596 00000D19 C3                      			ret							;return
  3597                                  ;-----------------------------------------------------------------------------------------------------------------------
  3598                                  ;
  3599                                  ;	Routine:	PreviousConsoleColumn
  3600                                  ;
  3601                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3602                                  ;			the column is set to the last position in the row and the row is decremented.
  3603                                  ;
  3604                                  ;	In:		DS	OS data selector
  3605                                  ;
  3606                                  ;-----------------------------------------------------------------------------------------------------------------------
  3607 00000D1A A00C0A0000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  3608 00000D1F 08C0                    			or	al,al						;start of row?
  3609 00000D21 7514                    			jnz	.10						;no, skip ahead
  3610 00000D23 8A250D0A0000            			mov	ah,[wbConsoleRow]				;current row
  3611 00000D29 08E4                    			or	ah,ah						;top of screen?
  3612 00000D2B 7411                    			jz	.20						;yes, exit with no change
  3613 00000D2D FECC                    			dec	ah						;decrement row
  3614 00000D2F 88250D0A0000            			mov	[wbConsoleRow],ah				;save row
  3615 00000D35 B050                    			mov	al,ECONCOLS					;set maximum column
  3616 00000D37 FEC8                    .10			dec	al						;decrement column
  3617 00000D39 A20C0A0000              			mov	[wbConsoleColumn],al				;save column
  3618 00000D3E C3                      .20			ret							;return
  3619                                  ;-----------------------------------------------------------------------------------------------------------------------
  3620                                  ;
  3621                                  ;	Routine:	NextConsoleColumn
  3622                                  ;
  3623                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  3624                                  ;			incremented if the end of the current row is reached.
  3625                                  ;
  3626                                  ;	In:		DS	OS data selector
  3627                                  ;
  3628                                  ;-----------------------------------------------------------------------------------------------------------------------
  3629 00000D3F A00C0A0000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  3630 00000D44 FEC0                    			inc	al						;increment column
  3631 00000D46 A20C0A0000              			mov	[wbConsoleColumn],al				;save column
  3632 00000D4B 3C50                    			cmp	al,ECONCOLS					;end of row?
  3633 00000D4D 720A                    			jb	.10						;no, skip ahead
  3634 00000D4F E806000000              			call	FirstConsoleColumn				;reset column to start of row
  3635 00000D54 E809000000              			call	NextConsoleRow					;line feed to next row
  3636 00000D59 C3                      .10			ret							;return
  3637                                  ;-----------------------------------------------------------------------------------------------------------------------
  3638                                  ;
  3639                                  ;	Routine:	FirstConsoleColumn
  3640                                  ;
  3641                                  ;	Description:	This routine resets the console column to start of the row.
  3642                                  ;
  3643                                  ;	In:		DS	OS data selector
  3644                                  ;
  3645                                  ;-----------------------------------------------------------------------------------------------------------------------
  3646 00000D5A 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  3647 00000D5C A20C0A0000              			mov	[wbConsoleColumn],al				;save column
  3648 00000D61 C3                      			ret							;return
  3649                                  ;-----------------------------------------------------------------------------------------------------------------------
  3650                                  ;
  3651                                  ;	Routine:	NextConsoleRow
  3652                                  ;
  3653                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  3654                                  ;
  3655                                  ;	In:		DS	OS data selector
  3656                                  ;
  3657                                  ;-----------------------------------------------------------------------------------------------------------------------
  3658 00000D62 A00D0A0000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  3659 00000D67 FEC0                    			inc	al						;increment row
  3660 00000D69 A20D0A0000              			mov	[wbConsoleRow],al				;save row
  3661 00000D6E 3C18                    			cmp	al,ECONROWS					;end of screen?
  3662 00000D70 7211                    			jb	.10						;no, skip ahead
  3663 00000D72 E8D7020000              			call	ScrollConsoleRow				;scroll up one row
  3664 00000D77 A00D0A0000              			mov	al,[wbConsoleRow]				;row
  3665 00000D7C FEC8                    			dec	al						;decrement row
  3666 00000D7E A20D0A0000              			mov	[wbConsoleRow],al				;save row
  3667 00000D83 C3                      .10			ret							;return
  3668                                  ;-----------------------------------------------------------------------------------------------------------------------
  3669                                  ;
  3670                                  ;	Routine:	PutConsoleChar
  3671                                  ;
  3672                                  ;	Description:	This routine writes one ASCII character to the console screen.
  3673                                  ;
  3674                                  ;	In:		AL	ASCII character
  3675                                  ;			DS	OS data selector
  3676                                  ;
  3677                                  ;-----------------------------------------------------------------------------------------------------------------------
  3678 00000D84 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  3679 00000D85 06                      			push	es						;
  3680 00000D86 6A20                    			push	ESELCGA						;load CGA selector ...
  3681 00000D88 07                      			pop	es						;... into extra segment reg
  3682 00000D89 8A0D0C0A0000            			mov	cl,[wbConsoleColumn]				;column
  3683 00000D8F 8A2D0D0A0000            			mov	ch,[wbConsoleRow]				;row
  3684 00000D95 E8F0020000              			call	SetConsoleChar					;put character at row, column
  3685 00000D9A 07                      			pop	es						;restore non-volatile regs
  3686 00000D9B 59                      			pop	ecx						;
  3687 00000D9C C3                      			ret							;return
  3688                                  ;-----------------------------------------------------------------------------------------------------------------------
  3689                                  ;
  3690                                  ;	Routine:	PutConsoleOIAShift
  3691                                  ;
  3692                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3693                                  ;
  3694                                  ;	In:		BL	shift flags
  3695                                  ;			BH	lock flags
  3696                                  ;			DS	OS data selector
  3697                                  ;
  3698                                  ;-----------------------------------------------------------------------------------------------------------------------
  3699 00000D9D 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  3700 00000D9E 06                      			push	es						;
  3701 00000D9F 6A20                    			push	ESELCGA						;load CGA selector ...
  3702 00000DA1 07                      			pop	es						;... into ES register
  3703 00000DA2 B518                    			mov	ch,ECONOIAROW					;OIA row
  3704 00000DA4 B020                    			mov	al,EASCIISPACE					;space is default character
  3705 00000DA6 F6C302                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  3706 00000DA9 7402                    			jz	.10						;no, skip ahead
  3707 00000DAB B053                    			mov	al,'S'						;yes, indicate with 'S'
  3708 00000DAD B10E                    .10			mov	cl,14						;indicator column
  3709 00000DAF E8D6020000              			call	SetConsoleChar					;display ASCII character
  3710 00000DB4 B020                    			mov	al,EASCIISPACE					;ASCII space
  3711 00000DB6 F6C310                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  3712 00000DB9 7402                    			jz	.20						;no, skip ahead
  3713 00000DBB B053                    			mov	al,'S'						;yes, indicate with 'S'
  3714 00000DBD B140                    .20			mov	cl,64						;indicator column
  3715 00000DBF E8C6020000              			call	SetConsoleChar					;display ASCII character
  3716 00000DC4 B020                    			mov	al,EASCIISPACE					;ASCII space
  3717 00000DC6 F6C301                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  3718 00000DC9 7402                    			jz	.30						;no, skip ahead
  3719 00000DCB B043                    			mov	al,'C'						;yes, indicate with 'C'
  3720 00000DCD B10F                    .30			mov	cl,15						;indicator column
  3721 00000DCF E8B6020000              			call	SetConsoleChar					;display ASCII character
  3722 00000DD4 B020                    			mov	al,EASCIISPACE					;ASCII space
  3723 00000DD6 F6C308                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  3724 00000DD9 7402                    			jz	.40						;no, skip ahead
  3725 00000DDB B043                    			mov	al,'C'						;yes, indicate with 'C'
  3726 00000DDD B13F                    .40			mov	cl,63						;indicator column
  3727 00000DDF E8A6020000              			call	SetConsoleChar					;display ASCII character
  3728 00000DE4 B020                    			mov	al,EASCIISPACE					;ASCII space
  3729 00000DE6 F6C304                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  3730 00000DE9 7402                    			jz	.50						;no, skip ahead
  3731 00000DEB B041                    			mov	al,'A'						;yes, indicate with 'A'
  3732 00000DED B110                    .50			mov	cl,16						;indicator column
  3733 00000DEF E896020000              			call	SetConsoleChar					;display ASCII character
  3734 00000DF4 B020                    			mov	al,EASCIISPACE					;ASCII space
  3735 00000DF6 F6C320                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  3736 00000DF9 7402                    			jz	.60						;no, skip ahead
  3737 00000DFB B041                    			mov	al,'A'						;yes, indicate with 'A'
  3738 00000DFD B13E                    .60			mov	cl,62						;indicator column
  3739 00000DFF E886020000              			call	SetConsoleChar					;display ASCII character
  3740 00000E04 B020                    			mov	al,EASCIISPACE					;ASCII space
  3741 00000E06 F6C704                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  3742 00000E09 7402                    			jz	.70						;no, skip ahead
  3743 00000E0B B043                    			mov	al,'C'						;yes, indicate with 'C'
  3744 00000E0D B14E                    .70			mov	cl,78						;indicator column
  3745 00000E0F E876020000              			call	SetConsoleChar					;display ASCII character
  3746 00000E14 B020                    			mov	al,EASCIISPACE					;ASCII space
  3747 00000E16 F6C702                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  3748 00000E19 7402                    			jz	.80						;no, skip ahead
  3749 00000E1B B04E                    			mov	al,'N'						;yes, indicate with 'N'
  3750 00000E1D B14D                    .80			mov	cl,77						;indicator column
  3751 00000E1F E866020000              			call	SetConsoleChar					;display ASCII character
  3752 00000E24 B020                    			mov	al,EASCIISPACE					;ASCII space
  3753 00000E26 F6C701                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  3754 00000E29 7402                    			jz	.90						;no, skip ahead
  3755 00000E2B B053                    			mov	al,'S'						;yes, indicate with 'S'
  3756 00000E2D B14C                    .90			mov	cl,76						;indicator column
  3757 00000E2F E856020000              			call	SetConsoleChar					;display ASCII character
  3758 00000E34 07                      			pop	es						;restore non-volatile regs
  3759 00000E35 59                      			pop	ecx						;
  3760 00000E36 C3                      			ret							;return
  3761                                  ;-----------------------------------------------------------------------------------------------------------------------
  3762                                  ;
  3763                                  ;	Routine:	PutConsoleOIAChar
  3764                                  ;
  3765                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  3766                                  ;
  3767                                  ;	In:		DS	OS data selector
  3768                                  ;
  3769                                  ;-----------------------------------------------------------------------------------------------------------------------
  3770 00000E37 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  3771 00000E38 51                      			push	ecx						;
  3772 00000E39 56                      			push	esi						;
  3773 00000E3A 1E                      			push	ds						;
  3774 00000E3B 06                      			push	es						;
  3775 00000E3C 6A18                    			push	ESELDAT						;load OS data selector ...
  3776 00000E3E 1F                      			pop	ds						;... into data segment register
  3777 00000E3F 6A20                    			push	ESELCGA						;load CGA selector ...
  3778 00000E41 07                      			pop	es						;... into extra segment register
  3779 00000E42 BE110A0000              			mov	esi,wbConsoleScan0				;scan codes address
  3780 00000E47 B718                    			mov	bh,ECONOIAROW					;OIA row
  3781 00000E49 B300                    			mov	bl,0						;starting column
  3782 00000E4B B906000000              			mov	ecx,6						;maximum scan codes
  3783 00000E50 51                      .10			push	ecx						;save remaining count
  3784 00000E51 89D9                    			mov	ecx,ebx						;row, column
  3785 00000E53 AC                      			lodsb							;read scan code
  3786 00000E54 08C0                    			or	al,al						;scan code present?
  3787 00000E56 7407                    			jz	.20						;no, skip ahead
  3788 00000E58 E852000000              			call	PutConsoleHexByte				;display scan code
  3789 00000E5D EB0E                    			jmp	.30						;continue
  3790 00000E5F B020                    .20			mov	al,' '						;ASCII space
  3791 00000E61 E824020000              			call	SetConsoleChar					;display space
  3792 00000E66 B020                    			mov	al,' '						;ASCII space
  3793 00000E68 E81D020000              			call	SetConsoleChar					;display space
  3794 00000E6D 80C302                  .30			add	bl,2						;next column (+2)
  3795 00000E70 59                      			pop	ecx						;restore remaining
  3796 00000E71 E2DD                    			loop	.10						;next code
  3797 00000E73 A0170A0000              			mov	al,[wbConsoleChar]				;console ASCII character
  3798 00000E78 3C20                    			cmp	al,32						;printable? (lower-bounds)
  3799 00000E7A 720D                    			jb	.40						;no, skip ahead
  3800 00000E7C 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  3801 00000E7E 7709                    			ja	.40						;no, skip ahead
  3802 00000E80 88FD                    			mov	ch,bh						;OIA row
  3803 00000E82 B128                    			mov	cl,40						;character display column
  3804 00000E84 E801020000              			call	SetConsoleChar					;display ASCII character
  3805 00000E89 07                      .40			pop	es						;restore non-volatile regs
  3806 00000E8A 1F                      			pop	ds						;
  3807 00000E8B 5E                      			pop	esi						;
  3808 00000E8C 59                      			pop	ecx						;
  3809 00000E8D 5B                      			pop	ebx						;
  3810 00000E8E C3                      			ret							;return
  3811                                  ;-----------------------------------------------------------------------------------------------------------------------
  3812                                  ;
  3813                                  ;	Routine:	PutConsoleHexDword
  3814                                  ;
  3815                                  ;	Description:	This routine writes eight ASCII characters to the console representing a doubleword value.
  3816                                  ;
  3817                                  ;	In:		EAX	value
  3818                                  ;			CL	column
  3819                                  ;			CH	row
  3820                                  ;			DS	OS data selector
  3821                                  ;			ES	CGA selector
  3822                                  ;
  3823                                  ;-----------------------------------------------------------------------------------------------------------------------
  3824 00000E8F 50                      PutConsoleHexDword	push	eax
  3825 00000E90 C1E810                  			shr	eax,16
  3826 00000E93 E807000000              			call	PutConsoleHexWord
  3827 00000E98 58                      			pop	eax
  3828 00000E99 E801000000              			call	PutConsoleHexWord
  3829 00000E9E C3                      			ret
  3830                                  ;-----------------------------------------------------------------------------------------------------------------------
  3831                                  ;
  3832                                  ;	Routine:	PutConsoleHexWord
  3833                                  ;
  3834                                  ;	Description:	This routine writes four ASCII characters to the console representing a word value.
  3835                                  ;
  3836                                  ;	In:		EAX	value
  3837                                  ;			CL	column
  3838                                  ;			CH	row
  3839                                  ;			DS	OS data selector
  3840                                  ;			ES	CGA selector
  3841                                  ;
  3842                                  ;-----------------------------------------------------------------------------------------------------------------------
  3843 00000E9F 50                      PutConsoleHexWord	push	eax
  3844 00000EA0 C1E808                  			shr	eax,8
  3845 00000EA3 E807000000              			call	PutConsoleHexByte
  3846 00000EA8 58                      			pop	eax
  3847 00000EA9 E801000000              			call	PutConsoleHexByte
  3848 00000EAE C3                      			ret
  3849                                  ;-----------------------------------------------------------------------------------------------------------------------
  3850                                  ;
  3851                                  ;	Routine:	PutConsoleHexByte
  3852                                  ;
  3853                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  3854                                  ;
  3855                                  ;	In:		AL	byte value
  3856                                  ;			CL	column
  3857                                  ;			CH	row
  3858                                  ;			DS	OS data selector
  3859                                  ;			ES	CGA selector
  3860                                  ;
  3861                                  ;-----------------------------------------------------------------------------------------------------------------------
  3862 00000EAF 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  3863 00000EB0 88C3                    			mov	bl,al						;save byte value
  3864 00000EB2 C0E804                  			shr	al,4						;hi-order nybble
  3865 00000EB5 0C30                    			or	al,030h						;apply ASCII zone
  3866 00000EB7 3C3A                    			cmp	al,03ah						;numeric?
  3867 00000EB9 7202                    			jb	.10						;yes, skip ahead
  3868 00000EBB 0407                    			add	al,7						;add ASCII offset for alpha
  3869 00000EBD E8C8010000              .10			call	SetConsoleChar					;display ASCII character
  3870 00000EC2 88D8                    			mov	al,bl						;byte value
  3871 00000EC4 240F                    			and	al,0fh						;lo-order nybble
  3872 00000EC6 0C30                    			or	al,30h						;apply ASCII zone
  3873 00000EC8 3C3A                    			cmp	al,03ah						;numeric?
  3874 00000ECA 7202                    			jb	.20						;yes, skip ahead
  3875 00000ECC 0407                    			add	al,7						;add ASCII offset for alpha
  3876 00000ECE E8B7010000              .20			call	SetConsoleChar					;display ASCII character
  3877 00000ED3 5B                      			pop	ebx						;restore non-volatile regs
  3878 00000ED4 C3                      			ret							;return
  3879                                  ;=======================================================================================================================
  3880                                  ;
  3881                                  ;	Data-Type Conversion Helper Routines
  3882                                  ;
  3883                                  ;	UnsignedToDecimalString
  3884                                  ;	UnsignedToHexadecimal
  3885                                  ;	HexadecimalToUnsigned
  3886                                  ;
  3887                                  ;=======================================================================================================================
  3888                                  ;-----------------------------------------------------------------------------------------------------------------------
  3889                                  ;
  3890                                  ;	Routine:	UnsignedToDecimalString
  3891                                  ;
  3892                                  ;	Description:	This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3893                                  ;
  3894                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  3895                                  ;						bit 1: 1 = include comma grouping delimiters
  3896                                  ;						bit 4: 1 = non-zero digit found (internal)
  3897                                  ;			ECX	32-bit binary
  3898                                  ;			DS:EDX	output buffer address
  3899                                  ;
  3900                                  ;-----------------------------------------------------------------------------------------------------------------------
  3901 00000ED5 53                      UnsignedToDecimalString push	ebx						;save non-volatile regs
  3902 00000ED6 51                      			push	ecx						;
  3903 00000ED7 57                      			push	edi						;
  3904 00000ED8 06                      			push	es						;
  3905 00000ED9 1E                      			push	ds						;load data selector
  3906 00000EDA 07                      			pop	es						;... into extra segment reg
  3907 00000EDB 89D7                    			mov	edi,edx 					;output buffer address
  3908 00000EDD 80E70F                  			and	bh,00001111b					;zero internal flags
  3909 00000EE0 89CA                    			mov	edx,ecx 					;binary
  3910 00000EE2 B900CA9A3B              			mov	ecx,1000000000					;10^9 divisor
  3911 00000EE7 E871000000              			call	.30						;divide and store
  3912 00000EEC B900E1F505              			mov	ecx,100000000					;10^8 divisor
  3913 00000EF1 E855000000              			call	.10						;divide and store
  3914 00000EF6 B980969800              			mov	ecx,10000000					;10^7 divisor
  3915 00000EFB E85D000000              			call	.30						;divide and store
  3916 00000F00 B940420F00              			mov	ecx,1000000					;10^6 divisor
  3917 00000F05 E853000000              			call	.30						;divide and store
  3918 00000F0A B9A0860100              			mov	ecx,100000					;10^5 divisor
  3919 00000F0F E837000000              			call	.10						;divide and store
  3920 00000F14 B910270000              			mov	ecx,10000					;10^4 divisor
  3921 00000F19 E83F000000              			call	.30						;divide and store
  3922 00000F1E B9E8030000              			mov	ecx,1000					;10^3 divisor
  3923 00000F23 E835000000              			call	.30						;divide and store
  3924 00000F28 B964000000              			mov	ecx,100 					;10^2 divisor
  3925 00000F2D E819000000              			call	.10						;divide and store
  3926 00000F32 B90A000000              			mov	ecx,10						;10^2 divisor
  3927 00000F37 E821000000              			call	.30						;divide and store
  3928 00000F3C 89D0                    			mov	eax,edx 					;10^1 remainder
  3929 00000F3E E827000000              			call	.40						;store
  3930 00000F43 30C0                    			xor	al,al						;null terminator
  3931 00000F45 AA                      			stosb
  3932 00000F46 07                      			pop	es						;restore non-volatile regs
  3933 00000F47 5F                      			pop	edi						;
  3934 00000F48 59                      			pop	ecx						;
  3935 00000F49 5B                      			pop	ebx						;
  3936 00000F4A C3                      			ret							;return
  3937 00000F4B F6C702                  .10			test	bh,00000010b					;comma group delims?
  3938 00000F4E 740D                    			jz	.30						;no, branch
  3939 00000F50 F6C701                  			test	bh,00000001b					;trim leading zeros?
  3940 00000F53 7405                    			jz	.20						;no, store delim
  3941 00000F55 F6C710                  			test	bh,00010000b					;non-zero found?
  3942 00000F58 7403                    			jz	.30						;no, branch
  3943 00000F5A B02C                    .20			mov	al,','						;delimiter
  3944 00000F5C AA                      			stosb							;store delimiter
  3945 00000F5D 89D0                    .30			mov	eax,edx 					;lo-orer dividend
  3946 00000F5F 31D2                    			xor	edx,edx 					;zero hi-order
  3947 00000F61 F7F1                    			div	ecx						;divide by power of 10
  3948 00000F63 84C0                    			test	al,al						;zero?
  3949 00000F65 7407                    			jz	.50						;yes, branch
  3950 00000F67 80CF10                  			or	bh,00010000b					;non-zero found
  3951 00000F6A 0C30                    .40			or	al,30h						;ASCII zone
  3952 00000F6C AA                      			stosb							;store digit
  3953 00000F6D C3                      			ret							;return
  3954 00000F6E F6C701                  .50			test	bh,00000001b					;trim leading zeros?
  3955 00000F71 74F7                    			jz	.40						;no, store and continue
  3956 00000F73 F6C710                  			test	bh,00010000b					;non-zero found?
  3957 00000F76 75F2                    			jnz	.40						;yes, store and continue
  3958 00000F78 C3                      			ret							;return
  3959                                  ;-----------------------------------------------------------------------------------------------------------------------
  3960                                  ;
  3961                                  ;	Routine:	UnsignedToHexadecimal
  3962                                  ;
  3963                                  ;	Description:	This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3964                                  ;
  3965                                  ;	Input:		DS:EDX	output buffer address
  3966                                  ;			ECX	32-bit binary
  3967                                  ;
  3968                                  ;-----------------------------------------------------------------------------------------------------------------------
  3969 00000F79 57                      UnsignedToHexadecimal	push	edi						;store non-volatile regs
  3970 00000F7A 89D7                    			mov	edi,edx						;output buffer address
  3971 00000F7C 89CA                    			mov	edx,ecx						;32-bit unsigned
  3972 00000F7E 31C9                    			xor	ecx,ecx						;zero register
  3973 00000F80 B108                    			mov	cl,8						;nybble count
  3974 00000F82 C1C204                  .10			rol	edx,4						;next hi-order nybble in bits 0-3
  3975 00000F85 88D0                    			mov	al,dl						;????bbbb
  3976 00000F87 240F                    			and	al,0fh						;mask out bits 4-7
  3977 00000F89 0C30                    			or	al,30h						;mask in ascii zone
  3978 00000F8B 3C3A                    			cmp	al,3ah						;A through F?
  3979 00000F8D 7202                    			jb	.20						;no, skip ahead
  3980 00000F8F 0407                    			add	al,7						;41h through 46h
  3981 00000F91 AA                      .20			stosb							;store hexnum
  3982 00000F92 E2EE                    			loop	.10						;next nybble
  3983 00000F94 30C0                    			xor	al,al						;zero reg
  3984 00000F96 AA                      			stosb							;null terminate
  3985 00000F97 5F                      			pop	edi						;restore non-volatile regs
  3986 00000F98 C3                      			ret							;return
  3987                                  ;-----------------------------------------------------------------------------------------------------------------------
  3988                                  ;
  3989                                  ;	Routine:	HexadecimalToUnsigned
  3990                                  ;
  3991                                  ;	Description:	This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3992                                  ;
  3993                                  ;	Input:		DS:EDX	null-terminated hexadecimal string address
  3994                                  ;
  3995                                  ;	Output: 	EAX	unsigned integer value
  3996                                  ;
  3997                                  ;-----------------------------------------------------------------------------------------------------------------------
  3998 00000F99 56                      HexadecimalToUnsigned	push	esi						;save non-volatile regs
  3999 00000F9A 89D6                    			mov	esi,edx						;source address
  4000 00000F9C 31D2                    			xor	edx,edx						;zero register
  4001 00000F9E AC                      .10			lodsb							;source byte
  4002 00000F9F 84C0                    			test	al,al						;end of string?
  4003 00000FA1 7410                    			jz	.30						;yes, branch
  4004 00000FA3 3C39                    			cmp	al,'9'						;hexadecimal?
  4005 00000FA5 7602                    			jna	.20						;no, skip ahead
  4006 00000FA7 2C37                    			sub	al,37h						;'A' = 41h, less 37h = 0Ah
  4007 00000FA9 83E00F                  .20			and	eax,0fh						;remove ascii zone
  4008 00000FAC C1E204                  			shl	edx,4						;previous total x 16
  4009 00000FAF 01C2                    			add	edx,eax						;add prior value x 16
  4010 00000FB1 EBEB                    			jmp	.10						;next
  4011 00000FB3 89D0                    .30			mov	eax,edx						;result
  4012 00000FB5 5E                      			pop	esi						;restore non-volatile regs
  4013 00000FB6 C3                      			ret							;return
  4014                                  ;=======================================================================================================================
  4015                                  ;
  4016                                  ;	Message Queue Helper Routines
  4017                                  ;
  4018                                  ;	PutMessage
  4019                                  ;	GetMessage
  4020                                  ;
  4021                                  ;=======================================================================================================================
  4022                                  ;-----------------------------------------------------------------------------------------------------------------------
  4023                                  ;
  4024                                  ;	Routine:	PutMessage
  4025                                  ;
  4026                                  ;	Description:	This routine adda a message to the message queue.
  4027                                  ;
  4028                                  ;	In:		EAX	message queue selector
  4029                                  ;			ECX	hi-order data word
  4030                                  ;			EDX	lo-order data word
  4031                                  ;
  4032                                  ;	Out:		CY	0 = success
  4033                                  ;				1 = fail: queue is full
  4034                                  ;
  4035                                  ;-----------------------------------------------------------------------------------------------------------------------
  4036 00000FB7 1E                      PutMessage		push	ds						;save non-volatile regs
  4037 00000FB8 50                      			push	eax						;load task message queue selector ...
  4038 00000FB9 1F                      			pop	ds						;... into data segment register
  4039 00000FBA A104000000              			mov	eax,[MQTail]					;tail ptr
  4040 00000FBF 833800                  			cmp	dword [eax],0					;is queue full?
  4041 00000FC2 F9                      			stc							;assume failure
  4042 00000FC3 7517                    			jne	.20						;yes, cannot store
  4043 00000FC5 8910                    			mov	[eax],edx					;store lo-order data
  4044 00000FC7 894804                  			mov	[eax+4],ecx					;store hi-order data
  4045 00000FCA 83C008                  			add	eax,8						;next queue element adr
  4046 00000FCD 25FC030000              			and	eax,03fch					;at end of queue?
  4047 00000FD2 7502                    			jnz	.10						;no, skip ahead
  4048 00000FD4 B008                    			mov	al,8						;reset to top of queue
  4049 00000FD6 A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  4050 00000FDB F8                      			clc							;indicate success
  4051 00000FDC 1F                      .20			pop	ds						;restore non-volatile regs
  4052 00000FDD C3                      			ret							;return
  4053                                  ;-----------------------------------------------------------------------------------------------------------------------
  4054                                  ;
  4055                                  ;	Routine:	GetMessage
  4056                                  ;
  4057                                  ;	Description:	This routine reads and removes a message from the message queue.
  4058                                  ;
  4059                                  ;	Out:		EAX	lo-order message data
  4060                                  ;			EDX	hi-order message data
  4061                                  ;
  4062                                  ;			CY	0 = message read
  4063                                  ;				1 = no message to read
  4064                                  ;
  4065                                  ;-----------------------------------------------------------------------------------------------------------------------
  4066 00000FDE 53                      GetMessage		push	ebx						;save non-volatile regs
  4067 00000FDF 51                      			push	ecx						;
  4068 00000FE0 1E                      			push	ds						;
  4069 00000FE1 6A2C                    			push	ESELMQ						;load message queue selector ...
  4070 00000FE3 1F                      			pop	ds						;... into data segment register
  4071 00000FE4 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  4072 00000FEA 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  4073 00000FEC 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  4074 00000FEF 09D0                    			or	eax,edx						;is queue empty?
  4075 00000FF1 F9                      			stc							;assume queue is emtpy
  4076 00000FF2 741B                    			jz	.20						;yes, skip ahead
  4077 00000FF4 31C9                    			xor	ecx,ecx						;store zero
  4078 00000FF6 890B                    			mov	[ebx],ecx					;... in lo-order dword
  4079 00000FF8 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  4080 00000FFB 83C308                  			add	ebx,8						;next queue element
  4081 00000FFE 81E3FC030000            			and	ebx,03fch					;at end of queue?
  4082 00001004 7502                    			jnz	.10						;no, skip ahead
  4083 00001006 B308                    			mov	bl,8						;reset to 1st entry
  4084 00001008 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  4085 0000100E F8                      			clc							;indicate message read
  4086 0000100F 1F                      .20			pop	ds						;restore non-volatile regs
  4087 00001010 59                      			pop	ecx						;
  4088 00001011 5B                      			pop	ebx						;
  4089 00001012 C3                      			ret							;return
  4090                                  ;=======================================================================================================================
  4091                                  ;
  4092                                  ;	Memory-Mapped Video Routines
  4093                                  ;
  4094                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  4095                                  ;
  4096                                  ;	ClearConsoleScreen
  4097                                  ;	ScrollConsoleRow
  4098                                  ;	SetConsoleChar
  4099                                  ;
  4100                                  ;=======================================================================================================================
  4101                                  ;-----------------------------------------------------------------------------------------------------------------------
  4102                                  ;
  4103                                  ;	Routine:	ClearConsoleScreen
  4104                                  ;
  4105                                  ;	Description:	This routine clears the console (CGA) screen.
  4106                                  ;
  4107                                  ;-----------------------------------------------------------------------------------------------------------------------
  4108 00001013 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  4109 00001014 57                      			push	edi						;
  4110 00001015 1E                      			push	ds						;
  4111 00001016 06                      			push	es						;
  4112 00001017 6A18                    			push	ESELDAT						;load OS Data selector ...
  4113 00001019 1F                      			pop	ds						;... into DS register
  4114 0000101A 6A20                    			push	ESELCGA						;load CGA selector ...
  4115 0000101C 07                      			pop	es						;... into ES register
  4116 0000101D B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  4117 00001022 B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  4118 00001027 31FF                    			xor	edi,edi						;target offset
  4119 00001029 FC                      			cld							;forward strings
  4120 0000102A F3AB                    			rep	stosd						;reset screen body
  4121 0000102C B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  4122 00001031 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  4123 00001036 F3AB                    			rep	stosd						;reset OIA line
  4124 00001038 30C0                    			xor	al,al						;zero register
  4125 0000103A A20D0A0000              			mov	[wbConsoleRow],al				;reset console row
  4126 0000103F A20C0A0000              			mov	[wbConsoleColumn],al				;reset console column
  4127 00001044 E857000000              			call	PlaceCursor					;place cursor at current position
  4128 00001049 07                      			pop	es						;restore non-volatile regs
  4129 0000104A 1F                      			pop	ds						;
  4130 0000104B 5F                      			pop	edi						;
  4131 0000104C 59                      			pop	ecx						;
  4132 0000104D C3                      			ret							;return
  4133                                  ;-----------------------------------------------------------------------------------------------------------------------
  4134                                  ;
  4135                                  ;	Routine:	ScrollConsoleRow
  4136                                  ;
  4137                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  4138                                  ;
  4139                                  ;-----------------------------------------------------------------------------------------------------------------------
  4140 0000104E 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  4141 0000104F 56                      			push	esi						;
  4142 00001050 57                      			push	edi						;
  4143 00001051 1E                      			push	ds						;
  4144 00001052 06                      			push	es						;
  4145 00001053 6A20                    			push	ESELCGA						;load CGA video selector ...
  4146 00001055 1F                      			pop	ds						;... into DS
  4147 00001056 6A20                    			push	ESELCGA						;load CGA video selector ...
  4148 00001058 07                      			pop	es						;... into ES
  4149 00001059 B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  4150 0000105E BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  4151 00001063 31FF                    			xor	edi,edi						;edi = target (line 1)
  4152 00001065 FC                      			cld							;forward strings
  4153 00001066 F3A5                    			rep	movsd						;move 24 lines up
  4154 00001068 B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  4155 0000106D B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  4156 00001072 F3AB                    			rep	stosd						;clear bottom row
  4157 00001074 07                      			pop	es						;restore non-volatile regs
  4158 00001075 1F                      			pop	ds						;
  4159 00001076 5F                      			pop	edi						;
  4160 00001077 5E                      			pop	esi						;
  4161 00001078 59                      			pop	ecx						;
  4162 00001079 C3                      			ret							;return
  4163                                  ;-----------------------------------------------------------------------------------------------------------------------
  4164                                  ;
  4165                                  ;	Routine:	SetConsoleString
  4166                                  ;
  4167                                  ;	Description:	This routine outputs a sequence of ASCII character at the given row and column.
  4168                                  ;
  4169                                  ;	In:		ESI	source offset (DS:)
  4170                                  ;			CL	column
  4171                                  ;			CH	row
  4172                                  ;			ES	CGA selector
  4173                                  ;
  4174                                  ;-----------------------------------------------------------------------------------------------------------------------
  4175 0000107A 56                      SetConsoleString	push	esi						;save non-volatile regs
  4176 0000107B FC                      			cld							;forward strings
  4177 0000107C AC                      .10			lodsb							;next ASCII character
  4178 0000107D 84C0                    			test	al,al						;end of string?
  4179 0000107F 7407                    			jz	.20						;yes, branch
  4180 00001081 E804000000              			call	SetConsoleChar					;store character
  4181 00001086 EBF4                    			jmp	.10						;continue
  4182 00001088 5E                      .20			pop	esi						;restore non-volatile regs
  4183 00001089 C3                      			ret							;return
  4184                                  ;-----------------------------------------------------------------------------------------------------------------------
  4185                                  ;
  4186                                  ;	Routine:	SetConsoleChar
  4187                                  ;
  4188                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  4189                                  ;
  4190                                  ;	In:		AL	ASCII character
  4191                                  ;			CL	column
  4192                                  ;			CH	row
  4193                                  ;			ES	CGA selector
  4194                                  ;
  4195                                  ;	Out:		EAX	last target address written (ES:)
  4196                                  ;			CL	column + 1
  4197                                  ;
  4198                                  ;-----------------------------------------------------------------------------------------------------------------------
  4199 0000108A 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  4200 0000108C 0FB6C5                  			movzx	eax,ch						;row
  4201 0000108F B450                    			mov	ah,ECONCOLS					;cols/row
  4202 00001091 F6E4                    			mul	ah						;row * cols/row
  4203 00001093 00C8                    			add	al,cl						;add column
  4204 00001095 80D400                  			adc	ah,0						;handle carry
  4205 00001098 D1E0                    			shl	eax,1						;screen offset
  4206 0000109A 268810                  			mov	[es:eax],dl					;store character
  4207 0000109D FEC1                    			inc	cl						;next column
  4208 0000109F C3                      			ret							;return
  4209                                  ;=======================================================================================================================
  4210                                  ;
  4211                                  ;	Input/Output Routines
  4212                                  ;
  4213                                  ;	These routines read and/or write directly to ports.
  4214                                  ;
  4215                                  ;	PlaceCursor
  4216                                  ;	PutPrimaryEndOfInt
  4217                                  ;	PutSecondaryEndOfInt
  4218                                  ;	ReadRealTimeClock
  4219                                  ;	ResetSystem
  4220                                  ;	SetKeyboardLamps
  4221                                  ;	WaitForKeyInBuffer
  4222                                  ;	WaitForKeyOutBuffer
  4223                                  ;
  4224                                  ;=======================================================================================================================
  4225                                  ;-----------------------------------------------------------------------------------------------------------------------
  4226                                  ;
  4227                                  ;	Routine:	PlaceCursor
  4228                                  ;
  4229                                  ;	Description:	This routine positions the cursor on the console.
  4230                                  ;
  4231                                  ;	In:		DS	OS data selector
  4232                                  ;
  4233                                  ;-----------------------------------------------------------------------------------------------------------------------
  4234 000010A0 51                      PlaceCursor		push	ecx						;save non-volatile regs
  4235 000010A1 A00D0A0000              			mov	al,[wbConsoleRow]				;al = row
  4236 000010A6 B450                    			mov	ah,ECONCOLS					;ah = cols/row
  4237 000010A8 F6E4                    			mul	ah						;row offset
  4238 000010AA 02050C0A0000            			add	al,[wbConsoleColumn]				;add column
  4239 000010B0 80D400                  			adc	ah,0						;add overflow
  4240 000010B3 89C1                    			mov	ecx,eax						;screen offset
  4241 000010B5 B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  4242 000010B7 B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  4243 000010B9 B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  4244 000010BB EE                      			out	dx,al						;select register
  4245 000010BC 42                      			inc	edx						;data port
  4246 000010BD 88E8                    			mov	al,ch						;hi-order cursor loc
  4247 000010BF EE                      			out	dx,al						;store hi-order loc
  4248 000010C0 4A                      			dec	edx						;register select port
  4249 000010C1 B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  4250 000010C3 EE                      			out	dx,al						;select register
  4251 000010C4 42                      			inc	edx						;data port
  4252 000010C5 88C8                    			mov	al,cl						;lo-order cursor loc
  4253 000010C7 EE                      			out	dx,al						;store lo-order loc
  4254 000010C8 59                      			pop	ecx						;restore non-volatile regs
  4255 000010C9 C3                      			ret							;return
  4256                                  ;-----------------------------------------------------------------------------------------------------------------------
  4257                                  ;
  4258                                  ;	Routine:	PutPrimaryEndOfInt
  4259                                  ;
  4260                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4261                                  ;
  4262                                  ;-----------------------------------------------------------------------------------------------------------------------
  4263 000010CA FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  4264 000010CB B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  4265 000010CD E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  4266 000010CF C3                      			ret							;return
  4267                                  ;-----------------------------------------------------------------------------------------------------------------------
  4268                                  ;
  4269                                  ;	Routine:	PutSecondaryEndOfInt
  4270                                  ;
  4271                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4272                                  ;
  4273                                  ;-----------------------------------------------------------------------------------------------------------------------
  4274 000010D0 FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  4275 000010D1 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  4276 000010D3 E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  4277 000010D5 C3                      			ret							;return
  4278                                  ;-----------------------------------------------------------------------------------------------------------------------
  4279                                  ;
  4280                                  ;	Routine:	ReadRealTimeClock
  4281                                  ;
  4282                                  ;	Description:	This routine gets current date time from the real-time clock.
  4283                                  ;
  4284                                  ;	In:		DS:EBX	DATETIME structure
  4285                                  ;
  4286                                  ;-----------------------------------------------------------------------------------------------------------------------
  4287 000010D6 56                      ReadRealTimeClock	push	esi						;save non-volatile regs
  4288 000010D7 57                      			push	edi						;
  4289 000010D8 06                      			push	es						;
  4290 000010D9 1E                      			push	ds						;store data selector ...
  4291 000010DA 07                      			pop	es						;... in es register
  4292 000010DB 89DF                    			mov	edi,ebx						;date-time structure
  4293 000010DD B000                    			mov	al,ERTCSECONDREG				;second register
  4294 000010DF E670                    			out	ERTCREGPORT,al					;select second register
  4295 000010E1 E471                    			in	al,ERTCDATAPORT					;read second register
  4296 000010E3 FC                      			cld							;forward strings
  4297 000010E4 AA                      			stosb							;store second value
  4298 000010E5 B002                    			mov	al,ERTCMINUTEREG				;minute register
  4299 000010E7 E670                    			out	ERTCREGPORT,al					;select minute register
  4300 000010E9 E471                    			in	al,ERTCDATAPORT					;read minute register
  4301 000010EB AA                      			stosb							;store minute value
  4302 000010EC B004                    			mov	al,ERTCHOURREG					;hour register
  4303 000010EE E670                    			out	ERTCREGPORT,al					;select hour register
  4304 000010F0 E471                    			in	al,ERTCDATAPORT					;read hour register
  4305 000010F2 AA                      			stosb							;store hour value
  4306 000010F3 B006                    			mov	al,ERTCWEEKDAYREG				;weekday register
  4307 000010F5 E670                    			out	ERTCREGPORT,al					;select weekday register
  4308 000010F7 E471                    			in	al,ERTCDATAPORT					;read weekday register
  4309 000010F9 AA                      			stosb							;store weekday value
  4310 000010FA B007                    			mov	al,ERTCDAYREG					;day register
  4311 000010FC E670                    			out	ERTCREGPORT,al					;select day register
  4312 000010FE E471                    			in	al,ERTCDATAPORT					;read day register
  4313 00001100 AA                      			stosb							;store day value
  4314 00001101 B008                    			mov	al,ERTCMONTHREG					;month register
  4315 00001103 E670                    			out	ERTCREGPORT,al					;select month register
  4316 00001105 E471                    			in	al,ERTCDATAPORT					;read month register
  4317 00001107 AA                      			stosb							;store month value
  4318 00001108 B009                    			mov	al,ERTCYEARREG					;year register
  4319 0000110A E670                    			out	ERTCREGPORT,al					;select year register
  4320 0000110C E471                    			in	al,ERTCDATAPORT					;read year register
  4321 0000110E AA                      			stosb							;store year value
  4322 0000110F B032                    			mov	al,ERTCCENTURYREG				;century register
  4323 00001111 E670                    			out	ERTCREGPORT,al					;select century register
  4324 00001113 E471                    			in	al,ERTCDATAPORT					;read century register
  4325 00001115 AA                      			stosb							;store century value
  4326 00001116 B00B                    			mov	al,ERTCSTATUSREG				;status register
  4327 00001118 E670                    			out	ERTCREGPORT,al					;select status register
  4328 0000111A E471                    			in	al,ERTCDATAPORT					;read status register
  4329 0000111C A804                    			test	al,ERTCBINARYVALS				;test if values are binary
  4330 0000111E 751D                    			jnz	.20						;skip ahead if binary values
  4331 00001120 89DE                    			mov	esi,ebx						;date-time structure address
  4332 00001122 89DF                    			mov	edi,ebx						;date-time structure address
  4333 00001124 B908000000              			mov	ecx,8						;loop counter
  4334 00001129 AC                      .10			lodsb							;BCD value
  4335 0000112A 88C4                    			mov	ah,al						;BCD value
  4336 0000112C 240F                    			and	al,00001111b					;low-order decimal zone
  4337 0000112E 80E4F0                  			and	ah,11110000b					;hi-order decimal zone
  4338 00001131 D0EC                    			shr	ah,1						;hi-order decimal * 8
  4339 00001133 00E0                    			add	al,ah						;low-order + hi-order * 8
  4340 00001135 C0EC02                  			shr	ah,2						;hi-order decimal * 2
  4341 00001138 00E0                    			add	al,ah						;low-order + hi-order * 10
  4342 0000113A AA                      			stosb							;replace BCD with binary
  4343 0000113B E2EC                    			loop	.10						;next value
  4344 0000113D 07                      .20			pop	es						;restore non-volatile regs
  4345 0000113E 5F                      			pop	edi						;
  4346 0000113F 5E                      			pop	esi						;
  4347 00001140 C3                      			ret							;return
  4348                                  ;-----------------------------------------------------------------------------------------------------------------------
  4349                                  ;
  4350                                  ;	Routine:	ResetSystem
  4351                                  ;
  4352                                  ;	Description:	This routine restarts the system using the 8042 controller.
  4353                                  ;
  4354                                  ;	Out:		N/A	This routine does not return.
  4355                                  ;
  4356                                  ;-----------------------------------------------------------------------------------------------------------------------
  4357 00001141 B9FFFF1F00              ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  4358 00001146 E2FE                    			loop	$						;clear interrupts
  4359 00001148 B0FE                    			mov	al,EKEYBCMDRESET				;mask out bit zero
  4360 0000114A E664                    			out	EKEYBPORTSTAT,al				;drive bit zero low
  4361 0000114C FB                      .10			sti							;enable maskable interrupts
  4362 0000114D F4                      			hlt							;halt until interrupt
  4363 0000114E EBFC                    			jmp	.10						;repeat until reset kicks in
  4364                                  ;-----------------------------------------------------------------------------------------------------------------------
  4365                                  ;
  4366                                  ;	Routine:	SetKeyboardLamps
  4367                                  ;
  4368                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  4369                                  ;
  4370                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4371                                  ;
  4372                                  ;-----------------------------------------------------------------------------------------------------------------------
  4373 00001150 E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  4374 00001155 B0ED                    			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  4375 00001157 E660                    			out	EKEYBPORTDATA,al				;send command to 8042
  4376 00001159 E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  4377 0000115E E460                    			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  4378 00001160 E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  4379 00001165 88F8                    			mov	al,bh						;set/reset lamps value
  4380 00001167 E660                    			out	EKEYBPORTDATA,al				;send lamps value
  4381 00001169 E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  4382 0000116E E460                    			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  4383 00001170 C3                      			ret							;return
  4384                                  ;-----------------------------------------------------------------------------------------------------------------------
  4385                                  ;
  4386                                  ;	Routine:	WaitForKeyInBuffer
  4387                                  ;
  4388                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  4389                                  ;
  4390                                  ;	Out:		ZF	1 = Input buffer ready
  4391                                  ;				0 = Input buffer not ready after timeout
  4392                                  ;
  4393                                  ;-----------------------------------------------------------------------------------------------------------------------
  4394 00001171 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  4395 00001172 B900000100              			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  4396 00001177 E464                    .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  4397 00001179 A802                    			test	al,EKEYBBITIN					;is input buffer still full?
  4398 0000117B E0FA                    			loopnz	.10						;yes, repeat till timeout
  4399 0000117D 59                      			pop	ecx						;restore non-volatile regs
  4400 0000117E C3                      			ret							;return
  4401                                  ;-----------------------------------------------------------------------------------------------------------------------
  4402                                  ;
  4403                                  ;	Routine:	WaitForKeyOutBuffer
  4404                                  ;
  4405                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  4406                                  ;
  4407                                  ;	Out:		ZF	1 = Output buffer has data from controller
  4408                                  ;				0 = Output buffer empty after timeout
  4409                                  ;
  4410                                  ;-----------------------------------------------------------------------------------------------------------------------
  4411 0000117F 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  4412 00001180 B900000100              			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  4413 00001185 E464                    .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  4414 00001187 A801                    			test	al,EKEYBBITOUT					;output buffer status bit
  4415 00001189 E1FA                    			loopz	.10						;loop until output buffer bit
  4416 0000118B 59                      			pop	ecx						;restore non-volatile regs
  4417 0000118C C3                      			ret							;return
  4418                                  ;-----------------------------------------------------------------------------------------------------------------------
  4419                                  ;
  4420                                  ;	End of the Kernel Function Library
  4421                                  ;
  4422                                  ;-----------------------------------------------------------------------------------------------------------------------
  4423 0000118D 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  4424 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  4425                                  ;=======================================================================================================================
  4426                                  ;
  4427                                  ;	Console Task
  4428                                  ;
  4429                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4430                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4431                                  ;	screen and responds to user commands.
  4432                                  ;
  4433                                  ;=======================================================================================================================
  4434                                  ;-----------------------------------------------------------------------------------------------------------------------
  4435                                  ;
  4436                                  ;	Console Stack								@disk: 007400	@mem:  004000
  4437                                  ;
  4438                                  ;	This is the stack for the console task. It supports 448 nested calls.
  4439                                  ;
  4440                                  ;-----------------------------------------------------------------------------------------------------------------------
  4441                                  section			constack						;console task stack
  4442 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  4443                                  ;-----------------------------------------------------------------------------------------------------------------------
  4444                                  ;
  4445                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  4446                                  ;
  4447                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4448                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4449                                  ;	16 descriptors. Six are initially defined.
  4450                                  ;
  4451                                  ;-----------------------------------------------------------------------------------------------------------------------
  4452                                  section			conldt							;console local descriptors
  4453 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  4454 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  4455 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  4456 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  4457 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  4458 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  4459 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  4460                                  ;-----------------------------------------------------------------------------------------------------------------------
  4461                                  ;
  4462                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  4463                                  ;
  4464                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4465                                  ;	segment. CS to console code.
  4466                                  ;
  4467                                  ;-----------------------------------------------------------------------------------------------------------------------
  4468                                  section			contss							;console task state segment
  4469 00000000 00000000                			dd	0						;00 back-link tss
  4470 00000004 00070000                			dd	0700h						;04 esp ring 0
  4471 00000008 14000000                			dd	0014h						;08 ss ring 0
  4472 0000000C 00070000                			dd	0700h						;0C esp ring 1
  4473 00000010 14000000                			dd	0014h						;10 es ring 1
  4474 00000014 00070000                			dd	0700h						;14 esp ring 2
  4475 00000018 14000000                			dd	0014h						;18 ss ring 2
  4476 0000001C 00000000                			dd	0						;1C cr ring 3
  4477 00000020 00000000                			dd	0						;20 eip
  4478 00000024 00020000                			dd	0200h						;24 eflags
  4479 00000028 00000000                			dd	0						;28 eax
  4480 0000002C 00000000                			dd	0						;2C ecx
  4481 00000030 00000000                			dd	0						;30 edx
  4482 00000034 00000000                			dd	0						;34 ebx
  4483 00000038 00070000                			dd	0700h						;38 esp ring 3
  4484 0000003C 00000000                			dd	0						;3C ebp
  4485 00000040 00000000                			dd	0						;40 esi
  4486 00000044 00000000                			dd	0						;44 edi
  4487 00000048 1C000000                			dd	001Ch						;48 es
  4488 0000004C 24000000                			dd	0024h						;4C cs
  4489 00000050 14000000                			dd	0014h						;50 ss ring 3
  4490 00000054 1C000000                			dd	001Ch						;54 ds
  4491 00000058 00000000                			dd	0						;58 fs
  4492 0000005C 00000000                			dd	0						;5c gs
  4493 00000060 60000000                			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  4494 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  4495                                  ;-----------------------------------------------------------------------------------------------------------------------
  4496                                  ;
  4497                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  4498                                  ;
  4499                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4500                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4501                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4502                                  ;	event.
  4503                                  ;
  4504                                  ;-----------------------------------------------------------------------------------------------------------------------
  4505                                  section			conmque							;console message queue
  4506 00000000 08000000                			dd	8						;head pointer
  4507 00000004 08000000                			dd	8						;tail pointer
  4508 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  4509                                  ;-----------------------------------------------------------------------------------------------------------------------
  4510                                  ;
  4511                                  ;	Console Code								@disk: 008400	@mem: 005000
  4512                                  ;
  4513                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4514                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4515                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4516                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4517                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4518                                  ;	board input, echoing to the console screen and responding to user commands.
  4519                                  ;
  4520                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  4521                                  ;
  4522                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  4523                                  ;				|  Real Mode Interrupt Vectors			|
  4524                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  4525                                  ;				|  Reserved BIOS Memory Area			|
  4526                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  4527                                  ;				|  Shared Kernel Memory Area			|
  4528                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  4529                                  ;				|  Global Descriptor Table (GDT)		|
  4530                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  4531                                  ;				|  Interrupt Descriptor Table (IDT)		|
  4532                                  ;			002000	+-----------------------------------------------+
  4533                                  ;				|  Interrupt Handlers				|
  4534                                  ;				|  Kernel Function Library			|
  4535                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  4536                                  ;				|  Console Task Stack Area			|
  4537                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  4538                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  4539                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  4540                                  ;				|  Console Task Task State Segment (TSS)	|
  4541                                  ;			004800	+-----------------------------------------------+
  4542                                  ;				|  Console Task Message Queue			|
  4543                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  4544                                  ;				|  Console Task Code				|
  4545                                  ;				|  Console Task Constants			|
  4546                                  ;			006000	+===============================================+
  4547                                  ;
  4548                                  ;-----------------------------------------------------------------------------------------------------------------------
  4549                                  section			concode	vstart=05000h					;labels relative to 5000h
  4550 00000000 E874000000              ConCode			call	ConInitializeData				;initialize console variables
  4551                                  
  4552                                  			clearConsoleScreen					;clear the console screen
  4552 00000005 B000                <1>  mov al,eClearConsoleScreen
  4552 00000007 CD30                <1>  int _svc
  4553                                  			putConsoleString czTitle				;display startup message
  4553 00000009 BA[A0040000]        <1>  mov edx,%1
  4553 0000000E B007                <1>  mov al,ePutConsoleString
  4553 00000010 CD30                <1>  int _svc
  4554                                  .10			putConsoleString czPrompt				;display input prompt
  4554                              <1> .10 :
  4554 00000012 BA[9E040000]        <1>  mov edx,%1
  4554 00000017 B007                <1>  mov al,ePutConsoleString
  4554 00000019 CD30                <1>  int _svc
  4555                                  			placeCursor						;set CRT cursor location
  4555 0000001B B006                <1>  mov al,ePlaceCursor
  4555 0000001D CD30                <1>  int _svc
  4556                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  4556 0000001F BA180A0000          <1>  mov edx,%1
  4556 00000024 B94F000000          <1>  mov ecx,%2
  4556 00000029 B701                <1>  mov bh,%3
  4556 0000002B B30D                <1>  mov bl,%4
  4556 0000002D B003                <1>  mov al,eGetConsoleString
  4556 0000002F CD30                <1>  int _svc
  4557                                  			putConsoleString czNewLine				;newline
  4557 00000031 BA[9B040000]        <1>  mov edx,%1
  4557 00000036 B007                <1>  mov al,ePutConsoleString
  4557 00000038 CD30                <1>  int _svc
  4558                                  
  4559 0000003A C605680A000000          			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  4560 00000041 BA180A0000              			mov	edx,wzConsoleInBuffer				;console input buffer
  4561 00000046 BB680A0000              			mov	ebx,wzConsoleToken				;token buffer
  4562 0000004B E842000000              			call	ConTakeToken					;handle console input
  4563 00000050 BA680A0000              			mov	edx,wzConsoleToken				;token buffer
  4564 00000055 E866000000              			call	ConDetermineCommand				;determine command number
  4565 0000005A 83F816                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  4566 0000005D 720B                    			jb	.20						;yes, branch
  4567                                  
  4568                                  			putConsoleString czUnknownCommand			;display error message
  4568 0000005F BA[BE040000]        <1>  mov edx,%1
  4568 00000064 B007                <1>  mov al,ePutConsoleString
  4568 00000066 CD30                <1>  int _svc
  4569                                  
  4570 00000068 EBA8                    			jmp	.10						;next command
  4571 0000006A C1E002                  .20			shl	eax,2						;index into jump table
  4572 0000006D BA[9B030000]            			mov	edx,tConJmpTbl					;jump table base address
  4573 00000072 8B0402                  			mov	eax,[edx+eax]					;command handler routine address
  4574 00000075 FFD0                    			call	eax						;call command handler
  4575 00000077 EB99                    			jmp	.10						;next command
  4576                                  ;-----------------------------------------------------------------------------------------------------------------------
  4577                                  ;
  4578                                  ;	Routine:	ConInitializeData
  4579                                  ;
  4580                                  ;	Description:	This routine initializes console task variables.
  4581                                  ;
  4582                                  ;-----------------------------------------------------------------------------------------------------------------------
  4583 00000079 51                      ConInitializeData	push	ecx						;save non-volatile regs
  4584 0000007A 57                      			push	edi						;
  4585 0000007B 06                      			push	es						;
  4586                                  ;
  4587                                  ;	Initialize console work areas
  4588                                  ;
  4589 0000007C 6A18                    			push	ESELDAT						;load OS data selector ...
  4590 0000007E 07                      			pop	es						;... into extra segment register
  4591 0000007F BF080A0000              			mov	edi,ECONDATA					;OS console data address
  4592 00000084 30C0                    			xor	al,al						;initialization value
  4593 00000086 B908010000              			mov	ecx,ECONDATALEN					;size of OS console data
  4594 0000008B FC                      			cld							;forward strings
  4595 0000008C F3AA                    			rep	stosb						;initialize data
  4596                                  ;
  4597                                  ;	Restore and return
  4598                                  ;
  4599 0000008E 07                      			pop	es						;restore non-volatile regs
  4600 0000008F 5F                      			pop	edi						;
  4601 00000090 59                      			pop	ecx						;
  4602 00000091 C3                      			ret							;return
  4603                                  ;-----------------------------------------------------------------------------------------------------------------------
  4604                                  ;
  4605                                  ;	Routine:	ConTakeToken
  4606                                  ;
  4607                                  ;	Description:	This routine extracts the next token from the given source buffer.
  4608                                  ;
  4609                                  ;	In:		DS:EDX	source buffer address
  4610                                  ;			DS:EBX	target buffer address
  4611                                  ;
  4612                                  ;	Out:		DS:EDX	source buffer address
  4613                                  ;			DS:EBX	target buffer address
  4614                                  ;
  4615                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  4616                                  ;
  4617                                  ;-----------------------------------------------------------------------------------------------------------------------
  4618 00000092 56                      ConTakeToken		push	esi						;save non-volatile regs
  4619 00000093 57                      			push	edi						;
  4620 00000094 89D6                    			mov	esi,edx						;source buffer address
  4621 00000096 89DF                    			mov	edi,ebx						;target buffer address
  4622 00000098 FC                      			cld							;forward strings
  4623 00000099 AC                      .10			lodsb							;load byte
  4624 0000009A 3C20                    			cmp	al,EASCIISPACE					;space?
  4625 0000009C 74FB                    			je	.10						;yes, continue
  4626 0000009E 84C0                    			test	al,al						;end of line?
  4627 000000A0 7410                    			jz	.40						;yes, branch
  4628 000000A2 AA                      .20			stosb							;store byte
  4629 000000A3 AC                      			lodsb							;load byte
  4630 000000A4 84C0                    			test	al,al						;end of line?
  4631 000000A6 740A                    			jz	.40						;no, continue
  4632 000000A8 3C20                    			cmp	al,EASCIISPACE					;space?
  4633 000000AA 75F6                    			jne	.20						;no, continue
  4634 000000AC AC                      .30			lodsb							;load byte
  4635 000000AD 3C20                    			cmp	al,EASCIISPACE					;space?
  4636 000000AF 74FB                    			je	.30						;yes, continue
  4637 000000B1 4E                      			dec	esi						;pre-position
  4638 000000B2 C60700                  .40			mov	byte [edi],0					;terminate buffer
  4639 000000B5 89D7                    			mov	edi,edx						;source buffer address
  4640 000000B7 AC                      .50			lodsb							;remaining byte
  4641 000000B8 AA                      			stosb							;move to front of buffer
  4642 000000B9 84C0                    			test	al,al						;end of line?
  4643 000000BB 75FA                    			jnz	.50						;no, continue
  4644 000000BD 5F                      			pop	edi						;restore non-volatile regs
  4645 000000BE 5E                      			pop	esi						;
  4646 000000BF C3                      			ret							;return
  4647                                  ;-----------------------------------------------------------------------------------------------------------------------
  4648                                  ;
  4649                                  ;	Routine:	ConDetermineCommand
  4650                                  ;
  4651                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  4652                                  ;
  4653                                  ;	input:		DS:EDX	command address
  4654                                  ;
  4655                                  ;	output:		EAX	>=0	= command nbr
  4656                                  ;				0	= unknown command
  4657                                  ;
  4658                                  ;-----------------------------------------------------------------------------------------------------------------------
  4659 000000C0 53                      ConDetermineCommand	push	ebx						;save non-volatile regs
  4660 000000C1 51                      			push	ecx						;
  4661 000000C2 56                      			push	esi						;
  4662 000000C3 57                      			push	edi						;
  4663                                  
  4664                                  			upperCaseString						;upper-case string at EDX
  4664 000000C4 B018                <1>  mov al,eUpperCaseString
  4664 000000C6 CD30                <1>  int _svc
  4665                                  
  4666 000000C8 BE[F3030000]            			mov	esi,tConCmdTbl					;commands table
  4667 000000CD 31FF                    			xor	edi,edi						;intialize command number
  4668 000000CF FC                      			cld							;forward strings
  4669 000000D0 AC                      .10			lodsb							;command length
  4670 000000D1 0FB6C8                  			movzx	ecx,al						;command length
  4671 000000D4 E30D                    			jecxz	.20						;branch if end of table
  4672 000000D6 89F3                    			mov	ebx,esi						;table entry address
  4673 000000D8 01CE                    			add	esi,ecx						;next table entry address
  4674                                  
  4675                                  			compareMemory						;compare byte arrays at EDX, EBX
  4675 000000DA B001                <1>  mov al,eCompareMemory
  4675 000000DC CD30                <1>  int _svc
  4676                                  
  4677 000000DE E303                    			jecxz	.20						;branch if equal
  4678 000000E0 47                      			inc	edi						;increment command nbr
  4679 000000E1 EBED                    			jmp	.10						;repeat
  4680 000000E3 89F8                    .20			mov	eax,edi						;command number
  4681 000000E5 5F                      			pop	edi						;restore non-volatile regs
  4682 000000E6 5E                      			pop	esi						;
  4683 000000E7 59                      			pop	ecx						;
  4684 000000E8 5B                      			pop	ebx						;
  4685 000000E9 C3                      			ret							;return
  4686                                  ;-----------------------------------------------------------------------------------------------------------------------
  4687                                  ;
  4688                                  ;	Routine:	ConClear
  4689                                  ;
  4690                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  4691                                  ;
  4692                                  ;-----------------------------------------------------------------------------------------------------------------------
  4693                                  ConClear		clearConsoleScreen					;clear console screen
  4693                              <1> ConClear :
  4693 000000EA B000                <1>  mov al,eClearConsoleScreen
  4693 000000EC CD30                <1>  int _svc
  4694 000000EE C3                      			ret							;return
  4695                                  ;-----------------------------------------------------------------------------------------------------------------------
  4696                                  ;
  4697                                  ;	Routine:	ConDate
  4698                                  ;
  4699                                  ;	Description:	This routine handles the DATE command.
  4700                                  ;
  4701                                  ;-----------------------------------------------------------------------------------------------------------------------
  4702                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4702                              <1> ConDate :
  4702 000000EF BB080B0000          <1>  mov ebx,%1
  4702 000000F4 B013                <1>  mov al,eReadRealTimeClock
  4702 000000F6 CD30                <1>  int _svc
  4703                                  			putDateString	  wsConsoleDateTime,wzConsoleOutBuffer	;format date string
  4703 000000F8 BB080B0000          <1>  mov ebx,%1
  4703 000000FD BAB80A0000          <1>  mov edx,%2
  4703 00000102 B008                <1>  mov al,ePutDateString
  4703 00000104 CD30                <1>  int _svc
  4704                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4704 00000106 BAB80A0000          <1>  mov edx,%1
  4704 0000010B B007                <1>  mov al,ePutConsoleString
  4704 0000010D CD30                <1>  int _svc
  4705                                  			putConsoleString  czNewLine				;write newline to console
  4705 0000010F BA[9B040000]        <1>  mov edx,%1
  4705 00000114 B007                <1>  mov al,ePutConsoleString
  4705 00000116 CD30                <1>  int _svc
  4706 00000118 C3                      			ret							;return
  4707                                  ;-----------------------------------------------------------------------------------------------------------------------
  4708                                  ;
  4709                                  ;	Routine:	ConDay
  4710                                  ;
  4711                                  ;	Description:	This routine handles the DAY command.
  4712                                  ;
  4713                                  ;-----------------------------------------------------------------------------------------------------------------------
  4714                                  ConDay			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4714                              <1> ConDay :
  4714 00000119 BB080B0000          <1>  mov ebx,%1
  4714 0000011E B013                <1>  mov al,eReadRealTimeClock
  4714 00000120 CD30                <1>  int _svc
  4715                                  			putDayString      wsConsoleDateTime,wzConsoleOutBuffer	;format day string
  4715 00000122 BB080B0000          <1>  mov ebx,%1
  4715 00000127 BAB80A0000          <1>  mov edx,%2
  4715 0000012C B009                <1>  mov al,ePutDayString
  4715 0000012E CD30                <1>  int _svc
  4716                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4716 00000130 BAB80A0000          <1>  mov edx,%1
  4716 00000135 B007                <1>  mov al,ePutConsoleString
  4716 00000137 CD30                <1>  int _svc
  4717                                  			putConsoleString  czNewLine				;write newline to console
  4717 00000139 BA[9B040000]        <1>  mov edx,%1
  4717 0000013E B007                <1>  mov al,ePutConsoleString
  4717 00000140 CD30                <1>  int _svc
  4718 00000142 C3                      			ret							;return
  4719                                  ;-----------------------------------------------------------------------------------------------------------------------
  4720                                  ;
  4721                                  ;	Routine:	ConExit
  4722                                  ;
  4723                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4724                                  ;
  4725                                  ;-----------------------------------------------------------------------------------------------------------------------
  4726                                  ConExit			resetSystem						;issue system reset
  4726                              <1> ConExit :
  4726 00000143 B014                <1>  mov al,eResetSystem
  4726 00000145 CD30                <1>  int _svc
  4727 00000147 C3                      			ret							;return
  4728                                  ;-----------------------------------------------------------------------------------------------------------------------
  4729                                  ;
  4730                                  ;	Routine:	ConHour
  4731                                  ;
  4732                                  ;	Description:	This routine Handles the HOUR command.
  4733                                  ;
  4734                                  ;-----------------------------------------------------------------------------------------------------------------------
  4735                                  ConHour			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4735                              <1> ConHour :
  4735 00000148 BB080B0000          <1>  mov ebx,%1
  4735 0000014D B013                <1>  mov al,eReadRealTimeClock
  4735 0000014F CD30                <1>  int _svc
  4736                                  			putHourString     wsConsoleDateTime,wzConsoleOutBuffer	;format hour string
  4736 00000151 BB080B0000          <1>  mov ebx,%1
  4736 00000156 BAB80A0000          <1>  mov edx,%2
  4736 0000015B B00A                <1>  mov al,ePutHourString
  4736 0000015D CD30                <1>  int _svc
  4737                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4737 0000015F BAB80A0000          <1>  mov edx,%1
  4737 00000164 B007                <1>  mov al,ePutConsoleString
  4737 00000166 CD30                <1>  int _svc
  4738                                  			putConsoleString  czNewLine				;write newline to console
  4738 00000168 BA[9B040000]        <1>  mov edx,%1
  4738 0000016D B007                <1>  mov al,ePutConsoleString
  4738 0000016F CD30                <1>  int _svc
  4739 00000171 C3                      			ret							;return
  4740                                  ;-----------------------------------------------------------------------------------------------------------------------
  4741                                  ;
  4742                                  ;	Routine:	ConInt6
  4743                                  ;
  4744                                  ;	Description:	This routine issues an interrupt 6 to exercise the interrupt handler.
  4745                                  ;
  4746                                  ;-----------------------------------------------------------------------------------------------------------------------
  4747 00000172 0F0B                    ConInt6			ud2							;raise bad opcode exception
  4748 00000174 C3                      			ret							;return (not executed)
  4749                                  ;-----------------------------------------------------------------------------------------------------------------------
  4750                                  ;
  4751                                  ;	Routine:	ConMem
  4752                                  ;
  4753                                  ;	Description:	This routine handles the MEMORY command and its MEM alias.
  4754                                  ;
  4755                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  4756                                  ;
  4757                                  ;-----------------------------------------------------------------------------------------------------------------------
  4758 00000175 53                      ConMem			push	ebx						;save non-volatile regs
  4759 00000176 56                      			push	esi						;
  4760 00000177 57                      			push	edi						;
  4761                                  ;
  4762                                  ;			update the source address if a parameter is given
  4763                                  ;
  4764 00000178 BA180A0000              			mov	edx,wzConsoleInBuffer				;console input buffer address (params)
  4765 0000017D BB680A0000              			mov	ebx,wzConsoleToken				;console command token address
  4766 00000182 E80BFFFFFF              			call	ConTakeToken					;take first param as token
  4767 00000187 803D680A000000          			cmp	byte [wzConsoleToken],0				;token found?
  4768 0000018E 740E                    			je	.10						;no, branch
  4769 00000190 BA680A0000              			mov	edx,wzConsoleToken				;first param as token address
  4770                                  
  4771                                  			hexadecimalToUnsigned					;convert string token to unsigned
  4771 00000195 B004                <1>  mov al,eHexadecimalToUnsigned
  4771 00000197 CD30                <1>  int _svc
  4772                                  
  4773 00000199 A3080A0000              			mov	[wfConsoleMemAddr],eax				;save console memory address
  4774                                  ;
  4775                                  ;			setup source address and row count
  4776                                  ;
  4777 0000019E 8B35080A0000            .10			mov	esi,[wfConsoleMemAddr]				;source memory address
  4778 000001A4 31C9                    			xor	ecx,ecx						;zero register
  4779 000001A6 B110                    			mov	cl,16						;row count
  4780                                  ;
  4781                                  ;			start the row with the source address in hexadecimal
  4782                                  ;
  4783 000001A8 51                      .20			push	ecx						;save remaining rows
  4784 000001A9 BFB80A0000              			mov	edi,wzConsoleOutBuffer				;output buffer address
  4785 000001AE 89FA                    			mov	edx,edi						;output buffer address
  4786 000001B0 89F1                    			mov	ecx,esi						;console memory address
  4787                                  
  4788                                  			unsignedToHexadecimal					;convert unsigned address to hex string
  4788 000001B2 B017                <1>  mov al,eUnsignedToHexadecimal
  4788 000001B4 CD30                <1>  int _svc
  4789                                  
  4790 000001B6 83C708                  			add	edi,8						;end of memory addr hexnum
  4791 000001B9 B020                    			mov	al,' '						;ascii space
  4792 000001BB AA                      			stosb							;store delimiter
  4793                                  ;
  4794                                  ;			output 16 ASCII hexadecimal byte values for the row
  4795                                  ;
  4796 000001BC 31C9                    			xor	ecx,ecx						;zero register
  4797 000001BE B110                    			mov	cl,16						;loop count
  4798 000001C0 51                      .30			push	ecx						;save loop count
  4799 000001C1 AC                      			lodsb							;memory byte
  4800 000001C2 88C4                    			mov	ah,al						;memory byte
  4801 000001C4 C0E804                  			shr	al,4						;high-order in bits 3-0
  4802 000001C7 0C30                    			or	al,30h						;apply ascii numeric zone
  4803 000001C9 3C3A                    			cmp	al,3ah						;numeric range?
  4804 000001CB 7202                    			jb	.40						;yes, skip ahead
  4805 000001CD 0407                    			add	al,7						;adjust ascii for 'A'-'F'
  4806 000001CF AA                      .40			stosb							;store ascii hexadecimal of high-order
  4807 000001D0 88E0                    			mov	al,ah						;low-order in bits 3-0
  4808 000001D2 240F                    			and	al,0fh						;mask out high-order bits
  4809 000001D4 0C30                    			or	al,30h						;apply ascii numeric zone
  4810 000001D6 3C3A                    			cmp	al,3ah						;numeric range?
  4811 000001D8 7202                    			jb	.50						;yes, skip ahead
  4812 000001DA 0407                    			add	al,7						;adjust ascii for 'A'-'F'
  4813 000001DC AA                      .50			stosb							;store ascii hexadecimal of low-order
  4814 000001DD B020                    			mov	al,' '						;ascii space
  4815 000001DF AA                      			stosb							;store ascii space delimiter
  4816 000001E0 59                      			pop	ecx						;loop count
  4817 000001E1 E2DD                    			loop	.30						;next
  4818                                  ;
  4819                                  ;			output printable ASCII character section for the row
  4820                                  ;
  4821 000001E3 83EE10                  			sub	esi,16						;reset source pointer
  4822 000001E6 B110                    			mov	cl,16						;loop count
  4823 000001E8 AC                      .60			lodsb							;source byte
  4824 000001E9 3C20                    			cmp	al,32						;printable? (low-range test)
  4825 000001EB 7204                    			jb	.70						;no, skip ahead
  4826 000001ED 3C80                    			cmp	al,128						;printable? (high-range test)
  4827 000001EF 7202                    			jb	.80						;yes, skip ahead
  4828 000001F1 B020                    .70			mov	al,' '						;display space instead of printable
  4829 000001F3 AA                      .80			stosb							;store printable ascii byte
  4830 000001F4 E2F2                    			loop	.60						;next source byte
  4831 000001F6 30C0                    			xor	al,al						;nul-terminator
  4832 000001F8 AA                      			stosb							;terminate output line
  4833                                  ;
  4834                                  ;			display constructed output buffer and newline
  4835                                  ;
  4836                                  			putConsoleString wzConsoleOutBuffer			;display constructed output
  4836 000001F9 BAB80A0000          <1>  mov edx,%1
  4836 000001FE B007                <1>  mov al,ePutConsoleString
  4836 00000200 CD30                <1>  int _svc
  4837                                  			putConsoleString czNewLine				;display new line
  4837 00000202 BA[9B040000]        <1>  mov edx,%1
  4837 00000207 B007                <1>  mov al,ePutConsoleString
  4837 00000209 CD30                <1>  int _svc
  4838                                  ;
  4839                                  ;			repeat until all lines displayed and preserve source address
  4840                                  ;
  4841 0000020B 59                      			pop	ecx						;remaining rows
  4842 0000020C E29A                    			loop	.20						;next row
  4843 0000020E 8935080A0000            			mov	[wfConsoleMemAddr],esi				;update console memory address
  4844 00000214 5F                      			pop	edi						;restore regs
  4845 00000215 5E                      			pop	esi						;
  4846 00000216 5B                      			pop	ebx						;
  4847 00000217 C3                      			ret							;return
  4848                                  ;-----------------------------------------------------------------------------------------------------------------------
  4849                                  ;
  4850                                  ;	Routine:	ConMinute
  4851                                  ;
  4852                                  ;	Description:	This routine Handles the MINUTE command.
  4853                                  ;
  4854                                  ;-----------------------------------------------------------------------------------------------------------------------
  4855                                  ConMinute		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4855                              <1> ConMinute :
  4855 00000218 BB080B0000          <1>  mov ebx,%1
  4855 0000021D B013                <1>  mov al,eReadRealTimeClock
  4855 0000021F CD30                <1>  int _svc
  4856                                  			putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer	;format minute string
  4856 00000221 BB080B0000          <1>  mov ebx,%1
  4856 00000226 BAB80A0000          <1>  mov edx,%2
  4856 0000022B B00B                <1>  mov al,ePutMinuteString
  4856 0000022D CD30                <1>  int _svc
  4857                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4857 0000022F BAB80A0000          <1>  mov edx,%1
  4857 00000234 B007                <1>  mov al,ePutConsoleString
  4857 00000236 CD30                <1>  int _svc
  4858                                  			putConsoleString  czNewLine				;write newline to console
  4858 00000238 BA[9B040000]        <1>  mov edx,%1
  4858 0000023D B007                <1>  mov al,ePutConsoleString
  4858 0000023F CD30                <1>  int _svc
  4859 00000241 C3                      			ret							;return
  4860                                  ;-----------------------------------------------------------------------------------------------------------------------
  4861                                  ;
  4862                                  ;	Routine:	ConMonth
  4863                                  ;
  4864                                  ;	Description:	This routine Handles the MONTH command.
  4865                                  ;
  4866                                  ;-----------------------------------------------------------------------------------------------------------------------
  4867                                  ConMonth		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4867                              <1> ConMonth :
  4867 00000242 BB080B0000          <1>  mov ebx,%1
  4867 00000247 B013                <1>  mov al,eReadRealTimeClock
  4867 00000249 CD30                <1>  int _svc
  4868                                  			putMonthString    wsConsoleDateTime,wzConsoleOutBuffer	;format month string
  4868 0000024B BB080B0000          <1>  mov ebx,%1
  4868 00000250 BAB80A0000          <1>  mov edx,%2
  4868 00000255 B00C                <1>  mov al,ePutMonthString
  4868 00000257 CD30                <1>  int _svc
  4869                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4869 00000259 BAB80A0000          <1>  mov edx,%1
  4869 0000025E B007                <1>  mov al,ePutConsoleString
  4869 00000260 CD30                <1>  int _svc
  4870                                  			putConsoleString  czNewLine				;write newline to console
  4870 00000262 BA[9B040000]        <1>  mov edx,%1
  4870 00000267 B007                <1>  mov al,ePutConsoleString
  4870 00000269 CD30                <1>  int _svc
  4871 0000026B C3                      			ret							;return
  4872                                  ;-----------------------------------------------------------------------------------------------------------------------
  4873                                  ;
  4874                                  ;	Routine:	ConMonthName
  4875                                  ;
  4876                                  ;	Description:	This routine Handles the MONTH.NAME command.
  4877                                  ;
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ConMonthName		readRealTimeClock  wsConsoleDateTime			;read RTC data into structure
  4879                              <1> ConMonthName :
  4879 0000026C BB080B0000          <1>  mov ebx,%1
  4879 00000271 B013                <1>  mov al,eReadRealTimeClock
  4879 00000273 CD30                <1>  int _svc
  4880                                  			putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer	;format month name string
  4880 00000275 BB080B0000          <1>  mov ebx,%1
  4880 0000027A BAB80A0000          <1>  mov edx,%2
  4880 0000027F B00D                <1>  mov al,ePutMonthNameString
  4880 00000281 CD30                <1>  int _svc
  4881                                  			putConsoleString   wzConsoleOutBuffer			;write string to console
  4881 00000283 BAB80A0000          <1>  mov edx,%1
  4881 00000288 B007                <1>  mov al,ePutConsoleString
  4881 0000028A CD30                <1>  int _svc
  4882                                  			putConsoleString   czNewLine				;write newline to console
  4882 0000028C BA[9B040000]        <1>  mov edx,%1
  4882 00000291 B007                <1>  mov al,ePutConsoleString
  4882 00000293 CD30                <1>  int _svc
  4883 00000295 C3                      			ret							;return
  4884                                  ;-----------------------------------------------------------------------------------------------------------------------
  4885                                  ;
  4886                                  ;	Routine:	ConSecond
  4887                                  ;
  4888                                  ;	Description:	This routine Handles the SECOND command.
  4889                                  ;
  4890                                  ;-----------------------------------------------------------------------------------------------------------------------
  4891                                  ConSecond		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4891                              <1> ConSecond :
  4891 00000296 BB080B0000          <1>  mov ebx,%1
  4891 0000029B B013                <1>  mov al,eReadRealTimeClock
  4891 0000029D CD30                <1>  int _svc
  4892                                  			putSecondString   wsConsoleDateTime,wzConsoleOutBuffer	;format second string
  4892 0000029F BB080B0000          <1>  mov ebx,%1
  4892 000002A4 BAB80A0000          <1>  mov edx,%2
  4892 000002A9 B00E                <1>  mov al,ePutSecondString
  4892 000002AB CD30                <1>  int _svc
  4893                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4893 000002AD BAB80A0000          <1>  mov edx,%1
  4893 000002B2 B007                <1>  mov al,ePutConsoleString
  4893 000002B4 CD30                <1>  int _svc
  4894                                  			putConsoleString  czNewLine				;write newline to console
  4894 000002B6 BA[9B040000]        <1>  mov edx,%1
  4894 000002BB B007                <1>  mov al,ePutConsoleString
  4894 000002BD CD30                <1>  int _svc
  4895 000002BF C3                      			ret							;return
  4896                                  ;-----------------------------------------------------------------------------------------------------------------------
  4897                                  ;
  4898                                  ;	Routine:	ConTime
  4899                                  ;
  4900                                  ;	Description:	This routine Handles the TIME command.
  4901                                  ;
  4902                                  ;-----------------------------------------------------------------------------------------------------------------------
  4903                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4903                              <1> ConTime :
  4903 000002C0 BB080B0000          <1>  mov ebx,%1
  4903 000002C5 B013                <1>  mov al,eReadRealTimeClock
  4903 000002C7 CD30                <1>  int _svc
  4904                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  4904 000002C9 BB080B0000          <1>  mov ebx,%1
  4904 000002CE BAB80A0000          <1>  mov edx,%2
  4904 000002D3 B00F                <1>  mov al,ePutTimeString
  4904 000002D5 CD30                <1>  int _svc
  4905                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4905 000002D7 BAB80A0000          <1>  mov edx,%1
  4905 000002DC B007                <1>  mov al,ePutConsoleString
  4905 000002DE CD30                <1>  int _svc
  4906                                  			putConsoleString  czNewLine				;write newline to console
  4906 000002E0 BA[9B040000]        <1>  mov edx,%1
  4906 000002E5 B007                <1>  mov al,ePutConsoleString
  4906 000002E7 CD30                <1>  int _svc
  4907 000002E9 C3                      			ret							;return
  4908                                  ;-----------------------------------------------------------------------------------------------------------------------
  4909                                  ;
  4910                                  ;	Routine:	ConWeekday
  4911                                  ;
  4912                                  ;	Description:	This routine handles the WEEKDAY command.
  4913                                  ;
  4914                                  ;-----------------------------------------------------------------------------------------------------------------------
  4915                                  ConWeekday		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4915                              <1> ConWeekday :
  4915 000002EA BB080B0000          <1>  mov ebx,%1
  4915 000002EF B013                <1>  mov al,eReadRealTimeClock
  4915 000002F1 CD30                <1>  int _svc
  4916                                  			putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer	;format weekday string
  4916 000002F3 BB080B0000          <1>  mov ebx,%1
  4916 000002F8 BAB80A0000          <1>  mov edx,%2
  4916 000002FD B010                <1>  mov al,ePutWeekdayString
  4916 000002FF CD30                <1>  int _svc
  4917                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4917 00000301 BAB80A0000          <1>  mov edx,%1
  4917 00000306 B007                <1>  mov al,ePutConsoleString
  4917 00000308 CD30                <1>  int _svc
  4918                                  			putConsoleString  czNewLine				;write newline to console
  4918 0000030A BA[9B040000]        <1>  mov edx,%1
  4918 0000030F B007                <1>  mov al,ePutConsoleString
  4918 00000311 CD30                <1>  int _svc
  4919 00000313 C3                      			ret							;return
  4920                                  ;-----------------------------------------------------------------------------------------------------------------------
  4921                                  ;
  4922                                  ;	Routine:	ConWeekdayName
  4923                                  ;
  4924                                  ;	Description:	This routine Handles the WEEKDAY.NAME command.
  4925                                  ;
  4926                                  ;-----------------------------------------------------------------------------------------------------------------------
  4927                                  ConWeekdayName		readRealTimeClock    wsConsoleDateTime				;read RTC data into structure
  4927                              <1> ConWeekdayName :
  4927 00000314 BB080B0000          <1>  mov ebx,%1
  4927 00000319 B013                <1>  mov al,eReadRealTimeClock
  4927 0000031B CD30                <1>  int _svc
  4928                                  			putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer	;format day name string
  4928 0000031D BB080B0000          <1>  mov ebx,%1
  4928 00000322 BAB80A0000          <1>  mov edx,%2
  4928 00000327 B011                <1>  mov al,ePutWeekdayNameString
  4928 00000329 CD30                <1>  int _svc
  4929                                  			putConsoleString     wzConsoleOutBuffer				;write string to console
  4929 0000032B BAB80A0000          <1>  mov edx,%1
  4929 00000330 B007                <1>  mov al,ePutConsoleString
  4929 00000332 CD30                <1>  int _svc
  4930                                  			putConsoleString     czNewLine					;write newline to console
  4930 00000334 BA[9B040000]        <1>  mov edx,%1
  4930 00000339 B007                <1>  mov al,ePutConsoleString
  4930 0000033B CD30                <1>  int _svc
  4931 0000033D C3                      			ret								;return
  4932                                  ;-----------------------------------------------------------------------------------------------------------------------
  4933                                  ;
  4934                                  ;	Routine:	ConYear
  4935                                  ;
  4936                                  ;	Description:	This routine Handles the YEAR command.
  4937                                  ;
  4938                                  ;-----------------------------------------------------------------------------------------------------------------------
  4939                                  ConYear			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4939                              <1> ConYear :
  4939 0000033E BB080B0000          <1>  mov ebx,%1
  4939 00000343 B013                <1>  mov al,eReadRealTimeClock
  4939 00000345 CD30                <1>  int _svc
  4940                                  			putYearString	  wsConsoleDateTime,wzConsoleOutBuffer	;format year string
  4940 00000347 BB080B0000          <1>  mov ebx,%1
  4940 0000034C BAB80A0000          <1>  mov edx,%2
  4940 00000351 B012                <1>  mov al,ePutYearString
  4940 00000353 CD30                <1>  int _svc
  4941                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4941 00000355 BAB80A0000          <1>  mov edx,%1
  4941 0000035A B007                <1>  mov al,ePutConsoleString
  4941 0000035C CD30                <1>  int _svc
  4942                                  			putConsoleString  czNewLine				;write newline to console
  4942 0000035E BA[9B040000]        <1>  mov edx,%1
  4942 00000363 B007                <1>  mov al,ePutConsoleString
  4942 00000365 CD30                <1>  int _svc
  4943 00000367 C3                      			ret							;return
  4944                                  ;-----------------------------------------------------------------------------------------------------------------------
  4945                                  ;
  4946                                  ;	Routine:	ConYearIsLeap
  4947                                  ;
  4948                                  ;	Description:	This routine handles the YEAR.ISLEAP command
  4949                                  ;
  4950                                  ;-----------------------------------------------------------------------------------------------------------------------
  4951                                  ConYearIsLeap		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4951                              <1> ConYearIsLeap :
  4951 00000368 BB080B0000          <1>  mov ebx,%1
  4951 0000036D B013                <1>  mov al,eReadRealTimeClock
  4951 0000036F CD30                <1>  int _svc
  4952                                  			isLeapYear        wsConsoleDateTime			;indicate if year is leap year
  4952 00000371 BB080B0000          <1>  mov ebx,%1
  4952 00000376 B005                <1>  mov al,eIsLeapYear
  4952 00000378 CD30                <1>  int _svc
  4953                                  
  4954 0000037A E30B                    			jecxz	.10						;branch if not leap
  4955                                  
  4956                                  			putConsoleString  czYearIsLeap				;display year is leap message
  4956 0000037C BA[D0040000]        <1>  mov edx,%1
  4956 00000381 B007                <1>  mov al,ePutConsoleString
  4956 00000383 CD30                <1>  int _svc
  4957                                  
  4958 00000385 EB09                    			jmp	.20						;continue
  4959                                  
  4960                                  .10			putConsoleString  czYearIsNotLeap			;display year is not leap mesage
  4960                              <1> .10 :
  4960 00000387 BA[EB040000]        <1>  mov edx,%1
  4960 0000038C B007                <1>  mov al,ePutConsoleString
  4960 0000038E CD30                <1>  int _svc
  4961 00000390 C3                      .20			ret							;return
  4962                                  ;-----------------------------------------------------------------------------------------------------------------------
  4963                                  ;
  4964                                  ;	Routine:	ConVersion
  4965                                  ;
  4966                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  4967                                  ;
  4968                                  ;-----------------------------------------------------------------------------------------------------------------------
  4969                                  ConVersion		putConsoleString czTitle				;display version message
  4969                              <1> ConVersion :
  4969 00000391 BA[A0040000]        <1>  mov edx,%1
  4969 00000396 B007                <1>  mov al,ePutConsoleString
  4969 00000398 CD30                <1>  int _svc
  4970 0000039A C3                      			ret							;return
  4971                                  ;-----------------------------------------------------------------------------------------------------------------------
  4972                                  ;
  4973                                  ;	Tables
  4974                                  ;
  4975                                  ;-----------------------------------------------------------------------------------------------------------------------
  4976                                  										;---------------------------------------
  4977                                  										;  Command Jump Table
  4978                                  										;---------------------------------------
  4979                                  tConJmpTbl		equ	$						;command jump table
  4980 0000039B 14030000                			dd	ConWeekdayName	- ConCode			;weekday.name command routine offset
  4981 0000039F 68030000                			dd	ConYearIsLeap	- ConCode			;year.isleap command routine offset
  4982 000003A3 6C020000                			dd	ConMonthName	- ConCode			;month.name command routine offset
  4983 000003A7 43010000                			dd	ConExit		- ConCode			;shutdown command routine offset
  4984 000003AB 91030000                			dd	ConVersion	- ConCode			;version command routine offset
  4985 000003AF EA020000                			dd	ConWeekday	- ConCode			;weekday command routine offset
  4986 000003B3 75010000                			dd	ConMem		- ConCode			;memory command routine offset
  4987 000003B7 18020000                			dd	ConMinute	- ConCode			;minute command routine offset
  4988 000003BB 96020000                			dd	ConSecond	- ConCode			;second command routine offset
  4989 000003BF EA000000                			dd	ConClear	- ConCode			;clear command routine offset
  4990 000003C3 42020000                			dd	ConMonth	- ConCode			;month command routine offset
  4991 000003C7 EF000000                			dd	ConDate		- ConCode			;date command routine offset
  4992 000003CB 43010000                			dd	ConExit		- ConCode			;exit command routine offset
  4993 000003CF 48010000                			dd	ConHour		- ConCode			;hour command routine offset
  4994 000003D3 72010000                			dd	ConInt6		- ConCode			;int6 command routine offset
  4995 000003D7 43010000                			dd	ConExit		- ConCode			;quit command routine offset
  4996 000003DB C0020000                			dd	ConTime		- ConCode			;time command routine offset
  4997 000003DF 3E030000                			dd	ConYear		- ConCode			;year command routine offset
  4998 000003E3 EA000000                			dd	ConClear	- ConCode			;cls command routine offset
  4999 000003E7 19010000                			dd	ConDay		- ConCode			;day command routine offset
  5000 000003EB 75010000                			dd	ConMem		- ConCode			;mem command routine offset
  5001 000003EF 91030000                			dd	ConVersion	- ConCode			;ver command routine offset
  5002                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  5003                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  5004                                  										;---------------------------------------
  5005                                  										;  Command Name Table
  5006                                  										;---------------------------------------
  5007                                  tConCmdTbl		equ	$						;command name table
  5008 000003F3 0D5745454B4441592E-     			db	13,"WEEKDAY.NAME",0				;weekday.name command
  5008 000003FC 4E414D4500         
  5009 00000401 0C594541522E49534C-     			db	12,"YEAR.ISLEAP",0				;year.isleap command
  5009 0000040A 45415000           
  5010 0000040E 0B4D4F4E54482E4E41-     			db	11,"MONTH.NAME",0				;month.name command
  5010 00000417 4D4500             
  5011 0000041A 0953485554444F574E-     			db	9,"SHUTDOWN",0					;shutdown command
  5011 00000423 00                 
  5012 00000424 0856455253494F4E00      			db	8,"VERSION",0					;version command
  5013 0000042D 085745454B44415900      			db	8,"WEEKDAY",0					;weekday command
  5014 00000436 074D454D4F525900        			db	7,"MEMORY",0					;memory command
  5015 0000043E 074D494E55544500        			db	7,"MINUTE",0					;minute command
  5016 00000446 075345434F4E4400        			db	7,"SECOND",0					;second command
  5017 0000044E 06434C45415200          			db	6,"CLEAR",0					;clear command
  5018 00000455 064D4F4E544800          			db	6,"MONTH",0					;month command
  5019 0000045C 054441544500            			db	5,"DATE",0					;date command
  5020 00000462 054558495400            			db	5,"EXIT",0					;exit command
  5021 00000468 05484F555200            			db	5,"HOUR",0					;hour command
  5022 0000046E 05494E543600            			db	5,"INT6",0					;int6 command
  5023 00000474 055155495400            			db	5,"QUIT",0					;quit command
  5024 0000047A 0554494D4500            			db	5,"TIME",0					;time command
  5025 00000480 055945415200            			db	5,"YEAR",0					;year command
  5026 00000486 04434C5300              			db	4,"CLS",0					;cls command
  5027 0000048B 0444415900              			db	4,"DAY",0					;day command
  5028 00000490 044D454D00              			db	4,"MEM",0					;mem command
  5029 00000495 0456455200              			db	4,"VER",0					;ver command
  5030 0000049A 00                      			db	0						;end of table
  5031                                  ;-----------------------------------------------------------------------------------------------------------------------
  5032                                  ;
  5033                                  ;	Constants
  5034                                  ;
  5035                                  ;-----------------------------------------------------------------------------------------------------------------------
  5036 0000049B 0D0A00                  czNewLine		db	13,10,0						;new line string
  5037 0000049E 3A00                    czPrompt		db	":",0						;prompt string
  5038 000004A0 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  5038 000004A9 65726174696E672053-
  5038 000004B2 797374656D20312E30-
  5038 000004BB 0D0A00             
  5039 000004BE 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  5039 000004C7 6F6D6D616E640D0A00 
  5040 000004D0 546865207965617220-     czYearIsLeap		db	"The year is a leap year.",13,10,0		;leap year message
  5040 000004D9 69732061206C656170-
  5040 000004E2 20796561722E0D0A00 
  5041 000004EB 546865207965617220-     czYearIsNotLeap		db	"The year is not a leap year.",13,10,0		;not leap year message
  5041 000004F4 6973206E6F74206120-
  5041 000004FD 6C6561702079656172-
  5041 00000506 2E0D0A00           
  5042 0000050A 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  5043 00000FFE 55AA                    			db	055h,0AAh					;end of section
  5044                                  ;=======================================================================================================================
  5045                                  ;
  5046                                  ;	Background Task								@disk: 009400	@mem: 006000
  5047                                  ;
  5048                                  ;	This task executes monitoring and self-correcting functions.
  5049                                  ;
  5050                                  ;			000000	+-----------------------------------------------+
  5051                                  ;				|  Real Mode Interrupt Vectors			|
  5052                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  5053                                  ;				|  Reserved BIOS Memory Area			|
  5054                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  5055                                  ;				|  Shared Kernel Memory Area			|
  5056                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  5057                                  ;				|  Global Descriptor Table (GDT)		|
  5058                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  5059                                  ;				|  Interrupt Descriptor Table (IDT)		|
  5060                                  ;			002000	+-----------------------------------------------+
  5061                                  ;				|  Interrupt Handlers				|
  5062                                  ;				|  Kernel Function Library			|
  5063                                  ;			004000	+===============================================+
  5064                                  ;				|  Console Task Stack Area			|
  5065                                  ;			004700	+-----------------------------------------------+
  5066                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  5067                                  ;			004780	+-----------------------------------------------+
  5068                                  ;				|  Console Task Task State Segment (TSS)	|
  5069                                  ;			004800	+-----------------------------------------------+
  5070                                  ;				|  Console Task Message Queue			|
  5071                                  ;			005000	+-----------------------------------------------+
  5072                                  ;				|  Console Task Code				|
  5073                                  ;				|  Console Task Constants			|
  5074                                  ;			006000	+===============================================+
  5075                                  ;				|  Background Task Stack Area			|
  5076                                  ;	SS:SP --------> 006700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0060h
  5077                                  ;				|  Background Task Local Descriptor Table (LDT) |
  5078                                  ;			006780  +-----------------------------------------------+		<-- TR = GDT.SEL 0068h
  5079                                  ;				|  Background Task Task State Segment (TSS)	|
  5080                                  ;			006800	+-----------------------------------------------+
  5081                                  ;				|  Background Task Message Queue		|
  5082                                  ;	CS,CS:IP ----->	007000	+-----------------------------------------------+ CS:0000
  5083                                  ;				|  Background Task Code				|
  5084                                  ;				|  Background Task Constants			|
  5085                                  ;			008000	+===============================================+
  5086                                  ;
  5087                                  ;=======================================================================================================================
  5088                                  ;-----------------------------------------------------------------------------------------------------------------------
  5089                                  ;
  5090                                  ;	Background Task Stack							@disk: 009400	@mem:  006000
  5091                                  ;
  5092                                  ;	This is the stack for the background task. It supports 448 nested calls.
  5093                                  ;
  5094                                  ;-----------------------------------------------------------------------------------------------------------------------
  5095                                  section			bgstack							;background task stack
  5096 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  5097                                  ;-----------------------------------------------------------------------------------------------------------------------
  5098                                  ;
  5099                                  ;	Background Task Local Descriptor Table					@disk: 009B00	@mem:  006700
  5100                                  ;
  5101                                  ;	This is the LDT for the background task. It defines the stack, code, data and queue segments as well as data
  5102                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5103                                  ;	16 descriptors. Six are initially defined.
  5104                                  ;
  5105                                  ;-----------------------------------------------------------------------------------------------------------------------
  5106                                  section			bgldt							;background task local descriptors
  5107 00000000 7F00806700934000        			dq	004093006780007Fh				;04 TSS alias		128B  @ 6780
  5108 00000008 7F00006700934000        			dq	004093006700007Fh				;0C LDT alias		128B  @ 6700
  5109 00000010 FF06006000934000        			dq	00409300600006FFh				;14 stack		1792B @ 6600
  5110 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data		4GB   @ 0000
  5111 00000020 FF0F0070009B4000        			dq	00409B0070000FFFh				;24 code                4KB   @ 7000
  5112 00000028 FF07006800934000        			dq	00409300680007FFh				;2C message queue	2KB   @ 6800
  5113 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  5114                                  ;-----------------------------------------------------------------------------------------------------------------------
  5115                                  ;
  5116                                  ;	Background Task State Segment						@disk: 009B80	@mem:  006780
  5117                                  ;
  5118                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5119                                  ;	segment. CS to console code.
  5120                                  ;
  5121                                  ;-----------------------------------------------------------------------------------------------------------------------
  5122                                  section			bgtss							;background task state segment
  5123 00000000 00000000                			dd	0						;00 back-link tss
  5124 00000004 00070000                			dd	0700h						;04 esp ring 0
  5125 00000008 14000000                			dd	0014h						;08 ss ring 0
  5126 0000000C 00070000                			dd	0700h						;0C esp ring 1
  5127 00000010 14000000                			dd	0014h						;10 es ring 1
  5128 00000014 00070000                			dd	0700h						;14 esp ring 2
  5129 00000018 14000000                			dd	0014h						;18 ss ring 2
  5130 0000001C 00000000                			dd	0						;1C cr ring 3
  5131 00000020 00000000                			dd	0						;20 eip
  5132 00000024 00020000                			dd	0200h						;24 eflags
  5133 00000028 00000000                			dd	0						;28 eax
  5134 0000002C 00000000                			dd	0						;2C ecx
  5135 00000030 00000000                			dd	0						;30 edx
  5136 00000034 00000000                			dd	0						;34 ebx
  5137 00000038 00070000                			dd	0700h						;38 esp ring 3
  5138 0000003C 00000000                			dd	0						;3C ebp
  5139 00000040 00000000                			dd	0						;40 esi
  5140 00000044 00000000                			dd	0						;44 edi
  5141 00000048 1C000000                			dd	001Ch						;48 es
  5142 0000004C 24000000                			dd	0024h						;4C cs
  5143 00000050 14000000                			dd	0014h						;50 ss ring 3
  5144 00000054 1C000000                			dd	001Ch						;54 ds
  5145 00000058 00000000                			dd	0						;58 fs
  5146 0000005C 00000000                			dd	0						;5c gs
  5147 00000060 70000000                			dd	ESELBACKGROUNDLDT				;60 ldt selector in gdt
  5148 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  5149                                  ;-----------------------------------------------------------------------------------------------------------------------
  5150                                  ;
  5151                                  ;	Background Task Message Queue						@disk: 009C00	@mem: 006800
  5152                                  ;
  5153                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5154                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5155                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5156                                  ;	event.
  5157                                  ;
  5158                                  ;-----------------------------------------------------------------------------------------------------------------------
  5159                                  section			bgmque							;console message queue
  5160 00000000 08000000                			dd	8						;head pointer
  5161 00000004 08000000                			dd	8						;tail pointer
  5162 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  5163                                  ;-----------------------------------------------------------------------------------------------------------------------
  5164                                  ;
  5165                                  ;	Background Task Code							@disk: 00A400	@mem: 007000
  5166                                  ;
  5167                                  ;-----------------------------------------------------------------------------------------------------------------------
  5168                                  section			bgcode	vstart=07000h					;labels relative to 7000h
  5169 00000000 E857000000              BackgroundCode		call	BgInitializeData				;initialize the background variables
  5170                                  
  5171                                  .10			readRealTimeClock wsBgDateTime				;read real-time clock data
  5171                              <1> .10 :
  5171 00000005 BB100B0000          <1>  mov ebx,%1
  5171 0000000A B013                <1>  mov al,eReadRealTimeClock
  5171 0000000C CD30                <1>  int _svc
  5172                                  			putTimeString     wsBgDateTime,wzBgTime			;create ASCII time string
  5172 0000000E BB100B0000          <1>  mov ebx,%1
  5172 00000013 BA180B0000          <1>  mov edx,%2
  5172 00000018 B00F                <1>  mov al,ePutTimeString
  5172 0000001A CD30                <1>  int _svc
  5173                                  			compareMemory	  wzBgTime,wzBgTimeCmpr,EBGTIMELEN	;compare to previous time string
  5173 0000001C BA180B0000          <1>  mov edx,%1
  5173 00000021 BB210B0000          <1>  mov ebx,%2
  5173 00000026 B909000000          <1>  mov ecx,%3
  5173 0000002B B001                <1>  mov al,eCompareMemory
  5173 0000002D CD30                <1>  int _svc
  5174                                  
  5175 0000002F E3D4                    			jecxz	.10						;repeat if equal
  5176 00000031 06                      			push	es						;save non-volatile reg
  5177 00000032 6A20                    			push	ESELCGA						;load CGA selector ...
  5178 00000034 07                      			pop	es						;... into extra segment reg
  5179 00000035 BE180B0000              			mov	esi,wzBgTime					;string address
  5180 0000003A B518                    			mov	ch,24						;OIA row
  5181 0000003C B143                    			mov	cl,67						;OIA column
  5182                                  
  5183                                  			setConsoleString					;display string
  5183 0000003E B015                <1>  mov al,eSetConsoleString
  5183 00000040 CD30                <1>  int _svc
  5184                                  
  5185 00000042 07                      			pop	es						;restore non-volatile reg
  5186                                  
  5187                                  			copyMemory	  wzBgTime,wzBgTimeCmpr,EBGTIMELEN	;copy to comparison string
  5187 00000043 BA180B0000          <1>  mov edx,%1
  5187 00000048 BB210B0000          <1>  mov ebx,%2
  5187 0000004D B909000000          <1>  mov ecx,%3
  5187 00000052 B002                <1>  mov al,eCopyMemory
  5187 00000054 CD30                <1>  int _svc
  5188                                  			yield							;halt until interrupt
  5188 00000056 B019                <1>  mov al,eYield
  5188 00000058 CD30                <1>  int _svc
  5189                                  
  5190 0000005A EBA9                    			jmp	.10						;continue
  5191                                  ;-----------------------------------------------------------------------------------------------------------------------
  5192                                  ;
  5193                                  ;	Routine:	BgInitializeData
  5194                                  ;
  5195                                  ;	Description:	This routine initializes background task variables.
  5196                                  ;
  5197                                  ;-----------------------------------------------------------------------------------------------------------------------
  5198 0000005C 51                      BgInitializeData	push	ecx						;save non-volatile regs
  5199 0000005D 57                      			push	edi						;
  5200 0000005E 06                      			push	es						;
  5201                                  ;
  5202                                  ;	Initialize console work areas
  5203                                  ;
  5204 0000005F 6A18                    			push	ESELDAT						;load OS data selector ...
  5205 00000061 07                      			pop	es						;... into extra segment register
  5206 00000062 BF100B0000              			mov	edi,EBGDATA					;OS console data address
  5207 00000067 30C0                    			xor	al,al						;initialization value
  5208 00000069 B91A000000              			mov	ecx,EBGDATALEN					;size of OS console data
  5209 0000006E FC                      			cld							;forward strings
  5210 0000006F F3AA                    			rep	stosb						;initialize data
  5211                                  ;
  5212                                  ;	Restore and return
  5213                                  ;
  5214 00000071 07                      			pop	es						;restore non-volatile regs
  5215 00000072 5F                      			pop	edi						;
  5216 00000073 59                      			pop	ecx						;
  5217 00000074 C3                      			ret							;return
  5218                                  ;-----------------------------------------------------------------------------------------------------------------------
  5219                                  ;
  5220                                  ;	Background Task Constants
  5221                                  ;
  5222                                  ;-----------------------------------------------------------------------------------------------------------------------
  5223 00000075 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  5224 00000FFE 55AA                    			db	055h,0AAh					;end of section
  5225                                  %endif
  5226                                  %ifdef BUILDDISK
  5227                                  ;-----------------------------------------------------------------------------------------------------------------------
  5228                                  ;
  5229                                  ;	Free Disk Space								@disk: 00B400	@mem:  n/a
  5230                                  ;
  5231                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5232                                  ;
  5233                                  ;-----------------------------------------------------------------------------------------------------------------------
  5234                                  section			unused							;unused disk space
  5235 00000000 F6<rept>                			times	EBOOTDISKBYTES-0B400h db 0F6h			;fill to end of disk image
  5236                                  %endif
  5237                                  ;=======================================================================================================================
  5238                                  ;
  5239                                  ;	End of Program Code
  5240                                  ;
  5241                                  ;=======================================================================================================================
