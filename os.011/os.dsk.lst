     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.011
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading memory sizes from the BIOS
     8                                  ;                       and the Real Time Clock (RTC) chip.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;
   162                                  ;       Operating System Values
   163                                  ;
   164                                  ;       EBOOT...        Boot sector and loader values
   165                                  ;       ECON...         Console values (dimensions and attributes)
   166                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   167                                  ;       EKEYF...        Keyboard status flags
   168                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   169                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   170                                  ;       EMEM...         Memory Management values
   171                                  ;       EMSG...         Message identifers
   172                                  ;
   173                                  ;=======================================================================================================================
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       Hardware-Defined Values
   177                                  ;
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;
   181                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   182                                  ;
   183                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   184                                  ;       for CGA, EGA, VGA and compatible video modes.
   185                                  ;
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   188                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   189                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   190                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  ;
   193                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   194                                  ;
   195                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   196                                  ;
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   199                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   200                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   201                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   202                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  ;
   205                                  ;       8042 Keyboard Controller                                                EKEYB...
   206                                  ;
   207                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   208                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   209                                  ;
   210                                  ;-----------------------------------------------------------------------------------------------------------------------
   211                                  EKEYBPORTDATA           equ     060h                                            ;data port
   212                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   213                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   214                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   215                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   216                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   217                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   218                                                                                                                  ;---------------------------------------
   219                                                                                                                  ;       Keyboard Scan Codes
   220                                                                                                                  ;---------------------------------------
   221                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   222                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   223                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   224                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   225                                  EKEYBSLASH              equ     035h                                            ;slash
   226                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   227                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   228                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   229                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   230                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   231                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   232                                  EKEYBUP                 equ     080h                                            ;up
   233                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   234                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   235                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   236                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   237                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   238                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   239                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   240                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   241                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   242                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   243                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   244                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  ;
   247                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   248                                  ;
   249                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   250                                  ;       external devices and signals a hardware interrupt to the CPU.
   251                                  ;
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   254                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   255                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   256                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   257                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  ;
   260                                  ;       8253 Programmable Interval Timer                                        EPIT...
   261                                  ;
   262                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   263                                  ;       approximately 18.2 times per second.
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   270                                  ;
   271                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  ERTCREGPORT             equ     070h                                            ;register select port
   275                                  ERTCDATAPORT            equ     071h                                            ;data port
   276                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   277                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   278                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   279                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   280                                  ;-----------------------------------------------------------------------------------------------------------------------
   281                                  ;
   282                                  ;       x86 CPU Architecture                                                    ;EX86...
   283                                  ;
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;
   288                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   289                                  ;
   290                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   291                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   292                                  ;
   293                                  ;       0.......        Segment is not present in memory (triggers int 11)
   294                                  ;       1.......        Segment is present in memory
   295                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   296                                  ;       ...0....        Segment is a system segment
   297                                  ;       ...00010                Local Descriptor Table
   298                                  ;       ...00101                Task Gate
   299                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   300                                  ;       ...01100                Call Gate (386)
   301                                  ;       ...01110                Interrupt Gate (386)
   302                                  ;       ...01111                Trap Gate (386)
   303                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   304                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   305                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   309                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   310                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   311                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   312                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   313                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   314                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   315                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ;
   318                                  ;       Firmware-Defined Values
   319                                  ;
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;
   323                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   324                                  ;
   325                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   326                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   330                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   331                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   332                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   333                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   334                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   335                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   336                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   337                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   338                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   339                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ;
   342                                  ;       Standards-Based Values
   343                                  ;
   344                                  ;-----------------------------------------------------------------------------------------------------------------------
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;
   347                                  ;       ASCII                                                                   EASCII...
   348                                  ;
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   351                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   352                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   353                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   354                                  EASCIISPACE             equ     020h                                            ;space
   355                                  EASCIIUPPERA            equ     041h                                            ;'A'
   356                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   357                                  EASCIILOWERA            equ     061h                                            ;'a'
   358                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   359                                  EASCIITILDE             equ     07Eh                                            ;'~'
   360                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   361                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   362                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   363                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   364                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   365                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   366                                  EASCIICASE              equ     00100000b                                       ;case bit
   367                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ;
   370                                  ;       Operating System Values
   371                                  ;
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;
   375                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   376                                  ;
   377                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   378                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   379                                  ;
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   382                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   383                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   384                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   385                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   386                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   387                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  ;       Console Constants                                                       ECON...
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ECONCOLS                equ     80                                              ;columns per row
   392                                  ECONROWS                equ     24                                              ;console rows
   393                                  ECONOIAROW              equ     24                                              ;operator information area row
   394                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   395                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   396                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   397                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   398                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   401                                  ;-----------------------------------------------------------------------------------------------------------------------
   402                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   403                                  EGDTCGA                 equ     020h                                            ;cga video selector
   404                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   405                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   406                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   407                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   408                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   409                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;       Keyboard Flags                                                          EKEYF...
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   414                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   415                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   416                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   417                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   418                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   419                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   420                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   421                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   422                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   423                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;       Kernel Constants                                                        EKRN...
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   428                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   429                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   430                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   431                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   432                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ;       Memory Management Constants                                             EMEM...
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   441                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   442                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   443                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;       Message Identifiers                                                     EMSG...
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   448                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   449                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   450                                  ;=======================================================================================================================
   451                                  ;
   452                                  ;       Structures
   453                                  ;
   454                                  ;=======================================================================================================================
   455                                  ;-----------------------------------------------------------------------------------------------------------------------
   456                                  ;
   457                                  ;       MEMBLOCK
   458                                  ;
   459                                  ;       The MEMBLOCK structure defines a memory block.
   460                                  ;
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  struc                   MEMBLOCK
   463 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   464 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   465 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   466 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   467 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   468 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   469 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   470 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   471                                  EMEMBLOCKLEN            equ     ($-.signature)
   472                                  endstruc
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;
   475                                  ;       MEMROOT
   476                                  ;
   477                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   478                                  ;
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  struc                   MEMROOT
   481 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   482 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   483 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   484 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   485 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   486 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   487                                  EMEMROOTLEN             equ     ($-.firstcontig)
   488                                  endstruc
   489                                  ;-----------------------------------------------------------------------------------------------------------------------
   490                                  ;
   491                                  ;       MQUEUE
   492                                  ;
   493                                  ;       The MQUEUE structure maps memory used for a message queue.
   494                                  ;
   495                                  ;-----------------------------------------------------------------------------------------------------------------------
   496                                  struc                   MQUEUE
   497 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   498 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   499 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   500                                  endstruc
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;       OSDATA
   504                                  ;
   505                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   506                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   507                                  ;
   508                                  ;-----------------------------------------------------------------------------------------------------------------------
   509                                  struc                   OSDATA
   510 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   511 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   512 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   513 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   514 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   515 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   516 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   517 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   518 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   519 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   520 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   521 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   522 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   523 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   524 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   525 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   526 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   527 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   528 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   529 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   530 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   531 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   532 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   533 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   534 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   535 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   536 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   537 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   538 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   539 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   540 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   541 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   542 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   543 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   544 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   545 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   546 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   547 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   548 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   549 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   550 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   551 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   552 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   553 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   554 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   555 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   556 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   557 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   558 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   559 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   560 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   561 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   562 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   563 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   564 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   565 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   566 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   567 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   568 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   569 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   570 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   571 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   572 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   573 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   574 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   575 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   576 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   577 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   578 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   579 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   580 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   581 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   582 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   583 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   584 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   585 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   586 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   587 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   588 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   589 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   590 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   591 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   592 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   593 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   594 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   595 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   596 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   597 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   598 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   599 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   600 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   601 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   602 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   603 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   604 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   605 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   606 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   607 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   608 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   609 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   610 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   611                                  ;-----------------------------------------------------------------------------------------------------------------------
   612                                  ;
   613                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   614                                  ;
   615                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   616                                  ;
   617                                  ;-----------------------------------------------------------------------------------------------------------------------
   618                                  ECONDATA                equ     ($)
   619 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   620 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   621 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   622 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   623 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   624 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   625 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   626 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   627 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   628 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   629 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   630 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   631 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   632 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   633 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   634 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   635 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   636 00000820 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   637 00000870 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   638 000008C0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   639 00000910 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   640 0000091B <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   641 00000926 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   642 00000931 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   643                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   644                                  ;-----------------------------------------------------------------------------------------------------------------------
   645                                  ;
   646                                  ;       End of OS Variables
   647                                  ;
   648                                  ;-----------------------------------------------------------------------------------------------------------------------
   649                                  endstruc
   650                                  ;-----------------------------------------------------------------------------------------------------------------------
   651                                  ;
   652                                  ;       Macros
   653                                  ;
   654                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   655                                  ;
   656                                  ;-----------------------------------------------------------------------------------------------------------------------
   657                                  %macro                  mint    1
   658                                  _%1                     equ     ($-$$) / EX86DESCLEN
   659                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   660                                  %endmacro
   661                                  %macro                  mtrap   1
   662                                  _%1                     equ     ($-$$) / EX86DESCLEN
   663                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   664                                  %endmacro
   665                                  %macro                  menter  1
   666                                  ?%1                     equ     ($-$$)
   667                                  %endmacro
   668                                  %macro                  tsvce   1
   669                                  e%1                     equ     ($-tsvc)/4
   670                                                          dd      %1
   671                                  %endmacro
   672                                  %ifdef BUILDBOOT
   673                                  ;=======================================================================================================================
   674                                  ;
   675                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   676                                  ;
   677                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   678                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   679                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   680                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   681                                  ;
   682                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   683                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   684                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   685                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   686                                  ;       immediately followed by a disk parameter table.
   687                                  ;
   688                                  ;=======================================================================================================================
   689                                                          cpu     8086                                            ;assume minimal CPU
   690                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   691                                                          bits    16                                              ;16-bit code at power-up
   692                                  %ifdef BUILDPREP
   693                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   694                                  %else
   695 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   696                                  %endif
   697                                  ;-----------------------------------------------------------------------------------------------------------------------
   698                                  ;
   699                                  ;       Disk Parameter Table
   700                                  ;
   701                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   702                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   703                                  ;
   704                                  ;-----------------------------------------------------------------------------------------------------------------------
   705 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   706 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   707 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   708 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   709 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   710 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   711 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   712 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   713 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   714                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   715 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   716 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   717 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   718                                  ;
   719                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   720                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   721                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   722                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   723                                  ;       given several possible starting values for CS:IP.
   724                                  ;
   725                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   726 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   727                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   728 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   729 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   730 00000025 B104                                            mov     cl,4                                            ;shift count
   731 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   732 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   733 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   734                                  ;
   735                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   736                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   737                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   738                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   739                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   740                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   741                                  ;
   742 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   743 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   744 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   745 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   746 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   747                                  ;
   748                                  ;       Our boot addressability is now set up according to the following diagram.
   749                                  ;
   750                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   751                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   752                                  ;                               |  256 = 100h bytes                             |
   753                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   754                                  ;                               |  Boot Sector (vstart=0100h)                   |
   755                                  ;                               |  1 sector = 512 = 200h bytes                  |
   756                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   757                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   758                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   759                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   760                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   761                                  ;                               |  2 sectors = 1024 = 400h bytes
   762                                  ;                       009400  +-----------------------------------------------+ DS:1900
   763                                  ;
   764                                  ;       On entry, DL indicates the drive being booted from.
   765                                  ;
   766 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   767                                  ;
   768                                  ;       Compute directory i/o buffer address.
   769                                  ;
   770 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   771 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   772 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   773 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   774                                  ;
   775                                  ;       Compute segment where os.com will be loaded.
   776                                  ;
   777 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   778 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   779 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   780 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   781                                  ;
   782                                  ;       Set the video mode to 80 column, 25 row, text.
   783                                  ;
   784 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   785 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   786                                  ;
   787                                  ;       Write a message to the console so we know we have our addressability established.
   788                                  ;
   789 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   790 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   791                                  ;
   792                                  ;       Initialize the number of directory sectors to search.
   793                                  ;
   794 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   795 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   796                                  ;
   797                                  ;       Compute number of directory sectors and initialize overhead count.
   798                                  ;
   799 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   800 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   801 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   802 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   803                                  ;
   804                                  ;       Compute directory entries per sector.
   805                                  ;
   806 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   807 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   808 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   809                                  ;
   810                                  ;       Compute first logical directory sector and update overhead count.
   811                                  ;
   812 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   813 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   814 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   815 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   816 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   817 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   818                                  ;
   819                                  ;       Read directory sector.
   820                                  ;
   821 0000008E B001                    .30                     mov     al,1                                            ;sector count
   822 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   823 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   824 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   825                                  ;
   826                                  ;       Setup variables to search this directory sector.
   827                                  ;
   828 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   829 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   830 000000A1 7603                                            jna     .40                                             ;no, continue
   831 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   832 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   833 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   834 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   835                                  ;
   836                                  ;       Loop through directory sectors searching for kernel program.
   837                                  ;
   838 000000B1 56                      .50                     push    si                                              ;save kernel name address
   839 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   840 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   841 000000B6 FC                                              cld                                                     ;forward strings
   842 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   843 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   844 000000BA 5E                                              pop     si                                              ;restore kernel name address
   845 000000BB 7418                                            je      .60                                             ;exit loop if found
   846 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   847 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   848 000000C2 75ED                                            jnz     .50                                             ;next entry
   849                                  ;
   850                                  ;       Repeat search if we are not at the end of the directory.
   851                                  ;
   852 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   853 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   854 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   855 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   856 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   857                                  ;
   858                                  ;       If we find the kernel program in the directory, read the FAT.
   859                                  ;
   860 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   861 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   862 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   863 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   864 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   865 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   866                                  ;
   867                                  ;       Get the starting cluster of the kernel program and target address.
   868                                  ;
   869 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   870 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   871                                  ;
   872                                  ;       Read each program cluster into RAM.
   873                                  ;
   874 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   875 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   876 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   877 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   878 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   879 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   880 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   881 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   882 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   883                                  ;
   884                                  ;       Update buffer pointer for next cluster.
   885                                  ;
   886 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   887 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   888 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   889 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   890 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   891                                  ;
   892                                  ;       Compute next cluster number.
   893                                  ;
   894 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   895 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   896 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   897 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   898 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   899 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   900 00000120 83E701                                          and     di,1                                            ;get low bit
   901 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   902 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   903 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   904                                  ;
   905                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   906                                  ;
   907 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   908 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   909 00000130 B104                                            mov     cl,4                                            ;shift count
   910 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   911 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   912 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   913 0000013A 75B2                                            jne     .70                                             ;no, continue
   914                                  ;
   915                                  ;       Transfer control to the operating system program.
   916                                  ;
   917 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   918 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   919 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   920                                  ;
   921                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   922                                  ;
   923 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   924 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   925 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   926 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   927 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   928 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   929 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   930 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   931 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   932 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   933                                  ;
   934                                  ;       Try maxtries times to read sector.
   935                                  ;
   936 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   937 00000160 53                      .10                     push    bx                                              ;save buffer address
   938 00000161 51                                              push    cx                                              ;save retry count
   939 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   940 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   941 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   942 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   943 0000016F 59                                              pop     cx                                              ;restore retry count
   944 00000170 5B                                              pop     bx                                              ;restore buffer address
   945 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   946 00000173 E2EB                                            loop    .10                                             ;retry
   947                                  ;
   948                                  ;       Handle disk error: convert to ASCII and store in error string.
   949                                  ;
   950 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   951 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   952 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   953 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   954 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   955 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   956 00000183 7203                                            jb      .20                                             ;continue if numeral
   957 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   958 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   959 0000018A 7203                                            jb      .30                                             ;continue if numeral
   960 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   961 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   962 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   963 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   964                                  ;
   965                                  ;       Wait for a key press.
   966                                  ;
   967 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   968 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   969 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   970 0000019E FB                                              sti                                                     ;enable maskable interrupts
   971 0000019F F4                                              hlt                                                     ;wait for interrupt
   972 000001A0 EBF6                                            jmp     .10                                             ;repeat
   973                                  ;
   974                                  ;       Reset the system.
   975                                  ;
   976 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   977 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   978 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   979 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   980 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   981                                  ;
   982                                  ;       Display text message.
   983                                  ;
   984 000001AA FC                      BootPrint               cld                                                     ;forward strings
   985 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   986 000001AC 84C0                                            test    al,al                                           ;end of string?
   987 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   988 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   989 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   990 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   991 000001B6 C3                      BootReturn              ret                                                     ;return
   992                                  ;-----------------------------------------------------------------------------------------------------------------------
   993                                  ;
   994                                  ;       Constants
   995                                  ;
   996                                  ;-----------------------------------------------------------------------------------------------------------------------
   997 000001B7 90                                              align   2
   998 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   999 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   999 000001C3 4F4D               
  1000 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1000 000001CE 530D0A00           
  1001 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1001 000001DB 7220               
  1002 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1003 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1003 000001E9 6700               
  1004                                  ;-----------------------------------------------------------------------------------------------------------------------
  1005                                  ;
  1006                                  ;       Work Areas
  1007                                  ;
  1008                                  ;-----------------------------------------------------------------------------------------------------------------------
  1009 000001EB 90                                              align   2
  1010 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1011 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1012 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1013 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1014 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1015                                  wwReadCountCommand      equ     $                                               ;read count and command
  1016 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1017 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1018                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1019 000001F8 00                      wbDrive                 db      0                                               ;drive
  1020 000001F9 00                      wbHead                  db      0                                               ;head
  1021                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1022 000001FA 00                                              db      0                                               ;sector
  1023 000001FB 00                      wbTrack                 db      0                                               ;track
  1024 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1025 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1026                                  %endif
  1027                                  %ifdef BUILDPREP
  1028                                  ;=======================================================================================================================
  1029                                  ;
  1030                                  ;       Diskette Preparation Code
  1031                                  ;
  1032                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1033                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1034                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1035                                  ;
  1036                                  ;=======================================================================================================================
  1037                                  ;
  1038                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1039                                  ;
  1040                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1041                                                          call    BootPrint                                       ;display message
  1042                                  ;
  1043                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1044                                  ;
  1045                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1046                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1047                                                          jnz     .20                                             ;continue if key pressed
  1048                                                          sti                                                     ;enable interrupts
  1049                                                          hlt                                                     ;wait for interrupt
  1050                                                          jmp     .10                                             ;repeat
  1051                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1052                                                          je      .30                                             ;yes, branch
  1053                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1054                                                          jne     .10                                             ;no, repeat
  1055                                                          jmp     .120                                            ;yes, exit program
  1056                                  ;
  1057                                  ;       Display writing-sector message and patch the JMP instruction.
  1058                                  ;
  1059                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1060                                                          call    BootPrint                                       ;display message
  1061                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1062                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1063                                                          mov     [bx],ax                                         ;update the JMP instruction
  1064                                  ;
  1065                                  ;       Try to read the boot sector.
  1066                                  ;
  1067                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1068                                  .40                     push    cx                                              ;save remaining tries
  1069                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1070                                                          mov     dx,0                                            ;head zero, drive zero
  1071                                                          mov     cx,1                                            ;track zero, sector one
  1072                                                          mov     al,1                                            ;one sector
  1073                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1074                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1075                                                          pop     cx                                              ;restore remaining retries
  1076                                                          jnc     .50                                             ;skip ahead if successful
  1077                                                          loop    .40                                             ;try again
  1078                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1079                                                          jmp     .70                                             ;branch to error routine
  1080                                  ;
  1081                                  ;       Copy diskette parms from input buffer to output buffer.
  1082                                  ;
  1083                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1084                                                          add     si,11                                           ;skip over JMP and system ID
  1085                                                          mov     di,Boot                                         ;output buffer address
  1086                                                          add     di,11                                           ;skip over JMP and system ID
  1087                                                          mov     cx,19                                           ;length of diskette parameters
  1088                                                          cld                                                     ;forward string copies
  1089                                                          rep     movsb                                           ;copy diskette parameters
  1090                                  ;
  1091                                  ;       Try to write boot sector to diskette.
  1092                                  ;
  1093                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1094                                  .60                     push    cx                                              ;save remaining tries
  1095                                                          mov     bx,Boot                                         ;output buffer address
  1096                                                          mov     dx,0                                            ;head zero, drive zero
  1097                                                          mov     cx,1                                            ;track zero, sector one
  1098                                                          mov     al,1                                            ;one sector
  1099                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1100                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1101                                                          pop     cx                                              ;restore remaining retries
  1102                                                          jnc     .100                                            ;skip ahead if successful
  1103                                                          loop    .60                                             ;try again
  1104                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1105                                  ;
  1106                                  ;       Convert the error code to ASCII and display the error message.
  1107                                  ;
  1108                                  .70                     push    ax                                              ;save error code
  1109                                                          mov     al,ah                                           ;copy error code
  1110                                                          mov     ah,0                                            ;AX = error code
  1111                                                          mov     dl,10h                                          ;hexadecimal divisor
  1112                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1113                                                          or      ax,03030h                                       ;add ASCII zone digits
  1114                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1115                                                          jb      .80                                             ;yes, continue
  1116                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1117                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1118                                                          jb      .90                                             ;yes, continue
  1119                                                          add     al,7                                            ;no, make ASCII
  1120                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1121                                                          call    BootPrint                                       ;write error message
  1122                                                          pop     ax                                              ;restore error code
  1123                                  ;
  1124                                  ;       Display the completion message.
  1125                                  ;
  1126                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1127                                                          mov     al,ah                                           ;BIOS return code
  1128                                                          cmp     al,0                                            ;success?
  1129                                                          je      .110                                            ;yes, continue
  1130                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1131                                                          cmp     al,1                                            ;disk parameter error?
  1132                                                          je      .110                                            ;yes, continue
  1133                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1134                                                          cmp     al,2                                            ;address mark not found?
  1135                                                          je      .110                                            ;yes, continue
  1136                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1137                                                          cmp     al,3                                            ;protected disk?
  1138                                                          je      .110                                            ;yes, continue
  1139                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1140                                                          cmp     al,6                                            ;diskette removed?
  1141                                                          je      .110                                            ;yes, continue
  1142                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1143                                                          cmp     al,80H                                          ;drive timed out?
  1144                                                          je      .110                                            ;yes, continue
  1145                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1146                                  .110                    call    BootPrint                                       ;display result message
  1147                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1148                                                          int     021h                                            ;terminate DOS program
  1149                                                          ret                                                     ;return (should not execute)
  1150                                  ;-----------------------------------------------------------------------------------------------------------------------
  1151                                  ;
  1152                                  ;       Diskette Preparation Messages
  1153                                  ;
  1154                                  ;-----------------------------------------------------------------------------------------------------------------------
  1155                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1156                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1157                                                          db      13,10
  1158                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1159                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1160                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1161                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1162                                                          db      13,10,0
  1163                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1164                                                          db      13,10,0
  1165                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1166                                                          db      13,10,0
  1167                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1168                                                          db      13,10,0
  1169                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1170                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1171                                                          db      13,10,0
  1172                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1173                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1174                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1175                                                          db      13,10,"and retry."
  1176                                                          db      13,10,0
  1177                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1178                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1179                                                          db      13,10,"using another diskette."
  1180                                                          db      13,10,0
  1181                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1182                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1183                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1184                                                          db      13,10,0
  1185                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1186                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1187                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1188                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1189                                                          db      13,10,"is properly inserted in the diskette drive."
  1190                                                          db      13,10,0
  1191                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1192                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1193                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1194                                                          db      13,10,0
  1195                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1196                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1197                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1198                                                          db      13,10,0
  1199                                  wcPrepInBuf             equ     $
  1200                                  %endif
  1201                                  %ifdef BUILDDISK
  1202                                  ;=======================================================================================================================
  1203                                  ;
  1204                                  ;       File Allocation Tables
  1205                                  ;
  1206                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1207                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1208                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1209                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1210                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1211                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1212                                  ;       the last cluster in the chain.
  1213                                  ;
  1214                                  ;       Every three bytes encode two FAT entries as follows:
  1215                                  ;
  1216                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1217                                  ;
  1218                                  ;=======================================================================================================================
  1219                                  ;-----------------------------------------------------------------------------------------------------------------------
  1220                                  ;
  1221                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1222                                  ;
  1223                                  ;-----------------------------------------------------------------------------------------------------------------------
  1224                                  section                 fat1                                                    ;first copy of FAT
  1225 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1226 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1227 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1228 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1229 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1230 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1231 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1232 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1233 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1234 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1235 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1236 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238                                  ;
  1239                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1240                                  ;
  1241                                  ;-----------------------------------------------------------------------------------------------------------------------
  1242                                  section                 fat2                                                    ;second copy of FAT
  1243 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1244 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1245 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1246 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1247 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1248 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1249 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1250 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1251 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1252 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1253 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1254 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1255                                  ;-----------------------------------------------------------------------------------------------------------------------
  1256                                  ;
  1257                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1258                                  ;
  1259                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1260                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1261                                  ;       copy.
  1262                                  ;
  1263                                  ;-----------------------------------------------------------------------------------------------------------------------
  1264                                  section                 dir                                                     ;diskette directory
  1265 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1265 00000009 4F4D               
  1266 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1267 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1268 00000016 0000                                            dw      0h                                              ;time
  1269 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1270 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1271 0000001A 0200                                            dw      2                                               ;first cluster
  1272 0000001C 00540000                                        dd      05400h                                          ;file size
  1273 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1274                                  %endif
  1275                                  %ifdef BUILDCOM
  1276                                  ;=======================================================================================================================
  1277                                  ;
  1278                                  ;       OS.COM
  1279                                  ;
  1280                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1281                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1282                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1283                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1284                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1285                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1286                                  ;
  1287                                  ;       Our loader addressability is set up according to the following diagram.
  1288                                  ;
  1289                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1290                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1291                                  ;                               |  256 = 100h bytes                             |
  1292                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1293                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1294                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1295                                  ;                       007e00  +-----------------------------------------------+
  1296                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1297                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1298                                  ;                               |                                               |
  1299                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1300                                  ;                               |                                               |
  1301                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1302                                  ;                               |  Loader Code                                  |
  1303                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1304                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1305                                  ;
  1306                                  ;=======================================================================================================================
  1307                                  ;-----------------------------------------------------------------------------------------------------------------------
  1308                                  ;
  1309                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1310                                  ;
  1311                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1312                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1313                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1314                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1315                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1316                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1317                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1318                                  ;       registers.
  1319                                  ;
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                                          cpu     8086                                            ;assume minimal CPU
  1322                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1323                                                          bits    16                                              ;this is 16-bit code
  1324 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1325 00000001 1F                                              pop     ds                                              ;...as our data segment
  1326 00000002 0E                                              push    cs                                              ;use the code segment
  1327 00000003 07                                              pop     es                                              ;...as our extra segment
  1328                                  ;
  1329                                  ;       Write a message to the console so we know we have our addressability established.
  1330                                  ;
  1331 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1332 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1333                                  ;
  1334                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1335                                  ;
  1336 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1337 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1338 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1339 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1340                                                          cpu     386                                             ;allow 80386 instructions
  1341 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1342 00000017 E89600                                          call    PutTTYString                                    ;display message
  1343                                  ;
  1344                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1345                                  ;
  1346 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1347 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1348 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1349 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1350 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1351 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1352 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1353 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1354 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1355 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1356                                  ;
  1357                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1358                                  ;
  1359 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1360 00000038 07                                              pop     es                                              ;... as target segment
  1361 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1362 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1363 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1364 00000041 FC                                              cld                                                     ;forward strings
  1365 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1366 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1367 00000047 E86600                                          call    PutTTYString                                    ;display message
  1368                                  ;
  1369                                  ;       Switch to protected mode.
  1370                                  ;
  1371 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1372 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1373 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1374 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1375 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1376 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1377 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1378 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1379 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1380 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1381 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1382                                  ;
  1383                                  ;       Enable hardware and maskable interrupts.
  1384                                  ;
  1385 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1386 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1387 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1388 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1389                                  ;
  1390                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1391                                  ;
  1392 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1393 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1394 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1395                                  ;-----------------------------------------------------------------------------------------------------------------------
  1396                                  ;
  1397                                  ;       Routine:        LoaderExit
  1398                                  ;
  1399                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1400                                  ;
  1401                                  ;       In:             DS:SI   string address
  1402                                  ;
  1403                                  ;-----------------------------------------------------------------------------------------------------------------------
  1404 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1405                                  ;
  1406                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1407                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1408                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1409                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1410                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1411                                  ;
  1412 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1413 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1414 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1415 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1416 00000085 F4                                              hlt                                                     ;wait for interrupt
  1417 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1418                                  ;
  1419                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1420                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1421                                  ;       HLT until the system resets.
  1422                                  ;
  1423 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1424 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1425 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1426 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1427 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429                                  ;
  1430                                  ;       Routine:        GetCPUType
  1431                                  ;
  1432                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1433                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1434                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1435                                  ;
  1436                                  ;       Out:            AX      0 = 808x, v20, etc.
  1437                                  ;                               1 = 80186
  1438                                  ;                               2 = 80286
  1439                                  ;                               3 = 80386
  1440                                  ;
  1441                                  ;-----------------------------------------------------------------------------------------------------------------------
  1442 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1443 00000092 B120                                            mov     cl,32                                           ;shift count
  1444 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1445 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1446 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1447                                                          cpu     186
  1448 0000009A 54                                              push    sp                                              ;save stack pointer
  1449 0000009B 59                                              pop     cx                                              ;...into cx
  1450 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1451 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1452                                                          cpu     286
  1453 000000A0 40                                              inc     ax                                              ;AX = 2
  1454 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1455 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1456 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1457 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1458 000000AE 40                                              inc     ax                                              ;AX = 3
  1459 000000AF C3                      .10                     ret                                                     ;return
  1460                                  ;-----------------------------------------------------------------------------------------------------------------------
  1461                                  ;
  1462                                  ;       Routine:        PutTTYString
  1463                                  ;
  1464                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1465                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1466                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1467                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1468                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1469                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1470                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1471                                  ;                       to LODSB is not needed.
  1472                                  ;
  1473                                  ;       In:             DS:SI   address of string
  1474                                  ;
  1475                                  ;       Out:            DF      0
  1476                                  ;                       ZF      1
  1477                                  ;                       AL      0
  1478                                  ;
  1479                                  ;-----------------------------------------------------------------------------------------------------------------------
  1480 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1481 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1482 000000B2 84C0                                            test    al,al                                           ;end of string?
  1483 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1484 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1485 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1486 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1487 000000BC C3                      .20                     ret                                                     ;return
  1488                                  ;-----------------------------------------------------------------------------------------------------------------------
  1489                                  ;
  1490                                  ;       Loader Data
  1491                                  ;
  1492                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1493                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1494                                  ;
  1495                                  ;-----------------------------------------------------------------------------------------------------------------------
  1496 000000BD 90                                              align   2
  1497 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1498 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1499 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1500 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1501 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1501 000000D1 74696E672073797374-
  1501 000000DA 656D20726571756972-
  1501 000000E3 657320616E20693338-
  1501 000000EC 36206F72206C617465-
  1501 000000F5 722070726F63657373-
  1501 000000FE 6F722E0D0A         
  1502 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1502 0000010C 65737320616E79206B-
  1502 00000115 657920746F20726573-
  1502 0000011E 746172742074686520-
  1502 00000127 636F6D70757465722E-
  1502 00000130 0D0A00             
  1503 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1504 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1504 00000145 7265640D0A00       
  1505 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1505 00000154 616465640D0A00     
  1506 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1506 00000164 4F530D0A00         
  1507 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1508                                  ;=======================================================================================================================
  1509                                  ;
  1510                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1511                                  ;
  1512                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1513                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1514                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1515                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1516                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1517                                  ;
  1518                                  ;=======================================================================================================================
  1519                                  ;=======================================================================================================================
  1520                                  ;
  1521                                  ;       Kernel Tables
  1522                                  ;
  1523                                  ;=======================================================================================================================
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1527                                  ;
  1528                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1529                                  ;       first descriptor must be all nulls.
  1530                                  ;
  1531                                  ;       6   5         4         3         2         1         0
  1532                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1533                                  ;       ----------------------------------------------------------------
  1534                                  ;       h......hffffmmmma......ab......................bn..............n
  1535                                  ;
  1536                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1537                                  ;               ffff                                                            flags
  1538                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1539                                  ;                       a......a                                                access
  1540                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1541                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1542                                  ;
  1543                                  ;       00000000                                                                all areas have base addresses below 2^24
  1544                                  ;               0...                                                            single-byte size granularity
  1545                                  ;               1...                                                            4-kilobyte size granularity
  1546                                  ;               .0..                                                            16-bit default for code segments
  1547                                  ;               .1..                                                            32-bit default for code segments
  1548                                  ;               ..0.                                                            intel-reserved; should be zero
  1549                                  ;               ...0                                                            available for operating system use
  1550                                  ;                   0000                                                        segment is less than 2^16 in size
  1551                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1552                                  ;                       1.......                                                segment is present in memory
  1553                                  ;                       .00.....                                                segment is of privilege level 0
  1554                                  ;                       ...0....                                                segment is of system or gate type
  1555                                  ;                       ...00010                                                local decriptor table (LDT)
  1556                                  ;                       ...01001                                                task state segment (TSS) available
  1557                                  ;                       ...01011                                                task state segment (TSS) busy
  1558                                  ;                       ...10...                                                data segment
  1559                                  ;                       ...10011                                                writable data (accessed)
  1560                                  ;                       ...11...                                                code segment
  1561                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1562                                  ;
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  section                 gdt                                                     ;global descriptor table
  1565 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1566 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1567 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1568 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1569 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1570 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1571 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1572 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1573 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1574 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1575 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1576 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1577 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1578 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1579 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                  ;
  1582                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1583                                  ;
  1584                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1585                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1586                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1587                                  ;
  1588                                  ;       6   5         4         3         2         1         0
  1589                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1590                                  ;       ----------------------------------------------------------------
  1591                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1592                                  ;
  1593                                  ;       h...h   high-order offset (bits 16-31)
  1594                                  ;       P       present (0=unused interrupt)
  1595                                  ;       zz      descriptor privilege level
  1596                                  ;       S       storage segment (must be zero for IDT)
  1597                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1598                                  ;       S...S   handling code selector in GDT
  1599                                  ;       l...l   lo-order offset (bits 0-15)
  1600                                  ;
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  section                 idt                                                     ;interrupt descriptor table
  1603                                                          mint    dividebyzero                                    ;00 divide by zero
  1603                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1603 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1604                                                          mint    singlestep                                      ;01 single step
  1604                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1604 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1605                                                          mint    nmi                                             ;02 non-maskable
  1605                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1605 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1606                                                          mint    break                                           ;03 break
  1606                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1606 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1607                                                          mint    into                                            ;04 into
  1607                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1607 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1608                                                          mint    bounds                                          ;05 bounds
  1608                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1608 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1609                                                          mint    badopcode                                       ;06 bad op code
  1609                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1609 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1610                                                          mint    nocoproc                                        ;07 no coprocessor
  1610                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1610 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1611                                                          mint    doublefault                                     ;08 double-fault
  1611                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1611 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1612                                                          mint    operand                                         ;09 operand
  1612                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1612 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1613                                                          mint    badtss                                          ;0a bad TSS
  1613                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1613 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1614                                                          mint    notpresent                                      ;0b not-present
  1614                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1614 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1615                                                          mint    stacklimit                                      ;0c stack limit
  1615                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1615 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1616                                                          mint    protection                                      ;0d general protection fault
  1616                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1616 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1617                                                          mint    int14                                           ;0e (reserved)
  1617                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1617 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1618                                                          mint    int15                                           ;0f (reserved)
  1618                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1618 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1619                                                          mint    coproccalc                                      ;10 (reserved)
  1619                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1619 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1620                                                          mint    int17                                           ;11 (reserved)
  1620                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1620 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1621                                                          mint    int18                                           ;12 (reserved)
  1621                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1621 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1622                                                          mint    int19                                           ;13 (reserved)
  1622                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1622 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1623                                                          mint    int20                                           ;14 (reserved)
  1623                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1623 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1624                                                          mint    int21                                           ;15 (reserved)
  1624                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1624 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1625                                                          mint    int22                                           ;16 (reserved)
  1625                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1625 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1626                                                          mint    int23                                           ;17 (reserved)
  1626                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1626 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1627                                                          mint    int24                                           ;18 (reserved)
  1627                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1627 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1628                                                          mint    int25                                           ;19 (reserved)
  1628                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1628 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1629                                                          mint    int26                                           ;1a (reserved)
  1629                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1629 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1630                                                          mint    int27                                           ;1b (reserved)
  1630                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1630 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1631                                                          mint    int28                                           ;1c (reserved)
  1631                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1631 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1632                                                          mint    int29                                           ;1d (reserved)
  1632                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1632 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1633                                                          mint    int30                                           ;1e (reserved)
  1633                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1633 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1634                                                          mint    int31                                           ;1f (reserved)
  1634                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1634 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1635                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1635                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1635 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1636                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1636                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1636 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1637                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1637                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1637 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1638                                                          mtrap   com2                                            ;23 IRQ3 com2
  1638                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1638 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1639                                                          mtrap   com1                                            ;24 IRQ4 com1
  1639                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1639 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1640                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1640                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1640 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1641                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1641                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1641 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1642                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1642                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1642 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1643                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1643                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1643 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1644                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1644                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1644 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1645                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1645                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1645 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1646                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1646                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1646 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1647                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1647                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1647 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1648                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1648                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1648 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1649                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1649                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1649 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1650                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1650                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1650 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1651                                                          mtrap   svc                                             ;30 OS services
  1651                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1651 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1652 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1653                                  ;=======================================================================================================================
  1654                                  ;
  1655                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1656                                  ;
  1657                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1658                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1659                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1660                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1661                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1662                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1663                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1664                                  ;
  1665                                  ;=======================================================================================================================
  1666                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1667                                                          cpu     386                                             ;allow 80386 instructions
  1668                                                          bits    32                                              ;this is 32-bit code
  1669                                  ;=======================================================================================================================
  1670                                  ;
  1671                                  ;       CPU Interrupt Handlers
  1672                                  ;
  1673                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1674                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1675                                  ;
  1676                                  ;=======================================================================================================================
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                  ;
  1679                                  ;       INT0    Divide By Zero
  1680                                  ;
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                                          menter  dividebyzero                                    ;divide by zero
  1682                              <1> ?%1 equ ($-$$)
  1683 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1684 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1685 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       INT1    Single Step
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                                          menter  singlestep                                      ;single step
  1691                              <1> ?%1 equ ($-$$)
  1692 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1693 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1694 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT2    Non-Maskable Interrupt
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  nmi                                             ;non-maskable
  1700                              <1> ?%1 equ ($-$$)
  1701 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1702 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1703 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT3    Break
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  break                                           ;break
  1709                              <1> ?%1 equ ($-$$)
  1710 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1711 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1712 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT4    Into
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  into                                            ;into
  1718                              <1> ?%1 equ ($-$$)
  1719 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1720 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1721 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT5    Bounds
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  bounds                                          ;bounds
  1727                              <1> ?%1 equ ($-$$)
  1728 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1729 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1730 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT6    Bad Operation Code
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  badopcode                                       ;bad opcode interrupt
  1736                              <1> ?%1 equ ($-$$)
  1737 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1738 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1739 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT7    No Coprocessor
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1745                              <1> ?%1 equ ($-$$)
  1746 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1747 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1748 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT8    Double Fault
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  doublefault                                     ;doublefault interrupt
  1754                              <1> ?%1 equ ($-$$)
  1755 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1756 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1757 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT9    Operand
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  operand                                         ;operand interrupt
  1763                              <1> ?%1 equ ($-$$)
  1764 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1765 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1766 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT10   Bad Task State Segment
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  badtss                                          ;bad TSS interrupt
  1772                              <1> ?%1 equ ($-$$)
  1773 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1774 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1775 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT11   Not Present
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  notpresent                                      ;not present interrupt
  1781                              <1> ?%1 equ ($-$$)
  1782 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1783 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1784 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT12   Stack Limit
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  stacklimit                                      ;stack limit interrupt
  1790                              <1> ?%1 equ ($-$$)
  1791 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1792 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1793 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT13   General Protection Fault
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  protection                                      ;protection fault interrupt
  1799                              <1> ?%1 equ ($-$$)
  1800 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1801 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1802 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT14   Reserved
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  int14                                           ;(reserved)
  1808                              <1> ?%1 equ ($-$$)
  1809 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1810 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1811 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT15   Reserved
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  int15                                           ;(reserved)
  1817                              <1> ?%1 equ ($-$$)
  1818 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1819 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1820 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT16   Coprocessor Calculation
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  coproccalc                                      ;coprocessor calculation
  1826                              <1> ?%1 equ ($-$$)
  1827 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1828 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1829 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT17   Reserved
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  int17                                           ;(reserved)
  1835                              <1> ?%1 equ ($-$$)
  1836 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1837 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1838 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       INT18   Reserved
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  int18                                           ;(reserved)
  1844                              <1> ?%1 equ ($-$$)
  1845 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1846 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1847 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       INT19   Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  int19                                           ;(reserved)
  1853                              <1> ?%1 equ ($-$$)
  1854 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1855 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1856 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;       INT20   Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                                          menter  int20                                           ;(reserved)
  1862                              <1> ?%1 equ ($-$$)
  1863 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1864 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1865 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;       INT21   Reserved
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                                          menter  int21                                           ;(reserved)
  1871                              <1> ?%1 equ ($-$$)
  1872 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1873 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1874 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       INT22   Reserved
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                                          menter  int22                                           ;(reserved)
  1880                              <1> ?%1 equ ($-$$)
  1881 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1882 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1883 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;       INT23   Reserved
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                                          menter  int23                                           ;(reserved)
  1889                              <1> ?%1 equ ($-$$)
  1890 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1891 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1892 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  ;
  1895                                  ;       INT24   Reserved
  1896                                  ;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                                          menter  int24                                           ;(reserved)
  1898                              <1> ?%1 equ ($-$$)
  1899 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1900 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1901 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  ;
  1904                                  ;       INT25   Reserved
  1905                                  ;
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                                          menter  int25                                           ;(reserved)
  1907                              <1> ?%1 equ ($-$$)
  1908 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1909 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1910 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  ;
  1913                                  ;       INT26   Reserved
  1914                                  ;
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                                          menter  int26                                           ;(reserved)
  1916                              <1> ?%1 equ ($-$$)
  1917 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1918 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1919 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  ;
  1922                                  ;       INT27   Reserved
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                                          menter  int27                                           ;(reserved)
  1925                              <1> ?%1 equ ($-$$)
  1926 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1927 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1928 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       INT28   Reserved
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  int28                                           ;(reserved)
  1934                              <1> ?%1 equ ($-$$)
  1935 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1936 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1937 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;       INT29   Reserved
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                                          menter  int29                                           ;(reserved)
  1943                              <1> ?%1 equ ($-$$)
  1944 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1945 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1946 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                  ;
  1949                                  ;       INT30   Reserved
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                                          menter  int30                                           ;(reserved)
  1952                              <1> ?%1 equ ($-$$)
  1953 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1954 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1955 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;       INT31   Reserved
  1959                                  ;
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                                          menter  int31                                           ;(reserved)
  1961                              <1> ?%1 equ ($-$$)
  1962 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1963 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1964 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;       Routine:        ReportInterrupt
  1968                                  ;
  1969                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1970                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1971                                  ;
  1972                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1973                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1974                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1975                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1976                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1977                                  ;
  1978                                  ;       Out:            N/A             This routine does not exit.
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1982 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1983 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1984 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  1985                                  ;
  1986                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1987                                  ;
  1988                                  ;                       [EBP+56]        EFLAGS
  1989                                  ;                       [EBP+52]        CS
  1990                                  ;                       [EBP+48]        EIP
  1991                                  ;                       [EBP+44]        interrupt number (0-31)
  1992                                  ;                       [EBP+40]        error message address
  1993                                  ;                       [EBP+36]        DS
  1994                                  ;                       [EBP+32]        ES
  1995                                  ;                       [EBP+28]        EAX
  1996                                  ;                       [EBP+24]        ECX
  1997                                  ;                       [EBP+20]        EDX
  1998                                  ;                       [EBP+16]        EBX
  1999                                  ;                       [EBP+12]        ESP
  2000                                  ;                       [EBP+8]         EBP
  2001                                  ;                       [EBP+4]         ESI
  2002                                  ;                       [EBP+0]         EDI
  2003                                  ;
  2004 00000158 0E                                              push    cs                                              ;load code selector ...
  2005 00000159 1F                                              pop     ds                                              ;... into DS
  2006 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2007 0000015C 07                                              pop     es                                              ;... into ES
  2008                                  ;
  2009                                  ;       Display the interrupt report boundary box
  2010                                  ;
  2011 0000015D B10D                                            mov     cl,13                                           ;column
  2012 0000015F B506                                            mov     ch,6                                            ;row
  2013 00000161 B232                                            mov     dl,50                                           ;width
  2014 00000163 B608                                            mov     dh,8                                            ;height
  2015 00000165 B707                                            mov     bh,07h                                          ;attribute
  2016 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2017                                  ;
  2018                                  ;       Display the report header
  2019                                  ;
  2020 0000016C B10F                                            mov     cl,15                                           ;column
  2021 0000016E B507                                            mov     ch,7                                            ;row
  2022 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2023 00000175 E8EA0E0000                                      call    SetConsoleString                                ;draw text string
  2024                                  ;
  2025                                  ;       Display the interrupt description label
  2026                                  ;
  2027 0000017A B10F                                            mov     cl,15                                           ;column
  2028 0000017C B508                                            mov     ch,8                                            ;row
  2029 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2030 00000183 E8DC0E0000                                      call    SetConsoleString                                ;draw text string
  2031                                  ;
  2032                                  ;       Display the interrupt number
  2033                                  ;
  2034 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2035 0000018B B11A                                            mov     cl,26                                           ;column
  2036 0000018D B508                                            mov     ch,8                                            ;row
  2037 0000018F E8850B0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2038                                  ;
  2039                                  ;       Display the interrupt name
  2040                                  ;
  2041 00000194 B11D                                            mov     cl,29                                           ;column
  2042 00000196 B508                                            mov     ch,8                                            ;row
  2043 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2044 0000019B E8C40E0000                                      call    SetConsoleString                                ;display interrupt description
  2045                                  ;
  2046                                  ;       Display the register values header
  2047                                  ;
  2048 000001A0 B10F                                            mov     cl,15                                           ;column
  2049 000001A2 B50A                                            mov     ch,10                                           ;row
  2050 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2051 000001A9 E8B60E0000                                      call    SetConsoleString                                ;draw text string
  2052                                  ;
  2053                                  ;       Display the EAX register label and value
  2054                                  ;
  2055 000001AE B10F                                            mov     cl,15                                           ;column
  2056 000001B0 B50B                                            mov     ch,11                                           ;row
  2057 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2058 000001B7 E8A80E0000                                      call    SetConsoleString                                ;draw label
  2059 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2060 000001BF B113                                            mov     cl,19                                           ;column
  2061 000001C1 B50B                                            mov     ch,11                                           ;row
  2062 000001C3 E86B0B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2063                                  ;
  2064                                  ;       Display the ECX register label and value
  2065                                  ;
  2066 000001C8 B10F                                            mov     cl,15                                           ;column
  2067 000001CA B50C                                            mov     ch,12                                           ;row
  2068 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2069 000001D1 E88E0E0000                                      call    SetConsoleString                                ;draw label
  2070 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2071 000001D9 B113                                            mov     cl,19                                           ;column
  2072 000001DB B50C                                            mov     ch,12                                           ;row
  2073 000001DD E8510B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2074                                  ;
  2075                                  ;       Display the EDX register label and value
  2076                                  ;
  2077 000001E2 B10F                                            mov     cl,15                                           ;column
  2078 000001E4 B50D                                            mov     ch,13                                           ;row
  2079 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2080 000001EB E8740E0000                                      call    SetConsoleString                                ;draw label
  2081 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2082 000001F3 B113                                            mov     cl,19                                           ;column
  2083 000001F5 B50D                                            mov     ch,13                                           ;row
  2084 000001F7 E8370B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2085                                  ;
  2086                                  ;       Display the EBX register label and value
  2087                                  ;
  2088 000001FC B10F                                            mov     cl,15                                           ;column
  2089 000001FE B50E                                            mov     ch,14                                           ;row
  2090 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2091 00000205 E85A0E0000                                      call    SetConsoleString                                ;draw label
  2092 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2093 0000020D B113                                            mov     cl,19                                           ;column
  2094 0000020F B50E                                            mov     ch,14                                           ;row
  2095 00000211 E81D0B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2096                                  ;
  2097                                  ;       Display the ESI register label and value
  2098                                  ;
  2099 00000216 B11D                                            mov     cl,29                                           ;column
  2100 00000218 B50B                                            mov     ch,11                                           ;row
  2101 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2102 0000021F E8400E0000                                      call    SetConsoleString                                ;draw label
  2103 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2104 00000227 B121                                            mov     cl,33                                           ;column
  2105 00000229 B50B                                            mov     ch,11                                           ;row
  2106 0000022B E8030B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2107                                  ;
  2108                                  ;       Display the EDI register label and value
  2109                                  ;
  2110 00000230 B11D                                            mov     cl,29                                           ;column
  2111 00000232 B50C                                            mov     ch,12                                           ;row
  2112 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2113 00000239 E8260E0000                                      call    SetConsoleString                                ;draw label
  2114 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2115 00000241 B121                                            mov     cl,33                                           ;column
  2116 00000243 B50C                                            mov     ch,12                                           ;row
  2117 00000245 E8E90A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2118                                  ;
  2119                                  ;       Display the EBP register label and value
  2120                                  ;
  2121 0000024A B11D                                            mov     cl,29                                           ;column
  2122 0000024C B50D                                            mov     ch,13                                           ;row
  2123 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2124 00000253 E80C0E0000                                      call    SetConsoleString                                ;draw label
  2125 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2126 0000025B B121                                            mov     cl,33                                           ;column
  2127 0000025D B50D                                            mov     ch,13                                           ;row
  2128 0000025F E8CF0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2129                                  ;
  2130                                  ;       Display the DS register label and value
  2131                                  ;
  2132 00000264 B12A                                            mov     cl,42                                           ;column
  2133 00000266 B50B                                            mov     ch,11                                           ;row
  2134 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2135 0000026D E8F20D0000                                      call    SetConsoleString                                ;draw label
  2136 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2137 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2138 00000278 B12E                                            mov     cl,46                                           ;column
  2139 0000027A B50B                                            mov     ch,11                                           ;row
  2140 0000027C E8C20A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2141                                  ;
  2142                                  ;       Display the ES register label and value
  2143                                  ;
  2144 00000281 B12A                                            mov     cl,42                                           ;column
  2145 00000283 B50C                                            mov     ch,12                                           ;row
  2146 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2147 0000028A E8D50D0000                                      call    SetConsoleString                                ;draw label
  2148 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2149 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2150 00000295 B12E                                            mov     cl,46                                           ;column
  2151 00000297 B50C                                            mov     ch,12                                           ;row
  2152 00000299 E8A50A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2153                                  ;
  2154                                  ;       Display the SS register label and value
  2155                                  ;
  2156 0000029E B12A                                            mov     cl,42                                           ;column
  2157 000002A0 B50D                                            mov     ch,13                                           ;row
  2158 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2159 000002A7 E8B80D0000                                      call    SetConsoleString                                ;draw label
  2160 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2161 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2162 000002B1 B12E                                            mov     cl,46                                           ;column
  2163 000002B3 B50D                                            mov     ch,13                                           ;row
  2164 000002B5 E8890A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2165                                  ;
  2166                                  ;       Display the CS register lable and value
  2167                                  ;
  2168 000002BA B12A                                            mov     cl,42                                           ;column
  2169 000002BC B50E                                            mov     ch,14                                           ;row
  2170 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2171 000002C3 E89C0D0000                                      call    SetConsoleString                                ;draw label
  2172 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2173 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2174 000002CE B12E                                            mov     cl,46                                           ;column
  2175 000002D0 B50E                                            mov     ch,14                                           ;row
  2176 000002D2 E86C0A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2177                                  ;
  2178                                  ;       Display the EFLAGS register label and value
  2179                                  ;
  2180 000002D7 B133                                            mov     cl,51                                           ;column
  2181 000002D9 B50B                                            mov     ch,11                                           ;row
  2182 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2183 000002E0 E87F0D0000                                      call    SetConsoleString                                ;draw label
  2184 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2185 000002E8 B137                                            mov     cl,55                                           ;column
  2186 000002EA B50B                                            mov     ch,11                                           ;row
  2187 000002EC E8420A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2188                                  ;
  2189                                  ;       Display the ESP register label and value
  2190                                  ;
  2191 000002F1 B133                                            mov     cl,51                                           ;column
  2192 000002F3 B50D                                            mov     ch,13                                           ;row
  2193 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2194 000002FA E8650D0000                                      call    SetConsoleString                                ;draw label
  2195 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2196 00000302 B137                                            mov     cl,55                                           ;column
  2197 00000304 B50D                                            mov     ch,13                                           ;row
  2198 00000306 E8280A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2199                                  ;
  2200                                  ;       Display the EIP register label and value
  2201                                  ;
  2202 0000030B B133                                            mov     cl,51                                           ;column
  2203 0000030D B50E                                            mov     ch,14                                           ;row
  2204 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2205 00000314 E84B0D0000                                      call    SetConsoleString                                ;draw label
  2206 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2207 0000031C B137                                            mov     cl,55                                           ;column
  2208 0000031E B50E                                            mov     ch,14                                           ;row
  2209 00000320 E80E0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2210                                  ;
  2211                                  ;       Halt and loop until reset
  2212                                  ;
  2213 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2214 00000326 F4                                              hlt                                                     ;halt processor
  2215 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2216                                  ;-----------------------------------------------------------------------------------------------------------------------
  2217                                  ;
  2218                                  ;       Processor Interrupt Name Strings
  2219                                  ;
  2220                                  ;-----------------------------------------------------------------------------------------------------------------------
  2221 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2221 00000332 6279207A65726F00   
  2222 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2222 00000343 657000             
  2223 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2223 0000034F 626C6520696E746572-
  2223 00000358 7275707400         
  2224 0000035D 427265616B00            czIntBreak              db      "Break",0
  2225 00000363 496E746F00              czIntInto               db      "Into",0
  2226 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2227 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2227 00000378 74696F6E20436F6465-
  2227 00000381 00                 
  2228 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2228 0000038B 6573736F7200       
  2229 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2229 0000039A 756C7400           
  2230 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2231 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2231 000003AF 537461746520536567-
  2231 000003B8 6D656E7400         
  2232 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2232 000003C6 6E7400             
  2233 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2233 000003D2 697400             
  2234 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2234 000003DE 726F74656374696F6E-
  2234 000003E7 204661756C7400     
  2235 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2235 000003F7 6F722043616C63756C-
  2235 00000400 6174696F6E00       
  2236 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                  ;
  2239                                  ;       Processor Interrupt Handling Strings
  2240                                  ;
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2242 00000418 6C65642070726F6365-
  2242 00000421 73736F7220696E7465-
  2242 0000042A 727275707420686173-
  2242 00000433 206F63637572726564-
  2242 0000043C 3A00               
  2243 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2243 00000447 202300             
  2244 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2244 00000453 206174207468652074-
  2244 0000045C 696D65206F66207468-
  2244 00000465 6520696E7465727275-
  2244 0000046E 70743A00           
  2245 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2246 00000477 4543583A00              czIntECX                db      "ECX:",0
  2247 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2248 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2249 00000486 4553493A00              czIntESI                db      "ESI:",0
  2250 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2251 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2252 00000495 4553503A00              czIntESP                db      "ESP:",0
  2253 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2254 0000049F 2045533A00              czIntES                 db      " ES:",0
  2255 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2256 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2257 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2258 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2259                                  ;-----------------------------------------------------------------------------------------------------------------------
  2260                                  ;
  2261                                  ;       Routine:        DrawTextDialogBox
  2262                                  ;
  2263                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2264                                  ;
  2265                                  ;       In:             CL      upper left column (0-79)
  2266                                  ;                       CH      upper left row (0-24)
  2267                                  ;                       DL      column width, excluding border
  2268                                  ;                       DH      row height, excluding border
  2269                                  ;                       BH      color attribute
  2270                                  ;
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2273 000004B9 56                                              push    esi                                             ;
  2274 000004BA 57                                              push    edi                                             ;
  2275 000004BB 06                                              push    es                                              ;
  2276 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2277 000004BE 07                                              pop     es                                              ;... into ES
  2278                                  ;
  2279                                  ;       Compute target display offset
  2280                                  ;
  2281 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2282 000004C1 88E8                                            mov     al,ch                                           ;row
  2283 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2284 000004C5 F6E4                                            mul     ah                                              ;row offset
  2285 000004C7 00C8                                            add     al,cl                                           ;add column
  2286 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2287 000004CC 00C8                                            add     al,cl                                           ;add column
  2288 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2289 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2290                                  ;
  2291                                  ;       Display top border row
  2292                                  ;
  2293 000004D3 57                                              push    edi                                             ;save target row offset
  2294 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2295 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2296 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2297 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2298 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2299 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2300 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2301 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2302 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2303 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2304 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2305                                  ;
  2306                                  ;       Display dialog box body rows
  2307                                  ;
  2308 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2309 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2310 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2311 000004F3 57                                              push    edi                                             ;save target row offset
  2312 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2313 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2314 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2315 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2316 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2317 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2318 00000500 F366AB                                          rep     stosw                                           ;display row
  2319 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2320 00000505 66AB                                            stosw                                                   ;display character and attribute
  2321 00000507 5F                                              pop     edi                                             ;restore target row offset
  2322 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2323 0000050E 59                                              pop     ecx                                             ;remaining rows
  2324 0000050F E2E1                                            loop    .10                                             ;next row
  2325                                  ;
  2326                                  ;       Display bottom border row
  2327                                  ;
  2328 00000511 57                                              push    edi                                             ;save target row offset
  2329 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2330 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2331 00000516 66AB                                            stosw                                                   ;display character and attribute
  2332 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2333 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2334 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2335 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2336 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2337 00000523 66AB                                            stosw                                                   ;display character and attribute
  2338 00000525 5F                                              pop     edi                                             ;restore target row offset
  2339 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2340                                  ;
  2341                                  ;       Restore and return
  2342                                  ;
  2343 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2344 0000052D 5F                                              pop     edi                                             ;
  2345 0000052E 5E                                              pop     esi                                             ;
  2346 0000052F 59                                              pop     ecx                                             ;
  2347 00000530 C3                                              ret                                                     ;return
  2348                                  ;=======================================================================================================================
  2349                                  ;
  2350                                  ;       Hardware Device Interupts
  2351                                  ;
  2352                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2353                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2354                                  ;       (BX=2028h).
  2355                                  ;
  2356                                  ;=======================================================================================================================
  2357                                  ;-----------------------------------------------------------------------------------------------------------------------
  2358                                  ;
  2359                                  ;       IRQ0    Clock Tick Interrupt
  2360                                  ;
  2361                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2362                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2363                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2364                                  ;
  2365                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2366                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2367                                  ;
  2368                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2369                                  ;       zero, the floppy disk motors are turned off.
  2370                                  ;
  2371                                  ;-----------------------------------------------------------------------------------------------------------------------
  2372                                                          menter  clocktick                                       ;clock tick interrupt
  2372                              <1> ?%1 equ ($-$$)
  2373 00000531 50                                              push    eax                                             ;save non-volatile regs
  2374 00000532 52                                              push    edx                                             ;
  2375 00000533 1E                                              push    ds                                              ;
  2376                                  ;
  2377                                  ;       Update the clock tick count and the elapsed days as needed.
  2378                                  ;
  2379 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2380 00000536 1F                                              pop     ds                                              ;... into data segment register
  2381 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2382 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2383 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2384 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2385 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2386 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2387 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2388                                  ;
  2389                                  ;       Decrement floppy disk motor timeout.
  2390                                  ;
  2391 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2392 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2393 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2394 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2395                                  ;
  2396                                  ;       Turn off the floppy disk motor if appropriate.
  2397                                  ;
  2398 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2399 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2400 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2401 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2402 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2403 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2404 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2405 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2406 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2407 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2408 00000577 EE                                              out     dx,al                                           ;turn motor off
  2409                                  ;
  2410                                  ;       Signal the end of the hardware interrupt.
  2411                                  ;
  2412 00000578 E84C0B0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2413                                  ;
  2414                                  ;       Restore and return.
  2415                                  ;
  2416 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2417 0000057E 5A                                              pop     edx                                             ;
  2418 0000057F 58                                              pop     eax                                             ;
  2419 00000580 CF                                              iretd                                                   ;return
  2420                                  ;-----------------------------------------------------------------------------------------------------------------------
  2421                                  ;
  2422                                  ;       IRQ1    Keyboard Interrupt
  2423                                  ;
  2424                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2425                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2426                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2427                                  ;       ALL modified registers upon return.
  2428                                  ;
  2429                                  ;-----------------------------------------------------------------------------------------------------------------------
  2430                                                          menter  keyboard                                        ;keyboard interrrupt
  2430                              <1> ?%1 equ ($-$$)
  2431 00000581 50                                              push    eax                                             ;save non-volatile regs
  2432 00000582 53                                              push    ebx                                             ;
  2433 00000583 51                                              push    ecx                                             ;
  2434 00000584 56                                              push    esi                                             ;
  2435 00000585 1E                                              push    ds                                              ;
  2436 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2437 00000588 1F                                              pop     ds                                              ;... into data segment register
  2438 00000589 30C0                                            xor     al,al                                           ;zero
  2439 0000058B A219080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2440 00000590 A21A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2441 00000595 A21B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2442 0000059A A21C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2443 0000059F A21D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2444 000005A4 A21E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2445 000005A9 B020                                            mov     al,' '                                          ;space
  2446 000005AB A21F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2447 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2448 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2449 000005B4 200518080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2450 000005BA 8A1D16080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2451 000005C0 8A3D17080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2452 000005C6 E8480B0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2453 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2454 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2455 000005D3 A219080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2456 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2457 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2458 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2459 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2460 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2461 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2462 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2463 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2464 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2465 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2466 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2467 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2468 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2469 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2470 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2471 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2472 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2473 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2474 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2475 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2476 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2477 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2478 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2479 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2480 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2481 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2482 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2483 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2484 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2485 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2486 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2487 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2488 00000654 E8BA0A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2489 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2490 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2491 00000661 A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2492 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2493 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2494 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2495 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2496 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2497 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2498 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2499 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2500 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2501 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2502 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2503 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2504 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2505 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2506 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2507 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2508 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2509 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2510 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2511 0000069C E8720A0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2512 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2513 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2514 000006A9 A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2515 000006AE E8600A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2516 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2517 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2518 000006BB A21C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2519 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2520 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2521 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2522 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2523 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2524 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2525 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2526 000006D1 E80E0A0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2527 000006D6 881D16080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2528 000006DC 883D17080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2529 000006E2 E8C4060000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2530 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2531 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2532 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2533 000006F1 E81D0A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2534 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2535 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2536 000006FE A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2537 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2538 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2539 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2540 0000070E E8000A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2541 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2542 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2543 0000071B A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2544 00000720 E8EE090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2545 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2546 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2547 0000072D A21C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2548 00000732 E8DC090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2549 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2550 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2551 0000073F A21D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2552 00000744 E8CA090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2553 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2554 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2555 0000074D A21E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2556 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2557 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2558 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2559 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2560 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2561 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2562 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2563 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2564 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2565 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2566 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2567 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2568 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2569 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2570 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2571 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2572 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2573 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2574 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2575 00000787 A21F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2576 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2577 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2578 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2579 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2580 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2581 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2582 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2583 000007A4 50                                              push    eax                                             ;save codes
  2584 000007A5 E815080000                                      call    PutMessage                                      ;put message to console
  2585 000007AA 58                                              pop     eax                                             ;restore codes
  2586 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2587 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2588 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2589 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2590 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2591 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2592 000007BD E8FD070000                                      call    PutMessage                                      ;put message to console
  2593 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2594 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2595 000007C6 080518080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2596 000007CC E882050000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2597 000007D1 E8F3080000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2598 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2599 000007D7 5E                                              pop     esi                                             ;
  2600 000007D8 59                                              pop     ecx                                             ;
  2601 000007D9 5B                                              pop     ebx                                             ;
  2602 000007DA 58                                              pop     eax                                             ;
  2603 000007DB CF                                              iretd                                                   ;return
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                  ;       Scan-Code to ASCII Translation Tables
  2606                                  ;-----------------------------------------------------------------------------------------------------------------------
  2607 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2608 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2609 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2610 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2611 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2612 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2613 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2614 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2615 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2616 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2617 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2618 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2619 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2620 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2621 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2622 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2623 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2624 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2625 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2626 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2627 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2628 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2629 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2630 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2631 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2632 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2633 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2634 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2635 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2636 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2637 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2638 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                  ;
  2641                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2642                                  ;
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                                          menter  iochannel                                       ;secondary 8259A cascade
  2644                              <1> ?%1 equ ($-$$)
  2645 000008DC 50                                              push    eax                                             ;save modified regs
  2646 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2647                                  ;-----------------------------------------------------------------------------------------------------------------------
  2648                                  ;
  2649                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2650                                  ;
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                                          menter  com2                                            ;serial port 2 interrupt
  2652                              <1> ?%1 equ ($-$$)
  2653 000008DF 50                                              push    eax                                             ;save modified regs
  2654 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                  ;
  2657                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2658                                  ;
  2659                                  ;-----------------------------------------------------------------------------------------------------------------------
  2660                                                          menter  com1                                            ;serial port 1 interrupt
  2660                              <1> ?%1 equ ($-$$)
  2661 000008E2 50                                              push    eax                                             ;save modified regs
  2662 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2663                                  ;-----------------------------------------------------------------------------------------------------------------------
  2664                                  ;
  2665                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2666                                  ;
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2668                              <1> ?%1 equ ($-$$)
  2669 000008E5 50                                              push    eax                                             ;save modified regs
  2670 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2671                                  ;-----------------------------------------------------------------------------------------------------------------------
  2672                                  ;
  2673                                  ;       IRQ6    Diskette Hardware Interrupt
  2674                                  ;
  2675                                  ;-----------------------------------------------------------------------------------------------------------------------
  2676                                                          menter  diskette                                        ;floppy disk interrupt
  2676                              <1> ?%1 equ ($-$$)
  2677 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2678 000008E9 1E                                              push    ds                                              ;
  2679 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2680 000008EC 1F                                              pop     ds                                              ;... into DS register
  2681 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2682 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2683 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2684 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2685 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                  ;
  2688                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2689                                  ;
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2691                              <1> ?%1 equ ($-$$)
  2692 000008FC 50                                              push    eax                                             ;save modified regs
  2693 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ;
  2696                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2697                                  ;
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                                          menter  rtclock                                         ;real-time clock interrupt
  2699                              <1> ?%1 equ ($-$$)
  2700 000008FF 50                                              push    eax                                             ;save modified regs
  2701 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  ;
  2704                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2707                              <1> ?%1 equ ($-$$)
  2708 00000902 50                                              push    eax                                             ;save modified regs
  2709 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;
  2712                                  ;       IRQ10   Reserved Hardware Interrupt
  2713                                  ;
  2714                                  ;-----------------------------------------------------------------------------------------------------------------------
  2715                                                          menter  irq10                                           ;reserved
  2715                              <1> ?%1 equ ($-$$)
  2716 00000905 50                                              push    eax                                             ;save modified regs
  2717 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;       IRQ11   Reserved Hardware Interrupt
  2721                                  ;
  2722                                  ;-----------------------------------------------------------------------------------------------------------------------
  2723                                                          menter  irq11                                           ;reserved
  2723                              <1> ?%1 equ ($-$$)
  2724 00000908 50                                              push    eax                                             ;save modified regs
  2725 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2726                                  ;-----------------------------------------------------------------------------------------------------------------------
  2727                                  ;
  2728                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2729                                  ;
  2730                                  ;-----------------------------------------------------------------------------------------------------------------------
  2731                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2731                              <1> ?%1 equ ($-$$)
  2732 0000090B 50                                              push    eax                                             ;save modified regs
  2733 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2734                                  ;-----------------------------------------------------------------------------------------------------------------------
  2735                                  ;
  2736                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2737                                  ;
  2738                                  ;-----------------------------------------------------------------------------------------------------------------------
  2739                                                          menter  coprocessor                                     ;coprocessor interrupt
  2739                              <1> ?%1 equ ($-$$)
  2740 0000090E 50                                              push    eax                                             ;save modified regs
  2741 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2742                                  ;-----------------------------------------------------------------------------------------------------------------------
  2743                                  ;
  2744                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2745                                  ;
  2746                                  ;-----------------------------------------------------------------------------------------------------------------------
  2747                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2747                              <1> ?%1 equ ($-$$)
  2748 00000911 50                                              push    eax                                             ;save modified regs
  2749 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2750                                  ;-----------------------------------------------------------------------------------------------------------------------
  2751                                  ;
  2752                                  ;       IRQ15   Reserved Hardware Interrupt
  2753                                  ;
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                                          menter  irq15                                           ;reserved
  2755                              <1> ?%1 equ ($-$$)
  2756 00000914 50                                              push    eax                                             ;save modified regs
  2757 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2758                                  ;-----------------------------------------------------------------------------------------------------------------------
  2759                                  ;
  2760                                  ;       Exit from hardware interrupt
  2761                                  ;
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763 00000917 E8B3070000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2764 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2765 0000091E E8A6070000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2766 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2767 00000924 CF                                              iretd                                                   ;return from interrupt
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769                                  ;
  2770                                  ;       INT 30h Operating System Software Service Interrupt
  2771                                  ;
  2772                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2773                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2774                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2775                                  ;       the entry address of the specific function from a table.
  2776                                  ;
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                                          menter  svc
  2778                              <1> ?%1 equ ($-$$)
  2779 00000925 3C10                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2780 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2781 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2782 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2783 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2784 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2785                                  ;-----------------------------------------------------------------------------------------------------------------------
  2786                                  ;
  2787                                  ;       Service Request Table
  2788                                  ;
  2789                                  ;
  2790                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2791                                  ;
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2793                              <1> tsvc :
  2793                              <1> e%1 equ ($-tsvc)/4
  2793 00000937 [77090000]          <1>  dd %1
  2794                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2794                              <1> e%1 equ ($-tsvc)/4
  2794 0000093B [E70F0000]          <1>  dd %1
  2795                                                          tsvce   CompareMemory                                   ;compare memory
  2795                              <1> e%1 equ ($-tsvc)/4
  2795 0000093F [D20B0000]          <1>  dd %1
  2796                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2796                              <1> e%1 equ ($-tsvc)/4
  2796 00000943 [750E0000]          <1>  dd %1
  2797                                                          tsvce   FreeMemory                                      ;free memory block
  2797                              <1> e%1 equ ($-tsvc)/4
  2797 00000947 [950A0000]          <1>  dd %1
  2798                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2798                              <1> e%1 equ ($-tsvc)/4
  2798 0000094B [74100000]          <1>  dd %1
  2799                                                          tsvce   GetConsoleString                                ;get string input
  2799                              <1> e%1 equ ($-tsvc)/4
  2799 0000094F [330C0000]          <1>  dd %1
  2800                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2800                              <1> e%1 equ ($-tsvc)/4
  2800 00000953 [85100000]          <1>  dd %1
  2801                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2801                              <1> e%1 equ ($-tsvc)/4
  2801 00000957 [96100000]          <1>  dd %1
  2802                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2802                              <1> e%1 equ ($-tsvc)/4
  2802 0000095B [A80E0000]          <1>  dd %1
  2803                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2803                              <1> e%1 equ ($-tsvc)/4
  2803 0000095F [9F100000]          <1>  dd %1
  2804                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2804                              <1> e%1 equ ($-tsvc)/4
  2804 00000963 [450E0000]          <1>  dd %1
  2805                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2805                              <1> e%1 equ ($-tsvc)/4
  2805 00000967 [D5100000]          <1>  dd %1
  2806                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2806                              <1> e%1 equ ($-tsvc)/4
  2806 0000096B [C60E0000]          <1>  dd %1
  2807                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2807                              <1> e%1 equ ($-tsvc)/4
  2807 0000096F [6A0F0000]          <1>  dd %1
  2808                                                          tsvce   UpperCaseString                                 ;upper-case string
  2808                              <1> e%1 equ ($-tsvc)/4
  2808 00000973 [EF0B0000]          <1>  dd %1
  2809                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2810                                  ;-----------------------------------------------------------------------------------------------------------------------
  2811                                  ;
  2812                                  ;       Service Request Macros
  2813                                  ;
  2814                                  ;       These macros provide positional parameterization of service request calls.
  2815                                  ;
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  %macro                  allocateMemory 1
  2818                                                          mov     ecx,%1                                          ;bytes to allocate
  2819                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2820                                                          int     _svc                                            ;invoke OS service
  2821                                  %endmacro
  2822                                  %macro                  clearConsoleScreen 0
  2823                                                          mov     al,eClearConsoleScreen                          ;function code
  2824                                                          int     _svc                                            ;invoke OS service
  2825                                  %endmacro
  2826                                  %macro                  compareMemory 0
  2827                                                          mov     al,eCompareMemory                               ;function code
  2828                                                          int     _svc                                            ;invoke OS service
  2829                                  %endmacro
  2830                                  %macro                  decimalToUnsigned 0
  2831                                                          mov     al,eDecimalToUnsigned                           ;function code
  2832                                                          int     _svc                                            ;invoke OS servie
  2833                                  %endmacro
  2834                                  %macro                  freeMemory 1
  2835                                                          mov     edx,%1                                          ;address of memory block
  2836                                                          mov     al,eFreeMemory                                  ;function code
  2837                                                          int     _svc                                            ;invoke OS service
  2838                                  %endmacro
  2839                                  %macro                  getBaseMemSize 0
  2840                                                          mov     al,eGetBaseMemSize                              ;function code
  2841                                                          int     _svc                                            ;invoke OS service
  2842                                  %endmacro
  2843                                  %macro                  getConsoleString 4
  2844                                                          mov     edx,%1                                          ;buffer address
  2845                                                          mov     ecx,%2                                          ;max characters
  2846                                                          mov     bh,%3                                           ;echo indicator
  2847                                                          mov     bl,%4                                           ;terminator
  2848                                                          mov     al,eGetConsoleString                            ;function code
  2849                                                          int     _svc                                            ;invoke OS service
  2850                                  %endmacro
  2851                                  %macro                  getExtendedMemSize 0
  2852                                                          mov     al,eGetExtendedMemSize                          ;function code
  2853                                                          int     _svc                                            ;invoke OS service
  2854                                  %endmacro
  2855                                  %macro                  getROMMemSize 0
  2856                                                          mov     al,eGetROMMemSize                               ;function code
  2857                                                          int     _svc                                            ;invoke OS service
  2858                                  %endmacro
  2859                                  %macro                  hexadecimalToUnsigned 0
  2860                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2861                                                          int     _svc                                            ;invoke OS service
  2862                                  %endmacro
  2863                                  %macro                  placeCursor 0
  2864                                                          mov     al,ePlaceCursor                                 ;function code
  2865                                                          int     _svc                                            ;invoke OS service
  2866                                  %endmacro
  2867                                  %macro                  putConsoleString 1
  2868                                                          mov     edx,%1                                          ;string address
  2869                                                          mov     al,ePutConsoleString                            ;function code
  2870                                                          int     _svc                                            ;invoke OS service
  2871                                  %endmacro
  2872                                  %macro                  resetSystem 0
  2873                                                          mov     al,eResetSystem                                 ;function code
  2874                                                          int     _svc                                            ;invoke OS service
  2875                                  %endmacro
  2876                                  %macro                  unsignedToDecimalString 0
  2877                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2878                                                          int     _svc                                            ;invoke OS service
  2879                                  %endmacro
  2880                                  %macro                  unsignedToHexadecimal 0
  2881                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2882                                                          int     _svc                                            ;invoke OS service
  2883                                  %endmacro
  2884                                  %macro                  upperCaseString 0
  2885                                                          mov     al,eUpperCaseString                             ;function code
  2886                                                          int     _svc                                            ;invoke OS service
  2887                                  %endmacro
  2888                                  ;=======================================================================================================================
  2889                                  ;
  2890                                  ;       Kernel Function Library
  2891                                  ;
  2892                                  ;=======================================================================================================================
  2893                                  ;=======================================================================================================================
  2894                                  ;
  2895                                  ;       Memory Helper Routines
  2896                                  ;
  2897                                  ;       AllocateMemory
  2898                                  ;       FreeMemory
  2899                                  ;
  2900                                  ;=======================================================================================================================
  2901                                  ;-----------------------------------------------------------------------------------------------------------------------
  2902                                  ;
  2903                                  ;       Routine:        AllocateMemory
  2904                                  ;
  2905                                  ;       Description:    This routine allocates a memory block for the given task.
  2906                                  ;
  2907                                  ;       In:             ECX     bytes of memory to allocate
  2908                                  ;
  2909                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  2910                                  ;                               0       unable to allocate memory
  2911                                  ;
  2912                                  ;-----------------------------------------------------------------------------------------------------------------------
  2913 00000977 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  2914 00000978 51                                              push    ecx                                             ;
  2915 00000979 56                                              push    esi                                             ;
  2916 0000097A 1E                                              push    ds                                              ;
  2917                                  ;
  2918                                  ;       Address kernel memory structures
  2919                                  ;
  2920 0000097B 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  2921 0000097D 1F                                              pop     ds                                              ;... into data segment reg
  2922 0000097E BE31090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  2923                                  ;
  2924                                  ;       Set requested size to minimum block size if requested size is too small.
  2925                                  ;
  2926 00000983 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  2927 00000989 7305                                            jae     .10                                             ;no, branch
  2928 0000098B B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  2929 00000990 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  2930                                  ;
  2931                                  ;       Find the first free memory block large enough to satisfy the request.
  2932                                  ;
  2933 00000993 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  2934 00000996 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  2935 00000998 0F84F2000000                                    jz      .220                                            ;yes, branch
  2936 0000099E 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  2937 000009A1 7605                                            jbe     .30                                             ;yes, branch
  2938 000009A3 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2939 000009A6 EBEE                                            jmp     .20                                             ;continue
  2940                                  ;-----------------------------------------------------------------------------------------------------------------------
  2941                                  ;
  2942                                  ;       Address the previous and next free memory blocks.
  2943                                  ;
  2944 000009A8 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  2945 000009AB 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2946                                  ;
  2947                                  ;       Remove the free memory block from the forward free memory block chain.
  2948                                  ;
  2949 000009AE 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  2950 000009B0 7405                                            jz      .40                                             ;no, branch
  2951 000009B2 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  2952 000009B5 EB03                                            jmp     .50                                             ;continue
  2953 000009B7 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  2954                                  ;
  2955                                  ;       Remove the free memory block from the reverse free memory block chain.
  2956                                  ;
  2957 000009BA 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  2958 000009BC 7405                                            jz      .60                                             ;no, branch
  2959 000009BE 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  2960 000009C1 EB03                                            jmp     .70                                             ;continue
  2961 000009C3 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  2962                                  ;-----------------------------------------------------------------------------------------------------------------------
  2963                                  ;
  2964                                  ;       Determine if the free memory block can be split.
  2965                                  ;
  2966 000009C6 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  2967 000009C9 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  2968 000009CB 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  2969 000009D1 7263                                            jb      .150                                            ;no, branch
  2970                                  ;
  2971                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  2972                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  2973                                  ;       of the requested memory size.
  2974                                  ;
  2975 000009D3 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  2976 000009D6 89C2                                            mov     edx,eax                                         ;memory block address
  2977 000009D8 01CA                                            add     edx,ecx                                         ;address new new next contig block
  2978 000009DA 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  2979 000009DD 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  2980                                  ;
  2981                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  2982                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  2983                                  ;
  2984 000009E0 E305                                            jecxz   .80                                             ;no next contig, branch
  2985 000009E2 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  2986 000009E5 EB03                                            jmp     .90                                             ;continue
  2987 000009E7 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  2988                                  ;
  2989                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  2990                                  ;
  2991 000009EA 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  2992 000009ED 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  2993 000009F0 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  2994 000009F3 BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  2995 000009F8 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  2996 000009FA 31DB                                            xor     ebx,ebx                                         ;zero register
  2997 000009FC 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  2998 000009FF 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  2999                                  ;
  3000                                  ;       Find the proper location in the free block chain for the new free block
  3001                                  ;
  3002 00000A02 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3003 00000A05 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3004 00000A08 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3005 00000A0A 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3006 00000A0D 7605                                            jbe     .110                                            ;yes, branch
  3007 00000A0F 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3008 00000A12 EBF4                                            jmp     .100                                            ;continue
  3009                                  ;
  3010                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3011                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3012                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3013                                  ;       block of hte next block, if there is one.
  3014                                  ;
  3015 00000A14 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3016 00000A17 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3017 00000A1A E308                                            jecxz   .120                                            ;branch if no next block
  3018 00000A1C 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3019 00000A1F 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3020 00000A22 EB03                                            jmp     .130                                            ;continue
  3021 00000A24 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3022                                  ;
  3023                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3024                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3025                                  ;       last user block pointers if necessary.
  3026                                  ;
  3027 00000A27 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3028 00000A2A 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3029 00000A2C 7405                                            jz      .140                                            ;no, branch
  3030 00000A2E 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3031 00000A31 EB03                                            jmp     .150                                            ;continue
  3032 00000A33 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3033                                  ;
  3034                                  ;       Update the newly allocated block's owner and signature.
  3035                                  ;
  3036 00000A36 BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3037 00000A3B 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3038 00000A3D 31D2                                            xor     edx,edx                                         ;zero register
  3039 00000A3F 660F00CA                                        str     dx                                              ;load the task state register
  3040 00000A43 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3041                                  ;
  3042                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3043                                  ;
  3044 00000A46 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3045 00000A49 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3046 00000A4B 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3047 00000A4E 721E                                            jb      .180                                            ;branch if block belongs to next task
  3048 00000A50 7405                                            je      .170                                            ;branch if block belongs to this task
  3049 00000A52 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3050 00000A55 EBF2                                            jmp     .160                                            ;continue
  3051                                  ;
  3052                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3053                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3054                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3055                                  ;       place to insert the block.
  3056                                  ;
  3057 00000A57 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3058 00000A5A 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3059 00000A5D 760F                                            jbe     .180                                            ;yes, branch
  3060 00000A5F 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3061 00000A62 85C9                                            test    ecx,ecx                                         ;end of chain?
  3062 00000A64 7408                                            jz      .180                                            ;yes, branch
  3063 00000A66 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3064 00000A69 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3065 00000A6C 74E9                                            je      .170                                            ;yes, continue search
  3066                                  ;
  3067                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3068                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3069                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3070                                  ;       do have a previous-block, we update that block's next-block pointer.
  3071                                  ;
  3072 00000A6E 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3073 00000A71 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3074 00000A74 E308                                            jecxz   .190                                            ;branch if no next-task block
  3075 00000A76 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3076 00000A79 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3077 00000A7C EB03                                            jmp     .200                                            ;continue
  3078 00000A7E 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3079                                  ;
  3080                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3081                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3082                                  ;       global first and/or last user-block pointers if necessary.
  3083                                  ;
  3084 00000A81 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3085 00000A84 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3086 00000A86 7405                                            jz      .210                                            ;no, branch
  3087 00000A88 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3088 00000A8B EB03                                            jmp     .220                                            ;continue
  3089 00000A8D 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3090                                  ;
  3091                                  ;       Restore registers and return to caller.
  3092                                  ;
  3093 00000A90 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3094 00000A91 5E                                              pop     esi                                             ;
  3095 00000A92 59                                              pop     ecx                                             ;
  3096 00000A93 5B                                              pop     ebx                                             ;
  3097 00000A94 C3                                              ret                                                     ;return
  3098                                  ;-----------------------------------------------------------------------------------------------------------------------
  3099                                  ;
  3100                                  ;       Routine:        FreeMemory
  3101                                  ;
  3102                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3103                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3104                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3105                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3106                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3107                                  ;
  3108                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3109                                  ;
  3110                                  ;       Out:            EAX     -1      invalid memory block
  3111                                  ;                               0       memory block freed
  3112                                  ;
  3113                                  ;-----------------------------------------------------------------------------------------------------------------------
  3114 00000A95 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3115 00000A96 51                                              push    ecx                                             ;
  3116 00000A97 56                                              push    esi                                             ;
  3117 00000A98 57                                              push    edi                                             ;
  3118 00000A99 1E                                              push    ds                                              ;
  3119 00000A9A 06                                              push    es                                              ;
  3120                                  ;
  3121                                  ;       Address the root memory structure
  3122                                  ;
  3123 00000A9B 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3124 00000A9D 07                                              pop     es                                              ;... into extra segment reg
  3125 00000A9E 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3126 00000AA0 1F                                              pop     ds                                              ;... into data segment reg
  3127 00000AA1 BE31090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3128 00000AA6 89D7                                            mov     edi,edx                                         ;memory block address
  3129                                  ;
  3130                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3131                                  ;
  3132 00000AA8 31C0                                            xor     eax,eax                                         ;indicate success
  3133 00000AAA 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3134 00000AB0 0F8415010000                                    je      .240                                            ;yes, branch
  3135 00000AB6 48                                              dec     eax                                             ;indicate failure
  3136 00000AB7 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3137 00000ABD 0F8508010000                                    jne     .240                                            ;no, branch
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;       Unlink the USER memory block.
  3141                                  ;
  3142                                  ;-----------------------------------------------------------------------------------------------------------------------
  3143                                  ;
  3144                                  ;       Set the block signature. Reset owner.
  3145                                  ;
  3146 00000AC3 C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3147 00000AC9 31C0                                            xor     eax,eax                                         ;zero register
  3148 00000ACB 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3149                                  ;
  3150                                  ;       Wipe user area.
  3151                                  ;
  3152 00000ACE 57                                              push    edi                                             ;save block address
  3153 00000ACF 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3154 00000AD2 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3155 00000AD5 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3156 00000AD8 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3157 00000ADA F3AA                                            rep     stosb                                           ;clear memory
  3158 00000ADC 5F                                              pop     edi                                             ;restore block address
  3159                                  ;
  3160                                  ;       Address the preceding and following USER memory blocks
  3161                                  ;
  3162 00000ADD 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3163 00000AE0 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3164                                  ;
  3165                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3166                                  ;       pointer to point to the USER block following this block.
  3167                                  ;
  3168 00000AE3 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3169 00000AE5 7405                                            jz      .10                                             ;no, branch
  3170 00000AE7 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3171 00000AEA EB03                                            jmp     .20                                             ;continue
  3172 00000AEC 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3173                                  ;
  3174                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3175                                  ;       pointer to point to the USER block preceding this block.
  3176                                  ;
  3177 00000AEF E305                    .20                     jecxz   .30                                             ;branch if no next block
  3178 00000AF1 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3179 00000AF4 EB03                                            jmp     .40                                             ;continue
  3180 00000AF6 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  ;
  3183                                  ;       Merge with a previous contiguous FREE memory block.
  3184                                  ;
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  ;
  3187                                  ;       Address the preceding and following contiguous memory blocks.
  3188                                  ;
  3189 00000AF9 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3190 00000AFC 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3191                                  ;
  3192                                  ;       Verify we have a previous contiguous FREE block.
  3193                                  ;
  3194 00000AFF 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3195 00000B01 7442                                            jz      .100                                            ;no, branch
  3196 00000B03 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3197 00000B09 753A                                            jne     .100                                            ;no, branch
  3198                                  ;
  3199                                  ;       Update adjacent block's contiguous pointers.
  3200                                  ;
  3201 00000B0B 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3202 00000B0E E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3203 00000B10 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3204 00000B13 EB03                                            jmp     .60                                             ;continue
  3205 00000B15 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3206                                  ;
  3207                                  ;       Update the size of the merged FREE block.
  3208                                  ;
  3209 00000B18 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3210 00000B1B 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3211                                  ;
  3212                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3213                                  ;
  3214 00000B1E B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3215 00000B23 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3216 00000B25 F3AA                                            rep     stosb                                           ;clear memory header
  3217 00000B27 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219                                  ;
  3220                                  ;       Unlink the previous contiguous FREE memory block
  3221                                  ;
  3222                                  ;-----------------------------------------------------------------------------------------------------------------------
  3223                                  ;
  3224                                  ;       Address the preceding and following USER memory blocks
  3225                                  ;
  3226 00000B29 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3227 00000B2C 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3228                                  ;
  3229                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3230                                  ;       block pointer.
  3231                                  ;
  3232 00000B2F 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3233 00000B31 7405                                            jz      .70                                             ;no, branch
  3234 00000B33 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3235 00000B36 EB03                                            jmp     .80                                             ;branch
  3236 00000B38 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3237                                  ;
  3238                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3239                                  ;       pointer.
  3240                                  ;
  3241 00000B3B E305                    .80                     jecxz   .90                                             ;branch if no next block
  3242 00000B3D 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3243 00000B40 EB03                                            jmp     .100                                            ;continue
  3244 00000B42 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246                                  ;
  3247                                  ;       Merge with a following contiguous FREE memory block.
  3248                                  ;
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                  ;
  3251                                  ;       Verify we have a following contiguous FREE block.
  3252                                  ;
  3253 00000B45 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3254 00000B48 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3255 00000B4A 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3256 00000B50 7543                                            jne     .170                                            ;no, branch
  3257                                  ;
  3258                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3259                                  ;
  3260 00000B52 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3261 00000B55 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3262                                  ;
  3263                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3264                                  ;
  3265 00000B58 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3266 00000B5B 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3267 00000B5E 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3268 00000B60 7405                                            jz      .110                                            ;no, branch
  3269 00000B62 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3270 00000B65 EB03                                            jmp     .120                                            ;continue
  3271 00000B67 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3272                                  ;-----------------------------------------------------------------------------------------------------------------------
  3273                                  ;
  3274                                  ;       Unlink the following contiguous FREE memory block
  3275                                  ;
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277                                  ;
  3278                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3279                                  ;
  3280 00000B6A 57                      .120                    push    edi                                             ;save this block
  3281 00000B6B 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3282 00000B6D 51                                              push    ecx                                             ;save next contiguous block
  3283                                  ;
  3284                                  ;       Address the preceding and following USER memory blocks
  3285                                  ;
  3286 00000B6E 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3287 00000B71 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3288                                  ;
  3289                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3290                                  ;       block pointer.
  3291                                  ;
  3292 00000B74 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3293 00000B76 7405                                            jz      .130                                            ;no, branch
  3294 00000B78 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3295 00000B7B EB03                                            jmp     .140                                            ;branch
  3296 00000B7D 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3297                                  ;
  3298                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3299                                  ;       pointer.
  3300                                  ;
  3301 00000B80 E305                    .140                    jecxz   .150                                            ;branch if no next block
  3302 00000B82 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3303 00000B85 EB03                                            jmp     .160                                            ;continue
  3304 00000B87 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3305                                  ;
  3306                                  ;       Clear next contiguous block's header
  3307                                  ;
  3308 00000B8A 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3309 00000B8B B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3310 00000B90 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3311 00000B92 F3AA                                            rep     stosb                                           ;clear memory header
  3312 00000B94 5F                                              pop     edi                                             ;this block's pointer
  3313                                  ;-----------------------------------------------------------------------------------------------------------------------
  3314                                  ;
  3315                                  ;       Insert the final FREE block back into the block chain.
  3316                                  ;
  3317                                  ;-----------------------------------------------------------------------------------------------------------------------
  3318                                  ;
  3319                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3320                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3321                                  ;       all are smaller in size.
  3322                                  ;
  3323 00000B95 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3324 00000B98 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3325 00000B9B E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3326 00000B9D 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3327 00000BA0 7205                                            jb      .190                                            ;yes, branch
  3328 00000BA2 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3329 00000BA5 EBF4                                            jmp     .180                                            ;continue
  3330                                  ;
  3331                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3332                                  ;       larger free block. Update the next block's previous block pointer.
  3333                                  ;
  3334 00000BA7 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3335 00000BAA 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3336 00000BAD E308                                            jecxz   .200                                            ;branch if no block found
  3337 00000BAF 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3338 00000BB2 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3339 00000BB5 EB03                                            jmp     .210                                            ;continue
  3340 00000BB7 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3341                                  ;
  3342                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3343                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3344                                  ;       next pointer.
  3345                                  ;
  3346 00000BBA 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3347 00000BBD 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3348 00000BBF 7405                                            jz      .220                                            ;no, branch
  3349 00000BC1 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3350 00000BC4 EB03                                            jmp     .230                                            ;continue
  3351 00000BC6 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3352                                  ;
  3353                                  ;       The memory free has completed.
  3354                                  ;
  3355 00000BC9 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3356                                  ;
  3357                                  ;       Restore and return.
  3358                                  ;
  3359 00000BCB 07                      .240                    pop     es                                              ;restore non-volatile regs
  3360 00000BCC 1F                                              pop     ds                                              ;
  3361 00000BCD 5F                                              pop     edi                                             ;
  3362 00000BCE 5E                                              pop     esi                                             ;
  3363 00000BCF 59                                              pop     ecx                                             ;
  3364 00000BD0 5B                                              pop     ebx                                             ;
  3365 00000BD1 C3                                              ret                                                     ;return
  3366                                  ;=======================================================================================================================
  3367                                  ;
  3368                                  ;       String Helper Routines
  3369                                  ;
  3370                                  ;       CompareMemory
  3371                                  ;       UpperCaseString
  3372                                  ;
  3373                                  ;=======================================================================================================================
  3374                                  ;-----------------------------------------------------------------------------------------------------------------------
  3375                                  ;
  3376                                  ;       Routine:        CompareMemory
  3377                                  ;
  3378                                  ;       Description:    This routine compares two byte arrays.
  3379                                  ;
  3380                                  ;       In:             DS:EDX  first source address
  3381                                  ;                       DS:EBX  second source address
  3382                                  ;                       ECX     comparison length
  3383                                  ;
  3384                                  ;       Out:            EDX     first source address
  3385                                  ;                       EBX     second source address
  3386                                  ;                       ECX     0       array 1 = array 2
  3387                                  ;                               <0      array 1 < array 2
  3388                                  ;                               >0      array 1 > array 2
  3389                                  ;
  3390                                  ;-----------------------------------------------------------------------------------------------------------------------
  3391 00000BD2 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3392 00000BD3 57                                              push    edi                                             ;
  3393 00000BD4 06                                              push    es                                              ;
  3394 00000BD5 1E                                              push    ds                                              ;copy DS
  3395 00000BD6 07                                              pop     es                                              ;... to ES
  3396 00000BD7 89D6                                            mov     esi,edx                                         ;first source address
  3397 00000BD9 89DF                                            mov     edi,ebx                                         ;second source address
  3398 00000BDB FC                                              cld                                                     ;forward strings
  3399 00000BDC F3A6                                            rep     cmpsb                                           ;compare bytes
  3400 00000BDE B000                                            mov     al,0                                            ;default result
  3401 00000BE0 7406                                            jz      .10                                             ;branch if arrays equal
  3402 00000BE2 B001                                            mov     al,1                                            ;positive result
  3403 00000BE4 7302                                            jnc     .10                                             ;branch if target > source
  3404 00000BE6 B0FF                                            mov     al,-1                                           ;negative result
  3405 00000BE8 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3406 00000BEB 07                                              pop     es                                              ;restore non-volatile regs
  3407 00000BEC 5F                                              pop     edi                                             ;
  3408 00000BED 5E                                              pop     esi                                             ;
  3409 00000BEE C3                                              ret                                                     ;return
  3410                                  ;-----------------------------------------------------------------------------------------------------------------------
  3411                                  ;
  3412                                  ;       Routine:        UpperCaseString
  3413                                  ;
  3414                                  ;       Description:    This routine places all characters in the given string to upper case.
  3415                                  ;
  3416                                  ;       In:             DS:EDX  string address
  3417                                  ;
  3418                                  ;       Out:            EDX     string address
  3419                                  ;
  3420                                  ;-----------------------------------------------------------------------------------------------------------------------
  3421 00000BEF 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  3422 00000BF0 89D6                                            mov     esi,edx                                         ;string address
  3423 00000BF2 FC                                              cld                                                     ;forward strings
  3424 00000BF3 AC                      .10                     lodsb                                                   ;string character
  3425 00000BF4 84C0                                            test    al,al                                           ;null?
  3426 00000BF6 740F                                            jz      .20                                             ;yes, skip ahead
  3427 00000BF8 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3428 00000BFA 72F7                                            jb      .10                                             ;no, continue
  3429 00000BFC 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3430 00000BFE 77F3                                            ja      .10                                             ;no, continue
  3431 00000C00 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  3432 00000C02 8846FF                                          mov     [esi-1],al                                      ;upper character
  3433 00000C05 EBEC                                            jmp     .10                                             ;continue
  3434 00000C07 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3435 00000C08 C3                                              ret                                                     ;return
  3436                                  ;=======================================================================================================================
  3437                                  ;
  3438                                  ;       Console Helper Routines
  3439                                  ;
  3440                                  ;       FirstConsoleColumn
  3441                                  ;       GetConsoleChar
  3442                                  ;       GetConsoleString
  3443                                  ;       NextConsoleColumn
  3444                                  ;       NextConsoleRow
  3445                                  ;       PreviousConsoleColumn
  3446                                  ;       PutConsoleChar
  3447                                  ;       PutConsoleHexByte
  3448                                  ;       PutConsoleHexDword
  3449                                  ;       PutConsoleHexWord
  3450                                  ;       PutConsoleOIAChar
  3451                                  ;       PutConsoleOIAShift
  3452                                  ;       PutConsoleString
  3453                                  ;       Yield
  3454                                  ;
  3455                                  ;=======================================================================================================================
  3456                                  ;-----------------------------------------------------------------------------------------------------------------------
  3457                                  ;
  3458                                  ;       Routine:        FirstConsoleColumn
  3459                                  ;
  3460                                  ;       Description:    This routine resets the console column to start of the row.
  3461                                  ;
  3462                                  ;       In:             DS      OS data selector
  3463                                  ;
  3464                                  ;-----------------------------------------------------------------------------------------------------------------------
  3465 00000C09 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  3466 00000C0B A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  3467 00000C10 C3                                              ret                                                     ;return
  3468                                  ;-----------------------------------------------------------------------------------------------------------------------
  3469                                  ;
  3470                                  ;       Routine:        GetConsoleChar
  3471                                  ;
  3472                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3473                                  ;
  3474                                  ;       Out:            AL      ASCII character code
  3475                                  ;                       AH      keyboard scan code
  3476                                  ;
  3477                                  ;-----------------------------------------------------------------------------------------------------------------------
  3478 00000C11 E85C020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3479 00000C16 E86F030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  3480 00000C1B 09C0                                            or      eax,eax                                         ;do we have a message?
  3481 00000C1D 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  3482 00000C1F 50                                              push    eax                                             ;save key codes
  3483 00000C20 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  3484 00000C25 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3485 00000C2A 58                                              pop     eax                                             ;restore key codes
  3486 00000C2B 75E9                                            jne     GetConsoleChar                                  ;no, try again
  3487 00000C2D 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  3488 00000C32 C3                                              ret                                                     ;return
  3489                                  ;-----------------------------------------------------------------------------------------------------------------------
  3490                                  ;
  3491                                  ;       Routine:        GetConsoleString
  3492                                  ;
  3493                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3494                                  ;
  3495                                  ;       In:             DS:EDX  target buffer address
  3496                                  ;                       ECX     maximum number of characters to accept
  3497                                  ;                       BH      echo to terminal
  3498                                  ;                       BL      terminating character
  3499                                  ;
  3500                                  ;-----------------------------------------------------------------------------------------------------------------------
  3501 00000C33 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  3502 00000C34 56                                              push    esi                                             ;
  3503 00000C35 57                                              push    edi                                             ;
  3504 00000C36 06                                              push    es                                              ;
  3505 00000C37 1E                                              push    ds                                              ;load data segment selector ...
  3506 00000C38 07                                              pop     es                                              ;... into extra segment register
  3507 00000C39 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3508 00000C3B 51                                              push    ecx                                             ;save maximum characters
  3509 00000C3C 30C0                                            xor     al,al                                           ;zero register
  3510 00000C3E FC                                              cld                                                     ;forward strings
  3511 00000C3F F3AA                                            rep     stosb                                           ;zero fill buffer
  3512 00000C41 59                                              pop     ecx                                             ;maximum characters
  3513 00000C42 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3514 00000C44 89D6                                            mov     esi,edx                                         ;esi = target buffer
  3515 00000C46 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  3516 00000C48 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  3517 00000C4D 38D8                                            cmp     al,bl                                           ;is this the terminator?
  3518 00000C4F 7445                                            je      .50                                             ;yes, exit
  3519 00000C51 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3520 00000C53 7521                                            jne     .30                                             ;no, skip ahead
  3521 00000C55 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  3522 00000C57 74EF                                            je      .20                                             ;yes, get next character
  3523 00000C59 4F                                              dec     edi                                             ;backup target pointer
  3524 00000C5A C60700                                          mov     byte [edi],0                                    ;zero previous character
  3525 00000C5D 41                                              inc     ecx                                             ;increment remaining chars
  3526 00000C5E F6C701                                          test    bh,1                                            ;echo to console?
  3527 00000C61 74E5                                            jz      .20                                             ;no, get next character
  3528 00000C63 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  3529 00000C68 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3530 00000C6A E891000000                                      call    PutConsoleChar                                  ;write space to console
  3531 00000C6F E82B040000                                      call    PlaceCursor                                     ;position the cursor
  3532 00000C74 EBD2                                            jmp     .20                                             ;get next character
  3533 00000C76 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3534 00000C78 72CE                                            jb      .20                                             ;no, get another character
  3535 00000C7A 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3536 00000C7C 77CA                                            ja      .20                                             ;no, get another character
  3537 00000C7E AA                                              stosb                                                   ;store character in buffer
  3538 00000C7F F6C701                                          test    bh,1                                            ;echo to console?
  3539 00000C82 740F                                            jz      .40                                             ;no, skip ahead
  3540 00000C84 E877000000                                      call    PutConsoleChar                                  ;write character to console
  3541 00000C89 E810000000                                      call    NextConsoleColumn                               ;advance console position
  3542 00000C8E E80C040000                                      call    PlaceCursor                                     ;position the cursor
  3543 00000C93 49                      .40                     dec     ecx                                             ;decrement remaining chars
  3544 00000C94 EBB0                                            jmp     .10                                             ;next
  3545 00000C96 30C0                    .50                     xor     al,al                                           ;null
  3546 00000C98 AA                                              stosb                                                   ;terminate buffer
  3547 00000C99 07                                              pop     es                                              ;restore non-volatile regs
  3548 00000C9A 5F                                              pop     edi                                             ;
  3549 00000C9B 5E                                              pop     esi                                             ;
  3550 00000C9C 59                                              pop     ecx                                             ;
  3551 00000C9D C3                                              ret                                                     ;return
  3552                                  ;-----------------------------------------------------------------------------------------------------------------------
  3553                                  ;
  3554                                  ;       Routine:        NextConsoleColumn
  3555                                  ;
  3556                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3557                                  ;                       incremented if the end of the current row is reached.
  3558                                  ;
  3559                                  ;       In:             DS      OS data selector
  3560                                  ;
  3561                                  ;-----------------------------------------------------------------------------------------------------------------------
  3562 00000C9E A014080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3563 00000CA3 FEC0                                            inc     al                                              ;increment column
  3564 00000CA5 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  3565 00000CAA 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  3566 00000CAC 720A                                            jb      .10                                             ;no, skip ahead
  3567 00000CAE E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  3568 00000CB3 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  3569 00000CB8 C3                      .10                     ret                                                     ;return
  3570                                  ;-----------------------------------------------------------------------------------------------------------------------
  3571                                  ;
  3572                                  ;       Routine:        NextConsoleRow
  3573                                  ;
  3574                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3575                                  ;
  3576                                  ;       In:             DS      OS data selector
  3577                                  ;
  3578                                  ;-----------------------------------------------------------------------------------------------------------------------
  3579 00000CB9 A015080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3580 00000CBE FEC0                                            inc     al                                              ;increment row
  3581 00000CC0 A215080000                                      mov     [wbConsoleRow],al                               ;save row
  3582 00000CC5 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  3583 00000CC7 7211                                            jb      .10                                             ;no, skip ahead
  3584 00000CC9 E854030000                                      call    ScrollConsoleRow                                ;scroll up one row
  3585 00000CCE A015080000                                      mov     al,[wbConsoleRow]                               ;row
  3586 00000CD3 FEC8                                            dec     al                                              ;decrement row
  3587 00000CD5 A215080000                                      mov     [wbConsoleRow],al                               ;save row
  3588 00000CDA C3                      .10                     ret                                                     ;return
  3589                                  ;-----------------------------------------------------------------------------------------------------------------------
  3590                                  ;
  3591                                  ;       Routine:        PreviousConsoleColumn
  3592                                  ;
  3593                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3594                                  ;                       the column is set to the last position in the row and the row is decremented.
  3595                                  ;
  3596                                  ;       In:             DS      OS data selector
  3597                                  ;
  3598                                  ;-----------------------------------------------------------------------------------------------------------------------
  3599 00000CDB A014080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3600 00000CE0 08C0                                            or      al,al                                           ;start of row?
  3601 00000CE2 7514                                            jnz     .10                                             ;no, skip ahead
  3602 00000CE4 8A2515080000                                    mov     ah,[wbConsoleRow]                               ;current row
  3603 00000CEA 08E4                                            or      ah,ah                                           ;top of screen?
  3604 00000CEC 7411                                            jz      .20                                             ;yes, exit with no change
  3605 00000CEE FECC                                            dec     ah                                              ;decrement row
  3606 00000CF0 882515080000                                    mov     [wbConsoleRow],ah                               ;save row
  3607 00000CF6 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  3608 00000CF8 FEC8                    .10                     dec     al                                              ;decrement column
  3609 00000CFA A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  3610 00000CFF C3                      .20                     ret                                                     ;return
  3611                                  ;-----------------------------------------------------------------------------------------------------------------------
  3612                                  ;
  3613                                  ;       Routine:        PutConsoleChar
  3614                                  ;
  3615                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3616                                  ;
  3617                                  ;       In:             AL      ASCII character
  3618                                  ;                       DS      OS data selector
  3619                                  ;
  3620                                  ;-----------------------------------------------------------------------------------------------------------------------
  3621 00000D00 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3622 00000D01 06                                              push    es                                              ;
  3623 00000D02 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3624 00000D04 07                                              pop     es                                              ;... into extra segment reg
  3625 00000D05 8A0D14080000                                    mov     cl,[wbConsoleColumn]                            ;column
  3626 00000D0B 8A2D15080000                                    mov     ch,[wbConsoleRow]                               ;row
  3627 00000D11 E838030000                                      call    SetConsoleChar                                  ;put character at row, column
  3628 00000D16 07                                              pop     es                                              ;restore non-volatile regs
  3629 00000D17 59                                              pop     ecx                                             ;
  3630 00000D18 C3                                              ret                                                     ;return
  3631                                  ;-----------------------------------------------------------------------------------------------------------------------
  3632                                  ;
  3633                                  ;       Routine:        PutConsoleHexByte
  3634                                  ;
  3635                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3636                                  ;
  3637                                  ;       In:             AL      byte value
  3638                                  ;                       CL      column
  3639                                  ;                       CH      row
  3640                                  ;                       DS      OS data selector
  3641                                  ;                       ES      CGA selector
  3642                                  ;
  3643                                  ;-----------------------------------------------------------------------------------------------------------------------
  3644 00000D19 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  3645 00000D1A C0E804                                          shr     al,4                                            ;hi-order nybble
  3646 00000D1D E803000000                                      call    .10                                             ;make ASCII and store
  3647 00000D22 58                                              pop     eax                                             ;byte value
  3648 00000D23 240F                                            and     al,0Fh                                          ;lo-order nybble
  3649 00000D25 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  3650 00000D27 3C3A                                            cmp     al,03Ah                                         ;numeric?
  3651 00000D29 7202                                            jb      .20                                             ;yes, skip ahead
  3652 00000D2B 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3653 00000D2D E81C030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  3654 00000D32 C3                                              ret                                                     ;return
  3655                                  ;-----------------------------------------------------------------------------------------------------------------------
  3656                                  ;
  3657                                  ;       Routine:        PutConsoleHexDword
  3658                                  ;
  3659                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3660                                  ;
  3661                                  ;       In:             EAX     value
  3662                                  ;                       CL      column
  3663                                  ;                       CH      row
  3664                                  ;                       DS      OS data selector
  3665                                  ;                       ES      CGA selector
  3666                                  ;
  3667                                  ;-----------------------------------------------------------------------------------------------------------------------
  3668 00000D33 50                      PutConsoleHexDword      push    eax
  3669 00000D34 C1E810                                          shr     eax,16
  3670 00000D37 E807000000                                      call    PutConsoleHexWord
  3671 00000D3C 58                                              pop     eax
  3672 00000D3D E801000000                                      call    PutConsoleHexWord
  3673 00000D42 C3                                              ret
  3674                                  ;-----------------------------------------------------------------------------------------------------------------------
  3675                                  ;
  3676                                  ;       Routine:        PutConsoleHexWord
  3677                                  ;
  3678                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3679                                  ;
  3680                                  ;       In:             EAX     value
  3681                                  ;                       CL      column
  3682                                  ;                       CH      row
  3683                                  ;                       DS      OS data selector
  3684                                  ;                       ES      CGA selector
  3685                                  ;
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687 00000D43 50                      PutConsoleHexWord       push    eax
  3688 00000D44 C1E808                                          shr     eax,8
  3689 00000D47 E8CDFFFFFF                                      call    PutConsoleHexByte
  3690 00000D4C 58                                              pop     eax
  3691 00000D4D E8C7FFFFFF                                      call    PutConsoleHexByte
  3692 00000D52 C3                                              ret
  3693                                  ;-----------------------------------------------------------------------------------------------------------------------
  3694                                  ;
  3695                                  ;       Routine:        PutConsoleOIAChar
  3696                                  ;
  3697                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3698                                  ;
  3699                                  ;       In:             DS      OS data selector
  3700                                  ;
  3701                                  ;-----------------------------------------------------------------------------------------------------------------------
  3702 00000D53 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3703 00000D54 51                                              push    ecx                                             ;
  3704 00000D55 56                                              push    esi                                             ;
  3705 00000D56 1E                                              push    ds                                              ;
  3706 00000D57 06                                              push    es                                              ;
  3707 00000D58 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3708 00000D5A 1F                                              pop     ds                                              ;... into data segment register
  3709 00000D5B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3710 00000D5D 07                                              pop     es                                              ;... into extra segment register
  3711 00000D5E BE19080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  3712 00000D63 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  3713 00000D65 B300                                            mov     bl,0                                            ;starting column
  3714 00000D67 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  3715 00000D6C 51                      .10                     push    ecx                                             ;save remaining count
  3716 00000D6D 89D9                                            mov     ecx,ebx                                         ;row, column
  3717 00000D6F AC                                              lodsb                                                   ;read scan code
  3718 00000D70 08C0                                            or      al,al                                           ;scan code present?
  3719 00000D72 7407                                            jz      .20                                             ;no, skip ahead
  3720 00000D74 E8A0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  3721 00000D79 EB0E                                            jmp     .30                                             ;continue
  3722 00000D7B B020                    .20                     mov     al,' '                                          ;ASCII space
  3723 00000D7D E8CC020000                                      call    SetConsoleChar                                  ;display space
  3724 00000D82 B020                                            mov     al,' '                                          ;ASCII space
  3725 00000D84 E8C5020000                                      call    SetConsoleChar                                  ;display space
  3726 00000D89 80C302                  .30                     add     bl,2                                            ;next column (+2)
  3727 00000D8C 59                                              pop     ecx                                             ;restore remaining
  3728 00000D8D E2DD                                            loop    .10                                             ;next code
  3729 00000D8F A01F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  3730 00000D94 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  3731 00000D96 720D                                            jb      .40                                             ;no, skip ahead
  3732 00000D98 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  3733 00000D9A 7709                                            ja      .40                                             ;no, skip ahead
  3734 00000D9C 88FD                                            mov     ch,bh                                           ;OIA row
  3735 00000D9E B128                                            mov     cl,40                                           ;character display column
  3736 00000DA0 E8A9020000                                      call    SetConsoleChar                                  ;display ASCII character
  3737 00000DA5 07                      .40                     pop     es                                              ;restore non-volatile regs
  3738 00000DA6 1F                                              pop     ds                                              ;
  3739 00000DA7 5E                                              pop     esi                                             ;
  3740 00000DA8 59                                              pop     ecx                                             ;
  3741 00000DA9 5B                                              pop     ebx                                             ;
  3742 00000DAA C3                                              ret                                                     ;return
  3743                                  ;-----------------------------------------------------------------------------------------------------------------------
  3744                                  ;
  3745                                  ;       Routine:        PutConsoleOIAShift
  3746                                  ;
  3747                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3748                                  ;
  3749                                  ;       In:             BL      shift flags
  3750                                  ;                       BH      lock flags
  3751                                  ;                       DS      OS data selector
  3752                                  ;
  3753                                  ;-----------------------------------------------------------------------------------------------------------------------
  3754 00000DAB 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3755 00000DAC 06                                              push    es                                              ;
  3756 00000DAD 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3757 00000DAF 07                                              pop     es                                              ;... into ES register
  3758 00000DB0 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  3759 00000DB2 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  3760 00000DB4 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3761 00000DB7 7402                                            jz      .10                                             ;no, skip ahead
  3762 00000DB9 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3763 00000DBB B10E                    .10                     mov     cl,14                                           ;indicator column
  3764 00000DBD E88C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3765 00000DC2 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3766 00000DC4 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3767 00000DC7 7402                                            jz      .20                                             ;no, skip ahead
  3768 00000DC9 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3769 00000DCB B140                    .20                     mov     cl,64                                           ;indicator column
  3770 00000DCD E87C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3771 00000DD2 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3772 00000DD4 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3773 00000DD7 7402                                            jz      .30                                             ;no, skip ahead
  3774 00000DD9 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3775 00000DDB B10F                    .30                     mov     cl,15                                           ;indicator column
  3776 00000DDD E86C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3777 00000DE2 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3778 00000DE4 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3779 00000DE7 7402                                            jz      .40                                             ;no, skip ahead
  3780 00000DE9 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3781 00000DEB B13F                    .40                     mov     cl,63                                           ;indicator column
  3782 00000DED E85C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3783 00000DF2 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3784 00000DF4 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3785 00000DF7 7402                                            jz      .50                                             ;no, skip ahead
  3786 00000DF9 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3787 00000DFB B110                    .50                     mov     cl,16                                           ;indicator column
  3788 00000DFD E84C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3789 00000E02 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3790 00000E04 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3791 00000E07 7402                                            jz      .60                                             ;no, skip ahead
  3792 00000E09 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3793 00000E0B B13E                    .60                     mov     cl,62                                           ;indicator column
  3794 00000E0D E83C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3795 00000E12 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3796 00000E14 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3797 00000E17 7402                                            jz      .70                                             ;no, skip ahead
  3798 00000E19 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3799 00000E1B B14E                    .70                     mov     cl,78                                           ;indicator column
  3800 00000E1D E82C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3801 00000E22 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3802 00000E24 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3803 00000E27 7402                                            jz      .80                                             ;no, skip ahead
  3804 00000E29 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  3805 00000E2B B14D                    .80                     mov     cl,77                                           ;indicator column
  3806 00000E2D E81C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3807 00000E32 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3808 00000E34 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3809 00000E37 7402                                            jz      .90                                             ;no, skip ahead
  3810 00000E39 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3811 00000E3B B14C                    .90                     mov     cl,76                                           ;indicator column
  3812 00000E3D E80C020000                                      call    SetConsoleChar                                  ;display ASCII character
  3813 00000E42 07                                              pop     es                                              ;restore non-volatile regs
  3814 00000E43 59                                              pop     ecx                                             ;
  3815 00000E44 C3                                              ret                                                     ;return
  3816                                  ;-----------------------------------------------------------------------------------------------------------------------
  3817                                  ;
  3818                                  ;       Routine:        PutConsoleString
  3819                                  ;
  3820                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3821                                  ;                       console position as needed.
  3822                                  ;
  3823                                  ;       In:             EDX     source address
  3824                                  ;                       DS      OS data selector
  3825                                  ;
  3826                                  ;-----------------------------------------------------------------------------------------------------------------------
  3827 00000E45 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  3828 00000E46 89D6                                            mov     esi,edx                                         ;source address
  3829 00000E48 FC                                              cld                                                     ;forward strings
  3830 00000E49 AC                      .10                     lodsb                                                   ;ASCII character
  3831 00000E4A 08C0                                            or      al,al                                           ;end of string?
  3832 00000E4C 7422                                            jz      .40                                             ;yes, skip ahead
  3833 00000E4E 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  3834 00000E50 7507                                            jne     .20                                             ;no, skip ahead
  3835 00000E52 E8B2FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  3836 00000E57 EBF0                                            jmp     .10                                             ;next character
  3837 00000E59 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3838 00000E5B 7507                                            jne     .30                                             ;no, skip ahead
  3839 00000E5D E857FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  3840 00000E62 EBE5                                            jmp     .10                                             ;next character
  3841 00000E64 E897FEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  3842 00000E69 E830FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  3843 00000E6E EBD9                                            jmp     .10                                             ;next character
  3844 00000E70 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  3845 00000E71 C3                                              ret                                                     ;return
  3846                                  ;-----------------------------------------------------------------------------------------------------------------------
  3847                                  ;
  3848                                  ;       Routine:        Yield
  3849                                  ;
  3850                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3851                                  ;
  3852                                  ;-----------------------------------------------------------------------------------------------------------------------
  3853 00000E72 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  3854 00000E73 F4                                              hlt                                                     ;halt until external interrupt
  3855 00000E74 C3                                              ret                                                     ;return
  3856                                  ;=======================================================================================================================
  3857                                  ;
  3858                                  ;       Data-Type Conversion Helper Routines
  3859                                  ;
  3860                                  ;       DecimalToUnsigned
  3861                                  ;       HexadecimalToUnsigned
  3862                                  ;       UnsignedToDecimalString
  3863                                  ;       UnsignedToHexadecimal
  3864                                  ;
  3865                                  ;=======================================================================================================================
  3866                                  ;-----------------------------------------------------------------------------------------------------------------------
  3867                                  ;
  3868                                  ;       Routine:        DecimalToUnsigned
  3869                                  ;
  3870                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  3871                                  ;
  3872                                  ;       Input:          DS:EDX  null-terminated decimal string address
  3873                                  ;
  3874                                  ;       Output:         EAX     unsigned integer value
  3875                                  ;
  3876                                  ;-----------------------------------------------------------------------------------------------------------------------
  3877 00000E75 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  3878 00000E76 89D6                                            mov     esi,edx                                         ;source address
  3879 00000E78 31D2                                            xor     edx,edx                                         ;zero total
  3880 00000E7A AC                      .10                     lodsb                                                   ;source byte
  3881 00000E7B 3C2C                                            cmp     al,','                                          ;comma?
  3882 00000E7D 74FB                                            je      .10                                             ;yes, ignore
  3883 00000E7F 84C0                                            test    al,al                                           ;end of string?
  3884 00000E81 7421                                            jz      .30                                             ;yes, done
  3885 00000E83 3C2E                                            cmp     al,'.'                                          ;decimal point?
  3886 00000E85 741D                                            je      .30                                             ;yes, done
  3887 00000E87 3C30                                            cmp     al,'0'                                          ;numeral?
  3888 00000E89 7217                                            jb      .20                                             ;no, invalid string
  3889 00000E8B 3C39                                            cmp     al,'9'                                          ;numeral?
  3890 00000E8D 7713                                            ja      .20                                             ;no, invalid string
  3891 00000E8F 240F                                            and     al,00Fh                                         ;mask ASCII zone
  3892 00000E91 50                                              push    eax                                             ;save numeral
  3893 00000E92 D1E2                                            shl     edx,1                                           ;total * 2
  3894 00000E94 89D0                                            mov     eax,edx                                         ;total * 2
  3895 00000E96 C1E202                                          shl     edx,2                                           ;total * 8
  3896 00000E99 01C2                                            add     edx,eax                                         ;total * 10
  3897 00000E9B 58                                              pop     eax                                             ;restore numeral
  3898 00000E9C 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  3899 00000E9E 31C0                                            xor     eax,eax                                         ;zero register
  3900 00000EA0 EBD8                                            jmp     .10                                             ;next
  3901 00000EA2 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  3902 00000EA4 89D0                    .30                     mov     eax,edx                                         ;result
  3903 00000EA6 5E                                              pop     esi                                             ;restore non-volatile regs
  3904 00000EA7 C3                                              ret                                                     ;return
  3905                                  ;-----------------------------------------------------------------------------------------------------------------------
  3906                                  ;
  3907                                  ;       Routine:        HexadecimalToUnsigned
  3908                                  ;
  3909                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3910                                  ;
  3911                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3912                                  ;
  3913                                  ;       Output:         EAX     unsigned integer value
  3914                                  ;
  3915                                  ;-----------------------------------------------------------------------------------------------------------------------
  3916 00000EA8 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3917 00000EA9 89D6                                            mov     esi,edx                                         ;source address
  3918 00000EAB 31D2                                            xor     edx,edx                                         ;zero register
  3919 00000EAD AC                      .10                     lodsb                                                   ;source byte
  3920 00000EAE 84C0                                            test    al,al                                           ;end of string?
  3921 00000EB0 7410                                            jz      .30                                             ;yes, branch
  3922 00000EB2 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  3923 00000EB4 7602                                            jna     .20                                             ;no, skip ahead
  3924 00000EB6 2C37                                            sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  3925 00000EB8 83E00F                  .20                     and     eax,00Fh                                        ;remove ascii zone
  3926 00000EBB C1E204                                          shl     edx,4                                           ;previous total x 16
  3927 00000EBE 01C2                                            add     edx,eax                                         ;add prior value x 16
  3928 00000EC0 EBEB                                            jmp     .10                                             ;next
  3929 00000EC2 89D0                    .30                     mov     eax,edx                                         ;result
  3930 00000EC4 5E                                              pop     esi                                             ;restore non-volatile regs
  3931 00000EC5 C3                                              ret                                                     ;return
  3932                                  ;-----------------------------------------------------------------------------------------------------------------------
  3933                                  ;
  3934                                  ;       Routine:        UnsignedToDecimalString
  3935                                  ;
  3936                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3937                                  ;
  3938                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  3939                                  ;                                               bit 1: 1 = include comma grouping delimiters
  3940                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  3941                                  ;                       ECX     32-bit binary
  3942                                  ;                       DS:EDX  output buffer address
  3943                                  ;
  3944                                  ;-----------------------------------------------------------------------------------------------------------------------
  3945 00000EC6 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  3946 00000EC7 51                                              push    ecx                                             ;
  3947 00000EC8 57                                              push    edi                                             ;
  3948 00000EC9 06                                              push    es                                              ;
  3949 00000ECA 1E                                              push    ds                                              ;load data selector
  3950 00000ECB 07                                              pop     es                                              ;... into extra segment reg
  3951 00000ECC 89D7                                            mov     edi,edx                                         ;output buffer address
  3952 00000ECE 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  3953 00000ED1 89CA                                            mov     edx,ecx                                         ;binary
  3954 00000ED3 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  3955 00000ED8 E871000000                                      call    .30                                             ;divide and store
  3956 00000EDD B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  3957 00000EE2 E855000000                                      call    .10                                             ;divide and store
  3958 00000EE7 B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  3959 00000EEC E85D000000                                      call    .30                                             ;divide and store
  3960 00000EF1 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  3961 00000EF6 E853000000                                      call    .30                                             ;divide and store
  3962 00000EFB B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  3963 00000F00 E837000000                                      call    .10                                             ;divide and store
  3964 00000F05 B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  3965 00000F0A E83F000000                                      call    .30                                             ;divide and store
  3966 00000F0F B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  3967 00000F14 E835000000                                      call    .30                                             ;divide and store
  3968 00000F19 B964000000                                      mov     ecx,100                                         ;10^2 divisor
  3969 00000F1E E819000000                                      call    .10                                             ;divide and store
  3970 00000F23 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  3971 00000F28 E821000000                                      call    .30                                             ;divide and store
  3972 00000F2D 89D0                                            mov     eax,edx                                         ;10^1 remainder
  3973 00000F2F E827000000                                      call    .40                                             ;store
  3974 00000F34 30C0                                            xor     al,al                                           ;null terminator
  3975 00000F36 AA                                              stosb                                                   ;store in output buffer
  3976 00000F37 07                                              pop     es                                              ;restore non-volatile regs
  3977 00000F38 5F                                              pop     edi                                             ;
  3978 00000F39 59                                              pop     ecx                                             ;
  3979 00000F3A 5B                                              pop     ebx                                             ;
  3980 00000F3B C3                                              ret                                                     ;return
  3981 00000F3C F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  3982 00000F3F 740D                                            jz      .30                                             ;no, branch
  3983 00000F41 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  3984 00000F44 7405                                            jz      .20                                             ;no, store delim
  3985 00000F46 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  3986 00000F49 7403                                            jz      .30                                             ;no, branch
  3987 00000F4B B02C                    .20                     mov     al,','                                          ;delimiter
  3988 00000F4D AA                                              stosb                                                   ;store delimiter
  3989 00000F4E 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  3990 00000F50 31D2                                            xor     edx,edx                                         ;zero hi-order
  3991 00000F52 F7F1                                            div     ecx                                             ;divide by power of 10
  3992 00000F54 84C0                                            test    al,al                                           ;zero?
  3993 00000F56 7407                                            jz      .50                                             ;yes, branch
  3994 00000F58 80CF10                                          or      bh,00010000b                                    ;non-zero found
  3995 00000F5B 0C30                    .40                     or      al,030h                                         ;ASCII zone
  3996 00000F5D AA                                              stosb                                                   ;store digit
  3997 00000F5E C3                                              ret                                                     ;return
  3998 00000F5F F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  3999 00000F62 74F7                                            jz      .40                                             ;no, store and continue
  4000 00000F64 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4001 00000F67 75F2                                            jnz     .40                                             ;yes, store and continue
  4002 00000F69 C3                                              ret                                                     ;return
  4003                                  ;-----------------------------------------------------------------------------------------------------------------------
  4004                                  ;
  4005                                  ;       Routine:        UnsignedToHexadecimal
  4006                                  ;
  4007                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4008                                  ;
  4009                                  ;       Input:          DS:EDX  output buffer address
  4010                                  ;                       ECX     32-bit binary
  4011                                  ;
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013 00000F6A 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4014 00000F6B 89D7                                            mov     edi,edx                                         ;output buffer address
  4015 00000F6D 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4016 00000F6F 31C9                                            xor     ecx,ecx                                         ;zero register
  4017 00000F71 B108                                            mov     cl,8                                            ;nybble count
  4018 00000F73 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4019 00000F76 88D0                                            mov     al,dl                                           ;????bbbb
  4020 00000F78 240F                                            and     al,00Fh                                         ;mask out bits 4-7
  4021 00000F7A 0C30                                            or      al,030h                                         ;mask in ascii zone
  4022 00000F7C 3C3A                                            cmp     al,03Ah                                         ;A through F?
  4023 00000F7E 7202                                            jb      .20                                             ;no, skip ahead
  4024 00000F80 0407                                            add     al,7                                            ;41h through 46h
  4025 00000F82 AA                      .20                     stosb                                                   ;store hexnum
  4026 00000F83 E2EE                                            loop    .10                                             ;next nybble
  4027 00000F85 30C0                                            xor     al,al                                           ;zero reg
  4028 00000F87 AA                                              stosb                                                   ;null terminate
  4029 00000F88 5F                                              pop     edi                                             ;restore non-volatile regs
  4030 00000F89 C3                                              ret                                                     ;return
  4031                                  ;=======================================================================================================================
  4032                                  ;
  4033                                  ;       Message Queue Helper Routines
  4034                                  ;
  4035                                  ;       GetMessage
  4036                                  ;       PutMessage
  4037                                  ;
  4038                                  ;=======================================================================================================================
  4039                                  ;-----------------------------------------------------------------------------------------------------------------------
  4040                                  ;
  4041                                  ;       Routine:        GetMessage
  4042                                  ;
  4043                                  ;       Description:    This routine reads and removes a message from the message queue.
  4044                                  ;
  4045                                  ;       Out:            EAX     lo-order message data
  4046                                  ;                       EDX     hi-order message data
  4047                                  ;
  4048                                  ;                       CY      0 = message read
  4049                                  ;                               1 = no message to read
  4050                                  ;
  4051                                  ;-----------------------------------------------------------------------------------------------------------------------
  4052 00000F8A 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4053 00000F8B 51                                              push    ecx                                             ;
  4054 00000F8C 1E                                              push    ds                                              ;
  4055 00000F8D 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4056 00000F8F 1F                                              pop     ds                                              ;... into data segment register
  4057 00000F90 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4058 00000F96 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4059 00000F98 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4060 00000F9B 09D0                                            or      eax,edx                                         ;is queue empty?
  4061 00000F9D F9                                              stc                                                     ;assume queue is emtpy
  4062 00000F9E 741B                                            jz      .20                                             ;yes, skip ahead
  4063 00000FA0 31C9                                            xor     ecx,ecx                                         ;store zero
  4064 00000FA2 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4065 00000FA4 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4066 00000FA7 83C308                                          add     ebx,8                                           ;next queue element
  4067 00000FAA 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  4068 00000FB0 7502                                            jnz     .10                                             ;no, skip ahead
  4069 00000FB2 B308                                            mov     bl,8                                            ;reset to 1st entry
  4070 00000FB4 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4071 00000FBA F8                                              clc                                                     ;indicate message read
  4072 00000FBB 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4073 00000FBC 59                                              pop     ecx                                             ;
  4074 00000FBD 5B                                              pop     ebx                                             ;
  4075 00000FBE C3                                              ret                                                     ;return
  4076                                  ;-----------------------------------------------------------------------------------------------------------------------
  4077                                  ;
  4078                                  ;       Routine:        PutMessage
  4079                                  ;
  4080                                  ;       Description:    This routine adda a message to the message queue.
  4081                                  ;
  4082                                  ;       In:             ECX     hi-order data word
  4083                                  ;                       EDX     lo-order data word
  4084                                  ;
  4085                                  ;       Out:            CY      0 = success
  4086                                  ;                               1 = fail: queue is full
  4087                                  ;
  4088                                  ;-----------------------------------------------------------------------------------------------------------------------
  4089 00000FBF 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4090 00000FC0 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4091 00000FC2 1F                                              pop     ds                                              ;... into data segment register
  4092 00000FC3 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4093 00000FC8 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4094 00000FCB F9                                              stc                                                     ;assume failure
  4095 00000FCC 7517                                            jne     .20                                             ;yes, cannot store
  4096 00000FCE 8910                                            mov     [eax],edx                                       ;store lo-order data
  4097 00000FD0 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4098 00000FD3 83C008                                          add     eax,8                                           ;next queue element adr
  4099 00000FD6 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  4100 00000FDB 7502                                            jnz     .10                                             ;no, skip ahead
  4101 00000FDD B008                                            mov     al,8                                            ;reset to top of queue
  4102 00000FDF A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4103 00000FE4 F8                                              clc                                                     ;indicate success
  4104 00000FE5 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4105 00000FE6 C3                                              ret                                                     ;return
  4106                                  ;=======================================================================================================================
  4107                                  ;
  4108                                  ;       Memory-Mapped Video Routines
  4109                                  ;
  4110                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4111                                  ;
  4112                                  ;       ClearConsoleScreen
  4113                                  ;       ScrollConsoleRow
  4114                                  ;       SetConsoleChar
  4115                                  ;       SetConsoleString
  4116                                  ;
  4117                                  ;=======================================================================================================================
  4118                                  ;-----------------------------------------------------------------------------------------------------------------------
  4119                                  ;
  4120                                  ;       Routine:        ClearConsoleScreen
  4121                                  ;
  4122                                  ;       Description:    This routine clears the console (CGA) screen.
  4123                                  ;
  4124                                  ;-----------------------------------------------------------------------------------------------------------------------
  4125 00000FE7 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4126 00000FE8 57                                              push    edi                                             ;
  4127 00000FE9 1E                                              push    ds                                              ;
  4128 00000FEA 06                                              push    es                                              ;
  4129 00000FEB 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4130 00000FED 1F                                              pop     ds                                              ;... into DS register
  4131 00000FEE 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4132 00000FF0 07                                              pop     es                                              ;... into ES register
  4133 00000FF1 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4134 00000FF6 B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4135 00000FFB 31FF                                            xor     edi,edi                                         ;target offset
  4136 00000FFD FC                                              cld                                                     ;forward strings
  4137 00000FFE F3AB                                            rep     stosd                                           ;reset screen body
  4138 00001000 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4139 00001005 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4140 0000100A F3AB                                            rep     stosd                                           ;reset OIA line
  4141 0000100C 30C0                                            xor     al,al                                           ;zero register
  4142 0000100E A215080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4143 00001013 A214080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4144 00001018 E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4145 0000101D 07                                              pop     es                                              ;restore non-volatile regs
  4146 0000101E 1F                                              pop     ds                                              ;
  4147 0000101F 5F                                              pop     edi                                             ;
  4148 00001020 59                                              pop     ecx                                             ;
  4149 00001021 C3                                              ret                                                     ;return
  4150                                  ;-----------------------------------------------------------------------------------------------------------------------
  4151                                  ;
  4152                                  ;       Routine:        ScrollConsoleRow
  4153                                  ;
  4154                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4155                                  ;
  4156                                  ;-----------------------------------------------------------------------------------------------------------------------
  4157 00001022 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4158 00001023 56                                              push    esi                                             ;
  4159 00001024 57                                              push    edi                                             ;
  4160 00001025 1E                                              push    ds                                              ;
  4161 00001026 06                                              push    es                                              ;
  4162 00001027 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4163 00001029 1F                                              pop     ds                                              ;... into DS
  4164 0000102A 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4165 0000102C 07                                              pop     es                                              ;... into ES
  4166 0000102D B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4167 00001032 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4168 00001037 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4169 00001039 FC                                              cld                                                     ;forward strings
  4170 0000103A F3A5                                            rep     movsd                                           ;move 24 lines up
  4171 0000103C B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4172 00001041 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4173 00001046 F3AB                                            rep     stosd                                           ;clear bottom row
  4174 00001048 07                                              pop     es                                              ;restore non-volatile regs
  4175 00001049 1F                                              pop     ds                                              ;
  4176 0000104A 5F                                              pop     edi                                             ;
  4177 0000104B 5E                                              pop     esi                                             ;
  4178 0000104C 59                                              pop     ecx                                             ;
  4179 0000104D C3                                              ret                                                     ;return
  4180                                  ;-----------------------------------------------------------------------------------------------------------------------
  4181                                  ;
  4182                                  ;       Routine:        SetConsoleChar
  4183                                  ;
  4184                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4185                                  ;
  4186                                  ;       In:             AL      ASCII character
  4187                                  ;                       CL      column
  4188                                  ;                       CH      row
  4189                                  ;                       ES      CGA selector
  4190                                  ;
  4191                                  ;       Out:            EAX     last target address written (ES:)
  4192                                  ;                       CL      column + 1
  4193                                  ;
  4194                                  ;-----------------------------------------------------------------------------------------------------------------------
  4195 0000104E 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4196 00001050 0FB6C5                                          movzx   eax,ch                                          ;row
  4197 00001053 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4198 00001055 F6E4                                            mul     ah                                              ;row * cols/row
  4199 00001057 00C8                                            add     al,cl                                           ;add column
  4200 00001059 80D400                                          adc     ah,0                                            ;handle carry
  4201 0000105C D1E0                                            shl     eax,1                                           ;screen offset
  4202 0000105E 268810                                          mov     [es:eax],dl                                     ;store character
  4203 00001061 FEC1                                            inc     cl                                              ;next column
  4204 00001063 C3                                              ret                                                     ;return
  4205                                  ;-----------------------------------------------------------------------------------------------------------------------
  4206                                  ;
  4207                                  ;       Routine:        SetConsoleString
  4208                                  ;
  4209                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4210                                  ;
  4211                                  ;       In:             ESI     source offset (DS:)
  4212                                  ;                       CL      column
  4213                                  ;                       CH      row
  4214                                  ;                       ES      CGA selector
  4215                                  ;
  4216                                  ;-----------------------------------------------------------------------------------------------------------------------
  4217 00001064 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4218 00001065 FC                                              cld                                                     ;forward strings
  4219 00001066 AC                      .10                     lodsb                                                   ;next ASCII character
  4220 00001067 84C0                                            test    al,al                                           ;end of string?
  4221 00001069 7407                                            jz      .20                                             ;yes, branch
  4222 0000106B E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4223 00001070 EBF4                                            jmp     .10                                             ;continue
  4224 00001072 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4225 00001073 C3                                              ret                                                     ;return
  4226                                  ;=======================================================================================================================
  4227                                  ;
  4228                                  ;       Input/Output Routines
  4229                                  ;
  4230                                  ;       These routines read and/or write directly to ports.
  4231                                  ;
  4232                                  ;       GetBaseMemSize
  4233                                  ;       GetExtendedMemSize
  4234                                  ;       GetROMMemSize
  4235                                  ;       PlaceCursor
  4236                                  ;       PutPrimaryEndOfInt
  4237                                  ;       PutSecondaryEndOfInt
  4238                                  ;       ResetSystem
  4239                                  ;       SetKeyboardLamps
  4240                                  ;       WaitForKeyInBuffer
  4241                                  ;       WaitForKeyOutBuffer
  4242                                  ;
  4243                                  ;=======================================================================================================================
  4244                                  ;-----------------------------------------------------------------------------------------------------------------------
  4245                                  ;
  4246                                  ;       Routine:        GetBaseMemSize
  4247                                  ;
  4248                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4249                                  ;
  4250                                  ;       Output:         EAX     base RAM size in bytes
  4251                                  ;
  4252                                  ;-----------------------------------------------------------------------------------------------------------------------
  4253 00001074 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4254 00001076 B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4255 00001078 E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4256 0000107A E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4257 0000107C 88C4                                            mov     ah,al                                           ;save base RAM high
  4258 0000107E B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4259 00001080 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4260 00001082 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4261 00001084 C3                                              ret                                                     ;return to caller
  4262                                  ;-----------------------------------------------------------------------------------------------------------------------
  4263                                  ;
  4264                                  ;       Routine:        GetExtendedMemSize
  4265                                  ;
  4266                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4267                                  ;
  4268                                  ;       Output:         EAX     extended RAM size in bytes
  4269                                  ;
  4270                                  ;-----------------------------------------------------------------------------------------------------------------------
  4271 00001085 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4272 00001087 B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4273 00001089 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4274 0000108B E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4275 0000108D 88C4                                            mov     ah,al                                           ;save extended RAM high
  4276 0000108F B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4277 00001091 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4278 00001093 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4279 00001095 C3                                              ret                                                     ;return to caller
  4280                                  ;-----------------------------------------------------------------------------------------------------------------------
  4281                                  ;
  4282                                  ;       Routine:        GetROMMemSize
  4283                                  ;
  4284                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4285                                  ;
  4286                                  ;       Output:         EAX     RAM size in bytes
  4287                                  ;
  4288                                  ;-----------------------------------------------------------------------------------------------------------------------
  4289 00001096 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4290 00001098 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4291 0000109E C3                                              ret                                                     ;return
  4292                                  ;-----------------------------------------------------------------------------------------------------------------------
  4293                                  ;
  4294                                  ;       Routine:        PlaceCursor
  4295                                  ;
  4296                                  ;       Description:    This routine positions the cursor on the console.
  4297                                  ;
  4298                                  ;       In:             DS      OS data selector
  4299                                  ;
  4300                                  ;-----------------------------------------------------------------------------------------------------------------------
  4301 0000109F 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4302 000010A0 A015080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4303 000010A5 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4304 000010A7 F6E4                                            mul     ah                                              ;row offset
  4305 000010A9 020514080000                                    add     al,[wbConsoleColumn]                            ;add column
  4306 000010AF 80D400                                          adc     ah,0                                            ;add overflow
  4307 000010B2 89C1                                            mov     ecx,eax                                         ;screen offset
  4308 000010B4 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4309 000010B6 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4310 000010B8 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4311 000010BA EE                                              out     dx,al                                           ;select register
  4312 000010BB 42                                              inc     edx                                             ;data port
  4313 000010BC 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4314 000010BE EE                                              out     dx,al                                           ;store hi-order loc
  4315 000010BF 4A                                              dec     edx                                             ;register select port
  4316 000010C0 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4317 000010C2 EE                                              out     dx,al                                           ;select register
  4318 000010C3 42                                              inc     edx                                             ;data port
  4319 000010C4 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4320 000010C6 EE                                              out     dx,al                                           ;store lo-order loc
  4321 000010C7 59                                              pop     ecx                                             ;restore non-volatile regs
  4322 000010C8 C3                                              ret                                                     ;return
  4323                                  ;-----------------------------------------------------------------------------------------------------------------------
  4324                                  ;
  4325                                  ;       Routine:        PutPrimaryEndOfInt
  4326                                  ;
  4327                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4328                                  ;
  4329                                  ;-----------------------------------------------------------------------------------------------------------------------
  4330 000010C9 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4331 000010CA B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4332 000010CC E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4333 000010CE C3                                              ret                                                     ;return
  4334                                  ;-----------------------------------------------------------------------------------------------------------------------
  4335                                  ;
  4336                                  ;       Routine:        PutSecondaryEndOfInt
  4337                                  ;
  4338                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4339                                  ;
  4340                                  ;-----------------------------------------------------------------------------------------------------------------------
  4341 000010CF FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4342 000010D0 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4343 000010D2 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4344 000010D4 C3                                              ret                                                     ;return
  4345                                  ;-----------------------------------------------------------------------------------------------------------------------
  4346                                  ;
  4347                                  ;       Routine:        ResetSystem
  4348                                  ;
  4349                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4350                                  ;
  4351                                  ;       Out:            N/A     This routine does not return.
  4352                                  ;
  4353                                  ;-----------------------------------------------------------------------------------------------------------------------
  4354 000010D5 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4355 000010DA E2FE                                            loop    $                                               ;clear interrupts
  4356 000010DC B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4357 000010DE E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4358 000010E0 FB                      .10                     sti                                                     ;enable maskable interrupts
  4359 000010E1 F4                                              hlt                                                     ;halt until interrupt
  4360 000010E2 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  4361                                  ;-----------------------------------------------------------------------------------------------------------------------
  4362                                  ;
  4363                                  ;       Routine:        SetKeyboardLamps
  4364                                  ;
  4365                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4366                                  ;
  4367                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4368                                  ;
  4369                                  ;-----------------------------------------------------------------------------------------------------------------------
  4370 000010E4 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4371 000010E9 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4372 000010EB E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  4373 000010ED E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4374 000010F2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4375 000010F4 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4376 000010F9 88F8                                            mov     al,bh                                           ;set/reset lamps value
  4377 000010FB E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  4378 000010FD E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4379 00001102 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4380 00001104 C3                                              ret                                                     ;return
  4381                                  ;-----------------------------------------------------------------------------------------------------------------------
  4382                                  ;
  4383                                  ;       Routine:        WaitForKeyInBuffer
  4384                                  ;
  4385                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4386                                  ;
  4387                                  ;       Out:            ZF      1 = Input buffer ready
  4388                                  ;                               0 = Input buffer not ready after timeout
  4389                                  ;
  4390                                  ;-----------------------------------------------------------------------------------------------------------------------
  4391 00001105 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4392 00001106 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4393 0000110B E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4394 0000110D A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  4395 0000110F E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  4396 00001111 59                                              pop     ecx                                             ;restore non-volatile regs
  4397 00001112 C3                                              ret                                                     ;return
  4398                                  ;-----------------------------------------------------------------------------------------------------------------------
  4399                                  ;
  4400                                  ;       Routine:        WaitForKeyOutBuffer
  4401                                  ;
  4402                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4403                                  ;
  4404                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4405                                  ;                               0 = Output buffer empty after timeout
  4406                                  ;
  4407                                  ;-----------------------------------------------------------------------------------------------------------------------
  4408 00001113 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4409 00001114 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4410 00001119 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4411 0000111B A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  4412 0000111D E1FA                                            loopz   .10                                             ;loop until output buffer bit
  4413 0000111F 59                                              pop     ecx                                             ;restore non-volatile regs
  4414 00001120 C3                                              ret                                                     ;return
  4415                                  ;-----------------------------------------------------------------------------------------------------------------------
  4416                                  ;
  4417                                  ;       End of the Kernel Function Library
  4418                                  ;
  4419                                  ;-----------------------------------------------------------------------------------------------------------------------
  4420 00001121 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  4421                                  ;=======================================================================================================================
  4422                                  ;
  4423                                  ;       Console Task
  4424                                  ;
  4425                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4426                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4427                                  ;       screen and responds to user commands.
  4428                                  ;
  4429                                  ;=======================================================================================================================
  4430                                  ;-----------------------------------------------------------------------------------------------------------------------
  4431                                  ;
  4432                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4433                                  ;
  4434                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4435                                  ;
  4436                                  ;-----------------------------------------------------------------------------------------------------------------------
  4437                                  section                 constack                                                ;console task stack
  4438 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  4439                                  ;-----------------------------------------------------------------------------------------------------------------------
  4440                                  ;
  4441                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4442                                  ;
  4443                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4444                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4445                                  ;       16 descriptors. Six are initially defined.
  4446                                  ;
  4447                                  ;-----------------------------------------------------------------------------------------------------------------------
  4448                                  section                 conldt                                                  ;console local descriptors
  4449 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  4450 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  4451 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  4452 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  4453 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  4454 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  4455 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4456                                  ;-----------------------------------------------------------------------------------------------------------------------
  4457                                  ;
  4458                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4459                                  ;
  4460                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4461                                  ;       segment. CS to console code.
  4462                                  ;
  4463                                  ;-----------------------------------------------------------------------------------------------------------------------
  4464                                  section                 contss                                                  ;console task state segment
  4465 00000000 00000000                                        dd      0                                               ;00 back-link tss
  4466 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  4467 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  4468 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  4469 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  4470 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  4471 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  4472 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  4473 00000020 00000000                                        dd      0                                               ;20 eip
  4474 00000024 00020000                                        dd      0200h                                           ;24 eflags
  4475 00000028 00000000                                        dd      0                                               ;28 eax
  4476 0000002C 00000000                                        dd      0                                               ;2c ecx
  4477 00000030 00000000                                        dd      0                                               ;30 edx
  4478 00000034 00000000                                        dd      0                                               ;34 ebx
  4479 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  4480 0000003C 00000000                                        dd      0                                               ;3c ebp
  4481 00000040 00000000                                        dd      0                                               ;40 esi
  4482 00000044 00000000                                        dd      0                                               ;44 edi
  4483 00000048 1C000000                                        dd      001Ch                                           ;48 es
  4484 0000004C 24000000                                        dd      0024h                                           ;4c cs
  4485 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  4486 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  4487 00000058 00000000                                        dd      0                                               ;58 fs
  4488 0000005C 00000000                                        dd      0                                               ;5c gs
  4489 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4490 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4491                                  ;-----------------------------------------------------------------------------------------------------------------------
  4492                                  ;
  4493                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4494                                  ;
  4495                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4496                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4497                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4498                                  ;       event.
  4499                                  ;
  4500                                  ;-----------------------------------------------------------------------------------------------------------------------
  4501                                  section                 conmque                                                 ;console message queue
  4502 00000000 08000000                                        dd      8                                               ;head pointer
  4503 00000004 08000000                                        dd      8                                               ;tail pointer
  4504 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  4505                                  ;-----------------------------------------------------------------------------------------------------------------------
  4506                                  ;
  4507                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4508                                  ;
  4509                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4510                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4511                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4512                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4513                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4514                                  ;       board input, echoing to the console screen and responding to user commands.
  4515                                  ;
  4516                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4517                                  ;
  4518                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4519                                  ;                               |  Real Mode Interrupt Vectors                  |
  4520                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4521                                  ;                               |  Reserved BIOS Memory Area                    |
  4522                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4523                                  ;                               |  Shared Kernel Memory Area                    |
  4524                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4525                                  ;                               |  Global Descriptor Table (GDT)                |
  4526                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4527                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4528                                  ;                       002000  +-----------------------------------------------+
  4529                                  ;                               |  Interrupt Handlers                           |
  4530                                  ;                               |  Kernel Function Library                      |
  4531                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4532                                  ;                               |  Console Task Stack Area                      |
  4533                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4534                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4535                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4536                                  ;                               |  Console Task Task State Segment (TSS)        |
  4537                                  ;                       004800  +-----------------------------------------------+
  4538                                  ;                               |  Console Task Message Queue                   |
  4539                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4540                                  ;                               |  Console Task Code                            |
  4541                                  ;                               |  Console Task Constants                       |
  4542                                  ;                       006000  +===============================================+
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4546 00000000 E8C9000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  4547                                                          clearConsoleScreen                                      ;clear the console screen
  4547 00000005 B001                <1>  mov al,eClearConsoleScreen
  4547 00000007 CD30                <1>  int _svc
  4548                                                          putConsoleString czTitle                                ;display startup message
  4548 00000009 BA[E9030000]        <1>  mov edx,%1
  4548 0000000E B00B                <1>  mov al,ePutConsoleString
  4548 00000010 CD30                <1>  int _svc
  4549                                                          putConsoleString czBaseMem                              ;base memory label
  4549 00000012 BA[94030000]        <1>  mov edx,%1
  4549 00000017 B00B                <1>  mov al,ePutConsoleString
  4549 00000019 CD30                <1>  int _svc
  4550                                                          putConsoleString wzBaseMemSize                          ;base memory size
  4550 0000001B BA10090000          <1>  mov edx,%1
  4550 00000020 B00B                <1>  mov al,ePutConsoleString
  4550 00000022 CD30                <1>  int _svc
  4551                                                          putConsoleString czKB                                   ;Kilobytes
  4551 00000024 BA[C4030000]        <1>  mov edx,%1
  4551 00000029 B00B                <1>  mov al,ePutConsoleString
  4551 0000002B CD30                <1>  int _svc
  4552 0000002D E82E010000                                      call    ConPutNewLine                                   ;new line
  4553                                                          putConsoleString czROMMem                               ;ROM memory label
  4553 00000032 BA[D1030000]        <1>  mov edx,%1
  4553 00000037 B00B                <1>  mov al,ePutConsoleString
  4553 00000039 CD30                <1>  int _svc
  4554                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  4554 0000003B BA1B090000          <1>  mov edx,%1
  4554 00000040 B00B                <1>  mov al,ePutConsoleString
  4554 00000042 CD30                <1>  int _svc
  4555                                                          putConsoleString czKB                                   ;Kilobytes
  4555 00000044 BA[C4030000]        <1>  mov edx,%1
  4555 00000049 B00B                <1>  mov al,ePutConsoleString
  4555 0000004B CD30                <1>  int _svc
  4556 0000004D E80E010000                                      call    ConPutNewLine                                   ;new line
  4557                                                          putConsoleString czExtendedMem                          ;extended memory label
  4557 00000052 BA[AC030000]        <1>  mov edx,%1
  4557 00000057 B00B                <1>  mov al,ePutConsoleString
  4557 00000059 CD30                <1>  int _svc
  4558                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  4558 0000005B BA26090000          <1>  mov edx,%1
  4558 00000060 B00B                <1>  mov al,ePutConsoleString
  4558 00000062 CD30                <1>  int _svc
  4559                                                          putConsoleString czKB                                   ;Kilobytes
  4559 00000064 BA[C4030000]        <1>  mov edx,%1
  4559 00000069 B00B                <1>  mov al,ePutConsoleString
  4559 0000006B CD30                <1>  int _svc
  4560 0000006D E8EE000000                                      call    ConPutNewLine                                   ;new line
  4561                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4561                              <1> .10 :
  4561 00000072 BA[CF030000]        <1>  mov edx,%1
  4561 00000077 B00B                <1>  mov al,ePutConsoleString
  4561 00000079 CD30                <1>  int _svc
  4562                                                          placeCursor                                             ;set CRT cursor location
  4562 0000007B B00A                <1>  mov al,ePlaceCursor
  4562 0000007D CD30                <1>  int _svc
  4563                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4563 0000007F BA20080000          <1>  mov edx,%1
  4563 00000084 B94F000000          <1>  mov ecx,%2
  4563 00000089 B701                <1>  mov bh,%3
  4563 0000008B B30D                <1>  mov bl,%4
  4563 0000008D B006                <1>  mov al,eGetConsoleString
  4563 0000008F CD30                <1>  int _svc
  4564 00000091 E8CA000000                                      call    ConPutNewLine                                   ;newline
  4565 00000096 BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  4566 0000009B BB70080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  4567 000000A0 E8C5000000                                      call    ConTakeToken                                    ;handle console input
  4568 000000A5 BA70080000                                      mov     edx,wzConsoleToken                              ;token buffer
  4569 000000AA E8F0000000                                      call    ConDetermineCommand                             ;determine command number
  4570 000000AF 83F80C                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4571 000000B2 720B                                            jb      .20                                             ;yes, branch
  4572                                                          putConsoleString czUnknownCommand                       ;display error message
  4572 000000B4 BA[07040000]        <1>  mov edx,%1
  4572 000000B9 B00B                <1>  mov al,ePutConsoleString
  4572 000000BB CD30                <1>  int _svc
  4573 000000BD EBB3                                            jmp     .10                                             ;next command
  4574 000000BF C1E002                  .20                     shl     eax,2                                           ;index into jump table
  4575 000000C2 BA[12030000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  4576 000000C7 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4577 000000CA FFD0                                            call    eax                                             ;call command handler
  4578 000000CC EBA4                                            jmp     .10                                             ;next command
  4579                                  ;-----------------------------------------------------------------------------------------------------------------------
  4580                                  ;
  4581                                  ;       Routine:        ConInitializeData
  4582                                  ;
  4583                                  ;       Description:    This routine initializes console task variables.
  4584                                  ;
  4585                                  ;-----------------------------------------------------------------------------------------------------------------------
  4586 000000CE 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  4587 000000CF 57                                              push    edi                                             ;
  4588 000000D0 06                                              push    es                                              ;
  4589                                  ;
  4590                                  ;       Initialize console work areas.
  4591                                  ;
  4592 000000D1 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4593 000000D3 07                                              pop     es                                              ;... into extra segment register
  4594 000000D4 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  4595 000000D9 30C0                                            xor     al,al                                           ;initialization value
  4596 000000DB B949010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  4597 000000E0 FC                                              cld                                                     ;forward strings
  4598 000000E1 F3AA                                            rep     stosb                                           ;initialize data
  4599                                  ;
  4600                                  ;       Initialize heap size
  4601                                  ;
  4602 000000E3 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  4603 000000E8 A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  4604                                  ;
  4605                                  ;       Initialize MEMROOT structure
  4606                                  ;
  4607 000000ED BF31090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  4608 000000F2 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  4609 000000F7 31C9                                            xor     ecx,ecx                                         ;zero register
  4610 000000F9 B104                                            mov     cl,4                                            ;count
  4611 000000FB F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  4612 000000FD 31C0                                            xor     eax,eax                                         ;zero register
  4613 000000FF AB                                              stosd                                                   ;zero first task block
  4614 00000100 AB                                              stosd                                                   ;zero last task block
  4615                                  ;
  4616                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  4617                                  ;
  4618 00000101 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  4619 00000106 B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  4620 0000010B AB                                              stosd                                                   ;store signature
  4621 0000010C B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  4622 00000111 AB                                              stosd                                                   ;store block size
  4623 00000112 31C9                                            xor     ecx,ecx                                         ;zero register
  4624 00000114 B106                                            mov     cl,6                                            ;count
  4625 00000116 31C0                                            xor     eax,eax                                         ;zero register
  4626 00000118 F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  4627                                  ;
  4628                                  ;       Read memory sizes from ROM
  4629                                  ;
  4630                                                          getROMMemSize                                           ;get ROM memory size
  4630 0000011A B008                <1>  mov al,eGetROMMemSize
  4630 0000011C CD30                <1>  int _svc
  4631 0000011E A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  4632 00000123 89C1                                            mov     ecx,eax                                         ;integer param
  4633 00000125 BA1B090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  4634 0000012A B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  4635                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4635 0000012C B00D                <1>  mov al,eUnsignedToDecimalString
  4635 0000012E CD30                <1>  int _svc
  4636                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  4636 00000130 B005                <1>  mov al,eGetBaseMemSize
  4636 00000132 CD30                <1>  int _svc
  4637 00000134 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  4638 00000139 89C1                                            mov     ecx,eax                                         ;integer param
  4639 0000013B BA10090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  4640 00000140 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  4641                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4641 00000142 B00D                <1>  mov al,eUnsignedToDecimalString
  4641 00000144 CD30                <1>  int _svc
  4642                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  4642 00000146 B007                <1>  mov al,eGetExtendedMemSize
  4642 00000148 CD30                <1>  int _svc
  4643 0000014A A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  4644 0000014F 89C1                                            mov     ecx,eax                                         ;integer param
  4645 00000151 BA26090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  4646 00000156 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  4647                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4647 00000158 B00D                <1>  mov al,eUnsignedToDecimalString
  4647 0000015A CD30                <1>  int _svc
  4648                                  ;
  4649                                  ;       Restore and return.
  4650                                  ;
  4651 0000015C 07                                              pop     es                                              ;restore non-volatile regs
  4652 0000015D 5F                                              pop     edi                                             ;
  4653 0000015E 59                                              pop     ecx                                             ;
  4654 0000015F C3                                              ret                                                     ;return
  4655                                  ;-----------------------------------------------------------------------------------------------------------------------
  4656                                  ;
  4657                                  ;       Routine:        ConPutNewLine
  4658                                  ;
  4659                                  ;       Description:    Write a new-line to the console.
  4660                                  ;
  4661                                  ;-----------------------------------------------------------------------------------------------------------------------
  4662                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  4662                              <1> ConPutNewLine :
  4662 00000160 BA[C7030000]        <1>  mov edx,%1
  4662 00000165 B00B                <1>  mov al,ePutConsoleString
  4662 00000167 CD30                <1>  int _svc
  4663 00000169 C3                                              ret                                                     ;return
  4664                                  ;-----------------------------------------------------------------------------------------------------------------------
  4665                                  ;
  4666                                  ;       Routine:        ConTakeToken
  4667                                  ;
  4668                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4669                                  ;
  4670                                  ;       In:             DS:EDX  source buffer address
  4671                                  ;                       DS:EBX  target buffer address
  4672                                  ;
  4673                                  ;       Out:            DS:EDX  source buffer address
  4674                                  ;                       DS:EBX  target buffer address
  4675                                  ;
  4676                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4677                                  ;
  4678                                  ;-----------------------------------------------------------------------------------------------------------------------
  4679 0000016A 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  4680 0000016B 57                                              push    edi                                             ;
  4681 0000016C 06                                              push    es                                              ;
  4682 0000016D 1E                                              push    ds                                              ;load data segment selector ...
  4683 0000016E 07                                              pop     es                                              ;... into extra segment reg
  4684 0000016F 89D6                                            mov     esi,edx                                         ;source buffer address
  4685 00000171 89DF                                            mov     edi,ebx                                         ;target buffer address
  4686 00000173 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4687 00000176 FC                                              cld                                                     ;forward strings
  4688 00000177 AC                      .10                     lodsb                                                   ;load byte
  4689 00000178 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4690 0000017A 74FB                                            je      .10                                             ;yes, continue
  4691 0000017C 84C0                                            test    al,al                                           ;end of line?
  4692 0000017E 7410                                            jz      .40                                             ;yes, branch
  4693 00000180 AA                      .20                     stosb                                                   ;store byte
  4694 00000181 AC                                              lodsb                                                   ;load byte
  4695 00000182 84C0                                            test    al,al                                           ;end of line?
  4696 00000184 740A                                            jz      .40                                             ;no, continue
  4697 00000186 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4698 00000188 75F6                                            jne     .20                                             ;no, continue
  4699 0000018A AC                      .30                     lodsb                                                   ;load byte
  4700 0000018B 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4701 0000018D 74FB                                            je      .30                                             ;yes, continue
  4702 0000018F 4E                                              dec     esi                                             ;pre-position
  4703 00000190 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4704 00000193 89D7                                            mov     edi,edx                                         ;source buffer address
  4705 00000195 AC                      .50                     lodsb                                                   ;remaining byte
  4706 00000196 AA                                              stosb                                                   ;move to front of buffer
  4707 00000197 84C0                                            test    al,al                                           ;end of line?
  4708 00000199 75FA                                            jnz     .50                                             ;no, continue
  4709 0000019B 07                                              pop     es                                              ;restore non-volatile regs
  4710 0000019C 5F                                              pop     edi                                             ;
  4711 0000019D 5E                                              pop     esi                                             ;
  4712 0000019E C3                                              ret                                                     ;return
  4713                                  ;-----------------------------------------------------------------------------------------------------------------------
  4714                                  ;
  4715                                  ;       Routine:        ConDetermineCommand
  4716                                  ;
  4717                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4718                                  ;
  4719                                  ;       input:          DS:EDX  command address
  4720                                  ;
  4721                                  ;       output:         EAX     >=0     = command nbr
  4722                                  ;                               0       = unknown command
  4723                                  ;
  4724                                  ;-----------------------------------------------------------------------------------------------------------------------
  4725 0000019F 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4726 000001A0 51                                              push    ecx                                             ;
  4727 000001A1 56                                              push    esi                                             ;
  4728 000001A2 57                                              push    edi                                             ;
  4729                                                          upperCaseString                                         ;upper-case string at EDX
  4729 000001A3 B00F                <1>  mov al,eUpperCaseString
  4729 000001A5 CD30                <1>  int _svc
  4730 000001A7 BE[42030000]                                    mov     esi,tConCmdTbl                                  ;commands table
  4731 000001AC 31FF                                            xor     edi,edi                                         ;intialize command number
  4732 000001AE FC                                              cld                                                     ;forward strings
  4733 000001AF AC                      .10                     lodsb                                                   ;command length
  4734 000001B0 0FB6C8                                          movzx   ecx,al                                          ;command length
  4735 000001B3 E30D                                            jecxz   .20                                             ;branch if end of table
  4736 000001B5 89F3                                            mov     ebx,esi                                         ;table entry address
  4737 000001B7 01CE                                            add     esi,ecx                                         ;next table entry address
  4738                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4738 000001B9 B002                <1>  mov al,eCompareMemory
  4738 000001BB CD30                <1>  int _svc
  4739 000001BD E303                                            jecxz   .20                                             ;branch if equal
  4740 000001BF 47                                              inc     edi                                             ;increment command nbr
  4741 000001C0 EBED                                            jmp     .10                                             ;repeat
  4742 000001C2 89F8                    .20                     mov     eax,edi                                         ;command number
  4743 000001C4 5F                                              pop     edi                                             ;restore non-volatile regs
  4744 000001C5 5E                                              pop     esi                                             ;
  4745 000001C6 59                                              pop     ecx                                             ;
  4746 000001C7 5B                                              pop     ebx                                             ;
  4747 000001C8 C3                                              ret                                                     ;return
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749                                  ;
  4750                                  ;       Routine:        ConClear
  4751                                  ;
  4752                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4753                                  ;
  4754                                  ;-----------------------------------------------------------------------------------------------------------------------
  4755                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4755                              <1> ConClear :
  4755 000001C9 B001                <1>  mov al,eClearConsoleScreen
  4755 000001CB CD30                <1>  int _svc
  4756 000001CD C3                                              ret                                                     ;return
  4757                                  ;-----------------------------------------------------------------------------------------------------------------------
  4758                                  ;
  4759                                  ;       Routine:        ConExit
  4760                                  ;
  4761                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4762                                  ;
  4763                                  ;-----------------------------------------------------------------------------------------------------------------------
  4764                                  ConExit                 resetSystem                                             ;issue system reset
  4764                              <1> ConExit :
  4764 000001CE B00C                <1>  mov al,eResetSystem
  4764 000001D0 CD30                <1>  int _svc
  4765 000001D2 C3                                              ret                                                     ;return
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ;
  4768                                  ;       Routine:        ConFree
  4769                                  ;
  4770                                  ;       Description:    This routine handles the FREE command.
  4771                                  ;
  4772                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4773                                  ;
  4774                                  ;-----------------------------------------------------------------------------------------------------------------------
  4775 000001D3 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  4776 000001D4 51                                              push    ecx                                             ;
  4777 000001D5 56                                              push    esi                                             ;
  4778 000001D6 57                                              push    edi                                             ;
  4779                                  ;
  4780                                  ;       Get address parameter
  4781                                  ;
  4782 000001D7 BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  4783 000001DC BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  4784 000001E1 E884FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  4785                                  ;
  4786                                  ;       Convert input parameter from hexadecimal string to binary
  4787                                  ;
  4788 000001E6 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  4789 000001ED 7421                                            je      .10                                             ;no, branch
  4790 000001EF BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  4791                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4791 000001F4 B009                <1>  mov al,eHexadecimalToUnsigned
  4791 000001F6 CD30                <1>  int _svc
  4792 000001F8 85C0                                            test    eax,eax                                         ;valid parameter?
  4793 000001FA 7414                                            jz      .10                                             ;no, branch
  4794                                  ;
  4795                                  ;       Free memory block
  4796                                  ;
  4797                                                          freeMemory eax                                          ;free memory
  4797 000001FC 89C2                <1>  mov edx,%1
  4797 000001FE B004                <1>  mov al,eFreeMemory
  4797 00000200 CD30                <1>  int _svc
  4798 00000202 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  4799 00000205 7409                                            je      .10                                             ;no, branch
  4800                                  ;
  4801                                  ;       Indicate memory freed
  4802                                  ;
  4803                                                          putConsoleString czOK                                   ;indicate success
  4803 00000207 BA[CA030000]        <1>  mov edx,%1
  4803 0000020C B00B                <1>  mov al,ePutConsoleString
  4803 0000020E CD30                <1>  int _svc
  4804                                  ;
  4805                                  ;       Restore and return
  4806                                  ;
  4807 00000210 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  4808 00000211 5E                                              pop     esi                                             ;
  4809 00000212 59                                              pop     ecx                                             ;
  4810 00000213 5B                                              pop     ebx                                             ;
  4811 00000214 C3                                              ret                                                     ;return
  4812                                  ;-----------------------------------------------------------------------------------------------------------------------
  4813                                  ;
  4814                                  ;       Routine:        ConInt6
  4815                                  ;
  4816                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4817                                  ;
  4818                                  ;-----------------------------------------------------------------------------------------------------------------------
  4819 00000215 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  4820 00000217 C3                                              ret                                                     ;return (not executed)
  4821                                  ;-----------------------------------------------------------------------------------------------------------------------
  4822                                  ;
  4823                                  ;       Routine:        ConMalloc
  4824                                  ;
  4825                                  ;       Description:    This routine handles the MALLOC command.
  4826                                  ;
  4827                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4828                                  ;
  4829                                  ;-----------------------------------------------------------------------------------------------------------------------
  4830 00000218 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  4831 00000219 51                                              push    ecx                                             ;
  4832 0000021A 56                                              push    esi                                             ;
  4833 0000021B 57                                              push    edi                                             ;
  4834                                  ;
  4835                                  ;       Get size parameter
  4836                                  ;
  4837 0000021C BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4838 00000221 BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  4839 00000226 E83FFFFFFF                                      call    ConTakeToken                                    ;take first param as token
  4840                                  ;
  4841                                  ;       Convert input parameter from decimal string to binary
  4842                                  ;
  4843 0000022B 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  4844 00000232 7430                                            je      .10                                             ;no, branch
  4845 00000234 BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  4846                                                          decimalToUnsigned                                       ;convert string token to unsigned
  4846 00000239 B003                <1>  mov al,eDecimalToUnsigned
  4846 0000023B CD30                <1>  int _svc
  4847 0000023D 85C0                                            test    eax,eax                                         ;valid parameter?
  4848 0000023F 7423                                            jz      .10                                             ;no, branch
  4849                                  ;
  4850                                  ;       Allocate memory block
  4851                                  ;
  4852                                                          allocateMemory eax                                      ;allocate memory
  4852 00000241 89C1                <1>  mov ecx,%1
  4852 00000243 B000                <1>  mov al,eAllocateMemory
  4852 00000245 CD30                <1>  int _svc
  4853 00000247 85C0                                            test    eax,eax                                         ;memory allocated?
  4854 00000249 7419                                            jz      .10                                             ;no, branch
  4855                                  ;
  4856                                  ;       Report allocated memory block address
  4857                                  ;
  4858 0000024B BAC0080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  4859 00000250 89C1                                            mov     ecx,eax                                         ;memory address
  4860                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  4860 00000252 B00E                <1>  mov al,eUnsignedToHexadecimal
  4860 00000254 CD30                <1>  int _svc
  4861                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  4861 00000256 BAC0080000          <1>  mov edx,%1
  4861 0000025B B00B                <1>  mov al,ePutConsoleString
  4861 0000025D CD30                <1>  int _svc
  4862 0000025F E8FCFEFFFF                                      call    ConPutNewLine                                   ;display new line
  4863 00000264 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  4864 00000265 5E                                              pop     esi                                             ;
  4865 00000266 59                                              pop     ecx                                             ;
  4866 00000267 5B                                              pop     ebx                                             ;
  4867 00000268 C3                                              ret                                                     ;return
  4868                                  ;-----------------------------------------------------------------------------------------------------------------------
  4869                                  ;
  4870                                  ;       Routine:        ConMem
  4871                                  ;
  4872                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4873                                  ;
  4874                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4875                                  ;
  4876                                  ;-----------------------------------------------------------------------------------------------------------------------
  4877 00000269 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  4878 0000026A 56                                              push    esi                                             ;
  4879 0000026B 57                                              push    edi                                             ;
  4880                                  ;
  4881                                  ;       Update the source address if a parameter is given.
  4882                                  ;
  4883 0000026C BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4884 00000271 BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  4885 00000276 E8EFFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  4886 0000027B 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  4887 00000282 740E                                            je      .10                                             ;no, branch
  4888 00000284 BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  4889                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4889 00000289 B009                <1>  mov al,eHexadecimalToUnsigned
  4889 0000028B CD30                <1>  int _svc
  4890 0000028D A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  4891                                  ;
  4892                                  ;       Setup source address and row count.
  4893                                  ;
  4894 00000292 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4895 00000298 31C9                                            xor     ecx,ecx                                         ;zero register
  4896 0000029A B110                                            mov     cl,16                                           ;row count
  4897                                  ;
  4898                                  ;       Start the row with the source address in hexadecimal.
  4899                                  ;
  4900 0000029C 51                      .20                     push    ecx                                             ;save remaining rows
  4901 0000029D BFC0080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4902 000002A2 89FA                                            mov     edx,edi                                         ;output buffer address
  4903 000002A4 89F1                                            mov     ecx,esi                                         ;console memory address
  4904                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4904 000002A6 B00E                <1>  mov al,eUnsignedToHexadecimal
  4904 000002A8 CD30                <1>  int _svc
  4905 000002AA 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  4906 000002AD B020                                            mov     al,' '                                          ;ascii space
  4907 000002AF AA                                              stosb                                                   ;store delimiter
  4908                                  ;
  4909                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  4910                                  ;
  4911 000002B0 31C9                                            xor     ecx,ecx                                         ;zero register
  4912 000002B2 B110                                            mov     cl,16                                           ;loop count
  4913 000002B4 51                      .30                     push    ecx                                             ;save loop count
  4914 000002B5 AC                                              lodsb                                                   ;memory byte
  4915 000002B6 88C4                                            mov     ah,al                                           ;memory byte
  4916 000002B8 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  4917 000002BB 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4918 000002BD 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4919 000002BF 7202                                            jb      .40                                             ;yes, skip ahead
  4920 000002C1 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4921 000002C3 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4922 000002C4 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  4923 000002C6 240F                                            and     al,0fh                                          ;mask out high-order bits
  4924 000002C8 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4925 000002CA 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4926 000002CC 7202                                            jb      .50                                             ;yes, skip ahead
  4927 000002CE 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4928 000002D0 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4929 000002D1 B020                                            mov     al,' '                                          ;ascii space
  4930 000002D3 AA                                              stosb                                                   ;store ascii space delimiter
  4931 000002D4 59                                              pop     ecx                                             ;loop count
  4932 000002D5 E2DD                                            loop    .30                                             ;next
  4933                                  ;
  4934                                  ;       Output printable ASCII character section for the row.
  4935                                  ;
  4936 000002D7 83EE10                                          sub     esi,16                                          ;reset source pointer
  4937 000002DA B110                                            mov     cl,16                                           ;loop count
  4938 000002DC AC                      .60                     lodsb                                                   ;source byte
  4939 000002DD 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  4940 000002DF 7204                                            jb      .70                                             ;no, skip ahead
  4941 000002E1 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  4942 000002E3 7202                                            jb      .80                                             ;yes, skip ahead
  4943 000002E5 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  4944 000002E7 AA                      .80                     stosb                                                   ;store printable ascii byte
  4945 000002E8 E2F2                                            loop    .60                                             ;next source byte
  4946 000002EA 30C0                                            xor     al,al                                           ;nul-terminator
  4947 000002EC AA                                              stosb                                                   ;terminate output line
  4948                                  ;
  4949                                  ;       Display constructed output buffer and newline.
  4950                                  ;
  4951                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4951 000002ED BAC0080000          <1>  mov edx,%1
  4951 000002F2 B00B                <1>  mov al,ePutConsoleString
  4951 000002F4 CD30                <1>  int _svc
  4952 000002F6 E865FEFFFF                                      call    ConPutNewLine                                   ;display new line
  4953                                  ;
  4954                                  ;       Repeat until all lines displayed and preserve source address.
  4955                                  ;
  4956 000002FB 59                                              pop     ecx                                             ;remaining rows
  4957 000002FC E29E                                            loop    .20                                             ;next row
  4958 000002FE 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  4959 00000304 5F                                              pop     edi                                             ;restore regs
  4960 00000305 5E                                              pop     esi                                             ;
  4961 00000306 5B                                              pop     ebx                                             ;
  4962 00000307 C3                                              ret                                                     ;return
  4963                                  ;-----------------------------------------------------------------------------------------------------------------------
  4964                                  ;
  4965                                  ;       Routine:        ConVersion
  4966                                  ;
  4967                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4968                                  ;
  4969                                  ;-----------------------------------------------------------------------------------------------------------------------
  4970                                  ConVersion              putConsoleString czTitle                                ;display version message
  4970                              <1> ConVersion :
  4970 00000308 BA[E9030000]        <1>  mov edx,%1
  4970 0000030D B00B                <1>  mov al,ePutConsoleString
  4970 0000030F CD30                <1>  int _svc
  4971 00000311 C3                                              ret                                                     ;return
  4972                                  ;-----------------------------------------------------------------------------------------------------------------------
  4973                                  ;
  4974                                  ;       Tables
  4975                                  ;
  4976                                  ;-----------------------------------------------------------------------------------------------------------------------
  4977                                                                                                                  ;---------------------------------------
  4978                                                                                                                  ;  Command Jump Table
  4979                                                                                                                  ;---------------------------------------
  4980                                  tConJmpTbl              equ     $                                               ;command jump table
  4981 00000312 CE010000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  4982 00000316 08030000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  4983 0000031A 18020000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  4984 0000031E 69020000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  4985 00000322 C9010000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  4986 00000326 CE010000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  4987 0000032A D3010000                                        dd      ConFree         - ConCode                       ;free command routine offset
  4988 0000032E 15020000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  4989 00000332 CE010000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  4990 00000336 C9010000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  4991 0000033A 69020000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  4992 0000033E 08030000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  4993                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4994                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4995                                                                                                                  ;---------------------------------------
  4996                                                                                                                  ;  Command Name Table
  4997                                                                                                                  ;---------------------------------------
  4998                                  tConCmdTbl              equ     $                                               ;command name table
  4999 00000342 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  4999 0000034B 00                 
  5000 0000034C 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  5001 00000355 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  5002 0000035D 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  5003 00000365 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  5004 0000036C 054558495400                                    db      5,"EXIT",0                                      ;exit command
  5005 00000372 054652454500                                    db      5,"FREE",0                                      ;free command
  5006 00000378 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  5007 0000037E 055155495400                                    db      5,"QUIT",0                                      ;quit command
  5008 00000384 04434C5300                                      db      4,"CLS",0                                       ;cls command
  5009 00000389 044D454D00                                      db      4,"MEM",0                                       ;mem command
  5010 0000038E 0456455200                                      db      4,"VER",0                                       ;ver command
  5011 00000393 00                                              db      0                                               ;end of table
  5012                                  ;-----------------------------------------------------------------------------------------------------------------------
  5013                                  ;
  5014                                  ;       Constants
  5015                                  ;
  5016                                  ;-----------------------------------------------------------------------------------------------------------------------
  5017 00000394 42617365206D656D6F-     czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  5017 0000039D 72792028525443293A-
  5017 000003A6 202020202000       
  5018 000003AC 20457874656E646564-     czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  5018 000003B5 2028525443293A2020-
  5018 000003BE 202020202000       
  5019 000003C4 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  5020 000003C7 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  5021 000003CA 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  5022 000003CF 3A00                    czPrompt                db      ":",0                                           ;prompt string
  5023 000003D1 2042656C6F77204542-     czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  5023 000003DA 44412028496E742031-
  5023 000003E3 3268293A2000       
  5024 000003E9 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5024 000003F2 65726174696E672053-
  5024 000003FB 797374656D20312E30-
  5024 00000404 0D0A00             
  5025 00000407 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5025 00000410 6F6D6D616E640D0A00 
  5026 00000419 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  5027                                  %endif
  5028                                  %ifdef BUILDDISK
  5029                                  ;-----------------------------------------------------------------------------------------------------------------------
  5030                                  ;
  5031                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5032                                  ;
  5033                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5034                                  ;
  5035                                  ;-----------------------------------------------------------------------------------------------------------------------
  5036                                  section                 unused                                                  ;unused disk space
  5037 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5038                                  %endif
  5039                                  ;=======================================================================================================================
  5040                                  ;
  5041                                  ;       End of Program Code
  5042                                  ;
  5043                                  ;=======================================================================================================================
