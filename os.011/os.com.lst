     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.011
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading the real-time clock and new
     8                                  ;                       "date" and "time" and other related commands.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMEM...         Memory Management values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     70h                                             ;register select port
   277                                  ERTCDATAPORT            equ     71h                                             ;data port
   278                                  ERTCSECONDREG           equ     00h                                             ;second
   279                                  ERTCMINUTEREG           equ     02h                                             ;minute
   280                                  ERTCHOURREG             equ     04h                                             ;hour
   281                                  ERTCWEEKDAYREG          equ     06h                                             ;weekday
   282                                  ERTCDAYREG              equ     07h                                             ;day
   283                                  ERTCMONTHREG            equ     08h                                             ;month
   284                                  ERTCYEARREG             equ     09h                                             ;year of the century
   285                                  ERTCSTATUSREG           equ     0bh                                             ;status
   286                                  ERTCCENTURYREG          equ     32h                                             ;century
   287                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  ;
   290                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   291                                  ;
   292                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   293                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   294                                  ;
   295                                  ;       0.......        Segment is not present in memory (triggers int 11)
   296                                  ;       1.......        Segment is present in memory
   297                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   298                                  ;       ...0....        Segment is a system segment
   299                                  ;       ...00010                Local Descriptor Table
   300                                  ;       ...00101                Task Gate
   301                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   302                                  ;       ...01100                Call Gate (386)
   303                                  ;       ...01110                Interrupt Gate (386)
   304                                  ;       ...01111                Trap Gate (386)
   305                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   306                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   307                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   308                                  ;
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   311                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   312                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   313                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   314                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   315                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   316                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   317                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;
   320                                  ;       Firmware-Defined Values
   321                                  ;
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;
   325                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   326                                  ;
   327                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   328                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   329                                  ;
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   332                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   333                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   334                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   335                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   336                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   337                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   338                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   339                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   340                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   341                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;
   344                                  ;       Standards-Based Values
   345                                  ;
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;       ASCII                                                                   EASCII...
   350                                  ;
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   353                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   354                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   355                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   356                                  EASCIISPACE             equ     020h                                            ;space
   357                                  EASCIIUPPERA            equ     041h                                            ;'A'
   358                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   359                                  EASCIILOWERA            equ     061h                                            ;'a'
   360                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   361                                  EASCIITILDE             equ     07Eh                                            ;'~'
   362                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   363                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   364                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   365                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   366                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   367                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   368                                  EASCIICASE              equ     00100000b                                       ;case bit
   369                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ;
   372                                  ;       Operating System Values
   373                                  ;
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  ;
   377                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   378                                  ;
   379                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   380                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   381                                  ;
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   384                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   385                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   386                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   387                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   388                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   389                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ;       Console Constants                                                       ECON...
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  ECONCOLS                equ     80                                              ;columns per row
   394                                  ECONROWS                equ     24                                              ;console rows
   395                                  ECONOIAROW              equ     24                                              ;operator information area row
   396                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   397                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   398                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   399                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   400                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   401                                  ;-----------------------------------------------------------------------------------------------------------------------
   402                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   405                                  EGDTCGA                 equ     020h                                            ;cga video selector
   406                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   407                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   408                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   409                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   410                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   411                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ;       Keyboard Flags                                                          EKEYF...
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   416                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   417                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   418                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   419                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   420                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   421                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   422                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   423                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   424                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   425                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  ;       Kernel Constants                                                        EKRN...
   428                                  ;-----------------------------------------------------------------------------------------------------------------------
   429                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   430                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   431                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   432                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   433                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   434                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  ;       Memory Management Constants                                             EMEM...
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   443                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   444                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   445                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  ;       Message Identifiers                                                     EMSG...
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   450                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   451                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   452                                  ;=======================================================================================================================
   453                                  ;
   454                                  ;       Structures
   455                                  ;
   456                                  ;=======================================================================================================================
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  ;
   459                                  ;       DATETIME
   460                                  ;
   461                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   462                                  ;
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  struc                   DATETIME
   465 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   466 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   467 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   468 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   469 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   470 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   471 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   472 00000007 <res 00000001>          .century                resb    1                                               ;century
   473                                  EDATETIMELEN            equ     ($-.second)
   474                                  endstruc
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;
   477                                  ;       MEMBLOCK
   478                                  ;
   479                                  ;       The MEMBLOCK structure defines a memory block.
   480                                  ;
   481                                  ;-----------------------------------------------------------------------------------------------------------------------
   482                                  struc                   MEMBLOCK
   483 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   484 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   485 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   486 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   487 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   488 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   489 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   490 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   491                                  EMEMBLOCKLEN            equ     ($-.signature)
   492                                  endstruc
   493                                  ;-----------------------------------------------------------------------------------------------------------------------
   494                                  ;
   495                                  ;       MEMROOT
   496                                  ;
   497                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   498                                  ;
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  struc                   MEMROOT
   501 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   502 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   503 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   504 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   505 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   506 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   507                                  EMEMROOTLEN             equ     ($-.firstcontig)
   508                                  endstruc
   509                                  ;-----------------------------------------------------------------------------------------------------------------------
   510                                  ;
   511                                  ;       MQUEUE
   512                                  ;
   513                                  ;       The MQUEUE structure maps memory used for a message queue.
   514                                  ;
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516                                  struc                   MQUEUE
   517 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   518 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   519 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   520                                  endstruc
   521                                  ;-----------------------------------------------------------------------------------------------------------------------
   522                                  ;
   523                                  ;       OSDATA
   524                                  ;
   525                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   526                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   527                                  ;
   528                                  ;-----------------------------------------------------------------------------------------------------------------------
   529                                  struc                   OSDATA
   530 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   531 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   532 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   533 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   534 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   535 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   536 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   537 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   538 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   539 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   540 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   541 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   542 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   543 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   544 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   545 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   546 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   547 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   548 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   549 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   550 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   551 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   552 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   553 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   554 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   555 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   556 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   557 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   558 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   559 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   560 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   561 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   562 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   563 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   564 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   565 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   566 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   567 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   568 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   569 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   570 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   571 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   572 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   573 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   574 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   575 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   576 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   577 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   578 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   579 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   580 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   581 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   582 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   583 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   584 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   585 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   586 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   587 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   588 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   589 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   590 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   591 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   592 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   593 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   594 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   595 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   596 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   597 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   598 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   599 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   600 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   601 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   602 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   603 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   604 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   605 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   606 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   607 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   608 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   609 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   610 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   611 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   612 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   613 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   614 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   615 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   616 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   617 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   618 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   619 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   620 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   621 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   622 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   623 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   624 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   625 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   626 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   627 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   628 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   629 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   630 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   631                                  ;-----------------------------------------------------------------------------------------------------------------------
   632                                  ;
   633                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   634                                  ;
   635                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   636                                  ;
   637                                  ;-----------------------------------------------------------------------------------------------------------------------
   638                                  ECONDATA                equ     ($)
   639 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   640 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   641 00000808 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   642 00000820 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   643 00000821 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   644 00000822 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   645 00000823 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   646 00000824 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   647 00000825 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   648 00000826 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   649 00000827 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   650 00000828 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   651 00000829 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   652 0000082A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   653 0000082B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   654 0000082C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   655 0000087C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   656 000008CC <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   657 0000091C <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   658                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   659                                  ;-----------------------------------------------------------------------------------------------------------------------
   660                                  ;
   661                                  ;       End of OS Variables
   662                                  ;
   663                                  ;-----------------------------------------------------------------------------------------------------------------------
   664                                  endstruc
   665                                  ;-----------------------------------------------------------------------------------------------------------------------
   666                                  ;
   667                                  ;       Macros
   668                                  ;
   669                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   670                                  ;
   671                                  ;-----------------------------------------------------------------------------------------------------------------------
   672                                  %macro                  mint    1
   673                                  _%1                     equ     ($-$$) / EX86DESCLEN
   674                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   675                                  %endmacro
   676                                  %macro                  mtrap   1
   677                                  _%1                     equ     ($-$$) / EX86DESCLEN
   678                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   679                                  %endmacro
   680                                  %macro                  menter  1
   681                                  ?%1                     equ     ($-$$)
   682                                  %endmacro
   683                                  %macro                  tsvce   1
   684                                  e%1                     equ     ($-tsvc)/4
   685                                                          dd      %1
   686                                  %endmacro
   687                                  %ifdef BUILDBOOT
   688                                  ;=======================================================================================================================
   689                                  ;
   690                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   691                                  ;
   692                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   693                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   694                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   695                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   696                                  ;
   697                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   698                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   699                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   700                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   701                                  ;       immediately followed by a disk parameter table.
   702                                  ;
   703                                  ;=======================================================================================================================
   704                                                          cpu     8086                                            ;assume minimal CPU
   705                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   706                                                          bits    16                                              ;16-bit code at power-up
   707                                  %ifdef BUILDPREP
   708                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   709                                  %else
   710                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   711                                  %endif
   712                                  ;-----------------------------------------------------------------------------------------------------------------------
   713                                  ;
   714                                  ;       Disk Parameter Table
   715                                  ;
   716                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   717                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   718                                  ;
   719                                  ;-----------------------------------------------------------------------------------------------------------------------
   720                                                          db      "CustomOS"                                      ;eight-byte label
   721                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   722                                  cbClusterSectors        db      1                                               ;sectors per cluster
   723                                  cwReservedSectors       dw      1                                               ;reserved sectors
   724                                  cbFatCount              db      2                                               ;file allocation table copies
   725                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   726                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   727                                  cbDiskType              db      0F0h                                            ;1.44MB
   728                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   729                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   730                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   731                                  cwDiskSides             dw      2                                               ;sides per disk
   732                                  cwSpecialSectors        dw      0                                               ;special sectors
   733                                  ;
   734                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   735                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   736                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   737                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   738                                  ;       given several possible starting values for CS:IP.
   739                                  ;
   740                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   741                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   742                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   743                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   744                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   745                                                          mov     cl,4                                            ;shift count
   746                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   747                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   748                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   749                                  ;
   750                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   751                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   752                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   753                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   754                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   755                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   756                                  ;
   757                                                          sub     bx,16                                           ;BX = 07b0
   758                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   759                                                          mov     es,bx                                           ;ES = 07b0 = psp
   760                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   761                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   762                                  ;
   763                                  ;       Our boot addressability is now set up according to the following diagram.
   764                                  ;
   765                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   766                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   767                                  ;                               |  256 = 100h bytes                             |
   768                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   769                                  ;                               |  Boot Sector (vstart=0100h)                   |
   770                                  ;                               |  1 sector = 512 = 200h bytes                  |
   771                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   772                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   773                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   774                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   775                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   776                                  ;                               |  2 sectors = 1024 = 400h bytes
   777                                  ;                       009400  +-----------------------------------------------+ DS:1900
   778                                  ;
   779                                  ;       On entry, DL indicates the drive being booted from.
   780                                  ;
   781                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   782                                  ;
   783                                  ;       Compute directory i/o buffer address.
   784                                  ;
   785                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   786                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   787                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   788                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   789                                  ;
   790                                  ;       Compute segment where os.com will be loaded.
   791                                  ;
   792                                                          shr     ax,cl                                           ;AX = 0150
   793                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   794                                                          sub     ax,16                                           ;AX = 08f0
   795                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   796                                  ;
   797                                  ;       Set the video mode to 80 column, 25 row, text.
   798                                  ;
   799                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   800                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   801                                  ;
   802                                  ;       Write a message to the console so we know we have our addressability established.
   803                                  ;
   804                                                          mov     si,czLoadMsg                                    ;loading message
   805                                                          call    BootPrint                                       ;display loader message
   806                                  ;
   807                                  ;       Initialize the number of directory sectors to search.
   808                                  ;
   809                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   810                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   811                                  ;
   812                                  ;       Compute number of directory sectors and initialize overhead count.
   813                                  ;
   814                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   815                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   816                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   817                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   818                                  ;
   819                                  ;       Compute directory entries per sector.
   820                                  ;
   821                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   822                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   823                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   824                                  ;
   825                                  ;       Compute first logical directory sector and update overhead count.
   826                                  ;
   827                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   828                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   829                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   830                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   831                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   832                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   833                                  ;
   834                                  ;       Read directory sector.
   835                                  ;
   836                                  .30                     mov     al,1                                            ;sector count
   837                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   838                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   839                                                          call    ReadSector                                      ;read sector into es:bx
   840                                  ;
   841                                  ;       Setup variables to search this directory sector.
   842                                  ;
   843                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   844                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   845                                                          jna     .40                                             ;no, continue
   846                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   847                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   848                                                          mov     si,cbKernelProgram                              ;program name
   849                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   850                                  ;
   851                                  ;       Loop through directory sectors searching for kernel program.
   852                                  ;
   853                                  .50                     push    si                                              ;save kernel name address
   854                                                          push    di                                              ;save dir i/o buffer address
   855                                                          mov     cx,11                                           ;length of 8+3 name
   856                                                          cld                                                     ;forward strings
   857                                                          repe    cmpsb                                           ;compare entry name
   858                                                          pop     di                                              ;restore dir i/o buffer address
   859                                                          pop     si                                              ;restore kernel name address
   860                                                          je      .60                                             ;exit loop if found
   861                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   862                                                          dec     ax                                              ;decrement remaining entries
   863                                                          jnz     .50                                             ;next entry
   864                                  ;
   865                                  ;       Repeat search if we are not at the end of the directory.
   866                                  ;
   867                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   868                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   869                                                          jne     .30                                             ;no, get next sector
   870                                                          mov     si,czNoKernel                                   ;missing kernel message
   871                                                          jmp     BootExit                                        ;display message and exit
   872                                  ;
   873                                  ;       If we find the kernel program in the directory, read the FAT.
   874                                  ;
   875                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   876                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   877                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   878                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   879                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   880                                                          call    ReadSector                                      ;read FAT into buffer
   881                                  ;
   882                                  ;       Get the starting cluster of the kernel program and target address.
   883                                  ;
   884                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   885                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   886                                  ;
   887                                  ;       Read each program cluster into RAM.
   888                                  ;
   889                                  .70                     push    ax                                              ;save cluster nbr
   890                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   891                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   892                                                          mov     [wbReadCount],cl                                ;save sectors to read
   893                                                          xor     ch,ch                                           ;CX = sectors per cluster
   894                                                          mul     cx                                              ;DX:AX = logical cluster sector
   895                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   896                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   897                                                          call    ReadSector                                      ;read sectors into ES:BX
   898                                  ;
   899                                  ;       Update buffer pointer for next cluster.
   900                                  ;
   901                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   902                                                          xor     ah,ah                                           ;AX = sectors per cluster
   903                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   904                                                          add     bx,ax                                           ;BX = next cluster target address
   905                                                          pop     ax                                              ;AX = restore cluster nbr
   906                                  ;
   907                                  ;       Compute next cluster number.
   908                                  ;
   909                                                          mov     cx,ax                                           ;CX = cluster nbr
   910                                                          mov     di,ax                                           ;DI = cluster nbr
   911                                                          shr     ax,1                                            ;AX = cluster/2
   912                                                          mov     dx,ax                                           ;DX = cluster/2
   913                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   914                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   915                                                          and     di,1                                            ;get low bit
   916                                                          add     di,ax                                           ;add one if cluster is odd
   917                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   918                                                          mov     ax,[di]                                         ;get cluster bytes
   919                                  ;
   920                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   921                                  ;
   922                                                          test    cl,1                                            ;is cluster odd?
   923                                                          jz      .80                                             ;no, skip ahead
   924                                                          mov     cl,4                                            ;shift count
   925                                                          shr     ax,cl                                           ;shift nybble low
   926                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   927                                                          cmp     ax,0FFFh                                        ;end of chain?
   928                                                          jne     .70                                             ;no, continue
   929                                  ;
   930                                  ;       Transfer control to the operating system program.
   931                                  ;
   932                                                          db      0EAh                                            ;jmp seg:offset
   933                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   934                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   935                                  ;
   936                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   937                                  ;
   938                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   939                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   940                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   941                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   942                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   943                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   944                                                          mov     ax,dx                                           ;AX = cyl sector
   945                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   946                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   947                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   948                                  ;
   949                                  ;       Try maxtries times to read sector.
   950                                  ;
   951                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   952                                  .10                     push    bx                                              ;save buffer address
   953                                                          push    cx                                              ;save retry count
   954                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   955                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   956                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   957                                                          int     EBIOSINTDISKETTE                                ;read sector
   958                                                          pop     cx                                              ;restore retry count
   959                                                          pop     bx                                              ;restore buffer address
   960                                                          jnc     BootReturn                                      ;skip ahead if done
   961                                                          loop    .10                                             ;retry
   962                                  ;
   963                                  ;       Handle disk error: convert to ASCII and store in error string.
   964                                  ;
   965                                                          mov     al,ah                                           ;AL = bios error code
   966                                                          xor     ah,ah                                           ;AX = bios error code
   967                                                          mov     dl,16                                           ;divisor for base 16
   968                                                          div     dl                                              ;AL = hi order, AH = lo order
   969                                                          or      ax,03030h                                       ;apply ASCII zone bits
   970                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   971                                                          jb      .20                                             ;continue if numeral
   972                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   973                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   974                                                          jb      .30                                             ;continue if numeral
   975                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   976                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   977                                                          mov     si,czErrorMsg                                   ;error message address
   978                                  BootExit                call    BootPrint                                       ;display messge to console
   979                                  ;
   980                                  ;       Wait for a key press.
   981                                  ;
   982                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   983                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   984                                                          jnz     .20                                             ;continue if key pressed
   985                                                          sti                                                     ;enable maskable interrupts
   986                                                          hlt                                                     ;wait for interrupt
   987                                                          jmp     .10                                             ;repeat
   988                                  ;
   989                                  ;       Reset the system.
   990                                  ;
   991                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   992                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   993                                  .30                     sti                                                     ;enable maskable interrupts
   994                                                          hlt                                                     ;stop until reset, int, nmi
   995                                                          jmp     .30                                             ;loop until restart kicks in
   996                                  ;
   997                                  ;       Display text message.
   998                                  ;
   999                                  BootPrint               cld                                                     ;forward strings
  1000                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1001                                                          test    al,al                                           ;end of string?
  1002                                                          jz      BootReturn                                      ;... yes, exit our loop
  1003                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1004                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1005                                                          jmp     .10                                             ;repeat until done
  1006                                  BootReturn              ret                                                     ;return
  1007                                  ;-----------------------------------------------------------------------------------------------------------------------
  1008                                  ;
  1009                                  ;       Constants
  1010                                  ;
  1011                                  ;-----------------------------------------------------------------------------------------------------------------------
  1012                                                          align   2
  1013                                  cwEntryLen              dw      32                                              ;length of directory entry
  1014                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1015                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1016                                  czErrorMsg              db      "Disk error "                                   ;error message
  1017                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1018                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1019                                  ;-----------------------------------------------------------------------------------------------------------------------
  1020                                  ;
  1021                                  ;       Work Areas
  1022                                  ;
  1023                                  ;-----------------------------------------------------------------------------------------------------------------------
  1024                                                          align   2
  1025                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1026                                  wwEntriesLeft           dw      0                                               ;directory entries to search
  1027                                  wwOverhead              dw      0                                               ;overhead sectors
  1028                                  wwSectorEntries         dw      0                                               ;directory entries per sector
  1029                                  wwLogicalSector         dw      0                                               ;current logical sector
  1030                                  wwReadCountCommand      equ     $                                               ;read count and command
  1031                                  wbReadCount             db      0                                               ;sectors to read
  1032                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1033                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1034                                  wbDrive                 db      0                                               ;drive
  1035                                  wbHead                  db      0                                               ;head
  1036                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1037                                                          db      0                                               ;sector
  1038                                  wbTrack                 db      0                                               ;track
  1039                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
  1040                                                          db      055h,0AAh                                       ;end of sector signature
  1041                                  %endif
  1042                                  %ifdef BUILDPREP
  1043                                  ;=======================================================================================================================
  1044                                  ;
  1045                                  ;       Diskette Preparation Code
  1046                                  ;
  1047                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1048                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1049                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1050                                  ;
  1051                                  ;=======================================================================================================================
  1052                                  ;
  1053                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1054                                  ;
  1055                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1056                                                          call    BootPrint                                       ;display message
  1057                                  ;
  1058                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1059                                  ;
  1060                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1061                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1062                                                          jnz     .20                                             ;continue if key pressed
  1063                                                          sti                                                     ;enable interrupts
  1064                                                          hlt                                                     ;wait for interrupt
  1065                                                          jmp     .10                                             ;repeat
  1066                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1067                                                          je      .30                                             ;yes, branch
  1068                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1069                                                          jne     .10                                             ;no, repeat
  1070                                                          jmp     .120                                            ;yes, exit program
  1071                                  ;
  1072                                  ;       Display writing-sector message and patch the JMP instruction.
  1073                                  ;
  1074                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1075                                                          call    BootPrint                                       ;display message
  1076                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1077                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1078                                                          mov     [bx],ax                                         ;update the JMP instruction
  1079                                  ;
  1080                                  ;       Try to read the boot sector.
  1081                                  ;
  1082                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1083                                  .40                     push    cx                                              ;save remaining tries
  1084                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1085                                                          mov     dx,0                                            ;head zero, drive zero
  1086                                                          mov     cx,1                                            ;track zero, sector one
  1087                                                          mov     al,1                                            ;one sector
  1088                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1089                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1090                                                          pop     cx                                              ;restore remaining retries
  1091                                                          jnc     .50                                             ;skip ahead if successful
  1092                                                          loop    .40                                             ;try again
  1093                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1094                                                          jmp     .70                                             ;branch to error routine
  1095                                  ;
  1096                                  ;       Copy diskette parms from input buffer to output buffer.
  1097                                  ;
  1098                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1099                                                          add     si,11                                           ;skip over JMP and system ID
  1100                                                          mov     di,Boot                                         ;output buffer address
  1101                                                          add     di,11                                           ;skip over JMP and system ID
  1102                                                          mov     cx,19                                           ;length of diskette parameters
  1103                                                          cld                                                     ;forward string copies
  1104                                                          rep     movsb                                           ;copy diskette parameters
  1105                                  ;
  1106                                  ;       Try to write boot sector to diskette.
  1107                                  ;
  1108                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1109                                  .60                     push    cx                                              ;save remaining tries
  1110                                                          mov     bx,Boot                                         ;output buffer address
  1111                                                          mov     dx,0                                            ;head zero, drive zero
  1112                                                          mov     cx,1                                            ;track zero, sector one
  1113                                                          mov     al,1                                            ;one sector
  1114                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1115                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1116                                                          pop     cx                                              ;restore remaining retries
  1117                                                          jnc     .100                                            ;skip ahead if successful
  1118                                                          loop    .60                                             ;try again
  1119                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1120                                  ;
  1121                                  ;       Convert the error code to ASCII and display the error message.
  1122                                  ;
  1123                                  .70                     push    ax                                              ;save error code
  1124                                                          mov     al,ah                                           ;copy error code
  1125                                                          mov     ah,0                                            ;AX = error code
  1126                                                          mov     dl,10h                                          ;hexadecimal divisor
  1127                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1128                                                          or      ax,03030h                                       ;add ASCII zone digits
  1129                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1130                                                          jb      .80                                             ;yes, continue
  1131                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1132                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1133                                                          jb      .90                                             ;yes, continue
  1134                                                          add     al,7                                            ;no, make ASCII
  1135                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1136                                                          call    BootPrint                                       ;write error message
  1137                                                          pop     ax                                              ;restore error code
  1138                                  ;
  1139                                  ;       Display the completion message.
  1140                                  ;
  1141                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1142                                                          mov     al,ah                                           ;BIOS return code
  1143                                                          cmp     al,0                                            ;success?
  1144                                                          je      .110                                            ;yes, continue
  1145                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1146                                                          cmp     al,1                                            ;disk parameter error?
  1147                                                          je      .110                                            ;yes, continue
  1148                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1149                                                          cmp     al,2                                            ;address mark not found?
  1150                                                          je      .110                                            ;yes, continue
  1151                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1152                                                          cmp     al,3                                            ;protected disk?
  1153                                                          je      .110                                            ;yes, continue
  1154                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1155                                                          cmp     al,6                                            ;diskette removed?
  1156                                                          je      .110                                            ;yes, continue
  1157                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1158                                                          cmp     al,80H                                          ;drive timed out?
  1159                                                          je      .110                                            ;yes, continue
  1160                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1161                                  .110                    call    BootPrint                                       ;display result message
  1162                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1163                                                          int     021h                                            ;terminate DOS program
  1164                                                          ret                                                     ;return (should not execute)
  1165                                  ;-----------------------------------------------------------------------------------------------------------------------
  1166                                  ;
  1167                                  ;       Diskette Preparation Messages
  1168                                  ;
  1169                                  ;-----------------------------------------------------------------------------------------------------------------------
  1170                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1171                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1172                                                          db      13,10
  1173                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1174                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1175                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1176                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1177                                                          db      13,10,0
  1178                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1179                                                          db      13,10,0
  1180                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1181                                                          db      13,10,0
  1182                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1183                                                          db      13,10,0
  1184                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1185                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1186                                                          db      13,10,0
  1187                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1188                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1189                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1190                                                          db      13,10,"and retry."
  1191                                                          db      13,10,0
  1192                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1193                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1194                                                          db      13,10,"using another diskette."
  1195                                                          db      13,10,0
  1196                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1197                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1198                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1199                                                          db      13,10,0
  1200                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1201                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1202                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1203                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1204                                                          db      13,10,"is properly inserted in the diskette drive."
  1205                                                          db      13,10,0
  1206                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1207                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1208                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1209                                                          db      13,10,0
  1210                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1211                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1212                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1213                                                          db      13,10,0
  1214                                  wcPrepInBuf             equ     $
  1215                                  %endif
  1216                                  %ifdef BUILDDISK
  1217                                  ;=======================================================================================================================
  1218                                  ;
  1219                                  ;       File Allocation Tables
  1220                                  ;
  1221                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1222                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1223                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1224                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1225                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1226                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1227                                  ;       the last cluster in the chain.
  1228                                  ;
  1229                                  ;       Every three bytes encode two FAT entries as follows:
  1230                                  ;
  1231                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1232                                  ;
  1233                                  ;=======================================================================================================================
  1234                                  ;-----------------------------------------------------------------------------------------------------------------------
  1235                                  ;
  1236                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1237                                  ;
  1238                                  ;-----------------------------------------------------------------------------------------------------------------------
  1239                                  section                 fat1                                                    ;first copy of FAT
  1240                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1241                                                          db      005h,060h,000h, 007h,080h,000h
  1242                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1243                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1244                                                          db      011h,020h,001h, 013h,040h,001h
  1245                                                          db      015h,060h,001h, 017h,080h,001h
  1246                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1247                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1248                                                          db      021h,020h,002h, 023h,040h,002h
  1249                                                          db      025h,060h,002h, 027h,080h,002h
  1250                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1251                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                  ;
  1254                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1255                                  ;
  1256                                  ;-----------------------------------------------------------------------------------------------------------------------
  1257                                  section                 fat2                                                    ;second copy of FAT
  1258                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1259                                                          db      005h,060h,000h, 007h,080h,000h
  1260                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1261                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1262                                                          db      011h,020h,001h, 013h,040h,001h
  1263                                                          db      015h,060h,001h, 017h,080h,001h
  1264                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1265                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1266                                                          db      021h,020h,002h, 023h,040h,002h
  1267                                                          db      025h,060h,002h, 027h,080h,002h
  1268                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1269                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1270                                  ;-----------------------------------------------------------------------------------------------------------------------
  1271                                  ;
  1272                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1273                                  ;
  1274                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1275                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1276                                  ;       copy.
  1277                                  ;
  1278                                  ;-----------------------------------------------------------------------------------------------------------------------
  1279                                  section                 dir                                                     ;diskette directory
  1280                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1281                                                          db      020h                                            ;attribute (archive bit set)
  1282                                                          times   10 db 0                                         ;unused
  1283                                                          dw      0h                                              ;time
  1284                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1285                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1286                                                          dw      2                                               ;first cluster
  1287                                                          dd      05400h                                          ;file size
  1288                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1289                                  %endif
  1290                                  %ifdef BUILDCOM
  1291                                  ;=======================================================================================================================
  1292                                  ;
  1293                                  ;       OS.COM
  1294                                  ;
  1295                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1296                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1297                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1298                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1299                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1300                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1301                                  ;
  1302                                  ;       Our loader addressability is set up according to the following diagram.
  1303                                  ;
  1304                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1305                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1306                                  ;                               |  256 = 100h bytes                             |
  1307                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1308                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1309                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1310                                  ;                       007e00  +-----------------------------------------------+
  1311                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1312                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1313                                  ;                               |                                               |
  1314                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1315                                  ;                               |                                               |
  1316                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1317                                  ;                               |  Loader Code                                  |
  1318                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1319                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1320                                  ;
  1321                                  ;=======================================================================================================================
  1322                                  ;-----------------------------------------------------------------------------------------------------------------------
  1323                                  ;
  1324                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1325                                  ;
  1326                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1327                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1328                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1329                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1330                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1331                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1332                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1333                                  ;       registers.
  1334                                  ;
  1335                                  ;-----------------------------------------------------------------------------------------------------------------------
  1336                                                          cpu     8086                                            ;assume minimal CPU
  1337                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1338                                                          bits    16                                              ;this is 16-bit code
  1339 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1340 00000001 1F                                              pop     ds                                              ;...as our data segment
  1341 00000002 0E                                              push    cs                                              ;use the code segment
  1342 00000003 07                                              pop     es                                              ;...as our extra segment
  1343                                  ;
  1344                                  ;       Write a message to the console so we know we have our addressability established.
  1345                                  ;
  1346 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1347 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1348                                  ;
  1349                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1350                                  ;
  1351 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1352 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1353 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1354 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1355                                                          cpu     386                                             ;allow 80386 instructions
  1356 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1357 00000017 E89600                                          call    PutTTYString                                    ;display message
  1358                                  ;
  1359                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1360                                  ;
  1361 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1362 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1363 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1364 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1365 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1366 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1367 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1368 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1369 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1370 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1371                                  ;
  1372                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1373                                  ;
  1374 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1375 00000038 07                                              pop     es                                              ;... as target segment
  1376 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1377 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1378 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1379 00000041 FC                                              cld                                                     ;forward strings
  1380 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1381 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1382 00000047 E86600                                          call    PutTTYString                                    ;display message
  1383                                  ;
  1384                                  ;       Switch to protected mode.
  1385                                  ;
  1386 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1387 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1388 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1389 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1390 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1391 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1392 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1393 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1394 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1395 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1396 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1397                                  ;
  1398                                  ;       Enable hardware and maskable interrupts.
  1399                                  ;
  1400 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1401 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1402 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1403 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1404                                  ;
  1405                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1406                                  ;
  1407 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1408 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1409 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1410                                  ;-----------------------------------------------------------------------------------------------------------------------
  1411                                  ;
  1412                                  ;       Routine:        LoaderExit
  1413                                  ;
  1414                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1415                                  ;
  1416                                  ;       In:             DS:SI   string address
  1417                                  ;
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1420                                  ;
  1421                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1422                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1423                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1424                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1425                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1426                                  ;
  1427 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1428 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1429 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1430 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1431 00000085 F4                                              hlt                                                     ;wait for interrupt
  1432 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1433                                  ;
  1434                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1435                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1436                                  ;       HLT until the system resets.
  1437                                  ;
  1438 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1439 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1440 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1441 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1442 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444                                  ;
  1445                                  ;       Routine:        GetCPUType
  1446                                  ;
  1447                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1448                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1449                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1450                                  ;
  1451                                  ;       Out:            AX      0 = 808x, v20, etc.
  1452                                  ;                               1 = 80186
  1453                                  ;                               2 = 80286
  1454                                  ;                               3 = 80386
  1455                                  ;
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1458 00000092 B120                                            mov     cl,32                                           ;shift count
  1459 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1460 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1461 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1462                                                          cpu     186
  1463 0000009A 54                                              push    sp                                              ;save stack pointer
  1464 0000009B 59                                              pop     cx                                              ;...into cx
  1465 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1466 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1467                                                          cpu     286
  1468 000000A0 40                                              inc     ax                                              ;AX = 2
  1469 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1470 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1471 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1472 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1473 000000AE 40                                              inc     ax                                              ;AX = 3
  1474 000000AF C3                      .10                     ret                                                     ;return
  1475                                  ;-----------------------------------------------------------------------------------------------------------------------
  1476                                  ;
  1477                                  ;       Routine:        PutTTYString
  1478                                  ;
  1479                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1480                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1481                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1482                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1483                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1484                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1485                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1486                                  ;                       to LODSB is not needed.
  1487                                  ;
  1488                                  ;       In:             DS:SI   address of string
  1489                                  ;
  1490                                  ;       Out:            DF      0
  1491                                  ;                       ZF      1
  1492                                  ;                       AL      0
  1493                                  ;
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1496 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1497 000000B2 84C0                                            test    al,al                                           ;end of string?
  1498 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1499 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1500 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1501 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1502 000000BC C3                      .20                     ret                                                     ;return
  1503                                  ;-----------------------------------------------------------------------------------------------------------------------
  1504                                  ;
  1505                                  ;       Loader Data
  1506                                  ;
  1507                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1508                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1509                                  ;
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511 000000BD 90                                              align   2
  1512 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1513 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1514 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1515 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1516 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1516 000000D1 74696E672073797374-
  1516 000000DA 656D20726571756972-
  1516 000000E3 657320616E20693338-
  1516 000000EC 36206F72206C617465-
  1516 000000F5 722070726F63657373-
  1516 000000FE 6F722E0D0A         
  1517 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1517 0000010C 65737320616E79206B-
  1517 00000115 657920746F20726573-
  1517 0000011E 746172742074686520-
  1517 00000127 636F6D70757465722E-
  1517 00000130 0D0A00             
  1518 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1519 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1519 00000145 7265640D0A00       
  1520 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1520 00000154 616465640D0A00     
  1521 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1521 00000164 4F530D0A00         
  1522 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1523                                  ;=======================================================================================================================
  1524                                  ;
  1525                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1526                                  ;
  1527                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1528                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1529                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1530                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1531                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1532                                  ;
  1533                                  ;=======================================================================================================================
  1534                                  ;=======================================================================================================================
  1535                                  ;
  1536                                  ;       Kernel Tables
  1537                                  ;
  1538                                  ;=======================================================================================================================
  1539                                  ;-----------------------------------------------------------------------------------------------------------------------
  1540                                  ;
  1541                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1542                                  ;
  1543                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1544                                  ;       first descriptor must be all nulls.
  1545                                  ;
  1546                                  ;       6   5         4         3         2         1         0
  1547                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1548                                  ;       ----------------------------------------------------------------
  1549                                  ;       h......hffffmmmma......ab......................bn..............n
  1550                                  ;       00000000                        all areas have base addresses below 2^24
  1551                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1552                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1553                                  ;                   1001                present, ring-0, selector
  1554                                  ;
  1555                                  ;       h...h   hi-order base address (bits 24-31)
  1556                                  ;       ffff    flags
  1557                                  ;       mmmm    hi-order limit (bits 16-19)
  1558                                  ;       a...a   access
  1559                                  ;       b...b   lo-order base address (bits 0-23)
  1560                                  ;       n...n   lo-order limit (bits 0-15)
  1561                                  ;
  1562                                  ;-----------------------------------------------------------------------------------------------------------------------
  1563                                  section                 gdt                                                     ;global descriptor table
  1564 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1565 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1566 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1567 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1568 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1569 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1570 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1571 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1572 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1573 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1574 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1575 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1576 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1577 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1578 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1579                                  ;-----------------------------------------------------------------------------------------------------------------------
  1580                                  ;
  1581                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1582                                  ;
  1583                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1584                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1585                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1586                                  ;
  1587                                  ;       6   5         4         3         2         1         0
  1588                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1589                                  ;       ----------------------------------------------------------------
  1590                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1591                                  ;
  1592                                  ;       h...h   high-order offset (bits 16-31)
  1593                                  ;       P       present (0=unused interrupt)
  1594                                  ;       zz      descriptor privilege level
  1595                                  ;       S       storage segment (must be zero for IDT)
  1596                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1597                                  ;       S...S   handling code selector in GDT
  1598                                  ;       l...l   lo-order offset (bits 0-15)
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  section                 idt                                                     ;interrupt descriptor table
  1602                                                          mint    dividebyzero                                    ;00 divide by zero
  1602                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1602 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1603                                                          mint    singlestep                                      ;01 single step
  1603                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1603 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1604                                                          mint    nmi                                             ;02 non-maskable
  1604                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1604 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1605                                                          mint    break                                           ;03 break
  1605                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1605 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1606                                                          mint    into                                            ;04 into
  1606                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1606 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1607                                                          mint    bounds                                          ;05 bounds
  1607                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1607 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1608                                                          mint    badopcode                                       ;06 bad op code
  1608                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1608 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1609                                                          mint    nocoproc                                        ;07 no coprocessor
  1609                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1609 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1610                                                          mint    doublefault                                     ;08 double-fault
  1610                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1610 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1611                                                          mint    operand                                         ;09 operand
  1611                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1611 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1612                                                          mint    badtss                                          ;0a bad TSS
  1612                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1612 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1613                                                          mint    notpresent                                      ;0b not-present
  1613                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1613 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1614                                                          mint    stacklimit                                      ;0c stack limit
  1614                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1614 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1615                                                          mint    protection                                      ;0d general protection fault
  1615                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1615 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1616                                                          mint    int14                                           ;0e (reserved)
  1616                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1616 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1617                                                          mint    int15                                           ;0f (reserved)
  1617                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1617 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1618                                                          mint    coproccalc                                      ;10 (reserved)
  1618                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1618 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1619                                                          mint    int17                                           ;11 (reserved)
  1619                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1619 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1620                                                          mint    int18                                           ;12 (reserved)
  1620                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1620 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1621                                                          mint    int19                                           ;13 (reserved)
  1621                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1621 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1622                                                          mint    int20                                           ;14 (reserved)
  1622                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1622 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1623                                                          mint    int21                                           ;15 (reserved)
  1623                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1623 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1624                                                          mint    int22                                           ;16 (reserved)
  1624                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1624 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1625                                                          mint    int23                                           ;17 (reserved)
  1625                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1625 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1626                                                          mint    int24                                           ;18 (reserved)
  1626                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1626 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1627                                                          mint    int25                                           ;19 (reserved)
  1627                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1627 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1628                                                          mint    int26                                           ;1a (reserved)
  1628                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1628 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1629                                                          mint    int27                                           ;1b (reserved)
  1629                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1629 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1630                                                          mint    int28                                           ;1c (reserved)
  1630                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1630 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1631                                                          mint    int29                                           ;1d (reserved)
  1631                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1631 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1632                                                          mint    int30                                           ;1e (reserved)
  1632                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1632 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1633                                                          mint    int31                                           ;1f (reserved)
  1633                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1633 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1634                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1634                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1634 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1635                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1635                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1635 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1636                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1636                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1636 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1637                                                          mtrap   com2                                            ;23 IRQ3 com2
  1637                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1637 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1638                                                          mtrap   com1                                            ;24 IRQ4 com1
  1638                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1638 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1639                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1639                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1639 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1640                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1640                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1640 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1641                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1641                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1641 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1642                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1642                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1642 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1643                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1643                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1643 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1644                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1644                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1644 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1645                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1645                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1645 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1646                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1646                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1646 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1647                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1647                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1647 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1648                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1648                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1648 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1649                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1649                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1649 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1650                                                          mtrap   svc                                             ;30 OS services
  1650                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1650 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1651 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1652                                  ;=======================================================================================================================
  1653                                  ;
  1654                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1655                                  ;
  1656                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1657                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1658                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1659                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1660                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1661                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1662                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1663                                  ;
  1664                                  ;=======================================================================================================================
  1665                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1666                                                          cpu     386                                             ;allow 80386 instructions
  1667                                                          bits    32                                              ;this is 32-bit code
  1668                                  ;=======================================================================================================================
  1669                                  ;
  1670                                  ;       CPU Interrupt Handlers
  1671                                  ;
  1672                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1673                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1674                                  ;
  1675                                  ;=======================================================================================================================
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       INT0    Divide By Zero
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                                          menter  dividebyzero                                    ;divide by zero
  1681                              <1> ?%1 equ ($-$$)
  1682 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1683 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1684 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       INT1    Single Step
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                                          menter  singlestep                                      ;single step
  1690                              <1> ?%1 equ ($-$$)
  1691 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1692 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1693 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  ;
  1696                                  ;       INT2    Non-Maskable Interrupt
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                                          menter  nmi                                             ;non-maskable
  1699                              <1> ?%1 equ ($-$$)
  1700 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1701 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1702 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       INT3    Break
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                                          menter  break                                           ;break
  1708                              <1> ?%1 equ ($-$$)
  1709 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1710 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1711 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                  ;
  1714                                  ;       INT4    Into
  1715                                  ;
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                                          menter  into                                            ;into
  1717                              <1> ?%1 equ ($-$$)
  1718 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1719 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1720 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                  ;
  1723                                  ;       INT5    Bounds
  1724                                  ;
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                                          menter  bounds                                          ;bounds
  1726                              <1> ?%1 equ ($-$$)
  1727 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1728 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1729 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;       INT6    Bad Operation Code
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                                          menter  badopcode                                       ;bad opcode interrupt
  1735                              <1> ?%1 equ ($-$$)
  1736 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1737 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1738 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;       INT7    No Coprocessor
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1744                              <1> ?%1 equ ($-$$)
  1745 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1746 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1747 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       INT8    Double Fault
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                                          menter  doublefault                                     ;doublefault interrupt
  1753                              <1> ?%1 equ ($-$$)
  1754 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1755 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1756 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                  ;
  1759                                  ;       INT9    Operand
  1760                                  ;
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                                          menter  operand                                         ;operand interrupt
  1762                              <1> ?%1 equ ($-$$)
  1763 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1764 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1765 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;       INT10   Bad Task State Segment
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                                          menter  badtss                                          ;bad TSS interrupt
  1771                              <1> ?%1 equ ($-$$)
  1772 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1773 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1774 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                  ;
  1777                                  ;       INT11   Not Present
  1778                                  ;
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                                          menter  notpresent                                      ;not present interrupt
  1780                              <1> ?%1 equ ($-$$)
  1781 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1782 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1783 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                  ;
  1786                                  ;       INT12   Stack Limit
  1787                                  ;
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                                          menter  stacklimit                                      ;stack limit interrupt
  1789                              <1> ?%1 equ ($-$$)
  1790 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1791 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1792 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;
  1795                                  ;       INT13   General Protection Fault
  1796                                  ;
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                                          menter  protection                                      ;protection fault interrupt
  1798                              <1> ?%1 equ ($-$$)
  1799 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1800 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1801 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  ;
  1804                                  ;       INT14   Reserved
  1805                                  ;
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                                          menter  int14                                           ;(reserved)
  1807                              <1> ?%1 equ ($-$$)
  1808 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1809 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1810 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;       INT15   Reserved
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                                          menter  int15                                           ;(reserved)
  1816                              <1> ?%1 equ ($-$$)
  1817 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1818 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1819 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                  ;
  1822                                  ;       INT16   Coprocessor Calculation
  1823                                  ;
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                                          menter  coproccalc                                      ;coprocessor calculation
  1825                              <1> ?%1 equ ($-$$)
  1826 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1827 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1828 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                  ;
  1831                                  ;       INT17   Reserved
  1832                                  ;
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                                          menter  int17                                           ;(reserved)
  1834                              <1> ?%1 equ ($-$$)
  1835 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1836 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1837 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                  ;
  1840                                  ;       INT18   Reserved
  1841                                  ;
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                                          menter  int18                                           ;(reserved)
  1843                              <1> ?%1 equ ($-$$)
  1844 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1845 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1846 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                  ;
  1849                                  ;       INT19   Reserved
  1850                                  ;
  1851                                  ;-----------------------------------------------------------------------------------------------------------------------
  1852                                                          menter  int19                                           ;(reserved)
  1852                              <1> ?%1 equ ($-$$)
  1853 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1854 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1855 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                  ;
  1858                                  ;       INT20   Reserved
  1859                                  ;
  1860                                  ;-----------------------------------------------------------------------------------------------------------------------
  1861                                                          menter  int20                                           ;(reserved)
  1861                              <1> ?%1 equ ($-$$)
  1862 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1863 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1864 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                  ;
  1867                                  ;       INT21   Reserved
  1868                                  ;
  1869                                  ;-----------------------------------------------------------------------------------------------------------------------
  1870                                                          menter  int21                                           ;(reserved)
  1870                              <1> ?%1 equ ($-$$)
  1871 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1872 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1873 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                  ;
  1876                                  ;       INT22   Reserved
  1877                                  ;
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879                                                          menter  int22                                           ;(reserved)
  1879                              <1> ?%1 equ ($-$$)
  1880 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1881 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1882 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                  ;
  1885                                  ;       INT23   Reserved
  1886                                  ;
  1887                                  ;-----------------------------------------------------------------------------------------------------------------------
  1888                                                          menter  int23                                           ;(reserved)
  1888                              <1> ?%1 equ ($-$$)
  1889 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1890 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1891 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1892                                  ;-----------------------------------------------------------------------------------------------------------------------
  1893                                  ;
  1894                                  ;       INT24   Reserved
  1895                                  ;
  1896                                  ;-----------------------------------------------------------------------------------------------------------------------
  1897                                                          menter  int24                                           ;(reserved)
  1897                              <1> ?%1 equ ($-$$)
  1898 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1899 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1900 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                  ;
  1903                                  ;       INT25   Reserved
  1904                                  ;
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                                          menter  int25                                           ;(reserved)
  1906                              <1> ?%1 equ ($-$$)
  1907 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1908 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1909 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  ;
  1912                                  ;       INT26   Reserved
  1913                                  ;
  1914                                  ;-----------------------------------------------------------------------------------------------------------------------
  1915                                                          menter  int26                                           ;(reserved)
  1915                              <1> ?%1 equ ($-$$)
  1916 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1917 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1918 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                  ;
  1921                                  ;       INT27   Reserved
  1922                                  ;
  1923                                  ;-----------------------------------------------------------------------------------------------------------------------
  1924                                                          menter  int27                                           ;(reserved)
  1924                              <1> ?%1 equ ($-$$)
  1925 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1926 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1927 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                  ;
  1930                                  ;       INT28   Reserved
  1931                                  ;
  1932                                  ;-----------------------------------------------------------------------------------------------------------------------
  1933                                                          menter  int28                                           ;(reserved)
  1933                              <1> ?%1 equ ($-$$)
  1934 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1935 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1936 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  ;
  1939                                  ;       INT29   Reserved
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                                          menter  int29                                           ;(reserved)
  1942                              <1> ?%1 equ ($-$$)
  1943 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1944 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1945 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  ;
  1948                                  ;       INT30   Reserved
  1949                                  ;
  1950                                  ;-----------------------------------------------------------------------------------------------------------------------
  1951                                                          menter  int30                                           ;(reserved)
  1951                              <1> ?%1 equ ($-$$)
  1952 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1953 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1954 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                  ;
  1957                                  ;       INT31   Reserved
  1958                                  ;
  1959                                  ;-----------------------------------------------------------------------------------------------------------------------
  1960                                                          menter  int31                                           ;(reserved)
  1960                              <1> ?%1 equ ($-$$)
  1961 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1962 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1963 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1964                                  ;-----------------------------------------------------------------------------------------------------------------------
  1965                                  ;
  1966                                  ;       Routine:        ReportInterrupt
  1967                                  ;
  1968                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1969                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1970                                  ;
  1971                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1972                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1973                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1974                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1975                                  ;                       [esp+0]         error message address                   stored by push instructions
  1976                                  ;
  1977                                  ;       Out:            N/A             This routine does not exit.
  1978                                  ;
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1981 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1982 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1983 00000156 89E5                                            mov     ebp,esp                                         ;ebp --> [EDI]
  1984                                  ;
  1985                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1986                                  ;
  1987                                  ;                       [ebp+56]        eflags
  1988                                  ;                       [ebp+52]        cs
  1989                                  ;                       [ebp+48]        eip
  1990                                  ;                       [ebp+44]        interrupt number (0-31)
  1991                                  ;                       [ebp+40]        error message address
  1992                                  ;                       [ebp+36]        ds
  1993                                  ;                       [ebp+32]        es
  1994                                  ;                       [ebp+28]        eax
  1995                                  ;                       [ebp+24]        ecx
  1996                                  ;                       [ebp+20]        edx
  1997                                  ;                       [ebp+16]        ebx
  1998                                  ;                       [ebp+12]        esp
  1999                                  ;                       [ebp+8]         ebp
  2000                                  ;                       [ebp+4]         esi
  2001                                  ;                       [ebp+0]         edi
  2002                                  ;
  2003 00000158 0E                                              push    cs                                              ;load code selector ...
  2004 00000159 1F                                              pop     ds                                              ;... into DS
  2005 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2006 0000015C 07                                              pop     es                                              ;... into ES
  2007                                  ;
  2008                                  ;       Display the interrupt report boundary box
  2009                                  ;
  2010 0000015D B10D                                            mov     cl,13                                           ;column
  2011 0000015F B506                                            mov     ch,6                                            ;row
  2012 00000161 B232                                            mov     dl,50                                           ;width
  2013 00000163 B608                                            mov     dh,8                                            ;height
  2014 00000165 B707                                            mov     bh,07h                                          ;attribute
  2015 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2016                                  ;
  2017                                  ;       Display the report header
  2018                                  ;
  2019 0000016C B10F                                            mov     cl,15                                           ;column
  2020 0000016E B507                                            mov     ch,7                                            ;row
  2021 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2022 00000175 E843110000                                      call    SetConsoleString                                ;draw text string
  2023                                  ;
  2024                                  ;       Display the interrupt description label
  2025                                  ;
  2026 0000017A B10F                                            mov     cl,15                                           ;column
  2027 0000017C B508                                            mov     ch,8                                            ;row
  2028 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2029 00000183 E835110000                                      call    SetConsoleString                                ;draw text string
  2030                                  ;
  2031                                  ;       Display the interrupt number
  2032                                  ;
  2033 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2034 0000018B B11A                                            mov     cl,26                                           ;column
  2035 0000018D B508                                            mov     ch,8                                            ;row
  2036 0000018F E8D20D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2037                                  ;
  2038                                  ;       Display the interrupt name
  2039                                  ;
  2040 00000194 B11D                                            mov     cl,29                                           ;column
  2041 00000196 B508                                            mov     ch,8                                            ;row
  2042 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2043 0000019B E81D110000                                      call    SetConsoleString                                ;display interrupt description
  2044                                  ;
  2045                                  ;       Display the register values header
  2046                                  ;
  2047 000001A0 B10F                                            mov     cl,15                                           ;column
  2048 000001A2 B50A                                            mov     ch,10                                           ;row
  2049 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2050 000001A9 E80F110000                                      call    SetConsoleString                                ;draw text string
  2051                                  ;
  2052                                  ;       Display the EAX register label and value
  2053                                  ;
  2054 000001AE B10F                                            mov     cl,15                                           ;column
  2055 000001B0 B50B                                            mov     ch,11                                           ;row
  2056 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2057 000001B7 E801110000                                      call    SetConsoleString                                ;draw label
  2058 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2059 000001BF B113                                            mov     cl,19                                           ;column
  2060 000001C1 B50B                                            mov     ch,11                                           ;row
  2061 000001C3 E8C40D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2062                                  ;
  2063                                  ;       Display the ECX register label and value
  2064                                  ;
  2065 000001C8 B10F                                            mov     cl,15                                           ;column
  2066 000001CA B50C                                            mov     ch,12                                           ;row
  2067 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2068 000001D1 E8E7100000                                      call    SetConsoleString                                ;draw label
  2069 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2070 000001D9 B113                                            mov     cl,19                                           ;column
  2071 000001DB B50C                                            mov     ch,12                                           ;row
  2072 000001DD E8AA0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2073                                  ;
  2074                                  ;       Display the EDX register label and value
  2075                                  ;
  2076 000001E2 B10F                                            mov     cl,15                                           ;column
  2077 000001E4 B50D                                            mov     ch,13                                           ;row
  2078 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2079 000001EB E8CD100000                                      call    SetConsoleString                                ;draw label
  2080 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2081 000001F3 B113                                            mov     cl,19                                           ;column
  2082 000001F5 B50D                                            mov     ch,13                                           ;row
  2083 000001F7 E8900D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2084                                  ;
  2085                                  ;       Display the EBX register label and value
  2086                                  ;
  2087 000001FC B10F                                            mov     cl,15                                           ;column
  2088 000001FE B50E                                            mov     ch,14                                           ;row
  2089 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2090 00000205 E8B3100000                                      call    SetConsoleString                                ;draw label
  2091 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2092 0000020D B113                                            mov     cl,19                                           ;column
  2093 0000020F B50E                                            mov     ch,14                                           ;row
  2094 00000211 E8760D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2095                                  ;
  2096                                  ;       Display the ESI register label and value
  2097                                  ;
  2098 00000216 B11D                                            mov     cl,29                                           ;column
  2099 00000218 B50B                                            mov     ch,11                                           ;row
  2100 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2101 0000021F E899100000                                      call    SetConsoleString                                ;draw label
  2102 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2103 00000227 B121                                            mov     cl,33                                           ;column
  2104 00000229 B50B                                            mov     ch,11                                           ;row
  2105 0000022B E85C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2106                                  ;
  2107                                  ;       Display the EDI register label and value
  2108                                  ;
  2109 00000230 B11D                                            mov     cl,29                                           ;column
  2110 00000232 B50C                                            mov     ch,12                                           ;row
  2111 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2112 00000239 E87F100000                                      call    SetConsoleString                                ;draw label
  2113 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2114 00000241 B121                                            mov     cl,33                                           ;column
  2115 00000243 B50C                                            mov     ch,12                                           ;row
  2116 00000245 E8420D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2117                                  ;
  2118                                  ;       Display the EBP register label and value
  2119                                  ;
  2120 0000024A B11D                                            mov     cl,29                                           ;column
  2121 0000024C B50D                                            mov     ch,13                                           ;row
  2122 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2123 00000253 E865100000                                      call    SetConsoleString                                ;draw label
  2124 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2125 0000025B B121                                            mov     cl,33                                           ;column
  2126 0000025D B50D                                            mov     ch,13                                           ;row
  2127 0000025F E8280D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2128                                  ;
  2129                                  ;       Display the DS register label and value
  2130                                  ;
  2131 00000264 B12A                                            mov     cl,42                                           ;column
  2132 00000266 B50B                                            mov     ch,11                                           ;row
  2133 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2134 0000026D E84B100000                                      call    SetConsoleString                                ;draw label
  2135 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2136 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2137 00000278 B12E                                            mov     cl,46                                           ;column
  2138 0000027A B50B                                            mov     ch,11                                           ;row
  2139 0000027C E81B0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2140                                  ;
  2141                                  ;       Display the ES register label and value
  2142                                  ;
  2143 00000281 B12A                                            mov     cl,42                                           ;column
  2144 00000283 B50C                                            mov     ch,12                                           ;row
  2145 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2146 0000028A E82E100000                                      call    SetConsoleString                                ;draw label
  2147 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2148 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2149 00000295 B12E                                            mov     cl,46                                           ;column
  2150 00000297 B50C                                            mov     ch,12                                           ;row
  2151 00000299 E8FE0C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2152                                  ;
  2153                                  ;       Display the SS register label and value
  2154                                  ;
  2155 0000029E B12A                                            mov     cl,42                                           ;column
  2156 000002A0 B50D                                            mov     ch,13                                           ;row
  2157 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2158 000002A7 E811100000                                      call    SetConsoleString                                ;draw label
  2159 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2160 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2161 000002B1 B12E                                            mov     cl,46                                           ;column
  2162 000002B3 B50D                                            mov     ch,13                                           ;row
  2163 000002B5 E8E20C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2164                                  ;
  2165                                  ;       Display the CS register lable and value
  2166                                  ;
  2167 000002BA B12A                                            mov     cl,42                                           ;column
  2168 000002BC B50E                                            mov     ch,14                                           ;row
  2169 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2170 000002C3 E8F50F0000                                      call    SetConsoleString                                ;draw label
  2171 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2172 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2173 000002CE B12E                                            mov     cl,46                                           ;column
  2174 000002D0 B50E                                            mov     ch,14                                           ;row
  2175 000002D2 E8C50C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2176                                  ;
  2177                                  ;       Display the EFLAGS register label and value
  2178                                  ;
  2179 000002D7 B133                                            mov     cl,51                                           ;column
  2180 000002D9 B50B                                            mov     ch,11                                           ;row
  2181 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2182 000002E0 E8D80F0000                                      call    SetConsoleString                                ;draw label
  2183 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2184 000002E8 B137                                            mov     cl,55                                           ;column
  2185 000002EA B50B                                            mov     ch,11                                           ;row
  2186 000002EC E89B0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2187                                  ;
  2188                                  ;       Display the ESP register label and value
  2189                                  ;
  2190 000002F1 B133                                            mov     cl,51                                           ;column
  2191 000002F3 B50D                                            mov     ch,13                                           ;row
  2192 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2193 000002FA E8BE0F0000                                      call    SetConsoleString                                ;draw label
  2194 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2195 00000302 B137                                            mov     cl,55                                           ;column
  2196 00000304 B50D                                            mov     ch,13                                           ;row
  2197 00000306 E8810C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2198                                  ;
  2199                                  ;       Display the EIP register label and value
  2200                                  ;
  2201 0000030B B133                                            mov     cl,51                                           ;column
  2202 0000030D B50E                                            mov     ch,14                                           ;row
  2203 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2204 00000314 E8A40F0000                                      call    SetConsoleString                                ;draw label
  2205 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2206 0000031C B137                                            mov     cl,55                                           ;column
  2207 0000031E B50E                                            mov     ch,14                                           ;row
  2208 00000320 E8670C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2209                                  ;
  2210                                  ;       Halt and loop until reset
  2211                                  ;
  2212 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2213 00000326 F4                                              hlt                                                     ;halt processor
  2214 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ;
  2217                                  ;       Processor Interrupt Name Strings
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2220 00000332 6279207A65726F00   
  2221 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2221 00000343 657000             
  2222 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2222 0000034F 626C6520696E746572-
  2222 00000358 7275707400         
  2223 0000035D 427265616B00            czIntBreak              db      "Break",0
  2224 00000363 496E746F00              czIntInto               db      "Into",0
  2225 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2226 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2226 00000378 74696F6E20436F6465-
  2226 00000381 00                 
  2227 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2227 0000038B 6573736F7200       
  2228 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2228 0000039A 756C7400           
  2229 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2230 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2230 000003AF 537461746520536567-
  2230 000003B8 6D656E7400         
  2231 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2231 000003C6 6E7400             
  2232 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2232 000003D2 697400             
  2233 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2233 000003DE 726F74656374696F6E-
  2233 000003E7 204661756C7400     
  2234 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2234 000003F7 6F722043616C63756C-
  2234 00000400 6174696F6E00       
  2235 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                  ;
  2238                                  ;       Processor Interrupt Handling Strings
  2239                                  ;
  2240                                  ;-----------------------------------------------------------------------------------------------------------------------
  2241 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2241 00000418 6C65642070726F6365-
  2241 00000421 73736F7220696E7465-
  2241 0000042A 727275707420686173-
  2241 00000433 206F63637572726564-
  2241 0000043C 3A00               
  2242 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2242 00000447 202300             
  2243 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2243 00000453 206174207468652074-
  2243 0000045C 696D65206F66207468-
  2243 00000465 6520696E7465727275-
  2243 0000046E 70743A00           
  2244 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2245 00000477 4543583A00              czIntECX                db      "ECX:",0
  2246 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2247 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2248 00000486 4553493A00              czIntESI                db      "ESI:",0
  2249 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2250 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2251 00000495 4553503A00              czIntESP                db      "ESP:",0
  2252 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2253 0000049F 2045533A00              czIntES                 db      " ES:",0
  2254 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2255 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2256 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2257 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2258                                  ;-----------------------------------------------------------------------------------------------------------------------
  2259                                  ;
  2260                                  ;       Routine:        DrawTextDialogBox
  2261                                  ;
  2262                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2263                                  ;
  2264                                  ;       In:             CL      upper left column (0-79)
  2265                                  ;                       CH      upper left row (0-24)
  2266                                  ;                       DL      column width, excluding border
  2267                                  ;                       DH      row height, excluding border
  2268                                  ;                       BH      color attribute
  2269                                  ;
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2272 000004B9 56                                              push    esi                                             ;
  2273 000004BA 57                                              push    edi                                             ;
  2274 000004BB 06                                              push    es                                              ;
  2275 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2276 000004BE 07                                              pop     es                                              ;... into ES
  2277                                  ;
  2278                                  ;       Compute target display offset
  2279                                  ;
  2280 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2281 000004C1 88E8                                            mov     al,ch                                           ;row
  2282 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2283 000004C5 F6E4                                            mul     ah                                              ;row offset
  2284 000004C7 00C8                                            add     al,cl                                           ;add column
  2285 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2286 000004CC 00C8                                            add     al,cl                                           ;add column
  2287 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2288 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2289                                  ;
  2290                                  ;       Display top border row
  2291                                  ;
  2292 000004D3 57                                              push    edi                                             ;save target row offset
  2293 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2294 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2295 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2296 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2297 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2298 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2299 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2300 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2301 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2302 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2303 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2304                                  ;
  2305                                  ;       Display dialog box body rows
  2306                                  ;
  2307 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2308 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2309 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2310 000004F3 57                                              push    edi                                             ;save target row offset
  2311 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2312 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2313 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2314 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2315 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2316 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2317 00000500 F366AB                                          rep     stosw                                           ;display row
  2318 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2319 00000505 66AB                                            stosw                                                   ;display character and attribute
  2320 00000507 5F                                              pop     edi                                             ;restore target row offset
  2321 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2322 0000050E 59                                              pop     ecx                                             ;remaining rows
  2323 0000050F E2E1                                            loop    .10                                             ;next row
  2324                                  ;
  2325                                  ;       Display bottom border row
  2326                                  ;
  2327 00000511 57                                              push    edi                                             ;save target row offset
  2328 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2329 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2330 00000516 66AB                                            stosw                                                   ;display character and attribute
  2331 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2332 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2333 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2334 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2335 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2336 00000523 66AB                                            stosw                                                   ;display character and attribute
  2337 00000525 5F                                              pop     edi                                             ;restore target row offset
  2338 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2339                                  ;
  2340                                  ;       Restore and return
  2341                                  ;
  2342 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2343 0000052D 5F                                              pop     edi                                             ;
  2344 0000052E 5E                                              pop     esi                                             ;
  2345 0000052F 59                                              pop     ecx                                             ;
  2346 00000530 C3                                              ret                                                     ;return
  2347                                  ;=======================================================================================================================
  2348                                  ;
  2349                                  ;       Hardware Device Interupts
  2350                                  ;
  2351                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2352                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2353                                  ;       (BX=2028h).
  2354                                  ;
  2355                                  ;=======================================================================================================================
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357                                  ;
  2358                                  ;       IRQ0    Clock Tick Interrupt
  2359                                  ;
  2360                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2361                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2362                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2363                                  ;
  2364                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2365                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2366                                  ;
  2367                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2368                                  ;       zero, the floppy disk motors are turned off.
  2369                                  ;
  2370                                  ;-----------------------------------------------------------------------------------------------------------------------
  2371                                                          menter  clocktick                                       ;clock tick interrupt
  2371                              <1> ?%1 equ ($-$$)
  2372 00000531 50                                              push    eax                                             ;save non-volatile regs
  2373 00000532 52                                              push    edx                                             ;
  2374 00000533 1E                                              push    ds                                              ;
  2375                                  ;
  2376                                  ;       Update the clock tick count and the elapsed days as needed.
  2377                                  ;
  2378 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2379 00000536 1F                                              pop     ds                                              ;... into data segment register
  2380 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2381 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2382 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2383 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2384 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2385 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2386 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2387                                  ;
  2388                                  ;       Decrement floppy disk motor timeout.
  2389                                  ;
  2390 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2391 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2392 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2393 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2394                                  ;
  2395                                  ;       Turn off the floppy disk motor if appropriate.
  2396                                  ;
  2397 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2398 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2399 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2400 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2401 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2402 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2403 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2404 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2405 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2406 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2407 00000577 EE                                              out     dx,al                                           ;turn motor off
  2408                                  ;
  2409                                  ;       Signal the end of the hardware interrupt.
  2410                                  ;
  2411 00000578 E87A0D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2412                                  ;
  2413                                  ;       Restore and return.
  2414                                  ;
  2415 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2416 0000057E 5A                                              pop     edx                                             ;
  2417 0000057F 58                                              pop     eax                                             ;
  2418 00000580 CF                                              iretd                                                   ;return
  2419                                  ;-----------------------------------------------------------------------------------------------------------------------
  2420                                  ;
  2421                                  ;       IRQ1    Keyboard Interrupt
  2422                                  ;
  2423                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2424                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2425                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2426                                  ;       ALL modified registers upon return.
  2427                                  ;
  2428                                  ;-----------------------------------------------------------------------------------------------------------------------
  2429                                                          menter  keyboard                                        ;keyboard interrrupt
  2429                              <1> ?%1 equ ($-$$)
  2430 00000581 50                                              push    eax                                             ;save non-volatile regs
  2431 00000582 53                                              push    ebx                                             ;
  2432 00000583 51                                              push    ecx                                             ;
  2433 00000584 56                                              push    esi                                             ;
  2434 00000585 1E                                              push    ds                                              ;
  2435 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2436 00000588 1F                                              pop     ds                                              ;... into data segment register
  2437 00000589 30C0                                            xor     al,al                                           ;zero
  2438 0000058B A225080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2439 00000590 A226080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2440 00000595 A227080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2441 0000059A A228080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2442 0000059F A229080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2443 000005A4 A22A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2444 000005A9 B020                                            mov     al,' '                                          ;space
  2445 000005AB A22B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2446 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2447 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2448 000005B4 200524080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2449 000005BA 8A1D22080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2450 000005C0 8A3D23080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2451 000005C6 E8E10D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2452 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2453 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2454 000005D3 A225080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2455 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2456 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2457 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2458 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2459 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2460 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2461 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2462 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2463 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2464 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2465 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2466 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2467 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2468 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2469 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2470 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2471 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2472 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2473 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2474 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2475 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2476 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2477 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2478 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2479 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2480 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2481 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2482 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2483 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2484 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2485 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2486 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2487 00000654 E8530D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2488 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2489 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2490 00000661 A226080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2491 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2492 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2493 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2494 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2495 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2496 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2497 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2498 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2499 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2500 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2501 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2502 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2503 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2504 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2505 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2506 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2507 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2508 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2509 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2510 0000069C E80B0D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2511 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2512 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2513 000006A9 A227080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2514 000006AE E8F90C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2515 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2516 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2517 000006BB A228080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2518 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2519 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2520 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2521 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2522 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2523 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2524 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2525 000006D1 E8A70C0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2526 000006D6 881D22080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2527 000006DC 883D23080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2528 000006E2 E81D090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2529 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2530 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2531 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2532 000006F1 E8B60C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2533 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2534 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2535 000006FE A226080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2536 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2537 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2538 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2539 0000070E E8990C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2540 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2541 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2542 0000071B A227080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2543 00000720 E8870C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2544 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2545 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2546 0000072D A228080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2547 00000732 E8750C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2548 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2549 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2550 0000073F A229080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2551 00000744 E8630C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2552 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2553 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2554 0000074D A22A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2555 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2556 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2557 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2558 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2559 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2560 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2561 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2562 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2563 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2564 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2565 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2566 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2567 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2568 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2569 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2570 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2571 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2572 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2573 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2574 00000787 A22B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2575 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2576 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2577 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2578 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2579 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2580 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2581 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2582 000007A4 50                                              push    eax                                             ;save codes
  2583 000007A5 E86E0A0000                                      call    PutMessage                                      ;put message to console
  2584 000007AA 58                                              pop     eax                                             ;restore codes
  2585 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2586 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2587 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2588 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2589 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2590 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2591 000007BD E8560A0000                                      call    PutMessage                                      ;put message to console
  2592 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2593 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2594 000007C6 080524080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2595 000007CC E8DB070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2596 000007D1 E8210B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2597 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2598 000007D7 5E                                              pop     esi                                             ;
  2599 000007D8 59                                              pop     ecx                                             ;
  2600 000007D9 5B                                              pop     ebx                                             ;
  2601 000007DA 58                                              pop     eax                                             ;
  2602 000007DB CF                                              iretd                                                   ;return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;       Scan-Code to ASCII Translation Tables
  2605                                  ;-----------------------------------------------------------------------------------------------------------------------
  2606 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2607 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2608 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2609 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2610 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2611 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2612 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2613 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2614 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2615 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2616 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2617 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2618 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2619 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2620 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2621 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2622 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2623 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2624 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2625 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2626 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2627 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2628 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2629 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2630 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2631 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2632 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2633 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2634 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2635 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2636 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2637 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2638                                  ;-----------------------------------------------------------------------------------------------------------------------
  2639                                  ;
  2640                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2641                                  ;
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643                                                          menter  iochannel                                       ;secondary 8259A cascade
  2643                              <1> ?%1 equ ($-$$)
  2644 000008DC 50                                              push    eax                                             ;save modified regs
  2645 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                  ;
  2648                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2649                                  ;
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                                          menter  com2                                            ;serial port 2 interrupt
  2651                              <1> ?%1 equ ($-$$)
  2652 000008DF 50                                              push    eax                                             ;save modified regs
  2653 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                  ;
  2656                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2657                                  ;
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                                          menter  com1                                            ;serial port 1 interrupt
  2659                              <1> ?%1 equ ($-$$)
  2660 000008E2 50                                              push    eax                                             ;save modified regs
  2661 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                  ;
  2664                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2665                                  ;
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2667                              <1> ?%1 equ ($-$$)
  2668 000008E5 50                                              push    eax                                             ;save modified regs
  2669 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                  ;
  2672                                  ;       IRQ6    Diskette Hardware Interrupt
  2673                                  ;
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                                          menter  diskette                                        ;floppy disk interrupt
  2675                              <1> ?%1 equ ($-$$)
  2676 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2677 000008E9 1E                                              push    ds                                              ;
  2678 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2679 000008EC 1F                                              pop     ds                                              ;... into DS register
  2680 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2681 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2682 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2683 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2684 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2685                                  ;-----------------------------------------------------------------------------------------------------------------------
  2686                                  ;
  2687                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2688                                  ;
  2689                                  ;-----------------------------------------------------------------------------------------------------------------------
  2690                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2690                              <1> ?%1 equ ($-$$)
  2691 000008FC 50                                              push    eax                                             ;save modified regs
  2692 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2693                                  ;-----------------------------------------------------------------------------------------------------------------------
  2694                                  ;
  2695                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2696                                  ;
  2697                                  ;-----------------------------------------------------------------------------------------------------------------------
  2698                                                          menter  rtclock                                         ;real-time clock interrupt
  2698                              <1> ?%1 equ ($-$$)
  2699 000008FF 50                                              push    eax                                             ;save modified regs
  2700 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  ;
  2703                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2704                                  ;
  2705                                  ;-----------------------------------------------------------------------------------------------------------------------
  2706                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2706                              <1> ?%1 equ ($-$$)
  2707 00000902 50                                              push    eax                                             ;save modified regs
  2708 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2709                                  ;-----------------------------------------------------------------------------------------------------------------------
  2710                                  ;
  2711                                  ;       IRQ10   Reserved Hardware Interrupt
  2712                                  ;
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                                          menter  irq10                                           ;reserved
  2714                              <1> ?%1 equ ($-$$)
  2715 00000905 50                                              push    eax                                             ;save modified regs
  2716 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  ;
  2719                                  ;       IRQ11   Reserved Hardware Interrupt
  2720                                  ;
  2721                                  ;-----------------------------------------------------------------------------------------------------------------------
  2722                                                          menter  irq11                                           ;reserved
  2722                              <1> ?%1 equ ($-$$)
  2723 00000908 50                                              push    eax                                             ;save modified regs
  2724 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                  ;
  2727                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2728                                  ;
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2730                              <1> ?%1 equ ($-$$)
  2731 0000090B 50                                              push    eax                                             ;save modified regs
  2732 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                  ;
  2735                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2736                                  ;
  2737                                  ;-----------------------------------------------------------------------------------------------------------------------
  2738                                                          menter  coprocessor                                     ;coprocessor interrupt
  2738                              <1> ?%1 equ ($-$$)
  2739 0000090E 50                                              push    eax                                             ;save modified regs
  2740 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2741                                  ;-----------------------------------------------------------------------------------------------------------------------
  2742                                  ;
  2743                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2744                                  ;
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2746                              <1> ?%1 equ ($-$$)
  2747 00000911 50                                              push    eax                                             ;save modified regs
  2748 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2749                                  ;-----------------------------------------------------------------------------------------------------------------------
  2750                                  ;
  2751                                  ;       IRQ15   Reserved Hardware Interrupt
  2752                                  ;
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                                          menter  irq15                                           ;reserved
  2754                              <1> ?%1 equ ($-$$)
  2755 00000914 50                                              push    eax                                             ;save modified regs
  2756 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2757                                  ;-----------------------------------------------------------------------------------------------------------------------
  2758                                  ;
  2759                                  ;       Exit from hardware interrupt
  2760                                  ;
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762 00000917 E8E1090000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2763 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2764 0000091E E8D4090000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2765 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2766 00000924 CF                                              iretd                                                   ;return from interrupt
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                  ;
  2769                                  ;       INT 30h Operating System Software Service Interrupt
  2770                                  ;
  2771                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2772                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2773                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2774                                  ;       the entry address of the specific function from a table.
  2775                                  ;
  2776                                  ;-----------------------------------------------------------------------------------------------------------------------
  2777                                                          menter  svc
  2777                              <1> ?%1 equ ($-$$)
  2778 00000925 3C1A                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2779 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2780 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2781 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2782 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2783 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2784                                  ;-----------------------------------------------------------------------------------------------------------------------
  2785                                  ;
  2786                                  ;       Service Request Table
  2787                                  ;
  2788                                  ;
  2789                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2792                              <1> tsvc :
  2792                              <1> e%1 equ ($-tsvc)/4
  2792 00000937 [C40B0000]          <1>  dd %1
  2793                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2793                              <1> e%1 equ ($-tsvc)/4
  2793 0000093B [40120000]          <1>  dd %1
  2794                                                          tsvce   CompareMemory                                   ;compare memory
  2794                              <1> e%1 equ ($-tsvc)/4
  2794 0000093F [1F0E0000]          <1>  dd %1
  2795                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2795                              <1> e%1 equ ($-tsvc)/4
  2795 00000943 [CE100000]          <1>  dd %1
  2796                                                          tsvce   FreeMemory                                      ;free memory block
  2796                              <1> e%1 equ ($-tsvc)/4
  2796 00000947 [E20C0000]          <1>  dd %1
  2797                                                          tsvce   GetConsoleString                                ;get string input
  2797                              <1> e%1 equ ($-tsvc)/4
  2797 0000094B [800E0000]          <1>  dd %1
  2798                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2798                              <1> e%1 equ ($-tsvc)/4
  2798 0000094F [01110000]          <1>  dd %1
  2799                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2799                              <1> e%1 equ ($-tsvc)/4
  2799 00000953 [AD090000]          <1>  dd %1
  2800                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2800                              <1> e%1 equ ($-tsvc)/4
  2800 00000957 [CD120000]          <1>  dd %1
  2801                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2801                              <1> e%1 equ ($-tsvc)/4
  2801 0000095B [9E100000]          <1>  dd %1
  2802                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2802                              <1> e%1 equ ($-tsvc)/4
  2802 0000095F [C8090000]          <1>  dd %1
  2803                                                          tsvce   PutDayString                                    ;put DD string
  2803                              <1> e%1 equ ($-tsvc)/4
  2803 00000963 [090A0000]          <1>  dd %1
  2804                                                          tsvce   PutHourString                                   ;put hh string
  2804                              <1> e%1 equ ($-tsvc)/4
  2804 00000967 [170A0000]          <1>  dd %1
  2805                                                          tsvce   PutMinuteString                                 ;put mm string
  2805                              <1> e%1 equ ($-tsvc)/4
  2805 0000096B [250A0000]          <1>  dd %1
  2806                                                          tsvce   PutMonthString                                  ;put MM string
  2806                              <1> e%1 equ ($-tsvc)/4
  2806 0000096F [330A0000]          <1>  dd %1
  2807                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2807                              <1> e%1 equ ($-tsvc)/4
  2807 00000973 [410A0000]          <1>  dd %1
  2808                                                          tsvce   PutSecondString                                 ;put ss string
  2808                              <1> e%1 equ ($-tsvc)/4
  2808 00000977 [650A0000]          <1>  dd %1
  2809                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2809                              <1> e%1 equ ($-tsvc)/4
  2809 0000097B [720A0000]          <1>  dd %1
  2810                                                          tsvce   PutWeekdayString                                ;put weekday string
  2810                              <1> e%1 equ ($-tsvc)/4
  2810 0000097F [A70A0000]          <1>  dd %1
  2811                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2811                              <1> e%1 equ ($-tsvc)/4
  2811 00000983 [B50A0000]          <1>  dd %1
  2812                                                          tsvce   PutYearString                                   ;put YYYY string
  2812                              <1> e%1 equ ($-tsvc)/4
  2812 00000987 [D80A0000]          <1>  dd %1
  2813                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2813                              <1> e%1 equ ($-tsvc)/4
  2813 0000098B [03130000]          <1>  dd %1
  2814                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2814                              <1> e%1 equ ($-tsvc)/4
  2814 0000098F [6E130000]          <1>  dd %1
  2815                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2815                              <1> e%1 equ ($-tsvc)/4
  2815 00000993 [1F110000]          <1>  dd %1
  2816                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2816                              <1> e%1 equ ($-tsvc)/4
  2816 00000997 [C3110000]          <1>  dd %1
  2817                                                          tsvce   UpperCaseString                                 ;upper-case string
  2817                              <1> e%1 equ ($-tsvc)/4
  2817 0000099B [3C0E0000]          <1>  dd %1
  2818                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  ;
  2821                                  ;       Service Request Macros
  2822                                  ;
  2823                                  ;       These macros provide positional parameterization of service request calls.
  2824                                  ;
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                  %macro                  allocateMemory 1
  2827                                                          mov     ecx,%1                                          ;bytes to allocate
  2828                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2829                                                          int     _svc                                            ;invoke OS service
  2830                                  %endmacro
  2831                                  %macro                  clearConsoleScreen 0
  2832                                                          mov     al,eClearConsoleScreen                          ;function code
  2833                                                          int     _svc                                            ;invoke OS service
  2834                                  %endmacro
  2835                                  %macro                  compareMemory 0
  2836                                                          mov     al,eCompareMemory                               ;function code
  2837                                                          int     _svc                                            ;invoke OS service
  2838                                  %endmacro
  2839                                  %macro                  decimalToUnsigned 0
  2840                                                          mov     al,eDecimalToUnsigned                           ;function code
  2841                                                          int     _svc                                            ;invoke OS servie
  2842                                  %endmacro
  2843                                  %macro                  freeMemory 1
  2844                                                          mov     edx,%1                                          ;address of memory block
  2845                                                          mov     al,eFreeMemory                                  ;function code
  2846                                                          int     _svc                                            ;invoke OS service
  2847                                  %endmacro
  2848                                  %macro                  getConsoleString 4
  2849                                                          mov     edx,%1                                          ;buffer address
  2850                                                          mov     ecx,%2                                          ;max characters
  2851                                                          mov     bh,%3                                           ;echo indicator
  2852                                                          mov     bl,%4                                           ;terminator
  2853                                                          mov     al,eGetConsoleString                            ;function code
  2854                                                          int     _svc                                            ;invoke OS service
  2855                                  %endmacro
  2856                                  %macro                  hexadecimalToUnsigned 0
  2857                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2858                                                          int     _svc                                            ;invoke OS service
  2859                                  %endmacro
  2860                                  %macro                  isLeapYear 1
  2861                                                          mov     ebx,%1                                          ;DATETIME addr
  2862                                                          mov     al,eIsLeapYear                                  ;function code
  2863                                                          int     _svc                                            ;invoke OS service
  2864                                  %endmacro
  2865                                  %macro                  placeCursor 0
  2866                                                          mov     al,ePlaceCursor                                 ;function code
  2867                                                          int     _svc                                            ;invoke OS service
  2868                                  %endmacro
  2869                                  %macro                  putConsoleString 1
  2870                                                          mov     edx,%1                                          ;string address
  2871                                                          mov     al,ePutConsoleString                            ;function code
  2872                                                          int     _svc                                            ;invoke OS service
  2873                                  %endmacro
  2874                                  %macro                  putDateString 0
  2875                                                          mov     al,ePutDateString                               ;function code
  2876                                                          int     _svc                                            ;invoke OS service
  2877                                  %endmacro
  2878                                  %macro                  putDateString 2
  2879                                                          mov     ebx,%1                                          ;DATETIME addr
  2880                                                          mov     edx,%2                                          ;output buffer addr
  2881                                                          mov     al,ePutDateString                               ;function code
  2882                                                          int     _svc                                            ;invoke OS service
  2883                                  %endmacro
  2884                                  %macro                  putDayString 2
  2885                                                          mov     ebx,%1                                          ;DATETIME addr
  2886                                                          mov     edx,%2                                          ;output buffer addr
  2887                                                          mov     al,ePutDayString                                ;function code
  2888                                                          int     _svc                                            ;invoke OS service
  2889                                  %endmacro
  2890                                  %macro                  putHourString 2
  2891                                                          mov     ebx,%1                                          ;DATETIME addr
  2892                                                          mov     edx,%2                                          ;output buffer addr
  2893                                                          mov     al,ePutHourString                               ;function code
  2894                                                          int     _svc                                            ;invoke OS service
  2895                                  %endmacro
  2896                                  %macro                  putMinuteString 2
  2897                                                          mov     ebx,%1                                          ;DATETIME addr
  2898                                                          mov     edx,%2                                          ;output buffer addr
  2899                                                          mov     al,ePutMinuteString                             ;function code
  2900                                                          int     _svc                                            ;invoke OS service
  2901                                  %endmacro
  2902                                  %macro                  putMonthString 2
  2903                                                          mov     ebx,%1                                          ;DATETIME addr
  2904                                                          mov     edx,%2                                          ;output buffer addr
  2905                                                          mov     al,ePutMonthString                              ;function code
  2906                                                          int     _svc                                            ;invoke OS service
  2907                                  %endmacro
  2908                                  %macro                  putMonthNameString 2
  2909                                                          mov     ebx,%1                                          ;DATETIME addr
  2910                                                          mov     edx,%2                                          ;output buffer addr
  2911                                                          mov     al,ePutMonthNameString                          ;function code
  2912                                                          int     _svc                                            ;invoke OS service
  2913                                  %endmacro
  2914                                  %macro                  putSecondString 2
  2915                                                          mov     ebx,%1                                          ;DATETIME addr
  2916                                                          mov     edx,%2                                          ;output buffer addr
  2917                                                          mov     al,ePutSecondString                             ;function code
  2918                                                          int     _svc                                            ;invoke OS service
  2919                                  %endmacro
  2920                                  %macro                  putTimeString 0
  2921                                                          mov     al,ePutTimeString                               ;function code
  2922                                                          int     _svc                                            ;invoke OS service
  2923                                  %endmacro
  2924                                  %macro                  putTimeString 2
  2925                                                          mov     ebx,%1                                          ;DATETIME addr
  2926                                                          mov     edx,%2                                          ;output buffer addr
  2927                                                          mov     al,ePutTimeString                               ;function code
  2928                                                          int     _svc                                            ;invoke OS service
  2929                                  %endmacro
  2930                                  %macro                  putWeekdayString 2
  2931                                                          mov     ebx,%1                                          ;DATETIME addr
  2932                                                          mov     edx,%2                                          ;output buffer addr
  2933                                                          mov     al,ePutWeekdayString                            ;function code
  2934                                                          int     _svc                                            ;invoke OS service
  2935                                  %endmacro
  2936                                  %macro                  putWeekdayNameString 2
  2937                                                          mov     ebx,%1                                          ;DATETIME addr
  2938                                                          mov     edx,%2                                          ;output buffer addr
  2939                                                          mov     al,ePutWeekdayNameString                        ;function code
  2940                                                          int     _svc                                            ;invoke OS service
  2941                                  %endmacro
  2942                                  %macro                  putYearString 2
  2943                                                          mov     ebx,%1                                          ;DATETIME addr
  2944                                                          mov     edx,%2                                          ;output buffer addr
  2945                                                          mov     al,ePutYearString                               ;function code
  2946                                                          int     _svc                                            ;invoke OS service
  2947                                  %endmacro
  2948                                  %macro                  readRealTimeClock 0
  2949                                                          mov     al,eReadRealTimeClock                           ;function code
  2950                                                          int     _svc                                            ;invoke OS service
  2951                                  %endmacro
  2952                                  %macro                  readRealTimeClock 1
  2953                                                          mov     ebx,%1                                          ;DATETIME addr
  2954                                                          mov     al,eReadRealTimeClock                           ;function code
  2955                                                          int     _svc                                            ;invoke OS service
  2956                                  %endmacro
  2957                                  %macro                  resetSystem 0
  2958                                                          mov     al,eResetSystem                                 ;function code
  2959                                                          int     _svc                                            ;invoke OS service
  2960                                  %endmacro
  2961                                  %macro                  unsignedToDecimalString 0
  2962                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2963                                                          int     _svc                                            ;invoke OS service
  2964                                  %endmacro
  2965                                  %macro                  unsignedToHexadecimal 0
  2966                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  upperCaseString 0
  2970                                                          mov     al,eUpperCaseString                             ;function code
  2971                                                          int     _svc                                            ;invoke OS service
  2972                                  %endmacro
  2973                                  ;=======================================================================================================================
  2974                                  ;
  2975                                  ;       Kernel Function Library
  2976                                  ;
  2977                                  ;=======================================================================================================================
  2978                                  ;=======================================================================================================================
  2979                                  ;
  2980                                  ;       Date and Time Helper Routines
  2981                                  ;
  2982                                  ;       GetYear
  2983                                  ;       IsLeapYear
  2984                                  ;       PutDateString
  2985                                  ;       PutDayString
  2986                                  ;       PutHourString
  2987                                  ;       PutMinuteString
  2988                                  ;       PutMonthString
  2989                                  ;       PutMonthNameString
  2990                                  ;       PutSecondString
  2991                                  ;       PutTimeString
  2992                                  ;       PutWeekdayString
  2993                                  ;       PutWeekdayNameString
  2994                                  ;       PutYearString
  2995                                  ;
  2996                                  ;=======================================================================================================================
  2997                                  ;-----------------------------------------------------------------------------------------------------------------------
  2998                                  ;
  2999                                  ;       Routine:        GetYear
  3000                                  ;
  3001                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3002                                  ;
  3003                                  ;       In:             DS:EBX  DATETIME address
  3004                                  ;
  3005                                  ;       Out:            ECX     year
  3006                                  ;
  3007                                  ;-----------------------------------------------------------------------------------------------------------------------
  3008 0000099F 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3009 000009A3 6BC964                                          imul    ecx,100                                         ;century * 100
  3010 000009A6 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3011 000009AA 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3012 000009AC C3                                              ret                                                     ;return
  3013                                  ;-----------------------------------------------------------------------------------------------------------------------
  3014                                  ;
  3015                                  ;       Routine:        IsLeapYear
  3016                                  ;
  3017                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3018                                  ;
  3019                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3020                                  ;
  3021                                  ;       Out:            ECX     0 = not a leap year
  3022                                  ;                               1 = leap year
  3023                                  ;
  3024                                  ;-----------------------------------------------------------------------------------------------------------------------
  3025 000009AD E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3026 000009B2 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3027 000009B4 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3028 000009B6 A803                                            test    al,00000011b                                    ;multiple of four?
  3029 000009B8 750D                                            jnz     .no                                             ;no, branch
  3030 000009BA B264                                            mov     dl,100                                          ;divisor
  3031 000009BC F6F2                                            div     dl                                              ;divide by 100
  3032 000009BE 84E4                                            test    ah,ah                                           ;multiple of 100?
  3033 000009C0 7504                                            jnz     .yes                                            ;yes, branch
  3034 000009C2 A803                                            test    al,00000011b                                    ;multiple of 400?
  3035 000009C4 7501                                            jnz     .no                                             ;no, branch
  3036 000009C6 41                      .yes                    inc     ecx                                             ;indicate leap
  3037 000009C7 C3                      .no                     ret                                                     ;return
  3038                                  ;-----------------------------------------------------------------------------------------------------------------------
  3039                                  ;
  3040                                  ;       Routine:        PutDateString
  3041                                  ;
  3042                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3043                                  ;                       structure at ds:ebx.
  3044                                  ;
  3045                                  ;       In:             DS:EBX  DATETIME address
  3046                                  ;                       DS:EDX  output buffer address
  3047                                  ;
  3048                                  ;-----------------------------------------------------------------------------------------------------------------------
  3049 000009C8 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3050 000009C9 57                                              push    edi                                             ;
  3051 000009CA 06                                              push    es                                              ;
  3052 000009CB 1E                                              push    ds                                              ;store data selector ...
  3053 000009CC 07                                              pop     es                                              ;... in extra segment reg
  3054 000009CD 89D7                                            mov     edi,edx                                         ;output buffer address
  3055 000009CF B10A                                            mov     cl,10                                           ;divisor
  3056 000009D1 BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3057 000009D6 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3058 000009DA F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3059 000009DC 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3060 000009DE FC                                              cld                                                     ;forward strings
  3061 000009DF AB                                              stosd                                                   ;store "mm/"nul
  3062 000009E0 4F                                              dec     edi                                             ;address of terminator
  3063 000009E1 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3064 000009E5 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3065 000009E7 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3066 000009E9 AB                                              stosd                                                   ;store "dd/"nul
  3067 000009EA 4F                                              dec     edi                                             ;address of terminator
  3068 000009EB 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3069 000009EF F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3070 000009F1 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3071 000009F3 AB                                              stosd                                                   ;store "cc/"null
  3072 000009F4 4F                                              dec     edi                                             ;address of terminator
  3073 000009F5 4F                                              dec     edi                                             ;address of delimiter
  3074 000009F6 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3075 000009FA F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3076 000009FC 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3077 000009FE AA                                              stosb                                                   ;store quotient
  3078 000009FF 88E0                                            mov     al,ah                                           ;remainder
  3079 00000A01 AA                                              stosb                                                   ;store remainder
  3080 00000A02 30C0                                            xor     al,al                                           ;null terminator
  3081 00000A04 AA                                              stosb                                                   ;store terminator
  3082 00000A05 07                                              pop     es                                              ;restore non-volatile regs
  3083 00000A06 5F                                              pop     edi                                             ;
  3084 00000A07 59                                              pop     ecx                                             ;
  3085 00000A08 C3                                              ret                                                     ;return
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087                                  ;
  3088                                  ;       Routine:        PutDayString
  3089                                  ;
  3090                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3091                                  ;                       structure at ds:ebx.
  3092                                  ;
  3093                                  ;       In:             DS:EBX  DATETIME address
  3094                                  ;                       DS:EDX  output buffer address
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097 00000A09 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3098 00000A0A 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3099 00000A0E B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3100 00000A10 E80A070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3101 00000A15 59                                              pop     ecx                                             ;
  3102 00000A16 C3                                              ret                                                     ;return
  3103                                  ;-----------------------------------------------------------------------------------------------------------------------
  3104                                  ;
  3105                                  ;       Routine:        PutHourString
  3106                                  ;
  3107                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3108                                  ;                       structure at ds:ebx.
  3109                                  ;
  3110                                  ;       In:             DS:EBX  DATETIME address
  3111                                  ;                       DS:EDX  output buffer address
  3112                                  ;
  3113                                  ;-----------------------------------------------------------------------------------------------------------------------
  3114 00000A17 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3115 00000A18 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3116 00000A1C B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3117 00000A1E E8FC060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3118 00000A23 59                                              pop     ecx                                             ;
  3119 00000A24 C3                                              ret                                                     ;return
  3120                                  ;-----------------------------------------------------------------------------------------------------------------------
  3121                                  ;
  3122                                  ;       Routine:        PutMinuteString
  3123                                  ;
  3124                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3125                                  ;                       structure at ds:ebx.
  3126                                  ;
  3127                                  ;       In:             DS:EBX  DATETIME address
  3128                                  ;                       DS:EDX  output buffer address
  3129                                  ;
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131 00000A25 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3132 00000A26 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3133 00000A2A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3134 00000A2C E8EE060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3135 00000A31 59                                              pop     ecx                                             ;
  3136 00000A32 C3                                              ret                                                     ;return
  3137                                  ;-----------------------------------------------------------------------------------------------------------------------
  3138                                  ;
  3139                                  ;       Routine:        PutMonthString
  3140                                  ;
  3141                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3142                                  ;                       structure at ds:ebx.
  3143                                  ;
  3144                                  ;       In:             DS:EBX  DATETIME address
  3145                                  ;                       DS:EDX  output buffer address
  3146                                  ;
  3147                                  ;-----------------------------------------------------------------------------------------------------------------------
  3148 00000A33 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3149 00000A34 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3150 00000A38 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3151 00000A3A E8E0060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3152 00000A3F 59                                              pop     ecx                                             ;
  3153 00000A40 C3                                              ret                                                     ;return
  3154                                  ;-----------------------------------------------------------------------------------------------------------------------
  3155                                  ;
  3156                                  ;       Routine:        PutMonthNameString
  3157                                  ;
  3158                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3159                                  ;                       structure at ds:ebx.
  3160                                  ;
  3161                                  ;       In:             DS:EBX  DATETIME address
  3162                                  ;                       DS:EDX  output buffer address
  3163                                  ;
  3164                                  ;-----------------------------------------------------------------------------------------------------------------------
  3165 00000A41 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3166 00000A42 57                                              push    edi                                             ;
  3167 00000A43 1E                                              push    ds                                              ;
  3168 00000A44 06                                              push    es                                              ;
  3169 00000A45 1E                                              push    ds                                              ;load data selector ...
  3170 00000A46 07                                              pop     es                                              ;... into extra segment
  3171 00000A47 89D7                                            mov     edi,edx                                         ;output buffer address
  3172 00000A49 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3173 00000A4D 48                                              dec     eax                                             ;month (0-11)
  3174 00000A4E C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3175 00000A51 0E                                              push    cs                                              ;load code selector ...
  3176 00000A52 1F                                              pop     ds                                              ;... into data segment
  3177 00000A53 8BB0[940B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3178 00000A59 FC                                              cld                                                     ;forward strings
  3179 00000A5A AC                      .10                     lodsb                                                   ;name character
  3180 00000A5B AA                                              stosb                                                   ;store in output buffer
  3181 00000A5C 84C0                                            test    al,al                                           ;end of string?
  3182 00000A5E 75FA                                            jnz     .10                                             ;no, continue
  3183 00000A60 07                                              pop     es                                              ;restore non-volatile regs
  3184 00000A61 1F                                              pop     ds                                              ;
  3185 00000A62 5F                                              pop     edi                                             ;
  3186 00000A63 5E                                              pop     esi                                             ;
  3187 00000A64 C3                                              ret                                                     ;return
  3188                                  ;-----------------------------------------------------------------------------------------------------------------------
  3189                                  ;
  3190                                  ;       Routine:        PutSecondString
  3191                                  ;
  3192                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3193                                  ;                       structure at ds:ebx.
  3194                                  ;
  3195                                  ;       In:             DS:EBX  DATETIME address
  3196                                  ;                       DS:EDX  output buffer address
  3197                                  ;
  3198                                  ;-----------------------------------------------------------------------------------------------------------------------
  3199 00000A65 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3200 00000A66 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3201 00000A69 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3202 00000A6B E8AF060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3203 00000A70 59                                              pop     ecx                                             ;
  3204 00000A71 C3                                              ret                                                     ;return
  3205                                  ;-----------------------------------------------------------------------------------------------------------------------
  3206                                  ;
  3207                                  ;       Routine:        PutTimeString
  3208                                  ;
  3209                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3210                                  ;                       structure at ds:ebx.
  3211                                  ;
  3212                                  ;       In:             DS:EBX  DATETIME address
  3213                                  ;                       DS:EDX  output buffer address
  3214                                  ;
  3215                                  ;-----------------------------------------------------------------------------------------------------------------------
  3216 00000A72 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3217 00000A73 57                                              push    edi                                             ;
  3218 00000A74 06                                              push    es                                              ;
  3219 00000A75 1E                                              push    ds                                              ;store data selector ...
  3220 00000A76 07                                              pop     es                                              ;... in extra segment reg
  3221 00000A77 89D7                                            mov     edi,edx                                         ;output buffer address
  3222 00000A79 B10A                                            mov     cl,10                                           ;divisor
  3223 00000A7B BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3224 00000A80 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3225 00000A84 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3226 00000A86 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3227 00000A88 FC                                              cld                                                     ;forward strings
  3228 00000A89 AB                                              stosd                                                   ;store "mm/"nul
  3229 00000A8A 4F                                              dec     edi                                             ;address of terminator
  3230 00000A8B 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3231 00000A8F F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3232 00000A91 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3233 00000A93 AB                                              stosd                                                   ;store "dd/"nul
  3234 00000A94 4F                                              dec     edi                                             ;address of terminator
  3235 00000A95 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3236 00000A98 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3237 00000A9A 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3238 00000A9C AA                                              stosb                                                   ;store quotient
  3239 00000A9D 88E0                                            mov     al,ah                                           ;remainder
  3240 00000A9F AA                                              stosb                                                   ;store remainder
  3241 00000AA0 30C0                                            xor     al,al                                           ;null terminator
  3242 00000AA2 AA                                              stosb                                                   ;store terminator
  3243 00000AA3 07                                              pop     es                                              ;restore non-volatile regs
  3244 00000AA4 5F                                              pop     edi                                             ;
  3245 00000AA5 59                                              pop     ecx                                             ;
  3246 00000AA6 C3                                              ret                                                     ;return
  3247                                  ;-----------------------------------------------------------------------------------------------------------------------
  3248                                  ;
  3249                                  ;       Routine:        PutWeekdayString
  3250                                  ;
  3251                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3252                                  ;                       structure at ds:ebx.
  3253                                  ;
  3254                                  ;       In:             DS:EBX  DATETIME address
  3255                                  ;                       DS:EDX  output buffer address
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258 00000AA7 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3259 00000AA8 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3260 00000AAC B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3261 00000AAE E86C060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3262 00000AB3 59                                              pop     ecx                                             ;
  3263 00000AB4 C3                                              ret                                                     ;return
  3264                                  ;-----------------------------------------------------------------------------------------------------------------------
  3265                                  ;
  3266                                  ;       Routine:        PutWeekdayNameString
  3267                                  ;
  3268                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3269                                  ;                       structure at ds:ebx.
  3270                                  ;
  3271                                  ;       In:             DS:EBX  DATETIME address
  3272                                  ;                       DS:EDX  output buffer address
  3273                                  ;
  3274                                  ;-----------------------------------------------------------------------------------------------------------------------
  3275 00000AB5 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3276 00000AB6 57                                              push    edi                                             ;
  3277 00000AB7 1E                                              push    ds                                              ;
  3278 00000AB8 06                                              push    es                                              ;
  3279 00000AB9 1E                                              push    ds                                              ;load data selector ...
  3280 00000ABA 07                                              pop     es                                              ;... into extra segment
  3281 00000ABB 89D7                                            mov     edi,edx                                         ;output buffer address
  3282 00000ABD 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3283 00000AC1 C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3284 00000AC4 0E                                              push    cs                                              ;load code selector ...
  3285 00000AC5 1F                                              pop     ds                                              ;... into data segment
  3286 00000AC6 8BB0[780B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3287 00000ACC FC                                              cld                                                     ;forward strings
  3288 00000ACD AC                      .10                     lodsb                                                   ;name character
  3289 00000ACE AA                                              stosb                                                   ;store in output buffer
  3290 00000ACF 84C0                                            test    al,al                                           ;end of string?
  3291 00000AD1 75FA                                            jnz     .10                                             ;no, continue
  3292 00000AD3 07                                              pop     es                                              ;restore non-volatile regs
  3293 00000AD4 1F                                              pop     ds                                              ;
  3294 00000AD5 5F                                              pop     edi                                             ;
  3295 00000AD6 5E                                              pop     esi                                             ;
  3296 00000AD7 C3                                              ret                                                     ;return
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298                                  ;
  3299                                  ;       Routine:        PutYearString
  3300                                  ;
  3301                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3302                                  ;                       structure at ds:ebx.
  3303                                  ;
  3304                                  ;       In:             DS:EBX  DATETIME address
  3305                                  ;                       DS:EDX  output buffer address
  3306                                  ;
  3307                                  ;-----------------------------------------------------------------------------------------------------------------------
  3308 00000AD8 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3309 00000AD9 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3310 00000ADE B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3311 00000AE0 E83A060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3312 00000AE5 59                                              pop     ecx                                             ;restore non-volatile regs
  3313 00000AE6 C3                                              ret                                                     ;return
  3314                                  ;-----------------------------------------------------------------------------------------------------------------------
  3315                                  ;
  3316                                  ;       Day Names
  3317                                  ;
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319 00000AE7 53756E64617900          czSunday                db      "Sunday",0
  3320 00000AEE 4D6F6E64617900          czMonday                db      "Monday",0
  3321 00000AF5 5475657364617900        czTuesday               db      "Tuesday",0
  3322 00000AFD 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3322 00000B06 00                 
  3323 00000B07 546875727364617900      czThursday              db      "Thursday",0
  3324 00000B10 46726964617900          czFriday                db      "Friday",0
  3325 00000B17 536174757264617900      czSaturday              db      "Saturday",0
  3326                                  ;-----------------------------------------------------------------------------------------------------------------------
  3327                                  ;
  3328                                  ;       Month Names
  3329                                  ;
  3330                                  ;-----------------------------------------------------------------------------------------------------------------------
  3331 00000B20 4A616E7561727900        czJanuary               db      "January",0
  3332 00000B28 466562727561727900      czFebruary              db      "February",0
  3333 00000B31 4D6172636800            czMarch                 db      "March",0
  3334 00000B37 417072696C00            czApril                 db      "April",0
  3335 00000B3D 4D617900                czMay                   db      "May",0
  3336 00000B41 4A756E6500              czJune                  db      "June",0
  3337 00000B46 4A756C7900              czJuly                  db      "July",0
  3338 00000B4B 41756775737400          czAugust                db      "August",0
  3339 00000B52 53657074656D626572-     czSeptember             db      "September",0
  3339 00000B5B 00                 
  3340 00000B5C 4F63746F62657200        czOctober               db      "October",0
  3341 00000B64 4E6F76656D62657200      czNovember              db      "November",0
  3342 00000B6D 446563656D62657200      czDecember              db      "December",0
  3343                                  ;-----------------------------------------------------------------------------------------------------------------------
  3344                                  ;
  3345                                  ;       Day Names Lookup Table
  3346                                  ;
  3347                                  ;-----------------------------------------------------------------------------------------------------------------------
  3348 00000B76 90<rept>                                        align   4
  3349                                  tDayNames               equ     $
  3350 00000B78 [E70A0000]                                      dd      czSunday
  3351 00000B7C [EE0A0000]                                      dd      czMonday
  3352 00000B80 [F50A0000]                                      dd      czTuesday
  3353 00000B84 [FD0A0000]                                      dd      czWednesday
  3354 00000B88 [070B0000]                                      dd      czThursday
  3355 00000B8C [100B0000]                                      dd      czFriday
  3356 00000B90 [170B0000]                                      dd      czSaturday
  3357                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3358                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3359                                  ;-----------------------------------------------------------------------------------------------------------------------
  3360                                  ;
  3361                                  ;       Month Names Lookup Table
  3362                                  ;
  3363                                  ;-----------------------------------------------------------------------------------------------------------------------
  3364                                                          align   4
  3365                                  tMonthNames             equ     $
  3366 00000B94 [200B0000]                                      dd      czJanuary
  3367 00000B98 [280B0000]                                      dd      czFebruary
  3368 00000B9C [310B0000]                                      dd      czMarch
  3369 00000BA0 [370B0000]                                      dd      czApril
  3370 00000BA4 [3D0B0000]                                      dd      czMay
  3371 00000BA8 [410B0000]                                      dd      czJune
  3372 00000BAC [460B0000]                                      dd      czJuly
  3373 00000BB0 [4B0B0000]                                      dd      czAugust
  3374 00000BB4 [520B0000]                                      dd      czSeptember
  3375 00000BB8 [5C0B0000]                                      dd      czOctober
  3376 00000BBC [640B0000]                                      dd      czNovember
  3377 00000BC0 [6D0B0000]                                      dd      czDecember
  3378                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3379                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3380                                  ;=======================================================================================================================
  3381                                  ;
  3382                                  ;       Memory Helper Routines
  3383                                  ;
  3384                                  ;       AllocateMemory
  3385                                  ;       FreeMemory
  3386                                  ;
  3387                                  ;=======================================================================================================================
  3388                                  ;-----------------------------------------------------------------------------------------------------------------------
  3389                                  ;
  3390                                  ;       Routine:        AllocateMemory
  3391                                  ;
  3392                                  ;       Description:    This routine allocates a memory block for the given task.
  3393                                  ;
  3394                                  ;       In:             ECX     bytes of memory to allocate
  3395                                  ;
  3396                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3397                                  ;                               0       unable to allocate memory
  3398                                  ;
  3399                                  ;-----------------------------------------------------------------------------------------------------------------------
  3400 00000BC4 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3401 00000BC5 51                                              push    ecx                                             ;
  3402 00000BC6 56                                              push    esi                                             ;
  3403 00000BC7 1E                                              push    ds                                              ;
  3404                                  ;
  3405                                  ;       Address kernel memory structures
  3406                                  ;
  3407 00000BC8 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3408 00000BCA 1F                                              pop     ds                                              ;... into data segment reg
  3409 00000BCB BE08080000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3410                                  ;
  3411                                  ;       Set requested size to minimum block size if requested size is too small.
  3412                                  ;
  3413 00000BD0 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3414 00000BD6 7305                                            jae     .10                                             ;no, branch
  3415 00000BD8 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3416 00000BDD 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3417                                  ;
  3418                                  ;       Find the first free memory block large enough to satisfy the request.
  3419                                  ;
  3420 00000BE0 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3421 00000BE3 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3422 00000BE5 0F84F2000000                                    jz      .220                                            ;yes, branch
  3423 00000BEB 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3424 00000BEE 7605                                            jbe     .30                                             ;yes, branch
  3425 00000BF0 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3426 00000BF3 EBEE                                            jmp     .20                                             ;continue
  3427                                  ;-----------------------------------------------------------------------------------------------------------------------
  3428                                  ;
  3429                                  ;       Address the previous and next free memory blocks.
  3430                                  ;
  3431 00000BF5 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3432 00000BF8 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3433                                  ;
  3434                                  ;       Remove the free memory block from the forward free memory block chain.
  3435                                  ;
  3436 00000BFB 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3437 00000BFD 7405                                            jz      .40                                             ;no, branch
  3438 00000BFF 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3439 00000C02 EB03                                            jmp     .50                                             ;continue
  3440 00000C04 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3441                                  ;
  3442                                  ;       Remove the free memory block from the reverse free memory block chain.
  3443                                  ;
  3444 00000C07 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3445 00000C09 7405                                            jz      .60                                             ;no, branch
  3446 00000C0B 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3447 00000C0E EB03                                            jmp     .70                                             ;continue
  3448 00000C10 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450                                  ;
  3451                                  ;       Determine if the free memory block can be split.
  3452                                  ;
  3453 00000C13 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3454 00000C16 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3455 00000C18 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3456 00000C1E 7263                                            jb      .150                                            ;no, branch
  3457                                  ;
  3458                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3459                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3460                                  ;       of the requested memory size.
  3461                                  ;
  3462 00000C20 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3463 00000C23 89C2                                            mov     edx,eax                                         ;memory block address
  3464 00000C25 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3465 00000C27 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3466 00000C2A 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3467                                  ;
  3468                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3469                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3470                                  ;
  3471 00000C2D E305                                            jecxz   .80                                             ;no next contig, branch
  3472 00000C2F 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3473 00000C32 EB03                                            jmp     .90                                             ;continue
  3474 00000C34 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3475                                  ;
  3476                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3477                                  ;
  3478 00000C37 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3479 00000C3A 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3480 00000C3D 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3481 00000C40 BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3482 00000C45 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3483 00000C47 31DB                                            xor     ebx,ebx                                         ;zero register
  3484 00000C49 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3485 00000C4C 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3486                                  ;
  3487                                  ;       Find the proper location in the free block chain for the new free block
  3488                                  ;
  3489 00000C4F 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3490 00000C52 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3491 00000C55 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3492 00000C57 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3493 00000C5A 7605                                            jbe     .110                                            ;yes, branch
  3494 00000C5C 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3495 00000C5F EBF4                                            jmp     .100                                            ;continue
  3496                                  ;
  3497                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3498                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3499                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3500                                  ;       block of hte next block, if there is one.
  3501                                  ;
  3502 00000C61 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3503 00000C64 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3504 00000C67 E308                                            jecxz   .120                                            ;branch if no next block
  3505 00000C69 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3506 00000C6C 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3507 00000C6F EB03                                            jmp     .130                                            ;continue
  3508 00000C71 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3509                                  ;
  3510                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3511                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3512                                  ;       last user block pointers if necessary.
  3513                                  ;
  3514 00000C74 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3515 00000C77 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3516 00000C79 7405                                            jz      .140                                            ;no, branch
  3517 00000C7B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3518 00000C7E EB03                                            jmp     .150                                            ;continue
  3519 00000C80 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3520                                  ;
  3521                                  ;       Update the newly allocated block's owner and signature.
  3522                                  ;
  3523 00000C83 BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3524 00000C88 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3525 00000C8A 31D2                                            xor     edx,edx                                         ;zero register
  3526 00000C8C 660F00CA                                        str     dx                                              ;load the task state register
  3527 00000C90 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3528                                  ;
  3529                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3530                                  ;
  3531 00000C93 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3532 00000C96 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3533 00000C98 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3534 00000C9B 721E                                            jb      .180                                            ;branch if block belongs to next task
  3535 00000C9D 7405                                            je      .170                                            ;branch if block belongs to this task
  3536 00000C9F 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3537 00000CA2 EBF2                                            jmp     .160                                            ;continue
  3538                                  ;
  3539                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3540                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3541                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3542                                  ;       place to insert the block.
  3543                                  ;
  3544 00000CA4 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3545 00000CA7 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3546 00000CAA 760F                                            jbe     .180                                            ;yes, branch
  3547 00000CAC 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3548 00000CAF 85C9                                            test    ecx,ecx                                         ;end of chain?
  3549 00000CB1 7408                                            jz      .180                                            ;yes, branch
  3550 00000CB3 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3551 00000CB6 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3552 00000CB9 74E9                                            je      .170                                            ;yes, continue search
  3553                                  ;
  3554                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3555                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3556                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3557                                  ;       do have a previous-block, we update that block's next-block pointer.
  3558                                  ;
  3559 00000CBB 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3560 00000CBE 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3561 00000CC1 E308                                            jecxz   .190                                            ;branch if no next-task block
  3562 00000CC3 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3563 00000CC6 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3564 00000CC9 EB03                                            jmp     .200                                            ;continue
  3565 00000CCB 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3566                                  ;
  3567                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3568                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3569                                  ;       global first and/or last user-block pointers if necessary.
  3570                                  ;
  3571 00000CCE 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3572 00000CD1 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3573 00000CD3 7405                                            jz      .210                                            ;no, branch
  3574 00000CD5 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3575 00000CD8 EB03                                            jmp     .220                                            ;continue
  3576 00000CDA 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3577                                  ;
  3578                                  ;       Restore registers and return to caller.
  3579                                  ;
  3580 00000CDD 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3581 00000CDE 5E                                              pop     esi                                             ;
  3582 00000CDF 59                                              pop     ecx                                             ;
  3583 00000CE0 5B                                              pop     ebx                                             ;
  3584 00000CE1 C3                                              ret                                                     ;return
  3585                                  ;-----------------------------------------------------------------------------------------------------------------------
  3586                                  ;
  3587                                  ;       Routine:        FreeMemory
  3588                                  ;
  3589                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3590                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3591                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3592                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3593                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3594                                  ;
  3595                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3596                                  ;
  3597                                  ;       Out:            EAX     -1      invalid memory block
  3598                                  ;                               0       memory block freed
  3599                                  ;
  3600                                  ;-----------------------------------------------------------------------------------------------------------------------
  3601 00000CE2 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3602 00000CE3 51                                              push    ecx                                             ;
  3603 00000CE4 56                                              push    esi                                             ;
  3604 00000CE5 57                                              push    edi                                             ;
  3605 00000CE6 1E                                              push    ds                                              ;
  3606 00000CE7 06                                              push    es                                              ;
  3607                                  ;
  3608                                  ;       Address the root memory structure
  3609                                  ;
  3610 00000CE8 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3611 00000CEA 07                                              pop     es                                              ;... into extra segment reg
  3612 00000CEB 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3613 00000CED 1F                                              pop     ds                                              ;... into data segment reg
  3614 00000CEE BE08080000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3615 00000CF3 89D7                                            mov     edi,edx                                         ;memory block address
  3616                                  ;
  3617                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3618                                  ;
  3619 00000CF5 31C0                                            xor     eax,eax                                         ;indicate success
  3620 00000CF7 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3621 00000CFD 0F8415010000                                    je      .240                                            ;yes, branch
  3622 00000D03 48                                              dec     eax                                             ;indicate failure
  3623 00000D04 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3624 00000D0A 0F8508010000                                    jne     .240                                            ;no, branch
  3625                                  ;-----------------------------------------------------------------------------------------------------------------------
  3626                                  ;
  3627                                  ;       Unlink the USER memory block.
  3628                                  ;
  3629                                  ;-----------------------------------------------------------------------------------------------------------------------
  3630                                  ;
  3631                                  ;       Set the block signature. Reset owner.
  3632                                  ;
  3633 00000D10 C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3634 00000D16 31C0                                            xor     eax,eax                                         ;zero register
  3635 00000D18 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3636                                  ;
  3637                                  ;       Wipe user area.
  3638                                  ;
  3639 00000D1B 57                                              push    edi                                             ;save block address
  3640 00000D1C 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3641 00000D1F 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3642 00000D22 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3643 00000D25 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3644 00000D27 F3AA                                            rep     stosb                                           ;clear memory
  3645 00000D29 5F                                              pop     edi                                             ;restore block address
  3646                                  ;
  3647                                  ;       Address the preceding and following USER memory blocks
  3648                                  ;
  3649 00000D2A 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3650 00000D2D 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3651                                  ;
  3652                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3653                                  ;       pointer to point to the USER block following this block.
  3654                                  ;
  3655 00000D30 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3656 00000D32 7405                                            jz      .10                                             ;no, branch
  3657 00000D34 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3658 00000D37 EB03                                            jmp     .20                                             ;continue
  3659 00000D39 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3660                                  ;
  3661                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3662                                  ;       pointer to point to the USER block preceding this block.
  3663                                  ;
  3664 00000D3C E305                    .20                     jecxz   .30                                             ;branch if no next block
  3665 00000D3E 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3666 00000D41 EB03                                            jmp     .40                                             ;continue
  3667 00000D43 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3668                                  ;-----------------------------------------------------------------------------------------------------------------------
  3669                                  ;
  3670                                  ;       Merge with a previous contiguous FREE memory block.
  3671                                  ;
  3672                                  ;-----------------------------------------------------------------------------------------------------------------------
  3673                                  ;
  3674                                  ;       Address the preceding and following contiguous memory blocks.
  3675                                  ;
  3676 00000D46 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3677 00000D49 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3678                                  ;
  3679                                  ;       Verify we have a previous contiguous FREE block.
  3680                                  ;
  3681 00000D4C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3682 00000D4E 7442                                            jz      .100                                            ;no, branch
  3683 00000D50 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3684 00000D56 753A                                            jne     .100                                            ;no, branch
  3685                                  ;
  3686                                  ;       Update adjacent block's contiguous pointers.
  3687                                  ;
  3688 00000D58 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3689 00000D5B E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3690 00000D5D 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3691 00000D60 EB03                                            jmp     .60                                             ;continue
  3692 00000D62 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3693                                  ;
  3694                                  ;       Update the size of the merged FREE block.
  3695                                  ;
  3696 00000D65 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3697 00000D68 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3698                                  ;
  3699                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3700                                  ;
  3701 00000D6B B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3702 00000D70 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3703 00000D72 F3AA                                            rep     stosb                                           ;clear memory header
  3704 00000D74 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3705                                  ;-----------------------------------------------------------------------------------------------------------------------
  3706                                  ;
  3707                                  ;       Unlink the previous contiguous FREE memory block
  3708                                  ;
  3709                                  ;-----------------------------------------------------------------------------------------------------------------------
  3710                                  ;
  3711                                  ;       Address the preceding and following USER memory blocks
  3712                                  ;
  3713 00000D76 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3714 00000D79 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3715                                  ;
  3716                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3717                                  ;       block pointer.
  3718                                  ;
  3719 00000D7C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3720 00000D7E 7405                                            jz      .70                                             ;no, branch
  3721 00000D80 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3722 00000D83 EB03                                            jmp     .80                                             ;branch
  3723 00000D85 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3724                                  ;
  3725                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3726                                  ;       pointer.
  3727                                  ;
  3728 00000D88 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3729 00000D8A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3730 00000D8D EB03                                            jmp     .100                                            ;continue
  3731 00000D8F 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3732                                  ;-----------------------------------------------------------------------------------------------------------------------
  3733                                  ;
  3734                                  ;       Merge with a following contiguous FREE memory block.
  3735                                  ;
  3736                                  ;-----------------------------------------------------------------------------------------------------------------------
  3737                                  ;
  3738                                  ;       Verify we have a following contiguous FREE block.
  3739                                  ;
  3740 00000D92 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3741 00000D95 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3742 00000D97 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3743 00000D9D 7543                                            jne     .170                                            ;no, branch
  3744                                  ;
  3745                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3746                                  ;
  3747 00000D9F 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3748 00000DA2 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3749                                  ;
  3750                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3751                                  ;
  3752 00000DA5 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3753 00000DA8 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3754 00000DAB 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3755 00000DAD 7405                                            jz      .110                                            ;no, branch
  3756 00000DAF 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3757 00000DB2 EB03                                            jmp     .120                                            ;continue
  3758 00000DB4 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3759                                  ;-----------------------------------------------------------------------------------------------------------------------
  3760                                  ;
  3761                                  ;       Unlink the following contiguous FREE memory block
  3762                                  ;
  3763                                  ;-----------------------------------------------------------------------------------------------------------------------
  3764                                  ;
  3765                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3766                                  ;
  3767 00000DB7 57                      .120                    push    edi                                             ;save this block
  3768 00000DB8 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3769 00000DBA 51                                              push    ecx                                             ;save next contiguous block
  3770                                  ;
  3771                                  ;       Address the preceding and following USER memory blocks
  3772                                  ;
  3773 00000DBB 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3774 00000DBE 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3775                                  ;
  3776                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3777                                  ;       block pointer.
  3778                                  ;
  3779 00000DC1 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3780 00000DC3 7405                                            jz      .130                                            ;no, branch
  3781 00000DC5 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3782 00000DC8 EB03                                            jmp     .140                                            ;branch
  3783 00000DCA 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3784                                  ;
  3785                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3786                                  ;       pointer.
  3787                                  ;
  3788 00000DCD E305                    .140                    jecxz   .150                                            ;branch if no next block
  3789 00000DCF 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3790 00000DD2 EB03                                            jmp     .160                                            ;continue
  3791 00000DD4 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3792                                  ;
  3793                                  ;       Clear next contiguous block's header
  3794                                  ;
  3795 00000DD7 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3796 00000DD8 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3797 00000DDD B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3798 00000DDF F3AA                                            rep     stosb                                           ;clear memory header
  3799 00000DE1 5F                                              pop     edi                                             ;this block's pointer
  3800                                  ;-----------------------------------------------------------------------------------------------------------------------
  3801                                  ;
  3802                                  ;       Insert the final FREE block back into the block chain.
  3803                                  ;
  3804                                  ;-----------------------------------------------------------------------------------------------------------------------
  3805                                  ;
  3806                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3807                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3808                                  ;       all are smaller in size.
  3809                                  ;
  3810 00000DE2 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3811 00000DE5 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3812 00000DE8 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3813 00000DEA 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3814 00000DED 7205                                            jb      .190                                            ;yes, branch
  3815 00000DEF 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3816 00000DF2 EBF4                                            jmp     .180                                            ;continue
  3817                                  ;
  3818                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3819                                  ;       larger free block. Update the next block's previous block pointer.
  3820                                  ;
  3821 00000DF4 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3822 00000DF7 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3823 00000DFA E308                                            jecxz   .200                                            ;branch if no block found
  3824 00000DFC 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3825 00000DFF 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3826 00000E02 EB03                                            jmp     .210                                            ;continue
  3827 00000E04 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3828                                  ;
  3829                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3830                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3831                                  ;       next pointer.
  3832                                  ;
  3833 00000E07 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3834 00000E0A 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3835 00000E0C 7405                                            jz      .220                                            ;no, branch
  3836 00000E0E 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3837 00000E11 EB03                                            jmp     .230                                            ;continue
  3838 00000E13 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3839                                  ;
  3840                                  ;       The memory free has completed.
  3841                                  ;
  3842 00000E16 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3843                                  ;
  3844                                  ;       Restore and return.
  3845                                  ;
  3846 00000E18 07                      .240                    pop     es                                              ;restore non-volatile regs
  3847 00000E19 1F                                              pop     ds                                              ;
  3848 00000E1A 5F                                              pop     edi                                             ;
  3849 00000E1B 5E                                              pop     esi                                             ;
  3850 00000E1C 59                                              pop     ecx                                             ;
  3851 00000E1D 5B                                              pop     ebx                                             ;
  3852 00000E1E C3                                              ret                                                     ;return
  3853                                  ;=======================================================================================================================
  3854                                  ;
  3855                                  ;       String Helper Routines
  3856                                  ;
  3857                                  ;       CompareMemory
  3858                                  ;       UpperCaseString
  3859                                  ;
  3860                                  ;=======================================================================================================================
  3861                                  ;-----------------------------------------------------------------------------------------------------------------------
  3862                                  ;
  3863                                  ;       Routine:        CompareMemory
  3864                                  ;
  3865                                  ;       Description:    This routine compares two byte arrays.
  3866                                  ;
  3867                                  ;       In:             DS:EDX  first source address
  3868                                  ;                       DS:EBX  second source address
  3869                                  ;                       ECX     comparison length
  3870                                  ;
  3871                                  ;       Out:            EDX     first source address
  3872                                  ;                       EBX     second source address
  3873                                  ;                       ECX     0       array 1 = array 2
  3874                                  ;                               <0      array 1 < array 2
  3875                                  ;                               >0      array 1 > array 2
  3876                                  ;
  3877                                  ;-----------------------------------------------------------------------------------------------------------------------
  3878 00000E1F 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3879 00000E20 57                                              push    edi                                             ;
  3880 00000E21 06                                              push    es                                              ;
  3881 00000E22 1E                                              push    ds                                              ;copy DS
  3882 00000E23 07                                              pop     es                                              ;... to ES
  3883 00000E24 89D6                                            mov     esi,edx                                         ;first source address
  3884 00000E26 89DF                                            mov     edi,ebx                                         ;second source address
  3885 00000E28 FC                                              cld                                                     ;forward strings
  3886 00000E29 F3A6                                            rep     cmpsb                                           ;compare bytes
  3887 00000E2B B000                                            mov     al,0                                            ;default result
  3888 00000E2D 7406                                            jz      .10                                             ;branch if arrays equal
  3889 00000E2F B001                                            mov     al,1                                            ;positive result
  3890 00000E31 7302                                            jnc     .10                                             ;branch if target > source
  3891 00000E33 B0FF                                            mov     al,-1                                           ;negative result
  3892 00000E35 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3893 00000E38 07                                              pop     es                                              ;restore non-volatile regs
  3894 00000E39 5F                                              pop     edi                                             ;
  3895 00000E3A 5E                                              pop     esi                                             ;
  3896 00000E3B C3                                              ret                                                     ;return
  3897                                  ;-----------------------------------------------------------------------------------------------------------------------
  3898                                  ;
  3899                                  ;       Routine:        UpperCaseString
  3900                                  ;
  3901                                  ;       Description:    This routine places all characters in the given string to upper case.
  3902                                  ;
  3903                                  ;       In:             DS:EDX  string address
  3904                                  ;
  3905                                  ;       Out:            EDX     string address
  3906                                  ;
  3907                                  ;-----------------------------------------------------------------------------------------------------------------------
  3908 00000E3C 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  3909 00000E3D 89D6                                            mov     esi,edx                                         ;string address
  3910 00000E3F FC                                              cld                                                     ;forward strings
  3911 00000E40 AC                      .10                     lodsb                                                   ;string character
  3912 00000E41 84C0                                            test    al,al                                           ;null?
  3913 00000E43 740F                                            jz      .20                                             ;yes, skip ahead
  3914 00000E45 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3915 00000E47 72F7                                            jb      .10                                             ;no, continue
  3916 00000E49 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3917 00000E4B 77F3                                            ja      .10                                             ;no, continue
  3918 00000E4D 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  3919 00000E4F 8846FF                                          mov     [esi-1],al                                      ;upper character
  3920 00000E52 EBEC                                            jmp     .10                                             ;continue
  3921 00000E54 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3922 00000E55 C3                                              ret                                                     ;return
  3923                                  ;=======================================================================================================================
  3924                                  ;
  3925                                  ;       Console Helper Routines
  3926                                  ;
  3927                                  ;       FirstConsoleColumn
  3928                                  ;       GetConsoleChar
  3929                                  ;       GetConsoleString
  3930                                  ;       NextConsoleColumn
  3931                                  ;       NextConsoleRow
  3932                                  ;       PreviousConsoleColumn
  3933                                  ;       PutConsoleChar
  3934                                  ;       PutConsoleHexByte
  3935                                  ;       PutConsoleHexDword
  3936                                  ;       PutConsoleHexWord
  3937                                  ;       PutConsoleOIAChar
  3938                                  ;       PutConsoleOIAShift
  3939                                  ;       PutConsoleString
  3940                                  ;       Yield
  3941                                  ;
  3942                                  ;=======================================================================================================================
  3943                                  ;-----------------------------------------------------------------------------------------------------------------------
  3944                                  ;
  3945                                  ;       Routine:        FirstConsoleColumn
  3946                                  ;
  3947                                  ;       Description:    This routine resets the console column to start of the row.
  3948                                  ;
  3949                                  ;       In:             DS      OS data selector
  3950                                  ;
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952 00000E56 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  3953 00000E58 A220080000                                      mov     [wbConsoleColumn],al                            ;save column
  3954 00000E5D C3                                              ret                                                     ;return
  3955                                  ;-----------------------------------------------------------------------------------------------------------------------
  3956                                  ;
  3957                                  ;       Routine:        GetConsoleChar
  3958                                  ;
  3959                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3960                                  ;
  3961                                  ;       Out:            AL      ASCII character code
  3962                                  ;                       AH      keyboard scan code
  3963                                  ;
  3964                                  ;-----------------------------------------------------------------------------------------------------------------------
  3965 00000E5E E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3966 00000E63 E87B030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  3967 00000E68 09C0                                            or      eax,eax                                         ;do we have a message?
  3968 00000E6A 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  3969 00000E6C 50                                              push    eax                                             ;save key codes
  3970 00000E6D 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  3971 00000E72 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3972 00000E77 58                                              pop     eax                                             ;restore key codes
  3973 00000E78 75E9                                            jne     GetConsoleChar                                  ;no, try again
  3974 00000E7A 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  3975 00000E7F C3                                              ret                                                     ;return
  3976                                  ;-----------------------------------------------------------------------------------------------------------------------
  3977                                  ;
  3978                                  ;       Routine:        GetConsoleString
  3979                                  ;
  3980                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3981                                  ;
  3982                                  ;       In:             DS:EDX  target buffer address
  3983                                  ;                       ECX     maximum number of characters to accept
  3984                                  ;                       BH      echo to terminal
  3985                                  ;                       BL      terminating character
  3986                                  ;
  3987                                  ;-----------------------------------------------------------------------------------------------------------------------
  3988 00000E80 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  3989 00000E81 56                                              push    esi                                             ;
  3990 00000E82 57                                              push    edi                                             ;
  3991 00000E83 06                                              push    es                                              ;
  3992 00000E84 1E                                              push    ds                                              ;load data segment selector ...
  3993 00000E85 07                                              pop     es                                              ;... into extra segment register
  3994 00000E86 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3995 00000E88 51                                              push    ecx                                             ;save maximum characters
  3996 00000E89 30C0                                            xor     al,al                                           ;zero register
  3997 00000E8B FC                                              cld                                                     ;forward strings
  3998 00000E8C F3AA                                            rep     stosb                                           ;zero fill buffer
  3999 00000E8E 59                                              pop     ecx                                             ;maximum characters
  4000 00000E8F 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4001 00000E91 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4002 00000E93 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4003 00000E95 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4004 00000E9A 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4005 00000E9C 7445                                            je      .50                                             ;yes, exit
  4006 00000E9E 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4007 00000EA0 7521                                            jne     .30                                             ;no, skip ahead
  4008 00000EA2 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4009 00000EA4 74EF                                            je      .20                                             ;yes, get next character
  4010 00000EA6 4F                                              dec     edi                                             ;backup target pointer
  4011 00000EA7 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4012 00000EAA 41                                              inc     ecx                                             ;increment remaining chars
  4013 00000EAB F6C701                                          test    bh,1                                            ;echo to console?
  4014 00000EAE 74E5                                            jz      .20                                             ;no, get next character
  4015 00000EB0 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4016 00000EB5 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4017 00000EB7 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4018 00000EBC E80C040000                                      call    PlaceCursor                                     ;position the cursor
  4019 00000EC1 EBD2                                            jmp     .20                                             ;get next character
  4020 00000EC3 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4021 00000EC5 72CE                                            jb      .20                                             ;no, get another character
  4022 00000EC7 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4023 00000EC9 77CA                                            ja      .20                                             ;no, get another character
  4024 00000ECB AA                                              stosb                                                   ;store character in buffer
  4025 00000ECC F6C701                                          test    bh,1                                            ;echo to console?
  4026 00000ECF 740F                                            jz      .40                                             ;no, skip ahead
  4027 00000ED1 E877000000                                      call    PutConsoleChar                                  ;write character to console
  4028 00000ED6 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4029 00000EDB E8ED030000                                      call    PlaceCursor                                     ;position the cursor
  4030 00000EE0 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4031 00000EE1 EBB0                                            jmp     .10                                             ;next
  4032 00000EE3 30C0                    .50                     xor     al,al                                           ;null
  4033 00000EE5 AA                                              stosb                                                   ;terminate buffer
  4034 00000EE6 07                                              pop     es                                              ;restore non-volatile regs
  4035 00000EE7 5F                                              pop     edi                                             ;
  4036 00000EE8 5E                                              pop     esi                                             ;
  4037 00000EE9 59                                              pop     ecx                                             ;
  4038 00000EEA C3                                              ret                                                     ;return
  4039                                  ;-----------------------------------------------------------------------------------------------------------------------
  4040                                  ;
  4041                                  ;       Routine:        NextConsoleColumn
  4042                                  ;
  4043                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4044                                  ;                       incremented if the end of the current row is reached.
  4045                                  ;
  4046                                  ;       In:             DS      OS data selector
  4047                                  ;
  4048                                  ;-----------------------------------------------------------------------------------------------------------------------
  4049 00000EEB A020080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4050 00000EF0 FEC0                                            inc     al                                              ;increment column
  4051 00000EF2 A220080000                                      mov     [wbConsoleColumn],al                            ;save column
  4052 00000EF7 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4053 00000EF9 720A                                            jb      .10                                             ;no, skip ahead
  4054 00000EFB E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4055 00000F00 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4056 00000F05 C3                      .10                     ret                                                     ;return
  4057                                  ;-----------------------------------------------------------------------------------------------------------------------
  4058                                  ;
  4059                                  ;       Routine:        NextConsoleRow
  4060                                  ;
  4061                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4062                                  ;
  4063                                  ;       In:             DS      OS data selector
  4064                                  ;
  4065                                  ;-----------------------------------------------------------------------------------------------------------------------
  4066 00000F06 A021080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4067 00000F0B FEC0                                            inc     al                                              ;increment row
  4068 00000F0D A221080000                                      mov     [wbConsoleRow],al                               ;save row
  4069 00000F12 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4070 00000F14 7211                                            jb      .10                                             ;no, skip ahead
  4071 00000F16 E860030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4072 00000F1B A021080000                                      mov     al,[wbConsoleRow]                               ;row
  4073 00000F20 FEC8                                            dec     al                                              ;decrement row
  4074 00000F22 A221080000                                      mov     [wbConsoleRow],al                               ;save row
  4075 00000F27 C3                      .10                     ret                                                     ;return
  4076                                  ;-----------------------------------------------------------------------------------------------------------------------
  4077                                  ;
  4078                                  ;       Routine:        PreviousConsoleColumn
  4079                                  ;
  4080                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4081                                  ;                       the column is set to the last position in the row and the row is decremented.
  4082                                  ;
  4083                                  ;       In:             DS      OS data selector
  4084                                  ;
  4085                                  ;-----------------------------------------------------------------------------------------------------------------------
  4086 00000F28 A020080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4087 00000F2D 08C0                                            or      al,al                                           ;start of row?
  4088 00000F2F 7514                                            jnz     .10                                             ;no, skip ahead
  4089 00000F31 8A2521080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4090 00000F37 08E4                                            or      ah,ah                                           ;top of screen?
  4091 00000F39 7411                                            jz      .20                                             ;yes, exit with no change
  4092 00000F3B FECC                                            dec     ah                                              ;decrement row
  4093 00000F3D 882521080000                                    mov     [wbConsoleRow],ah                               ;save row
  4094 00000F43 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4095 00000F45 FEC8                    .10                     dec     al                                              ;decrement column
  4096 00000F47 A220080000                                      mov     [wbConsoleColumn],al                            ;save column
  4097 00000F4C C3                      .20                     ret                                                     ;return
  4098                                  ;-----------------------------------------------------------------------------------------------------------------------
  4099                                  ;
  4100                                  ;       Routine:        PutConsoleChar
  4101                                  ;
  4102                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4103                                  ;
  4104                                  ;       In:             AL      ASCII character
  4105                                  ;                       DS      OS data selector
  4106                                  ;
  4107                                  ;-----------------------------------------------------------------------------------------------------------------------
  4108 00000F4D 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4109 00000F4E 06                                              push    es                                              ;
  4110 00000F4F 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4111 00000F51 07                                              pop     es                                              ;... into extra segment reg
  4112 00000F52 8A0D20080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4113 00000F58 8A2D21080000                                    mov     ch,[wbConsoleRow]                               ;row
  4114 00000F5E E844030000                                      call    SetConsoleChar                                  ;put character at row, column
  4115 00000F63 07                                              pop     es                                              ;restore non-volatile regs
  4116 00000F64 59                                              pop     ecx                                             ;
  4117 00000F65 C3                                              ret                                                     ;return
  4118                                  ;-----------------------------------------------------------------------------------------------------------------------
  4119                                  ;
  4120                                  ;       Routine:        PutConsoleHexByte
  4121                                  ;
  4122                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4123                                  ;
  4124                                  ;       In:             AL      byte value
  4125                                  ;                       CL      column
  4126                                  ;                       CH      row
  4127                                  ;                       DS      OS data selector
  4128                                  ;                       ES      CGA selector
  4129                                  ;
  4130                                  ;-----------------------------------------------------------------------------------------------------------------------
  4131 00000F66 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4132 00000F67 88C3                                            mov     bl,al                                           ;save byte value
  4133 00000F69 C0E804                                          shr     al,4                                            ;hi-order nybble
  4134 00000F6C 0C30                                            or      al,030h                                         ;apply ASCII zone
  4135 00000F6E 3C3A                                            cmp     al,03ah                                         ;numeric?
  4136 00000F70 7202                                            jb      .10                                             ;yes, skip ahead
  4137 00000F72 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4138 00000F74 E82E030000              .10                     call    SetConsoleChar                                  ;display ASCII character
  4139 00000F79 88D8                                            mov     al,bl                                           ;byte value
  4140 00000F7B 240F                                            and     al,0fh                                          ;lo-order nybble
  4141 00000F7D 0C30                                            or      al,30h                                          ;apply ASCII zone
  4142 00000F7F 3C3A                                            cmp     al,03ah                                         ;numeric?
  4143 00000F81 7202                                            jb      .20                                             ;yes, skip ahead
  4144 00000F83 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4145 00000F85 E81D030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4146 00000F8A 5B                                              pop     ebx                                             ;restore non-volatile regs
  4147 00000F8B C3                                              ret                                                     ;return
  4148                                  ;-----------------------------------------------------------------------------------------------------------------------
  4149                                  ;
  4150                                  ;       Routine:        PutConsoleHexDword
  4151                                  ;
  4152                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4153                                  ;
  4154                                  ;       In:             EAX     value
  4155                                  ;                       CL      column
  4156                                  ;                       CH      row
  4157                                  ;                       DS      OS data selector
  4158                                  ;                       ES      CGA selector
  4159                                  ;
  4160                                  ;-----------------------------------------------------------------------------------------------------------------------
  4161 00000F8C 50                      PutConsoleHexDword      push    eax
  4162 00000F8D C1E810                                          shr     eax,16
  4163 00000F90 E807000000                                      call    PutConsoleHexWord
  4164 00000F95 58                                              pop     eax
  4165 00000F96 E801000000                                      call    PutConsoleHexWord
  4166 00000F9B C3                                              ret
  4167                                  ;-----------------------------------------------------------------------------------------------------------------------
  4168                                  ;
  4169                                  ;       Routine:        PutConsoleHexWord
  4170                                  ;
  4171                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4172                                  ;
  4173                                  ;       In:             EAX     value
  4174                                  ;                       CL      column
  4175                                  ;                       CH      row
  4176                                  ;                       DS      OS data selector
  4177                                  ;                       ES      CGA selector
  4178                                  ;
  4179                                  ;-----------------------------------------------------------------------------------------------------------------------
  4180 00000F9C 50                      PutConsoleHexWord       push    eax
  4181 00000F9D C1E808                                          shr     eax,8
  4182 00000FA0 E8C1FFFFFF                                      call    PutConsoleHexByte
  4183 00000FA5 58                                              pop     eax
  4184 00000FA6 E8BBFFFFFF                                      call    PutConsoleHexByte
  4185 00000FAB C3                                              ret
  4186                                  ;-----------------------------------------------------------------------------------------------------------------------
  4187                                  ;
  4188                                  ;       Routine:        PutConsoleOIAChar
  4189                                  ;
  4190                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4191                                  ;
  4192                                  ;       In:             DS      OS data selector
  4193                                  ;
  4194                                  ;-----------------------------------------------------------------------------------------------------------------------
  4195 00000FAC 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4196 00000FAD 51                                              push    ecx                                             ;
  4197 00000FAE 56                                              push    esi                                             ;
  4198 00000FAF 1E                                              push    ds                                              ;
  4199 00000FB0 06                                              push    es                                              ;
  4200 00000FB1 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4201 00000FB3 1F                                              pop     ds                                              ;... into data segment register
  4202 00000FB4 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4203 00000FB6 07                                              pop     es                                              ;... into extra segment register
  4204 00000FB7 BE25080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4205 00000FBC B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4206 00000FBE B300                                            mov     bl,0                                            ;starting column
  4207 00000FC0 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4208 00000FC5 51                      .10                     push    ecx                                             ;save remaining count
  4209 00000FC6 89D9                                            mov     ecx,ebx                                         ;row, column
  4210 00000FC8 AC                                              lodsb                                                   ;read scan code
  4211 00000FC9 08C0                                            or      al,al                                           ;scan code present?
  4212 00000FCB 7407                                            jz      .20                                             ;no, skip ahead
  4213 00000FCD E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4214 00000FD2 EB0E                                            jmp     .30                                             ;continue
  4215 00000FD4 B020                    .20                     mov     al,' '                                          ;ASCII space
  4216 00000FD6 E8CC020000                                      call    SetConsoleChar                                  ;display space
  4217 00000FDB B020                                            mov     al,' '                                          ;ASCII space
  4218 00000FDD E8C5020000                                      call    SetConsoleChar                                  ;display space
  4219 00000FE2 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4220 00000FE5 59                                              pop     ecx                                             ;restore remaining
  4221 00000FE6 E2DD                                            loop    .10                                             ;next code
  4222 00000FE8 A02B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4223 00000FED 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4224 00000FEF 720D                                            jb      .40                                             ;no, skip ahead
  4225 00000FF1 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4226 00000FF3 7709                                            ja      .40                                             ;no, skip ahead
  4227 00000FF5 88FD                                            mov     ch,bh                                           ;OIA row
  4228 00000FF7 B128                                            mov     cl,40                                           ;character display column
  4229 00000FF9 E8A9020000                                      call    SetConsoleChar                                  ;display ASCII character
  4230 00000FFE 07                      .40                     pop     es                                              ;restore non-volatile regs
  4231 00000FFF 1F                                              pop     ds                                              ;
  4232 00001000 5E                                              pop     esi                                             ;
  4233 00001001 59                                              pop     ecx                                             ;
  4234 00001002 5B                                              pop     ebx                                             ;
  4235 00001003 C3                                              ret                                                     ;return
  4236                                  ;-----------------------------------------------------------------------------------------------------------------------
  4237                                  ;
  4238                                  ;       Routine:        PutConsoleOIAShift
  4239                                  ;
  4240                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4241                                  ;
  4242                                  ;       In:             BL      shift flags
  4243                                  ;                       BH      lock flags
  4244                                  ;                       DS      OS data selector
  4245                                  ;
  4246                                  ;-----------------------------------------------------------------------------------------------------------------------
  4247 00001004 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4248 00001005 06                                              push    es                                              ;
  4249 00001006 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4250 00001008 07                                              pop     es                                              ;... into ES register
  4251 00001009 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4252 0000100B B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4253 0000100D F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4254 00001010 7402                                            jz      .10                                             ;no, skip ahead
  4255 00001012 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4256 00001014 B10E                    .10                     mov     cl,14                                           ;indicator column
  4257 00001016 E88C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4258 0000101B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4259 0000101D F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4260 00001020 7402                                            jz      .20                                             ;no, skip ahead
  4261 00001022 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4262 00001024 B140                    .20                     mov     cl,64                                           ;indicator column
  4263 00001026 E87C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4264 0000102B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4265 0000102D F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4266 00001030 7402                                            jz      .30                                             ;no, skip ahead
  4267 00001032 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4268 00001034 B10F                    .30                     mov     cl,15                                           ;indicator column
  4269 00001036 E86C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4270 0000103B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4271 0000103D F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4272 00001040 7402                                            jz      .40                                             ;no, skip ahead
  4273 00001042 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4274 00001044 B13F                    .40                     mov     cl,63                                           ;indicator column
  4275 00001046 E85C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4276 0000104B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4277 0000104D F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4278 00001050 7402                                            jz      .50                                             ;no, skip ahead
  4279 00001052 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4280 00001054 B110                    .50                     mov     cl,16                                           ;indicator column
  4281 00001056 E84C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4282 0000105B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4283 0000105D F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4284 00001060 7402                                            jz      .60                                             ;no, skip ahead
  4285 00001062 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4286 00001064 B13E                    .60                     mov     cl,62                                           ;indicator column
  4287 00001066 E83C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4288 0000106B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4289 0000106D F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4290 00001070 7402                                            jz      .70                                             ;no, skip ahead
  4291 00001072 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4292 00001074 B14E                    .70                     mov     cl,78                                           ;indicator column
  4293 00001076 E82C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4294 0000107B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4295 0000107D F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4296 00001080 7402                                            jz      .80                                             ;no, skip ahead
  4297 00001082 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4298 00001084 B14D                    .80                     mov     cl,77                                           ;indicator column
  4299 00001086 E81C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4300 0000108B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4301 0000108D F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4302 00001090 7402                                            jz      .90                                             ;no, skip ahead
  4303 00001092 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4304 00001094 B14C                    .90                     mov     cl,76                                           ;indicator column
  4305 00001096 E80C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4306 0000109B 07                                              pop     es                                              ;restore non-volatile regs
  4307 0000109C 59                                              pop     ecx                                             ;
  4308 0000109D C3                                              ret                                                     ;return
  4309                                  ;-----------------------------------------------------------------------------------------------------------------------
  4310                                  ;
  4311                                  ;       Routine:        PutConsoleString
  4312                                  ;
  4313                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4314                                  ;                       console position as needed.
  4315                                  ;
  4316                                  ;       In:             EDX     source address
  4317                                  ;                       DS      OS data selector
  4318                                  ;
  4319                                  ;-----------------------------------------------------------------------------------------------------------------------
  4320 0000109E 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4321 0000109F 89D6                                            mov     esi,edx                                         ;source address
  4322 000010A1 FC                                              cld                                                     ;forward strings
  4323 000010A2 AC                      .10                     lodsb                                                   ;ASCII character
  4324 000010A3 08C0                                            or      al,al                                           ;end of string?
  4325 000010A5 7422                                            jz      .40                                             ;yes, skip ahead
  4326 000010A7 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4327 000010A9 7507                                            jne     .20                                             ;no, skip ahead
  4328 000010AB E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4329 000010B0 EBF0                                            jmp     .10                                             ;next character
  4330 000010B2 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4331 000010B4 7507                                            jne     .30                                             ;no, skip ahead
  4332 000010B6 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4333 000010BB EBE5                                            jmp     .10                                             ;next character
  4334 000010BD E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4335 000010C2 E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4336 000010C7 EBD9                                            jmp     .10                                             ;next character
  4337 000010C9 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4338 000010CA C3                                              ret                                                     ;return
  4339                                  ;-----------------------------------------------------------------------------------------------------------------------
  4340                                  ;
  4341                                  ;       Routine:        Yield
  4342                                  ;
  4343                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4344                                  ;
  4345                                  ;-----------------------------------------------------------------------------------------------------------------------
  4346 000010CB FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4347 000010CC F4                                              hlt                                                     ;halt until external interrupt
  4348 000010CD C3                                              ret                                                     ;return
  4349                                  ;=======================================================================================================================
  4350                                  ;
  4351                                  ;       Data-Type Conversion Helper Routines
  4352                                  ;
  4353                                  ;       DecimalToUnsigned
  4354                                  ;       HexadecimalToUnsigned
  4355                                  ;       UnsignedToDecimalString
  4356                                  ;       UnsignedToHexadecimal
  4357                                  ;
  4358                                  ;=======================================================================================================================
  4359                                  ;-----------------------------------------------------------------------------------------------------------------------
  4360                                  ;
  4361                                  ;       Routine:        DecimalToUnsigned
  4362                                  ;
  4363                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4364                                  ;
  4365                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4366                                  ;
  4367                                  ;       Output:         EAX     unsigned integer value
  4368                                  ;
  4369                                  ;-----------------------------------------------------------------------------------------------------------------------
  4370 000010CE 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4371 000010CF 89D6                                            mov     esi,edx                                         ;source address
  4372 000010D1 31D2                                            xor     edx,edx                                         ;zero total
  4373 000010D3 AC                      .10                     lodsb                                                   ;source byte
  4374 000010D4 3C2C                                            cmp     al,','                                          ;comma?
  4375 000010D6 74FB                                            je      .10                                             ;yes, ignore
  4376 000010D8 84C0                                            test    al,al                                           ;end of string?
  4377 000010DA 7421                                            jz      .30                                             ;yes, done
  4378 000010DC 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4379 000010DE 741D                                            je      .30                                             ;yes, done
  4380 000010E0 3C30                                            cmp     al,'0'                                          ;numeral?
  4381 000010E2 7217                                            jb      .20                                             ;no, invalid string
  4382 000010E4 3C39                                            cmp     al,'9'                                          ;numeral?
  4383 000010E6 7713                                            ja      .20                                             ;no, invalid string
  4384 000010E8 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4385 000010EA 50                                              push    eax                                             ;save numeral
  4386 000010EB D1E2                                            shl     edx,1                                           ;total * 2
  4387 000010ED 89D0                                            mov     eax,edx                                         ;total * 2
  4388 000010EF C1E202                                          shl     edx,2                                           ;total * 8
  4389 000010F2 01C2                                            add     edx,eax                                         ;total * 10
  4390 000010F4 58                                              pop     eax                                             ;restore numeral
  4391 000010F5 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4392 000010F7 31C0                                            xor     eax,eax                                         ;zero register
  4393 000010F9 EBD8                                            jmp     .10                                             ;next
  4394 000010FB 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4395 000010FD 89D0                    .30                     mov     eax,edx                                         ;result
  4396 000010FF 5E                                              pop     esi                                             ;restore non-volatile regs
  4397 00001100 C3                                              ret                                                     ;return
  4398                                  ;-----------------------------------------------------------------------------------------------------------------------
  4399                                  ;
  4400                                  ;       Routine:        HexadecimalToUnsigned
  4401                                  ;
  4402                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4403                                  ;
  4404                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4405                                  ;
  4406                                  ;       Output:         EAX     unsigned integer value
  4407                                  ;
  4408                                  ;-----------------------------------------------------------------------------------------------------------------------
  4409 00001101 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4410 00001102 89D6                                            mov     esi,edx                                         ;source address
  4411 00001104 31D2                                            xor     edx,edx                                         ;zero register
  4412 00001106 AC                      .10                     lodsb                                                   ;source byte
  4413 00001107 84C0                                            test    al,al                                           ;end of string?
  4414 00001109 7410                                            jz      .30                                             ;yes, branch
  4415 0000110B 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4416 0000110D 7602                                            jna     .20                                             ;no, skip ahead
  4417 0000110F 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4418 00001111 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  4419 00001114 C1E204                                          shl     edx,4                                           ;previous total x 16
  4420 00001117 01C2                                            add     edx,eax                                         ;add prior value x 16
  4421 00001119 EBEB                                            jmp     .10                                             ;next
  4422 0000111B 89D0                    .30                     mov     eax,edx                                         ;result
  4423 0000111D 5E                                              pop     esi                                             ;restore non-volatile regs
  4424 0000111E C3                                              ret                                                     ;return
  4425                                  ;-----------------------------------------------------------------------------------------------------------------------
  4426                                  ;
  4427                                  ;       Routine:        UnsignedToDecimalString
  4428                                  ;
  4429                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4430                                  ;
  4431                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4432                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4433                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4434                                  ;                       ECX     32-bit binary
  4435                                  ;                       DS:EDX  output buffer address
  4436                                  ;
  4437                                  ;-----------------------------------------------------------------------------------------------------------------------
  4438 0000111F 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4439 00001120 51                                              push    ecx                                             ;
  4440 00001121 57                                              push    edi                                             ;
  4441 00001122 06                                              push    es                                              ;
  4442 00001123 1E                                              push    ds                                              ;load data selector
  4443 00001124 07                                              pop     es                                              ;... into extra segment reg
  4444 00001125 89D7                                            mov     edi,edx                                         ;output buffer address
  4445 00001127 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4446 0000112A 89CA                                            mov     edx,ecx                                         ;binary
  4447 0000112C B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4448 00001131 E871000000                                      call    .30                                             ;divide and store
  4449 00001136 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4450 0000113B E855000000                                      call    .10                                             ;divide and store
  4451 00001140 B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4452 00001145 E85D000000                                      call    .30                                             ;divide and store
  4453 0000114A B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4454 0000114F E853000000                                      call    .30                                             ;divide and store
  4455 00001154 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4456 00001159 E837000000                                      call    .10                                             ;divide and store
  4457 0000115E B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4458 00001163 E83F000000                                      call    .30                                             ;divide and store
  4459 00001168 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4460 0000116D E835000000                                      call    .30                                             ;divide and store
  4461 00001172 B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4462 00001177 E819000000                                      call    .10                                             ;divide and store
  4463 0000117C B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4464 00001181 E821000000                                      call    .30                                             ;divide and store
  4465 00001186 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4466 00001188 E827000000                                      call    .40                                             ;store
  4467 0000118D 30C0                                            xor     al,al                                           ;null terminator
  4468 0000118F AA                                              stosb
  4469 00001190 07                                              pop     es                                              ;restore non-volatile regs
  4470 00001191 5F                                              pop     edi                                             ;
  4471 00001192 59                                              pop     ecx                                             ;
  4472 00001193 5B                                              pop     ebx                                             ;
  4473 00001194 C3                                              ret                                                     ;return
  4474 00001195 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4475 00001198 740D                                            jz      .30                                             ;no, branch
  4476 0000119A F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4477 0000119D 7405                                            jz      .20                                             ;no, store delim
  4478 0000119F F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4479 000011A2 7403                                            jz      .30                                             ;no, branch
  4480 000011A4 B02C                    .20                     mov     al,','                                          ;delimiter
  4481 000011A6 AA                                              stosb                                                   ;store delimiter
  4482 000011A7 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4483 000011A9 31D2                                            xor     edx,edx                                         ;zero hi-order
  4484 000011AB F7F1                                            div     ecx                                             ;divide by power of 10
  4485 000011AD 84C0                                            test    al,al                                           ;zero?
  4486 000011AF 7407                                            jz      .50                                             ;yes, branch
  4487 000011B1 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4488 000011B4 0C30                    .40                     or      al,30h                                          ;ASCII zone
  4489 000011B6 AA                                              stosb                                                   ;store digit
  4490 000011B7 C3                                              ret                                                     ;return
  4491 000011B8 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4492 000011BB 74F7                                            jz      .40                                             ;no, store and continue
  4493 000011BD F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4494 000011C0 75F2                                            jnz     .40                                             ;yes, store and continue
  4495 000011C2 C3                                              ret                                                     ;return
  4496                                  ;-----------------------------------------------------------------------------------------------------------------------
  4497                                  ;
  4498                                  ;       Routine:        UnsignedToHexadecimal
  4499                                  ;
  4500                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4501                                  ;
  4502                                  ;       Input:          DS:EDX  output buffer address
  4503                                  ;                       ECX     32-bit binary
  4504                                  ;
  4505                                  ;-----------------------------------------------------------------------------------------------------------------------
  4506 000011C3 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4507 000011C4 89D7                                            mov     edi,edx                                         ;output buffer address
  4508 000011C6 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4509 000011C8 31C9                                            xor     ecx,ecx                                         ;zero register
  4510 000011CA B108                                            mov     cl,8                                            ;nybble count
  4511 000011CC C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4512 000011CF 88D0                                            mov     al,dl                                           ;????bbbb
  4513 000011D1 240F                                            and     al,0fh                                          ;mask out bits 4-7
  4514 000011D3 0C30                                            or      al,30h                                          ;mask in ascii zone
  4515 000011D5 3C3A                                            cmp     al,3ah                                          ;A through F?
  4516 000011D7 7202                                            jb      .20                                             ;no, skip ahead
  4517 000011D9 0407                                            add     al,7                                            ;41h through 46h
  4518 000011DB AA                      .20                     stosb                                                   ;store hexnum
  4519 000011DC E2EE                                            loop    .10                                             ;next nybble
  4520 000011DE 30C0                                            xor     al,al                                           ;zero reg
  4521 000011E0 AA                                              stosb                                                   ;null terminate
  4522 000011E1 5F                                              pop     edi                                             ;restore non-volatile regs
  4523 000011E2 C3                                              ret                                                     ;return
  4524                                  ;=======================================================================================================================
  4525                                  ;
  4526                                  ;       Message Queue Helper Routines
  4527                                  ;
  4528                                  ;       GetMessage
  4529                                  ;       PutMessage
  4530                                  ;
  4531                                  ;=======================================================================================================================
  4532                                  ;-----------------------------------------------------------------------------------------------------------------------
  4533                                  ;
  4534                                  ;       Routine:        GetMessage
  4535                                  ;
  4536                                  ;       Description:    This routine reads and removes a message from the message queue.
  4537                                  ;
  4538                                  ;       Out:            EAX     lo-order message data
  4539                                  ;                       EDX     hi-order message data
  4540                                  ;
  4541                                  ;                       CY      0 = message read
  4542                                  ;                               1 = no message to read
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545 000011E3 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4546 000011E4 51                                              push    ecx                                             ;
  4547 000011E5 1E                                              push    ds                                              ;
  4548 000011E6 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4549 000011E8 1F                                              pop     ds                                              ;... into data segment register
  4550 000011E9 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4551 000011EF 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4552 000011F1 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4553 000011F4 09D0                                            or      eax,edx                                         ;is queue empty?
  4554 000011F6 F9                                              stc                                                     ;assume queue is emtpy
  4555 000011F7 741B                                            jz      .20                                             ;yes, skip ahead
  4556 000011F9 31C9                                            xor     ecx,ecx                                         ;store zero
  4557 000011FB 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4558 000011FD 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4559 00001200 83C308                                          add     ebx,8                                           ;next queue element
  4560 00001203 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  4561 00001209 7502                                            jnz     .10                                             ;no, skip ahead
  4562 0000120B B308                                            mov     bl,8                                            ;reset to 1st entry
  4563 0000120D 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4564 00001213 F8                                              clc                                                     ;indicate message read
  4565 00001214 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4566 00001215 59                                              pop     ecx                                             ;
  4567 00001216 5B                                              pop     ebx                                             ;
  4568 00001217 C3                                              ret                                                     ;return
  4569                                  ;-----------------------------------------------------------------------------------------------------------------------
  4570                                  ;
  4571                                  ;       Routine:        PutMessage
  4572                                  ;
  4573                                  ;       Description:    This routine adda a message to the message queue.
  4574                                  ;
  4575                                  ;       In:             ECX     hi-order data word
  4576                                  ;                       EDX     lo-order data word
  4577                                  ;
  4578                                  ;       Out:            CY      0 = success
  4579                                  ;                               1 = fail: queue is full
  4580                                  ;
  4581                                  ;-----------------------------------------------------------------------------------------------------------------------
  4582 00001218 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4583 00001219 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4584 0000121B 1F                                              pop     ds                                              ;... into data segment register
  4585 0000121C A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4586 00001221 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4587 00001224 F9                                              stc                                                     ;assume failure
  4588 00001225 7517                                            jne     .20                                             ;yes, cannot store
  4589 00001227 8910                                            mov     [eax],edx                                       ;store lo-order data
  4590 00001229 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4591 0000122C 83C008                                          add     eax,8                                           ;next queue element adr
  4592 0000122F 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  4593 00001234 7502                                            jnz     .10                                             ;no, skip ahead
  4594 00001236 B008                                            mov     al,8                                            ;reset to top of queue
  4595 00001238 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4596 0000123D F8                                              clc                                                     ;indicate success
  4597 0000123E 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4598 0000123F C3                                              ret                                                     ;return
  4599                                  ;=======================================================================================================================
  4600                                  ;
  4601                                  ;       Memory-Mapped Video Routines
  4602                                  ;
  4603                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4604                                  ;
  4605                                  ;       ClearConsoleScreen
  4606                                  ;       ScrollConsoleRow
  4607                                  ;       SetConsoleChar
  4608                                  ;       SetConsoleString
  4609                                  ;
  4610                                  ;=======================================================================================================================
  4611                                  ;-----------------------------------------------------------------------------------------------------------------------
  4612                                  ;
  4613                                  ;       Routine:        ClearConsoleScreen
  4614                                  ;
  4615                                  ;       Description:    This routine clears the console (CGA) screen.
  4616                                  ;
  4617                                  ;-----------------------------------------------------------------------------------------------------------------------
  4618 00001240 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4619 00001241 57                                              push    edi                                             ;
  4620 00001242 1E                                              push    ds                                              ;
  4621 00001243 06                                              push    es                                              ;
  4622 00001244 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4623 00001246 1F                                              pop     ds                                              ;... into DS register
  4624 00001247 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4625 00001249 07                                              pop     es                                              ;... into ES register
  4626 0000124A B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4627 0000124F B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4628 00001254 31FF                                            xor     edi,edi                                         ;target offset
  4629 00001256 FC                                              cld                                                     ;forward strings
  4630 00001257 F3AB                                            rep     stosd                                           ;reset screen body
  4631 00001259 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4632 0000125E B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4633 00001263 F3AB                                            rep     stosd                                           ;reset OIA line
  4634 00001265 30C0                                            xor     al,al                                           ;zero register
  4635 00001267 A221080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4636 0000126C A220080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4637 00001271 E857000000                                      call    PlaceCursor                                     ;place cursor at current position
  4638 00001276 07                                              pop     es                                              ;restore non-volatile regs
  4639 00001277 1F                                              pop     ds                                              ;
  4640 00001278 5F                                              pop     edi                                             ;
  4641 00001279 59                                              pop     ecx                                             ;
  4642 0000127A C3                                              ret                                                     ;return
  4643                                  ;-----------------------------------------------------------------------------------------------------------------------
  4644                                  ;
  4645                                  ;       Routine:        ScrollConsoleRow
  4646                                  ;
  4647                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4648                                  ;
  4649                                  ;-----------------------------------------------------------------------------------------------------------------------
  4650 0000127B 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4651 0000127C 56                                              push    esi                                             ;
  4652 0000127D 57                                              push    edi                                             ;
  4653 0000127E 1E                                              push    ds                                              ;
  4654 0000127F 06                                              push    es                                              ;
  4655 00001280 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4656 00001282 1F                                              pop     ds                                              ;... into DS
  4657 00001283 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4658 00001285 07                                              pop     es                                              ;... into ES
  4659 00001286 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4660 0000128B BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4661 00001290 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4662 00001292 FC                                              cld                                                     ;forward strings
  4663 00001293 F3A5                                            rep     movsd                                           ;move 24 lines up
  4664 00001295 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4665 0000129A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4666 0000129F F3AB                                            rep     stosd                                           ;clear bottom row
  4667 000012A1 07                                              pop     es                                              ;restore non-volatile regs
  4668 000012A2 1F                                              pop     ds                                              ;
  4669 000012A3 5F                                              pop     edi                                             ;
  4670 000012A4 5E                                              pop     esi                                             ;
  4671 000012A5 59                                              pop     ecx                                             ;
  4672 000012A6 C3                                              ret                                                     ;return
  4673                                  ;-----------------------------------------------------------------------------------------------------------------------
  4674                                  ;
  4675                                  ;       Routine:        SetConsoleChar
  4676                                  ;
  4677                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4678                                  ;
  4679                                  ;       In:             AL      ASCII character
  4680                                  ;                       CL      column
  4681                                  ;                       CH      row
  4682                                  ;                       ES      CGA selector
  4683                                  ;
  4684                                  ;       Out:            EAX     last target address written (ES:)
  4685                                  ;                       CL      column + 1
  4686                                  ;
  4687                                  ;-----------------------------------------------------------------------------------------------------------------------
  4688 000012A7 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4689 000012A9 0FB6C5                                          movzx   eax,ch                                          ;row
  4690 000012AC B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4691 000012AE F6E4                                            mul     ah                                              ;row * cols/row
  4692 000012B0 00C8                                            add     al,cl                                           ;add column
  4693 000012B2 80D400                                          adc     ah,0                                            ;handle carry
  4694 000012B5 D1E0                                            shl     eax,1                                           ;screen offset
  4695 000012B7 268810                                          mov     [es:eax],dl                                     ;store character
  4696 000012BA FEC1                                            inc     cl                                              ;next column
  4697 000012BC C3                                              ret                                                     ;return
  4698                                  ;-----------------------------------------------------------------------------------------------------------------------
  4699                                  ;
  4700                                  ;       Routine:        SetConsoleString
  4701                                  ;
  4702                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4703                                  ;
  4704                                  ;       In:             ESI     source offset (DS:)
  4705                                  ;                       CL      column
  4706                                  ;                       CH      row
  4707                                  ;                       ES      CGA selector
  4708                                  ;
  4709                                  ;-----------------------------------------------------------------------------------------------------------------------
  4710 000012BD 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4711 000012BE FC                                              cld                                                     ;forward strings
  4712 000012BF AC                      .10                     lodsb                                                   ;next ASCII character
  4713 000012C0 84C0                                            test    al,al                                           ;end of string?
  4714 000012C2 7407                                            jz      .20                                             ;yes, branch
  4715 000012C4 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4716 000012C9 EBF4                                            jmp     .10                                             ;continue
  4717 000012CB 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4718 000012CC C3                                              ret                                                     ;return
  4719                                  ;=======================================================================================================================
  4720                                  ;
  4721                                  ;       Input/Output Routines
  4722                                  ;
  4723                                  ;       These routines read and/or write directly to ports.
  4724                                  ;
  4725                                  ;       PlaceCursor
  4726                                  ;       PutPrimaryEndOfInt
  4727                                  ;       PutSecondaryEndOfInt
  4728                                  ;       ReadRealTimeClock
  4729                                  ;       ResetSystem
  4730                                  ;       SetKeyboardLamps
  4731                                  ;       WaitForKeyInBuffer
  4732                                  ;       WaitForKeyOutBuffer
  4733                                  ;
  4734                                  ;=======================================================================================================================
  4735                                  ;-----------------------------------------------------------------------------------------------------------------------
  4736                                  ;
  4737                                  ;       Routine:        PlaceCursor
  4738                                  ;
  4739                                  ;       Description:    This routine positions the cursor on the console.
  4740                                  ;
  4741                                  ;       In:             DS      OS data selector
  4742                                  ;
  4743                                  ;-----------------------------------------------------------------------------------------------------------------------
  4744 000012CD 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4745 000012CE A021080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4746 000012D3 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4747 000012D5 F6E4                                            mul     ah                                              ;row offset
  4748 000012D7 020520080000                                    add     al,[wbConsoleColumn]                            ;add column
  4749 000012DD 80D400                                          adc     ah,0                                            ;add overflow
  4750 000012E0 89C1                                            mov     ecx,eax                                         ;screen offset
  4751 000012E2 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4752 000012E4 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4753 000012E6 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4754 000012E8 EE                                              out     dx,al                                           ;select register
  4755 000012E9 42                                              inc     edx                                             ;data port
  4756 000012EA 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4757 000012EC EE                                              out     dx,al                                           ;store hi-order loc
  4758 000012ED 4A                                              dec     edx                                             ;register select port
  4759 000012EE B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4760 000012F0 EE                                              out     dx,al                                           ;select register
  4761 000012F1 42                                              inc     edx                                             ;data port
  4762 000012F2 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4763 000012F4 EE                                              out     dx,al                                           ;store lo-order loc
  4764 000012F5 59                                              pop     ecx                                             ;restore non-volatile regs
  4765 000012F6 C3                                              ret                                                     ;return
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ;
  4768                                  ;       Routine:        PutPrimaryEndOfInt
  4769                                  ;
  4770                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4771                                  ;
  4772                                  ;-----------------------------------------------------------------------------------------------------------------------
  4773 000012F7 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4774 000012F8 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4775 000012FA E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4776 000012FC C3                                              ret                                                     ;return
  4777                                  ;-----------------------------------------------------------------------------------------------------------------------
  4778                                  ;
  4779                                  ;       Routine:        PutSecondaryEndOfInt
  4780                                  ;
  4781                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4782                                  ;
  4783                                  ;-----------------------------------------------------------------------------------------------------------------------
  4784 000012FD FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4785 000012FE B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4786 00001300 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4787 00001302 C3                                              ret                                                     ;return
  4788                                  ;-----------------------------------------------------------------------------------------------------------------------
  4789                                  ;
  4790                                  ;       Routine:        ReadRealTimeClock
  4791                                  ;
  4792                                  ;       Description:    This routine gets current date time from the real-time clock.
  4793                                  ;
  4794                                  ;       In:             DS:EBX  DATETIME structure
  4795                                  ;
  4796                                  ;-----------------------------------------------------------------------------------------------------------------------
  4797 00001303 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4798 00001304 57                                              push    edi                                             ;
  4799 00001305 06                                              push    es                                              ;
  4800 00001306 1E                                              push    ds                                              ;store data selector ...
  4801 00001307 07                                              pop     es                                              ;... in es register
  4802 00001308 89DF                                            mov     edi,ebx                                         ;date-time structure
  4803 0000130A B000                                            mov     al,ERTCSECONDREG                                ;second register
  4804 0000130C E670                                            out     ERTCREGPORT,al                                  ;select second register
  4805 0000130E E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4806 00001310 FC                                              cld                                                     ;forward strings
  4807 00001311 AA                                              stosb                                                   ;store second value
  4808 00001312 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4809 00001314 E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4810 00001316 E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4811 00001318 AA                                              stosb                                                   ;store minute value
  4812 00001319 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4813 0000131B E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4814 0000131D E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4815 0000131F AA                                              stosb                                                   ;store hour value
  4816 00001320 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4817 00001322 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4818 00001324 E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4819 00001326 AA                                              stosb                                                   ;store weekday value
  4820 00001327 B007                                            mov     al,ERTCDAYREG                                   ;day register
  4821 00001329 E670                                            out     ERTCREGPORT,al                                  ;select day register
  4822 0000132B E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4823 0000132D AA                                              stosb                                                   ;store day value
  4824 0000132E B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4825 00001330 E670                                            out     ERTCREGPORT,al                                  ;select month register
  4826 00001332 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  4827 00001334 AA                                              stosb                                                   ;store month value
  4828 00001335 B009                                            mov     al,ERTCYEARREG                                  ;year register
  4829 00001337 E670                                            out     ERTCREGPORT,al                                  ;select year register
  4830 00001339 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  4831 0000133B AA                                              stosb                                                   ;store year value
  4832 0000133C B032                                            mov     al,ERTCCENTURYREG                               ;century register
  4833 0000133E E670                                            out     ERTCREGPORT,al                                  ;select century register
  4834 00001340 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  4835 00001342 AA                                              stosb                                                   ;store century value
  4836 00001343 B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  4837 00001345 E670                                            out     ERTCREGPORT,al                                  ;select status register
  4838 00001347 E471                                            in      al,ERTCDATAPORT                                 ;read status register
  4839 00001349 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  4840 0000134B 751D                                            jnz     .20                                             ;skip ahead if binary values
  4841 0000134D 89DE                                            mov     esi,ebx                                         ;date-time structure address
  4842 0000134F 89DF                                            mov     edi,ebx                                         ;date-time structure address
  4843 00001351 B908000000                                      mov     ecx,8                                           ;loop counter
  4844 00001356 AC                      .10                     lodsb                                                   ;BCD value
  4845 00001357 88C4                                            mov     ah,al                                           ;BCD value
  4846 00001359 240F                                            and     al,00001111b                                    ;low-order decimal zone
  4847 0000135B 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  4848 0000135E D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  4849 00001360 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  4850 00001362 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  4851 00001365 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  4852 00001367 AA                                              stosb                                                   ;replace BCD with binary
  4853 00001368 E2EC                                            loop    .10                                             ;next value
  4854 0000136A 07                      .20                     pop     es                                              ;restore non-volatile regs
  4855 0000136B 5F                                              pop     edi                                             ;
  4856 0000136C 5E                                              pop     esi                                             ;
  4857 0000136D C3                                              ret                                                     ;return
  4858                                  ;-----------------------------------------------------------------------------------------------------------------------
  4859                                  ;
  4860                                  ;       Routine:        ResetSystem
  4861                                  ;
  4862                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4863                                  ;
  4864                                  ;       Out:            N/A     This routine does not return.
  4865                                  ;
  4866                                  ;-----------------------------------------------------------------------------------------------------------------------
  4867 0000136E B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4868 00001373 E2FE                                            loop    $                                               ;clear interrupts
  4869 00001375 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4870 00001377 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4871 00001379 FB                      .10                     sti                                                     ;enable maskable interrupts
  4872 0000137A F4                                              hlt                                                     ;halt until interrupt
  4873 0000137B EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  4874                                  ;-----------------------------------------------------------------------------------------------------------------------
  4875                                  ;
  4876                                  ;       Routine:        SetKeyboardLamps
  4877                                  ;
  4878                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4879                                  ;
  4880                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4881                                  ;
  4882                                  ;-----------------------------------------------------------------------------------------------------------------------
  4883 0000137D E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4884 00001382 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4885 00001384 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  4886 00001386 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4887 0000138B E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4888 0000138D E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4889 00001392 88F8                                            mov     al,bh                                           ;set/reset lamps value
  4890 00001394 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  4891 00001396 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4892 0000139B E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4893 0000139D C3                                              ret                                                     ;return
  4894                                  ;-----------------------------------------------------------------------------------------------------------------------
  4895                                  ;
  4896                                  ;       Routine:        WaitForKeyInBuffer
  4897                                  ;
  4898                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4899                                  ;
  4900                                  ;       Out:            ZF      1 = Input buffer ready
  4901                                  ;                               0 = Input buffer not ready after timeout
  4902                                  ;
  4903                                  ;-----------------------------------------------------------------------------------------------------------------------
  4904 0000139E 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4905 0000139F B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4906 000013A4 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4907 000013A6 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  4908 000013A8 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  4909 000013AA 59                                              pop     ecx                                             ;restore non-volatile regs
  4910 000013AB C3                                              ret                                                     ;return
  4911                                  ;-----------------------------------------------------------------------------------------------------------------------
  4912                                  ;
  4913                                  ;       Routine:        WaitForKeyOutBuffer
  4914                                  ;
  4915                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4916                                  ;
  4917                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4918                                  ;                               0 = Output buffer empty after timeout
  4919                                  ;
  4920                                  ;-----------------------------------------------------------------------------------------------------------------------
  4921 000013AC 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4922 000013AD B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4923 000013B2 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4924 000013B4 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  4925 000013B6 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  4926 000013B8 59                                              pop     ecx                                             ;restore non-volatile regs
  4927 000013B9 C3                                              ret                                                     ;return
  4928                                  ;-----------------------------------------------------------------------------------------------------------------------
  4929                                  ;
  4930                                  ;       End of the Kernel Function Library
  4931                                  ;
  4932                                  ;-----------------------------------------------------------------------------------------------------------------------
  4933 000013BA 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  4934                                  ;=======================================================================================================================
  4935                                  ;
  4936                                  ;       Console Task
  4937                                  ;
  4938                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4939                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4940                                  ;       screen and responds to user commands.
  4941                                  ;
  4942                                  ;=======================================================================================================================
  4943                                  ;-----------------------------------------------------------------------------------------------------------------------
  4944                                  ;
  4945                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4946                                  ;
  4947                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4948                                  ;
  4949                                  ;-----------------------------------------------------------------------------------------------------------------------
  4950                                  section                 constack                                                ;console task stack
  4951 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  4952                                  ;-----------------------------------------------------------------------------------------------------------------------
  4953                                  ;
  4954                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4955                                  ;
  4956                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4957                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4958                                  ;       16 descriptors. Six are initially defined.
  4959                                  ;
  4960                                  ;-----------------------------------------------------------------------------------------------------------------------
  4961                                  section                 conldt                                                  ;console local descriptors
  4962 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  4963 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  4964 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  4965 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  4966 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  4967 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  4968 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4969                                  ;-----------------------------------------------------------------------------------------------------------------------
  4970                                  ;
  4971                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4972                                  ;
  4973                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4974                                  ;       segment. CS to console code.
  4975                                  ;
  4976                                  ;-----------------------------------------------------------------------------------------------------------------------
  4977                                  section                 contss                                                  ;console task state segment
  4978 00000000 00000000                                        dd      0                                               ;00 back-link tss
  4979 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  4980 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  4981 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  4982 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  4983 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  4984 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  4985 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  4986 00000020 00000000                                        dd      0                                               ;20 eip
  4987 00000024 00020000                                        dd      0200h                                           ;24 eflags
  4988 00000028 00000000                                        dd      0                                               ;28 eax
  4989 0000002C 00000000                                        dd      0                                               ;2c ecx
  4990 00000030 00000000                                        dd      0                                               ;30 edx
  4991 00000034 00000000                                        dd      0                                               ;34 ebx
  4992 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  4993 0000003C 00000000                                        dd      0                                               ;3c ebp
  4994 00000040 00000000                                        dd      0                                               ;40 esi
  4995 00000044 00000000                                        dd      0                                               ;44 edi
  4996 00000048 1C000000                                        dd      001Ch                                           ;48 es
  4997 0000004C 24000000                                        dd      0024h                                           ;4c cs
  4998 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  4999 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5000 00000058 00000000                                        dd      0                                               ;58 fs
  5001 0000005C 00000000                                        dd      0                                               ;5c gs
  5002 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5003 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5004                                  ;-----------------------------------------------------------------------------------------------------------------------
  5005                                  ;
  5006                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5007                                  ;
  5008                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5009                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5010                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5011                                  ;       event.
  5012                                  ;
  5013                                  ;-----------------------------------------------------------------------------------------------------------------------
  5014                                  section                 conmque                                                 ;console message queue
  5015 00000000 08000000                                        dd      8                                               ;head pointer
  5016 00000004 08000000                                        dd      8                                               ;tail pointer
  5017 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5018                                  ;-----------------------------------------------------------------------------------------------------------------------
  5019                                  ;
  5020                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5021                                  ;
  5022                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5023                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5024                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5025                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5026                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5027                                  ;       board input, echoing to the console screen and responding to user commands.
  5028                                  ;
  5029                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5030                                  ;
  5031                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5032                                  ;                               |  Real Mode Interrupt Vectors                  |
  5033                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5034                                  ;                               |  Reserved BIOS Memory Area                    |
  5035                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5036                                  ;                               |  Shared Kernel Memory Area                    |
  5037                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5038                                  ;                               |  Global Descriptor Table (GDT)                |
  5039                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5040                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5041                                  ;                       002000  +-----------------------------------------------+
  5042                                  ;                               |  Interrupt Handlers                           |
  5043                                  ;                               |  Kernel Function Library                      |
  5044                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5045                                  ;                               |  Console Task Stack Area                      |
  5046                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5047                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5048                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5049                                  ;                               |  Console Task Task State Segment (TSS)        |
  5050                                  ;                       004800  +-----------------------------------------------+
  5051                                  ;                               |  Console Task Message Queue                   |
  5052                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5053                                  ;                               |  Console Task Code                            |
  5054                                  ;                               |  Console Task Constants                       |
  5055                                  ;                       006000  +===============================================+
  5056                                  ;
  5057                                  ;-----------------------------------------------------------------------------------------------------------------------
  5058                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5059 00000000 E86D000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5060                                  
  5061                                                          clearConsoleScreen                                      ;clear the console screen
  5061 00000005 B001                <1>  mov al,eClearConsoleScreen
  5061 00000007 CD30                <1>  int _svc
  5062                                                          putConsoleString czTitle                                ;display startup message
  5062 00000009 BA[89050000]        <1>  mov edx,%1
  5062 0000000E B009                <1>  mov al,ePutConsoleString
  5062 00000010 CD30                <1>  int _svc
  5063                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5063                              <1> .10 :
  5063 00000012 BA[87050000]        <1>  mov edx,%1
  5063 00000017 B009                <1>  mov al,ePutConsoleString
  5063 00000019 CD30                <1>  int _svc
  5064                                                          placeCursor                                             ;set CRT cursor location
  5064 0000001B B008                <1>  mov al,ePlaceCursor
  5064 0000001D CD30                <1>  int _svc
  5065                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5065 0000001F BA2C080000          <1>  mov edx,%1
  5065 00000024 B94F000000          <1>  mov ecx,%2
  5065 00000029 B701                <1>  mov bh,%3
  5065 0000002B B30D                <1>  mov bl,%4
  5065 0000002D B005                <1>  mov al,eGetConsoleString
  5065 0000002F CD30                <1>  int _svc
  5066                                                          putConsoleString czNewLine                              ;newline
  5066 00000031 BA[7F050000]        <1>  mov edx,%1
  5066 00000036 B009                <1>  mov al,ePutConsoleString
  5066 00000038 CD30                <1>  int _svc
  5067                                  
  5068 0000003A BA2C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5069 0000003F BB7C080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5070 00000044 E879000000                                      call    ConTakeToken                                    ;handle console input
  5071 00000049 BA7C080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5072 0000004E E8A4000000                                      call    ConDetermineCommand                             ;determine command number
  5073 00000053 83F818                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5074 00000056 720B                                            jb      .20                                             ;yes, branch
  5075                                  
  5076                                                          putConsoleString czUnknownCommand                       ;display error message
  5076 00000058 BA[A7050000]        <1>  mov edx,%1
  5076 0000005D B009                <1>  mov al,ePutConsoleString
  5076 0000005F CD30                <1>  int _svc
  5077                                  
  5078 00000061 EBAF                                            jmp     .10                                             ;next command
  5079 00000063 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5080 00000066 BA[69040000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5081 0000006B 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5082 0000006E FFD0                                            call    eax                                             ;call command handler
  5083 00000070 EBA0                                            jmp     .10                                             ;next command
  5084                                  ;-----------------------------------------------------------------------------------------------------------------------
  5085                                  ;
  5086                                  ;       Routine:        ConInitializeData
  5087                                  ;
  5088                                  ;       Description:    This routine initializes console task variables.
  5089                                  ;
  5090                                  ;-----------------------------------------------------------------------------------------------------------------------
  5091 00000072 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5092 00000073 57                                              push    edi                                             ;
  5093 00000074 06                                              push    es                                              ;
  5094                                  ;
  5095                                  ;       Initialize console work areas.
  5096                                  ;
  5097 00000075 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5098 00000077 07                                              pop     es                                              ;... into extra segment register
  5099 00000078 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5100 0000007D 30C0                                            xor     al,al                                           ;initialization value
  5101 0000007F B924010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5102 00000084 FC                                              cld                                                     ;forward strings
  5103 00000085 F3AA                                            rep     stosb                                           ;initialize data
  5104                                  ;
  5105                                  ;       Initialize heap size
  5106                                  ;
  5107 00000087 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5108 0000008C A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5109                                  ;
  5110                                  ;       Initialize MEMROOT structure
  5111                                  ;
  5112 00000091 BF08080000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5113 00000096 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5114 0000009B 31C9                                            xor     ecx,ecx                                         ;zero register
  5115 0000009D B104                                            mov     cl,4                                            ;count
  5116 0000009F F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5117 000000A1 31C0                                            xor     eax,eax                                         ;zero register
  5118 000000A3 AB                                              stosd                                                   ;zero first task block
  5119 000000A4 AB                                              stosd                                                   ;zero last task block
  5120                                  ;
  5121                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5122                                  ;
  5123 000000A5 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5124 000000AA B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5125 000000AF AB                                              stosd                                                   ;store signature
  5126 000000B0 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5127 000000B5 AB                                              stosd                                                   ;store block size
  5128 000000B6 31C9                                            xor     ecx,ecx                                         ;zero register
  5129 000000B8 B106                                            mov     cl,6                                            ;count
  5130 000000BA 31C0                                            xor     eax,eax                                         ;zero register
  5131 000000BC F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5132                                  ;
  5133                                  ;       Restore and return.
  5134                                  ;
  5135 000000BE 07                                              pop     es                                              ;restore non-volatile regs
  5136 000000BF 5F                                              pop     edi                                             ;
  5137 000000C0 59                                              pop     ecx                                             ;
  5138 000000C1 C3                                              ret                                                     ;return
  5139                                  ;-----------------------------------------------------------------------------------------------------------------------
  5140                                  ;
  5141                                  ;       Routine:        ConTakeToken
  5142                                  ;
  5143                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5144                                  ;
  5145                                  ;       In:             DS:EDX  source buffer address
  5146                                  ;                       DS:EBX  target buffer address
  5147                                  ;
  5148                                  ;       Out:            DS:EDX  source buffer address
  5149                                  ;                       DS:EBX  target buffer address
  5150                                  ;
  5151                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5152                                  ;
  5153                                  ;-----------------------------------------------------------------------------------------------------------------------
  5154 000000C2 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5155 000000C3 57                                              push    edi                                             ;
  5156 000000C4 06                                              push    es                                              ;
  5157 000000C5 1E                                              push    ds                                              ;load data segment selector ...
  5158 000000C6 07                                              pop     es                                              ;... into extra segment reg
  5159 000000C7 89D6                                            mov     esi,edx                                         ;source buffer address
  5160 000000C9 89DF                                            mov     edi,ebx                                         ;target buffer address
  5161 000000CB C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5162 000000CE FC                                              cld                                                     ;forward strings
  5163 000000CF AC                      .10                     lodsb                                                   ;load byte
  5164 000000D0 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5165 000000D2 74FB                                            je      .10                                             ;yes, continue
  5166 000000D4 84C0                                            test    al,al                                           ;end of line?
  5167 000000D6 7410                                            jz      .40                                             ;yes, branch
  5168 000000D8 AA                      .20                     stosb                                                   ;store byte
  5169 000000D9 AC                                              lodsb                                                   ;load byte
  5170 000000DA 84C0                                            test    al,al                                           ;end of line?
  5171 000000DC 740A                                            jz      .40                                             ;no, continue
  5172 000000DE 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5173 000000E0 75F6                                            jne     .20                                             ;no, continue
  5174 000000E2 AC                      .30                     lodsb                                                   ;load byte
  5175 000000E3 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5176 000000E5 74FB                                            je      .30                                             ;yes, continue
  5177 000000E7 4E                                              dec     esi                                             ;pre-position
  5178 000000E8 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5179 000000EB 89D7                                            mov     edi,edx                                         ;source buffer address
  5180 000000ED AC                      .50                     lodsb                                                   ;remaining byte
  5181 000000EE AA                                              stosb                                                   ;move to front of buffer
  5182 000000EF 84C0                                            test    al,al                                           ;end of line?
  5183 000000F1 75FA                                            jnz     .50                                             ;no, continue
  5184 000000F3 07                                              pop     es                                              ;restore non-volatile regs
  5185 000000F4 5F                                              pop     edi                                             ;
  5186 000000F5 5E                                              pop     esi                                             ;
  5187 000000F6 C3                                              ret                                                     ;return
  5188                                  ;-----------------------------------------------------------------------------------------------------------------------
  5189                                  ;
  5190                                  ;       Routine:        ConDetermineCommand
  5191                                  ;
  5192                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5193                                  ;
  5194                                  ;       input:          DS:EDX  command address
  5195                                  ;
  5196                                  ;       output:         EAX     >=0     = command nbr
  5197                                  ;                               0       = unknown command
  5198                                  ;
  5199                                  ;-----------------------------------------------------------------------------------------------------------------------
  5200 000000F7 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5201 000000F8 51                                              push    ecx                                             ;
  5202 000000F9 56                                              push    esi                                             ;
  5203 000000FA 57                                              push    edi                                             ;
  5204                                  
  5205                                                          upperCaseString                                         ;upper-case string at EDX
  5205 000000FB B019                <1>  mov al,eUpperCaseString
  5205 000000FD CD30                <1>  int _svc
  5206                                  
  5207 000000FF BE[C9040000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5208 00000104 31FF                                            xor     edi,edi                                         ;intialize command number
  5209 00000106 FC                                              cld                                                     ;forward strings
  5210 00000107 AC                      .10                     lodsb                                                   ;command length
  5211 00000108 0FB6C8                                          movzx   ecx,al                                          ;command length
  5212 0000010B E30D                                            jecxz   .20                                             ;branch if end of table
  5213 0000010D 89F3                                            mov     ebx,esi                                         ;table entry address
  5214 0000010F 01CE                                            add     esi,ecx                                         ;next table entry address
  5215                                  
  5216                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5216 00000111 B002                <1>  mov al,eCompareMemory
  5216 00000113 CD30                <1>  int _svc
  5217                                  
  5218 00000115 E303                                            jecxz   .20                                             ;branch if equal
  5219 00000117 47                                              inc     edi                                             ;increment command nbr
  5220 00000118 EBED                                            jmp     .10                                             ;repeat
  5221 0000011A 89F8                    .20                     mov     eax,edi                                         ;command number
  5222 0000011C 5F                                              pop     edi                                             ;restore non-volatile regs
  5223 0000011D 5E                                              pop     esi                                             ;
  5224 0000011E 59                                              pop     ecx                                             ;
  5225 0000011F 5B                                              pop     ebx                                             ;
  5226 00000120 C3                                              ret                                                     ;return
  5227                                  ;-----------------------------------------------------------------------------------------------------------------------
  5228                                  ;
  5229                                  ;       Routine:        ConClear
  5230                                  ;
  5231                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5232                                  ;
  5233                                  ;-----------------------------------------------------------------------------------------------------------------------
  5234                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5234                              <1> ConClear :
  5234 00000121 B001                <1>  mov al,eClearConsoleScreen
  5234 00000123 CD30                <1>  int _svc
  5235 00000125 C3                                              ret                                                     ;return
  5236                                  ;-----------------------------------------------------------------------------------------------------------------------
  5237                                  ;
  5238                                  ;       Routine:        ConDate
  5239                                  ;
  5240                                  ;       Description:    This routine handles the DATE command.
  5241                                  ;
  5242                                  ;-----------------------------------------------------------------------------------------------------------------------
  5243                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5243                              <1> ConDate :
  5243 00000126 BB1C090000          <1>  mov ebx,%1
  5243 0000012B B015                <1>  mov al,eReadRealTimeClock
  5243 0000012D CD30                <1>  int _svc
  5244                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5244 0000012F BB1C090000          <1>  mov ebx,%1
  5244 00000134 BACC080000          <1>  mov edx,%2
  5244 00000139 B00A                <1>  mov al,ePutDateString
  5244 0000013B CD30                <1>  int _svc
  5245                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5245 0000013D BACC080000          <1>  mov edx,%1
  5245 00000142 B009                <1>  mov al,ePutConsoleString
  5245 00000144 CD30                <1>  int _svc
  5246                                                          putConsoleString  czNewLine                             ;write newline to console
  5246 00000146 BA[7F050000]        <1>  mov edx,%1
  5246 0000014B B009                <1>  mov al,ePutConsoleString
  5246 0000014D CD30                <1>  int _svc
  5247 0000014F C3                                              ret                                                     ;return
  5248                                  ;-----------------------------------------------------------------------------------------------------------------------
  5249                                  ;
  5250                                  ;       Routine:        ConDay
  5251                                  ;
  5252                                  ;       Description:    This routine handles the DAY command.
  5253                                  ;
  5254                                  ;-----------------------------------------------------------------------------------------------------------------------
  5255                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5255                              <1> ConDay :
  5255 00000150 BB1C090000          <1>  mov ebx,%1
  5255 00000155 B015                <1>  mov al,eReadRealTimeClock
  5255 00000157 CD30                <1>  int _svc
  5256                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5256 00000159 BB1C090000          <1>  mov ebx,%1
  5256 0000015E BACC080000          <1>  mov edx,%2
  5256 00000163 B00B                <1>  mov al,ePutDayString
  5256 00000165 CD30                <1>  int _svc
  5257                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5257 00000167 BACC080000          <1>  mov edx,%1
  5257 0000016C B009                <1>  mov al,ePutConsoleString
  5257 0000016E CD30                <1>  int _svc
  5258                                                          putConsoleString  czNewLine                             ;write newline to console
  5258 00000170 BA[7F050000]        <1>  mov edx,%1
  5258 00000175 B009                <1>  mov al,ePutConsoleString
  5258 00000177 CD30                <1>  int _svc
  5259 00000179 C3                                              ret                                                     ;return
  5260                                  ;-----------------------------------------------------------------------------------------------------------------------
  5261                                  ;
  5262                                  ;       Routine:        ConExit
  5263                                  ;
  5264                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5265                                  ;
  5266                                  ;-----------------------------------------------------------------------------------------------------------------------
  5267                                  ConExit                 resetSystem                                             ;issue system reset
  5267                              <1> ConExit :
  5267 0000017A B016                <1>  mov al,eResetSystem
  5267 0000017C CD30                <1>  int _svc
  5268 0000017E C3                                              ret                                                     ;return
  5269                                  ;-----------------------------------------------------------------------------------------------------------------------
  5270                                  ;
  5271                                  ;       Routine:        ConFree
  5272                                  ;
  5273                                  ;       Description:    This routine handles the FREE command.
  5274                                  ;
  5275                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5276                                  ;
  5277                                  ;-----------------------------------------------------------------------------------------------------------------------
  5278 0000017F 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5279 00000180 51                                              push    ecx                                             ;
  5280 00000181 56                                              push    esi                                             ;
  5281 00000182 57                                              push    edi                                             ;
  5282                                  ;
  5283                                  ;       Get address parameter
  5284                                  ;
  5285 00000183 BA2C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5286 00000188 BB7C080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5287 0000018D E830FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5288                                  ;
  5289                                  ;       Convert input parameter from hexadecimal string to binary
  5290                                  ;
  5291 00000192 803D7C08000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5292 00000199 7421                                            je      .10                                             ;no, branch
  5293 0000019B BA7C080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5294                                  
  5295                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5295 000001A0 B006                <1>  mov al,eHexadecimalToUnsigned
  5295 000001A2 CD30                <1>  int _svc
  5296                                  
  5297 000001A4 85C0                                            test    eax,eax                                         ;valid parameter?
  5298 000001A6 7414                                            jz      .10                                             ;no, branch
  5299                                  ;
  5300                                  ;       Free memory block
  5301                                  ;
  5302                                                          freeMemory eax                                          ;free memory
  5302 000001A8 89C2                <1>  mov edx,%1
  5302 000001AA B004                <1>  mov al,eFreeMemory
  5302 000001AC CD30                <1>  int _svc
  5303                                  
  5304 000001AE 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5305 000001B1 7409                                            je      .10                                             ;no, branch
  5306                                  ;
  5307                                  ;       Indicate memory freed
  5308                                  ;
  5309                                                          putConsoleString czOK                                   ;indicate success
  5309 000001B3 BA[82050000]        <1>  mov edx,%1
  5309 000001B8 B009                <1>  mov al,ePutConsoleString
  5309 000001BA CD30                <1>  int _svc
  5310                                  ;
  5311                                  ;       Restore and return
  5312                                  ;
  5313 000001BC 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5314 000001BD 5E                                              pop     esi                                             ;
  5315 000001BE 59                                              pop     ecx                                             ;
  5316 000001BF 5B                                              pop     ebx                                             ;
  5317 000001C0 C3                                              ret                                                     ;return
  5318                                  ;-----------------------------------------------------------------------------------------------------------------------
  5319                                  ;
  5320                                  ;       Routine:        ConHour
  5321                                  ;
  5322                                  ;       Description:    This routine Handles the HOUR command.
  5323                                  ;
  5324                                  ;-----------------------------------------------------------------------------------------------------------------------
  5325                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5325                              <1> ConHour :
  5325 000001C1 BB1C090000          <1>  mov ebx,%1
  5325 000001C6 B015                <1>  mov al,eReadRealTimeClock
  5325 000001C8 CD30                <1>  int _svc
  5326                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5326 000001CA BB1C090000          <1>  mov ebx,%1
  5326 000001CF BACC080000          <1>  mov edx,%2
  5326 000001D4 B00C                <1>  mov al,ePutHourString
  5326 000001D6 CD30                <1>  int _svc
  5327                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5327 000001D8 BACC080000          <1>  mov edx,%1
  5327 000001DD B009                <1>  mov al,ePutConsoleString
  5327 000001DF CD30                <1>  int _svc
  5328                                                          putConsoleString  czNewLine                             ;write newline to console
  5328 000001E1 BA[7F050000]        <1>  mov edx,%1
  5328 000001E6 B009                <1>  mov al,ePutConsoleString
  5328 000001E8 CD30                <1>  int _svc
  5329 000001EA C3                                              ret                                                     ;return
  5330                                  ;-----------------------------------------------------------------------------------------------------------------------
  5331                                  ;
  5332                                  ;       Routine:        ConInt6
  5333                                  ;
  5334                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5335                                  ;
  5336                                  ;-----------------------------------------------------------------------------------------------------------------------
  5337 000001EB 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5338 000001ED C3                                              ret                                                     ;return (not executed)
  5339                                  ;-----------------------------------------------------------------------------------------------------------------------
  5340                                  ;
  5341                                  ;       Routine:        ConMalloc
  5342                                  ;
  5343                                  ;       Description:    This routine handles the MALLOC command.
  5344                                  ;
  5345                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5346                                  ;
  5347                                  ;-----------------------------------------------------------------------------------------------------------------------
  5348 000001EE 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5349 000001EF 51                                              push    ecx                                             ;
  5350 000001F0 56                                              push    esi                                             ;
  5351 000001F1 57                                              push    edi                                             ;
  5352                                  ;
  5353                                  ;       Get size parameter
  5354                                  ;
  5355 000001F2 BA2C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5356 000001F7 BB7C080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5357 000001FC E8C1FEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5358                                  ;
  5359                                  ;       Convert input parameter from decimal string to binary
  5360                                  ;
  5361 00000201 803D7C08000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5362 00000208 7434                                            je      .10                                             ;no, branch
  5363 0000020A BA7C080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5364                                  
  5365                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5365 0000020F B003                <1>  mov al,eDecimalToUnsigned
  5365 00000211 CD30                <1>  int _svc
  5366                                  
  5367 00000213 85C0                                            test    eax,eax                                         ;valid parameter?
  5368 00000215 7427                                            jz      .10                                             ;no, branch
  5369                                  ;
  5370                                  ;       Allocate memory block
  5371                                  ;
  5372                                                          allocateMemory eax                                      ;allocate memory
  5372 00000217 89C1                <1>  mov ecx,%1
  5372 00000219 B000                <1>  mov al,eAllocateMemory
  5372 0000021B CD30                <1>  int _svc
  5373                                  
  5374 0000021D 85C0                                            test    eax,eax                                         ;memory allocated?
  5375 0000021F 741D                                            jz      .10                                             ;no, branch
  5376                                  ;
  5377                                  ;       Report allocated memory block address
  5378                                  ;
  5379 00000221 BACC080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5380 00000226 89C1                                            mov     ecx,eax                                         ;memory address
  5381                                  
  5382                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5382 00000228 B018                <1>  mov al,eUnsignedToHexadecimal
  5382 0000022A CD30                <1>  int _svc
  5383                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5383 0000022C BACC080000          <1>  mov edx,%1
  5383 00000231 B009                <1>  mov al,ePutConsoleString
  5383 00000233 CD30                <1>  int _svc
  5384                                                          putConsoleString czNewLine                              ;display new line
  5384 00000235 BA[7F050000]        <1>  mov edx,%1
  5384 0000023A B009                <1>  mov al,ePutConsoleString
  5384 0000023C CD30                <1>  int _svc
  5385                                  
  5386 0000023E 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5387 0000023F 5E                                              pop     esi                                             ;
  5388 00000240 59                                              pop     ecx                                             ;
  5389 00000241 5B                                              pop     ebx                                             ;
  5390 00000242 C3                                              ret                                                     ;return
  5391                                  ;-----------------------------------------------------------------------------------------------------------------------
  5392                                  ;
  5393                                  ;       Routine:        ConMem
  5394                                  ;
  5395                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5396                                  ;
  5397                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5398                                  ;
  5399                                  ;-----------------------------------------------------------------------------------------------------------------------
  5400 00000243 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  5401 00000244 56                                              push    esi                                             ;
  5402 00000245 57                                              push    edi                                             ;
  5403                                  ;
  5404                                  ;                       update the source address if a parameter is given
  5405                                  ;
  5406 00000246 BA2C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5407 0000024B BB7C080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5408 00000250 E86DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5409 00000255 803D7C08000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5410 0000025C 740E                                            je      .10                                             ;no, branch
  5411 0000025E BA7C080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5412                                  
  5413                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5413 00000263 B006                <1>  mov al,eHexadecimalToUnsigned
  5413 00000265 CD30                <1>  int _svc
  5414                                  
  5415 00000267 A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  5416                                  ;
  5417                                  ;                       setup source address and row count
  5418                                  ;
  5419 0000026C 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5420 00000272 31C9                                            xor     ecx,ecx                                         ;zero register
  5421 00000274 B110                                            mov     cl,16                                           ;row count
  5422                                  ;
  5423                                  ;                       start the row with the source address in hexadecimal
  5424                                  ;
  5425 00000276 51                      .20                     push    ecx                                             ;save remaining rows
  5426 00000277 BFCC080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5427 0000027C 89FA                                            mov     edx,edi                                         ;output buffer address
  5428 0000027E 89F1                                            mov     ecx,esi                                         ;console memory address
  5429                                  
  5430                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5430 00000280 B018                <1>  mov al,eUnsignedToHexadecimal
  5430 00000282 CD30                <1>  int _svc
  5431                                  
  5432 00000284 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  5433 00000287 B020                                            mov     al,' '                                          ;ascii space
  5434 00000289 AA                                              stosb                                                   ;store delimiter
  5435                                  ;
  5436                                  ;                       output 16 ASCII hexadecimal byte values for the row
  5437                                  ;
  5438 0000028A 31C9                                            xor     ecx,ecx                                         ;zero register
  5439 0000028C B110                                            mov     cl,16                                           ;loop count
  5440 0000028E 51                      .30                     push    ecx                                             ;save loop count
  5441 0000028F AC                                              lodsb                                                   ;memory byte
  5442 00000290 88C4                                            mov     ah,al                                           ;memory byte
  5443 00000292 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  5444 00000295 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5445 00000297 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5446 00000299 7202                                            jb      .40                                             ;yes, skip ahead
  5447 0000029B 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5448 0000029D AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5449 0000029E 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  5450 000002A0 240F                                            and     al,0fh                                          ;mask out high-order bits
  5451 000002A2 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5452 000002A4 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5453 000002A6 7202                                            jb      .50                                             ;yes, skip ahead
  5454 000002A8 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5455 000002AA AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5456 000002AB B020                                            mov     al,' '                                          ;ascii space
  5457 000002AD AA                                              stosb                                                   ;store ascii space delimiter
  5458 000002AE 59                                              pop     ecx                                             ;loop count
  5459 000002AF E2DD                                            loop    .30                                             ;next
  5460                                  ;
  5461                                  ;                       output printable ASCII character section for the row
  5462                                  ;
  5463 000002B1 83EE10                                          sub     esi,16                                          ;reset source pointer
  5464 000002B4 B110                                            mov     cl,16                                           ;loop count
  5465 000002B6 AC                      .60                     lodsb                                                   ;source byte
  5466 000002B7 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  5467 000002B9 7204                                            jb      .70                                             ;no, skip ahead
  5468 000002BB 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  5469 000002BD 7202                                            jb      .80                                             ;yes, skip ahead
  5470 000002BF B020                    .70                     mov     al,' '                                          ;display space instead of printable
  5471 000002C1 AA                      .80                     stosb                                                   ;store printable ascii byte
  5472 000002C2 E2F2                                            loop    .60                                             ;next source byte
  5473 000002C4 30C0                                            xor     al,al                                           ;nul-terminator
  5474 000002C6 AA                                              stosb                                                   ;terminate output line
  5475                                  ;
  5476                                  ;                       display constructed output buffer and newline
  5477                                  ;
  5478                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5478 000002C7 BACC080000          <1>  mov edx,%1
  5478 000002CC B009                <1>  mov al,ePutConsoleString
  5478 000002CE CD30                <1>  int _svc
  5479                                                          putConsoleString czNewLine                              ;display new line
  5479 000002D0 BA[7F050000]        <1>  mov edx,%1
  5479 000002D5 B009                <1>  mov al,ePutConsoleString
  5479 000002D7 CD30                <1>  int _svc
  5480                                  ;
  5481                                  ;                       repeat until all lines displayed and preserve source address
  5482                                  ;
  5483 000002D9 59                                              pop     ecx                                             ;remaining rows
  5484 000002DA E29A                                            loop    .20                                             ;next row
  5485 000002DC 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  5486 000002E2 5F                                              pop     edi                                             ;restore regs
  5487 000002E3 5E                                              pop     esi                                             ;
  5488 000002E4 5B                                              pop     ebx                                             ;
  5489 000002E5 C3                                              ret                                                     ;return
  5490                                  ;-----------------------------------------------------------------------------------------------------------------------
  5491                                  ;
  5492                                  ;       Routine:        ConMinute
  5493                                  ;
  5494                                  ;       Description:    This routine Handles the MINUTE command.
  5495                                  ;
  5496                                  ;-----------------------------------------------------------------------------------------------------------------------
  5497                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5497                              <1> ConMinute :
  5497 000002E6 BB1C090000          <1>  mov ebx,%1
  5497 000002EB B015                <1>  mov al,eReadRealTimeClock
  5497 000002ED CD30                <1>  int _svc
  5498                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5498 000002EF BB1C090000          <1>  mov ebx,%1
  5498 000002F4 BACC080000          <1>  mov edx,%2
  5498 000002F9 B00D                <1>  mov al,ePutMinuteString
  5498 000002FB CD30                <1>  int _svc
  5499                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5499 000002FD BACC080000          <1>  mov edx,%1
  5499 00000302 B009                <1>  mov al,ePutConsoleString
  5499 00000304 CD30                <1>  int _svc
  5500                                                          putConsoleString  czNewLine                             ;write newline to console
  5500 00000306 BA[7F050000]        <1>  mov edx,%1
  5500 0000030B B009                <1>  mov al,ePutConsoleString
  5500 0000030D CD30                <1>  int _svc
  5501 0000030F C3                                              ret                                                     ;return
  5502                                  ;-----------------------------------------------------------------------------------------------------------------------
  5503                                  ;
  5504                                  ;       Routine:        ConMonth
  5505                                  ;
  5506                                  ;       Description:    This routine Handles the MONTH command.
  5507                                  ;
  5508                                  ;-----------------------------------------------------------------------------------------------------------------------
  5509                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5509                              <1> ConMonth :
  5509 00000310 BB1C090000          <1>  mov ebx,%1
  5509 00000315 B015                <1>  mov al,eReadRealTimeClock
  5509 00000317 CD30                <1>  int _svc
  5510                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5510 00000319 BB1C090000          <1>  mov ebx,%1
  5510 0000031E BACC080000          <1>  mov edx,%2
  5510 00000323 B00E                <1>  mov al,ePutMonthString
  5510 00000325 CD30                <1>  int _svc
  5511                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5511 00000327 BACC080000          <1>  mov edx,%1
  5511 0000032C B009                <1>  mov al,ePutConsoleString
  5511 0000032E CD30                <1>  int _svc
  5512                                                          putConsoleString  czNewLine                             ;write newline to console
  5512 00000330 BA[7F050000]        <1>  mov edx,%1
  5512 00000335 B009                <1>  mov al,ePutConsoleString
  5512 00000337 CD30                <1>  int _svc
  5513 00000339 C3                                              ret                                                     ;return
  5514                                  ;-----------------------------------------------------------------------------------------------------------------------
  5515                                  ;
  5516                                  ;       Routine:        ConMonthName
  5517                                  ;
  5518                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5519                                  ;
  5520                                  ;-----------------------------------------------------------------------------------------------------------------------
  5521                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5521                              <1> ConMonthName :
  5521 0000033A BB1C090000          <1>  mov ebx,%1
  5521 0000033F B015                <1>  mov al,eReadRealTimeClock
  5521 00000341 CD30                <1>  int _svc
  5522                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5522 00000343 BB1C090000          <1>  mov ebx,%1
  5522 00000348 BACC080000          <1>  mov edx,%2
  5522 0000034D B00F                <1>  mov al,ePutMonthNameString
  5522 0000034F CD30                <1>  int _svc
  5523                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5523 00000351 BACC080000          <1>  mov edx,%1
  5523 00000356 B009                <1>  mov al,ePutConsoleString
  5523 00000358 CD30                <1>  int _svc
  5524                                                          putConsoleString   czNewLine                            ;write newline to console
  5524 0000035A BA[7F050000]        <1>  mov edx,%1
  5524 0000035F B009                <1>  mov al,ePutConsoleString
  5524 00000361 CD30                <1>  int _svc
  5525 00000363 C3                                              ret                                                     ;return
  5526                                  ;-----------------------------------------------------------------------------------------------------------------------
  5527                                  ;
  5528                                  ;       Routine:        ConSecond
  5529                                  ;
  5530                                  ;       Description:    This routine Handles the SECOND command.
  5531                                  ;
  5532                                  ;-----------------------------------------------------------------------------------------------------------------------
  5533                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5533                              <1> ConSecond :
  5533 00000364 BB1C090000          <1>  mov ebx,%1
  5533 00000369 B015                <1>  mov al,eReadRealTimeClock
  5533 0000036B CD30                <1>  int _svc
  5534                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5534 0000036D BB1C090000          <1>  mov ebx,%1
  5534 00000372 BACC080000          <1>  mov edx,%2
  5534 00000377 B010                <1>  mov al,ePutSecondString
  5534 00000379 CD30                <1>  int _svc
  5535                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5535 0000037B BACC080000          <1>  mov edx,%1
  5535 00000380 B009                <1>  mov al,ePutConsoleString
  5535 00000382 CD30                <1>  int _svc
  5536                                                          putConsoleString  czNewLine                             ;write newline to console
  5536 00000384 BA[7F050000]        <1>  mov edx,%1
  5536 00000389 B009                <1>  mov al,ePutConsoleString
  5536 0000038B CD30                <1>  int _svc
  5537 0000038D C3                                              ret                                                     ;return
  5538                                  ;-----------------------------------------------------------------------------------------------------------------------
  5539                                  ;
  5540                                  ;       Routine:        ConTime
  5541                                  ;
  5542                                  ;       Description:    This routine Handles the TIME command.
  5543                                  ;
  5544                                  ;-----------------------------------------------------------------------------------------------------------------------
  5545                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5545                              <1> ConTime :
  5545 0000038E BB1C090000          <1>  mov ebx,%1
  5545 00000393 B015                <1>  mov al,eReadRealTimeClock
  5545 00000395 CD30                <1>  int _svc
  5546                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5546 00000397 BB1C090000          <1>  mov ebx,%1
  5546 0000039C BACC080000          <1>  mov edx,%2
  5546 000003A1 B011                <1>  mov al,ePutTimeString
  5546 000003A3 CD30                <1>  int _svc
  5547                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5547 000003A5 BACC080000          <1>  mov edx,%1
  5547 000003AA B009                <1>  mov al,ePutConsoleString
  5547 000003AC CD30                <1>  int _svc
  5548                                                          putConsoleString  czNewLine                             ;write newline to console
  5548 000003AE BA[7F050000]        <1>  mov edx,%1
  5548 000003B3 B009                <1>  mov al,ePutConsoleString
  5548 000003B5 CD30                <1>  int _svc
  5549 000003B7 C3                                              ret                                                     ;return
  5550                                  ;-----------------------------------------------------------------------------------------------------------------------
  5551                                  ;
  5552                                  ;       Routine:        ConVersion
  5553                                  ;
  5554                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5555                                  ;
  5556                                  ;-----------------------------------------------------------------------------------------------------------------------
  5557                                  ConVersion              putConsoleString czTitle                                ;display version message
  5557                              <1> ConVersion :
  5557 000003B8 BA[89050000]        <1>  mov edx,%1
  5557 000003BD B009                <1>  mov al,ePutConsoleString
  5557 000003BF CD30                <1>  int _svc
  5558 000003C1 C3                                              ret                                                     ;return
  5559                                  ;-----------------------------------------------------------------------------------------------------------------------
  5560                                  ;
  5561                                  ;       Routine:        ConWeekday
  5562                                  ;
  5563                                  ;       Description:    This routine handles the WEEKDAY command.
  5564                                  ;
  5565                                  ;-----------------------------------------------------------------------------------------------------------------------
  5566                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5566                              <1> ConWeekday :
  5566 000003C2 BB1C090000          <1>  mov ebx,%1
  5566 000003C7 B015                <1>  mov al,eReadRealTimeClock
  5566 000003C9 CD30                <1>  int _svc
  5567                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5567 000003CB BB1C090000          <1>  mov ebx,%1
  5567 000003D0 BACC080000          <1>  mov edx,%2
  5567 000003D5 B012                <1>  mov al,ePutWeekdayString
  5567 000003D7 CD30                <1>  int _svc
  5568                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5568 000003D9 BACC080000          <1>  mov edx,%1
  5568 000003DE B009                <1>  mov al,ePutConsoleString
  5568 000003E0 CD30                <1>  int _svc
  5569                                                          putConsoleString  czNewLine                             ;write newline to console
  5569 000003E2 BA[7F050000]        <1>  mov edx,%1
  5569 000003E7 B009                <1>  mov al,ePutConsoleString
  5569 000003E9 CD30                <1>  int _svc
  5570 000003EB C3                                              ret                                                     ;return
  5571                                  ;-----------------------------------------------------------------------------------------------------------------------
  5572                                  ;
  5573                                  ;       Routine:        ConWeekdayName
  5574                                  ;
  5575                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5576                                  ;
  5577                                  ;-----------------------------------------------------------------------------------------------------------------------
  5578                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5578                              <1> ConWeekdayName :
  5578 000003EC BB1C090000          <1>  mov ebx,%1
  5578 000003F1 B015                <1>  mov al,eReadRealTimeClock
  5578 000003F3 CD30                <1>  int _svc
  5579                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5579 000003F5 BB1C090000          <1>  mov ebx,%1
  5579 000003FA BACC080000          <1>  mov edx,%2
  5579 000003FF B013                <1>  mov al,ePutWeekdayNameString
  5579 00000401 CD30                <1>  int _svc
  5580                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5580 00000403 BACC080000          <1>  mov edx,%1
  5580 00000408 B009                <1>  mov al,ePutConsoleString
  5580 0000040A CD30                <1>  int _svc
  5581                                                          putConsoleString     czNewLine                                  ;write newline to console
  5581 0000040C BA[7F050000]        <1>  mov edx,%1
  5581 00000411 B009                <1>  mov al,ePutConsoleString
  5581 00000413 CD30                <1>  int _svc
  5582 00000415 C3                                              ret                                                             ;return
  5583                                  ;-----------------------------------------------------------------------------------------------------------------------
  5584                                  ;
  5585                                  ;       Routine:        ConYear
  5586                                  ;
  5587                                  ;       Description:    This routine Handles the YEAR command.
  5588                                  ;
  5589                                  ;-----------------------------------------------------------------------------------------------------------------------
  5590                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5590                              <1> ConYear :
  5590 00000416 BB1C090000          <1>  mov ebx,%1
  5590 0000041B B015                <1>  mov al,eReadRealTimeClock
  5590 0000041D CD30                <1>  int _svc
  5591                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5591 0000041F BB1C090000          <1>  mov ebx,%1
  5591 00000424 BACC080000          <1>  mov edx,%2
  5591 00000429 B014                <1>  mov al,ePutYearString
  5591 0000042B CD30                <1>  int _svc
  5592                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5592 0000042D BACC080000          <1>  mov edx,%1
  5592 00000432 B009                <1>  mov al,ePutConsoleString
  5592 00000434 CD30                <1>  int _svc
  5593                                                          putConsoleString  czNewLine                             ;write newline to console
  5593 00000436 BA[7F050000]        <1>  mov edx,%1
  5593 0000043B B009                <1>  mov al,ePutConsoleString
  5593 0000043D CD30                <1>  int _svc
  5594 0000043F C3                                              ret                                                     ;return
  5595                                  ;-----------------------------------------------------------------------------------------------------------------------
  5596                                  ;
  5597                                  ;       Routine:        ConYearIsLeap
  5598                                  ;
  5599                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5600                                  ;
  5601                                  ;-----------------------------------------------------------------------------------------------------------------------
  5602                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5602                              <1> ConYearIsLeap :
  5602 00000440 BB1C090000          <1>  mov ebx,%1
  5602 00000445 B015                <1>  mov al,eReadRealTimeClock
  5602 00000447 CD30                <1>  int _svc
  5603                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5603 00000449 BB1C090000          <1>  mov ebx,%1
  5603 0000044E B007                <1>  mov al,eIsLeapYear
  5603 00000450 CD30                <1>  int _svc
  5604                                  
  5605 00000452 E30B                                            jecxz   .10                                             ;branch if not leap
  5606                                  
  5607                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5607 00000454 BA[B9050000]        <1>  mov edx,%1
  5607 00000459 B009                <1>  mov al,ePutConsoleString
  5607 0000045B CD30                <1>  int _svc
  5608                                  
  5609 0000045D EB09                                            jmp     .20                                             ;continue
  5610                                  
  5611                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5611                              <1> .10 :
  5611 0000045F BA[D4050000]        <1>  mov edx,%1
  5611 00000464 B009                <1>  mov al,ePutConsoleString
  5611 00000466 CD30                <1>  int _svc
  5612 00000468 C3                      .20                     ret                                                     ;return
  5613                                  ;-----------------------------------------------------------------------------------------------------------------------
  5614                                  ;
  5615                                  ;       Tables
  5616                                  ;
  5617                                  ;-----------------------------------------------------------------------------------------------------------------------
  5618                                                                                                                  ;---------------------------------------
  5619                                                                                                                  ;  Command Jump Table
  5620                                                                                                                  ;---------------------------------------
  5621                                  tConJmpTbl              equ     $                                               ;command jump table
  5622 00000469 EC030000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  5623 0000046D 40040000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  5624 00000471 3A030000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  5625 00000475 7A010000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  5626 00000479 B8030000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  5627 0000047D C2030000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  5628 00000481 EE010000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  5629 00000485 43020000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  5630 00000489 E6020000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  5631 0000048D 64030000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  5632 00000491 21010000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  5633 00000495 10030000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  5634 00000499 26010000                                        dd      ConDate         - ConCode                       ;date command routine offset
  5635 0000049D 7A010000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  5636 000004A1 7F010000                                        dd      ConFree         - ConCode                       ;free command routine offset
  5637 000004A5 C1010000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  5638 000004A9 EB010000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  5639 000004AD 7A010000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  5640 000004B1 8E030000                                        dd      ConTime         - ConCode                       ;time command routine offset
  5641 000004B5 16040000                                        dd      ConYear         - ConCode                       ;year command routine offset
  5642 000004B9 21010000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  5643 000004BD 50010000                                        dd      ConDay          - ConCode                       ;day command routine offset
  5644 000004C1 43020000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  5645 000004C5 B8030000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  5646                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  5647                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  5648                                                                                                                  ;---------------------------------------
  5649                                                                                                                  ;  Command Name Table
  5650                                                                                                                  ;---------------------------------------
  5651                                  tConCmdTbl              equ     $                                               ;command name table
  5652 000004C9 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  5652 000004D2 4E414D4500         
  5653 000004D7 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  5653 000004E0 45415000           
  5654 000004E4 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  5654 000004ED 4D4500             
  5655 000004F0 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  5655 000004F9 00                 
  5656 000004FA 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  5657 00000503 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  5658 0000050C 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  5659 00000514 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  5660 0000051C 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  5661 00000524 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  5662 0000052C 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  5663 00000533 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  5664 0000053A 054441544500                                    db      5,"DATE",0                                      ;date command
  5665 00000540 054558495400                                    db      5,"EXIT",0                                      ;exit command
  5666 00000546 054652454500                                    db      5,"FREE",0                                      ;free command
  5667 0000054C 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  5668 00000552 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  5669 00000558 055155495400                                    db      5,"QUIT",0                                      ;quit command
  5670 0000055E 0554494D4500                                    db      5,"TIME",0                                      ;time command
  5671 00000564 055945415200                                    db      5,"YEAR",0                                      ;year command
  5672 0000056A 04434C5300                                      db      4,"CLS",0                                       ;cls command
  5673 0000056F 0444415900                                      db      4,"DAY",0                                       ;day command
  5674 00000574 044D454D00                                      db      4,"MEM",0                                       ;mem command
  5675 00000579 0456455200                                      db      4,"VER",0                                       ;ver command
  5676 0000057E 00                                              db      0                                               ;end of table
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678                                  ;
  5679                                  ;       Constants
  5680                                  ;
  5681                                  ;-----------------------------------------------------------------------------------------------------------------------
  5682 0000057F 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  5683 00000582 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  5684 00000587 3A00                    czPrompt                db      ":",0                                           ;prompt string
  5685 00000589 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5685 00000592 65726174696E672053-
  5685 0000059B 797374656D20312E30-
  5685 000005A4 0D0A00             
  5686 000005A7 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5686 000005B0 6F6D6D616E640D0A00 
  5687 000005B9 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  5687 000005C2 69732061206C656170-
  5687 000005CB 20796561722E0D0A00 
  5688 000005D4 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  5688 000005DD 6973206E6F74206120-
  5688 000005E6 6C6561702079656172-
  5688 000005EF 2E0D0A00           
  5689 000005F3 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  5690                                  %endif
  5691                                  %ifdef BUILDDISK
  5692                                  ;-----------------------------------------------------------------------------------------------------------------------
  5693                                  ;
  5694                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5695                                  ;
  5696                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5697                                  ;
  5698                                  ;-----------------------------------------------------------------------------------------------------------------------
  5699                                  section                 unused                                                  ;unused disk space
  5700                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5701                                  %endif
  5702                                  ;=======================================================================================================================
  5703                                  ;
  5704                                  ;       End of Program Code
  5705                                  ;
  5706                                  ;=======================================================================================================================
