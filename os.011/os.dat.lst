     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.011
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading memory sizes from the BIOS
     8                                  ;                       and the Real Time Clock (RTC) chip.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMEM...         Memory Management values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   279                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   280                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   281                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   282                                  ;-----------------------------------------------------------------------------------------------------------------------
   283                                  ;
   284                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   285                                  ;
   286                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   287                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   288                                  ;
   289                                  ;       0.......        Segment is not present in memory (triggers int 11)
   290                                  ;       1.......        Segment is present in memory
   291                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   292                                  ;       ...0....        Segment is a system segment
   293                                  ;       ...00010                Local Descriptor Table
   294                                  ;       ...00101                Task Gate
   295                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   296                                  ;       ...01100                Call Gate (386)
   297                                  ;       ...01110                Interrupt Gate (386)
   298                                  ;       ...01111                Trap Gate (386)
   299                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   300                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   301                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   302                                  ;
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   305                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   306                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   307                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   308                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   309                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   310                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   311                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  ;
   314                                  ;       Firmware-Defined Values
   315                                  ;
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  ;
   319                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   320                                  ;
   321                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   322                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   323                                  ;
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   326                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   327                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   328                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   329                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   330                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   331                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   332                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   333                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   334                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   335                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   336                                  ;-----------------------------------------------------------------------------------------------------------------------
   337                                  ;
   338                                  ;       Standards-Based Values
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;
   343                                  ;       ASCII                                                                   EASCII...
   344                                  ;
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   347                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   348                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   349                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   350                                  EASCIISPACE             equ     020h                                            ;space
   351                                  EASCIIUPPERA            equ     041h                                            ;'A'
   352                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   353                                  EASCIILOWERA            equ     061h                                            ;'a'
   354                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   355                                  EASCIITILDE             equ     07Eh                                            ;'~'
   356                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   357                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   358                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   359                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   360                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   361                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   362                                  EASCIICASE              equ     00100000b                                       ;case bit
   363                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   364                                  ;-----------------------------------------------------------------------------------------------------------------------
   365                                  ;
   366                                  ;       Operating System Values
   367                                  ;
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ;
   371                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   372                                  ;
   373                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   374                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   375                                  ;
   376                                  ;-----------------------------------------------------------------------------------------------------------------------
   377                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   378                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   379                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   380                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   381                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   382                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   383                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  ;       Console Constants                                                       ECON...
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  ECONCOLS                equ     80                                              ;columns per row
   388                                  ECONROWS                equ     24                                              ;console rows
   389                                  ECONOIAROW              equ     24                                              ;operator information area row
   390                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   391                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   392                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   393                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   394                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   395                                  ;-----------------------------------------------------------------------------------------------------------------------
   396                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   399                                  EGDTCGA                 equ     020h                                            ;cga video selector
   400                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   401                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   402                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   403                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   404                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   405                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;       Keyboard Flags                                                          EKEYF...
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   410                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   411                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   412                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   413                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   414                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   415                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   416                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   417                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   418                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   419                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ;       Kernel Constants                                                        EKRN...
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   424                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   425                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   426                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   427                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   428                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   429                                  ;-----------------------------------------------------------------------------------------------------------------------
   430                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Memory Management Constants                                             EMEM...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   437                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   438                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   439                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   440                                  ;-----------------------------------------------------------------------------------------------------------------------
   441                                  ;       Message Identifiers                                                     EMSG...
   442                                  ;-----------------------------------------------------------------------------------------------------------------------
   443                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   444                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   445                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   446                                  ;=======================================================================================================================
   447                                  ;
   448                                  ;       Structures
   449                                  ;
   450                                  ;=======================================================================================================================
   451                                  ;-----------------------------------------------------------------------------------------------------------------------
   452                                  ;
   453                                  ;       MEMBLOCK
   454                                  ;
   455                                  ;       The MEMBLOCK structure defines a memory block.
   456                                  ;
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  struc                   MEMBLOCK
   459 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   460 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   461 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   462 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   463 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   464 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   465 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   466 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   467                                  EMEMBLOCKLEN            equ     ($-.signature)
   468                                  endstruc
   469                                  ;-----------------------------------------------------------------------------------------------------------------------
   470                                  ;
   471                                  ;       MEMROOT
   472                                  ;
   473                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   474                                  ;
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  struc                   MEMROOT
   477 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   478 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   479 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   480 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   481 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   482 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   483                                  EMEMROOTLEN             equ     ($-.firstcontig)
   484                                  endstruc
   485                                  ;-----------------------------------------------------------------------------------------------------------------------
   486                                  ;
   487                                  ;       MQUEUE
   488                                  ;
   489                                  ;       The MQUEUE structure maps memory used for a message queue.
   490                                  ;
   491                                  ;-----------------------------------------------------------------------------------------------------------------------
   492                                  struc                   MQUEUE
   493 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   494 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   495 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   496                                  endstruc
   497                                  ;-----------------------------------------------------------------------------------------------------------------------
   498                                  ;
   499                                  ;       OSDATA
   500                                  ;
   501                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   502                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   503                                  ;
   504                                  ;-----------------------------------------------------------------------------------------------------------------------
   505                                  struc                   OSDATA
   506 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   507 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   508 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   509 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   510 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   511 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   512 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   513 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   514 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   515 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   516 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   517 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   518 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   519 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   520 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   521 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   522 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   523 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   524 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   525 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   526 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   527 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   528 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   529 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   530 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   531 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   532 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   533 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   534 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   535 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   536 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   537 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   538 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   539 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   540 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   541 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   542 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   543 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   544 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   545 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   546 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   547 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   548 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   549 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   550 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   551 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   552 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   553 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   554 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   555 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   556 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   557 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   558 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   559 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   560 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   561 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   562 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   563 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   564 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   565 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   566 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   567 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   568 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   569 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   570 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   571 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   572 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   573 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   574 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   575 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   576 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   577 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   578 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   579 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   580 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   581 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   582 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   583 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   584 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   585 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   586 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   587 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   588 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   589 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   590 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   591 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   592 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   593 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   594 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   595 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   596 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   597 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   598 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   599 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   600 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   601 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   602 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   603 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   604 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   605 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   606 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   607                                  ;-----------------------------------------------------------------------------------------------------------------------
   608                                  ;
   609                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   610                                  ;
   611                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   612                                  ;
   613                                  ;-----------------------------------------------------------------------------------------------------------------------
   614                                  ECONDATA                equ     ($)
   615 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   616 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   617 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   618 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   619 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   620 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   621 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   622 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   623 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   624 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   625 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   626 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   627 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   628 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   629 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   630 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   631 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   632 00000820 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   633 00000870 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   634 000008C0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   635 00000910 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   636 0000091B <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   637 00000926 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   638 00000931 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   639                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   640                                  ;-----------------------------------------------------------------------------------------------------------------------
   641                                  ;
   642                                  ;       End of OS Variables
   643                                  ;
   644                                  ;-----------------------------------------------------------------------------------------------------------------------
   645                                  endstruc
   646                                  ;-----------------------------------------------------------------------------------------------------------------------
   647                                  ;
   648                                  ;       Macros
   649                                  ;
   650                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   651                                  ;
   652                                  ;-----------------------------------------------------------------------------------------------------------------------
   653                                  %macro                  mint    1
   654                                  _%1                     equ     ($-$$) / EX86DESCLEN
   655                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   656                                  %endmacro
   657                                  %macro                  mtrap   1
   658                                  _%1                     equ     ($-$$) / EX86DESCLEN
   659                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   660                                  %endmacro
   661                                  %macro                  menter  1
   662                                  ?%1                     equ     ($-$$)
   663                                  %endmacro
   664                                  %macro                  tsvce   1
   665                                  e%1                     equ     ($-tsvc)/4
   666                                                          dd      %1
   667                                  %endmacro
   668                                  %ifdef BUILDBOOT
   669                                  ;=======================================================================================================================
   670                                  ;
   671                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   672                                  ;
   673                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   674                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   675                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   676                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   677                                  ;
   678                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   679                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   680                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   681                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   682                                  ;       immediately followed by a disk parameter table.
   683                                  ;
   684                                  ;=======================================================================================================================
   685                                                          cpu     8086                                            ;assume minimal CPU
   686                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   687                                                          bits    16                                              ;16-bit code at power-up
   688                                  %ifdef BUILDPREP
   689                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   690                                  %else
   691 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   692                                  %endif
   693                                  ;-----------------------------------------------------------------------------------------------------------------------
   694                                  ;
   695                                  ;       Disk Parameter Table
   696                                  ;
   697                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   698                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   699                                  ;
   700                                  ;-----------------------------------------------------------------------------------------------------------------------
   701 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   702 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   703 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   704 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   705 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   706 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   707 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   708 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   709 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   710                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   711 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   712 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   713 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   714                                  ;
   715                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   716                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   717                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   718                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   719                                  ;       given several possible starting values for CS:IP.
   720                                  ;
   721                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   722 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   723                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   724 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   725 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   726 00000025 B104                                            mov     cl,4                                            ;shift count
   727 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   728 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   729 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   730                                  ;
   731                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   732                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   733                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   734                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   735                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   736                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   737                                  ;
   738 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   739 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   740 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   741 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   742 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   743                                  ;
   744                                  ;       Our boot addressability is now set up according to the following diagram.
   745                                  ;
   746                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   747                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   748                                  ;                               |  256 = 100h bytes                             |
   749                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   750                                  ;                               |  Boot Sector (vstart=0100h)                   |
   751                                  ;                               |  1 sector = 512 = 200h bytes                  |
   752                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   753                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   754                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   755                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   756                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   757                                  ;                               |  2 sectors = 1024 = 400h bytes
   758                                  ;                       009400  +-----------------------------------------------+ DS:1900
   759                                  ;
   760                                  ;       On entry, DL indicates the drive being booted from.
   761                                  ;
   762 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   763                                  ;
   764                                  ;       Compute directory i/o buffer address.
   765                                  ;
   766 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   767 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   768 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   769 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   770                                  ;
   771                                  ;       Compute segment where os.com will be loaded.
   772                                  ;
   773 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   774 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   775 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   776 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   777                                  ;
   778                                  ;       Set the video mode to 80 column, 25 row, text.
   779                                  ;
   780 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   781 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   782                                  ;
   783                                  ;       Write a message to the console so we know we have our addressability established.
   784                                  ;
   785 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   786 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   787                                  ;
   788                                  ;       Initialize the number of directory sectors to search.
   789                                  ;
   790 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   791 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   792                                  ;
   793                                  ;       Compute number of directory sectors and initialize overhead count.
   794                                  ;
   795 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   796 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   797 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   798 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   799                                  ;
   800                                  ;       Compute directory entries per sector.
   801                                  ;
   802 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   803 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   804 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   805                                  ;
   806                                  ;       Compute first logical directory sector and update overhead count.
   807                                  ;
   808 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   809 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   810 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   811 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   812 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   813 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   814                                  ;
   815                                  ;       Read directory sector.
   816                                  ;
   817 0000008E B001                    .30                     mov     al,1                                            ;sector count
   818 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   819 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   820 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   821                                  ;
   822                                  ;       Setup variables to search this directory sector.
   823                                  ;
   824 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   825 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   826 000000A1 7603                                            jna     .40                                             ;no, continue
   827 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   828 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   829 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   830 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   831                                  ;
   832                                  ;       Loop through directory sectors searching for kernel program.
   833                                  ;
   834 000000B1 56                      .50                     push    si                                              ;save kernel name address
   835 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   836 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   837 000000B6 FC                                              cld                                                     ;forward strings
   838 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   839 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   840 000000BA 5E                                              pop     si                                              ;restore kernel name address
   841 000000BB 7418                                            je      .60                                             ;exit loop if found
   842 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   843 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   844 000000C2 75ED                                            jnz     .50                                             ;next entry
   845                                  ;
   846                                  ;       Repeat search if we are not at the end of the directory.
   847                                  ;
   848 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   849 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   850 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   851 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   852 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   853                                  ;
   854                                  ;       If we find the kernel program in the directory, read the FAT.
   855                                  ;
   856 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   857 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   858 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   859 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   860 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   861 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   862                                  ;
   863                                  ;       Get the starting cluster of the kernel program and target address.
   864                                  ;
   865 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   866 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   867                                  ;
   868                                  ;       Read each program cluster into RAM.
   869                                  ;
   870 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   871 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   872 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   873 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   874 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   875 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   876 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   877 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   878 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   879                                  ;
   880                                  ;       Update buffer pointer for next cluster.
   881                                  ;
   882 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   883 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   884 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   885 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   886 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   887                                  ;
   888                                  ;       Compute next cluster number.
   889                                  ;
   890 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   891 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   892 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   893 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   894 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   895 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   896 00000120 83E701                                          and     di,1                                            ;get low bit
   897 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   898 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   899 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   900                                  ;
   901                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   902                                  ;
   903 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   904 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   905 00000130 B104                                            mov     cl,4                                            ;shift count
   906 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   907 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   908 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   909 0000013A 75B2                                            jne     .70                                             ;no, continue
   910                                  ;
   911                                  ;       Transfer control to the operating system program.
   912                                  ;
   913 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   914 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   915 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   916                                  ;
   917                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   918                                  ;
   919 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   920 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   921 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   922 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   923 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   924 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   925 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   926 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   927 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   928 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   929                                  ;
   930                                  ;       Try maxtries times to read sector.
   931                                  ;
   932 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   933 00000160 53                      .10                     push    bx                                              ;save buffer address
   934 00000161 51                                              push    cx                                              ;save retry count
   935 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   936 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   937 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   938 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   939 0000016F 59                                              pop     cx                                              ;restore retry count
   940 00000170 5B                                              pop     bx                                              ;restore buffer address
   941 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   942 00000173 E2EB                                            loop    .10                                             ;retry
   943                                  ;
   944                                  ;       Handle disk error: convert to ASCII and store in error string.
   945                                  ;
   946 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   947 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   948 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   949 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   950 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   951 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   952 00000183 7203                                            jb      .20                                             ;continue if numeral
   953 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   954 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   955 0000018A 7203                                            jb      .30                                             ;continue if numeral
   956 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   957 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   958 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   959 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   960                                  ;
   961                                  ;       Wait for a key press.
   962                                  ;
   963 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   964 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   965 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   966 0000019E FB                                              sti                                                     ;enable maskable interrupts
   967 0000019F F4                                              hlt                                                     ;wait for interrupt
   968 000001A0 EBF6                                            jmp     .10                                             ;repeat
   969                                  ;
   970                                  ;       Reset the system.
   971                                  ;
   972 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   973 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   974 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   975 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   976 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   977                                  ;
   978                                  ;       Display text message.
   979                                  ;
   980 000001AA FC                      BootPrint               cld                                                     ;forward strings
   981 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   982 000001AC 84C0                                            test    al,al                                           ;end of string?
   983 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   984 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   985 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   986 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   987 000001B6 C3                      BootReturn              ret                                                     ;return
   988                                  ;-----------------------------------------------------------------------------------------------------------------------
   989                                  ;
   990                                  ;       Constants
   991                                  ;
   992                                  ;-----------------------------------------------------------------------------------------------------------------------
   993 000001B7 90                                              align   2
   994 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   995 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   995 000001C3 4F4D               
   996 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   996 000001CE 530D0A00           
   997 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   997 000001DB 7220               
   998 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   999 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   999 000001E9 6700               
  1000                                  ;-----------------------------------------------------------------------------------------------------------------------
  1001                                  ;
  1002                                  ;       Work Areas
  1003                                  ;
  1004                                  ;-----------------------------------------------------------------------------------------------------------------------
  1005 000001EB 90                                              align   2
  1006 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1007 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1008 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1009 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1010 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1011                                  wwReadCountCommand      equ     $                                               ;read count and command
  1012 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1013 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1014                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1015 000001F8 00                      wbDrive                 db      0                                               ;drive
  1016 000001F9 00                      wbHead                  db      0                                               ;head
  1017                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1018 000001FA 00                                              db      0                                               ;sector
  1019 000001FB 00                      wbTrack                 db      0                                               ;track
  1020 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1021 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1022                                  %endif
  1023                                  %ifdef BUILDPREP
  1024                                  ;=======================================================================================================================
  1025                                  ;
  1026                                  ;       Diskette Preparation Code
  1027                                  ;
  1028                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1029                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1030                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1031                                  ;
  1032                                  ;=======================================================================================================================
  1033                                  ;
  1034                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1035                                  ;
  1036                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1037                                                          call    BootPrint                                       ;display message
  1038                                  ;
  1039                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1040                                  ;
  1041                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1042                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1043                                                          jnz     .20                                             ;continue if key pressed
  1044                                                          sti                                                     ;enable interrupts
  1045                                                          hlt                                                     ;wait for interrupt
  1046                                                          jmp     .10                                             ;repeat
  1047                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1048                                                          je      .30                                             ;yes, branch
  1049                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1050                                                          jne     .10                                             ;no, repeat
  1051                                                          jmp     .120                                            ;yes, exit program
  1052                                  ;
  1053                                  ;       Display writing-sector message and patch the JMP instruction.
  1054                                  ;
  1055                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1056                                                          call    BootPrint                                       ;display message
  1057                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1058                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1059                                                          mov     [bx],ax                                         ;update the JMP instruction
  1060                                  ;
  1061                                  ;       Try to read the boot sector.
  1062                                  ;
  1063                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1064                                  .40                     push    cx                                              ;save remaining tries
  1065                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1066                                                          mov     dx,0                                            ;head zero, drive zero
  1067                                                          mov     cx,1                                            ;track zero, sector one
  1068                                                          mov     al,1                                            ;one sector
  1069                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1070                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1071                                                          pop     cx                                              ;restore remaining retries
  1072                                                          jnc     .50                                             ;skip ahead if successful
  1073                                                          loop    .40                                             ;try again
  1074                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1075                                                          jmp     .70                                             ;branch to error routine
  1076                                  ;
  1077                                  ;       Copy diskette parms from input buffer to output buffer.
  1078                                  ;
  1079                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1080                                                          add     si,11                                           ;skip over JMP and system ID
  1081                                                          mov     di,Boot                                         ;output buffer address
  1082                                                          add     di,11                                           ;skip over JMP and system ID
  1083                                                          mov     cx,19                                           ;length of diskette parameters
  1084                                                          cld                                                     ;forward string copies
  1085                                                          rep     movsb                                           ;copy diskette parameters
  1086                                  ;
  1087                                  ;       Try to write boot sector to diskette.
  1088                                  ;
  1089                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1090                                  .60                     push    cx                                              ;save remaining tries
  1091                                                          mov     bx,Boot                                         ;output buffer address
  1092                                                          mov     dx,0                                            ;head zero, drive zero
  1093                                                          mov     cx,1                                            ;track zero, sector one
  1094                                                          mov     al,1                                            ;one sector
  1095                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1096                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1097                                                          pop     cx                                              ;restore remaining retries
  1098                                                          jnc     .100                                            ;skip ahead if successful
  1099                                                          loop    .60                                             ;try again
  1100                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1101                                  ;
  1102                                  ;       Convert the error code to ASCII and display the error message.
  1103                                  ;
  1104                                  .70                     push    ax                                              ;save error code
  1105                                                          mov     al,ah                                           ;copy error code
  1106                                                          mov     ah,0                                            ;AX = error code
  1107                                                          mov     dl,10h                                          ;hexadecimal divisor
  1108                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1109                                                          or      ax,03030h                                       ;add ASCII zone digits
  1110                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1111                                                          jb      .80                                             ;yes, continue
  1112                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1113                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1114                                                          jb      .90                                             ;yes, continue
  1115                                                          add     al,7                                            ;no, make ASCII
  1116                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1117                                                          call    BootPrint                                       ;write error message
  1118                                                          pop     ax                                              ;restore error code
  1119                                  ;
  1120                                  ;       Display the completion message.
  1121                                  ;
  1122                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1123                                                          mov     al,ah                                           ;BIOS return code
  1124                                                          cmp     al,0                                            ;success?
  1125                                                          je      .110                                            ;yes, continue
  1126                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1127                                                          cmp     al,1                                            ;disk parameter error?
  1128                                                          je      .110                                            ;yes, continue
  1129                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1130                                                          cmp     al,2                                            ;address mark not found?
  1131                                                          je      .110                                            ;yes, continue
  1132                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1133                                                          cmp     al,3                                            ;protected disk?
  1134                                                          je      .110                                            ;yes, continue
  1135                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1136                                                          cmp     al,6                                            ;diskette removed?
  1137                                                          je      .110                                            ;yes, continue
  1138                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1139                                                          cmp     al,80H                                          ;drive timed out?
  1140                                                          je      .110                                            ;yes, continue
  1141                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1142                                  .110                    call    BootPrint                                       ;display result message
  1143                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1144                                                          int     021h                                            ;terminate DOS program
  1145                                                          ret                                                     ;return (should not execute)
  1146                                  ;-----------------------------------------------------------------------------------------------------------------------
  1147                                  ;
  1148                                  ;       Diskette Preparation Messages
  1149                                  ;
  1150                                  ;-----------------------------------------------------------------------------------------------------------------------
  1151                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1152                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1153                                                          db      13,10
  1154                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1155                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1156                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1157                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1158                                                          db      13,10,0
  1159                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1160                                                          db      13,10,0
  1161                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1162                                                          db      13,10,0
  1163                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1164                                                          db      13,10,0
  1165                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1166                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1167                                                          db      13,10,0
  1168                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1169                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1170                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1171                                                          db      13,10,"and retry."
  1172                                                          db      13,10,0
  1173                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1174                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1175                                                          db      13,10,"using another diskette."
  1176                                                          db      13,10,0
  1177                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1178                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1179                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1180                                                          db      13,10,0
  1181                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1182                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1183                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1184                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1185                                                          db      13,10,"is properly inserted in the diskette drive."
  1186                                                          db      13,10,0
  1187                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1188                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1189                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1190                                                          db      13,10,0
  1191                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1192                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1193                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1194                                                          db      13,10,0
  1195                                  wcPrepInBuf             equ     $
  1196                                  %endif
  1197                                  %ifdef BUILDDISK
  1198                                  ;=======================================================================================================================
  1199                                  ;
  1200                                  ;       File Allocation Tables
  1201                                  ;
  1202                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1203                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1204                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1205                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1206                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1207                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1208                                  ;       the last cluster in the chain.
  1209                                  ;
  1210                                  ;       Every three bytes encode two FAT entries as follows:
  1211                                  ;
  1212                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1213                                  ;
  1214                                  ;=======================================================================================================================
  1215                                  ;-----------------------------------------------------------------------------------------------------------------------
  1216                                  ;
  1217                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1218                                  ;
  1219                                  ;-----------------------------------------------------------------------------------------------------------------------
  1220                                  section                 fat1                                                    ;first copy of FAT
  1221                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1222                                                          db      005h,060h,000h, 007h,080h,000h
  1223                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1224                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1225                                                          db      011h,020h,001h, 013h,040h,001h
  1226                                                          db      015h,060h,001h, 017h,080h,001h
  1227                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1228                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1229                                                          db      021h,020h,002h, 023h,040h,002h
  1230                                                          db      025h,060h,002h, 027h,080h,002h
  1231                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1232                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1233                                  ;-----------------------------------------------------------------------------------------------------------------------
  1234                                  ;
  1235                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1236                                  ;
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238                                  section                 fat2                                                    ;second copy of FAT
  1239                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1240                                                          db      005h,060h,000h, 007h,080h,000h
  1241                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1242                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1243                                                          db      011h,020h,001h, 013h,040h,001h
  1244                                                          db      015h,060h,001h, 017h,080h,001h
  1245                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1246                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1247                                                          db      021h,020h,002h, 023h,040h,002h
  1248                                                          db      025h,060h,002h, 027h,080h,002h
  1249                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1250                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1251                                  ;-----------------------------------------------------------------------------------------------------------------------
  1252                                  ;
  1253                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1254                                  ;
  1255                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1256                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1257                                  ;       copy.
  1258                                  ;
  1259                                  ;-----------------------------------------------------------------------------------------------------------------------
  1260                                  section                 dir                                                     ;diskette directory
  1261                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1262                                                          db      020h                                            ;attribute (archive bit set)
  1263                                                          times   10 db 0                                         ;unused
  1264                                                          dw      0h                                              ;time
  1265                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1266                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1267                                                          dw      2                                               ;first cluster
  1268                                                          dd      05400h                                          ;file size
  1269                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1270                                  %endif
  1271                                  %ifdef BUILDCOM
  1272                                  ;=======================================================================================================================
  1273                                  ;
  1274                                  ;       OS.COM
  1275                                  ;
  1276                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1277                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1278                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1279                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1280                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1281                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1282                                  ;
  1283                                  ;       Our loader addressability is set up according to the following diagram.
  1284                                  ;
  1285                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1286                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1287                                  ;                               |  256 = 100h bytes                             |
  1288                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1289                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1290                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1291                                  ;                       007e00  +-----------------------------------------------+
  1292                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1293                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1294                                  ;                               |                                               |
  1295                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1296                                  ;                               |                                               |
  1297                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1298                                  ;                               |  Loader Code                                  |
  1299                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1300                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1301                                  ;
  1302                                  ;=======================================================================================================================
  1303                                  ;-----------------------------------------------------------------------------------------------------------------------
  1304                                  ;
  1305                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1306                                  ;
  1307                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1308                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1309                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1310                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1311                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1312                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1313                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1314                                  ;       registers.
  1315                                  ;
  1316                                  ;-----------------------------------------------------------------------------------------------------------------------
  1317                                                          cpu     8086                                            ;assume minimal CPU
  1318                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1319                                                          bits    16                                              ;this is 16-bit code
  1320                                  Loader                  push    cs                                              ;use the code segment
  1321                                                          pop     ds                                              ;...as our data segment
  1322                                                          push    cs                                              ;use the code segment
  1323                                                          pop     es                                              ;...as our extra segment
  1324                                  ;
  1325                                  ;       Write a message to the console so we know we have our addressability established.
  1326                                  ;
  1327                                                          mov     si,czStartingMsg                                ;starting message
  1328                                                          call    PutTTYString                                    ;display loader message
  1329                                  ;
  1330                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1331                                  ;
  1332                                                          call    GetCPUType                                      ;AL = cpu type
  1333                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1334                                                          cmp     al,3                                            ;80386+?
  1335                                                          jb      LoaderExit                                      ;no, exit with error message
  1336                                                          cpu     386                                             ;allow 80386 instructions
  1337                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1338                                                          call    PutTTYString                                    ;display message
  1339                                  ;
  1340                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1341                                  ;
  1342                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1343                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1344                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1345                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1346                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1347                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1348                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1349                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1350                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1351                                                          call    PutTTYString                                    ;display message
  1352                                  ;
  1353                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1354                                  ;
  1355                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1356                                                          pop     es                                              ;... as target segment
  1357                                                          xor     di,di                                           ;ES:DI = target address
  1358                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1359                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1360                                                          cld                                                     ;forward strings
  1361                                                          rep     movsb                                           ;copy kernel image
  1362                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1363                                                          call    PutTTYString                                    ;display message
  1364                                  ;
  1365                                  ;       Switch to protected mode.
  1366                                  ;
  1367                                                          xor     si,si                                           ;ES:SI = gdt addr
  1368                                                          mov     ss,si                                           ;protected mode ss
  1369                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1370                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1371                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1372                                                          mov     dx,001Fh                                        ;outer delay loop count
  1373                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1374                                                          loop    $                                               ;wait out pending interrupts
  1375                                                          dec     dx                                              ;restore outer loop count
  1376                                                          jnz     .10                                             ;continue outer loop
  1377                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1378                                  ;
  1379                                  ;       Enable hardware and maskable interrupts.
  1380                                  ;
  1381                                                          xor     al,al                                           ;enable all registers code
  1382                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1383                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1384                                                          sti                                                     ;enable maskable interrupts
  1385                                  ;
  1386                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1387                                  ;
  1388                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1389                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1390                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1391                                  ;-----------------------------------------------------------------------------------------------------------------------
  1392                                  ;
  1393                                  ;       Routine:        LoaderExit
  1394                                  ;
  1395                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1396                                  ;
  1397                                  ;       In:             DS:SI   string address
  1398                                  ;
  1399                                  ;-----------------------------------------------------------------------------------------------------------------------
  1400                                  LoaderExit              call    PutTTYString                                    ;display error message
  1401                                  ;
  1402                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1403                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1404                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1405                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1406                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1407                                  ;
  1408                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1409                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1410                                                          jnz     .40                                             ;exit if key pressed
  1411                                                          sti                                                     ;enable maskable interrupts
  1412                                                          hlt                                                     ;wait for interrupt
  1413                                                          jmp     .30                                             ;repeat until keypress
  1414                                  ;
  1415                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1416                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1417                                  ;       HLT until the system resets.
  1418                                  ;
  1419                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1420                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1421                                  .50                     sti                                                     ;enable maskable interrupts
  1422                                                          hlt                                                     ;stop until reset, int, nmi
  1423                                                          jmp     .50                                             ;loop until restart kicks in
  1424                                  ;-----------------------------------------------------------------------------------------------------------------------
  1425                                  ;
  1426                                  ;       Routine:        GetCPUType
  1427                                  ;
  1428                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1429                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1430                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1431                                  ;
  1432                                  ;       Out:            AX      0 = 808x, v20, etc.
  1433                                  ;                               1 = 80186
  1434                                  ;                               2 = 80286
  1435                                  ;                               3 = 80386
  1436                                  ;
  1437                                  ;-----------------------------------------------------------------------------------------------------------------------
  1438                                  GetCPUType              mov     al,1                                            ;AL = 1
  1439                                                          mov     cl,32                                           ;shift count
  1440                                                          shr     al,cl                                           ;try a 32-bit shift
  1441                                                          or      al,al                                           ;did the shift happen?
  1442                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1443                                                          cpu     186
  1444                                                          push    sp                                              ;save stack pointer
  1445                                                          pop     cx                                              ;...into cx
  1446                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1447                                                          jne     .10                                             ;yes, cpu is 80186
  1448                                                          cpu     286
  1449                                                          inc     ax                                              ;AX = 2
  1450                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1451                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1452                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1453                                                          jz      .10                                             ;yes, cpu is 80286
  1454                                                          inc     ax                                              ;AX = 3
  1455                                  .10                     ret                                                     ;return
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  ;
  1458                                  ;       Routine:        PutTTYString
  1459                                  ;
  1460                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1461                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1462                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1463                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1464                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1465                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1466                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1467                                  ;                       to LODSB is not needed.
  1468                                  ;
  1469                                  ;       In:             DS:SI   address of string
  1470                                  ;
  1471                                  ;       Out:            DF      0
  1472                                  ;                       ZF      1
  1473                                  ;                       AL      0
  1474                                  ;
  1475                                  ;-----------------------------------------------------------------------------------------------------------------------
  1476                                  PutTTYString            cld                                                     ;forward strings
  1477                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1478                                                          test    al,al                                           ;end of string?
  1479                                                          jz      .20                                             ;... yes, exit our loop
  1480                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1481                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1482                                                          jmp     .10                                             ;repeat until done
  1483                                  .20                     ret                                                     ;return
  1484                                  ;-----------------------------------------------------------------------------------------------------------------------
  1485                                  ;
  1486                                  ;       Loader Data
  1487                                  ;
  1488                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1489                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1490                                  ;
  1491                                  ;-----------------------------------------------------------------------------------------------------------------------
  1492                                                          align   2
  1493                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1494                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1495                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1496                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1497                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1498                                                          db      "Please press any key to restart the computer.",13,10,0
  1499                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1500                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1501                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1502                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1503                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1504                                  ;=======================================================================================================================
  1505                                  ;
  1506                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1507                                  ;
  1508                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1509                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1510                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1511                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1512                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1513                                  ;
  1514                                  ;=======================================================================================================================
  1515                                  ;=======================================================================================================================
  1516                                  ;
  1517                                  ;       Kernel Tables
  1518                                  ;
  1519                                  ;=======================================================================================================================
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                  ;
  1522                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1523                                  ;
  1524                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1525                                  ;       first descriptor must be all nulls.
  1526                                  ;
  1527                                  ;       6   5         4         3         2         1         0
  1528                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1529                                  ;       ----------------------------------------------------------------
  1530                                  ;       h......hffffmmmma......ab......................bn..............n
  1531                                  ;       00000000                        all areas have base addresses below 2^24
  1532                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1533                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1534                                  ;                   1001                present, ring-0, selector
  1535                                  ;
  1536                                  ;       h...h   hi-order base address (bits 24-31)
  1537                                  ;       ffff    flags
  1538                                  ;       mmmm    hi-order limit (bits 16-19)
  1539                                  ;       a...a   access
  1540                                  ;       b...b   lo-order base address (bits 0-23)
  1541                                  ;       n...n   lo-order limit (bits 0-15)
  1542                                  ;
  1543                                  ;-----------------------------------------------------------------------------------------------------------------------
  1544                                  section                 gdt                                                     ;global descriptor table
  1545                                                          dq      0000000000000000h                               ;00 required null selector
  1546                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1547                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1548                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1549                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1550                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1551                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1552                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1553                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1554                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1555                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1556                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1557                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1558                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1559                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1560                                  ;-----------------------------------------------------------------------------------------------------------------------
  1561                                  ;
  1562                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1563                                  ;
  1564                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1565                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1566                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1567                                  ;
  1568                                  ;       6   5         4         3         2         1         0
  1569                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1570                                  ;       ----------------------------------------------------------------
  1571                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1572                                  ;
  1573                                  ;       h...h   high-order offset (bits 16-31)
  1574                                  ;       P       present (0=unused interrupt)
  1575                                  ;       zz      descriptor privilege level
  1576                                  ;       S       storage segment (must be zero for IDT)
  1577                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1578                                  ;       S...S   handling code selector in GDT
  1579                                  ;       l...l   lo-order offset (bits 0-15)
  1580                                  ;
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                  section                 idt                                                     ;interrupt descriptor table
  1583                                                          mint    dividebyzero                                    ;00 divide by zero
  1584                                                          mint    singlestep                                      ;01 single step
  1585                                                          mint    nmi                                             ;02 non-maskable
  1586                                                          mint    break                                           ;03 break
  1587                                                          mint    into                                            ;04 into
  1588                                                          mint    bounds                                          ;05 bounds
  1589                                                          mint    badopcode                                       ;06 bad op code
  1590                                                          mint    nocoproc                                        ;07 no coprocessor
  1591                                                          mint    doublefault                                     ;08 double-fault
  1592                                                          mint    operand                                         ;09 operand
  1593                                                          mint    badtss                                          ;0a bad TSS
  1594                                                          mint    notpresent                                      ;0b not-present
  1595                                                          mint    stacklimit                                      ;0c stack limit
  1596                                                          mint    protection                                      ;0d general protection fault
  1597                                                          mint    int14                                           ;0e (reserved)
  1598                                                          mint    int15                                           ;0f (reserved)
  1599                                                          mint    coproccalc                                      ;10 (reserved)
  1600                                                          mint    int17                                           ;11 (reserved)
  1601                                                          mint    int18                                           ;12 (reserved)
  1602                                                          mint    int19                                           ;13 (reserved)
  1603                                                          mint    int20                                           ;14 (reserved)
  1604                                                          mint    int21                                           ;15 (reserved)
  1605                                                          mint    int22                                           ;16 (reserved)
  1606                                                          mint    int23                                           ;17 (reserved)
  1607                                                          mint    int24                                           ;18 (reserved)
  1608                                                          mint    int25                                           ;19 (reserved)
  1609                                                          mint    int26                                           ;1a (reserved)
  1610                                                          mint    int27                                           ;1b (reserved)
  1611                                                          mint    int28                                           ;1c (reserved)
  1612                                                          mint    int29                                           ;1d (reserved)
  1613                                                          mint    int30                                           ;1e (reserved)
  1614                                                          mint    int31                                           ;1f (reserved)
  1615                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1616                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1617                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1618                                                          mtrap   com2                                            ;23 IRQ3 com2
  1619                                                          mtrap   com1                                            ;24 IRQ4 com1
  1620                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1621                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1622                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1623                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1624                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1625                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1626                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1627                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1628                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1629                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1630                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1631                                                          mtrap   svc                                             ;30 OS services
  1632                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1633                                  ;=======================================================================================================================
  1634                                  ;
  1635                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1636                                  ;
  1637                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1638                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1639                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1640                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1641                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1642                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1643                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1644                                  ;
  1645                                  ;=======================================================================================================================
  1646                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1647                                                          cpu     386                                             ;allow 80386 instructions
  1648                                                          bits    32                                              ;this is 32-bit code
  1649                                  ;=======================================================================================================================
  1650                                  ;
  1651                                  ;       CPU Interrupt Handlers
  1652                                  ;
  1653                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1654                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1655                                  ;
  1656                                  ;=======================================================================================================================
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  ;
  1659                                  ;       INT0    Divide By Zero
  1660                                  ;
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                                          menter  dividebyzero                                    ;divide by zero
  1663                                                          push    0                                               ;store interrupt nbr
  1664                                                          push    czIntDivideByZero                               ;store message offset
  1665                                                          jmp     ReportInterrupt                                 ;report interrupt
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                  ;
  1668                                  ;       INT1    Single Step
  1669                                  ;
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                                          menter  singlestep                                      ;single step
  1672                                                          push    1                                               ;store interrupt nbr
  1673                                                          push    czIntSingleStep                                 ;store message offset
  1674                                                          jmp     ReportInterrupt                                 ;report interrupt
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                  ;
  1677                                  ;       INT2    Non-Maskable Interrupt
  1678                                  ;
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                                          menter  nmi                                             ;non-maskable
  1681                                                          push    2                                               ;store interrupt nbr
  1682                                                          push    czIntNonMaskable                                ;store message offset
  1683                                                          jmp     ReportInterrupt                                 ;report interrupt
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685                                  ;
  1686                                  ;       INT3    Break
  1687                                  ;
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                                          menter  break                                           ;break
  1690                                                          push    3                                               ;store interrupt nbr
  1691                                                          push    czIntBreak                                      ;store message offset
  1692                                                          jmp     ReportInterrupt                                 ;report interrupt
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                  ;
  1695                                  ;       INT4    Into
  1696                                  ;
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                                          menter  into                                            ;into
  1699                                                          push    4                                               ;store interrupt nbr
  1700                                                          push    czIntInto                                       ;store message offset
  1701                                                          jmp     ReportInterrupt                                 ;report interrupt
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                  ;
  1704                                  ;       INT5    Bounds
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                                          menter  bounds                                          ;bounds
  1708                                                          push    5                                               ;store interrupt nbr
  1709                                                          push    czIntBounds                                     ;store message offset
  1710                                                          jmp     ReportInterrupt                                 ;report interrupt
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                  ;
  1713                                  ;       INT6    Bad Operation Code
  1714                                  ;
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                                          menter  badopcode                                       ;bad opcode interrupt
  1717                                                          push    6                                               ;store interrupt nbr
  1718                                                          push    czIntBadOpCode                                  ;store message offset
  1719                                                          jmp     ReportInterrupt                                 ;report interrupt
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                  ;
  1722                                  ;       INT7    No Coprocessor
  1723                                  ;
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1726                                                          push    7                                               ;store interrupt nbr
  1727                                                          push    czIntNoCoprocessor                              ;store message offset
  1728                                                          jmp     ReportInterrupt                                 ;report interrupt
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                  ;
  1731                                  ;       INT8    Double Fault
  1732                                  ;
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                                          menter  doublefault                                     ;doublefault interrupt
  1735                                                          push    8                                               ;store interrupt nbr
  1736                                                          push    czIntDoubleFault                                ;store message offset
  1737                                                          jmp     ReportInterrupt                                 ;report interrupt
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                  ;
  1740                                  ;       INT9    Operand
  1741                                  ;
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                                          menter  operand                                         ;operand interrupt
  1744                                                          push    9                                               ;store interrupt nbr
  1745                                                          push    czIntOperand                                    ;store message offset
  1746                                                          jmp     ReportInterrupt                                 ;report interrupt
  1747                                  ;-----------------------------------------------------------------------------------------------------------------------
  1748                                  ;
  1749                                  ;       INT10   Bad Task State Segment
  1750                                  ;
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                                          menter  badtss                                          ;bad TSS interrupt
  1753                                                          push    10                                              ;store interrupt nbr
  1754                                                          push    czIntBadTSS                                     ;store message offset
  1755                                                          jmp     ReportInterrupt                                 ;report interrupt
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                  ;
  1758                                  ;       INT11   Not Present
  1759                                  ;
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                                          menter  notpresent                                      ;not present interrupt
  1762                                                          push    11                                              ;store interrupt nbr
  1763                                                          push    czIntNotPresent                                 ;store message offset
  1764                                                          jmp     ReportInterrupt                                 ;report interrupt
  1765                                  ;-----------------------------------------------------------------------------------------------------------------------
  1766                                  ;
  1767                                  ;       INT12   Stack Limit
  1768                                  ;
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                                          menter  stacklimit                                      ;stack limit interrupt
  1771                                                          push    12                                              ;store interrupt nbr
  1772                                                          push    czIntStackLimit                                 ;store message offset
  1773                                                          jmp     ReportInterrupt                                 ;report interrupt
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                  ;
  1776                                  ;       INT13   General Protection Fault
  1777                                  ;
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                                          menter  protection                                      ;protection fault interrupt
  1780                                                          push    13                                              ;store interrupt nbr
  1781                                                          push    czIntProtection                                 ;store message offset
  1782                                                          jmp     ReportInterrupt                                 ;report interrupt
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT14   Reserved
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  int14                                           ;(reserved)
  1789                                                          push    14                                              ;store interrupt nbr
  1790                                                          push    czIntReserved                                   ;store message offset
  1791                                                          jmp     ReportInterrupt                                 ;report interrupt
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                  ;
  1794                                  ;       INT15   Reserved
  1795                                  ;
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                                          menter  int15                                           ;(reserved)
  1798                                                          push    15                                              ;store interrupt nbr
  1799                                                          push    czIntReserved                                   ;store message offset
  1800                                                          jmp     ReportInterrupt                                 ;report interrupt
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                  ;
  1803                                  ;       INT16   Coprocessor Calculation
  1804                                  ;
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                                          menter  coproccalc                                      ;coprocessor calculation
  1807                                                          push    16                                              ;store interrupt nbr
  1808                                                          push    czIntCoprocessorCalc                            ;store message offset
  1809                                                          jmp     ReportInterrupt                                 ;report interrupt
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  ;
  1812                                  ;       INT17   Reserved
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                                          menter  int17                                           ;(reserved)
  1816                                                          push    17                                              ;store interrupt nbr
  1817                                                          push    czIntReserved                                   ;store message offset
  1818                                                          jmp     ReportInterrupt                                 ;report interrupt
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;       INT18   Reserved
  1822                                  ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                                          menter  int18                                           ;(reserved)
  1825                                                          push    18                                              ;store interrupt nbr
  1826                                                          push    czIntReserved                                   ;store message offset
  1827                                                          jmp     ReportInterrupt                                 ;report interrupt
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;       INT19   Reserved
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                                          menter  int19                                           ;(reserved)
  1834                                                          push    19                                              ;store interrupt nbr
  1835                                                          push    czIntReserved                                   ;store message offset
  1836                                                          jmp     ReportInterrupt                                 ;report interrupt
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                  ;
  1839                                  ;       INT20   Reserved
  1840                                  ;
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                                          menter  int20                                           ;(reserved)
  1843                                                          push    20                                              ;store interrupt nbr
  1844                                                          push    czIntReserved                                   ;store message offset
  1845                                                          jmp     ReportInterrupt                                 ;report interrupt
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  ;
  1848                                  ;       INT21   Reserved
  1849                                  ;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                                          menter  int21                                           ;(reserved)
  1852                                                          push    21                                              ;store interrupt nbr
  1853                                                          push    czIntReserved                                   ;store message offset
  1854                                                          jmp     ReportInterrupt                                 ;report interrupt
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       INT22   Reserved
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  int22                                           ;(reserved)
  1861                                                          push    22                                              ;store interrupt nbr
  1862                                                          push    czIntReserved                                   ;store message offset
  1863                                                          jmp     ReportInterrupt                                 ;report interrupt
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  ;
  1866                                  ;       INT23   Reserved
  1867                                  ;
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                                          menter  int23                                           ;(reserved)
  1870                                                          push    23                                              ;store interrupt nbr
  1871                                                          push    czIntReserved                                   ;store message offset
  1872                                                          jmp     ReportInterrupt                                 ;report interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       INT24   Reserved
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  int24                                           ;(reserved)
  1879                                                          push    24                                              ;store interrupt nbr
  1880                                                          push    czIntReserved                                   ;store message offset
  1881                                                          jmp     ReportInterrupt                                 ;report interrupt
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       INT25   Reserved
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  int25                                           ;(reserved)
  1888                                                          push    25                                              ;store interrupt nbr
  1889                                                          push    czIntReserved                                   ;store message offset
  1890                                                          jmp     ReportInterrupt                                 ;report interrupt
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;       INT26   Reserved
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                                          menter  int26                                           ;(reserved)
  1897                                                          push    26                                              ;store interrupt nbr
  1898                                                          push    czIntReserved                                   ;store message offset
  1899                                                          jmp     ReportInterrupt                                 ;report interrupt
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                  ;
  1902                                  ;       INT27   Reserved
  1903                                  ;
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                                          menter  int27                                           ;(reserved)
  1906                                                          push    27                                              ;store interrupt nbr
  1907                                                          push    czIntReserved                                   ;store message offset
  1908                                                          jmp     ReportInterrupt                                 ;report interrupt
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                  ;
  1911                                  ;       INT28   Reserved
  1912                                  ;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                                          menter  int28                                           ;(reserved)
  1915                                                          push    28                                              ;store interrupt nbr
  1916                                                          push    czIntReserved                                   ;store message offset
  1917                                                          jmp     ReportInterrupt                                 ;report interrupt
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                  ;
  1920                                  ;       INT29   Reserved
  1921                                  ;
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                                          menter  int29                                           ;(reserved)
  1924                                                          push    29                                              ;store interrupt nbr
  1925                                                          push    czIntReserved                                   ;store message offset
  1926                                                          jmp     ReportInterrupt                                 ;report interrupt
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  ;
  1929                                  ;       INT30   Reserved
  1930                                  ;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                                          menter  int30                                           ;(reserved)
  1933                                                          push    30                                              ;store interrupt nbr
  1934                                                          push    czIntReserved                                   ;store message offset
  1935                                                          jmp     ReportInterrupt                                 ;report interrupt
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937                                  ;
  1938                                  ;       INT31   Reserved
  1939                                  ;
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                                          menter  int31                                           ;(reserved)
  1942                                                          push    31                                              ;store interrupt nbr
  1943                                                          push    czIntReserved                                   ;store message offset
  1944                                                          jmp     ReportInterrupt                                 ;report interrupt
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       Routine:        ReportInterrupt
  1948                                  ;
  1949                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1950                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1951                                  ;
  1952                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1953                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1954                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1955                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1956                                  ;                       [esp+0]         error message address                   stored by push instructions
  1957                                  ;
  1958                                  ;       Out:            N/A             This routine does not exit.
  1959                                  ;
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1962                                                          push    es                                              ;save ES at time of interrupt
  1963                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1964                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1965                                  ;
  1966                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1967                                  ;
  1968                                  ;                       [ebp+56]        eflags
  1969                                  ;                       [ebp+52]        cs
  1970                                  ;                       [ebp+48]        eip
  1971                                  ;                       [ebp+44]        interrupt number (0-31)
  1972                                  ;                       [ebp+40]        error message address
  1973                                  ;                       [ebp+36]        ds
  1974                                  ;                       [ebp+32]        es
  1975                                  ;                       [ebp+28]        eax
  1976                                  ;                       [ebp+24]        ecx
  1977                                  ;                       [ebp+20]        edx
  1978                                  ;                       [ebp+16]        ebx
  1979                                  ;                       [ebp+12]        esp
  1980                                  ;                       [ebp+8]         ebp
  1981                                  ;                       [ebp+4]         esi
  1982                                  ;                       [ebp+0]         edi
  1983                                  ;
  1984                                                          push    cs                                              ;load code selector ...
  1985                                                          pop     ds                                              ;... into DS
  1986                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1987                                                          pop     es                                              ;... into ES
  1988                                  ;
  1989                                  ;       Display the interrupt report boundary box
  1990                                  ;
  1991                                                          mov     cl,13                                           ;column
  1992                                                          mov     ch,6                                            ;row
  1993                                                          mov     dl,50                                           ;width
  1994                                                          mov     dh,8                                            ;height
  1995                                                          mov     bh,07h                                          ;attribute
  1996                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1997                                  ;
  1998                                  ;       Display the report header
  1999                                  ;
  2000                                                          mov     cl,15                                           ;column
  2001                                                          mov     ch,7                                            ;row
  2002                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2003                                                          call    SetConsoleString                                ;draw text string
  2004                                  ;
  2005                                  ;       Display the interrupt description label
  2006                                  ;
  2007                                                          mov     cl,15                                           ;column
  2008                                                          mov     ch,8                                            ;row
  2009                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2010                                                          call    SetConsoleString                                ;draw text string
  2011                                  ;
  2012                                  ;       Display the interrupt number
  2013                                  ;
  2014                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2015                                                          mov     cl,26                                           ;column
  2016                                                          mov     ch,8                                            ;row
  2017                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2018                                  ;
  2019                                  ;       Display the interrupt name
  2020                                  ;
  2021                                                          mov     cl,29                                           ;column
  2022                                                          mov     ch,8                                            ;row
  2023                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2024                                                          call    SetConsoleString                                ;display interrupt description
  2025                                  ;
  2026                                  ;       Display the register values header
  2027                                  ;
  2028                                                          mov     cl,15                                           ;column
  2029                                                          mov     ch,10                                           ;row
  2030                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2031                                                          call    SetConsoleString                                ;draw text string
  2032                                  ;
  2033                                  ;       Display the EAX register label and value
  2034                                  ;
  2035                                                          mov     cl,15                                           ;column
  2036                                                          mov     ch,11                                           ;row
  2037                                                          mov     esi,czIntEAX                                    ;register EAX label
  2038                                                          call    SetConsoleString                                ;draw label
  2039                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2040                                                          mov     cl,19                                           ;column
  2041                                                          mov     ch,11                                           ;row
  2042                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2043                                  ;
  2044                                  ;       Display the ECX register label and value
  2045                                  ;
  2046                                                          mov     cl,15                                           ;column
  2047                                                          mov     ch,12                                           ;row
  2048                                                          mov     esi,czIntECX                                    ;label
  2049                                                          call    SetConsoleString                                ;draw label
  2050                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2051                                                          mov     cl,19                                           ;column
  2052                                                          mov     ch,12                                           ;row
  2053                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2054                                  ;
  2055                                  ;       Display the EDX register label and value
  2056                                  ;
  2057                                                          mov     cl,15                                           ;column
  2058                                                          mov     ch,13                                           ;row
  2059                                                          mov     esi,czIntEDX                                    ;label
  2060                                                          call    SetConsoleString                                ;draw label
  2061                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2062                                                          mov     cl,19                                           ;column
  2063                                                          mov     ch,13                                           ;row
  2064                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2065                                  ;
  2066                                  ;       Display the EBX register label and value
  2067                                  ;
  2068                                                          mov     cl,15                                           ;column
  2069                                                          mov     ch,14                                           ;row
  2070                                                          mov     esi,czIntEBX                                    ;label
  2071                                                          call    SetConsoleString                                ;draw label
  2072                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2073                                                          mov     cl,19                                           ;column
  2074                                                          mov     ch,14                                           ;row
  2075                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2076                                  ;
  2077                                  ;       Display the ESI register label and value
  2078                                  ;
  2079                                                          mov     cl,29                                           ;column
  2080                                                          mov     ch,11                                           ;row
  2081                                                          mov     esi,czIntESI                                    ;label
  2082                                                          call    SetConsoleString                                ;draw label
  2083                                                          mov     eax,[ebp+4]                                     ;ESI
  2084                                                          mov     cl,33                                           ;column
  2085                                                          mov     ch,11                                           ;row
  2086                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2087                                  ;
  2088                                  ;       Display the EDI register label and value
  2089                                  ;
  2090                                                          mov     cl,29                                           ;column
  2091                                                          mov     ch,12                                           ;row
  2092                                                          mov     esi,czIntEDI                                    ;label
  2093                                                          call    SetConsoleString                                ;draw label
  2094                                                          mov     eax,[ebp+0]                                     ;EDI
  2095                                                          mov     cl,33                                           ;column
  2096                                                          mov     ch,12                                           ;row
  2097                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2098                                  ;
  2099                                  ;       Display the EBP register label and value
  2100                                  ;
  2101                                                          mov     cl,29                                           ;column
  2102                                                          mov     ch,13                                           ;row
  2103                                                          mov     esi,czIntEBP                                    ;label
  2104                                                          call    SetConsoleString                                ;draw label
  2105                                                          mov     eax,[ebp+8]                                     ;EBP
  2106                                                          mov     cl,33                                           ;column
  2107                                                          mov     ch,13                                           ;row
  2108                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2109                                  ;
  2110                                  ;       Display the DS register label and value
  2111                                  ;
  2112                                                          mov     cl,42                                           ;column
  2113                                                          mov     ch,11                                           ;row
  2114                                                          mov     esi,czIntDS                                     ;label
  2115                                                          call    SetConsoleString                                ;draw label
  2116                                                          xor     eax,eax                                         ;zero register
  2117                                                          mov     ax,[ebp+36]                                     ;DS
  2118                                                          mov     cl,46                                           ;column
  2119                                                          mov     ch,11                                           ;row
  2120                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2121                                  ;
  2122                                  ;       Display the ES register label and value
  2123                                  ;
  2124                                                          mov     cl,42                                           ;column
  2125                                                          mov     ch,12                                           ;row
  2126                                                          mov     esi,czIntES                                     ;label
  2127                                                          call    SetConsoleString                                ;draw label
  2128                                                          xor     eax,eax                                         ;zero register
  2129                                                          mov     ax,[ebp+32]                                     ;ES
  2130                                                          mov     cl,46                                           ;column
  2131                                                          mov     ch,12                                           ;row
  2132                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2133                                  ;
  2134                                  ;       Display the SS register label and value
  2135                                  ;
  2136                                                          mov     cl,42                                           ;column
  2137                                                          mov     ch,13                                           ;row
  2138                                                          mov     esi,czIntSS                                     ;label
  2139                                                          call    SetConsoleString                                ;draw label
  2140                                                          xor     eax,eax                                         ;zero register
  2141                                                          mov     ax,ss                                           ;SS
  2142                                                          mov     cl,46                                           ;column
  2143                                                          mov     ch,13                                           ;row
  2144                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2145                                  ;
  2146                                  ;       Display the CS register lable and value
  2147                                  ;
  2148                                                          mov     cl,42                                           ;column
  2149                                                          mov     ch,14                                           ;row
  2150                                                          mov     esi,czIntCS                                     ;label
  2151                                                          call    SetConsoleString                                ;draw label
  2152                                                          xor     eax,eax                                         ;zero register
  2153                                                          mov     ax,[ebp+52]                                     ;CS
  2154                                                          mov     cl,46                                           ;column
  2155                                                          mov     ch,14                                           ;row
  2156                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2157                                  ;
  2158                                  ;       Display the EFLAGS register label and value
  2159                                  ;
  2160                                                          mov     cl,51                                           ;column
  2161                                                          mov     ch,11                                           ;row
  2162                                                          mov     esi,czIntEFLAGS                                 ;label
  2163                                                          call    SetConsoleString                                ;draw label
  2164                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2165                                                          mov     cl,55                                           ;column
  2166                                                          mov     ch,11                                           ;row
  2167                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2168                                  ;
  2169                                  ;       Display the ESP register label and value
  2170                                  ;
  2171                                                          mov     cl,51                                           ;column
  2172                                                          mov     ch,13                                           ;row
  2173                                                          mov     esi,czIntESP                                    ;label
  2174                                                          call    SetConsoleString                                ;draw label
  2175                                                          mov     eax,[ebp+12]                                    ;ESP
  2176                                                          mov     cl,55                                           ;column
  2177                                                          mov     ch,13                                           ;row
  2178                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2179                                  ;
  2180                                  ;       Display the EIP register label and value
  2181                                  ;
  2182                                                          mov     cl,51                                           ;column
  2183                                                          mov     ch,14                                           ;row
  2184                                                          mov     esi,czIntEIP                                    ;label
  2185                                                          call    SetConsoleString                                ;draw label
  2186                                                          mov     eax,[ebp+48]                                    ;EIP
  2187                                                          mov     cl,55                                           ;column
  2188                                                          mov     ch,14                                           ;row
  2189                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2190                                  ;
  2191                                  ;       Halt and loop until reset
  2192                                  ;
  2193                                  .10                     sti                                                     ;enable maskable interrupts
  2194                                                          hlt                                                     ;halt processor
  2195                                                          jmp     .10                                             ;resume on interrupt
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                  ;
  2198                                  ;       Processor Interrupt Name Strings
  2199                                  ;
  2200                                  ;-----------------------------------------------------------------------------------------------------------------------
  2201                                  czIntDivideByZero       db      "Division by zero",0
  2202                                  czIntSingleStep         db      "Single step",0
  2203                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2204                                  czIntBreak              db      "Break",0
  2205                                  czIntInto               db      "Into",0
  2206                                  czIntBounds             db      "Bounds",0
  2207                                  czIntBadOpCode          db      "Bad Operation Code",0
  2208                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2209                                  czIntDoubleFault        db      "Double Fault",0
  2210                                  czIntOperand            db      "Operand",0
  2211                                  czIntBadTSS             db      "Bad Task State Segment",0
  2212                                  czIntNotPresent         db      "Not Present",0
  2213                                  czIntStackLimit         db      "Stack Limit",0
  2214                                  czIntProtection         db      "General Protection Fault",0
  2215                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2216                                  czIntReserved           db      "Reserved",0
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  ;
  2219                                  ;       Processor Interrupt Handling Strings
  2220                                  ;
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2223                                  czIntLabel              db      "Interrupt #",0
  2224                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2225                                  czIntEAX                db      "EAX:",0
  2226                                  czIntECX                db      "ECX:",0
  2227                                  czIntEDX                db      "EDX:",0
  2228                                  czIntEBX                db      "EBX:",0
  2229                                  czIntESI                db      "ESI:",0
  2230                                  czIntEDI                db      "EDI:",0
  2231                                  czIntEBP                db      "EBP:",0
  2232                                  czIntESP                db      "ESP:",0
  2233                                  czIntDS                 db      " DS:",0
  2234                                  czIntES                 db      " ES:",0
  2235                                  czIntSS                 db      " SS:",0
  2236                                  czIntCS                 db      " CS:",0
  2237                                  czIntEFLAGS             db      "FLG:",0
  2238                                  czIntEIP                db      "EIP:",0
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240                                  ;
  2241                                  ;       Routine:        DrawTextDialogBox
  2242                                  ;
  2243                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2244                                  ;
  2245                                  ;       In:             CL      upper left column (0-79)
  2246                                  ;                       CH      upper left row (0-24)
  2247                                  ;                       DL      column width, excluding border
  2248                                  ;                       DH      row height, excluding border
  2249                                  ;                       BH      color attribute
  2250                                  ;
  2251                                  ;-----------------------------------------------------------------------------------------------------------------------
  2252                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2253                                                          push    esi                                             ;
  2254                                                          push    edi                                             ;
  2255                                                          push    es                                              ;
  2256                                                          push    EGDTCGA                                         ;load CGA selector ...
  2257                                                          pop     es                                              ;... into ES
  2258                                  ;
  2259                                  ;       Compute target display offset
  2260                                  ;
  2261                                                          xor     eax,eax                                         ;zero register
  2262                                                          mov     al,ch                                           ;row
  2263                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2264                                                          mul     ah                                              ;row offset
  2265                                                          add     al,cl                                           ;add column
  2266                                                          adc     ah,0                                            ;add overflow
  2267                                                          add     al,cl                                           ;add column
  2268                                                          adc     ah,0                                            ;add overflow
  2269                                                          mov     edi,eax                                         ;target row offset
  2270                                  ;
  2271                                  ;       Display top border row
  2272                                  ;
  2273                                                          push    edi                                             ;save target row offset
  2274                                                          mov     ah,bh                                           ;attribute
  2275                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2276                                                          stosw                                                   ;display character and attribute
  2277                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2278                                                          xor     ecx,ecx                                         ;zero register
  2279                                                          mov     cl,dl                                           ;width, excluding border
  2280                                                          rep     stosw                                           ;display horizontal border
  2281                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2282                                                          stosw                                                   ;display character and attribute
  2283                                                          pop     edi                                             ;restore target row offset
  2284                                                          add     edi,ECONROWBYTES                                ;next row
  2285                                  ;
  2286                                  ;       Display dialog box body rows
  2287                                  ;
  2288                                                          xor     ecx,ecx                                         ;zero register
  2289                                                          mov     cl,dh                                           ;height, excluding border
  2290                                  .10                     push    ecx                                             ;save remaining rows
  2291                                                          push    edi                                             ;save target row offset
  2292                                                          mov     ah,bh                                           ;attribute
  2293                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2294                                                          stosw                                                   ;display character and attribute
  2295                                                          mov     al,EASCIISPACE                                  ;space
  2296                                                          xor     ecx,ecx                                         ;zero register
  2297                                                          mov     cl,dl                                           ;width, excluding border
  2298                                                          rep     stosw                                           ;display row
  2299                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2300                                                          stosw                                                   ;display character and attribute
  2301                                                          pop     edi                                             ;restore target row offset
  2302                                                          add     edi,ECONROWBYTES                                ;next row
  2303                                                          pop     ecx                                             ;remaining rows
  2304                                                          loop    .10                                             ;next row
  2305                                  ;
  2306                                  ;       Display bottom border row
  2307                                  ;
  2308                                                          push    edi                                             ;save target row offset
  2309                                                          mov     ah,bh                                           ;attribute
  2310                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2311                                                          stosw                                                   ;display character and attribute
  2312                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2313                                                          xor     ecx,ecx                                         ;zero register
  2314                                                          mov     cl,dl                                           ;width, excluding border
  2315                                                          rep     stosw                                           ;display horizontal border
  2316                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2317                                                          stosw                                                   ;display character and attribute
  2318                                                          pop     edi                                             ;restore target row offset
  2319                                                          add     edi,ECONROWBYTES                                ;next row
  2320                                  ;
  2321                                  ;       Restore and return
  2322                                  ;
  2323                                                          pop     es                                              ;restore non-volatile regs
  2324                                                          pop     edi                                             ;
  2325                                                          pop     esi                                             ;
  2326                                                          pop     ecx                                             ;
  2327                                                          ret                                                     ;return
  2328                                  ;=======================================================================================================================
  2329                                  ;
  2330                                  ;       Hardware Device Interupts
  2331                                  ;
  2332                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2333                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2334                                  ;       (BX=2028h).
  2335                                  ;
  2336                                  ;=======================================================================================================================
  2337                                  ;-----------------------------------------------------------------------------------------------------------------------
  2338                                  ;
  2339                                  ;       IRQ0    Clock Tick Interrupt
  2340                                  ;
  2341                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2342                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2343                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2344                                  ;
  2345                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2346                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2347                                  ;
  2348                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2349                                  ;       zero, the floppy disk motors are turned off.
  2350                                  ;
  2351                                  ;-----------------------------------------------------------------------------------------------------------------------
  2352                                                          menter  clocktick                                       ;clock tick interrupt
  2353                                                          push    eax                                             ;save non-volatile regs
  2354                                                          push    edx                                             ;
  2355                                                          push    ds                                              ;
  2356                                  ;
  2357                                  ;       Update the clock tick count and the elapsed days as needed.
  2358                                  ;
  2359                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2360                                                          pop     ds                                              ;... into data segment register
  2361                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2362                                                          inc     eax                                             ;increment clock ticks
  2363                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2364                                                          jb      irq0.10                                         ;no, skip ahead
  2365                                                          inc     byte [wbClockDays]                              ;increment clock days
  2366                                                          xor     eax,eax                                         ;reset clock ticks
  2367                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2368                                  ;
  2369                                  ;       Decrement floppy disk motor timeout.
  2370                                  ;
  2371                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2372                                                          je      irq0.20                                         ;yes, skip ahead
  2373                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2374                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2375                                  ;
  2376                                  ;       Turn off the floppy disk motor if appropriate.
  2377                                  ;
  2378                                                          sti                                                     ;enable maskable interrupts
  2379                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2380                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2381                                                          in      al,dx                                           ;FDC main status byte
  2382                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2383                                                          jnz     irq0.15                                         ;wait while busy
  2384                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2385                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2386                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2387                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2388                                                          out     dx,al                                           ;turn motor off
  2389                                  ;
  2390                                  ;       Signal the end of the hardware interrupt.
  2391                                  ;
  2392                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2393                                  ;
  2394                                  ;       Restore and return.
  2395                                  ;
  2396                                                          pop     ds                                              ;restore modified regs
  2397                                                          pop     edx                                             ;
  2398                                                          pop     eax                                             ;
  2399                                                          iretd                                                   ;return
  2400                                  ;-----------------------------------------------------------------------------------------------------------------------
  2401                                  ;
  2402                                  ;       IRQ1    Keyboard Interrupt
  2403                                  ;
  2404                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2405                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2406                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2407                                  ;       ALL modified registers upon return.
  2408                                  ;
  2409                                  ;-----------------------------------------------------------------------------------------------------------------------
  2410                                                          menter  keyboard                                        ;keyboard interrrupt
  2411                                                          push    eax                                             ;save non-volatile regs
  2412                                                          push    ebx                                             ;
  2413                                                          push    ecx                                             ;
  2414                                                          push    esi                                             ;
  2415                                                          push    ds                                              ;
  2416                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2417                                                          pop     ds                                              ;... into data segment register
  2418                                                          xor     al,al                                           ;zero
  2419                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2420                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2421                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2422                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2423                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2424                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2425                                                          mov     al,' '                                          ;space
  2426                                                          mov     [wbConsoleChar],al                              ;set character to space
  2427                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2428                                                          not     al                                              ;controller timeout mask
  2429                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2430                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2431                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2432                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2433                                                          jz      irq1.140                                        ;yes, skip ahead
  2434                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2435                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2436                                                          mov     ah,al                                           ;copy scan code 0
  2437                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2438                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2439                                                          je      irq1.30                                         ;yes, set flag
  2440                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2441                                                          je      irq1.40                                         ;yes, reset flag
  2442                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2443                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2444                                                          je      irq1.30                                         ;yes, set flag
  2445                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2446                                                          je      irq1.40                                         ;yes, reset flag
  2447                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2448                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2449                                                          je      irq1.30                                         ;yes, set flag
  2450                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2451                                                          je      irq1.40                                         ;yes, reset flag
  2452                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2453                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2454                                                          je      irq1.30                                         ;yes, set flag
  2455                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2456                                                          je      irq1.40                                         ;yes, reset flag
  2457                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2458                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2459                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2460                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2461                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2462                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2463                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2464                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2465                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2466                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2467                                                          jne     irq1.70                                         ;no, skip ahead
  2468                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2469                                                          jz      irq1.140                                        ;yes, skip ahead
  2470                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2471                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2472                                                          mov     ah,al                                           ;copy scan code 1
  2473                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2474                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2475                                                          je      irq1.30                                         ;yes, set flag
  2476                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2477                                                          je      irq1.40                                         ;yes, reset flag
  2478                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2479                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2480                                                          je      irq1.30                                         ;yes, set flag
  2481                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2482                                                          je      irq1.40                                         ;yes, reset flag
  2483                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2484                                                          je      irq1.80                                         ;yes, skip ahead
  2485                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2486                                                          je      irq1.80                                         ;yes, skip ahead
  2487                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2488                                                          je      irq1.10                                         ;yes, continue
  2489                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2490                                                          jne     irq1.20                                         ;no, skip ahead
  2491                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2492                                                          jz      irq1.140                                        ;yes, skip ahead
  2493                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2494                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2495                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2496                                                          jz      irq1.140                                        ;yes, skip ahead
  2497                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2498                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2499                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2500                                  irq1.30                 or      bl,al                                           ;set shift flag
  2501                                                          jmp     irq1.60                                         ;skip ahead
  2502                                  irq1.40                 not     al                                              ;convert flag to mask
  2503                                                          and     bl,al                                           ;reset shift flag
  2504                                                          jmp     irq1.60                                         ;skip ahead
  2505                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2506                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2507                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2508                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2509                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2510                                                          jmp     irq1.150                                        ;finish keyboard handling
  2511                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2512                                                          jne     irq1.80                                         ;no continue
  2513                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2514                                                          jz      irq1.140                                        ;yes, skip ahead
  2515                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2516                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2517                                                          mov     ah,al                                           ;copy scan code 1
  2518                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2519                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2520                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2521                                                          jz      irq1.140                                        ;yes, skip ahead
  2522                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2523                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2524                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2525                                                          jz      irq1.140                                        ;yes, skip ahead
  2526                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2527                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2528                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2529                                                          jz      irq1.140                                        ;yes, skip ahead
  2530                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2531                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2532                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2533                                                          jz      irq1.140                                        ;yes, skip ahead
  2534                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2535                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2536                                                          jmp     irq1.150                                        ;continue
  2537                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2538                                                          test    ah,EKEYBUP                                      ;release code?
  2539                                                          jnz     irq1.130                                        ;yes, skip ahead
  2540                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2541                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2542                                                          jz      irq1.90                                         ;no, skip ahead
  2543                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2544                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2545                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2546                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2547                                                          jz      irq1.100                                        ;no skip ahead
  2548                                                          mov     cl,al                                           ;copy ASCII code
  2549                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2550                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2551                                                          jb      irq1.100                                        ;yes, skip ahead
  2552                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2553                                                          ja      irq1.100                                        ;yes, skip ahead
  2554                                                          xor     al,EASCIICASE                                   ;switch case
  2555                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2556                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2557                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2558                                                          jz      irq1.120                                        ;no, skip ahead
  2559                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2560                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2561                                                          or      edx,eax                                         ;msg id and codes
  2562                                                          xor     ecx,ecx                                         ;null param
  2563                                                          push    eax                                             ;save codes
  2564                                                          call    PutMessage                                      ;put message to console
  2565                                                          pop     eax                                             ;restore codes
  2566                                                          test    al,al                                           ;ASCII translation?
  2567                                                          jz      irq1.130                                        ;no, skip ahead
  2568                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2569                                                          and     eax,0FFFFh                                      ;clear high-order word
  2570                                                          or      edx,eax                                         ;msg id and codes
  2571                                                          xor     ecx,ecx                                         ;null param
  2572                                                          call    PutMessage                                      ;put message to console
  2573                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2574                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2575                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2576                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2577                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2578                                                          pop     ds                                              ;restore non-volatile regs
  2579                                                          pop     esi                                             ;
  2580                                                          pop     ecx                                             ;
  2581                                                          pop     ebx                                             ;
  2582                                                          pop     eax                                             ;
  2583                                                          iretd                                                   ;return
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585                                  ;       Scan-Code to ASCII Translation Tables
  2586                                  ;-----------------------------------------------------------------------------------------------------------------------
  2587                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2588                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2589                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2590                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2591                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2592                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2593                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2594                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2595                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2596                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2597                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2598                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2599                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2600                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2601                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2602                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2603                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2604                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2605                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2606                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2607                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2608                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2609                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2610                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2611                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2612                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2613                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2614                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2615                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2616                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2617                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2618                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  iochannel                                       ;secondary 8259A cascade
  2625                                                          push    eax                                             ;save modified regs
  2626                                                          jmp     hwint                                           ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  com2                                            ;serial port 2 interrupt
  2633                                                          push    eax                                             ;save modified regs
  2634                                                          jmp     hwint                                           ;end interrupt and return
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  ;
  2637                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2638                                  ;
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                                          menter  com1                                            ;serial port 1 interrupt
  2641                                                          push    eax                                             ;save modified regs
  2642                                                          jmp     hwint                                           ;end interrupt and return
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                  ;
  2645                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2646                                  ;
  2647                                  ;-----------------------------------------------------------------------------------------------------------------------
  2648                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2649                                                          push    eax                                             ;save modified regs
  2650                                                          jmp     hwint                                           ;end interrupt and return
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                  ;
  2653                                  ;       IRQ6    Diskette Hardware Interrupt
  2654                                  ;
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                                          menter  diskette                                        ;floppy disk interrupt
  2657                                                          push    eax                                             ;save non-volatile regs
  2658                                                          push    ds                                              ;
  2659                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2660                                                          pop     ds                                              ;... into DS register
  2661                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2662                                                          or      al,10000000b                                    ;set IRQ flag
  2663                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2664                                                          pop     ds                                              ;restore non-volatile regs
  2665                                                          jmp     hwint                                           ;end primary PIC interrupt
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                  ;
  2668                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2672                                                          push    eax                                             ;save modified regs
  2673                                                          jmp     hwint                                           ;end interrupt and return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2677                                  ;
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                                          menter  rtclock                                         ;real-time clock interrupt
  2680                                                          push    eax                                             ;save modified regs
  2681                                                          jmp     hwwint                                          ;end interrupt and return
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2688                                                          push    eax                                             ;save modified regs
  2689                                                          jmp     hwwint                                          ;end interrupt and return
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;       IRQ10   Reserved Hardware Interrupt
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                                          menter  irq10                                           ;reserved
  2696                                                          push    eax                                             ;save modified regs
  2697                                                          jmp     hwwint                                          ;end interrupt and return
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       IRQ11   Reserved Hardware Interrupt
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                                          menter  irq11                                           ;reserved
  2704                                                          push    eax                                             ;save modified regs
  2705                                                          jmp     hwwint                                          ;end interrupt and return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2712                                                          push    eax                                             ;save modified regs
  2713                                                          jmp     hwwint                                          ;end interrupt and return
  2714                                  ;-----------------------------------------------------------------------------------------------------------------------
  2715                                  ;
  2716                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2717                                  ;
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                                          menter  coprocessor                                     ;coprocessor interrupt
  2720                                                          push    eax                                             ;save modified regs
  2721                                                          jmp     hwwint                                          ;end interrupt and return
  2722                                  ;-----------------------------------------------------------------------------------------------------------------------
  2723                                  ;
  2724                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2725                                  ;
  2726                                  ;-----------------------------------------------------------------------------------------------------------------------
  2727                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2728                                                          push    eax                                             ;save modified regs
  2729                                                          jmp     hwwint                                          ;end interrupt and return
  2730                                  ;-----------------------------------------------------------------------------------------------------------------------
  2731                                  ;
  2732                                  ;       IRQ15   Reserved Hardware Interrupt
  2733                                  ;
  2734                                  ;-----------------------------------------------------------------------------------------------------------------------
  2735                                                          menter  irq15                                           ;reserved
  2736                                                          push    eax                                             ;save modified regs
  2737                                                          jmp     hwwint                                          ;end interrupt and return
  2738                                  ;-----------------------------------------------------------------------------------------------------------------------
  2739                                  ;
  2740                                  ;       Exit from hardware interrupt
  2741                                  ;
  2742                                  ;-----------------------------------------------------------------------------------------------------------------------
  2743                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2744                                                          jmp     hwint90                                         ;skip ahead
  2745                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2746                                  hwint90                 pop     eax                                             ;restore modified regs
  2747                                                          iretd                                                   ;return from interrupt
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                  ;
  2750                                  ;       INT 30h Operating System Software Service Interrupt
  2751                                  ;
  2752                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2753                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2754                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2755                                  ;       the entry address of the specific function from a table.
  2756                                  ;
  2757                                  ;-----------------------------------------------------------------------------------------------------------------------
  2758                                                          menter  svc
  2759                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2760                                                          jae     svc90                                           ;yes, skip ahead
  2761                                                          movzx   eax,al                                          ;function
  2762                                                          shl     eax,2                                           ;offset into table
  2763                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2764                                  svc90                   iretd                                                   ;return from interrupt
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                  ;
  2767                                  ;       Service Request Table
  2768                                  ;
  2769                                  ;
  2770                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2771                                  ;
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2774                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2775                                                          tsvce   CompareMemory                                   ;compare memory
  2776                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2777                                                          tsvce   FreeMemory                                      ;free memory block
  2778                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2779                                                          tsvce   GetConsoleString                                ;get string input
  2780                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2781                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2782                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2783                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2784                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2785                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2786                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2787                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2788                                                          tsvce   UpperCaseString                                 ;upper-case string
  2789                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2790                                  ;-----------------------------------------------------------------------------------------------------------------------
  2791                                  ;
  2792                                  ;       Service Request Macros
  2793                                  ;
  2794                                  ;       These macros provide positional parameterization of service request calls.
  2795                                  ;
  2796                                  ;-----------------------------------------------------------------------------------------------------------------------
  2797                                  %macro                  allocateMemory 1
  2798                                                          mov     ecx,%1                                          ;bytes to allocate
  2799                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2800                                                          int     _svc                                            ;invoke OS service
  2801                                  %endmacro
  2802                                  %macro                  clearConsoleScreen 0
  2803                                                          mov     al,eClearConsoleScreen                          ;function code
  2804                                                          int     _svc                                            ;invoke OS service
  2805                                  %endmacro
  2806                                  %macro                  compareMemory 0
  2807                                                          mov     al,eCompareMemory                               ;function code
  2808                                                          int     _svc                                            ;invoke OS service
  2809                                  %endmacro
  2810                                  %macro                  decimalToUnsigned 0
  2811                                                          mov     al,eDecimalToUnsigned                           ;function code
  2812                                                          int     _svc                                            ;invoke OS servie
  2813                                  %endmacro
  2814                                  %macro                  freeMemory 1
  2815                                                          mov     edx,%1                                          ;address of memory block
  2816                                                          mov     al,eFreeMemory                                  ;function code
  2817                                                          int     _svc                                            ;invoke OS service
  2818                                  %endmacro
  2819                                  %macro                  getBaseMemSize 0
  2820                                                          mov     al,eGetBaseMemSize                              ;function code
  2821                                                          int     _svc                                            ;invoke OS service
  2822                                  %endmacro
  2823                                  %macro                  getConsoleString 4
  2824                                                          mov     edx,%1                                          ;buffer address
  2825                                                          mov     ecx,%2                                          ;max characters
  2826                                                          mov     bh,%3                                           ;echo indicator
  2827                                                          mov     bl,%4                                           ;terminator
  2828                                                          mov     al,eGetConsoleString                            ;function code
  2829                                                          int     _svc                                            ;invoke OS service
  2830                                  %endmacro
  2831                                  %macro                  getExtendedMemSize 0
  2832                                                          mov     al,eGetExtendedMemSize                          ;function code
  2833                                                          int     _svc                                            ;invoke OS service
  2834                                  %endmacro
  2835                                  %macro                  getROMMemSize 0
  2836                                                          mov     al,eGetROMMemSize                               ;function code
  2837                                                          int     _svc                                            ;invoke OS service
  2838                                  %endmacro
  2839                                  %macro                  hexadecimalToUnsigned 0
  2840                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2841                                                          int     _svc                                            ;invoke OS service
  2842                                  %endmacro
  2843                                  %macro                  placeCursor 0
  2844                                                          mov     al,ePlaceCursor                                 ;function code
  2845                                                          int     _svc                                            ;invoke OS service
  2846                                  %endmacro
  2847                                  %macro                  putConsoleString 1
  2848                                                          mov     edx,%1                                          ;string address
  2849                                                          mov     al,ePutConsoleString                            ;function code
  2850                                                          int     _svc                                            ;invoke OS service
  2851                                  %endmacro
  2852                                  %macro                  resetSystem 0
  2853                                                          mov     al,eResetSystem                                 ;function code
  2854                                                          int     _svc                                            ;invoke OS service
  2855                                  %endmacro
  2856                                  %macro                  unsignedToDecimalString 0
  2857                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2858                                                          int     _svc                                            ;invoke OS service
  2859                                  %endmacro
  2860                                  %macro                  unsignedToHexadecimal 0
  2861                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2862                                                          int     _svc                                            ;invoke OS service
  2863                                  %endmacro
  2864                                  %macro                  upperCaseString 0
  2865                                                          mov     al,eUpperCaseString                             ;function code
  2866                                                          int     _svc                                            ;invoke OS service
  2867                                  %endmacro
  2868                                  ;=======================================================================================================================
  2869                                  ;
  2870                                  ;       Kernel Function Library
  2871                                  ;
  2872                                  ;=======================================================================================================================
  2873                                  ;=======================================================================================================================
  2874                                  ;
  2875                                  ;       Memory Helper Routines
  2876                                  ;
  2877                                  ;       AllocateMemory
  2878                                  ;       FreeMemory
  2879                                  ;
  2880                                  ;=======================================================================================================================
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  ;
  2883                                  ;       Routine:        AllocateMemory
  2884                                  ;
  2885                                  ;       Description:    This routine allocates a memory block for the given task.
  2886                                  ;
  2887                                  ;       In:             ECX     bytes of memory to allocate
  2888                                  ;
  2889                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  2890                                  ;                               0       unable to allocate memory
  2891                                  ;
  2892                                  ;-----------------------------------------------------------------------------------------------------------------------
  2893                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  2894                                                          push    ecx                                             ;
  2895                                                          push    esi                                             ;
  2896                                                          push    ds                                              ;
  2897                                  ;
  2898                                  ;       Address kernel memory structures
  2899                                  ;
  2900                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  2901                                                          pop     ds                                              ;... into data segment reg
  2902                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  2903                                  ;
  2904                                  ;       Set requested size to minimum block size if requested size is too small.
  2905                                  ;
  2906                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  2907                                                          jae     .10                                             ;no, branch
  2908                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  2909                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  2910                                  ;
  2911                                  ;       Find the first free memory block large enough to satisfy the request.
  2912                                  ;
  2913                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  2914                                  .20                     test    eax,eax                                         ;end of free block chain?
  2915                                                          jz      .220                                            ;yes, branch
  2916                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  2917                                                          jbe     .30                                             ;yes, branch
  2918                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2919                                                          jmp     .20                                             ;continue
  2920                                  ;-----------------------------------------------------------------------------------------------------------------------
  2921                                  ;
  2922                                  ;       Address the previous and next free memory blocks.
  2923                                  ;
  2924                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  2925                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2926                                  ;
  2927                                  ;       Remove the free memory block from the forward free memory block chain.
  2928                                  ;
  2929                                                          test    ebx,ebx                                         ;any previous free memory block?
  2930                                                          jz      .40                                             ;no, branch
  2931                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  2932                                                          jmp     .50                                             ;continue
  2933                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  2934                                  ;
  2935                                  ;       Remove the free memory block from the reverse free memory block chain.
  2936                                  ;
  2937                                  .50                     test    edx,edx                                         ;any next free memory block?
  2938                                                          jz      .60                                             ;no, branch
  2939                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  2940                                                          jmp     .70                                             ;continue
  2941                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  2942                                  ;-----------------------------------------------------------------------------------------------------------------------
  2943                                  ;
  2944                                  ;       Determine if the free memory block can be split.
  2945                                  ;
  2946                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  2947                                                          sub     ebx,ecx                                         ;subtract requested memory size
  2948                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  2949                                                          jb      .150                                            ;no, branch
  2950                                  ;
  2951                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  2952                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  2953                                  ;       of the requested memory size.
  2954                                  ;
  2955                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  2956                                                          mov     edx,eax                                         ;memory block address
  2957                                                          add     edx,ecx                                         ;address new new next contig block
  2958                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  2959                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  2960                                  ;
  2961                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  2962                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  2963                                  ;
  2964                                                          jecxz   .80                                             ;no next contig, branch
  2965                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  2966                                                          jmp     .90                                             ;continue
  2967                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  2968                                  ;
  2969                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  2970                                  ;
  2971                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  2972                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  2973                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  2974                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  2975                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  2976                                                          xor     ebx,ebx                                         ;zero register
  2977                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  2978                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  2979                                  ;
  2980                                  ;       Find the proper location in the free block chain for the new free block
  2981                                  ;
  2982                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  2983                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  2984                                  .100                    jecxz   .110                                            ;branch if at end of chain
  2985                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  2986                                                          jbe     .110                                            ;yes, branch
  2987                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  2988                                                          jmp     .100                                            ;continue
  2989                                  ;
  2990                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  2991                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  2992                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  2993                                  ;       block of hte next block, if there is one.
  2994                                  ;
  2995                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  2996                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  2997                                                          jecxz   .120                                            ;branch if no next block
  2998                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  2999                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3000                                                          jmp     .130                                            ;continue
  3001                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3002                                  ;
  3003                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3004                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3005                                  ;       last user block pointers if necessary.
  3006                                  ;
  3007                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3008                                                          test    ebx,ebx                                         ;is there a previous block?
  3009                                                          jz      .140                                            ;no, branch
  3010                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3011                                                          jmp     .150                                            ;continue
  3012                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3013                                  ;
  3014                                  ;       Update the newly allocated block's owner and signature.
  3015                                  ;
  3016                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3017                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3018                                                          xor     edx,edx                                         ;zero register
  3019                                                          str     dx                                              ;load the task state register
  3020                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3021                                  ;
  3022                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3023                                  ;
  3024                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3025                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3026                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3027                                                          jb      .180                                            ;branch if block belongs to next task
  3028                                                          je      .170                                            ;branch if block belongs to this task
  3029                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3030                                                          jmp     .160                                            ;continue
  3031                                  ;
  3032                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3033                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3034                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3035                                  ;       place to insert the block.
  3036                                  ;
  3037                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3038                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3039                                                          jbe     .180                                            ;yes, branch
  3040                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3041                                                          test    ecx,ecx                                         ;end of chain?
  3042                                                          jz      .180                                            ;yes, branch
  3043                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3044                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3045                                                          je      .170                                            ;yes, continue search
  3046                                  ;
  3047                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3048                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3049                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3050                                  ;       do have a previous-block, we update that block's next-block pointer.
  3051                                  ;
  3052                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3053                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3054                                                          jecxz   .190                                            ;branch if no next-task block
  3055                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3056                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3057                                                          jmp     .200                                            ;continue
  3058                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3059                                  ;
  3060                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3061                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3062                                  ;       global first and/or last user-block pointers if necessary.
  3063                                  ;
  3064                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3065                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3066                                                          jz      .210                                            ;no, branch
  3067                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3068                                                          jmp     .220                                            ;continue
  3069                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3070                                  ;
  3071                                  ;       Restore registers and return to caller.
  3072                                  ;
  3073                                  .220                    pop     ds                                              ;restore non-volatie regs
  3074                                                          pop     esi                                             ;
  3075                                                          pop     ecx                                             ;
  3076                                                          pop     ebx                                             ;
  3077                                                          ret                                                     ;return
  3078                                  ;-----------------------------------------------------------------------------------------------------------------------
  3079                                  ;
  3080                                  ;       Routine:        FreeMemory
  3081                                  ;
  3082                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3083                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3084                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3085                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3086                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3087                                  ;
  3088                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3089                                  ;
  3090                                  ;       Out:            EAX     -1      invalid memory block
  3091                                  ;                               0       memory block freed
  3092                                  ;
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3095                                                          push    ecx                                             ;
  3096                                                          push    esi                                             ;
  3097                                                          push    edi                                             ;
  3098                                                          push    ds                                              ;
  3099                                                          push    es                                              ;
  3100                                  ;
  3101                                  ;       Address the root memory structure
  3102                                  ;
  3103                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3104                                                          pop     es                                              ;... into extra segment reg
  3105                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3106                                                          pop     ds                                              ;... into data segment reg
  3107                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3108                                                          mov     edi,edx                                         ;memory block address
  3109                                  ;
  3110                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3111                                  ;
  3112                                                          xor     eax,eax                                         ;indicate success
  3113                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3114                                                          je      .240                                            ;yes, branch
  3115                                                          dec     eax                                             ;indicate failure
  3116                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3117                                                          jne     .240                                            ;no, branch
  3118                                  ;-----------------------------------------------------------------------------------------------------------------------
  3119                                  ;
  3120                                  ;       Unlink the USER memory block.
  3121                                  ;
  3122                                  ;-----------------------------------------------------------------------------------------------------------------------
  3123                                  ;
  3124                                  ;       Set the block signature. Reset owner.
  3125                                  ;
  3126                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3127                                                          xor     eax,eax                                         ;zero register
  3128                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3129                                  ;
  3130                                  ;       Wipe user area.
  3131                                  ;
  3132                                                          push    edi                                             ;save block address
  3133                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3134                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3135                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3136                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3137                                                          rep     stosb                                           ;clear memory
  3138                                                          pop     edi                                             ;restore block address
  3139                                  ;
  3140                                  ;       Address the preceding and following USER memory blocks
  3141                                  ;
  3142                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3143                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3144                                  ;
  3145                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3146                                  ;       pointer to point to the USER block following this block.
  3147                                  ;
  3148                                                          test    ebx,ebx                                         ;is there a previous block?
  3149                                                          jz      .10                                             ;no, branch
  3150                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3151                                                          jmp     .20                                             ;continue
  3152                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3153                                  ;
  3154                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3155                                  ;       pointer to point to the USER block preceding this block.
  3156                                  ;
  3157                                  .20                     jecxz   .30                                             ;branch if no next block
  3158                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3159                                                          jmp     .40                                             ;continue
  3160                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3161                                  ;-----------------------------------------------------------------------------------------------------------------------
  3162                                  ;
  3163                                  ;       Merge with a previous contiguous FREE memory block.
  3164                                  ;
  3165                                  ;-----------------------------------------------------------------------------------------------------------------------
  3166                                  ;
  3167                                  ;       Address the preceding and following contiguous memory blocks.
  3168                                  ;
  3169                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3170                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3171                                  ;
  3172                                  ;       Verify we have a previous contiguous FREE block.
  3173                                  ;
  3174                                                          test    ebx,ebx                                         ;is there a previous block?
  3175                                                          jz      .100                                            ;no, branch
  3176                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3177                                                          jne     .100                                            ;no, branch
  3178                                  ;
  3179                                  ;       Update adjacent block's contiguous pointers.
  3180                                  ;
  3181                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3182                                                          jecxz   .50                                             ;branch if no next contiguous block
  3183                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3184                                                          jmp     .60                                             ;continue
  3185                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3186                                  ;
  3187                                  ;       Update the size of the merged FREE block.
  3188                                  ;
  3189                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3190                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3191                                  ;
  3192                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3193                                  ;
  3194                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3195                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3196                                                          rep     stosb                                           ;clear memory header
  3197                                                          mov     edi,ebx                                         ;current block is now previous block
  3198                                  ;-----------------------------------------------------------------------------------------------------------------------
  3199                                  ;
  3200                                  ;       Unlink the previous contiguous FREE memory block
  3201                                  ;
  3202                                  ;-----------------------------------------------------------------------------------------------------------------------
  3203                                  ;
  3204                                  ;       Address the preceding and following USER memory blocks
  3205                                  ;
  3206                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3207                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3208                                  ;
  3209                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3210                                  ;       block pointer.
  3211                                  ;
  3212                                                          test    ebx,ebx                                         ;is there a previous block?
  3213                                                          jz      .70                                             ;no, branch
  3214                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3215                                                          jmp     .80                                             ;branch
  3216                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3217                                  ;
  3218                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3219                                  ;       pointer.
  3220                                  ;
  3221                                  .80                     jecxz   .90                                             ;branch if no next block
  3222                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3223                                                          jmp     .100                                            ;continue
  3224                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  ;
  3227                                  ;       Merge with a following contiguous FREE memory block.
  3228                                  ;
  3229                                  ;-----------------------------------------------------------------------------------------------------------------------
  3230                                  ;
  3231                                  ;       Verify we have a following contiguous FREE block.
  3232                                  ;
  3233                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3234                                                          jecxz   .170                                            ;branch if no next contiguous block
  3235                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3236                                                          jne     .170                                            ;no, branch
  3237                                  ;
  3238                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3239                                  ;
  3240                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3241                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3242                                  ;
  3243                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3244                                  ;
  3245                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3246                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3247                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3248                                                          jz      .110                                            ;no, branch
  3249                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3250                                                          jmp     .120                                            ;continue
  3251                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3252                                  ;-----------------------------------------------------------------------------------------------------------------------
  3253                                  ;
  3254                                  ;       Unlink the following contiguous FREE memory block
  3255                                  ;
  3256                                  ;-----------------------------------------------------------------------------------------------------------------------
  3257                                  ;
  3258                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3259                                  ;
  3260                                  .120                    push    edi                                             ;save this block
  3261                                                          mov     edi,ecx                                         ;next contiguous block
  3262                                                          push    ecx                                             ;save next contiguous block
  3263                                  ;
  3264                                  ;       Address the preceding and following USER memory blocks
  3265                                  ;
  3266                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3267                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3268                                  ;
  3269                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3270                                  ;       block pointer.
  3271                                  ;
  3272                                                          test    ebx,ebx                                         ;is there a previous block?
  3273                                                          jz      .130                                            ;no, branch
  3274                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3275                                                          jmp     .140                                            ;branch
  3276                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3277                                  ;
  3278                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3279                                  ;       pointer.
  3280                                  ;
  3281                                  .140                    jecxz   .150                                            ;branch if no next block
  3282                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3283                                                          jmp     .160                                            ;continue
  3284                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3285                                  ;
  3286                                  ;       Clear next contiguous block's header
  3287                                  ;
  3288                                  .160                    pop     edi                                             ;next congiguous block pointer
  3289                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3290                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3291                                                          rep     stosb                                           ;clear memory header
  3292                                                          pop     edi                                             ;this block's pointer
  3293                                  ;-----------------------------------------------------------------------------------------------------------------------
  3294                                  ;
  3295                                  ;       Insert the final FREE block back into the block chain.
  3296                                  ;
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298                                  ;
  3299                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3300                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3301                                  ;       all are smaller in size.
  3302                                  ;
  3303                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3304                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3305                                  .180                    jecxz   .190                                            ;exit if no ptr
  3306                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3307                                                          jb      .190                                            ;yes, branch
  3308                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3309                                                          jmp     .180                                            ;continue
  3310                                  ;
  3311                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3312                                  ;       larger free block. Update the next block's previous block pointer.
  3313                                  ;
  3314                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3315                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3316                                                          jecxz   .200                                            ;branch if no block found
  3317                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3318                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3319                                                          jmp     .210                                            ;continue
  3320                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3321                                  ;
  3322                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3323                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3324                                  ;       next pointer.
  3325                                  ;
  3326                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3327                                                          test    ebx,ebx                                         ;do we have a previous block?
  3328                                                          jz      .220                                            ;no, branch
  3329                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3330                                                          jmp     .230                                            ;continue
  3331                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3332                                  ;
  3333                                  ;       The memory free has completed.
  3334                                  ;
  3335                                  .230                    xor     eax,eax                                         ;indicate success
  3336                                  ;
  3337                                  ;       Restore and return.
  3338                                  ;
  3339                                  .240                    pop     es                                              ;restore non-volatile regs
  3340                                                          pop     ds                                              ;
  3341                                                          pop     edi                                             ;
  3342                                                          pop     esi                                             ;
  3343                                                          pop     ecx                                             ;
  3344                                                          pop     ebx                                             ;
  3345                                                          ret                                                     ;return
  3346                                  ;=======================================================================================================================
  3347                                  ;
  3348                                  ;       String Helper Routines
  3349                                  ;
  3350                                  ;       CompareMemory
  3351                                  ;       UpperCaseString
  3352                                  ;
  3353                                  ;=======================================================================================================================
  3354                                  ;-----------------------------------------------------------------------------------------------------------------------
  3355                                  ;
  3356                                  ;       Routine:        CompareMemory
  3357                                  ;
  3358                                  ;       Description:    This routine compares two byte arrays.
  3359                                  ;
  3360                                  ;       In:             DS:EDX  first source address
  3361                                  ;                       DS:EBX  second source address
  3362                                  ;                       ECX     comparison length
  3363                                  ;
  3364                                  ;       Out:            EDX     first source address
  3365                                  ;                       EBX     second source address
  3366                                  ;                       ECX     0       array 1 = array 2
  3367                                  ;                               <0      array 1 < array 2
  3368                                  ;                               >0      array 1 > array 2
  3369                                  ;
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3372                                                          push    edi                                             ;
  3373                                                          push    es                                              ;
  3374                                                          push    ds                                              ;copy DS
  3375                                                          pop     es                                              ;... to ES
  3376                                                          mov     esi,edx                                         ;first source address
  3377                                                          mov     edi,ebx                                         ;second source address
  3378                                                          cld                                                     ;forward strings
  3379                                                          rep     cmpsb                                           ;compare bytes
  3380                                                          mov     al,0                                            ;default result
  3381                                                          jz      .10                                             ;branch if arrays equal
  3382                                                          mov     al,1                                            ;positive result
  3383                                                          jnc     .10                                             ;branch if target > source
  3384                                                          mov     al,-1                                           ;negative result
  3385                                  .10                     movsx   ecx,al                                          ;extend sign
  3386                                                          pop     es                                              ;restore non-volatile regs
  3387                                                          pop     edi                                             ;
  3388                                                          pop     esi                                             ;
  3389                                                          ret                                                     ;return
  3390                                  ;-----------------------------------------------------------------------------------------------------------------------
  3391                                  ;
  3392                                  ;       Routine:        UpperCaseString
  3393                                  ;
  3394                                  ;       Description:    This routine places all characters in the given string to upper case.
  3395                                  ;
  3396                                  ;       In:             DS:EDX  string address
  3397                                  ;
  3398                                  ;       Out:            EDX     string address
  3399                                  ;
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3402                                                          mov     esi,edx                                         ;string address
  3403                                                          cld                                                     ;forward strings
  3404                                  .10                     lodsb                                                   ;string character
  3405                                                          test    al,al                                           ;null?
  3406                                                          jz      .20                                             ;yes, skip ahead
  3407                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3408                                                          jb      .10                                             ;no, continue
  3409                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3410                                                          ja      .10                                             ;no, continue
  3411                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3412                                                          mov     [esi-1],al                                      ;upper character
  3413                                                          jmp     .10                                             ;continue
  3414                                  .20                     pop     esi                                             ;restore non-volatile regs
  3415                                                          ret                                                     ;return
  3416                                  ;=======================================================================================================================
  3417                                  ;
  3418                                  ;       Console Helper Routines
  3419                                  ;
  3420                                  ;       FirstConsoleColumn
  3421                                  ;       GetConsoleChar
  3422                                  ;       GetConsoleString
  3423                                  ;       NextConsoleColumn
  3424                                  ;       NextConsoleRow
  3425                                  ;       PreviousConsoleColumn
  3426                                  ;       PutConsoleChar
  3427                                  ;       PutConsoleHexByte
  3428                                  ;       PutConsoleHexDword
  3429                                  ;       PutConsoleHexWord
  3430                                  ;       PutConsoleOIAChar
  3431                                  ;       PutConsoleOIAShift
  3432                                  ;       PutConsoleString
  3433                                  ;       Yield
  3434                                  ;
  3435                                  ;=======================================================================================================================
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  ;
  3438                                  ;       Routine:        FirstConsoleColumn
  3439                                  ;
  3440                                  ;       Description:    This routine resets the console column to start of the row.
  3441                                  ;
  3442                                  ;       In:             DS      OS data selector
  3443                                  ;
  3444                                  ;-----------------------------------------------------------------------------------------------------------------------
  3445                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3446                                                          mov     [wbConsoleColumn],al                            ;save column
  3447                                                          ret                                                     ;return
  3448                                  ;-----------------------------------------------------------------------------------------------------------------------
  3449                                  ;
  3450                                  ;       Routine:        GetConsoleChar
  3451                                  ;
  3452                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3453                                  ;
  3454                                  ;       Out:            AL      ASCII character code
  3455                                  ;                       AH      keyboard scan code
  3456                                  ;
  3457                                  ;-----------------------------------------------------------------------------------------------------------------------
  3458                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3459                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  3460                                                          or      eax,eax                                         ;do we have a message?
  3461                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  3462                                                          push    eax                                             ;save key codes
  3463                                                          and     eax,0FFFF0000h                                  ;mask for message type
  3464                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3465                                                          pop     eax                                             ;restore key codes
  3466                                                          jne     GetConsoleChar                                  ;no, try again
  3467                                                          and     eax,0000ffffh                                   ;mask for key codes
  3468                                                          ret                                                     ;return
  3469                                  ;-----------------------------------------------------------------------------------------------------------------------
  3470                                  ;
  3471                                  ;       Routine:        GetConsoleString
  3472                                  ;
  3473                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3474                                  ;
  3475                                  ;       In:             DS:EDX  target buffer address
  3476                                  ;                       ECX     maximum number of characters to accept
  3477                                  ;                       BH      echo to terminal
  3478                                  ;                       BL      terminating character
  3479                                  ;
  3480                                  ;-----------------------------------------------------------------------------------------------------------------------
  3481                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  3482                                                          push    esi                                             ;
  3483                                                          push    edi                                             ;
  3484                                                          push    es                                              ;
  3485                                                          push    ds                                              ;load data segment selector ...
  3486                                                          pop     es                                              ;... into extra segment register
  3487                                                          mov     edi,edx                                         ;edi = target buffer
  3488                                                          push    ecx                                             ;save maximum characters
  3489                                                          xor     al,al                                           ;zero register
  3490                                                          cld                                                     ;forward strings
  3491                                                          rep     stosb                                           ;zero fill buffer
  3492                                                          pop     ecx                                             ;maximum characters
  3493                                                          mov     edi,edx                                         ;edi = target buffer
  3494                                                          mov     esi,edx                                         ;esi = target buffer
  3495                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  3496                                  .20                     call    GetConsoleChar                                  ;al = next input char
  3497                                                          cmp     al,bl                                           ;is this the terminator?
  3498                                                          je      .50                                             ;yes, exit
  3499                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3500                                                          jne     .30                                             ;no, skip ahead
  3501                                                          cmp     esi,edi                                         ;at start of buffer?
  3502                                                          je      .20                                             ;yes, get next character
  3503                                                          dec     edi                                             ;backup target pointer
  3504                                                          mov     byte [edi],0                                    ;zero previous character
  3505                                                          inc     ecx                                             ;increment remaining chars
  3506                                                          test    bh,1                                            ;echo to console?
  3507                                                          jz      .20                                             ;no, get next character
  3508                                                          call    PreviousConsoleColumn                           ;backup console position
  3509                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3510                                                          call    PutConsoleChar                                  ;write space to console
  3511                                                          call    PlaceCursor                                     ;position the cursor
  3512                                                          jmp     .20                                             ;get next character
  3513                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3514                                                          jb      .20                                             ;no, get another character
  3515                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3516                                                          ja      .20                                             ;no, get another character
  3517                                                          stosb                                                   ;store character in buffer
  3518                                                          test    bh,1                                            ;echo to console?
  3519                                                          jz      .40                                             ;no, skip ahead
  3520                                                          call    PutConsoleChar                                  ;write character to console
  3521                                                          call    NextConsoleColumn                               ;advance console position
  3522                                                          call    PlaceCursor                                     ;position the cursor
  3523                                  .40                     dec     ecx                                             ;decrement remaining chars
  3524                                                          jmp     .10                                             ;next
  3525                                  .50                     xor     al,al                                           ;null
  3526                                                          stosb                                                   ;terminate buffer
  3527                                                          pop     es                                              ;restore non-volatile regs
  3528                                                          pop     edi                                             ;
  3529                                                          pop     esi                                             ;
  3530                                                          pop     ecx                                             ;
  3531                                                          ret                                                     ;return
  3532                                  ;-----------------------------------------------------------------------------------------------------------------------
  3533                                  ;
  3534                                  ;       Routine:        NextConsoleColumn
  3535                                  ;
  3536                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3537                                  ;                       incremented if the end of the current row is reached.
  3538                                  ;
  3539                                  ;       In:             DS      OS data selector
  3540                                  ;
  3541                                  ;-----------------------------------------------------------------------------------------------------------------------
  3542                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3543                                                          inc     al                                              ;increment column
  3544                                                          mov     [wbConsoleColumn],al                            ;save column
  3545                                                          cmp     al,ECONCOLS                                     ;end of row?
  3546                                                          jb      .10                                             ;no, skip ahead
  3547                                                          call    FirstConsoleColumn                              ;reset column to start of row
  3548                                                          call    NextConsoleRow                                  ;line feed to next row
  3549                                  .10                     ret                                                     ;return
  3550                                  ;-----------------------------------------------------------------------------------------------------------------------
  3551                                  ;
  3552                                  ;       Routine:        NextConsoleRow
  3553                                  ;
  3554                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3555                                  ;
  3556                                  ;       In:             DS      OS data selector
  3557                                  ;
  3558                                  ;-----------------------------------------------------------------------------------------------------------------------
  3559                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3560                                                          inc     al                                              ;increment row
  3561                                                          mov     [wbConsoleRow],al                               ;save row
  3562                                                          cmp     al,ECONROWS                                     ;end of screen?
  3563                                                          jb      .10                                             ;no, skip ahead
  3564                                                          call    ScrollConsoleRow                                ;scroll up one row
  3565                                                          mov     al,[wbConsoleRow]                               ;row
  3566                                                          dec     al                                              ;decrement row
  3567                                                          mov     [wbConsoleRow],al                               ;save row
  3568                                  .10                     ret                                                     ;return
  3569                                  ;-----------------------------------------------------------------------------------------------------------------------
  3570                                  ;
  3571                                  ;       Routine:        PreviousConsoleColumn
  3572                                  ;
  3573                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3574                                  ;                       the column is set to the last position in the row and the row is decremented.
  3575                                  ;
  3576                                  ;       In:             DS      OS data selector
  3577                                  ;
  3578                                  ;-----------------------------------------------------------------------------------------------------------------------
  3579                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3580                                                          or      al,al                                           ;start of row?
  3581                                                          jnz     .10                                             ;no, skip ahead
  3582                                                          mov     ah,[wbConsoleRow]                               ;current row
  3583                                                          or      ah,ah                                           ;top of screen?
  3584                                                          jz      .20                                             ;yes, exit with no change
  3585                                                          dec     ah                                              ;decrement row
  3586                                                          mov     [wbConsoleRow],ah                               ;save row
  3587                                                          mov     al,ECONCOLS                                     ;set maximum column
  3588                                  .10                     dec     al                                              ;decrement column
  3589                                                          mov     [wbConsoleColumn],al                            ;save column
  3590                                  .20                     ret                                                     ;return
  3591                                  ;-----------------------------------------------------------------------------------------------------------------------
  3592                                  ;
  3593                                  ;       Routine:        PutConsoleChar
  3594                                  ;
  3595                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3596                                  ;
  3597                                  ;       In:             AL      ASCII character
  3598                                  ;                       DS      OS data selector
  3599                                  ;
  3600                                  ;-----------------------------------------------------------------------------------------------------------------------
  3601                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3602                                                          push    es                                              ;
  3603                                                          push    EGDTCGA                                         ;load CGA selector ...
  3604                                                          pop     es                                              ;... into extra segment reg
  3605                                                          mov     cl,[wbConsoleColumn]                            ;column
  3606                                                          mov     ch,[wbConsoleRow]                               ;row
  3607                                                          call    SetConsoleChar                                  ;put character at row, column
  3608                                                          pop     es                                              ;restore non-volatile regs
  3609                                                          pop     ecx                                             ;
  3610                                                          ret                                                     ;return
  3611                                  ;-----------------------------------------------------------------------------------------------------------------------
  3612                                  ;
  3613                                  ;       Routine:        PutConsoleHexByte
  3614                                  ;
  3615                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3616                                  ;
  3617                                  ;       In:             AL      byte value
  3618                                  ;                       CL      column
  3619                                  ;                       CH      row
  3620                                  ;                       DS      OS data selector
  3621                                  ;                       ES      CGA selector
  3622                                  ;
  3623                                  ;-----------------------------------------------------------------------------------------------------------------------
  3624                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3625                                                          mov     bl,al                                           ;save byte value
  3626                                                          shr     al,4                                            ;hi-order nybble
  3627                                                          or      al,030h                                         ;apply ASCII zone
  3628                                                          cmp     al,03ah                                         ;numeric?
  3629                                                          jb      .10                                             ;yes, skip ahead
  3630                                                          add     al,7                                            ;add ASCII offset for alpha
  3631                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3632                                                          mov     al,bl                                           ;byte value
  3633                                                          and     al,0fh                                          ;lo-order nybble
  3634                                                          or      al,30h                                          ;apply ASCII zone
  3635                                                          cmp     al,03ah                                         ;numeric?
  3636                                                          jb      .20                                             ;yes, skip ahead
  3637                                                          add     al,7                                            ;add ASCII offset for alpha
  3638                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3639                                                          pop     ebx                                             ;restore non-volatile regs
  3640                                                          ret                                                     ;return
  3641                                  ;-----------------------------------------------------------------------------------------------------------------------
  3642                                  ;
  3643                                  ;       Routine:        PutConsoleHexDword
  3644                                  ;
  3645                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3646                                  ;
  3647                                  ;       In:             EAX     value
  3648                                  ;                       CL      column
  3649                                  ;                       CH      row
  3650                                  ;                       DS      OS data selector
  3651                                  ;                       ES      CGA selector
  3652                                  ;
  3653                                  ;-----------------------------------------------------------------------------------------------------------------------
  3654                                  PutConsoleHexDword      push    eax
  3655                                                          shr     eax,16
  3656                                                          call    PutConsoleHexWord
  3657                                                          pop     eax
  3658                                                          call    PutConsoleHexWord
  3659                                                          ret
  3660                                  ;-----------------------------------------------------------------------------------------------------------------------
  3661                                  ;
  3662                                  ;       Routine:        PutConsoleHexWord
  3663                                  ;
  3664                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3665                                  ;
  3666                                  ;       In:             EAX     value
  3667                                  ;                       CL      column
  3668                                  ;                       CH      row
  3669                                  ;                       DS      OS data selector
  3670                                  ;                       ES      CGA selector
  3671                                  ;
  3672                                  ;-----------------------------------------------------------------------------------------------------------------------
  3673                                  PutConsoleHexWord       push    eax
  3674                                                          shr     eax,8
  3675                                                          call    PutConsoleHexByte
  3676                                                          pop     eax
  3677                                                          call    PutConsoleHexByte
  3678                                                          ret
  3679                                  ;-----------------------------------------------------------------------------------------------------------------------
  3680                                  ;
  3681                                  ;       Routine:        PutConsoleOIAChar
  3682                                  ;
  3683                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3684                                  ;
  3685                                  ;       In:             DS      OS data selector
  3686                                  ;
  3687                                  ;-----------------------------------------------------------------------------------------------------------------------
  3688                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3689                                                          push    ecx                                             ;
  3690                                                          push    esi                                             ;
  3691                                                          push    ds                                              ;
  3692                                                          push    es                                              ;
  3693                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3694                                                          pop     ds                                              ;... into data segment register
  3695                                                          push    EGDTCGA                                         ;load CGA selector ...
  3696                                                          pop     es                                              ;... into extra segment register
  3697                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3698                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3699                                                          mov     bl,0                                            ;starting column
  3700                                                          mov     ecx,6                                           ;maximum scan codes
  3701                                  .10                     push    ecx                                             ;save remaining count
  3702                                                          mov     ecx,ebx                                         ;row, column
  3703                                                          lodsb                                                   ;read scan code
  3704                                                          or      al,al                                           ;scan code present?
  3705                                                          jz      .20                                             ;no, skip ahead
  3706                                                          call    PutConsoleHexByte                               ;display scan code
  3707                                                          jmp     .30                                             ;continue
  3708                                  .20                     mov     al,' '                                          ;ASCII space
  3709                                                          call    SetConsoleChar                                  ;display space
  3710                                                          mov     al,' '                                          ;ASCII space
  3711                                                          call    SetConsoleChar                                  ;display space
  3712                                  .30                     add     bl,2                                            ;next column (+2)
  3713                                                          pop     ecx                                             ;restore remaining
  3714                                                          loop    .10                                             ;next code
  3715                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3716                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3717                                                          jb      .40                                             ;no, skip ahead
  3718                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3719                                                          ja      .40                                             ;no, skip ahead
  3720                                                          mov     ch,bh                                           ;OIA row
  3721                                                          mov     cl,40                                           ;character display column
  3722                                                          call    SetConsoleChar                                  ;display ASCII character
  3723                                  .40                     pop     es                                              ;restore non-volatile regs
  3724                                                          pop     ds                                              ;
  3725                                                          pop     esi                                             ;
  3726                                                          pop     ecx                                             ;
  3727                                                          pop     ebx                                             ;
  3728                                                          ret                                                     ;return
  3729                                  ;-----------------------------------------------------------------------------------------------------------------------
  3730                                  ;
  3731                                  ;       Routine:        PutConsoleOIAShift
  3732                                  ;
  3733                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3734                                  ;
  3735                                  ;       In:             BL      shift flags
  3736                                  ;                       BH      lock flags
  3737                                  ;                       DS      OS data selector
  3738                                  ;
  3739                                  ;-----------------------------------------------------------------------------------------------------------------------
  3740                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3741                                                          push    es                                              ;
  3742                                                          push    EGDTCGA                                         ;load CGA selector ...
  3743                                                          pop     es                                              ;... into ES register
  3744                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3745                                                          mov     al,EASCIISPACE                                  ;space is default character
  3746                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3747                                                          jz      .10                                             ;no, skip ahead
  3748                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3749                                  .10                     mov     cl,14                                           ;indicator column
  3750                                                          call    SetConsoleChar                                  ;display ASCII character
  3751                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3752                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3753                                                          jz      .20                                             ;no, skip ahead
  3754                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3755                                  .20                     mov     cl,64                                           ;indicator column
  3756                                                          call    SetConsoleChar                                  ;display ASCII character
  3757                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3758                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3759                                                          jz      .30                                             ;no, skip ahead
  3760                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3761                                  .30                     mov     cl,15                                           ;indicator column
  3762                                                          call    SetConsoleChar                                  ;display ASCII character
  3763                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3764                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3765                                                          jz      .40                                             ;no, skip ahead
  3766                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3767                                  .40                     mov     cl,63                                           ;indicator column
  3768                                                          call    SetConsoleChar                                  ;display ASCII character
  3769                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3770                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3771                                                          jz      .50                                             ;no, skip ahead
  3772                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3773                                  .50                     mov     cl,16                                           ;indicator column
  3774                                                          call    SetConsoleChar                                  ;display ASCII character
  3775                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3776                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3777                                                          jz      .60                                             ;no, skip ahead
  3778                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3779                                  .60                     mov     cl,62                                           ;indicator column
  3780                                                          call    SetConsoleChar                                  ;display ASCII character
  3781                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3782                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3783                                                          jz      .70                                             ;no, skip ahead
  3784                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3785                                  .70                     mov     cl,78                                           ;indicator column
  3786                                                          call    SetConsoleChar                                  ;display ASCII character
  3787                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3788                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3789                                                          jz      .80                                             ;no, skip ahead
  3790                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3791                                  .80                     mov     cl,77                                           ;indicator column
  3792                                                          call    SetConsoleChar                                  ;display ASCII character
  3793                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3794                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3795                                                          jz      .90                                             ;no, skip ahead
  3796                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3797                                  .90                     mov     cl,76                                           ;indicator column
  3798                                                          call    SetConsoleChar                                  ;display ASCII character
  3799                                                          pop     es                                              ;restore non-volatile regs
  3800                                                          pop     ecx                                             ;
  3801                                                          ret                                                     ;return
  3802                                  ;-----------------------------------------------------------------------------------------------------------------------
  3803                                  ;
  3804                                  ;       Routine:        PutConsoleString
  3805                                  ;
  3806                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3807                                  ;                       console position as needed.
  3808                                  ;
  3809                                  ;       In:             EDX     source address
  3810                                  ;                       DS      OS data selector
  3811                                  ;
  3812                                  ;-----------------------------------------------------------------------------------------------------------------------
  3813                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3814                                                          mov     esi,edx                                         ;source address
  3815                                                          cld                                                     ;forward strings
  3816                                  .10                     lodsb                                                   ;ASCII character
  3817                                                          or      al,al                                           ;end of string?
  3818                                                          jz      .40                                             ;yes, skip ahead
  3819                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3820                                                          jne     .20                                             ;no, skip ahead
  3821                                                          call    FirstConsoleColumn                              ;move to start of row
  3822                                                          jmp     .10                                             ;next character
  3823                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3824                                                          jne     .30                                             ;no, skip ahead
  3825                                                          call    NextConsoleRow                                  ;move to next row
  3826                                                          jmp     .10                                             ;next character
  3827                                  .30                     call    PutConsoleChar                                  ;output character to console
  3828                                                          call    NextConsoleColumn                               ;advance to next column
  3829                                                          jmp     .10                                             ;next character
  3830                                  .40                     pop     esi                                             ;restore non-volatile regs
  3831                                                          ret                                                     ;return
  3832                                  ;-----------------------------------------------------------------------------------------------------------------------
  3833                                  ;
  3834                                  ;       Routine:        Yield
  3835                                  ;
  3836                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3837                                  ;
  3838                                  ;-----------------------------------------------------------------------------------------------------------------------
  3839                                  Yield                   sti                                                     ;enable maskagle interrupts
  3840                                                          hlt                                                     ;halt until external interrupt
  3841                                                          ret                                                     ;return
  3842                                  ;=======================================================================================================================
  3843                                  ;
  3844                                  ;       Data-Type Conversion Helper Routines
  3845                                  ;
  3846                                  ;       DecimalToUnsigned
  3847                                  ;       HexadecimalToUnsigned
  3848                                  ;       UnsignedToDecimalString
  3849                                  ;       UnsignedToHexadecimal
  3850                                  ;
  3851                                  ;=======================================================================================================================
  3852                                  ;-----------------------------------------------------------------------------------------------------------------------
  3853                                  ;
  3854                                  ;       Routine:        DecimalToUnsigned
  3855                                  ;
  3856                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  3857                                  ;
  3858                                  ;       Input:          DS:EDX  null-terminated decimal string address
  3859                                  ;
  3860                                  ;       Output:         EAX     unsigned integer value
  3861                                  ;
  3862                                  ;-----------------------------------------------------------------------------------------------------------------------
  3863                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  3864                                                          mov     esi,edx                                         ;source address
  3865                                                          xor     edx,edx                                         ;zero total
  3866                                  .10                     lodsb                                                   ;source byte
  3867                                                          cmp     al,','                                          ;comma?
  3868                                                          je      .10                                             ;yes, ignore
  3869                                                          test    al,al                                           ;end of string?
  3870                                                          jz      .30                                             ;yes, done
  3871                                                          cmp     al,'.'                                          ;decimal point?
  3872                                                          je      .30                                             ;yes, done
  3873                                                          cmp     al,'0'                                          ;numeral?
  3874                                                          jb      .20                                             ;no, invalid string
  3875                                                          cmp     al,'9'                                          ;numeral?
  3876                                                          ja      .20                                             ;no, invalid string
  3877                                                          and     al,00Fh                                         ;mask ASCII zone
  3878                                                          push    eax                                             ;save numeral
  3879                                                          shl     edx,1                                           ;total * 2
  3880                                                          mov     eax,edx                                         ;total * 2
  3881                                                          shl     edx,2                                           ;total * 8
  3882                                                          add     edx,eax                                         ;total * 10
  3883                                                          pop     eax                                             ;restore numeral
  3884                                                          add     edx,eax                                         ;accumulate decimal digit
  3885                                                          xor     eax,eax                                         ;zero register
  3886                                                          jmp     .10                                             ;next
  3887                                  .20                     xor     edx,edx                                         ;zero result on error
  3888                                  .30                     mov     eax,edx                                         ;result
  3889                                                          pop     esi                                             ;restore non-volatile regs
  3890                                                          ret                                                     ;return
  3891                                  ;-----------------------------------------------------------------------------------------------------------------------
  3892                                  ;
  3893                                  ;       Routine:        HexadecimalToUnsigned
  3894                                  ;
  3895                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3896                                  ;
  3897                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3898                                  ;
  3899                                  ;       Output:         EAX     unsigned integer value
  3900                                  ;
  3901                                  ;-----------------------------------------------------------------------------------------------------------------------
  3902                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3903                                                          mov     esi,edx                                         ;source address
  3904                                                          xor     edx,edx                                         ;zero register
  3905                                  .10                     lodsb                                                   ;source byte
  3906                                                          test    al,al                                           ;end of string?
  3907                                                          jz      .30                                             ;yes, branch
  3908                                                          cmp     al,'9'                                          ;hexadecimal?
  3909                                                          jna     .20                                             ;no, skip ahead
  3910                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3911                                  .20                     and     eax,0fh                                         ;remove ascii zone
  3912                                                          shl     edx,4                                           ;previous total x 16
  3913                                                          add     edx,eax                                         ;add prior value x 16
  3914                                                          jmp     .10                                             ;next
  3915                                  .30                     mov     eax,edx                                         ;result
  3916                                                          pop     esi                                             ;restore non-volatile regs
  3917                                                          ret                                                     ;return
  3918                                  ;-----------------------------------------------------------------------------------------------------------------------
  3919                                  ;
  3920                                  ;       Routine:        UnsignedToDecimalString
  3921                                  ;
  3922                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3923                                  ;
  3924                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  3925                                  ;                                               bit 1: 1 = include comma grouping delimiters
  3926                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  3927                                  ;                       ECX     32-bit binary
  3928                                  ;                       DS:EDX  output buffer address
  3929                                  ;
  3930                                  ;-----------------------------------------------------------------------------------------------------------------------
  3931                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  3932                                                          push    ecx                                             ;
  3933                                                          push    edi                                             ;
  3934                                                          push    es                                              ;
  3935                                                          push    ds                                              ;load data selector
  3936                                                          pop     es                                              ;... into extra segment reg
  3937                                                          mov     edi,edx                                         ;output buffer address
  3938                                                          and     bh,00001111b                                    ;zero internal flags
  3939                                                          mov     edx,ecx                                         ;binary
  3940                                                          mov     ecx,1000000000                                  ;10^9 divisor
  3941                                                          call    .30                                             ;divide and store
  3942                                                          mov     ecx,100000000                                   ;10^8 divisor
  3943                                                          call    .10                                             ;divide and store
  3944                                                          mov     ecx,10000000                                    ;10^7 divisor
  3945                                                          call    .30                                             ;divide and store
  3946                                                          mov     ecx,1000000                                     ;10^6 divisor
  3947                                                          call    .30                                             ;divide and store
  3948                                                          mov     ecx,100000                                      ;10^5 divisor
  3949                                                          call    .10                                             ;divide and store
  3950                                                          mov     ecx,10000                                       ;10^4 divisor
  3951                                                          call    .30                                             ;divide and store
  3952                                                          mov     ecx,1000                                        ;10^3 divisor
  3953                                                          call    .30                                             ;divide and store
  3954                                                          mov     ecx,100                                         ;10^2 divisor
  3955                                                          call    .10                                             ;divide and store
  3956                                                          mov     ecx,10                                          ;10^2 divisor
  3957                                                          call    .30                                             ;divide and store
  3958                                                          mov     eax,edx                                         ;10^1 remainder
  3959                                                          call    .40                                             ;store
  3960                                                          xor     al,al                                           ;null terminator
  3961                                                          stosb
  3962                                                          pop     es                                              ;restore non-volatile regs
  3963                                                          pop     edi                                             ;
  3964                                                          pop     ecx                                             ;
  3965                                                          pop     ebx                                             ;
  3966                                                          ret                                                     ;return
  3967                                  .10                     test    bh,00000010b                                    ;comma group delims?
  3968                                                          jz      .30                                             ;no, branch
  3969                                                          test    bh,00000001b                                    ;trim leading zeros?
  3970                                                          jz      .20                                             ;no, store delim
  3971                                                          test    bh,00010000b                                    ;non-zero found?
  3972                                                          jz      .30                                             ;no, branch
  3973                                  .20                     mov     al,','                                          ;delimiter
  3974                                                          stosb                                                   ;store delimiter
  3975                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  3976                                                          xor     edx,edx                                         ;zero hi-order
  3977                                                          div     ecx                                             ;divide by power of 10
  3978                                                          test    al,al                                           ;zero?
  3979                                                          jz      .50                                             ;yes, branch
  3980                                                          or      bh,00010000b                                    ;non-zero found
  3981                                  .40                     or      al,30h                                          ;ASCII zone
  3982                                                          stosb                                                   ;store digit
  3983                                                          ret                                                     ;return
  3984                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  3985                                                          jz      .40                                             ;no, store and continue
  3986                                                          test    bh,00010000b                                    ;non-zero found?
  3987                                                          jnz     .40                                             ;yes, store and continue
  3988                                                          ret                                                     ;return
  3989                                  ;-----------------------------------------------------------------------------------------------------------------------
  3990                                  ;
  3991                                  ;       Routine:        UnsignedToHexadecimal
  3992                                  ;
  3993                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3994                                  ;
  3995                                  ;       Input:          DS:EDX  output buffer address
  3996                                  ;                       ECX     32-bit binary
  3997                                  ;
  3998                                  ;-----------------------------------------------------------------------------------------------------------------------
  3999                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4000                                                          mov     edi,edx                                         ;output buffer address
  4001                                                          mov     edx,ecx                                         ;32-bit unsigned
  4002                                                          xor     ecx,ecx                                         ;zero register
  4003                                                          mov     cl,8                                            ;nybble count
  4004                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4005                                                          mov     al,dl                                           ;????bbbb
  4006                                                          and     al,0fh                                          ;mask out bits 4-7
  4007                                                          or      al,30h                                          ;mask in ascii zone
  4008                                                          cmp     al,3ah                                          ;A through F?
  4009                                                          jb      .20                                             ;no, skip ahead
  4010                                                          add     al,7                                            ;41h through 46h
  4011                                  .20                     stosb                                                   ;store hexnum
  4012                                                          loop    .10                                             ;next nybble
  4013                                                          xor     al,al                                           ;zero reg
  4014                                                          stosb                                                   ;null terminate
  4015                                                          pop     edi                                             ;restore non-volatile regs
  4016                                                          ret                                                     ;return
  4017                                  ;=======================================================================================================================
  4018                                  ;
  4019                                  ;       Message Queue Helper Routines
  4020                                  ;
  4021                                  ;       GetMessage
  4022                                  ;       PutMessage
  4023                                  ;
  4024                                  ;=======================================================================================================================
  4025                                  ;-----------------------------------------------------------------------------------------------------------------------
  4026                                  ;
  4027                                  ;       Routine:        GetMessage
  4028                                  ;
  4029                                  ;       Description:    This routine reads and removes a message from the message queue.
  4030                                  ;
  4031                                  ;       Out:            EAX     lo-order message data
  4032                                  ;                       EDX     hi-order message data
  4033                                  ;
  4034                                  ;                       CY      0 = message read
  4035                                  ;                               1 = no message to read
  4036                                  ;
  4037                                  ;-----------------------------------------------------------------------------------------------------------------------
  4038                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4039                                                          push    ecx                                             ;
  4040                                                          push    ds                                              ;
  4041                                                          push    ELDTMQ                                          ;load message queue selector ...
  4042                                                          pop     ds                                              ;... into data segment register
  4043                                                          mov     ebx,[MQHead]                                    ;head ptr
  4044                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4045                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4046                                                          or      eax,edx                                         ;is queue empty?
  4047                                                          stc                                                     ;assume queue is emtpy
  4048                                                          jz      .20                                             ;yes, skip ahead
  4049                                                          xor     ecx,ecx                                         ;store zero
  4050                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4051                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4052                                                          add     ebx,8                                           ;next queue element
  4053                                                          and     ebx,03fch                                       ;at end of queue?
  4054                                                          jnz     .10                                             ;no, skip ahead
  4055                                                          mov     bl,8                                            ;reset to 1st entry
  4056                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4057                                                          clc                                                     ;indicate message read
  4058                                  .20                     pop     ds                                              ;restore non-volatile regs
  4059                                                          pop     ecx                                             ;
  4060                                                          pop     ebx                                             ;
  4061                                                          ret                                                     ;return
  4062                                  ;-----------------------------------------------------------------------------------------------------------------------
  4063                                  ;
  4064                                  ;       Routine:        PutMessage
  4065                                  ;
  4066                                  ;       Description:    This routine adda a message to the message queue.
  4067                                  ;
  4068                                  ;       In:             ECX     hi-order data word
  4069                                  ;                       EDX     lo-order data word
  4070                                  ;
  4071                                  ;       Out:            CY      0 = success
  4072                                  ;                               1 = fail: queue is full
  4073                                  ;
  4074                                  ;-----------------------------------------------------------------------------------------------------------------------
  4075                                  PutMessage              push    ds                                              ;save non-volatile regs
  4076                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4077                                                          pop     ds                                              ;... into data segment register
  4078                                                          mov     eax,[MQTail]                                    ;tail ptr
  4079                                                          cmp     dword [eax],0                                   ;is queue full?
  4080                                                          stc                                                     ;assume failure
  4081                                                          jne     .20                                             ;yes, cannot store
  4082                                                          mov     [eax],edx                                       ;store lo-order data
  4083                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4084                                                          add     eax,8                                           ;next queue element adr
  4085                                                          and     eax,03fch                                       ;at end of queue?
  4086                                                          jnz     .10                                             ;no, skip ahead
  4087                                                          mov     al,8                                            ;reset to top of queue
  4088                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4089                                                          clc                                                     ;indicate success
  4090                                  .20                     pop     ds                                              ;restore non-volatile regs
  4091                                                          ret                                                     ;return
  4092                                  ;=======================================================================================================================
  4093                                  ;
  4094                                  ;       Memory-Mapped Video Routines
  4095                                  ;
  4096                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4097                                  ;
  4098                                  ;       ClearConsoleScreen
  4099                                  ;       ScrollConsoleRow
  4100                                  ;       SetConsoleChar
  4101                                  ;       SetConsoleString
  4102                                  ;
  4103                                  ;=======================================================================================================================
  4104                                  ;-----------------------------------------------------------------------------------------------------------------------
  4105                                  ;
  4106                                  ;       Routine:        ClearConsoleScreen
  4107                                  ;
  4108                                  ;       Description:    This routine clears the console (CGA) screen.
  4109                                  ;
  4110                                  ;-----------------------------------------------------------------------------------------------------------------------
  4111                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4112                                                          push    edi                                             ;
  4113                                                          push    ds                                              ;
  4114                                                          push    es                                              ;
  4115                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4116                                                          pop     ds                                              ;... into DS register
  4117                                                          push    EGDTCGA                                         ;load CGA selector ...
  4118                                                          pop     es                                              ;... into ES register
  4119                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4120                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4121                                                          xor     edi,edi                                         ;target offset
  4122                                                          cld                                                     ;forward strings
  4123                                                          rep     stosd                                           ;reset screen body
  4124                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4125                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4126                                                          rep     stosd                                           ;reset OIA line
  4127                                                          xor     al,al                                           ;zero register
  4128                                                          mov     [wbConsoleRow],al                               ;reset console row
  4129                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4130                                                          call    PlaceCursor                                     ;place cursor at current position
  4131                                                          pop     es                                              ;restore non-volatile regs
  4132                                                          pop     ds                                              ;
  4133                                                          pop     edi                                             ;
  4134                                                          pop     ecx                                             ;
  4135                                                          ret                                                     ;return
  4136                                  ;-----------------------------------------------------------------------------------------------------------------------
  4137                                  ;
  4138                                  ;       Routine:        ScrollConsoleRow
  4139                                  ;
  4140                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4141                                  ;
  4142                                  ;-----------------------------------------------------------------------------------------------------------------------
  4143                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4144                                                          push    esi                                             ;
  4145                                                          push    edi                                             ;
  4146                                                          push    ds                                              ;
  4147                                                          push    es                                              ;
  4148                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4149                                                          pop     ds                                              ;... into DS
  4150                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4151                                                          pop     es                                              ;... into ES
  4152                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4153                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4154                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4155                                                          cld                                                     ;forward strings
  4156                                                          rep     movsd                                           ;move 24 lines up
  4157                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4158                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4159                                                          rep     stosd                                           ;clear bottom row
  4160                                                          pop     es                                              ;restore non-volatile regs
  4161                                                          pop     ds                                              ;
  4162                                                          pop     edi                                             ;
  4163                                                          pop     esi                                             ;
  4164                                                          pop     ecx                                             ;
  4165                                                          ret                                                     ;return
  4166                                  ;-----------------------------------------------------------------------------------------------------------------------
  4167                                  ;
  4168                                  ;       Routine:        SetConsoleChar
  4169                                  ;
  4170                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4171                                  ;
  4172                                  ;       In:             AL      ASCII character
  4173                                  ;                       CL      column
  4174                                  ;                       CH      row
  4175                                  ;                       ES      CGA selector
  4176                                  ;
  4177                                  ;       Out:            EAX     last target address written (ES:)
  4178                                  ;                       CL      column + 1
  4179                                  ;
  4180                                  ;-----------------------------------------------------------------------------------------------------------------------
  4181                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4182                                                          movzx   eax,ch                                          ;row
  4183                                                          mov     ah,ECONCOLS                                     ;cols/row
  4184                                                          mul     ah                                              ;row * cols/row
  4185                                                          add     al,cl                                           ;add column
  4186                                                          adc     ah,0                                            ;handle carry
  4187                                                          shl     eax,1                                           ;screen offset
  4188                                                          mov     [es:eax],dl                                     ;store character
  4189                                                          inc     cl                                              ;next column
  4190                                                          ret                                                     ;return
  4191                                  ;-----------------------------------------------------------------------------------------------------------------------
  4192                                  ;
  4193                                  ;       Routine:        SetConsoleString
  4194                                  ;
  4195                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4196                                  ;
  4197                                  ;       In:             ESI     source offset (DS:)
  4198                                  ;                       CL      column
  4199                                  ;                       CH      row
  4200                                  ;                       ES      CGA selector
  4201                                  ;
  4202                                  ;-----------------------------------------------------------------------------------------------------------------------
  4203                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4204                                                          cld                                                     ;forward strings
  4205                                  .10                     lodsb                                                   ;next ASCII character
  4206                                                          test    al,al                                           ;end of string?
  4207                                                          jz      .20                                             ;yes, branch
  4208                                                          call    SetConsoleChar                                  ;store character
  4209                                                          jmp     .10                                             ;continue
  4210                                  .20                     pop     esi                                             ;restore non-volatile regs
  4211                                                          ret                                                     ;return
  4212                                  ;=======================================================================================================================
  4213                                  ;
  4214                                  ;       Input/Output Routines
  4215                                  ;
  4216                                  ;       These routines read and/or write directly to ports.
  4217                                  ;
  4218                                  ;       GetBaseMemSize
  4219                                  ;       GetExtendedMemSize
  4220                                  ;       GetROMMemSize
  4221                                  ;       PlaceCursor
  4222                                  ;       PutPrimaryEndOfInt
  4223                                  ;       PutSecondaryEndOfInt
  4224                                  ;       ResetSystem
  4225                                  ;       SetKeyboardLamps
  4226                                  ;       WaitForKeyInBuffer
  4227                                  ;       WaitForKeyOutBuffer
  4228                                  ;
  4229                                  ;=======================================================================================================================
  4230                                  ;-----------------------------------------------------------------------------------------------------------------------
  4231                                  ;
  4232                                  ;       Routine:        GetBaseMemSize
  4233                                  ;
  4234                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4235                                  ;
  4236                                  ;       Output:         EAX     base RAM size in bytes
  4237                                  ;
  4238                                  ;-----------------------------------------------------------------------------------------------------------------------
  4239                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4240                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4241                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4242                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4243                                                          mov     ah,al                                           ;save base RAM high
  4244                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4245                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4246                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4247                                                          ret                                                     ;return to caller
  4248                                  ;-----------------------------------------------------------------------------------------------------------------------
  4249                                  ;
  4250                                  ;       Routine:        GetExtendedMemSize
  4251                                  ;
  4252                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4253                                  ;
  4254                                  ;       Output:         EAX     extended RAM size in bytes
  4255                                  ;
  4256                                  ;-----------------------------------------------------------------------------------------------------------------------
  4257                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4258                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4259                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4260                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4261                                                          mov     ah,al                                           ;save extended RAM high
  4262                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4263                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4264                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4265                                                          ret                                                     ;return to caller
  4266                                  ;-----------------------------------------------------------------------------------------------------------------------
  4267                                  ;
  4268                                  ;       Routine:        GetROMMemSize
  4269                                  ;
  4270                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4271                                  ;
  4272                                  ;       Output:         EAX     RAM size in bytes
  4273                                  ;
  4274                                  ;-----------------------------------------------------------------------------------------------------------------------
  4275                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4276                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4277                                                          ret                                                     ;return
  4278                                  ;-----------------------------------------------------------------------------------------------------------------------
  4279                                  ;
  4280                                  ;       Routine:        PlaceCursor
  4281                                  ;
  4282                                  ;       Description:    This routine positions the cursor on the console.
  4283                                  ;
  4284                                  ;       In:             DS      OS data selector
  4285                                  ;
  4286                                  ;-----------------------------------------------------------------------------------------------------------------------
  4287                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4288                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4289                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4290                                                          mul     ah                                              ;row offset
  4291                                                          add     al,[wbConsoleColumn]                            ;add column
  4292                                                          adc     ah,0                                            ;add overflow
  4293                                                          mov     ecx,eax                                         ;screen offset
  4294                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4295                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4296                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4297                                                          out     dx,al                                           ;select register
  4298                                                          inc     edx                                             ;data port
  4299                                                          mov     al,ch                                           ;hi-order cursor loc
  4300                                                          out     dx,al                                           ;store hi-order loc
  4301                                                          dec     edx                                             ;register select port
  4302                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4303                                                          out     dx,al                                           ;select register
  4304                                                          inc     edx                                             ;data port
  4305                                                          mov     al,cl                                           ;lo-order cursor loc
  4306                                                          out     dx,al                                           ;store lo-order loc
  4307                                                          pop     ecx                                             ;restore non-volatile regs
  4308                                                          ret                                                     ;return
  4309                                  ;-----------------------------------------------------------------------------------------------------------------------
  4310                                  ;
  4311                                  ;       Routine:        PutPrimaryEndOfInt
  4312                                  ;
  4313                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4314                                  ;
  4315                                  ;-----------------------------------------------------------------------------------------------------------------------
  4316                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4317                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4318                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4319                                                          ret                                                     ;return
  4320                                  ;-----------------------------------------------------------------------------------------------------------------------
  4321                                  ;
  4322                                  ;       Routine:        PutSecondaryEndOfInt
  4323                                  ;
  4324                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4325                                  ;
  4326                                  ;-----------------------------------------------------------------------------------------------------------------------
  4327                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4328                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4329                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4330                                                          ret                                                     ;return
  4331                                  ;-----------------------------------------------------------------------------------------------------------------------
  4332                                  ;
  4333                                  ;       Routine:        ResetSystem
  4334                                  ;
  4335                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4336                                  ;
  4337                                  ;       Out:            N/A     This routine does not return.
  4338                                  ;
  4339                                  ;-----------------------------------------------------------------------------------------------------------------------
  4340                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4341                                                          loop    $                                               ;clear interrupts
  4342                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4343                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4344                                  .10                     sti                                                     ;enable maskable interrupts
  4345                                                          hlt                                                     ;halt until interrupt
  4346                                                          jmp     .10                                             ;repeat until reset kicks in
  4347                                  ;-----------------------------------------------------------------------------------------------------------------------
  4348                                  ;
  4349                                  ;       Routine:        SetKeyboardLamps
  4350                                  ;
  4351                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4352                                  ;
  4353                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4354                                  ;
  4355                                  ;-----------------------------------------------------------------------------------------------------------------------
  4356                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4357                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4358                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4359                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4360                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4361                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4362                                                          mov     al,bh                                           ;set/reset lamps value
  4363                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4364                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4365                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4366                                                          ret                                                     ;return
  4367                                  ;-----------------------------------------------------------------------------------------------------------------------
  4368                                  ;
  4369                                  ;       Routine:        WaitForKeyInBuffer
  4370                                  ;
  4371                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4372                                  ;
  4373                                  ;       Out:            ZF      1 = Input buffer ready
  4374                                  ;                               0 = Input buffer not ready after timeout
  4375                                  ;
  4376                                  ;-----------------------------------------------------------------------------------------------------------------------
  4377                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4378                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4379                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4380                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4381                                                          loopnz  .10                                             ;yes, repeat till timeout
  4382                                                          pop     ecx                                             ;restore non-volatile regs
  4383                                                          ret                                                     ;return
  4384                                  ;-----------------------------------------------------------------------------------------------------------------------
  4385                                  ;
  4386                                  ;       Routine:        WaitForKeyOutBuffer
  4387                                  ;
  4388                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4389                                  ;
  4390                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4391                                  ;                               0 = Output buffer empty after timeout
  4392                                  ;
  4393                                  ;-----------------------------------------------------------------------------------------------------------------------
  4394                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4395                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4396                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4397                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  4398                                                          loopz   .10                                             ;loop until output buffer bit
  4399                                                          pop     ecx                                             ;restore non-volatile regs
  4400                                                          ret                                                     ;return
  4401                                  ;-----------------------------------------------------------------------------------------------------------------------
  4402                                  ;
  4403                                  ;       End of the Kernel Function Library
  4404                                  ;
  4405                                  ;-----------------------------------------------------------------------------------------------------------------------
  4406                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  4407                                  ;=======================================================================================================================
  4408                                  ;
  4409                                  ;       Console Task
  4410                                  ;
  4411                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4412                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4413                                  ;       screen and responds to user commands.
  4414                                  ;
  4415                                  ;=======================================================================================================================
  4416                                  ;-----------------------------------------------------------------------------------------------------------------------
  4417                                  ;
  4418                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4419                                  ;
  4420                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4421                                  ;
  4422                                  ;-----------------------------------------------------------------------------------------------------------------------
  4423                                  section                 constack                                                ;console task stack
  4424                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  4425                                  ;-----------------------------------------------------------------------------------------------------------------------
  4426                                  ;
  4427                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4428                                  ;
  4429                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4430                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4431                                  ;       16 descriptors. Six are initially defined.
  4432                                  ;
  4433                                  ;-----------------------------------------------------------------------------------------------------------------------
  4434                                  section                 conldt                                                  ;console local descriptors
  4435                                                          dq      004093004780007Fh                               ;04 TSS alias
  4436                                                          dq      004093004700007Fh                               ;0c LDT alias
  4437                                                          dq      00409300400006FFh                               ;14 stack
  4438                                                          dq      00CF93000000FFFFh                               ;1c data
  4439                                                          dq      00409B0050000FFFh                               ;24 code
  4440                                                          dq      00409300480007FFh                               ;2c message queue
  4441                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4442                                  ;-----------------------------------------------------------------------------------------------------------------------
  4443                                  ;
  4444                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4445                                  ;
  4446                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4447                                  ;       segment. CS to console code.
  4448                                  ;
  4449                                  ;-----------------------------------------------------------------------------------------------------------------------
  4450                                  section                 contss                                                  ;console task state segment
  4451                                                          dd      0                                               ;00 back-link tss
  4452                                                          dd      0700h                                           ;04 esp ring 0
  4453                                                          dd      0014h                                           ;08 ss ring 0
  4454                                                          dd      0700h                                           ;0c esp ring 1
  4455                                                          dd      0014h                                           ;10 es ring 1
  4456                                                          dd      0700h                                           ;14 esp ring 2
  4457                                                          dd      0014h                                           ;18 ss ring 2
  4458                                                          dd      0                                               ;1c cr ring 3
  4459                                                          dd      0                                               ;20 eip
  4460                                                          dd      0200h                                           ;24 eflags
  4461                                                          dd      0                                               ;28 eax
  4462                                                          dd      0                                               ;2c ecx
  4463                                                          dd      0                                               ;30 edx
  4464                                                          dd      0                                               ;34 ebx
  4465                                                          dd      0700h                                           ;38 esp ring 3
  4466                                                          dd      0                                               ;3c ebp
  4467                                                          dd      0                                               ;40 esi
  4468                                                          dd      0                                               ;44 edi
  4469                                                          dd      001Ch                                           ;48 es
  4470                                                          dd      0024h                                           ;4c cs
  4471                                                          dd      0014h                                           ;50 ss ring 3
  4472                                                          dd      001Ch                                           ;54 ds
  4473                                                          dd      0                                               ;58 fs
  4474                                                          dd      0                                               ;5c gs
  4475                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4476                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4477                                  ;-----------------------------------------------------------------------------------------------------------------------
  4478                                  ;
  4479                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4480                                  ;
  4481                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4482                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4483                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4484                                  ;       event.
  4485                                  ;
  4486                                  ;-----------------------------------------------------------------------------------------------------------------------
  4487                                  section                 conmque                                                 ;console message queue
  4488                                                          dd      8                                               ;head pointer
  4489                                                          dd      8                                               ;tail pointer
  4490                                                          times   510 dd 0                                        ;queue elements
  4491                                  ;-----------------------------------------------------------------------------------------------------------------------
  4492                                  ;
  4493                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4494                                  ;
  4495                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4496                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4497                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4498                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4499                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4500                                  ;       board input, echoing to the console screen and responding to user commands.
  4501                                  ;
  4502                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4503                                  ;
  4504                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4505                                  ;                               |  Real Mode Interrupt Vectors                  |
  4506                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4507                                  ;                               |  Reserved BIOS Memory Area                    |
  4508                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4509                                  ;                               |  Shared Kernel Memory Area                    |
  4510                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4511                                  ;                               |  Global Descriptor Table (GDT)                |
  4512                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4513                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4514                                  ;                       002000  +-----------------------------------------------+
  4515                                  ;                               |  Interrupt Handlers                           |
  4516                                  ;                               |  Kernel Function Library                      |
  4517                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4518                                  ;                               |  Console Task Stack Area                      |
  4519                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4520                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4521                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4522                                  ;                               |  Console Task Task State Segment (TSS)        |
  4523                                  ;                       004800  +-----------------------------------------------+
  4524                                  ;                               |  Console Task Message Queue                   |
  4525                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4526                                  ;                               |  Console Task Code                            |
  4527                                  ;                               |  Console Task Constants                       |
  4528                                  ;                       006000  +===============================================+
  4529                                  ;
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4532                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  4533                                  
  4534                                                          clearConsoleScreen                                      ;clear the console screen
  4535                                                          putConsoleString czTitle                                ;display startup message
  4536                                                          putConsoleString czROMMem                               ;ROM memory label
  4537                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  4538                                                          putConsoleString czKB                                   ;Kilobytes
  4539                                                          putConsoleString czNewLine                              ;new line
  4540                                                          putConsoleString czBaseMem                              ;base memory label
  4541                                                          putConsoleString wzBaseMemSize                          ;base memory size
  4542                                                          putConsoleString czKB                                   ;Kilobytes
  4543                                                          putConsoleString czNewLine                              ;new line
  4544                                                          putConsoleString czExtendedMem                          ;extended memory label
  4545                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  4546                                                          putConsoleString czKB                                   ;Kilobytes
  4547                                                          putConsoleString czNewLine                              ;new line
  4548                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4549                                                          placeCursor                                             ;set CRT cursor location
  4550                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4551                                                          putConsoleString czNewLine                              ;newline
  4552                                  
  4553                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  4554                                                          mov     ebx,wzConsoleToken                              ;token buffer
  4555                                                          call    ConTakeToken                                    ;handle console input
  4556                                                          mov     edx,wzConsoleToken                              ;token buffer
  4557                                                          call    ConDetermineCommand                             ;determine command number
  4558                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4559                                                          jb      .20                                             ;yes, branch
  4560                                  
  4561                                                          putConsoleString czUnknownCommand                       ;display error message
  4562                                  
  4563                                                          jmp     .10                                             ;next command
  4564                                  .20                     shl     eax,2                                           ;index into jump table
  4565                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  4566                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4567                                                          call    eax                                             ;call command handler
  4568                                                          jmp     .10                                             ;next command
  4569                                  ;-----------------------------------------------------------------------------------------------------------------------
  4570                                  ;
  4571                                  ;       Routine:        ConInitializeData
  4572                                  ;
  4573                                  ;       Description:    This routine initializes console task variables.
  4574                                  ;
  4575                                  ;-----------------------------------------------------------------------------------------------------------------------
  4576                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  4577                                                          push    edi                                             ;
  4578                                                          push    es                                              ;
  4579                                  ;
  4580                                  ;       Initialize console work areas.
  4581                                  ;
  4582                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4583                                                          pop     es                                              ;... into extra segment register
  4584                                                          mov     edi,ECONDATA                                    ;OS console data address
  4585                                                          xor     al,al                                           ;initialization value
  4586                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  4587                                                          cld                                                     ;forward strings
  4588                                                          rep     stosb                                           ;initialize data
  4589                                  ;
  4590                                  ;       Initialize heap size
  4591                                  ;
  4592                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4593                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  4594                                  ;
  4595                                  ;       Initialize MEMROOT structure
  4596                                  ;
  4597                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  4598                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  4599                                                          xor     ecx,ecx                                         ;zero register
  4600                                                          mov     cl,4                                            ;count
  4601                                                          rep     stosd                                           ;store first/last contig and free addrs
  4602                                                          xor     eax,eax                                         ;zero register
  4603                                                          stosd                                                   ;zero first task block
  4604                                                          stosd                                                   ;zero last task block
  4605                                  ;
  4606                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  4607                                  ;
  4608                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  4609                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  4610                                                          stosd                                                   ;store signature
  4611                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4612                                                          stosd                                                   ;store block size
  4613                                                          xor     ecx,ecx                                         ;zero register
  4614                                                          mov     cl,6                                            ;count
  4615                                                          xor     eax,eax                                         ;zero register
  4616                                                          rep     stosd                                           ;zero owner, reserved, pointers
  4617                                  ;
  4618                                  ;       Read memory sizes from ROM
  4619                                  ;
  4620                                                          getROMMemSize                                           ;get ROM memory size
  4621                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  4622                                                          mov     ecx,eax                                         ;integer param
  4623                                                          mov     edx,wzROMMemSize                                ;output buffer param
  4624                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  4625                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4626                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  4627                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  4628                                                          mov     ecx,eax                                         ;integer param
  4629                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  4630                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  4631                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4632                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  4633                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  4634                                                          mov     ecx,eax                                         ;integer param
  4635                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  4636                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  4637                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4638                                  ;
  4639                                  ;       Restore and return.
  4640                                  ;
  4641                                                          pop     es                                              ;restore non-volatile regs
  4642                                                          pop     edi                                             ;
  4643                                                          pop     ecx                                             ;
  4644                                                          ret                                                     ;return
  4645                                  ;-----------------------------------------------------------------------------------------------------------------------
  4646                                  ;
  4647                                  ;       Routine:        ConTakeToken
  4648                                  ;
  4649                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4650                                  ;
  4651                                  ;       In:             DS:EDX  source buffer address
  4652                                  ;                       DS:EBX  target buffer address
  4653                                  ;
  4654                                  ;       Out:            DS:EDX  source buffer address
  4655                                  ;                       DS:EBX  target buffer address
  4656                                  ;
  4657                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4658                                  ;
  4659                                  ;-----------------------------------------------------------------------------------------------------------------------
  4660                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  4661                                                          push    edi                                             ;
  4662                                                          push    es                                              ;
  4663                                                          push    ds                                              ;load data segment selector ...
  4664                                                          pop     es                                              ;... into extra segment reg
  4665                                                          mov     esi,edx                                         ;source buffer address
  4666                                                          mov     edi,ebx                                         ;target buffer address
  4667                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4668                                                          cld                                                     ;forward strings
  4669                                  .10                     lodsb                                                   ;load byte
  4670                                                          cmp     al,EASCIISPACE                                  ;space?
  4671                                                          je      .10                                             ;yes, continue
  4672                                                          test    al,al                                           ;end of line?
  4673                                                          jz      .40                                             ;yes, branch
  4674                                  .20                     stosb                                                   ;store byte
  4675                                                          lodsb                                                   ;load byte
  4676                                                          test    al,al                                           ;end of line?
  4677                                                          jz      .40                                             ;no, continue
  4678                                                          cmp     al,EASCIISPACE                                  ;space?
  4679                                                          jne     .20                                             ;no, continue
  4680                                  .30                     lodsb                                                   ;load byte
  4681                                                          cmp     al,EASCIISPACE                                  ;space?
  4682                                                          je      .30                                             ;yes, continue
  4683                                                          dec     esi                                             ;pre-position
  4684                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4685                                                          mov     edi,edx                                         ;source buffer address
  4686                                  .50                     lodsb                                                   ;remaining byte
  4687                                                          stosb                                                   ;move to front of buffer
  4688                                                          test    al,al                                           ;end of line?
  4689                                                          jnz     .50                                             ;no, continue
  4690                                                          pop     es                                              ;restore non-volatile regs
  4691                                                          pop     edi                                             ;
  4692                                                          pop     esi                                             ;
  4693                                                          ret                                                     ;return
  4694                                  ;-----------------------------------------------------------------------------------------------------------------------
  4695                                  ;
  4696                                  ;       Routine:        ConDetermineCommand
  4697                                  ;
  4698                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4699                                  ;
  4700                                  ;       input:          DS:EDX  command address
  4701                                  ;
  4702                                  ;       output:         EAX     >=0     = command nbr
  4703                                  ;                               0       = unknown command
  4704                                  ;
  4705                                  ;-----------------------------------------------------------------------------------------------------------------------
  4706                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4707                                                          push    ecx                                             ;
  4708                                                          push    esi                                             ;
  4709                                                          push    edi                                             ;
  4710                                  
  4711                                                          upperCaseString                                         ;upper-case string at EDX
  4712                                  
  4713                                                          mov     esi,tConCmdTbl                                  ;commands table
  4714                                                          xor     edi,edi                                         ;intialize command number
  4715                                                          cld                                                     ;forward strings
  4716                                  .10                     lodsb                                                   ;command length
  4717                                                          movzx   ecx,al                                          ;command length
  4718                                                          jecxz   .20                                             ;branch if end of table
  4719                                                          mov     ebx,esi                                         ;table entry address
  4720                                                          add     esi,ecx                                         ;next table entry address
  4721                                  
  4722                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4723                                  
  4724                                                          jecxz   .20                                             ;branch if equal
  4725                                                          inc     edi                                             ;increment command nbr
  4726                                                          jmp     .10                                             ;repeat
  4727                                  .20                     mov     eax,edi                                         ;command number
  4728                                                          pop     edi                                             ;restore non-volatile regs
  4729                                                          pop     esi                                             ;
  4730                                                          pop     ecx                                             ;
  4731                                                          pop     ebx                                             ;
  4732                                                          ret                                                     ;return
  4733                                  ;-----------------------------------------------------------------------------------------------------------------------
  4734                                  ;
  4735                                  ;       Routine:        ConClear
  4736                                  ;
  4737                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4738                                  ;
  4739                                  ;-----------------------------------------------------------------------------------------------------------------------
  4740                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4741                                                          ret                                                     ;return
  4742                                  ;-----------------------------------------------------------------------------------------------------------------------
  4743                                  ;
  4744                                  ;       Routine:        ConExit
  4745                                  ;
  4746                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4747                                  ;
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749                                  ConExit                 resetSystem                                             ;issue system reset
  4750                                                          ret                                                     ;return
  4751                                  ;-----------------------------------------------------------------------------------------------------------------------
  4752                                  ;
  4753                                  ;       Routine:        ConFree
  4754                                  ;
  4755                                  ;       Description:    This routine handles the FREE command.
  4756                                  ;
  4757                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4758                                  ;
  4759                                  ;-----------------------------------------------------------------------------------------------------------------------
  4760                                  ConFree                 push    ebx                                             ;save non-volatile regs
  4761                                                          push    ecx                                             ;
  4762                                                          push    esi                                             ;
  4763                                                          push    edi                                             ;
  4764                                  ;
  4765                                  ;       Get address parameter
  4766                                  ;
  4767                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  4768                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4769                                                          call    ConTakeToken                                    ;take first param as token
  4770                                  ;
  4771                                  ;       Convert input parameter from hexadecimal string to binary
  4772                                  ;
  4773                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4774                                                          je      .10                                             ;no, branch
  4775                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4776                                  
  4777                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4778                                  
  4779                                                          test    eax,eax                                         ;valid parameter?
  4780                                                          jz      .10                                             ;no, branch
  4781                                  ;
  4782                                  ;       Free memory block
  4783                                  ;
  4784                                                          freeMemory eax                                          ;free memory
  4785                                  
  4786                                                          cmp     eax,-1                                          ;memory freed?
  4787                                                          je      .10                                             ;no, branch
  4788                                  ;
  4789                                  ;       Indicate memory freed
  4790                                  ;
  4791                                                          putConsoleString czOK                                   ;indicate success
  4792                                  ;
  4793                                  ;       Restore and return
  4794                                  ;
  4795                                  .10                     pop     edi                                             ;restore non-volatile regs
  4796                                                          pop     esi                                             ;
  4797                                                          pop     ecx                                             ;
  4798                                                          pop     ebx                                             ;
  4799                                                          ret                                                     ;return
  4800                                  ;-----------------------------------------------------------------------------------------------------------------------
  4801                                  ;
  4802                                  ;       Routine:        ConInt6
  4803                                  ;
  4804                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4805                                  ;
  4806                                  ;-----------------------------------------------------------------------------------------------------------------------
  4807                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  4808                                                          ret                                                     ;return (not executed)
  4809                                  ;-----------------------------------------------------------------------------------------------------------------------
  4810                                  ;
  4811                                  ;       Routine:        ConMalloc
  4812                                  ;
  4813                                  ;       Description:    This routine handles the MALLOC command.
  4814                                  ;
  4815                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4816                                  ;
  4817                                  ;-----------------------------------------------------------------------------------------------------------------------
  4818                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  4819                                                          push    ecx                                             ;
  4820                                                          push    esi                                             ;
  4821                                                          push    edi                                             ;
  4822                                  ;
  4823                                  ;       Get size parameter
  4824                                  ;
  4825                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4826                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4827                                                          call    ConTakeToken                                    ;take first param as token
  4828                                  ;
  4829                                  ;       Convert input parameter from decimal string to binary
  4830                                  ;
  4831                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4832                                                          je      .10                                             ;no, branch
  4833                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4834                                  
  4835                                                          decimalToUnsigned                                       ;convert string token to unsigned
  4836                                  
  4837                                                          test    eax,eax                                         ;valid parameter?
  4838                                                          jz      .10                                             ;no, branch
  4839                                  ;
  4840                                  ;       Allocate memory block
  4841                                  ;
  4842                                                          allocateMemory eax                                      ;allocate memory
  4843                                  
  4844                                                          test    eax,eax                                         ;memory allocated?
  4845                                                          jz      .10                                             ;no, branch
  4846                                  ;
  4847                                  ;       Report allocated memory block address
  4848                                  ;
  4849                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  4850                                                          mov     ecx,eax                                         ;memory address
  4851                                  
  4852                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  4853                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  4854                                                          putConsoleString czNewLine                              ;display new line
  4855                                  
  4856                                  .10                     pop     edi                                             ;restore non-volatile regs
  4857                                                          pop     esi                                             ;
  4858                                                          pop     ecx                                             ;
  4859                                                          pop     ebx                                             ;
  4860                                                          ret                                                     ;return
  4861                                  ;-----------------------------------------------------------------------------------------------------------------------
  4862                                  ;
  4863                                  ;       Routine:        ConMem
  4864                                  ;
  4865                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4866                                  ;
  4867                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4868                                  ;
  4869                                  ;-----------------------------------------------------------------------------------------------------------------------
  4870                                  ConMem                  push    ebx                                             ;save non-volatile regs
  4871                                                          push    esi                                             ;
  4872                                                          push    edi                                             ;
  4873                                  ;
  4874                                  ;                       update the source address if a parameter is given
  4875                                  ;
  4876                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4877                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4878                                                          call    ConTakeToken                                    ;take first param as token
  4879                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4880                                                          je      .10                                             ;no, branch
  4881                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4882                                  
  4883                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4884                                  
  4885                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  4886                                  ;
  4887                                  ;                       setup source address and row count
  4888                                  ;
  4889                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4890                                                          xor     ecx,ecx                                         ;zero register
  4891                                                          mov     cl,16                                           ;row count
  4892                                  ;
  4893                                  ;                       start the row with the source address in hexadecimal
  4894                                  ;
  4895                                  .20                     push    ecx                                             ;save remaining rows
  4896                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4897                                                          mov     edx,edi                                         ;output buffer address
  4898                                                          mov     ecx,esi                                         ;console memory address
  4899                                  
  4900                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4901                                  
  4902                                                          add     edi,8                                           ;end of memory addr hexnum
  4903                                                          mov     al,' '                                          ;ascii space
  4904                                                          stosb                                                   ;store delimiter
  4905                                  ;
  4906                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4907                                  ;
  4908                                                          xor     ecx,ecx                                         ;zero register
  4909                                                          mov     cl,16                                           ;loop count
  4910                                  .30                     push    ecx                                             ;save loop count
  4911                                                          lodsb                                                   ;memory byte
  4912                                                          mov     ah,al                                           ;memory byte
  4913                                                          shr     al,4                                            ;high-order in bits 3-0
  4914                                                          or      al,30h                                          ;apply ascii numeric zone
  4915                                                          cmp     al,3ah                                          ;numeric range?
  4916                                                          jb      .40                                             ;yes, skip ahead
  4917                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4918                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4919                                                          mov     al,ah                                           ;low-order in bits 3-0
  4920                                                          and     al,0fh                                          ;mask out high-order bits
  4921                                                          or      al,30h                                          ;apply ascii numeric zone
  4922                                                          cmp     al,3ah                                          ;numeric range?
  4923                                                          jb      .50                                             ;yes, skip ahead
  4924                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4925                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4926                                                          mov     al,' '                                          ;ascii space
  4927                                                          stosb                                                   ;store ascii space delimiter
  4928                                                          pop     ecx                                             ;loop count
  4929                                                          loop    .30                                             ;next
  4930                                  ;
  4931                                  ;                       output printable ASCII character section for the row
  4932                                  ;
  4933                                                          sub     esi,16                                          ;reset source pointer
  4934                                                          mov     cl,16                                           ;loop count
  4935                                  .60                     lodsb                                                   ;source byte
  4936                                                          cmp     al,32                                           ;printable? (low-range test)
  4937                                                          jb      .70                                             ;no, skip ahead
  4938                                                          cmp     al,128                                          ;printable? (high-range test)
  4939                                                          jb      .80                                             ;yes, skip ahead
  4940                                  .70                     mov     al,' '                                          ;display space instead of printable
  4941                                  .80                     stosb                                                   ;store printable ascii byte
  4942                                                          loop    .60                                             ;next source byte
  4943                                                          xor     al,al                                           ;nul-terminator
  4944                                                          stosb                                                   ;terminate output line
  4945                                  ;
  4946                                  ;                       display constructed output buffer and newline
  4947                                  ;
  4948                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4949                                                          putConsoleString czNewLine                              ;display new line
  4950                                  ;
  4951                                  ;                       repeat until all lines displayed and preserve source address
  4952                                  ;
  4953                                                          pop     ecx                                             ;remaining rows
  4954                                                          loop    .20                                             ;next row
  4955                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4956                                                          pop     edi                                             ;restore regs
  4957                                                          pop     esi                                             ;
  4958                                                          pop     ebx                                             ;
  4959                                                          ret                                                     ;return
  4960                                  ;-----------------------------------------------------------------------------------------------------------------------
  4961                                  ;
  4962                                  ;       Routine:        ConVersion
  4963                                  ;
  4964                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4965                                  ;
  4966                                  ;-----------------------------------------------------------------------------------------------------------------------
  4967                                  ConVersion              putConsoleString czTitle                                ;display version message
  4968                                                          ret                                                     ;return
  4969                                  ;-----------------------------------------------------------------------------------------------------------------------
  4970                                  ;
  4971                                  ;       Tables
  4972                                  ;
  4973                                  ;-----------------------------------------------------------------------------------------------------------------------
  4974                                                                                                                  ;---------------------------------------
  4975                                                                                                                  ;  Command Jump Table
  4976                                                                                                                  ;---------------------------------------
  4977                                  tConJmpTbl              equ     $                                               ;command jump table
  4978                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4979                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4980                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  4981                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4982                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4983                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4984                                                          dd      ConFree         - ConCode                       ;free command routine offset
  4985                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4986                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4987                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4988                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4989                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4990                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4991                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4992                                                                                                                  ;---------------------------------------
  4993                                                                                                                  ;  Command Name Table
  4994                                                                                                                  ;---------------------------------------
  4995                                  tConCmdTbl              equ     $                                               ;command name table
  4996                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4997                                                          db      8,"VERSION",0                                   ;version command
  4998                                                          db      7,"MALLOC",0                                    ;malloc command
  4999                                                          db      7,"MEMORY",0                                    ;memory command
  5000                                                          db      6,"CLEAR",0                                     ;clear command
  5001                                                          db      5,"EXIT",0                                      ;exit command
  5002                                                          db      5,"FREE",0                                      ;free command
  5003                                                          db      5,"INT6",0                                      ;int6 command
  5004                                                          db      5,"QUIT",0                                      ;quit command
  5005                                                          db      4,"CLS",0                                       ;cls command
  5006                                                          db      4,"MEM",0                                       ;mem command
  5007                                                          db      4,"VER",0                                       ;ver command
  5008                                                          db      0                                               ;end of table
  5009                                  ;-----------------------------------------------------------------------------------------------------------------------
  5010                                  ;
  5011                                  ;       Constants
  5012                                  ;
  5013                                  ;-----------------------------------------------------------------------------------------------------------------------
  5014                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  5015                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  5016                                  czKB                    db      "KB",0                                          ;Kilobytes
  5017                                  czNewLine               db      13,10,0                                         ;new line string
  5018                                  czOK                    db      "ok",13,10,0                                    ;ok string
  5019                                  czPrompt                db      ":",0                                           ;prompt string
  5020                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  5021                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5022                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5023                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  5024                                  %endif
  5025                                  %ifdef BUILDDISK
  5026                                  ;-----------------------------------------------------------------------------------------------------------------------
  5027                                  ;
  5028                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5029                                  ;
  5030                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5031                                  ;
  5032                                  ;-----------------------------------------------------------------------------------------------------------------------
  5033                                  section                 unused                                                  ;unused disk space
  5034                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5035                                  %endif
  5036                                  ;=======================================================================================================================
  5037                                  ;
  5038                                  ;       End of Program Code
  5039                                  ;
  5040                                  ;=======================================================================================================================
