     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.011
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading the real-time clock and new
     8                                  ;                       "date" and "time" and other related commands.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMEM...         Memory Management values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     70h                                             ;register select port
   277                                  ERTCDATAPORT            equ     71h                                             ;data port
   278                                  ERTCSECONDREG           equ     00h                                             ;second
   279                                  ERTCMINUTEREG           equ     02h                                             ;minute
   280                                  ERTCHOURREG             equ     04h                                             ;hour
   281                                  ERTCWEEKDAYREG          equ     06h                                             ;weekday
   282                                  ERTCDAYREG              equ     07h                                             ;day
   283                                  ERTCMONTHREG            equ     08h                                             ;month
   284                                  ERTCYEARREG             equ     09h                                             ;year of the century
   285                                  ERTCSTATUSREG           equ     0bh                                             ;status
   286                                  ERTCCENTURYREG          equ     32h                                             ;century
   287                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  ;
   290                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   291                                  ;
   292                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   293                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   294                                  ;
   295                                  ;       0.......        Segment is not present in memory (triggers int 11)
   296                                  ;       1.......        Segment is present in memory
   297                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   298                                  ;       ...0....        Segment is a system segment
   299                                  ;       ...00010                Local Descriptor Table
   300                                  ;       ...00101                Task Gate
   301                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   302                                  ;       ...01100                Call Gate (386)
   303                                  ;       ...01110                Interrupt Gate (386)
   304                                  ;       ...01111                Trap Gate (386)
   305                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   306                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   307                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   308                                  ;
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   311                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   312                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   313                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   314                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   315                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   316                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   317                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;
   320                                  ;       Firmware-Defined Values
   321                                  ;
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;
   325                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   326                                  ;
   327                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   328                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   329                                  ;
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   332                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   333                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   334                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   335                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   336                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   337                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   338                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   339                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   340                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   341                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;
   344                                  ;       Standards-Based Values
   345                                  ;
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;       ASCII                                                                   EASCII...
   350                                  ;
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   353                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   354                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   355                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   356                                  EASCIISPACE             equ     020h                                            ;space
   357                                  EASCIIUPPERA            equ     041h                                            ;'A'
   358                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   359                                  EASCIILOWERA            equ     061h                                            ;'a'
   360                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   361                                  EASCIITILDE             equ     07Eh                                            ;'~'
   362                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   363                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   364                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   365                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   366                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   367                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   368                                  EASCIICASE              equ     00100000b                                       ;case bit
   369                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ;
   372                                  ;       Operating System Values
   373                                  ;
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  ;
   377                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   378                                  ;
   379                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   380                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   381                                  ;
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   384                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   385                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   386                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   387                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   388                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   389                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ;       Console Constants                                                       ECON...
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  ECONCOLS                equ     80                                              ;columns per row
   394                                  ECONROWS                equ     24                                              ;console rows
   395                                  ECONOIAROW              equ     24                                              ;operator information area row
   396                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   397                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   398                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   399                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   400                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   401                                  ;-----------------------------------------------------------------------------------------------------------------------
   402                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   405                                  EGDTCGA                 equ     020h                                            ;cga video selector
   406                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   407                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   408                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   409                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   410                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   411                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ;       Keyboard Flags                                                          EKEYF...
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   416                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   417                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   418                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   419                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   420                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   421                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   422                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   423                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   424                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   425                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  ;       Kernel Constants                                                        EKRN...
   428                                  ;-----------------------------------------------------------------------------------------------------------------------
   429                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   430                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   431                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   432                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   433                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   434                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  ;       Memory Management Constants                                             EMEM...
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   443                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   444                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   445                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  ;       Message Identifiers                                                     EMSG...
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   450                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   451                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   452                                  ;=======================================================================================================================
   453                                  ;
   454                                  ;       Structures
   455                                  ;
   456                                  ;=======================================================================================================================
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  ;
   459                                  ;       DATETIME
   460                                  ;
   461                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   462                                  ;
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  struc                   DATETIME
   465 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   466 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   467 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   468 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   469 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   470 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   471 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   472 00000007 <res 00000001>          .century                resb    1                                               ;century
   473                                  EDATETIMELEN            equ     ($-.second)
   474                                  endstruc
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;
   477                                  ;       MEMBLOCK
   478                                  ;
   479                                  ;       The MEMBLOCK structure defines a memory block.
   480                                  ;
   481                                  ;-----------------------------------------------------------------------------------------------------------------------
   482                                  struc                   MEMBLOCK
   483 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   484 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   485 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   486 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   487 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   488 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   489 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   490 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   491                                  EMEMBLOCKLEN            equ     ($-.signature)
   492                                  endstruc
   493                                  ;-----------------------------------------------------------------------------------------------------------------------
   494                                  ;
   495                                  ;       MEMROOT
   496                                  ;
   497                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   498                                  ;
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  struc                   MEMROOT
   501 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   502 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   503 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   504 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   505 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   506 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   507                                  EMEMROOTLEN             equ     ($-.firstcontig)
   508                                  endstruc
   509                                  ;-----------------------------------------------------------------------------------------------------------------------
   510                                  ;
   511                                  ;       MQUEUE
   512                                  ;
   513                                  ;       The MQUEUE structure maps memory used for a message queue.
   514                                  ;
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516                                  struc                   MQUEUE
   517 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   518 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   519 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   520                                  endstruc
   521                                  ;-----------------------------------------------------------------------------------------------------------------------
   522                                  ;
   523                                  ;       OSDATA
   524                                  ;
   525                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   526                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   527                                  ;
   528                                  ;-----------------------------------------------------------------------------------------------------------------------
   529                                  struc                   OSDATA
   530 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   531 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   532 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   533 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   534 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   535 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   536 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   537 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   538 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   539 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   540 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   541 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   542 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   543 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   544 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   545 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   546 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   547 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   548 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   549 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   550 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   551 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   552 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   553 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   554 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   555 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   556 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   557 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   558 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   559 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   560 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   561 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   562 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   563 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   564 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   565 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   566 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   567 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   568 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   569 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   570 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   571 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   572 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   573 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   574 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   575 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   576 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   577 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   578 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   579 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   580 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   581 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   582 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   583 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   584 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   585 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   586 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   587 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   588 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   589 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   590 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   591 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   592 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   593 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   594 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   595 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   596 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   597 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   598 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   599 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   600 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   601 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   602 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   603 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   604 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   605 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   606 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   607 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   608 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   609 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   610 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   611 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   612 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   613 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   614 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   615 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   616 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   617 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   618 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   619 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   620 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   621 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   622 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   623 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   624 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   625 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   626 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   627 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   628 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   629 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   630 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   631                                  ;-----------------------------------------------------------------------------------------------------------------------
   632                                  ;
   633                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   634                                  ;
   635                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   636                                  ;
   637                                  ;-----------------------------------------------------------------------------------------------------------------------
   638                                  ECONDATA                equ     ($)
   639 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   640 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   641 00000808 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   642 00000820 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   643 00000821 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   644 00000822 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   645 00000823 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   646 00000824 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   647 00000825 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   648 00000826 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   649 00000827 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   650 00000828 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   651 00000829 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   652 0000082A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   653 0000082B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   654 0000082C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   655 0000087C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   656 000008CC <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   657 0000091C <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   658                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   659                                  ;-----------------------------------------------------------------------------------------------------------------------
   660                                  ;
   661                                  ;       End of OS Variables
   662                                  ;
   663                                  ;-----------------------------------------------------------------------------------------------------------------------
   664                                  endstruc
   665                                  ;-----------------------------------------------------------------------------------------------------------------------
   666                                  ;
   667                                  ;       Macros
   668                                  ;
   669                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   670                                  ;
   671                                  ;-----------------------------------------------------------------------------------------------------------------------
   672                                  %macro                  mint    1
   673                                  _%1                     equ     ($-$$) / EX86DESCLEN
   674                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   675                                  %endmacro
   676                                  %macro                  mtrap   1
   677                                  _%1                     equ     ($-$$) / EX86DESCLEN
   678                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   679                                  %endmacro
   680                                  %macro                  menter  1
   681                                  ?%1                     equ     ($-$$)
   682                                  %endmacro
   683                                  %macro                  tsvce   1
   684                                  e%1                     equ     ($-tsvc)/4
   685                                                          dd      %1
   686                                  %endmacro
   687                                  %ifdef BUILDBOOT
   688                                  ;=======================================================================================================================
   689                                  ;
   690                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   691                                  ;
   692                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   693                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   694                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   695                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   696                                  ;
   697                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   698                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   699                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   700                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   701                                  ;       immediately followed by a disk parameter table.
   702                                  ;
   703                                  ;=======================================================================================================================
   704                                                          cpu     8086                                            ;assume minimal CPU
   705                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   706                                                          bits    16                                              ;16-bit code at power-up
   707                                  %ifdef BUILDPREP
   708 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   709                                  %else
   710                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   711                                  %endif
   712                                  ;-----------------------------------------------------------------------------------------------------------------------
   713                                  ;
   714                                  ;       Disk Parameter Table
   715                                  ;
   716                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   717                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   718                                  ;
   719                                  ;-----------------------------------------------------------------------------------------------------------------------
   720 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   721 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   722 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   723 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   724 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   725 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   726 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   727 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   728 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   729                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   730 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   731 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   732 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   733                                  ;
   734                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   735                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   736                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   737                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   738                                  ;       given several possible starting values for CS:IP.
   739                                  ;
   740                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   741 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   742                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   743 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   744 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   745 00000025 B104                                            mov     cl,4                                            ;shift count
   746 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   747 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   748 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   749                                  ;
   750                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   751                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   752                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   753                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   754                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   755                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   756                                  ;
   757 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   758 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   759 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   760 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   761 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   762                                  ;
   763                                  ;       Our boot addressability is now set up according to the following diagram.
   764                                  ;
   765                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   766                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   767                                  ;                               |  256 = 100h bytes                             |
   768                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   769                                  ;                               |  Boot Sector (vstart=0100h)                   |
   770                                  ;                               |  1 sector = 512 = 200h bytes                  |
   771                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   772                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   773                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   774                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   775                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   776                                  ;                               |  2 sectors = 1024 = 400h bytes
   777                                  ;                       009400  +-----------------------------------------------+ DS:1900
   778                                  ;
   779                                  ;       On entry, DL indicates the drive being booted from.
   780                                  ;
   781 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   782                                  ;
   783                                  ;       Compute directory i/o buffer address.
   784                                  ;
   785 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   786 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   787 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   788 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   789                                  ;
   790                                  ;       Compute segment where os.com will be loaded.
   791                                  ;
   792 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   793 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   794 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   795 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   796                                  ;
   797                                  ;       Set the video mode to 80 column, 25 row, text.
   798                                  ;
   799 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   800 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   801                                  ;
   802                                  ;       Write a message to the console so we know we have our addressability established.
   803                                  ;
   804 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   805 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   806                                  ;
   807                                  ;       Initialize the number of directory sectors to search.
   808                                  ;
   809 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   810 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   811                                  ;
   812                                  ;       Compute number of directory sectors and initialize overhead count.
   813                                  ;
   814 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   815 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   816 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   817 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   818                                  ;
   819                                  ;       Compute directory entries per sector.
   820                                  ;
   821 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   822 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   823 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   824                                  ;
   825                                  ;       Compute first logical directory sector and update overhead count.
   826                                  ;
   827 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   828 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   829 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   830 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   831 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   832 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   833                                  ;
   834                                  ;       Read directory sector.
   835                                  ;
   836 0000008E B001                    .30                     mov     al,1                                            ;sector count
   837 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   838 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   839 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   840                                  ;
   841                                  ;       Setup variables to search this directory sector.
   842                                  ;
   843 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   844 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   845 000000A1 7603                                            jna     .40                                             ;no, continue
   846 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   847 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   848 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   849 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   850                                  ;
   851                                  ;       Loop through directory sectors searching for kernel program.
   852                                  ;
   853 000000B1 56                      .50                     push    si                                              ;save kernel name address
   854 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   855 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   856 000000B6 FC                                              cld                                                     ;forward strings
   857 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   858 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   859 000000BA 5E                                              pop     si                                              ;restore kernel name address
   860 000000BB 7418                                            je      .60                                             ;exit loop if found
   861 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   862 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   863 000000C2 75ED                                            jnz     .50                                             ;next entry
   864                                  ;
   865                                  ;       Repeat search if we are not at the end of the directory.
   866                                  ;
   867 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   868 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   869 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   870 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   871 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   872                                  ;
   873                                  ;       If we find the kernel program in the directory, read the FAT.
   874                                  ;
   875 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   876 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   877 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   878 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   879 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   880 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   881                                  ;
   882                                  ;       Get the starting cluster of the kernel program and target address.
   883                                  ;
   884 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   885 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   886                                  ;
   887                                  ;       Read each program cluster into RAM.
   888                                  ;
   889 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   890 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   891 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   892 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   893 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   894 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   895 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   896 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   897 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   898                                  ;
   899                                  ;       Update buffer pointer for next cluster.
   900                                  ;
   901 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   902 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   903 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   904 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   905 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   906                                  ;
   907                                  ;       Compute next cluster number.
   908                                  ;
   909 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   910 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   911 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   912 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   913 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   914 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   915 00000120 83E701                                          and     di,1                                            ;get low bit
   916 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   917 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   918 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   919                                  ;
   920                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   921                                  ;
   922 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   923 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   924 00000130 B104                                            mov     cl,4                                            ;shift count
   925 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   926 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   927 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   928 0000013A 75B2                                            jne     .70                                             ;no, continue
   929                                  ;
   930                                  ;       Transfer control to the operating system program.
   931                                  ;
   932 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   933 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   934 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   935                                  ;
   936                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   937                                  ;
   938 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   939 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   940 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   941 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   942 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   943 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   944 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   945 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   946 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   947 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   948                                  ;
   949                                  ;       Try maxtries times to read sector.
   950                                  ;
   951 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   952 00000160 53                      .10                     push    bx                                              ;save buffer address
   953 00000161 51                                              push    cx                                              ;save retry count
   954 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   955 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   956 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   957 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   958 0000016F 59                                              pop     cx                                              ;restore retry count
   959 00000170 5B                                              pop     bx                                              ;restore buffer address
   960 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   961 00000173 E2EB                                            loop    .10                                             ;retry
   962                                  ;
   963                                  ;       Handle disk error: convert to ASCII and store in error string.
   964                                  ;
   965 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   966 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   967 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   968 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   969 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   970 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   971 00000183 7203                                            jb      .20                                             ;continue if numeral
   972 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   973 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   974 0000018A 7203                                            jb      .30                                             ;continue if numeral
   975 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   976 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   977 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   978 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   979                                  ;
   980                                  ;       Wait for a key press.
   981                                  ;
   982 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   983 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   984 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   985 0000019E FB                                              sti                                                     ;enable maskable interrupts
   986 0000019F F4                                              hlt                                                     ;wait for interrupt
   987 000001A0 EBF6                                            jmp     .10                                             ;repeat
   988                                  ;
   989                                  ;       Reset the system.
   990                                  ;
   991 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   992 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   993 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   994 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   995 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   996                                  ;
   997                                  ;       Display text message.
   998                                  ;
   999 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1000 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1001 000001AC 84C0                                            test    al,al                                           ;end of string?
  1002 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1003 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1004 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1005 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1006 000001B6 C3                      BootReturn              ret                                                     ;return
  1007                                  ;-----------------------------------------------------------------------------------------------------------------------
  1008                                  ;
  1009                                  ;       Constants
  1010                                  ;
  1011                                  ;-----------------------------------------------------------------------------------------------------------------------
  1012 000001B7 90                                              align   2
  1013 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1014 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1014 000001C3 4F4D               
  1015 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1015 000001CE 530D0A00           
  1016 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1016 000001DB 7220               
  1017 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1018 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1018 000001E9 6700               
  1019                                  ;-----------------------------------------------------------------------------------------------------------------------
  1020                                  ;
  1021                                  ;       Work Areas
  1022                                  ;
  1023                                  ;-----------------------------------------------------------------------------------------------------------------------
  1024 000001EB 90                                              align   2
  1025 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1026 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1027 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1028 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1029 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1030                                  wwReadCountCommand      equ     $                                               ;read count and command
  1031 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1032 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1033                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1034 000001F8 00                      wbDrive                 db      0                                               ;drive
  1035 000001F9 00                      wbHead                  db      0                                               ;head
  1036                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1037 000001FA 00                                              db      0                                               ;sector
  1038 000001FB 00                      wbTrack                 db      0                                               ;track
  1039 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1040 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1041                                  %endif
  1042                                  %ifdef BUILDPREP
  1043                                  ;=======================================================================================================================
  1044                                  ;
  1045                                  ;       Diskette Preparation Code
  1046                                  ;
  1047                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1048                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1049                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1050                                  ;
  1051                                  ;=======================================================================================================================
  1052                                  ;
  1053                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1054                                  ;
  1055 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1056 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1057                                  ;
  1058                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1059                                  ;
  1060 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1061 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1062 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1063 0000020C FB                                              sti                                                     ;enable interrupts
  1064 0000020D F4                                              hlt                                                     ;wait for interrupt
  1065 0000020E EBF6                                            jmp     .10                                             ;repeat
  1066 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1067 00000212 7407                                            je      .30                                             ;yes, branch
  1068 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1069 00000216 75EE                                            jne     .10                                             ;no, repeat
  1070 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
  1071                                  ;
  1072                                  ;       Display writing-sector message and patch the JMP instruction.
  1073                                  ;
  1074 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1075 0000021E E889FF                                          call    BootPrint                                       ;display message
  1076 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1077 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1078 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1079                                  ;
  1080                                  ;       Try to read the boot sector.
  1081                                  ;
  1082 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1083 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1084 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1085 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1086 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1087 00000236 B001                                            mov     al,1                                            ;one sector
  1088 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1089 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1090 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1091 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1092 0000023F E2EB                                            loop    .40                                             ;try again
  1093 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1094 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1095                                  ;
  1096                                  ;       Copy diskette parms from input buffer to output buffer.
  1097                                  ;
  1098 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1099 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1100 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1101 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1102 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1103 00000255 FC                                              cld                                                     ;forward string copies
  1104 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1105                                  ;
  1106                                  ;       Try to write boot sector to diskette.
  1107                                  ;
  1108 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1109 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1110 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1111 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1112 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1113 00000265 B001                                            mov     al,1                                            ;one sector
  1114 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1115 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1116 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1117 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1118 0000026E E2EB                                            loop    .60                                             ;try again
  1119 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1120                                  ;
  1121                                  ;       Convert the error code to ASCII and display the error message.
  1122                                  ;
  1123 00000273 50                      .70                     push    ax                                              ;save error code
  1124 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1125 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1126 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1127 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1128 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1129 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1130 00000282 7203                                            jb      .80                                             ;yes, continue
  1131 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1132 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1133 00000289 7202                                            jb      .90                                             ;yes, continue
  1134 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1135 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1136 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1137 00000293 58                                              pop     ax                                              ;restore error code
  1138                                  ;
  1139                                  ;       Display the completion message.
  1140                                  ;
  1141 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1142 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1143 00000299 3C00                                            cmp     al,0                                            ;success?
  1144 0000029B 7426                                            je      .110                                            ;yes, continue
  1145 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1146 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1147 000002A2 741F                                            je      .110                                            ;yes, continue
  1148 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1149 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1150 000002A9 7418                                            je      .110                                            ;yes, continue
  1151 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1152 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1153 000002B0 7411                                            je      .110                                            ;yes, continue
  1154 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1155 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1156 000002B7 740A                                            je      .110                                            ;yes, continue
  1157 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1158 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1159 000002BE 7403                                            je      .110                                            ;yes, continue
  1160 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1161 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1162 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1163 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1164 000002CB C3                                              ret                                                     ;return (should not execute)
  1165                                  ;-----------------------------------------------------------------------------------------------------------------------
  1166                                  ;
  1167                                  ;       Diskette Preparation Messages
  1168                                  ;
  1169                                  ;-----------------------------------------------------------------------------------------------------------------------
  1170 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1170 000002D5 5320426F6F742D4469-
  1170 000002DE 736B65747465205072-
  1170 000002E7 657061726174696F6E-
  1170 000002F0 2050726F6772616D   
  1171 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1171 00000301 687420284329203230-
  1171 0000030A 31302D323031382044-
  1171 00000313 61766964204A2E2057-
  1171 0000031C 616C6C696E672E2041-
  1171 00000325 6C6C20726967687473-
  1171 0000032E 207265736572766564-
  1171 00000337 2E                 
  1172 00000338 0D0A                                            db      13,10
  1173 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1173 00000343 6F6772616D206F7665-
  1173 0000034C 727772697465732074-
  1173 00000355 686520626F6F742073-
  1173 0000035E 6563746F72206F6620-
  1173 00000367 61206469736B657474-
  1173 00000370 652077697468207374-
  1173 00000379 617274757020636F64-
  1173 00000382 652074686174       
  1174 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1174 00000391 616420746865206F70-
  1174 0000039A 65726174696E672073-
  1174 000003A3 797374656D20696E74-
  1174 000003AC 6F206D656D6F727920-
  1174 000003B5 7768656E2074686520-
  1174 000003BE 636F6D707574657220-
  1174 000003C7 697320726573746172-
  1174 000003D0 7465642E           
  1175 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1175 000003DD 6565642C20706C6163-
  1175 000003E6 65206120666F726D61-
  1175 000003EF 74746564206469736B-
  1175 000003F8 6574746520696E746F-
  1175 00000401 20647269766520413A-
  1175 0000040A 20616E642070726573-
  1175 00000413 732074686520456E74-
  1175 0000041C 6572206B65792E     
  1176 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1176 0000042C 20746869732070726F-
  1176 00000435 6772616D2077697468-
  1176 0000043E 6F7574207072657061-
  1176 00000447 72696E672061206469-
  1176 00000450 736B657474652C2070-
  1176 00000459 726573732074686520-
  1176 00000462 457363617065206B65-
  1176 0000046B 792E               
  1177 0000046D 0D0A00                                          db      13,10,0
  1178 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1178 00000479 2074686520626F6F74-
  1178 00000482 20736563746F722074-
  1178 0000048B 6F2074686520646973-
  1178 00000494 6B65747465202E2E2E 
  1179 0000049D 0D0A00                                          db      13,10,0
  1180 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1180 000004A9 6F722D636F6465202E-
  1180 000004B2 2E2077617320726574-
  1180 000004BB 75726E65642066726F-
  1180 000004C4 6D207468652042494F-
  1180 000004CD 53207768696C652072-
  1180 000004D6 656164696E67206672-
  1180 000004DF 6F6D20746865206469-
  1180 000004E8 736B2E             
  1181 000004EB 0D0A00                                          db      13,10,0
  1182 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1182 000004F7 6F722D636F6465202E-
  1182 00000500 2E2077617320726574-
  1182 00000509 75726E65642066726F-
  1182 00000512 6D207468652042494F-
  1182 0000051B 53207768696C652077-
  1182 00000524 726974696E6720746F-
  1182 0000052D 20746865206469736B-
  1182 00000536 2E                 
  1183 00000537 0D0A00                                          db      13,10,0
  1184 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1184 00000543 742D736563746F7220-
  1184 0000054C 776173207772697474-
  1184 00000555 656E20746F20746865-
  1184 0000055E 206469736B65747465-
  1184 00000567 2E204265666F726520-
  1184 00000570 626F6F74696E672079-
  1184 00000579 6F757220636F6D7075-
  1184 00000582 7465722077697468   
  1185 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1185 00000593 736B657474652C206D-
  1185 0000059C 616B65207375726520-
  1185 000005A5 746861742074686520-
  1185 000005AE 66696C65204F532E43-
  1185 000005B7 4F4D20697320636F70-
  1185 000005C0 696564206F6E746F20-
  1185 000005C9 746865206469736B65-
  1185 000005D2 7474652E           
  1186 000005D6 0D0A00                                          db      13,10,0
  1187 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1187 000005E2 76616C696420446973-
  1187 000005EB 6B20506172616D6574-
  1187 000005F4 6572               
  1188 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1188 000005FF 20616E20696E746572-
  1188 00000608 6E616C206572726F72-
  1188 00000611 206361757365642062-
  1188 0000061A 7920616E20696E7661-
  1188 00000623 6C69642076616C7565-
  1188 0000062C 206265696E67207061-
  1188 00000635 7373656420746F2061-
  1188 0000063E 2073797374656D     
  1189 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1189 0000064E 6E2E20546865204F53-
  1189 00000657 424F4F542E434F4D20-
  1189 00000660 66696C65206D617920-
  1189 00000669 626520636F72727570-
  1189 00000672 742E20436F7079206F-
  1189 0000067B 7220646F776E6C6F61-
  1189 00000684 64207468652066696C-
  1189 0000068D 6520616761696E     
  1190 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1190 0000069D 72792E             
  1191 000006A0 0D0A00                                          db      13,10,0
  1192 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1192 000006AC 6472657373204D6172-
  1192 000006B5 6B204E6F7420466F75-
  1192 000006BE 6E64               
  1193 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1193 000006C9 726F7220696E646963-
  1193 000006D2 617465732061207068-
  1193 000006DB 79736963616C207072-
  1193 000006E4 6F626C656D20776974-
  1193 000006ED 682074686520666C6F-
  1193 000006F6 707079206469736B65-
  1193 000006FF 7474652E20506C6561-
  1193 00000708 7365207265747279   
  1194 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1194 00000719 6E6F74686572206469-
  1194 00000722 736B657474652E     
  1195 00000729 0D0A00                                          db      13,10,0
  1196 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1196 00000735 6F7465637465642044-
  1196 0000073E 69736B             
  1197 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1197 0000074A 726F72206973207573-
  1197 00000753 75616C6C7920636175-
  1197 0000075C 736564206279206174-
  1197 00000765 74656D7074696E6720-
  1197 0000076E 746F20777269746520-
  1197 00000777 746F20612077726974-
  1197 00000780 652D70726F74656374-
  1197 00000789 6564206469736B2E   
  1198 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1198 0000079A 686520277772697465-
  1198 000007A3 2D70726F7465637427-
  1198 000007AC 2073657474696E6720-
  1198 000007B5 6F6E20746865206469-
  1198 000007BE 736B206F7220726574-
  1198 000007C7 7279207573696E6720-
  1198 000007D0 7573696E6720616E6F-
  1198 000007D9 74686572206469736B-
  1198 000007E2 2E                 
  1199 000007E3 0D0A00                                          db      13,10,0
  1200 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1200 000007EF 736B65747465205265-
  1200 000007F8 6D6F766564         
  1201 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1201 00000806 726F72206D61792069-
  1201 0000080F 6E6469636174652074-
  1201 00000818 686174207468652066-
  1201 00000821 6C6F70707920646973-
  1201 0000082A 6B6574746520686173-
  1201 00000833 206265656E2072656D-
  1201 0000083C 6F7665642066726F6D-
  1201 00000845 20746865           
  1202 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1202 00000852 652064726976652E20-
  1202 0000085B 4F6E20736F6D652073-
  1202 00000864 797374656D732C2074-
  1202 0000086D 68697320636F646520-
  1202 00000876 6D617920616C736F20-
  1202 0000087F 6F6363757220696620-
  1202 00000888 746865206469736B65-
  1202 00000891 747465206973       
  1203 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1203 000008A0 70726F746563746564-
  1203 000008A9 2E2720506C65617365-
  1203 000008B2 207665726966792074-
  1203 000008BB 686174207468652064-
  1203 000008C4 69736B657474652069-
  1203 000008CD 73206E6F7420777269-
  1203 000008D6 74652D70726F746563-
  1203 000008DF 74656420616E64     
  1204 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1204 000008EF 65726C7920696E7365-
  1204 000008F8 7274656420696E2074-
  1204 00000901 6865206469736B6574-
  1204 0000090A 74652064726976652E 
  1205 00000913 0D0A00                                          db      13,10,0
  1206 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1206 0000091F 6976652054696D6564-
  1206 00000928 204F7574           
  1207 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1207 00000935 726F7220757375616C-
  1207 0000093E 6C7920696E64696361-
  1207 00000947 746573207468617420-
  1207 00000950 6E6F206469736B6574-
  1207 00000959 746520697320696E20-
  1207 00000962 746865206469736B65-
  1207 0000096B 747465206472697665-
  1207 00000974 2E20506C65617365   
  1208 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1208 00000985 726520746861742074-
  1208 0000098E 6865206469736B6574-
  1208 00000997 74652069732070726F-
  1208 000009A0 7065726C7920736561-
  1208 000009A9 74656420696E207468-
  1208 000009B2 652064726976652061-
  1208 000009BB 6E642072657472792E 
  1209 000009C4 0D0A00                                          db      13,10,0
  1210 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1210 000009D0 6B6E6F776E20457272-
  1210 000009D9 6F72               
  1211 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1211 000009E4 6F722D636F64652072-
  1211 000009ED 657475726E65642062-
  1211 000009F6 79207468652042494F-
  1211 000009FF 53206973206E6F7420-
  1211 00000A08 61207265636F676E69-
  1211 00000A11 7A6564206572726F72-
  1211 00000A1A 2E20506C6561736520-
  1211 00000A23 636F6E73756C74     
  1212 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1212 00000A33 6D7075746572277320-
  1212 00000A3C 746563686E6963616C-
  1212 00000A45 207265666572656E63-
  1212 00000A4E 6520666F7220612064-
  1212 00000A57 65736372697074696F-
  1212 00000A60 6E206F662074686973-
  1212 00000A69 206572726F7220636F-
  1212 00000A72 64652E             
  1213 00000A75 0D0A00                                          db      13,10,0
  1214                                  wcPrepInBuf             equ     $
  1215                                  %endif
  1216                                  %ifdef BUILDDISK
  1217                                  ;=======================================================================================================================
  1218                                  ;
  1219                                  ;       File Allocation Tables
  1220                                  ;
  1221                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1222                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1223                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1224                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1225                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1226                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1227                                  ;       the last cluster in the chain.
  1228                                  ;
  1229                                  ;       Every three bytes encode two FAT entries as follows:
  1230                                  ;
  1231                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1232                                  ;
  1233                                  ;=======================================================================================================================
  1234                                  ;-----------------------------------------------------------------------------------------------------------------------
  1235                                  ;
  1236                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1237                                  ;
  1238                                  ;-----------------------------------------------------------------------------------------------------------------------
  1239                                  section                 fat1                                                    ;first copy of FAT
  1240                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1241                                                          db      005h,060h,000h, 007h,080h,000h
  1242                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1243                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1244                                                          db      011h,020h,001h, 013h,040h,001h
  1245                                                          db      015h,060h,001h, 017h,080h,001h
  1246                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1247                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1248                                                          db      021h,020h,002h, 023h,040h,002h
  1249                                                          db      025h,060h,002h, 027h,080h,002h
  1250                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1251                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                  ;
  1254                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1255                                  ;
  1256                                  ;-----------------------------------------------------------------------------------------------------------------------
  1257                                  section                 fat2                                                    ;second copy of FAT
  1258                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1259                                                          db      005h,060h,000h, 007h,080h,000h
  1260                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1261                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1262                                                          db      011h,020h,001h, 013h,040h,001h
  1263                                                          db      015h,060h,001h, 017h,080h,001h
  1264                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1265                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1266                                                          db      021h,020h,002h, 023h,040h,002h
  1267                                                          db      025h,060h,002h, 027h,080h,002h
  1268                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1269                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1270                                  ;-----------------------------------------------------------------------------------------------------------------------
  1271                                  ;
  1272                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1273                                  ;
  1274                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1275                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1276                                  ;       copy.
  1277                                  ;
  1278                                  ;-----------------------------------------------------------------------------------------------------------------------
  1279                                  section                 dir                                                     ;diskette directory
  1280                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1281                                                          db      020h                                            ;attribute (archive bit set)
  1282                                                          times   10 db 0                                         ;unused
  1283                                                          dw      0h                                              ;time
  1284                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1285                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1286                                                          dw      2                                               ;first cluster
  1287                                                          dd      05400h                                          ;file size
  1288                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1289                                  %endif
  1290                                  %ifdef BUILDCOM
  1291                                  ;=======================================================================================================================
  1292                                  ;
  1293                                  ;       OS.COM
  1294                                  ;
  1295                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1296                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1297                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1298                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1299                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1300                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1301                                  ;
  1302                                  ;       Our loader addressability is set up according to the following diagram.
  1303                                  ;
  1304                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1305                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1306                                  ;                               |  256 = 100h bytes                             |
  1307                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1308                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1309                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1310                                  ;                       007e00  +-----------------------------------------------+
  1311                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1312                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1313                                  ;                               |                                               |
  1314                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1315                                  ;                               |                                               |
  1316                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1317                                  ;                               |  Loader Code                                  |
  1318                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1319                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1320                                  ;
  1321                                  ;=======================================================================================================================
  1322                                  ;-----------------------------------------------------------------------------------------------------------------------
  1323                                  ;
  1324                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1325                                  ;
  1326                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1327                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1328                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1329                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1330                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1331                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1332                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1333                                  ;       registers.
  1334                                  ;
  1335                                  ;-----------------------------------------------------------------------------------------------------------------------
  1336                                                          cpu     8086                                            ;assume minimal CPU
  1337                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1338                                                          bits    16                                              ;this is 16-bit code
  1339                                  Loader                  push    cs                                              ;use the code segment
  1340                                                          pop     ds                                              ;...as our data segment
  1341                                                          push    cs                                              ;use the code segment
  1342                                                          pop     es                                              ;...as our extra segment
  1343                                  ;
  1344                                  ;       Write a message to the console so we know we have our addressability established.
  1345                                  ;
  1346                                                          mov     si,czStartingMsg                                ;starting message
  1347                                                          call    PutTTYString                                    ;display loader message
  1348                                  ;
  1349                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1350                                  ;
  1351                                                          call    GetCPUType                                      ;AL = cpu type
  1352                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1353                                                          cmp     al,3                                            ;80386+?
  1354                                                          jb      LoaderExit                                      ;no, exit with error message
  1355                                                          cpu     386                                             ;allow 80386 instructions
  1356                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1357                                                          call    PutTTYString                                    ;display message
  1358                                  ;
  1359                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1360                                  ;
  1361                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1362                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1363                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1364                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1365                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1366                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1367                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1368                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1369                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1370                                                          call    PutTTYString                                    ;display message
  1371                                  ;
  1372                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1373                                  ;
  1374                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1375                                                          pop     es                                              ;... as target segment
  1376                                                          xor     di,di                                           ;ES:DI = target address
  1377                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1378                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1379                                                          cld                                                     ;forward strings
  1380                                                          rep     movsb                                           ;copy kernel image
  1381                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1382                                                          call    PutTTYString                                    ;display message
  1383                                  ;
  1384                                  ;       Switch to protected mode.
  1385                                  ;
  1386                                                          xor     si,si                                           ;ES:SI = gdt addr
  1387                                                          mov     ss,si                                           ;protected mode ss
  1388                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1389                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1390                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1391                                                          mov     dx,001Fh                                        ;outer delay loop count
  1392                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1393                                                          loop    $                                               ;wait out pending interrupts
  1394                                                          dec     dx                                              ;restore outer loop count
  1395                                                          jnz     .10                                             ;continue outer loop
  1396                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1397                                  ;
  1398                                  ;       Enable hardware and maskable interrupts.
  1399                                  ;
  1400                                                          xor     al,al                                           ;enable all registers code
  1401                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1402                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1403                                                          sti                                                     ;enable maskable interrupts
  1404                                  ;
  1405                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1406                                  ;
  1407                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1408                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1409                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1410                                  ;-----------------------------------------------------------------------------------------------------------------------
  1411                                  ;
  1412                                  ;       Routine:        LoaderExit
  1413                                  ;
  1414                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1415                                  ;
  1416                                  ;       In:             DS:SI   string address
  1417                                  ;
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  LoaderExit              call    PutTTYString                                    ;display error message
  1420                                  ;
  1421                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1422                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1423                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1424                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1425                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1426                                  ;
  1427                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1428                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1429                                                          jnz     .40                                             ;exit if key pressed
  1430                                                          sti                                                     ;enable maskable interrupts
  1431                                                          hlt                                                     ;wait for interrupt
  1432                                                          jmp     .30                                             ;repeat until keypress
  1433                                  ;
  1434                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1435                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1436                                  ;       HLT until the system resets.
  1437                                  ;
  1438                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1439                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1440                                  .50                     sti                                                     ;enable maskable interrupts
  1441                                                          hlt                                                     ;stop until reset, int, nmi
  1442                                                          jmp     .50                                             ;loop until restart kicks in
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444                                  ;
  1445                                  ;       Routine:        GetCPUType
  1446                                  ;
  1447                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1448                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1449                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1450                                  ;
  1451                                  ;       Out:            AX      0 = 808x, v20, etc.
  1452                                  ;                               1 = 80186
  1453                                  ;                               2 = 80286
  1454                                  ;                               3 = 80386
  1455                                  ;
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  GetCPUType              mov     al,1                                            ;AL = 1
  1458                                                          mov     cl,32                                           ;shift count
  1459                                                          shr     al,cl                                           ;try a 32-bit shift
  1460                                                          or      al,al                                           ;did the shift happen?
  1461                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1462                                                          cpu     186
  1463                                                          push    sp                                              ;save stack pointer
  1464                                                          pop     cx                                              ;...into cx
  1465                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1466                                                          jne     .10                                             ;yes, cpu is 80186
  1467                                                          cpu     286
  1468                                                          inc     ax                                              ;AX = 2
  1469                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1470                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1471                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1472                                                          jz      .10                                             ;yes, cpu is 80286
  1473                                                          inc     ax                                              ;AX = 3
  1474                                  .10                     ret                                                     ;return
  1475                                  ;-----------------------------------------------------------------------------------------------------------------------
  1476                                  ;
  1477                                  ;       Routine:        PutTTYString
  1478                                  ;
  1479                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1480                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1481                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1482                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1483                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1484                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1485                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1486                                  ;                       to LODSB is not needed.
  1487                                  ;
  1488                                  ;       In:             DS:SI   address of string
  1489                                  ;
  1490                                  ;       Out:            DF      0
  1491                                  ;                       ZF      1
  1492                                  ;                       AL      0
  1493                                  ;
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  PutTTYString            cld                                                     ;forward strings
  1496                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1497                                                          test    al,al                                           ;end of string?
  1498                                                          jz      .20                                             ;... yes, exit our loop
  1499                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1500                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1501                                                          jmp     .10                                             ;repeat until done
  1502                                  .20                     ret                                                     ;return
  1503                                  ;-----------------------------------------------------------------------------------------------------------------------
  1504                                  ;
  1505                                  ;       Loader Data
  1506                                  ;
  1507                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1508                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1509                                  ;
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                                          align   2
  1512                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1513                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1514                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1515                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1516                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1517                                                          db      "Please press any key to restart the computer.",13,10,0
  1518                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1519                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1520                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1521                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1522                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1523                                  ;=======================================================================================================================
  1524                                  ;
  1525                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1526                                  ;
  1527                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1528                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1529                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1530                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1531                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1532                                  ;
  1533                                  ;=======================================================================================================================
  1534                                  ;=======================================================================================================================
  1535                                  ;
  1536                                  ;       Kernel Tables
  1537                                  ;
  1538                                  ;=======================================================================================================================
  1539                                  ;-----------------------------------------------------------------------------------------------------------------------
  1540                                  ;
  1541                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1542                                  ;
  1543                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1544                                  ;       first descriptor must be all nulls.
  1545                                  ;
  1546                                  ;       6   5         4         3         2         1         0
  1547                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1548                                  ;       ----------------------------------------------------------------
  1549                                  ;       h......hffffmmmma......ab......................bn..............n
  1550                                  ;       00000000                        all areas have base addresses below 2^24
  1551                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1552                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1553                                  ;                   1001                present, ring-0, selector
  1554                                  ;
  1555                                  ;       h...h   hi-order base address (bits 24-31)
  1556                                  ;       ffff    flags
  1557                                  ;       mmmm    hi-order limit (bits 16-19)
  1558                                  ;       a...a   access
  1559                                  ;       b...b   lo-order base address (bits 0-23)
  1560                                  ;       n...n   lo-order limit (bits 0-15)
  1561                                  ;
  1562                                  ;-----------------------------------------------------------------------------------------------------------------------
  1563                                  section                 gdt                                                     ;global descriptor table
  1564                                                          dq      0000000000000000h                               ;00 required null selector
  1565                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1566                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1567                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1568                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1569                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1570                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1571                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1572                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1573                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1574                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1575                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1576                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1577                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1578                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1579                                  ;-----------------------------------------------------------------------------------------------------------------------
  1580                                  ;
  1581                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1582                                  ;
  1583                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1584                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1585                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1586                                  ;
  1587                                  ;       6   5         4         3         2         1         0
  1588                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1589                                  ;       ----------------------------------------------------------------
  1590                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1591                                  ;
  1592                                  ;       h...h   high-order offset (bits 16-31)
  1593                                  ;       P       present (0=unused interrupt)
  1594                                  ;       zz      descriptor privilege level
  1595                                  ;       S       storage segment (must be zero for IDT)
  1596                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1597                                  ;       S...S   handling code selector in GDT
  1598                                  ;       l...l   lo-order offset (bits 0-15)
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  section                 idt                                                     ;interrupt descriptor table
  1602                                                          mint    dividebyzero                                    ;00 divide by zero
  1603                                                          mint    singlestep                                      ;01 single step
  1604                                                          mint    nmi                                             ;02 non-maskable
  1605                                                          mint    break                                           ;03 break
  1606                                                          mint    into                                            ;04 into
  1607                                                          mint    bounds                                          ;05 bounds
  1608                                                          mint    badopcode                                       ;06 bad op code
  1609                                                          mint    nocoproc                                        ;07 no coprocessor
  1610                                                          mint    doublefault                                     ;08 double-fault
  1611                                                          mint    operand                                         ;09 operand
  1612                                                          mint    badtss                                          ;0a bad TSS
  1613                                                          mint    notpresent                                      ;0b not-present
  1614                                                          mint    stacklimit                                      ;0c stack limit
  1615                                                          mint    protection                                      ;0d general protection fault
  1616                                                          mint    int14                                           ;0e (reserved)
  1617                                                          mint    int15                                           ;0f (reserved)
  1618                                                          mint    coproccalc                                      ;10 (reserved)
  1619                                                          mint    int17                                           ;11 (reserved)
  1620                                                          mint    int18                                           ;12 (reserved)
  1621                                                          mint    int19                                           ;13 (reserved)
  1622                                                          mint    int20                                           ;14 (reserved)
  1623                                                          mint    int21                                           ;15 (reserved)
  1624                                                          mint    int22                                           ;16 (reserved)
  1625                                                          mint    int23                                           ;17 (reserved)
  1626                                                          mint    int24                                           ;18 (reserved)
  1627                                                          mint    int25                                           ;19 (reserved)
  1628                                                          mint    int26                                           ;1a (reserved)
  1629                                                          mint    int27                                           ;1b (reserved)
  1630                                                          mint    int28                                           ;1c (reserved)
  1631                                                          mint    int29                                           ;1d (reserved)
  1632                                                          mint    int30                                           ;1e (reserved)
  1633                                                          mint    int31                                           ;1f (reserved)
  1634                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1635                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1636                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1637                                                          mtrap   com2                                            ;23 IRQ3 com2
  1638                                                          mtrap   com1                                            ;24 IRQ4 com1
  1639                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1640                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1641                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1642                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1643                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1644                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1645                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1646                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1647                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1648                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1649                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1650                                                          mtrap   svc                                             ;30 OS services
  1651                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1652                                  ;=======================================================================================================================
  1653                                  ;
  1654                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1655                                  ;
  1656                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1657                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1658                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1659                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1660                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1661                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1662                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1663                                  ;
  1664                                  ;=======================================================================================================================
  1665                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1666                                                          cpu     386                                             ;allow 80386 instructions
  1667                                                          bits    32                                              ;this is 32-bit code
  1668                                  ;=======================================================================================================================
  1669                                  ;
  1670                                  ;       CPU Interrupt Handlers
  1671                                  ;
  1672                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1673                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1674                                  ;
  1675                                  ;=======================================================================================================================
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       INT0    Divide By Zero
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                                          menter  dividebyzero                                    ;divide by zero
  1682                                                          push    0                                               ;store interrupt nbr
  1683                                                          push    czIntDivideByZero                               ;store message offset
  1684                                                          jmp     ReportInterrupt                                 ;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       INT1    Single Step
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                                          menter  singlestep                                      ;single step
  1691                                                          push    1                                               ;store interrupt nbr
  1692                                                          push    czIntSingleStep                                 ;store message offset
  1693                                                          jmp     ReportInterrupt                                 ;report interrupt
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  ;
  1696                                  ;       INT2    Non-Maskable Interrupt
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                                          menter  nmi                                             ;non-maskable
  1700                                                          push    2                                               ;store interrupt nbr
  1701                                                          push    czIntNonMaskable                                ;store message offset
  1702                                                          jmp     ReportInterrupt                                 ;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       INT3    Break
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                                          menter  break                                           ;break
  1709                                                          push    3                                               ;store interrupt nbr
  1710                                                          push    czIntBreak                                      ;store message offset
  1711                                                          jmp     ReportInterrupt                                 ;report interrupt
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                  ;
  1714                                  ;       INT4    Into
  1715                                  ;
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                                          menter  into                                            ;into
  1718                                                          push    4                                               ;store interrupt nbr
  1719                                                          push    czIntInto                                       ;store message offset
  1720                                                          jmp     ReportInterrupt                                 ;report interrupt
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                  ;
  1723                                  ;       INT5    Bounds
  1724                                  ;
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                                          menter  bounds                                          ;bounds
  1727                                                          push    5                                               ;store interrupt nbr
  1728                                                          push    czIntBounds                                     ;store message offset
  1729                                                          jmp     ReportInterrupt                                 ;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;       INT6    Bad Operation Code
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                                          menter  badopcode                                       ;bad opcode interrupt
  1736                                                          push    6                                               ;store interrupt nbr
  1737                                                          push    czIntBadOpCode                                  ;store message offset
  1738                                                          jmp     ReportInterrupt                                 ;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;       INT7    No Coprocessor
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1745                                                          push    7                                               ;store interrupt nbr
  1746                                                          push    czIntNoCoprocessor                              ;store message offset
  1747                                                          jmp     ReportInterrupt                                 ;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       INT8    Double Fault
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                                          menter  doublefault                                     ;doublefault interrupt
  1754                                                          push    8                                               ;store interrupt nbr
  1755                                                          push    czIntDoubleFault                                ;store message offset
  1756                                                          jmp     ReportInterrupt                                 ;report interrupt
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                  ;
  1759                                  ;       INT9    Operand
  1760                                  ;
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                                          menter  operand                                         ;operand interrupt
  1763                                                          push    9                                               ;store interrupt nbr
  1764                                                          push    czIntOperand                                    ;store message offset
  1765                                                          jmp     ReportInterrupt                                 ;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;       INT10   Bad Task State Segment
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                                          menter  badtss                                          ;bad TSS interrupt
  1772                                                          push    10                                              ;store interrupt nbr
  1773                                                          push    czIntBadTSS                                     ;store message offset
  1774                                                          jmp     ReportInterrupt                                 ;report interrupt
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                  ;
  1777                                  ;       INT11   Not Present
  1778                                  ;
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                                          menter  notpresent                                      ;not present interrupt
  1781                                                          push    11                                              ;store interrupt nbr
  1782                                                          push    czIntNotPresent                                 ;store message offset
  1783                                                          jmp     ReportInterrupt                                 ;report interrupt
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                  ;
  1786                                  ;       INT12   Stack Limit
  1787                                  ;
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                                          menter  stacklimit                                      ;stack limit interrupt
  1790                                                          push    12                                              ;store interrupt nbr
  1791                                                          push    czIntStackLimit                                 ;store message offset
  1792                                                          jmp     ReportInterrupt                                 ;report interrupt
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;
  1795                                  ;       INT13   General Protection Fault
  1796                                  ;
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                                          menter  protection                                      ;protection fault interrupt
  1799                                                          push    13                                              ;store interrupt nbr
  1800                                                          push    czIntProtection                                 ;store message offset
  1801                                                          jmp     ReportInterrupt                                 ;report interrupt
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  ;
  1804                                  ;       INT14   Reserved
  1805                                  ;
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                                          menter  int14                                           ;(reserved)
  1808                                                          push    14                                              ;store interrupt nbr
  1809                                                          push    czIntReserved                                   ;store message offset
  1810                                                          jmp     ReportInterrupt                                 ;report interrupt
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;       INT15   Reserved
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                                          menter  int15                                           ;(reserved)
  1817                                                          push    15                                              ;store interrupt nbr
  1818                                                          push    czIntReserved                                   ;store message offset
  1819                                                          jmp     ReportInterrupt                                 ;report interrupt
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                  ;
  1822                                  ;       INT16   Coprocessor Calculation
  1823                                  ;
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                                          menter  coproccalc                                      ;coprocessor calculation
  1826                                                          push    16                                              ;store interrupt nbr
  1827                                                          push    czIntCoprocessorCalc                            ;store message offset
  1828                                                          jmp     ReportInterrupt                                 ;report interrupt
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                  ;
  1831                                  ;       INT17   Reserved
  1832                                  ;
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                                          menter  int17                                           ;(reserved)
  1835                                                          push    17                                              ;store interrupt nbr
  1836                                                          push    czIntReserved                                   ;store message offset
  1837                                                          jmp     ReportInterrupt                                 ;report interrupt
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                  ;
  1840                                  ;       INT18   Reserved
  1841                                  ;
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                                          menter  int18                                           ;(reserved)
  1844                                                          push    18                                              ;store interrupt nbr
  1845                                                          push    czIntReserved                                   ;store message offset
  1846                                                          jmp     ReportInterrupt                                 ;report interrupt
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                  ;
  1849                                  ;       INT19   Reserved
  1850                                  ;
  1851                                  ;-----------------------------------------------------------------------------------------------------------------------
  1852                                                          menter  int19                                           ;(reserved)
  1853                                                          push    19                                              ;store interrupt nbr
  1854                                                          push    czIntReserved                                   ;store message offset
  1855                                                          jmp     ReportInterrupt                                 ;report interrupt
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                  ;
  1858                                  ;       INT20   Reserved
  1859                                  ;
  1860                                  ;-----------------------------------------------------------------------------------------------------------------------
  1861                                                          menter  int20                                           ;(reserved)
  1862                                                          push    20                                              ;store interrupt nbr
  1863                                                          push    czIntReserved                                   ;store message offset
  1864                                                          jmp     ReportInterrupt                                 ;report interrupt
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                  ;
  1867                                  ;       INT21   Reserved
  1868                                  ;
  1869                                  ;-----------------------------------------------------------------------------------------------------------------------
  1870                                                          menter  int21                                           ;(reserved)
  1871                                                          push    21                                              ;store interrupt nbr
  1872                                                          push    czIntReserved                                   ;store message offset
  1873                                                          jmp     ReportInterrupt                                 ;report interrupt
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                  ;
  1876                                  ;       INT22   Reserved
  1877                                  ;
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879                                                          menter  int22                                           ;(reserved)
  1880                                                          push    22                                              ;store interrupt nbr
  1881                                                          push    czIntReserved                                   ;store message offset
  1882                                                          jmp     ReportInterrupt                                 ;report interrupt
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                  ;
  1885                                  ;       INT23   Reserved
  1886                                  ;
  1887                                  ;-----------------------------------------------------------------------------------------------------------------------
  1888                                                          menter  int23                                           ;(reserved)
  1889                                                          push    23                                              ;store interrupt nbr
  1890                                                          push    czIntReserved                                   ;store message offset
  1891                                                          jmp     ReportInterrupt                                 ;report interrupt
  1892                                  ;-----------------------------------------------------------------------------------------------------------------------
  1893                                  ;
  1894                                  ;       INT24   Reserved
  1895                                  ;
  1896                                  ;-----------------------------------------------------------------------------------------------------------------------
  1897                                                          menter  int24                                           ;(reserved)
  1898                                                          push    24                                              ;store interrupt nbr
  1899                                                          push    czIntReserved                                   ;store message offset
  1900                                                          jmp     ReportInterrupt                                 ;report interrupt
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                  ;
  1903                                  ;       INT25   Reserved
  1904                                  ;
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                                          menter  int25                                           ;(reserved)
  1907                                                          push    25                                              ;store interrupt nbr
  1908                                                          push    czIntReserved                                   ;store message offset
  1909                                                          jmp     ReportInterrupt                                 ;report interrupt
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  ;
  1912                                  ;       INT26   Reserved
  1913                                  ;
  1914                                  ;-----------------------------------------------------------------------------------------------------------------------
  1915                                                          menter  int26                                           ;(reserved)
  1916                                                          push    26                                              ;store interrupt nbr
  1917                                                          push    czIntReserved                                   ;store message offset
  1918                                                          jmp     ReportInterrupt                                 ;report interrupt
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                  ;
  1921                                  ;       INT27   Reserved
  1922                                  ;
  1923                                  ;-----------------------------------------------------------------------------------------------------------------------
  1924                                                          menter  int27                                           ;(reserved)
  1925                                                          push    27                                              ;store interrupt nbr
  1926                                                          push    czIntReserved                                   ;store message offset
  1927                                                          jmp     ReportInterrupt                                 ;report interrupt
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                  ;
  1930                                  ;       INT28   Reserved
  1931                                  ;
  1932                                  ;-----------------------------------------------------------------------------------------------------------------------
  1933                                                          menter  int28                                           ;(reserved)
  1934                                                          push    28                                              ;store interrupt nbr
  1935                                                          push    czIntReserved                                   ;store message offset
  1936                                                          jmp     ReportInterrupt                                 ;report interrupt
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  ;
  1939                                  ;       INT29   Reserved
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                                          menter  int29                                           ;(reserved)
  1943                                                          push    29                                              ;store interrupt nbr
  1944                                                          push    czIntReserved                                   ;store message offset
  1945                                                          jmp     ReportInterrupt                                 ;report interrupt
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  ;
  1948                                  ;       INT30   Reserved
  1949                                  ;
  1950                                  ;-----------------------------------------------------------------------------------------------------------------------
  1951                                                          menter  int30                                           ;(reserved)
  1952                                                          push    30                                              ;store interrupt nbr
  1953                                                          push    czIntReserved                                   ;store message offset
  1954                                                          jmp     ReportInterrupt                                 ;report interrupt
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                  ;
  1957                                  ;       INT31   Reserved
  1958                                  ;
  1959                                  ;-----------------------------------------------------------------------------------------------------------------------
  1960                                                          menter  int31                                           ;(reserved)
  1961                                                          push    31                                              ;store interrupt nbr
  1962                                                          push    czIntReserved                                   ;store message offset
  1963                                                          jmp     ReportInterrupt                                 ;report interrupt
  1964                                  ;-----------------------------------------------------------------------------------------------------------------------
  1965                                  ;
  1966                                  ;       Routine:        ReportInterrupt
  1967                                  ;
  1968                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1969                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1970                                  ;
  1971                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1972                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1973                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1974                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1975                                  ;                       [esp+0]         error message address                   stored by push instructions
  1976                                  ;
  1977                                  ;       Out:            N/A             This routine does not exit.
  1978                                  ;
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1981                                                          push    es                                              ;save ES at time of interrupt
  1982                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1983                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1984                                  ;
  1985                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1986                                  ;
  1987                                  ;                       [ebp+56]        eflags
  1988                                  ;                       [ebp+52]        cs
  1989                                  ;                       [ebp+48]        eip
  1990                                  ;                       [ebp+44]        interrupt number (0-31)
  1991                                  ;                       [ebp+40]        error message address
  1992                                  ;                       [ebp+36]        ds
  1993                                  ;                       [ebp+32]        es
  1994                                  ;                       [ebp+28]        eax
  1995                                  ;                       [ebp+24]        ecx
  1996                                  ;                       [ebp+20]        edx
  1997                                  ;                       [ebp+16]        ebx
  1998                                  ;                       [ebp+12]        esp
  1999                                  ;                       [ebp+8]         ebp
  2000                                  ;                       [ebp+4]         esi
  2001                                  ;                       [ebp+0]         edi
  2002                                  ;
  2003                                                          push    cs                                              ;load code selector ...
  2004                                                          pop     ds                                              ;... into DS
  2005                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2006                                                          pop     es                                              ;... into ES
  2007                                  ;
  2008                                  ;       Display the interrupt report boundary box
  2009                                  ;
  2010                                                          mov     cl,13                                           ;column
  2011                                                          mov     ch,6                                            ;row
  2012                                                          mov     dl,50                                           ;width
  2013                                                          mov     dh,8                                            ;height
  2014                                                          mov     bh,07h                                          ;attribute
  2015                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2016                                  ;
  2017                                  ;       Display the report header
  2018                                  ;
  2019                                                          mov     cl,15                                           ;column
  2020                                                          mov     ch,7                                            ;row
  2021                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2022                                                          call    SetConsoleString                                ;draw text string
  2023                                  ;
  2024                                  ;       Display the interrupt description label
  2025                                  ;
  2026                                                          mov     cl,15                                           ;column
  2027                                                          mov     ch,8                                            ;row
  2028                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2029                                                          call    SetConsoleString                                ;draw text string
  2030                                  ;
  2031                                  ;       Display the interrupt number
  2032                                  ;
  2033                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2034                                                          mov     cl,26                                           ;column
  2035                                                          mov     ch,8                                            ;row
  2036                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2037                                  ;
  2038                                  ;       Display the interrupt name
  2039                                  ;
  2040                                                          mov     cl,29                                           ;column
  2041                                                          mov     ch,8                                            ;row
  2042                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2043                                                          call    SetConsoleString                                ;display interrupt description
  2044                                  ;
  2045                                  ;       Display the register values header
  2046                                  ;
  2047                                                          mov     cl,15                                           ;column
  2048                                                          mov     ch,10                                           ;row
  2049                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2050                                                          call    SetConsoleString                                ;draw text string
  2051                                  ;
  2052                                  ;       Display the EAX register label and value
  2053                                  ;
  2054                                                          mov     cl,15                                           ;column
  2055                                                          mov     ch,11                                           ;row
  2056                                                          mov     esi,czIntEAX                                    ;register EAX label
  2057                                                          call    SetConsoleString                                ;draw label
  2058                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2059                                                          mov     cl,19                                           ;column
  2060                                                          mov     ch,11                                           ;row
  2061                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2062                                  ;
  2063                                  ;       Display the ECX register label and value
  2064                                  ;
  2065                                                          mov     cl,15                                           ;column
  2066                                                          mov     ch,12                                           ;row
  2067                                                          mov     esi,czIntECX                                    ;label
  2068                                                          call    SetConsoleString                                ;draw label
  2069                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2070                                                          mov     cl,19                                           ;column
  2071                                                          mov     ch,12                                           ;row
  2072                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2073                                  ;
  2074                                  ;       Display the EDX register label and value
  2075                                  ;
  2076                                                          mov     cl,15                                           ;column
  2077                                                          mov     ch,13                                           ;row
  2078                                                          mov     esi,czIntEDX                                    ;label
  2079                                                          call    SetConsoleString                                ;draw label
  2080                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2081                                                          mov     cl,19                                           ;column
  2082                                                          mov     ch,13                                           ;row
  2083                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2084                                  ;
  2085                                  ;       Display the EBX register label and value
  2086                                  ;
  2087                                                          mov     cl,15                                           ;column
  2088                                                          mov     ch,14                                           ;row
  2089                                                          mov     esi,czIntEBX                                    ;label
  2090                                                          call    SetConsoleString                                ;draw label
  2091                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2092                                                          mov     cl,19                                           ;column
  2093                                                          mov     ch,14                                           ;row
  2094                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2095                                  ;
  2096                                  ;       Display the ESI register label and value
  2097                                  ;
  2098                                                          mov     cl,29                                           ;column
  2099                                                          mov     ch,11                                           ;row
  2100                                                          mov     esi,czIntESI                                    ;label
  2101                                                          call    SetConsoleString                                ;draw label
  2102                                                          mov     eax,[ebp+4]                                     ;ESI
  2103                                                          mov     cl,33                                           ;column
  2104                                                          mov     ch,11                                           ;row
  2105                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2106                                  ;
  2107                                  ;       Display the EDI register label and value
  2108                                  ;
  2109                                                          mov     cl,29                                           ;column
  2110                                                          mov     ch,12                                           ;row
  2111                                                          mov     esi,czIntEDI                                    ;label
  2112                                                          call    SetConsoleString                                ;draw label
  2113                                                          mov     eax,[ebp+0]                                     ;EDI
  2114                                                          mov     cl,33                                           ;column
  2115                                                          mov     ch,12                                           ;row
  2116                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2117                                  ;
  2118                                  ;       Display the EBP register label and value
  2119                                  ;
  2120                                                          mov     cl,29                                           ;column
  2121                                                          mov     ch,13                                           ;row
  2122                                                          mov     esi,czIntEBP                                    ;label
  2123                                                          call    SetConsoleString                                ;draw label
  2124                                                          mov     eax,[ebp+8]                                     ;EBP
  2125                                                          mov     cl,33                                           ;column
  2126                                                          mov     ch,13                                           ;row
  2127                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2128                                  ;
  2129                                  ;       Display the DS register label and value
  2130                                  ;
  2131                                                          mov     cl,42                                           ;column
  2132                                                          mov     ch,11                                           ;row
  2133                                                          mov     esi,czIntDS                                     ;label
  2134                                                          call    SetConsoleString                                ;draw label
  2135                                                          xor     eax,eax                                         ;zero register
  2136                                                          mov     ax,[ebp+36]                                     ;DS
  2137                                                          mov     cl,46                                           ;column
  2138                                                          mov     ch,11                                           ;row
  2139                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2140                                  ;
  2141                                  ;       Display the ES register label and value
  2142                                  ;
  2143                                                          mov     cl,42                                           ;column
  2144                                                          mov     ch,12                                           ;row
  2145                                                          mov     esi,czIntES                                     ;label
  2146                                                          call    SetConsoleString                                ;draw label
  2147                                                          xor     eax,eax                                         ;zero register
  2148                                                          mov     ax,[ebp+32]                                     ;ES
  2149                                                          mov     cl,46                                           ;column
  2150                                                          mov     ch,12                                           ;row
  2151                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2152                                  ;
  2153                                  ;       Display the SS register label and value
  2154                                  ;
  2155                                                          mov     cl,42                                           ;column
  2156                                                          mov     ch,13                                           ;row
  2157                                                          mov     esi,czIntSS                                     ;label
  2158                                                          call    SetConsoleString                                ;draw label
  2159                                                          xor     eax,eax                                         ;zero register
  2160                                                          mov     ax,ss                                           ;SS
  2161                                                          mov     cl,46                                           ;column
  2162                                                          mov     ch,13                                           ;row
  2163                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2164                                  ;
  2165                                  ;       Display the CS register lable and value
  2166                                  ;
  2167                                                          mov     cl,42                                           ;column
  2168                                                          mov     ch,14                                           ;row
  2169                                                          mov     esi,czIntCS                                     ;label
  2170                                                          call    SetConsoleString                                ;draw label
  2171                                                          xor     eax,eax                                         ;zero register
  2172                                                          mov     ax,[ebp+52]                                     ;CS
  2173                                                          mov     cl,46                                           ;column
  2174                                                          mov     ch,14                                           ;row
  2175                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2176                                  ;
  2177                                  ;       Display the EFLAGS register label and value
  2178                                  ;
  2179                                                          mov     cl,51                                           ;column
  2180                                                          mov     ch,11                                           ;row
  2181                                                          mov     esi,czIntEFLAGS                                 ;label
  2182                                                          call    SetConsoleString                                ;draw label
  2183                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2184                                                          mov     cl,55                                           ;column
  2185                                                          mov     ch,11                                           ;row
  2186                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2187                                  ;
  2188                                  ;       Display the ESP register label and value
  2189                                  ;
  2190                                                          mov     cl,51                                           ;column
  2191                                                          mov     ch,13                                           ;row
  2192                                                          mov     esi,czIntESP                                    ;label
  2193                                                          call    SetConsoleString                                ;draw label
  2194                                                          mov     eax,[ebp+12]                                    ;ESP
  2195                                                          mov     cl,55                                           ;column
  2196                                                          mov     ch,13                                           ;row
  2197                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2198                                  ;
  2199                                  ;       Display the EIP register label and value
  2200                                  ;
  2201                                                          mov     cl,51                                           ;column
  2202                                                          mov     ch,14                                           ;row
  2203                                                          mov     esi,czIntEIP                                    ;label
  2204                                                          call    SetConsoleString                                ;draw label
  2205                                                          mov     eax,[ebp+48]                                    ;EIP
  2206                                                          mov     cl,55                                           ;column
  2207                                                          mov     ch,14                                           ;row
  2208                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2209                                  ;
  2210                                  ;       Halt and loop until reset
  2211                                  ;
  2212                                  .10                     sti                                                     ;enable maskable interrupts
  2213                                                          hlt                                                     ;halt processor
  2214                                                          jmp     .10                                             ;resume on interrupt
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ;
  2217                                  ;       Processor Interrupt Name Strings
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                  czIntDivideByZero       db      "Division by zero",0
  2221                                  czIntSingleStep         db      "Single step",0
  2222                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2223                                  czIntBreak              db      "Break",0
  2224                                  czIntInto               db      "Into",0
  2225                                  czIntBounds             db      "Bounds",0
  2226                                  czIntBadOpCode          db      "Bad Operation Code",0
  2227                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2228                                  czIntDoubleFault        db      "Double Fault",0
  2229                                  czIntOperand            db      "Operand",0
  2230                                  czIntBadTSS             db      "Bad Task State Segment",0
  2231                                  czIntNotPresent         db      "Not Present",0
  2232                                  czIntStackLimit         db      "Stack Limit",0
  2233                                  czIntProtection         db      "General Protection Fault",0
  2234                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2235                                  czIntReserved           db      "Reserved",0
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                  ;
  2238                                  ;       Processor Interrupt Handling Strings
  2239                                  ;
  2240                                  ;-----------------------------------------------------------------------------------------------------------------------
  2241                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2242                                  czIntLabel              db      "Interrupt #",0
  2243                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2244                                  czIntEAX                db      "EAX:",0
  2245                                  czIntECX                db      "ECX:",0
  2246                                  czIntEDX                db      "EDX:",0
  2247                                  czIntEBX                db      "EBX:",0
  2248                                  czIntESI                db      "ESI:",0
  2249                                  czIntEDI                db      "EDI:",0
  2250                                  czIntEBP                db      "EBP:",0
  2251                                  czIntESP                db      "ESP:",0
  2252                                  czIntDS                 db      " DS:",0
  2253                                  czIntES                 db      " ES:",0
  2254                                  czIntSS                 db      " SS:",0
  2255                                  czIntCS                 db      " CS:",0
  2256                                  czIntEFLAGS             db      "FLG:",0
  2257                                  czIntEIP                db      "EIP:",0
  2258                                  ;-----------------------------------------------------------------------------------------------------------------------
  2259                                  ;
  2260                                  ;       Routine:        DrawTextDialogBox
  2261                                  ;
  2262                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2263                                  ;
  2264                                  ;       In:             CL      upper left column (0-79)
  2265                                  ;                       CH      upper left row (0-24)
  2266                                  ;                       DL      column width, excluding border
  2267                                  ;                       DH      row height, excluding border
  2268                                  ;                       BH      color attribute
  2269                                  ;
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2272                                                          push    esi                                             ;
  2273                                                          push    edi                                             ;
  2274                                                          push    es                                              ;
  2275                                                          push    EGDTCGA                                         ;load CGA selector ...
  2276                                                          pop     es                                              ;... into ES
  2277                                  ;
  2278                                  ;       Compute target display offset
  2279                                  ;
  2280                                                          xor     eax,eax                                         ;zero register
  2281                                                          mov     al,ch                                           ;row
  2282                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2283                                                          mul     ah                                              ;row offset
  2284                                                          add     al,cl                                           ;add column
  2285                                                          adc     ah,0                                            ;add overflow
  2286                                                          add     al,cl                                           ;add column
  2287                                                          adc     ah,0                                            ;add overflow
  2288                                                          mov     edi,eax                                         ;target row offset
  2289                                  ;
  2290                                  ;       Display top border row
  2291                                  ;
  2292                                                          push    edi                                             ;save target row offset
  2293                                                          mov     ah,bh                                           ;attribute
  2294                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2295                                                          stosw                                                   ;display character and attribute
  2296                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2297                                                          xor     ecx,ecx                                         ;zero register
  2298                                                          mov     cl,dl                                           ;width, excluding border
  2299                                                          rep     stosw                                           ;display horizontal border
  2300                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2301                                                          stosw                                                   ;display character and attribute
  2302                                                          pop     edi                                             ;restore target row offset
  2303                                                          add     edi,ECONROWBYTES                                ;next row
  2304                                  ;
  2305                                  ;       Display dialog box body rows
  2306                                  ;
  2307                                                          xor     ecx,ecx                                         ;zero register
  2308                                                          mov     cl,dh                                           ;height, excluding border
  2309                                  .10                     push    ecx                                             ;save remaining rows
  2310                                                          push    edi                                             ;save target row offset
  2311                                                          mov     ah,bh                                           ;attribute
  2312                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2313                                                          stosw                                                   ;display character and attribute
  2314                                                          mov     al,EASCIISPACE                                  ;space
  2315                                                          xor     ecx,ecx                                         ;zero register
  2316                                                          mov     cl,dl                                           ;width, excluding border
  2317                                                          rep     stosw                                           ;display row
  2318                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2319                                                          stosw                                                   ;display character and attribute
  2320                                                          pop     edi                                             ;restore target row offset
  2321                                                          add     edi,ECONROWBYTES                                ;next row
  2322                                                          pop     ecx                                             ;remaining rows
  2323                                                          loop    .10                                             ;next row
  2324                                  ;
  2325                                  ;       Display bottom border row
  2326                                  ;
  2327                                                          push    edi                                             ;save target row offset
  2328                                                          mov     ah,bh                                           ;attribute
  2329                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2330                                                          stosw                                                   ;display character and attribute
  2331                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2332                                                          xor     ecx,ecx                                         ;zero register
  2333                                                          mov     cl,dl                                           ;width, excluding border
  2334                                                          rep     stosw                                           ;display horizontal border
  2335                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2336                                                          stosw                                                   ;display character and attribute
  2337                                                          pop     edi                                             ;restore target row offset
  2338                                                          add     edi,ECONROWBYTES                                ;next row
  2339                                  ;
  2340                                  ;       Restore and return
  2341                                  ;
  2342                                                          pop     es                                              ;restore non-volatile regs
  2343                                                          pop     edi                                             ;
  2344                                                          pop     esi                                             ;
  2345                                                          pop     ecx                                             ;
  2346                                                          ret                                                     ;return
  2347                                  ;=======================================================================================================================
  2348                                  ;
  2349                                  ;       Hardware Device Interupts
  2350                                  ;
  2351                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2352                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2353                                  ;       (BX=2028h).
  2354                                  ;
  2355                                  ;=======================================================================================================================
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357                                  ;
  2358                                  ;       IRQ0    Clock Tick Interrupt
  2359                                  ;
  2360                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2361                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2362                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2363                                  ;
  2364                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2365                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2366                                  ;
  2367                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2368                                  ;       zero, the floppy disk motors are turned off.
  2369                                  ;
  2370                                  ;-----------------------------------------------------------------------------------------------------------------------
  2371                                                          menter  clocktick                                       ;clock tick interrupt
  2372                                                          push    eax                                             ;save non-volatile regs
  2373                                                          push    edx                                             ;
  2374                                                          push    ds                                              ;
  2375                                  ;
  2376                                  ;       Update the clock tick count and the elapsed days as needed.
  2377                                  ;
  2378                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2379                                                          pop     ds                                              ;... into data segment register
  2380                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2381                                                          inc     eax                                             ;increment clock ticks
  2382                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2383                                                          jb      irq0.10                                         ;no, skip ahead
  2384                                                          inc     byte [wbClockDays]                              ;increment clock days
  2385                                                          xor     eax,eax                                         ;reset clock ticks
  2386                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2387                                  ;
  2388                                  ;       Decrement floppy disk motor timeout.
  2389                                  ;
  2390                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2391                                                          je      irq0.20                                         ;yes, skip ahead
  2392                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2393                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2394                                  ;
  2395                                  ;       Turn off the floppy disk motor if appropriate.
  2396                                  ;
  2397                                                          sti                                                     ;enable maskable interrupts
  2398                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2399                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2400                                                          in      al,dx                                           ;FDC main status byte
  2401                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2402                                                          jnz     irq0.15                                         ;wait while busy
  2403                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2404                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2405                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2406                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2407                                                          out     dx,al                                           ;turn motor off
  2408                                  ;
  2409                                  ;       Signal the end of the hardware interrupt.
  2410                                  ;
  2411                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2412                                  ;
  2413                                  ;       Restore and return.
  2414                                  ;
  2415                                                          pop     ds                                              ;restore modified regs
  2416                                                          pop     edx                                             ;
  2417                                                          pop     eax                                             ;
  2418                                                          iretd                                                   ;return
  2419                                  ;-----------------------------------------------------------------------------------------------------------------------
  2420                                  ;
  2421                                  ;       IRQ1    Keyboard Interrupt
  2422                                  ;
  2423                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2424                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2425                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2426                                  ;       ALL modified registers upon return.
  2427                                  ;
  2428                                  ;-----------------------------------------------------------------------------------------------------------------------
  2429                                                          menter  keyboard                                        ;keyboard interrrupt
  2430                                                          push    eax                                             ;save non-volatile regs
  2431                                                          push    ebx                                             ;
  2432                                                          push    ecx                                             ;
  2433                                                          push    esi                                             ;
  2434                                                          push    ds                                              ;
  2435                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2436                                                          pop     ds                                              ;... into data segment register
  2437                                                          xor     al,al                                           ;zero
  2438                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2439                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2440                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2441                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2442                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2443                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2444                                                          mov     al,' '                                          ;space
  2445                                                          mov     [wbConsoleChar],al                              ;set character to space
  2446                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2447                                                          not     al                                              ;controller timeout mask
  2448                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2449                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2450                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2451                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2452                                                          jz      irq1.140                                        ;yes, skip ahead
  2453                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2454                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2455                                                          mov     ah,al                                           ;copy scan code 0
  2456                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2457                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2458                                                          je      irq1.30                                         ;yes, set flag
  2459                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2460                                                          je      irq1.40                                         ;yes, reset flag
  2461                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2462                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2463                                                          je      irq1.30                                         ;yes, set flag
  2464                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2465                                                          je      irq1.40                                         ;yes, reset flag
  2466                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2467                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2468                                                          je      irq1.30                                         ;yes, set flag
  2469                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2470                                                          je      irq1.40                                         ;yes, reset flag
  2471                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2472                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2473                                                          je      irq1.30                                         ;yes, set flag
  2474                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2475                                                          je      irq1.40                                         ;yes, reset flag
  2476                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2477                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2478                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2479                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2480                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2481                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2482                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2483                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2484                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2485                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2486                                                          jne     irq1.70                                         ;no, skip ahead
  2487                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2488                                                          jz      irq1.140                                        ;yes, skip ahead
  2489                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2490                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2491                                                          mov     ah,al                                           ;copy scan code 1
  2492                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2493                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2494                                                          je      irq1.30                                         ;yes, set flag
  2495                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2496                                                          je      irq1.40                                         ;yes, reset flag
  2497                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2498                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2499                                                          je      irq1.30                                         ;yes, set flag
  2500                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2501                                                          je      irq1.40                                         ;yes, reset flag
  2502                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2503                                                          je      irq1.80                                         ;yes, skip ahead
  2504                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2505                                                          je      irq1.80                                         ;yes, skip ahead
  2506                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2507                                                          je      irq1.10                                         ;yes, continue
  2508                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2509                                                          jne     irq1.20                                         ;no, skip ahead
  2510                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2511                                                          jz      irq1.140                                        ;yes, skip ahead
  2512                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2513                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2514                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2515                                                          jz      irq1.140                                        ;yes, skip ahead
  2516                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2517                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2518                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2519                                  irq1.30                 or      bl,al                                           ;set shift flag
  2520                                                          jmp     irq1.60                                         ;skip ahead
  2521                                  irq1.40                 not     al                                              ;convert flag to mask
  2522                                                          and     bl,al                                           ;reset shift flag
  2523                                                          jmp     irq1.60                                         ;skip ahead
  2524                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2525                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2526                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2527                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2528                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2529                                                          jmp     irq1.150                                        ;finish keyboard handling
  2530                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2531                                                          jne     irq1.80                                         ;no continue
  2532                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2533                                                          jz      irq1.140                                        ;yes, skip ahead
  2534                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2535                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2536                                                          mov     ah,al                                           ;copy scan code 1
  2537                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2538                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2539                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2540                                                          jz      irq1.140                                        ;yes, skip ahead
  2541                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2542                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2543                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2544                                                          jz      irq1.140                                        ;yes, skip ahead
  2545                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2546                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2547                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2548                                                          jz      irq1.140                                        ;yes, skip ahead
  2549                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2550                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2551                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2552                                                          jz      irq1.140                                        ;yes, skip ahead
  2553                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2554                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2555                                                          jmp     irq1.150                                        ;continue
  2556                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2557                                                          test    ah,EKEYBUP                                      ;release code?
  2558                                                          jnz     irq1.130                                        ;yes, skip ahead
  2559                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2560                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2561                                                          jz      irq1.90                                         ;no, skip ahead
  2562                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2563                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2564                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2565                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2566                                                          jz      irq1.100                                        ;no skip ahead
  2567                                                          mov     cl,al                                           ;copy ASCII code
  2568                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2569                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2570                                                          jb      irq1.100                                        ;yes, skip ahead
  2571                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2572                                                          ja      irq1.100                                        ;yes, skip ahead
  2573                                                          xor     al,EASCIICASE                                   ;switch case
  2574                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2575                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2576                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2577                                                          jz      irq1.120                                        ;no, skip ahead
  2578                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2579                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2580                                                          or      edx,eax                                         ;msg id and codes
  2581                                                          xor     ecx,ecx                                         ;null param
  2582                                                          push    eax                                             ;save codes
  2583                                                          call    PutMessage                                      ;put message to console
  2584                                                          pop     eax                                             ;restore codes
  2585                                                          test    al,al                                           ;ASCII translation?
  2586                                                          jz      irq1.130                                        ;no, skip ahead
  2587                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2588                                                          and     eax,0FFFFh                                      ;clear high-order word
  2589                                                          or      edx,eax                                         ;msg id and codes
  2590                                                          xor     ecx,ecx                                         ;null param
  2591                                                          call    PutMessage                                      ;put message to console
  2592                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2593                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2594                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2595                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2596                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2597                                                          pop     ds                                              ;restore non-volatile regs
  2598                                                          pop     esi                                             ;
  2599                                                          pop     ecx                                             ;
  2600                                                          pop     ebx                                             ;
  2601                                                          pop     eax                                             ;
  2602                                                          iretd                                                   ;return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;       Scan-Code to ASCII Translation Tables
  2605                                  ;-----------------------------------------------------------------------------------------------------------------------
  2606                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2607                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2608                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2609                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2610                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2611                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2612                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2613                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2614                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2615                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2616                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2617                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2618                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2619                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2620                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2621                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2622                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2623                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2624                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2625                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2626                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2627                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2628                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2629                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2630                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2631                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2632                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2633                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2634                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2635                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2636                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2637                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2638                                  ;-----------------------------------------------------------------------------------------------------------------------
  2639                                  ;
  2640                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2641                                  ;
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643                                                          menter  iochannel                                       ;secondary 8259A cascade
  2644                                                          push    eax                                             ;save modified regs
  2645                                                          jmp     hwint                                           ;end interrupt and return
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                  ;
  2648                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2649                                  ;
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                                          menter  com2                                            ;serial port 2 interrupt
  2652                                                          push    eax                                             ;save modified regs
  2653                                                          jmp     hwint                                           ;end interrupt and return
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                  ;
  2656                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2657                                  ;
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                                          menter  com1                                            ;serial port 1 interrupt
  2660                                                          push    eax                                             ;save modified regs
  2661                                                          jmp     hwint                                           ;end interrupt and return
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                  ;
  2664                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2665                                  ;
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2668                                                          push    eax                                             ;save modified regs
  2669                                                          jmp     hwint                                           ;end interrupt and return
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                  ;
  2672                                  ;       IRQ6    Diskette Hardware Interrupt
  2673                                  ;
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                                          menter  diskette                                        ;floppy disk interrupt
  2676                                                          push    eax                                             ;save non-volatile regs
  2677                                                          push    ds                                              ;
  2678                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2679                                                          pop     ds                                              ;... into DS register
  2680                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2681                                                          or      al,10000000b                                    ;set IRQ flag
  2682                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2683                                                          pop     ds                                              ;restore non-volatile regs
  2684                                                          jmp     hwint                                           ;end primary PIC interrupt
  2685                                  ;-----------------------------------------------------------------------------------------------------------------------
  2686                                  ;
  2687                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2688                                  ;
  2689                                  ;-----------------------------------------------------------------------------------------------------------------------
  2690                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2691                                                          push    eax                                             ;save modified regs
  2692                                                          jmp     hwint                                           ;end interrupt and return
  2693                                  ;-----------------------------------------------------------------------------------------------------------------------
  2694                                  ;
  2695                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2696                                  ;
  2697                                  ;-----------------------------------------------------------------------------------------------------------------------
  2698                                                          menter  rtclock                                         ;real-time clock interrupt
  2699                                                          push    eax                                             ;save modified regs
  2700                                                          jmp     hwwint                                          ;end interrupt and return
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  ;
  2703                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2704                                  ;
  2705                                  ;-----------------------------------------------------------------------------------------------------------------------
  2706                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2707                                                          push    eax                                             ;save modified regs
  2708                                                          jmp     hwwint                                          ;end interrupt and return
  2709                                  ;-----------------------------------------------------------------------------------------------------------------------
  2710                                  ;
  2711                                  ;       IRQ10   Reserved Hardware Interrupt
  2712                                  ;
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                                          menter  irq10                                           ;reserved
  2715                                                          push    eax                                             ;save modified regs
  2716                                                          jmp     hwwint                                          ;end interrupt and return
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  ;
  2719                                  ;       IRQ11   Reserved Hardware Interrupt
  2720                                  ;
  2721                                  ;-----------------------------------------------------------------------------------------------------------------------
  2722                                                          menter  irq11                                           ;reserved
  2723                                                          push    eax                                             ;save modified regs
  2724                                                          jmp     hwwint                                          ;end interrupt and return
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                  ;
  2727                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2728                                  ;
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2731                                                          push    eax                                             ;save modified regs
  2732                                                          jmp     hwwint                                          ;end interrupt and return
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                  ;
  2735                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2736                                  ;
  2737                                  ;-----------------------------------------------------------------------------------------------------------------------
  2738                                                          menter  coprocessor                                     ;coprocessor interrupt
  2739                                                          push    eax                                             ;save modified regs
  2740                                                          jmp     hwwint                                          ;end interrupt and return
  2741                                  ;-----------------------------------------------------------------------------------------------------------------------
  2742                                  ;
  2743                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2744                                  ;
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2747                                                          push    eax                                             ;save modified regs
  2748                                                          jmp     hwwint                                          ;end interrupt and return
  2749                                  ;-----------------------------------------------------------------------------------------------------------------------
  2750                                  ;
  2751                                  ;       IRQ15   Reserved Hardware Interrupt
  2752                                  ;
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                                          menter  irq15                                           ;reserved
  2755                                                          push    eax                                             ;save modified regs
  2756                                                          jmp     hwwint                                          ;end interrupt and return
  2757                                  ;-----------------------------------------------------------------------------------------------------------------------
  2758                                  ;
  2759                                  ;       Exit from hardware interrupt
  2760                                  ;
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2763                                                          jmp     hwint90                                         ;skip ahead
  2764                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2765                                  hwint90                 pop     eax                                             ;restore modified regs
  2766                                                          iretd                                                   ;return from interrupt
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                  ;
  2769                                  ;       INT 30h Operating System Software Service Interrupt
  2770                                  ;
  2771                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2772                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2773                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2774                                  ;       the entry address of the specific function from a table.
  2775                                  ;
  2776                                  ;-----------------------------------------------------------------------------------------------------------------------
  2777                                                          menter  svc
  2778                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2779                                                          jae     svc90                                           ;yes, skip ahead
  2780                                                          movzx   eax,al                                          ;function
  2781                                                          shl     eax,2                                           ;offset into table
  2782                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2783                                  svc90                   iretd                                                   ;return from interrupt
  2784                                  ;-----------------------------------------------------------------------------------------------------------------------
  2785                                  ;
  2786                                  ;       Service Request Table
  2787                                  ;
  2788                                  ;
  2789                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2793                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2794                                                          tsvce   CompareMemory                                   ;compare memory
  2795                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2796                                                          tsvce   FreeMemory                                      ;free memory block
  2797                                                          tsvce   GetConsoleString                                ;get string input
  2798                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2799                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2800                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2801                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2802                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2803                                                          tsvce   PutDayString                                    ;put DD string
  2804                                                          tsvce   PutHourString                                   ;put hh string
  2805                                                          tsvce   PutMinuteString                                 ;put mm string
  2806                                                          tsvce   PutMonthString                                  ;put MM string
  2807                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2808                                                          tsvce   PutSecondString                                 ;put ss string
  2809                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2810                                                          tsvce   PutWeekdayString                                ;put weekday string
  2811                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2812                                                          tsvce   PutYearString                                   ;put YYYY string
  2813                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2814                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2815                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2816                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2817                                                          tsvce   UpperCaseString                                 ;upper-case string
  2818                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  ;
  2821                                  ;       Service Request Macros
  2822                                  ;
  2823                                  ;       These macros provide positional parameterization of service request calls.
  2824                                  ;
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                  %macro                  allocateMemory 1
  2827                                                          mov     ecx,%1                                          ;bytes to allocate
  2828                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2829                                                          int     _svc                                            ;invoke OS service
  2830                                  %endmacro
  2831                                  %macro                  clearConsoleScreen 0
  2832                                                          mov     al,eClearConsoleScreen                          ;function code
  2833                                                          int     _svc                                            ;invoke OS service
  2834                                  %endmacro
  2835                                  %macro                  compareMemory 0
  2836                                                          mov     al,eCompareMemory                               ;function code
  2837                                                          int     _svc                                            ;invoke OS service
  2838                                  %endmacro
  2839                                  %macro                  decimalToUnsigned 0
  2840                                                          mov     al,eDecimalToUnsigned                           ;function code
  2841                                                          int     _svc                                            ;invoke OS servie
  2842                                  %endmacro
  2843                                  %macro                  freeMemory 1
  2844                                                          mov     edx,%1                                          ;address of memory block
  2845                                                          mov     al,eFreeMemory                                  ;function code
  2846                                                          int     _svc                                            ;invoke OS service
  2847                                  %endmacro
  2848                                  %macro                  getConsoleString 4
  2849                                                          mov     edx,%1                                          ;buffer address
  2850                                                          mov     ecx,%2                                          ;max characters
  2851                                                          mov     bh,%3                                           ;echo indicator
  2852                                                          mov     bl,%4                                           ;terminator
  2853                                                          mov     al,eGetConsoleString                            ;function code
  2854                                                          int     _svc                                            ;invoke OS service
  2855                                  %endmacro
  2856                                  %macro                  hexadecimalToUnsigned 0
  2857                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2858                                                          int     _svc                                            ;invoke OS service
  2859                                  %endmacro
  2860                                  %macro                  isLeapYear 1
  2861                                                          mov     ebx,%1                                          ;DATETIME addr
  2862                                                          mov     al,eIsLeapYear                                  ;function code
  2863                                                          int     _svc                                            ;invoke OS service
  2864                                  %endmacro
  2865                                  %macro                  placeCursor 0
  2866                                                          mov     al,ePlaceCursor                                 ;function code
  2867                                                          int     _svc                                            ;invoke OS service
  2868                                  %endmacro
  2869                                  %macro                  putConsoleString 1
  2870                                                          mov     edx,%1                                          ;string address
  2871                                                          mov     al,ePutConsoleString                            ;function code
  2872                                                          int     _svc                                            ;invoke OS service
  2873                                  %endmacro
  2874                                  %macro                  putDateString 0
  2875                                                          mov     al,ePutDateString                               ;function code
  2876                                                          int     _svc                                            ;invoke OS service
  2877                                  %endmacro
  2878                                  %macro                  putDateString 2
  2879                                                          mov     ebx,%1                                          ;DATETIME addr
  2880                                                          mov     edx,%2                                          ;output buffer addr
  2881                                                          mov     al,ePutDateString                               ;function code
  2882                                                          int     _svc                                            ;invoke OS service
  2883                                  %endmacro
  2884                                  %macro                  putDayString 2
  2885                                                          mov     ebx,%1                                          ;DATETIME addr
  2886                                                          mov     edx,%2                                          ;output buffer addr
  2887                                                          mov     al,ePutDayString                                ;function code
  2888                                                          int     _svc                                            ;invoke OS service
  2889                                  %endmacro
  2890                                  %macro                  putHourString 2
  2891                                                          mov     ebx,%1                                          ;DATETIME addr
  2892                                                          mov     edx,%2                                          ;output buffer addr
  2893                                                          mov     al,ePutHourString                               ;function code
  2894                                                          int     _svc                                            ;invoke OS service
  2895                                  %endmacro
  2896                                  %macro                  putMinuteString 2
  2897                                                          mov     ebx,%1                                          ;DATETIME addr
  2898                                                          mov     edx,%2                                          ;output buffer addr
  2899                                                          mov     al,ePutMinuteString                             ;function code
  2900                                                          int     _svc                                            ;invoke OS service
  2901                                  %endmacro
  2902                                  %macro                  putMonthString 2
  2903                                                          mov     ebx,%1                                          ;DATETIME addr
  2904                                                          mov     edx,%2                                          ;output buffer addr
  2905                                                          mov     al,ePutMonthString                              ;function code
  2906                                                          int     _svc                                            ;invoke OS service
  2907                                  %endmacro
  2908                                  %macro                  putMonthNameString 2
  2909                                                          mov     ebx,%1                                          ;DATETIME addr
  2910                                                          mov     edx,%2                                          ;output buffer addr
  2911                                                          mov     al,ePutMonthNameString                          ;function code
  2912                                                          int     _svc                                            ;invoke OS service
  2913                                  %endmacro
  2914                                  %macro                  putSecondString 2
  2915                                                          mov     ebx,%1                                          ;DATETIME addr
  2916                                                          mov     edx,%2                                          ;output buffer addr
  2917                                                          mov     al,ePutSecondString                             ;function code
  2918                                                          int     _svc                                            ;invoke OS service
  2919                                  %endmacro
  2920                                  %macro                  putTimeString 0
  2921                                                          mov     al,ePutTimeString                               ;function code
  2922                                                          int     _svc                                            ;invoke OS service
  2923                                  %endmacro
  2924                                  %macro                  putTimeString 2
  2925                                                          mov     ebx,%1                                          ;DATETIME addr
  2926                                                          mov     edx,%2                                          ;output buffer addr
  2927                                                          mov     al,ePutTimeString                               ;function code
  2928                                                          int     _svc                                            ;invoke OS service
  2929                                  %endmacro
  2930                                  %macro                  putWeekdayString 2
  2931                                                          mov     ebx,%1                                          ;DATETIME addr
  2932                                                          mov     edx,%2                                          ;output buffer addr
  2933                                                          mov     al,ePutWeekdayString                            ;function code
  2934                                                          int     _svc                                            ;invoke OS service
  2935                                  %endmacro
  2936                                  %macro                  putWeekdayNameString 2
  2937                                                          mov     ebx,%1                                          ;DATETIME addr
  2938                                                          mov     edx,%2                                          ;output buffer addr
  2939                                                          mov     al,ePutWeekdayNameString                        ;function code
  2940                                                          int     _svc                                            ;invoke OS service
  2941                                  %endmacro
  2942                                  %macro                  putYearString 2
  2943                                                          mov     ebx,%1                                          ;DATETIME addr
  2944                                                          mov     edx,%2                                          ;output buffer addr
  2945                                                          mov     al,ePutYearString                               ;function code
  2946                                                          int     _svc                                            ;invoke OS service
  2947                                  %endmacro
  2948                                  %macro                  readRealTimeClock 0
  2949                                                          mov     al,eReadRealTimeClock                           ;function code
  2950                                                          int     _svc                                            ;invoke OS service
  2951                                  %endmacro
  2952                                  %macro                  readRealTimeClock 1
  2953                                                          mov     ebx,%1                                          ;DATETIME addr
  2954                                                          mov     al,eReadRealTimeClock                           ;function code
  2955                                                          int     _svc                                            ;invoke OS service
  2956                                  %endmacro
  2957                                  %macro                  resetSystem 0
  2958                                                          mov     al,eResetSystem                                 ;function code
  2959                                                          int     _svc                                            ;invoke OS service
  2960                                  %endmacro
  2961                                  %macro                  unsignedToDecimalString 0
  2962                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2963                                                          int     _svc                                            ;invoke OS service
  2964                                  %endmacro
  2965                                  %macro                  unsignedToHexadecimal 0
  2966                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  upperCaseString 0
  2970                                                          mov     al,eUpperCaseString                             ;function code
  2971                                                          int     _svc                                            ;invoke OS service
  2972                                  %endmacro
  2973                                  ;=======================================================================================================================
  2974                                  ;
  2975                                  ;       Kernel Function Library
  2976                                  ;
  2977                                  ;=======================================================================================================================
  2978                                  ;=======================================================================================================================
  2979                                  ;
  2980                                  ;       Date and Time Helper Routines
  2981                                  ;
  2982                                  ;       GetYear
  2983                                  ;       IsLeapYear
  2984                                  ;       PutDateString
  2985                                  ;       PutDayString
  2986                                  ;       PutHourString
  2987                                  ;       PutMinuteString
  2988                                  ;       PutMonthString
  2989                                  ;       PutMonthNameString
  2990                                  ;       PutSecondString
  2991                                  ;       PutTimeString
  2992                                  ;       PutWeekdayString
  2993                                  ;       PutWeekdayNameString
  2994                                  ;       PutYearString
  2995                                  ;
  2996                                  ;=======================================================================================================================
  2997                                  ;-----------------------------------------------------------------------------------------------------------------------
  2998                                  ;
  2999                                  ;       Routine:        GetYear
  3000                                  ;
  3001                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3002                                  ;
  3003                                  ;       In:             DS:EBX  DATETIME address
  3004                                  ;
  3005                                  ;       Out:            ECX     year
  3006                                  ;
  3007                                  ;-----------------------------------------------------------------------------------------------------------------------
  3008                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3009                                                          imul    ecx,100                                         ;century * 100
  3010                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3011                                                          add     ecx,eax                                         ;year (YYYY)
  3012                                                          ret                                                     ;return
  3013                                  ;-----------------------------------------------------------------------------------------------------------------------
  3014                                  ;
  3015                                  ;       Routine:        IsLeapYear
  3016                                  ;
  3017                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3018                                  ;
  3019                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3020                                  ;
  3021                                  ;       Out:            ECX     0 = not a leap year
  3022                                  ;                               1 = leap year
  3023                                  ;
  3024                                  ;-----------------------------------------------------------------------------------------------------------------------
  3025                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3026                                                          mov     eax,ecx                                         ;EAX = YYYY
  3027                                                          xor     ecx,ecx                                         ;assume not leap year
  3028                                                          test    al,00000011b                                    ;multiple of four?
  3029                                                          jnz     .no                                             ;no, branch
  3030                                                          mov     dl,100                                          ;divisor
  3031                                                          div     dl                                              ;divide by 100
  3032                                                          test    ah,ah                                           ;multiple of 100?
  3033                                                          jnz     .yes                                            ;yes, branch
  3034                                                          test    al,00000011b                                    ;multiple of 400?
  3035                                                          jnz     .no                                             ;no, branch
  3036                                  .yes                    inc     ecx                                             ;indicate leap
  3037                                  .no                     ret                                                     ;return
  3038                                  ;-----------------------------------------------------------------------------------------------------------------------
  3039                                  ;
  3040                                  ;       Routine:        PutDateString
  3041                                  ;
  3042                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3043                                  ;                       structure at ds:ebx.
  3044                                  ;
  3045                                  ;       In:             DS:EBX  DATETIME address
  3046                                  ;                       DS:EDX  output buffer address
  3047                                  ;
  3048                                  ;-----------------------------------------------------------------------------------------------------------------------
  3049                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3050                                                          push    edi                                             ;
  3051                                                          push    es                                              ;
  3052                                                          push    ds                                              ;store data selector ...
  3053                                                          pop     es                                              ;... in extra segment reg
  3054                                                          mov     edi,edx                                         ;output buffer address
  3055                                                          mov     cl,10                                           ;divisor
  3056                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3057                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3058                                                          div     cl                                              ;AH = rem; AL = quotient
  3059                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3060                                                          cld                                                     ;forward strings
  3061                                                          stosd                                                   ;store "mm/"nul
  3062                                                          dec     edi                                             ;address of terminator
  3063                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3064                                                          div     cl                                              ;AH = rem; AL = quotient
  3065                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3066                                                          stosd                                                   ;store "dd/"nul
  3067                                                          dec     edi                                             ;address of terminator
  3068                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3069                                                          div     cl                                              ;AH = rem; AL = quotient
  3070                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3071                                                          stosd                                                   ;store "cc/"null
  3072                                                          dec     edi                                             ;address of terminator
  3073                                                          dec     edi                                             ;address of delimiter
  3074                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3075                                                          div     cl                                              ;AH = rem; AL = quotient
  3076                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3077                                                          stosb                                                   ;store quotient
  3078                                                          mov     al,ah                                           ;remainder
  3079                                                          stosb                                                   ;store remainder
  3080                                                          xor     al,al                                           ;null terminator
  3081                                                          stosb                                                   ;store terminator
  3082                                                          pop     es                                              ;restore non-volatile regs
  3083                                                          pop     edi                                             ;
  3084                                                          pop     ecx                                             ;
  3085                                                          ret                                                     ;return
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087                                  ;
  3088                                  ;       Routine:        PutDayString
  3089                                  ;
  3090                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3091                                  ;                       structure at ds:ebx.
  3092                                  ;
  3093                                  ;       In:             DS:EBX  DATETIME address
  3094                                  ;                       DS:EDX  output buffer address
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3098                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3099                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3100                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3101                                                          pop     ecx                                             ;
  3102                                                          ret                                                     ;return
  3103                                  ;-----------------------------------------------------------------------------------------------------------------------
  3104                                  ;
  3105                                  ;       Routine:        PutHourString
  3106                                  ;
  3107                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3108                                  ;                       structure at ds:ebx.
  3109                                  ;
  3110                                  ;       In:             DS:EBX  DATETIME address
  3111                                  ;                       DS:EDX  output buffer address
  3112                                  ;
  3113                                  ;-----------------------------------------------------------------------------------------------------------------------
  3114                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3115                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3116                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3117                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3118                                                          pop     ecx                                             ;
  3119                                                          ret                                                     ;return
  3120                                  ;-----------------------------------------------------------------------------------------------------------------------
  3121                                  ;
  3122                                  ;       Routine:        PutMinuteString
  3123                                  ;
  3124                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3125                                  ;                       structure at ds:ebx.
  3126                                  ;
  3127                                  ;       In:             DS:EBX  DATETIME address
  3128                                  ;                       DS:EDX  output buffer address
  3129                                  ;
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3132                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3133                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3134                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3135                                                          pop     ecx                                             ;
  3136                                                          ret                                                     ;return
  3137                                  ;-----------------------------------------------------------------------------------------------------------------------
  3138                                  ;
  3139                                  ;       Routine:        PutMonthString
  3140                                  ;
  3141                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3142                                  ;                       structure at ds:ebx.
  3143                                  ;
  3144                                  ;       In:             DS:EBX  DATETIME address
  3145                                  ;                       DS:EDX  output buffer address
  3146                                  ;
  3147                                  ;-----------------------------------------------------------------------------------------------------------------------
  3148                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3149                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3150                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3151                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3152                                                          pop     ecx                                             ;
  3153                                                          ret                                                     ;return
  3154                                  ;-----------------------------------------------------------------------------------------------------------------------
  3155                                  ;
  3156                                  ;       Routine:        PutMonthNameString
  3157                                  ;
  3158                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3159                                  ;                       structure at ds:ebx.
  3160                                  ;
  3161                                  ;       In:             DS:EBX  DATETIME address
  3162                                  ;                       DS:EDX  output buffer address
  3163                                  ;
  3164                                  ;-----------------------------------------------------------------------------------------------------------------------
  3165                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3166                                                          push    edi                                             ;
  3167                                                          push    ds                                              ;
  3168                                                          push    es                                              ;
  3169                                                          push    ds                                              ;load data selector ...
  3170                                                          pop     es                                              ;... into extra segment
  3171                                                          mov     edi,edx                                         ;output buffer address
  3172                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3173                                                          dec     eax                                             ;month (0-11)
  3174                                                          shl     eax,2                                           ;offset into month name lookup table
  3175                                                          push    cs                                              ;load code selector ...
  3176                                                          pop     ds                                              ;... into data segment
  3177                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3178                                                          cld                                                     ;forward strings
  3179                                  .10                     lodsb                                                   ;name character
  3180                                                          stosb                                                   ;store in output buffer
  3181                                                          test    al,al                                           ;end of string?
  3182                                                          jnz     .10                                             ;no, continue
  3183                                                          pop     es                                              ;restore non-volatile regs
  3184                                                          pop     ds                                              ;
  3185                                                          pop     edi                                             ;
  3186                                                          pop     esi                                             ;
  3187                                                          ret                                                     ;return
  3188                                  ;-----------------------------------------------------------------------------------------------------------------------
  3189                                  ;
  3190                                  ;       Routine:        PutSecondString
  3191                                  ;
  3192                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3193                                  ;                       structure at ds:ebx.
  3194                                  ;
  3195                                  ;       In:             DS:EBX  DATETIME address
  3196                                  ;                       DS:EDX  output buffer address
  3197                                  ;
  3198                                  ;-----------------------------------------------------------------------------------------------------------------------
  3199                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3200                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3201                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3202                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3203                                                          pop     ecx                                             ;
  3204                                                          ret                                                     ;return
  3205                                  ;-----------------------------------------------------------------------------------------------------------------------
  3206                                  ;
  3207                                  ;       Routine:        PutTimeString
  3208                                  ;
  3209                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3210                                  ;                       structure at ds:ebx.
  3211                                  ;
  3212                                  ;       In:             DS:EBX  DATETIME address
  3213                                  ;                       DS:EDX  output buffer address
  3214                                  ;
  3215                                  ;-----------------------------------------------------------------------------------------------------------------------
  3216                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3217                                                          push    edi                                             ;
  3218                                                          push    es                                              ;
  3219                                                          push    ds                                              ;store data selector ...
  3220                                                          pop     es                                              ;... in extra segment reg
  3221                                                          mov     edi,edx                                         ;output buffer address
  3222                                                          mov     cl,10                                           ;divisor
  3223                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3224                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3225                                                          div     cl                                              ;ah = rem; al = quotient
  3226                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3227                                                          cld                                                     ;forward strings
  3228                                                          stosd                                                   ;store "mm/"nul
  3229                                                          dec     edi                                             ;address of terminator
  3230                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3231                                                          div     cl                                              ;ah = rem; al = quotient
  3232                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3233                                                          stosd                                                   ;store "dd/"nul
  3234                                                          dec     edi                                             ;address of terminator
  3235                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3236                                                          div     cl                                              ;ah = rem; al = quotient
  3237                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3238                                                          stosb                                                   ;store quotient
  3239                                                          mov     al,ah                                           ;remainder
  3240                                                          stosb                                                   ;store remainder
  3241                                                          xor     al,al                                           ;null terminator
  3242                                                          stosb                                                   ;store terminator
  3243                                                          pop     es                                              ;restore non-volatile regs
  3244                                                          pop     edi                                             ;
  3245                                                          pop     ecx                                             ;
  3246                                                          ret                                                     ;return
  3247                                  ;-----------------------------------------------------------------------------------------------------------------------
  3248                                  ;
  3249                                  ;       Routine:        PutWeekdayString
  3250                                  ;
  3251                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3252                                  ;                       structure at ds:ebx.
  3253                                  ;
  3254                                  ;       In:             DS:EBX  DATETIME address
  3255                                  ;                       DS:EDX  output buffer address
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3259                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3260                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3261                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3262                                                          pop     ecx                                             ;
  3263                                                          ret                                                     ;return
  3264                                  ;-----------------------------------------------------------------------------------------------------------------------
  3265                                  ;
  3266                                  ;       Routine:        PutWeekdayNameString
  3267                                  ;
  3268                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3269                                  ;                       structure at ds:ebx.
  3270                                  ;
  3271                                  ;       In:             DS:EBX  DATETIME address
  3272                                  ;                       DS:EDX  output buffer address
  3273                                  ;
  3274                                  ;-----------------------------------------------------------------------------------------------------------------------
  3275                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3276                                                          push    edi                                             ;
  3277                                                          push    ds                                              ;
  3278                                                          push    es                                              ;
  3279                                                          push    ds                                              ;load data selector ...
  3280                                                          pop     es                                              ;... into extra segment
  3281                                                          mov     edi,edx                                         ;output buffer address
  3282                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3283                                                          shl     eax,2                                           ;offset into day name lookup table
  3284                                                          push    cs                                              ;load code selector ...
  3285                                                          pop     ds                                              ;... into data segment
  3286                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3287                                                          cld                                                     ;forward strings
  3288                                  .10                     lodsb                                                   ;name character
  3289                                                          stosb                                                   ;store in output buffer
  3290                                                          test    al,al                                           ;end of string?
  3291                                                          jnz     .10                                             ;no, continue
  3292                                                          pop     es                                              ;restore non-volatile regs
  3293                                                          pop     ds                                              ;
  3294                                                          pop     edi                                             ;
  3295                                                          pop     esi                                             ;
  3296                                                          ret                                                     ;return
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298                                  ;
  3299                                  ;       Routine:        PutYearString
  3300                                  ;
  3301                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3302                                  ;                       structure at ds:ebx.
  3303                                  ;
  3304                                  ;       In:             DS:EBX  DATETIME address
  3305                                  ;                       DS:EDX  output buffer address
  3306                                  ;
  3307                                  ;-----------------------------------------------------------------------------------------------------------------------
  3308                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3309                                                          call    GetYear                                         ;ECX = YYYY
  3310                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3311                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3312                                                          pop     ecx                                             ;restore non-volatile regs
  3313                                                          ret                                                     ;return
  3314                                  ;-----------------------------------------------------------------------------------------------------------------------
  3315                                  ;
  3316                                  ;       Day Names
  3317                                  ;
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319                                  czSunday                db      "Sunday",0
  3320                                  czMonday                db      "Monday",0
  3321                                  czTuesday               db      "Tuesday",0
  3322                                  czWednesday             db      "Wednesday",0
  3323                                  czThursday              db      "Thursday",0
  3324                                  czFriday                db      "Friday",0
  3325                                  czSaturday              db      "Saturday",0
  3326                                  ;-----------------------------------------------------------------------------------------------------------------------
  3327                                  ;
  3328                                  ;       Month Names
  3329                                  ;
  3330                                  ;-----------------------------------------------------------------------------------------------------------------------
  3331                                  czJanuary               db      "January",0
  3332                                  czFebruary              db      "February",0
  3333                                  czMarch                 db      "March",0
  3334                                  czApril                 db      "April",0
  3335                                  czMay                   db      "May",0
  3336                                  czJune                  db      "June",0
  3337                                  czJuly                  db      "July",0
  3338                                  czAugust                db      "August",0
  3339                                  czSeptember             db      "September",0
  3340                                  czOctober               db      "October",0
  3341                                  czNovember              db      "November",0
  3342                                  czDecember              db      "December",0
  3343                                  ;-----------------------------------------------------------------------------------------------------------------------
  3344                                  ;
  3345                                  ;       Day Names Lookup Table
  3346                                  ;
  3347                                  ;-----------------------------------------------------------------------------------------------------------------------
  3348                                                          align   4
  3349                                  tDayNames               equ     $
  3350                                                          dd      czSunday
  3351                                                          dd      czMonday
  3352                                                          dd      czTuesday
  3353                                                          dd      czWednesday
  3354                                                          dd      czThursday
  3355                                                          dd      czFriday
  3356                                                          dd      czSaturday
  3357                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3358                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3359                                  ;-----------------------------------------------------------------------------------------------------------------------
  3360                                  ;
  3361                                  ;       Month Names Lookup Table
  3362                                  ;
  3363                                  ;-----------------------------------------------------------------------------------------------------------------------
  3364                                                          align   4
  3365                                  tMonthNames             equ     $
  3366                                                          dd      czJanuary
  3367                                                          dd      czFebruary
  3368                                                          dd      czMarch
  3369                                                          dd      czApril
  3370                                                          dd      czMay
  3371                                                          dd      czJune
  3372                                                          dd      czJuly
  3373                                                          dd      czAugust
  3374                                                          dd      czSeptember
  3375                                                          dd      czOctober
  3376                                                          dd      czNovember
  3377                                                          dd      czDecember
  3378                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3379                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3380                                  ;=======================================================================================================================
  3381                                  ;
  3382                                  ;       Memory Helper Routines
  3383                                  ;
  3384                                  ;       AllocateMemory
  3385                                  ;       FreeMemory
  3386                                  ;
  3387                                  ;=======================================================================================================================
  3388                                  ;-----------------------------------------------------------------------------------------------------------------------
  3389                                  ;
  3390                                  ;       Routine:        AllocateMemory
  3391                                  ;
  3392                                  ;       Description:    This routine allocates a memory block for the given task.
  3393                                  ;
  3394                                  ;       In:             ECX     bytes of memory to allocate
  3395                                  ;
  3396                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3397                                  ;                               0       unable to allocate memory
  3398                                  ;
  3399                                  ;-----------------------------------------------------------------------------------------------------------------------
  3400                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3401                                                          push    ecx                                             ;
  3402                                                          push    esi                                             ;
  3403                                                          push    ds                                              ;
  3404                                  ;
  3405                                  ;       Address kernel memory structures
  3406                                  ;
  3407                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3408                                                          pop     ds                                              ;... into data segment reg
  3409                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3410                                  ;
  3411                                  ;       Set requested size to minimum block size if requested size is too small.
  3412                                  ;
  3413                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3414                                                          jae     .10                                             ;no, branch
  3415                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3416                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3417                                  ;
  3418                                  ;       Find the first free memory block large enough to satisfy the request.
  3419                                  ;
  3420                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3421                                  .20                     test    eax,eax                                         ;end of free block chain?
  3422                                                          jz      .220                                            ;yes, branch
  3423                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3424                                                          jbe     .30                                             ;yes, branch
  3425                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3426                                                          jmp     .20                                             ;continue
  3427                                  ;-----------------------------------------------------------------------------------------------------------------------
  3428                                  ;
  3429                                  ;       Address the previous and next free memory blocks.
  3430                                  ;
  3431                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3432                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3433                                  ;
  3434                                  ;       Remove the free memory block from the forward free memory block chain.
  3435                                  ;
  3436                                                          test    ebx,ebx                                         ;any previous free memory block?
  3437                                                          jz      .40                                             ;no, branch
  3438                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3439                                                          jmp     .50                                             ;continue
  3440                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3441                                  ;
  3442                                  ;       Remove the free memory block from the reverse free memory block chain.
  3443                                  ;
  3444                                  .50                     test    edx,edx                                         ;any next free memory block?
  3445                                                          jz      .60                                             ;no, branch
  3446                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3447                                                          jmp     .70                                             ;continue
  3448                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450                                  ;
  3451                                  ;       Determine if the free memory block can be split.
  3452                                  ;
  3453                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3454                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3455                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3456                                                          jb      .150                                            ;no, branch
  3457                                  ;
  3458                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3459                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3460                                  ;       of the requested memory size.
  3461                                  ;
  3462                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3463                                                          mov     edx,eax                                         ;memory block address
  3464                                                          add     edx,ecx                                         ;address new new next contig block
  3465                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3466                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3467                                  ;
  3468                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3469                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3470                                  ;
  3471                                                          jecxz   .80                                             ;no next contig, branch
  3472                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3473                                                          jmp     .90                                             ;continue
  3474                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3475                                  ;
  3476                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3477                                  ;
  3478                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3479                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3480                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3481                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3482                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3483                                                          xor     ebx,ebx                                         ;zero register
  3484                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3485                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3486                                  ;
  3487                                  ;       Find the proper location in the free block chain for the new free block
  3488                                  ;
  3489                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3490                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3491                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3492                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3493                                                          jbe     .110                                            ;yes, branch
  3494                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3495                                                          jmp     .100                                            ;continue
  3496                                  ;
  3497                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3498                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3499                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3500                                  ;       block of hte next block, if there is one.
  3501                                  ;
  3502                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3503                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3504                                                          jecxz   .120                                            ;branch if no next block
  3505                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3506                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3507                                                          jmp     .130                                            ;continue
  3508                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3509                                  ;
  3510                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3511                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3512                                  ;       last user block pointers if necessary.
  3513                                  ;
  3514                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3515                                                          test    ebx,ebx                                         ;is there a previous block?
  3516                                                          jz      .140                                            ;no, branch
  3517                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3518                                                          jmp     .150                                            ;continue
  3519                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3520                                  ;
  3521                                  ;       Update the newly allocated block's owner and signature.
  3522                                  ;
  3523                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3524                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3525                                                          xor     edx,edx                                         ;zero register
  3526                                                          str     dx                                              ;load the task state register
  3527                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3528                                  ;
  3529                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3530                                  ;
  3531                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3532                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3533                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3534                                                          jb      .180                                            ;branch if block belongs to next task
  3535                                                          je      .170                                            ;branch if block belongs to this task
  3536                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3537                                                          jmp     .160                                            ;continue
  3538                                  ;
  3539                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3540                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3541                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3542                                  ;       place to insert the block.
  3543                                  ;
  3544                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3545                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3546                                                          jbe     .180                                            ;yes, branch
  3547                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3548                                                          test    ecx,ecx                                         ;end of chain?
  3549                                                          jz      .180                                            ;yes, branch
  3550                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3551                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3552                                                          je      .170                                            ;yes, continue search
  3553                                  ;
  3554                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3555                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3556                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3557                                  ;       do have a previous-block, we update that block's next-block pointer.
  3558                                  ;
  3559                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3560                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3561                                                          jecxz   .190                                            ;branch if no next-task block
  3562                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3563                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3564                                                          jmp     .200                                            ;continue
  3565                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3566                                  ;
  3567                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3568                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3569                                  ;       global first and/or last user-block pointers if necessary.
  3570                                  ;
  3571                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3572                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3573                                                          jz      .210                                            ;no, branch
  3574                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3575                                                          jmp     .220                                            ;continue
  3576                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3577                                  ;
  3578                                  ;       Restore registers and return to caller.
  3579                                  ;
  3580                                  .220                    pop     ds                                              ;restore non-volatie regs
  3581                                                          pop     esi                                             ;
  3582                                                          pop     ecx                                             ;
  3583                                                          pop     ebx                                             ;
  3584                                                          ret                                                     ;return
  3585                                  ;-----------------------------------------------------------------------------------------------------------------------
  3586                                  ;
  3587                                  ;       Routine:        FreeMemory
  3588                                  ;
  3589                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3590                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3591                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3592                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3593                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3594                                  ;
  3595                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3596                                  ;
  3597                                  ;       Out:            EAX     -1      invalid memory block
  3598                                  ;                               0       memory block freed
  3599                                  ;
  3600                                  ;-----------------------------------------------------------------------------------------------------------------------
  3601                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3602                                                          push    ecx                                             ;
  3603                                                          push    esi                                             ;
  3604                                                          push    edi                                             ;
  3605                                                          push    ds                                              ;
  3606                                                          push    es                                              ;
  3607                                  ;
  3608                                  ;       Address the root memory structure
  3609                                  ;
  3610                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3611                                                          pop     es                                              ;... into extra segment reg
  3612                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3613                                                          pop     ds                                              ;... into data segment reg
  3614                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3615                                                          mov     edi,edx                                         ;memory block address
  3616                                  ;
  3617                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3618                                  ;
  3619                                                          xor     eax,eax                                         ;indicate success
  3620                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3621                                                          je      .240                                            ;yes, branch
  3622                                                          dec     eax                                             ;indicate failure
  3623                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3624                                                          jne     .240                                            ;no, branch
  3625                                  ;-----------------------------------------------------------------------------------------------------------------------
  3626                                  ;
  3627                                  ;       Unlink the USER memory block.
  3628                                  ;
  3629                                  ;-----------------------------------------------------------------------------------------------------------------------
  3630                                  ;
  3631                                  ;       Set the block signature. Reset owner.
  3632                                  ;
  3633                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3634                                                          xor     eax,eax                                         ;zero register
  3635                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3636                                  ;
  3637                                  ;       Wipe user area.
  3638                                  ;
  3639                                                          push    edi                                             ;save block address
  3640                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3641                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3642                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3643                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3644                                                          rep     stosb                                           ;clear memory
  3645                                                          pop     edi                                             ;restore block address
  3646                                  ;
  3647                                  ;       Address the preceding and following USER memory blocks
  3648                                  ;
  3649                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3650                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3651                                  ;
  3652                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3653                                  ;       pointer to point to the USER block following this block.
  3654                                  ;
  3655                                                          test    ebx,ebx                                         ;is there a previous block?
  3656                                                          jz      .10                                             ;no, branch
  3657                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3658                                                          jmp     .20                                             ;continue
  3659                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3660                                  ;
  3661                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3662                                  ;       pointer to point to the USER block preceding this block.
  3663                                  ;
  3664                                  .20                     jecxz   .30                                             ;branch if no next block
  3665                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3666                                                          jmp     .40                                             ;continue
  3667                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3668                                  ;-----------------------------------------------------------------------------------------------------------------------
  3669                                  ;
  3670                                  ;       Merge with a previous contiguous FREE memory block.
  3671                                  ;
  3672                                  ;-----------------------------------------------------------------------------------------------------------------------
  3673                                  ;
  3674                                  ;       Address the preceding and following contiguous memory blocks.
  3675                                  ;
  3676                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3677                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3678                                  ;
  3679                                  ;       Verify we have a previous contiguous FREE block.
  3680                                  ;
  3681                                                          test    ebx,ebx                                         ;is there a previous block?
  3682                                                          jz      .100                                            ;no, branch
  3683                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3684                                                          jne     .100                                            ;no, branch
  3685                                  ;
  3686                                  ;       Update adjacent block's contiguous pointers.
  3687                                  ;
  3688                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3689                                                          jecxz   .50                                             ;branch if no next contiguous block
  3690                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3691                                                          jmp     .60                                             ;continue
  3692                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3693                                  ;
  3694                                  ;       Update the size of the merged FREE block.
  3695                                  ;
  3696                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3697                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3698                                  ;
  3699                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3700                                  ;
  3701                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3702                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3703                                                          rep     stosb                                           ;clear memory header
  3704                                                          mov     edi,ebx                                         ;current block is now previous block
  3705                                  ;-----------------------------------------------------------------------------------------------------------------------
  3706                                  ;
  3707                                  ;       Unlink the previous contiguous FREE memory block
  3708                                  ;
  3709                                  ;-----------------------------------------------------------------------------------------------------------------------
  3710                                  ;
  3711                                  ;       Address the preceding and following USER memory blocks
  3712                                  ;
  3713                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3714                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3715                                  ;
  3716                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3717                                  ;       block pointer.
  3718                                  ;
  3719                                                          test    ebx,ebx                                         ;is there a previous block?
  3720                                                          jz      .70                                             ;no, branch
  3721                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3722                                                          jmp     .80                                             ;branch
  3723                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3724                                  ;
  3725                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3726                                  ;       pointer.
  3727                                  ;
  3728                                  .80                     jecxz   .90                                             ;branch if no next block
  3729                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3730                                                          jmp     .100                                            ;continue
  3731                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3732                                  ;-----------------------------------------------------------------------------------------------------------------------
  3733                                  ;
  3734                                  ;       Merge with a following contiguous FREE memory block.
  3735                                  ;
  3736                                  ;-----------------------------------------------------------------------------------------------------------------------
  3737                                  ;
  3738                                  ;       Verify we have a following contiguous FREE block.
  3739                                  ;
  3740                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3741                                                          jecxz   .170                                            ;branch if no next contiguous block
  3742                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3743                                                          jne     .170                                            ;no, branch
  3744                                  ;
  3745                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3746                                  ;
  3747                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3748                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3749                                  ;
  3750                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3751                                  ;
  3752                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3753                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3754                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3755                                                          jz      .110                                            ;no, branch
  3756                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3757                                                          jmp     .120                                            ;continue
  3758                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3759                                  ;-----------------------------------------------------------------------------------------------------------------------
  3760                                  ;
  3761                                  ;       Unlink the following contiguous FREE memory block
  3762                                  ;
  3763                                  ;-----------------------------------------------------------------------------------------------------------------------
  3764                                  ;
  3765                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3766                                  ;
  3767                                  .120                    push    edi                                             ;save this block
  3768                                                          mov     edi,ecx                                         ;next contiguous block
  3769                                                          push    ecx                                             ;save next contiguous block
  3770                                  ;
  3771                                  ;       Address the preceding and following USER memory blocks
  3772                                  ;
  3773                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3774                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3775                                  ;
  3776                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3777                                  ;       block pointer.
  3778                                  ;
  3779                                                          test    ebx,ebx                                         ;is there a previous block?
  3780                                                          jz      .130                                            ;no, branch
  3781                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3782                                                          jmp     .140                                            ;branch
  3783                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3784                                  ;
  3785                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3786                                  ;       pointer.
  3787                                  ;
  3788                                  .140                    jecxz   .150                                            ;branch if no next block
  3789                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3790                                                          jmp     .160                                            ;continue
  3791                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3792                                  ;
  3793                                  ;       Clear next contiguous block's header
  3794                                  ;
  3795                                  .160                    pop     edi                                             ;next congiguous block pointer
  3796                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3797                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3798                                                          rep     stosb                                           ;clear memory header
  3799                                                          pop     edi                                             ;this block's pointer
  3800                                  ;-----------------------------------------------------------------------------------------------------------------------
  3801                                  ;
  3802                                  ;       Insert the final FREE block back into the block chain.
  3803                                  ;
  3804                                  ;-----------------------------------------------------------------------------------------------------------------------
  3805                                  ;
  3806                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3807                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3808                                  ;       all are smaller in size.
  3809                                  ;
  3810                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3811                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3812                                  .180                    jecxz   .190                                            ;exit if no ptr
  3813                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3814                                                          jb      .190                                            ;yes, branch
  3815                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3816                                                          jmp     .180                                            ;continue
  3817                                  ;
  3818                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3819                                  ;       larger free block. Update the next block's previous block pointer.
  3820                                  ;
  3821                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3822                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3823                                                          jecxz   .200                                            ;branch if no block found
  3824                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3825                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3826                                                          jmp     .210                                            ;continue
  3827                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3828                                  ;
  3829                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3830                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3831                                  ;       next pointer.
  3832                                  ;
  3833                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3834                                                          test    ebx,ebx                                         ;do we have a previous block?
  3835                                                          jz      .220                                            ;no, branch
  3836                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3837                                                          jmp     .230                                            ;continue
  3838                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3839                                  ;
  3840                                  ;       The memory free has completed.
  3841                                  ;
  3842                                  .230                    xor     eax,eax                                         ;indicate success
  3843                                  ;
  3844                                  ;       Restore and return.
  3845                                  ;
  3846                                  .240                    pop     es                                              ;restore non-volatile regs
  3847                                                          pop     ds                                              ;
  3848                                                          pop     edi                                             ;
  3849                                                          pop     esi                                             ;
  3850                                                          pop     ecx                                             ;
  3851                                                          pop     ebx                                             ;
  3852                                                          ret                                                     ;return
  3853                                  ;=======================================================================================================================
  3854                                  ;
  3855                                  ;       String Helper Routines
  3856                                  ;
  3857                                  ;       CompareMemory
  3858                                  ;       UpperCaseString
  3859                                  ;
  3860                                  ;=======================================================================================================================
  3861                                  ;-----------------------------------------------------------------------------------------------------------------------
  3862                                  ;
  3863                                  ;       Routine:        CompareMemory
  3864                                  ;
  3865                                  ;       Description:    This routine compares two byte arrays.
  3866                                  ;
  3867                                  ;       In:             DS:EDX  first source address
  3868                                  ;                       DS:EBX  second source address
  3869                                  ;                       ECX     comparison length
  3870                                  ;
  3871                                  ;       Out:            EDX     first source address
  3872                                  ;                       EBX     second source address
  3873                                  ;                       ECX     0       array 1 = array 2
  3874                                  ;                               <0      array 1 < array 2
  3875                                  ;                               >0      array 1 > array 2
  3876                                  ;
  3877                                  ;-----------------------------------------------------------------------------------------------------------------------
  3878                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3879                                                          push    edi                                             ;
  3880                                                          push    es                                              ;
  3881                                                          push    ds                                              ;copy DS
  3882                                                          pop     es                                              ;... to ES
  3883                                                          mov     esi,edx                                         ;first source address
  3884                                                          mov     edi,ebx                                         ;second source address
  3885                                                          cld                                                     ;forward strings
  3886                                                          rep     cmpsb                                           ;compare bytes
  3887                                                          mov     al,0                                            ;default result
  3888                                                          jz      .10                                             ;branch if arrays equal
  3889                                                          mov     al,1                                            ;positive result
  3890                                                          jnc     .10                                             ;branch if target > source
  3891                                                          mov     al,-1                                           ;negative result
  3892                                  .10                     movsx   ecx,al                                          ;extend sign
  3893                                                          pop     es                                              ;restore non-volatile regs
  3894                                                          pop     edi                                             ;
  3895                                                          pop     esi                                             ;
  3896                                                          ret                                                     ;return
  3897                                  ;-----------------------------------------------------------------------------------------------------------------------
  3898                                  ;
  3899                                  ;       Routine:        UpperCaseString
  3900                                  ;
  3901                                  ;       Description:    This routine places all characters in the given string to upper case.
  3902                                  ;
  3903                                  ;       In:             DS:EDX  string address
  3904                                  ;
  3905                                  ;       Out:            EDX     string address
  3906                                  ;
  3907                                  ;-----------------------------------------------------------------------------------------------------------------------
  3908                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3909                                                          mov     esi,edx                                         ;string address
  3910                                                          cld                                                     ;forward strings
  3911                                  .10                     lodsb                                                   ;string character
  3912                                                          test    al,al                                           ;null?
  3913                                                          jz      .20                                             ;yes, skip ahead
  3914                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3915                                                          jb      .10                                             ;no, continue
  3916                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3917                                                          ja      .10                                             ;no, continue
  3918                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3919                                                          mov     [esi-1],al                                      ;upper character
  3920                                                          jmp     .10                                             ;continue
  3921                                  .20                     pop     esi                                             ;restore non-volatile regs
  3922                                                          ret                                                     ;return
  3923                                  ;=======================================================================================================================
  3924                                  ;
  3925                                  ;       Console Helper Routines
  3926                                  ;
  3927                                  ;       FirstConsoleColumn
  3928                                  ;       GetConsoleChar
  3929                                  ;       GetConsoleString
  3930                                  ;       NextConsoleColumn
  3931                                  ;       NextConsoleRow
  3932                                  ;       PreviousConsoleColumn
  3933                                  ;       PutConsoleChar
  3934                                  ;       PutConsoleHexByte
  3935                                  ;       PutConsoleHexDword
  3936                                  ;       PutConsoleHexWord
  3937                                  ;       PutConsoleOIAChar
  3938                                  ;       PutConsoleOIAShift
  3939                                  ;       PutConsoleString
  3940                                  ;       Yield
  3941                                  ;
  3942                                  ;=======================================================================================================================
  3943                                  ;-----------------------------------------------------------------------------------------------------------------------
  3944                                  ;
  3945                                  ;       Routine:        FirstConsoleColumn
  3946                                  ;
  3947                                  ;       Description:    This routine resets the console column to start of the row.
  3948                                  ;
  3949                                  ;       In:             DS      OS data selector
  3950                                  ;
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3953                                                          mov     [wbConsoleColumn],al                            ;save column
  3954                                                          ret                                                     ;return
  3955                                  ;-----------------------------------------------------------------------------------------------------------------------
  3956                                  ;
  3957                                  ;       Routine:        GetConsoleChar
  3958                                  ;
  3959                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3960                                  ;
  3961                                  ;       Out:            AL      ASCII character code
  3962                                  ;                       AH      keyboard scan code
  3963                                  ;
  3964                                  ;-----------------------------------------------------------------------------------------------------------------------
  3965                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3966                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  3967                                                          or      eax,eax                                         ;do we have a message?
  3968                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  3969                                                          push    eax                                             ;save key codes
  3970                                                          and     eax,0FFFF0000h                                  ;mask for message type
  3971                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3972                                                          pop     eax                                             ;restore key codes
  3973                                                          jne     GetConsoleChar                                  ;no, try again
  3974                                                          and     eax,0000ffffh                                   ;mask for key codes
  3975                                                          ret                                                     ;return
  3976                                  ;-----------------------------------------------------------------------------------------------------------------------
  3977                                  ;
  3978                                  ;       Routine:        GetConsoleString
  3979                                  ;
  3980                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3981                                  ;
  3982                                  ;       In:             DS:EDX  target buffer address
  3983                                  ;                       ECX     maximum number of characters to accept
  3984                                  ;                       BH      echo to terminal
  3985                                  ;                       BL      terminating character
  3986                                  ;
  3987                                  ;-----------------------------------------------------------------------------------------------------------------------
  3988                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  3989                                                          push    esi                                             ;
  3990                                                          push    edi                                             ;
  3991                                                          push    es                                              ;
  3992                                                          push    ds                                              ;load data segment selector ...
  3993                                                          pop     es                                              ;... into extra segment register
  3994                                                          mov     edi,edx                                         ;edi = target buffer
  3995                                                          push    ecx                                             ;save maximum characters
  3996                                                          xor     al,al                                           ;zero register
  3997                                                          cld                                                     ;forward strings
  3998                                                          rep     stosb                                           ;zero fill buffer
  3999                                                          pop     ecx                                             ;maximum characters
  4000                                                          mov     edi,edx                                         ;edi = target buffer
  4001                                                          mov     esi,edx                                         ;esi = target buffer
  4002                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4003                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4004                                                          cmp     al,bl                                           ;is this the terminator?
  4005                                                          je      .50                                             ;yes, exit
  4006                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4007                                                          jne     .30                                             ;no, skip ahead
  4008                                                          cmp     esi,edi                                         ;at start of buffer?
  4009                                                          je      .20                                             ;yes, get next character
  4010                                                          dec     edi                                             ;backup target pointer
  4011                                                          mov     byte [edi],0                                    ;zero previous character
  4012                                                          inc     ecx                                             ;increment remaining chars
  4013                                                          test    bh,1                                            ;echo to console?
  4014                                                          jz      .20                                             ;no, get next character
  4015                                                          call    PreviousConsoleColumn                           ;backup console position
  4016                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4017                                                          call    PutConsoleChar                                  ;write space to console
  4018                                                          call    PlaceCursor                                     ;position the cursor
  4019                                                          jmp     .20                                             ;get next character
  4020                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4021                                                          jb      .20                                             ;no, get another character
  4022                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4023                                                          ja      .20                                             ;no, get another character
  4024                                                          stosb                                                   ;store character in buffer
  4025                                                          test    bh,1                                            ;echo to console?
  4026                                                          jz      .40                                             ;no, skip ahead
  4027                                                          call    PutConsoleChar                                  ;write character to console
  4028                                                          call    NextConsoleColumn                               ;advance console position
  4029                                                          call    PlaceCursor                                     ;position the cursor
  4030                                  .40                     dec     ecx                                             ;decrement remaining chars
  4031                                                          jmp     .10                                             ;next
  4032                                  .50                     xor     al,al                                           ;null
  4033                                                          stosb                                                   ;terminate buffer
  4034                                                          pop     es                                              ;restore non-volatile regs
  4035                                                          pop     edi                                             ;
  4036                                                          pop     esi                                             ;
  4037                                                          pop     ecx                                             ;
  4038                                                          ret                                                     ;return
  4039                                  ;-----------------------------------------------------------------------------------------------------------------------
  4040                                  ;
  4041                                  ;       Routine:        NextConsoleColumn
  4042                                  ;
  4043                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4044                                  ;                       incremented if the end of the current row is reached.
  4045                                  ;
  4046                                  ;       In:             DS      OS data selector
  4047                                  ;
  4048                                  ;-----------------------------------------------------------------------------------------------------------------------
  4049                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4050                                                          inc     al                                              ;increment column
  4051                                                          mov     [wbConsoleColumn],al                            ;save column
  4052                                                          cmp     al,ECONCOLS                                     ;end of row?
  4053                                                          jb      .10                                             ;no, skip ahead
  4054                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4055                                                          call    NextConsoleRow                                  ;line feed to next row
  4056                                  .10                     ret                                                     ;return
  4057                                  ;-----------------------------------------------------------------------------------------------------------------------
  4058                                  ;
  4059                                  ;       Routine:        NextConsoleRow
  4060                                  ;
  4061                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4062                                  ;
  4063                                  ;       In:             DS      OS data selector
  4064                                  ;
  4065                                  ;-----------------------------------------------------------------------------------------------------------------------
  4066                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4067                                                          inc     al                                              ;increment row
  4068                                                          mov     [wbConsoleRow],al                               ;save row
  4069                                                          cmp     al,ECONROWS                                     ;end of screen?
  4070                                                          jb      .10                                             ;no, skip ahead
  4071                                                          call    ScrollConsoleRow                                ;scroll up one row
  4072                                                          mov     al,[wbConsoleRow]                               ;row
  4073                                                          dec     al                                              ;decrement row
  4074                                                          mov     [wbConsoleRow],al                               ;save row
  4075                                  .10                     ret                                                     ;return
  4076                                  ;-----------------------------------------------------------------------------------------------------------------------
  4077                                  ;
  4078                                  ;       Routine:        PreviousConsoleColumn
  4079                                  ;
  4080                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4081                                  ;                       the column is set to the last position in the row and the row is decremented.
  4082                                  ;
  4083                                  ;       In:             DS      OS data selector
  4084                                  ;
  4085                                  ;-----------------------------------------------------------------------------------------------------------------------
  4086                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4087                                                          or      al,al                                           ;start of row?
  4088                                                          jnz     .10                                             ;no, skip ahead
  4089                                                          mov     ah,[wbConsoleRow]                               ;current row
  4090                                                          or      ah,ah                                           ;top of screen?
  4091                                                          jz      .20                                             ;yes, exit with no change
  4092                                                          dec     ah                                              ;decrement row
  4093                                                          mov     [wbConsoleRow],ah                               ;save row
  4094                                                          mov     al,ECONCOLS                                     ;set maximum column
  4095                                  .10                     dec     al                                              ;decrement column
  4096                                                          mov     [wbConsoleColumn],al                            ;save column
  4097                                  .20                     ret                                                     ;return
  4098                                  ;-----------------------------------------------------------------------------------------------------------------------
  4099                                  ;
  4100                                  ;       Routine:        PutConsoleChar
  4101                                  ;
  4102                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4103                                  ;
  4104                                  ;       In:             AL      ASCII character
  4105                                  ;                       DS      OS data selector
  4106                                  ;
  4107                                  ;-----------------------------------------------------------------------------------------------------------------------
  4108                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4109                                                          push    es                                              ;
  4110                                                          push    EGDTCGA                                         ;load CGA selector ...
  4111                                                          pop     es                                              ;... into extra segment reg
  4112                                                          mov     cl,[wbConsoleColumn]                            ;column
  4113                                                          mov     ch,[wbConsoleRow]                               ;row
  4114                                                          call    SetConsoleChar                                  ;put character at row, column
  4115                                                          pop     es                                              ;restore non-volatile regs
  4116                                                          pop     ecx                                             ;
  4117                                                          ret                                                     ;return
  4118                                  ;-----------------------------------------------------------------------------------------------------------------------
  4119                                  ;
  4120                                  ;       Routine:        PutConsoleHexByte
  4121                                  ;
  4122                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4123                                  ;
  4124                                  ;       In:             AL      byte value
  4125                                  ;                       CL      column
  4126                                  ;                       CH      row
  4127                                  ;                       DS      OS data selector
  4128                                  ;                       ES      CGA selector
  4129                                  ;
  4130                                  ;-----------------------------------------------------------------------------------------------------------------------
  4131                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4132                                                          mov     bl,al                                           ;save byte value
  4133                                                          shr     al,4                                            ;hi-order nybble
  4134                                                          or      al,030h                                         ;apply ASCII zone
  4135                                                          cmp     al,03ah                                         ;numeric?
  4136                                                          jb      .10                                             ;yes, skip ahead
  4137                                                          add     al,7                                            ;add ASCII offset for alpha
  4138                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4139                                                          mov     al,bl                                           ;byte value
  4140                                                          and     al,0fh                                          ;lo-order nybble
  4141                                                          or      al,30h                                          ;apply ASCII zone
  4142                                                          cmp     al,03ah                                         ;numeric?
  4143                                                          jb      .20                                             ;yes, skip ahead
  4144                                                          add     al,7                                            ;add ASCII offset for alpha
  4145                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4146                                                          pop     ebx                                             ;restore non-volatile regs
  4147                                                          ret                                                     ;return
  4148                                  ;-----------------------------------------------------------------------------------------------------------------------
  4149                                  ;
  4150                                  ;       Routine:        PutConsoleHexDword
  4151                                  ;
  4152                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4153                                  ;
  4154                                  ;       In:             EAX     value
  4155                                  ;                       CL      column
  4156                                  ;                       CH      row
  4157                                  ;                       DS      OS data selector
  4158                                  ;                       ES      CGA selector
  4159                                  ;
  4160                                  ;-----------------------------------------------------------------------------------------------------------------------
  4161                                  PutConsoleHexDword      push    eax
  4162                                                          shr     eax,16
  4163                                                          call    PutConsoleHexWord
  4164                                                          pop     eax
  4165                                                          call    PutConsoleHexWord
  4166                                                          ret
  4167                                  ;-----------------------------------------------------------------------------------------------------------------------
  4168                                  ;
  4169                                  ;       Routine:        PutConsoleHexWord
  4170                                  ;
  4171                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4172                                  ;
  4173                                  ;       In:             EAX     value
  4174                                  ;                       CL      column
  4175                                  ;                       CH      row
  4176                                  ;                       DS      OS data selector
  4177                                  ;                       ES      CGA selector
  4178                                  ;
  4179                                  ;-----------------------------------------------------------------------------------------------------------------------
  4180                                  PutConsoleHexWord       push    eax
  4181                                                          shr     eax,8
  4182                                                          call    PutConsoleHexByte
  4183                                                          pop     eax
  4184                                                          call    PutConsoleHexByte
  4185                                                          ret
  4186                                  ;-----------------------------------------------------------------------------------------------------------------------
  4187                                  ;
  4188                                  ;       Routine:        PutConsoleOIAChar
  4189                                  ;
  4190                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4191                                  ;
  4192                                  ;       In:             DS      OS data selector
  4193                                  ;
  4194                                  ;-----------------------------------------------------------------------------------------------------------------------
  4195                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4196                                                          push    ecx                                             ;
  4197                                                          push    esi                                             ;
  4198                                                          push    ds                                              ;
  4199                                                          push    es                                              ;
  4200                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4201                                                          pop     ds                                              ;... into data segment register
  4202                                                          push    EGDTCGA                                         ;load CGA selector ...
  4203                                                          pop     es                                              ;... into extra segment register
  4204                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4205                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4206                                                          mov     bl,0                                            ;starting column
  4207                                                          mov     ecx,6                                           ;maximum scan codes
  4208                                  .10                     push    ecx                                             ;save remaining count
  4209                                                          mov     ecx,ebx                                         ;row, column
  4210                                                          lodsb                                                   ;read scan code
  4211                                                          or      al,al                                           ;scan code present?
  4212                                                          jz      .20                                             ;no, skip ahead
  4213                                                          call    PutConsoleHexByte                               ;display scan code
  4214                                                          jmp     .30                                             ;continue
  4215                                  .20                     mov     al,' '                                          ;ASCII space
  4216                                                          call    SetConsoleChar                                  ;display space
  4217                                                          mov     al,' '                                          ;ASCII space
  4218                                                          call    SetConsoleChar                                  ;display space
  4219                                  .30                     add     bl,2                                            ;next column (+2)
  4220                                                          pop     ecx                                             ;restore remaining
  4221                                                          loop    .10                                             ;next code
  4222                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4223                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4224                                                          jb      .40                                             ;no, skip ahead
  4225                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4226                                                          ja      .40                                             ;no, skip ahead
  4227                                                          mov     ch,bh                                           ;OIA row
  4228                                                          mov     cl,40                                           ;character display column
  4229                                                          call    SetConsoleChar                                  ;display ASCII character
  4230                                  .40                     pop     es                                              ;restore non-volatile regs
  4231                                                          pop     ds                                              ;
  4232                                                          pop     esi                                             ;
  4233                                                          pop     ecx                                             ;
  4234                                                          pop     ebx                                             ;
  4235                                                          ret                                                     ;return
  4236                                  ;-----------------------------------------------------------------------------------------------------------------------
  4237                                  ;
  4238                                  ;       Routine:        PutConsoleOIAShift
  4239                                  ;
  4240                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4241                                  ;
  4242                                  ;       In:             BL      shift flags
  4243                                  ;                       BH      lock flags
  4244                                  ;                       DS      OS data selector
  4245                                  ;
  4246                                  ;-----------------------------------------------------------------------------------------------------------------------
  4247                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4248                                                          push    es                                              ;
  4249                                                          push    EGDTCGA                                         ;load CGA selector ...
  4250                                                          pop     es                                              ;... into ES register
  4251                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4252                                                          mov     al,EASCIISPACE                                  ;space is default character
  4253                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4254                                                          jz      .10                                             ;no, skip ahead
  4255                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4256                                  .10                     mov     cl,14                                           ;indicator column
  4257                                                          call    SetConsoleChar                                  ;display ASCII character
  4258                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4259                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4260                                                          jz      .20                                             ;no, skip ahead
  4261                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4262                                  .20                     mov     cl,64                                           ;indicator column
  4263                                                          call    SetConsoleChar                                  ;display ASCII character
  4264                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4265                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4266                                                          jz      .30                                             ;no, skip ahead
  4267                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4268                                  .30                     mov     cl,15                                           ;indicator column
  4269                                                          call    SetConsoleChar                                  ;display ASCII character
  4270                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4271                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4272                                                          jz      .40                                             ;no, skip ahead
  4273                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4274                                  .40                     mov     cl,63                                           ;indicator column
  4275                                                          call    SetConsoleChar                                  ;display ASCII character
  4276                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4277                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4278                                                          jz      .50                                             ;no, skip ahead
  4279                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4280                                  .50                     mov     cl,16                                           ;indicator column
  4281                                                          call    SetConsoleChar                                  ;display ASCII character
  4282                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4283                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4284                                                          jz      .60                                             ;no, skip ahead
  4285                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4286                                  .60                     mov     cl,62                                           ;indicator column
  4287                                                          call    SetConsoleChar                                  ;display ASCII character
  4288                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4289                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4290                                                          jz      .70                                             ;no, skip ahead
  4291                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4292                                  .70                     mov     cl,78                                           ;indicator column
  4293                                                          call    SetConsoleChar                                  ;display ASCII character
  4294                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4295                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4296                                                          jz      .80                                             ;no, skip ahead
  4297                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4298                                  .80                     mov     cl,77                                           ;indicator column
  4299                                                          call    SetConsoleChar                                  ;display ASCII character
  4300                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4301                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4302                                                          jz      .90                                             ;no, skip ahead
  4303                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4304                                  .90                     mov     cl,76                                           ;indicator column
  4305                                                          call    SetConsoleChar                                  ;display ASCII character
  4306                                                          pop     es                                              ;restore non-volatile regs
  4307                                                          pop     ecx                                             ;
  4308                                                          ret                                                     ;return
  4309                                  ;-----------------------------------------------------------------------------------------------------------------------
  4310                                  ;
  4311                                  ;       Routine:        PutConsoleString
  4312                                  ;
  4313                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4314                                  ;                       console position as needed.
  4315                                  ;
  4316                                  ;       In:             EDX     source address
  4317                                  ;                       DS      OS data selector
  4318                                  ;
  4319                                  ;-----------------------------------------------------------------------------------------------------------------------
  4320                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4321                                                          mov     esi,edx                                         ;source address
  4322                                                          cld                                                     ;forward strings
  4323                                  .10                     lodsb                                                   ;ASCII character
  4324                                                          or      al,al                                           ;end of string?
  4325                                                          jz      .40                                             ;yes, skip ahead
  4326                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4327                                                          jne     .20                                             ;no, skip ahead
  4328                                                          call    FirstConsoleColumn                              ;move to start of row
  4329                                                          jmp     .10                                             ;next character
  4330                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4331                                                          jne     .30                                             ;no, skip ahead
  4332                                                          call    NextConsoleRow                                  ;move to next row
  4333                                                          jmp     .10                                             ;next character
  4334                                  .30                     call    PutConsoleChar                                  ;output character to console
  4335                                                          call    NextConsoleColumn                               ;advance to next column
  4336                                                          jmp     .10                                             ;next character
  4337                                  .40                     pop     esi                                             ;restore non-volatile regs
  4338                                                          ret                                                     ;return
  4339                                  ;-----------------------------------------------------------------------------------------------------------------------
  4340                                  ;
  4341                                  ;       Routine:        Yield
  4342                                  ;
  4343                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4344                                  ;
  4345                                  ;-----------------------------------------------------------------------------------------------------------------------
  4346                                  Yield                   sti                                                     ;enable maskagle interrupts
  4347                                                          hlt                                                     ;halt until external interrupt
  4348                                                          ret                                                     ;return
  4349                                  ;=======================================================================================================================
  4350                                  ;
  4351                                  ;       Data-Type Conversion Helper Routines
  4352                                  ;
  4353                                  ;       DecimalToUnsigned
  4354                                  ;       HexadecimalToUnsigned
  4355                                  ;       UnsignedToDecimalString
  4356                                  ;       UnsignedToHexadecimal
  4357                                  ;
  4358                                  ;=======================================================================================================================
  4359                                  ;-----------------------------------------------------------------------------------------------------------------------
  4360                                  ;
  4361                                  ;       Routine:        DecimalToUnsigned
  4362                                  ;
  4363                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4364                                  ;
  4365                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4366                                  ;
  4367                                  ;       Output:         EAX     unsigned integer value
  4368                                  ;
  4369                                  ;-----------------------------------------------------------------------------------------------------------------------
  4370                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4371                                                          mov     esi,edx                                         ;source address
  4372                                                          xor     edx,edx                                         ;zero total
  4373                                  .10                     lodsb                                                   ;source byte
  4374                                                          cmp     al,','                                          ;comma?
  4375                                                          je      .10                                             ;yes, ignore
  4376                                                          test    al,al                                           ;end of string?
  4377                                                          jz      .30                                             ;yes, done
  4378                                                          cmp     al,'.'                                          ;decimal point?
  4379                                                          je      .30                                             ;yes, done
  4380                                                          cmp     al,'0'                                          ;numeral?
  4381                                                          jb      .20                                             ;no, invalid string
  4382                                                          cmp     al,'9'                                          ;numeral?
  4383                                                          ja      .20                                             ;no, invalid string
  4384                                                          and     al,00Fh                                         ;mask ASCII zone
  4385                                                          push    eax                                             ;save numeral
  4386                                                          shl     edx,1                                           ;total * 2
  4387                                                          mov     eax,edx                                         ;total * 2
  4388                                                          shl     edx,2                                           ;total * 8
  4389                                                          add     edx,eax                                         ;total * 10
  4390                                                          pop     eax                                             ;restore numeral
  4391                                                          add     edx,eax                                         ;accumulate decimal digit
  4392                                                          xor     eax,eax                                         ;zero register
  4393                                                          jmp     .10                                             ;next
  4394                                  .20                     xor     edx,edx                                         ;zero result on error
  4395                                  .30                     mov     eax,edx                                         ;result
  4396                                                          pop     esi                                             ;restore non-volatile regs
  4397                                                          ret                                                     ;return
  4398                                  ;-----------------------------------------------------------------------------------------------------------------------
  4399                                  ;
  4400                                  ;       Routine:        HexadecimalToUnsigned
  4401                                  ;
  4402                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4403                                  ;
  4404                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4405                                  ;
  4406                                  ;       Output:         EAX     unsigned integer value
  4407                                  ;
  4408                                  ;-----------------------------------------------------------------------------------------------------------------------
  4409                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4410                                                          mov     esi,edx                                         ;source address
  4411                                                          xor     edx,edx                                         ;zero register
  4412                                  .10                     lodsb                                                   ;source byte
  4413                                                          test    al,al                                           ;end of string?
  4414                                                          jz      .30                                             ;yes, branch
  4415                                                          cmp     al,'9'                                          ;hexadecimal?
  4416                                                          jna     .20                                             ;no, skip ahead
  4417                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4418                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4419                                                          shl     edx,4                                           ;previous total x 16
  4420                                                          add     edx,eax                                         ;add prior value x 16
  4421                                                          jmp     .10                                             ;next
  4422                                  .30                     mov     eax,edx                                         ;result
  4423                                                          pop     esi                                             ;restore non-volatile regs
  4424                                                          ret                                                     ;return
  4425                                  ;-----------------------------------------------------------------------------------------------------------------------
  4426                                  ;
  4427                                  ;       Routine:        UnsignedToDecimalString
  4428                                  ;
  4429                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4430                                  ;
  4431                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4432                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4433                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4434                                  ;                       ECX     32-bit binary
  4435                                  ;                       DS:EDX  output buffer address
  4436                                  ;
  4437                                  ;-----------------------------------------------------------------------------------------------------------------------
  4438                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4439                                                          push    ecx                                             ;
  4440                                                          push    edi                                             ;
  4441                                                          push    es                                              ;
  4442                                                          push    ds                                              ;load data selector
  4443                                                          pop     es                                              ;... into extra segment reg
  4444                                                          mov     edi,edx                                         ;output buffer address
  4445                                                          and     bh,00001111b                                    ;zero internal flags
  4446                                                          mov     edx,ecx                                         ;binary
  4447                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4448                                                          call    .30                                             ;divide and store
  4449                                                          mov     ecx,100000000                                   ;10^8 divisor
  4450                                                          call    .10                                             ;divide and store
  4451                                                          mov     ecx,10000000                                    ;10^7 divisor
  4452                                                          call    .30                                             ;divide and store
  4453                                                          mov     ecx,1000000                                     ;10^6 divisor
  4454                                                          call    .30                                             ;divide and store
  4455                                                          mov     ecx,100000                                      ;10^5 divisor
  4456                                                          call    .10                                             ;divide and store
  4457                                                          mov     ecx,10000                                       ;10^4 divisor
  4458                                                          call    .30                                             ;divide and store
  4459                                                          mov     ecx,1000                                        ;10^3 divisor
  4460                                                          call    .30                                             ;divide and store
  4461                                                          mov     ecx,100                                         ;10^2 divisor
  4462                                                          call    .10                                             ;divide and store
  4463                                                          mov     ecx,10                                          ;10^2 divisor
  4464                                                          call    .30                                             ;divide and store
  4465                                                          mov     eax,edx                                         ;10^1 remainder
  4466                                                          call    .40                                             ;store
  4467                                                          xor     al,al                                           ;null terminator
  4468                                                          stosb
  4469                                                          pop     es                                              ;restore non-volatile regs
  4470                                                          pop     edi                                             ;
  4471                                                          pop     ecx                                             ;
  4472                                                          pop     ebx                                             ;
  4473                                                          ret                                                     ;return
  4474                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4475                                                          jz      .30                                             ;no, branch
  4476                                                          test    bh,00000001b                                    ;trim leading zeros?
  4477                                                          jz      .20                                             ;no, store delim
  4478                                                          test    bh,00010000b                                    ;non-zero found?
  4479                                                          jz      .30                                             ;no, branch
  4480                                  .20                     mov     al,','                                          ;delimiter
  4481                                                          stosb                                                   ;store delimiter
  4482                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4483                                                          xor     edx,edx                                         ;zero hi-order
  4484                                                          div     ecx                                             ;divide by power of 10
  4485                                                          test    al,al                                           ;zero?
  4486                                                          jz      .50                                             ;yes, branch
  4487                                                          or      bh,00010000b                                    ;non-zero found
  4488                                  .40                     or      al,30h                                          ;ASCII zone
  4489                                                          stosb                                                   ;store digit
  4490                                                          ret                                                     ;return
  4491                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4492                                                          jz      .40                                             ;no, store and continue
  4493                                                          test    bh,00010000b                                    ;non-zero found?
  4494                                                          jnz     .40                                             ;yes, store and continue
  4495                                                          ret                                                     ;return
  4496                                  ;-----------------------------------------------------------------------------------------------------------------------
  4497                                  ;
  4498                                  ;       Routine:        UnsignedToHexadecimal
  4499                                  ;
  4500                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4501                                  ;
  4502                                  ;       Input:          DS:EDX  output buffer address
  4503                                  ;                       ECX     32-bit binary
  4504                                  ;
  4505                                  ;-----------------------------------------------------------------------------------------------------------------------
  4506                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4507                                                          mov     edi,edx                                         ;output buffer address
  4508                                                          mov     edx,ecx                                         ;32-bit unsigned
  4509                                                          xor     ecx,ecx                                         ;zero register
  4510                                                          mov     cl,8                                            ;nybble count
  4511                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4512                                                          mov     al,dl                                           ;????bbbb
  4513                                                          and     al,0fh                                          ;mask out bits 4-7
  4514                                                          or      al,30h                                          ;mask in ascii zone
  4515                                                          cmp     al,3ah                                          ;A through F?
  4516                                                          jb      .20                                             ;no, skip ahead
  4517                                                          add     al,7                                            ;41h through 46h
  4518                                  .20                     stosb                                                   ;store hexnum
  4519                                                          loop    .10                                             ;next nybble
  4520                                                          xor     al,al                                           ;zero reg
  4521                                                          stosb                                                   ;null terminate
  4522                                                          pop     edi                                             ;restore non-volatile regs
  4523                                                          ret                                                     ;return
  4524                                  ;=======================================================================================================================
  4525                                  ;
  4526                                  ;       Message Queue Helper Routines
  4527                                  ;
  4528                                  ;       GetMessage
  4529                                  ;       PutMessage
  4530                                  ;
  4531                                  ;=======================================================================================================================
  4532                                  ;-----------------------------------------------------------------------------------------------------------------------
  4533                                  ;
  4534                                  ;       Routine:        GetMessage
  4535                                  ;
  4536                                  ;       Description:    This routine reads and removes a message from the message queue.
  4537                                  ;
  4538                                  ;       Out:            EAX     lo-order message data
  4539                                  ;                       EDX     hi-order message data
  4540                                  ;
  4541                                  ;                       CY      0 = message read
  4542                                  ;                               1 = no message to read
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4546                                                          push    ecx                                             ;
  4547                                                          push    ds                                              ;
  4548                                                          push    ELDTMQ                                          ;load message queue selector ...
  4549                                                          pop     ds                                              ;... into data segment register
  4550                                                          mov     ebx,[MQHead]                                    ;head ptr
  4551                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4552                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4553                                                          or      eax,edx                                         ;is queue empty?
  4554                                                          stc                                                     ;assume queue is emtpy
  4555                                                          jz      .20                                             ;yes, skip ahead
  4556                                                          xor     ecx,ecx                                         ;store zero
  4557                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4558                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4559                                                          add     ebx,8                                           ;next queue element
  4560                                                          and     ebx,03fch                                       ;at end of queue?
  4561                                                          jnz     .10                                             ;no, skip ahead
  4562                                                          mov     bl,8                                            ;reset to 1st entry
  4563                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4564                                                          clc                                                     ;indicate message read
  4565                                  .20                     pop     ds                                              ;restore non-volatile regs
  4566                                                          pop     ecx                                             ;
  4567                                                          pop     ebx                                             ;
  4568                                                          ret                                                     ;return
  4569                                  ;-----------------------------------------------------------------------------------------------------------------------
  4570                                  ;
  4571                                  ;       Routine:        PutMessage
  4572                                  ;
  4573                                  ;       Description:    This routine adda a message to the message queue.
  4574                                  ;
  4575                                  ;       In:             ECX     hi-order data word
  4576                                  ;                       EDX     lo-order data word
  4577                                  ;
  4578                                  ;       Out:            CY      0 = success
  4579                                  ;                               1 = fail: queue is full
  4580                                  ;
  4581                                  ;-----------------------------------------------------------------------------------------------------------------------
  4582                                  PutMessage              push    ds                                              ;save non-volatile regs
  4583                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4584                                                          pop     ds                                              ;... into data segment register
  4585                                                          mov     eax,[MQTail]                                    ;tail ptr
  4586                                                          cmp     dword [eax],0                                   ;is queue full?
  4587                                                          stc                                                     ;assume failure
  4588                                                          jne     .20                                             ;yes, cannot store
  4589                                                          mov     [eax],edx                                       ;store lo-order data
  4590                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4591                                                          add     eax,8                                           ;next queue element adr
  4592                                                          and     eax,03fch                                       ;at end of queue?
  4593                                                          jnz     .10                                             ;no, skip ahead
  4594                                                          mov     al,8                                            ;reset to top of queue
  4595                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4596                                                          clc                                                     ;indicate success
  4597                                  .20                     pop     ds                                              ;restore non-volatile regs
  4598                                                          ret                                                     ;return
  4599                                  ;=======================================================================================================================
  4600                                  ;
  4601                                  ;       Memory-Mapped Video Routines
  4602                                  ;
  4603                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4604                                  ;
  4605                                  ;       ClearConsoleScreen
  4606                                  ;       ScrollConsoleRow
  4607                                  ;       SetConsoleChar
  4608                                  ;       SetConsoleString
  4609                                  ;
  4610                                  ;=======================================================================================================================
  4611                                  ;-----------------------------------------------------------------------------------------------------------------------
  4612                                  ;
  4613                                  ;       Routine:        ClearConsoleScreen
  4614                                  ;
  4615                                  ;       Description:    This routine clears the console (CGA) screen.
  4616                                  ;
  4617                                  ;-----------------------------------------------------------------------------------------------------------------------
  4618                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4619                                                          push    edi                                             ;
  4620                                                          push    ds                                              ;
  4621                                                          push    es                                              ;
  4622                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4623                                                          pop     ds                                              ;... into DS register
  4624                                                          push    EGDTCGA                                         ;load CGA selector ...
  4625                                                          pop     es                                              ;... into ES register
  4626                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4627                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4628                                                          xor     edi,edi                                         ;target offset
  4629                                                          cld                                                     ;forward strings
  4630                                                          rep     stosd                                           ;reset screen body
  4631                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4632                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4633                                                          rep     stosd                                           ;reset OIA line
  4634                                                          xor     al,al                                           ;zero register
  4635                                                          mov     [wbConsoleRow],al                               ;reset console row
  4636                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4637                                                          call    PlaceCursor                                     ;place cursor at current position
  4638                                                          pop     es                                              ;restore non-volatile regs
  4639                                                          pop     ds                                              ;
  4640                                                          pop     edi                                             ;
  4641                                                          pop     ecx                                             ;
  4642                                                          ret                                                     ;return
  4643                                  ;-----------------------------------------------------------------------------------------------------------------------
  4644                                  ;
  4645                                  ;       Routine:        ScrollConsoleRow
  4646                                  ;
  4647                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4648                                  ;
  4649                                  ;-----------------------------------------------------------------------------------------------------------------------
  4650                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4651                                                          push    esi                                             ;
  4652                                                          push    edi                                             ;
  4653                                                          push    ds                                              ;
  4654                                                          push    es                                              ;
  4655                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4656                                                          pop     ds                                              ;... into DS
  4657                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4658                                                          pop     es                                              ;... into ES
  4659                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4660                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4661                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4662                                                          cld                                                     ;forward strings
  4663                                                          rep     movsd                                           ;move 24 lines up
  4664                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4665                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4666                                                          rep     stosd                                           ;clear bottom row
  4667                                                          pop     es                                              ;restore non-volatile regs
  4668                                                          pop     ds                                              ;
  4669                                                          pop     edi                                             ;
  4670                                                          pop     esi                                             ;
  4671                                                          pop     ecx                                             ;
  4672                                                          ret                                                     ;return
  4673                                  ;-----------------------------------------------------------------------------------------------------------------------
  4674                                  ;
  4675                                  ;       Routine:        SetConsoleChar
  4676                                  ;
  4677                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4678                                  ;
  4679                                  ;       In:             AL      ASCII character
  4680                                  ;                       CL      column
  4681                                  ;                       CH      row
  4682                                  ;                       ES      CGA selector
  4683                                  ;
  4684                                  ;       Out:            EAX     last target address written (ES:)
  4685                                  ;                       CL      column + 1
  4686                                  ;
  4687                                  ;-----------------------------------------------------------------------------------------------------------------------
  4688                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4689                                                          movzx   eax,ch                                          ;row
  4690                                                          mov     ah,ECONCOLS                                     ;cols/row
  4691                                                          mul     ah                                              ;row * cols/row
  4692                                                          add     al,cl                                           ;add column
  4693                                                          adc     ah,0                                            ;handle carry
  4694                                                          shl     eax,1                                           ;screen offset
  4695                                                          mov     [es:eax],dl                                     ;store character
  4696                                                          inc     cl                                              ;next column
  4697                                                          ret                                                     ;return
  4698                                  ;-----------------------------------------------------------------------------------------------------------------------
  4699                                  ;
  4700                                  ;       Routine:        SetConsoleString
  4701                                  ;
  4702                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4703                                  ;
  4704                                  ;       In:             ESI     source offset (DS:)
  4705                                  ;                       CL      column
  4706                                  ;                       CH      row
  4707                                  ;                       ES      CGA selector
  4708                                  ;
  4709                                  ;-----------------------------------------------------------------------------------------------------------------------
  4710                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4711                                                          cld                                                     ;forward strings
  4712                                  .10                     lodsb                                                   ;next ASCII character
  4713                                                          test    al,al                                           ;end of string?
  4714                                                          jz      .20                                             ;yes, branch
  4715                                                          call    SetConsoleChar                                  ;store character
  4716                                                          jmp     .10                                             ;continue
  4717                                  .20                     pop     esi                                             ;restore non-volatile regs
  4718                                                          ret                                                     ;return
  4719                                  ;=======================================================================================================================
  4720                                  ;
  4721                                  ;       Input/Output Routines
  4722                                  ;
  4723                                  ;       These routines read and/or write directly to ports.
  4724                                  ;
  4725                                  ;       PlaceCursor
  4726                                  ;       PutPrimaryEndOfInt
  4727                                  ;       PutSecondaryEndOfInt
  4728                                  ;       ReadRealTimeClock
  4729                                  ;       ResetSystem
  4730                                  ;       SetKeyboardLamps
  4731                                  ;       WaitForKeyInBuffer
  4732                                  ;       WaitForKeyOutBuffer
  4733                                  ;
  4734                                  ;=======================================================================================================================
  4735                                  ;-----------------------------------------------------------------------------------------------------------------------
  4736                                  ;
  4737                                  ;       Routine:        PlaceCursor
  4738                                  ;
  4739                                  ;       Description:    This routine positions the cursor on the console.
  4740                                  ;
  4741                                  ;       In:             DS      OS data selector
  4742                                  ;
  4743                                  ;-----------------------------------------------------------------------------------------------------------------------
  4744                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4745                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4746                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4747                                                          mul     ah                                              ;row offset
  4748                                                          add     al,[wbConsoleColumn]                            ;add column
  4749                                                          adc     ah,0                                            ;add overflow
  4750                                                          mov     ecx,eax                                         ;screen offset
  4751                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4752                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4753                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4754                                                          out     dx,al                                           ;select register
  4755                                                          inc     edx                                             ;data port
  4756                                                          mov     al,ch                                           ;hi-order cursor loc
  4757                                                          out     dx,al                                           ;store hi-order loc
  4758                                                          dec     edx                                             ;register select port
  4759                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4760                                                          out     dx,al                                           ;select register
  4761                                                          inc     edx                                             ;data port
  4762                                                          mov     al,cl                                           ;lo-order cursor loc
  4763                                                          out     dx,al                                           ;store lo-order loc
  4764                                                          pop     ecx                                             ;restore non-volatile regs
  4765                                                          ret                                                     ;return
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ;
  4768                                  ;       Routine:        PutPrimaryEndOfInt
  4769                                  ;
  4770                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4771                                  ;
  4772                                  ;-----------------------------------------------------------------------------------------------------------------------
  4773                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4774                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4775                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4776                                                          ret                                                     ;return
  4777                                  ;-----------------------------------------------------------------------------------------------------------------------
  4778                                  ;
  4779                                  ;       Routine:        PutSecondaryEndOfInt
  4780                                  ;
  4781                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4782                                  ;
  4783                                  ;-----------------------------------------------------------------------------------------------------------------------
  4784                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4785                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4786                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4787                                                          ret                                                     ;return
  4788                                  ;-----------------------------------------------------------------------------------------------------------------------
  4789                                  ;
  4790                                  ;       Routine:        ReadRealTimeClock
  4791                                  ;
  4792                                  ;       Description:    This routine gets current date time from the real-time clock.
  4793                                  ;
  4794                                  ;       In:             DS:EBX  DATETIME structure
  4795                                  ;
  4796                                  ;-----------------------------------------------------------------------------------------------------------------------
  4797                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4798                                                          push    edi                                             ;
  4799                                                          push    es                                              ;
  4800                                                          push    ds                                              ;store data selector ...
  4801                                                          pop     es                                              ;... in es register
  4802                                                          mov     edi,ebx                                         ;date-time structure
  4803                                                          mov     al,ERTCSECONDREG                                ;second register
  4804                                                          out     ERTCREGPORT,al                                  ;select second register
  4805                                                          in      al,ERTCDATAPORT                                 ;read second register
  4806                                                          cld                                                     ;forward strings
  4807                                                          stosb                                                   ;store second value
  4808                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4809                                                          out     ERTCREGPORT,al                                  ;select minute register
  4810                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4811                                                          stosb                                                   ;store minute value
  4812                                                          mov     al,ERTCHOURREG                                  ;hour register
  4813                                                          out     ERTCREGPORT,al                                  ;select hour register
  4814                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4815                                                          stosb                                                   ;store hour value
  4816                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4817                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4818                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4819                                                          stosb                                                   ;store weekday value
  4820                                                          mov     al,ERTCDAYREG                                   ;day register
  4821                                                          out     ERTCREGPORT,al                                  ;select day register
  4822                                                          in      al,ERTCDATAPORT                                 ;read day register
  4823                                                          stosb                                                   ;store day value
  4824                                                          mov     al,ERTCMONTHREG                                 ;month register
  4825                                                          out     ERTCREGPORT,al                                  ;select month register
  4826                                                          in      al,ERTCDATAPORT                                 ;read month register
  4827                                                          stosb                                                   ;store month value
  4828                                                          mov     al,ERTCYEARREG                                  ;year register
  4829                                                          out     ERTCREGPORT,al                                  ;select year register
  4830                                                          in      al,ERTCDATAPORT                                 ;read year register
  4831                                                          stosb                                                   ;store year value
  4832                                                          mov     al,ERTCCENTURYREG                               ;century register
  4833                                                          out     ERTCREGPORT,al                                  ;select century register
  4834                                                          in      al,ERTCDATAPORT                                 ;read century register
  4835                                                          stosb                                                   ;store century value
  4836                                                          mov     al,ERTCSTATUSREG                                ;status register
  4837                                                          out     ERTCREGPORT,al                                  ;select status register
  4838                                                          in      al,ERTCDATAPORT                                 ;read status register
  4839                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4840                                                          jnz     .20                                             ;skip ahead if binary values
  4841                                                          mov     esi,ebx                                         ;date-time structure address
  4842                                                          mov     edi,ebx                                         ;date-time structure address
  4843                                                          mov     ecx,8                                           ;loop counter
  4844                                  .10                     lodsb                                                   ;BCD value
  4845                                                          mov     ah,al                                           ;BCD value
  4846                                                          and     al,00001111b                                    ;low-order decimal zone
  4847                                                          and     ah,11110000b                                    ;hi-order decimal zone
  4848                                                          shr     ah,1                                            ;hi-order decimal * 8
  4849                                                          add     al,ah                                           ;low-order + hi-order * 8
  4850                                                          shr     ah,2                                            ;hi-order decimal * 2
  4851                                                          add     al,ah                                           ;low-order + hi-order * 10
  4852                                                          stosb                                                   ;replace BCD with binary
  4853                                                          loop    .10                                             ;next value
  4854                                  .20                     pop     es                                              ;restore non-volatile regs
  4855                                                          pop     edi                                             ;
  4856                                                          pop     esi                                             ;
  4857                                                          ret                                                     ;return
  4858                                  ;-----------------------------------------------------------------------------------------------------------------------
  4859                                  ;
  4860                                  ;       Routine:        ResetSystem
  4861                                  ;
  4862                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4863                                  ;
  4864                                  ;       Out:            N/A     This routine does not return.
  4865                                  ;
  4866                                  ;-----------------------------------------------------------------------------------------------------------------------
  4867                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4868                                                          loop    $                                               ;clear interrupts
  4869                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4870                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4871                                  .10                     sti                                                     ;enable maskable interrupts
  4872                                                          hlt                                                     ;halt until interrupt
  4873                                                          jmp     .10                                             ;repeat until reset kicks in
  4874                                  ;-----------------------------------------------------------------------------------------------------------------------
  4875                                  ;
  4876                                  ;       Routine:        SetKeyboardLamps
  4877                                  ;
  4878                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4879                                  ;
  4880                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4881                                  ;
  4882                                  ;-----------------------------------------------------------------------------------------------------------------------
  4883                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4884                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4885                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4886                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4887                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4888                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4889                                                          mov     al,bh                                           ;set/reset lamps value
  4890                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4891                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4892                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4893                                                          ret                                                     ;return
  4894                                  ;-----------------------------------------------------------------------------------------------------------------------
  4895                                  ;
  4896                                  ;       Routine:        WaitForKeyInBuffer
  4897                                  ;
  4898                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4899                                  ;
  4900                                  ;       Out:            ZF      1 = Input buffer ready
  4901                                  ;                               0 = Input buffer not ready after timeout
  4902                                  ;
  4903                                  ;-----------------------------------------------------------------------------------------------------------------------
  4904                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4905                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4906                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4907                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4908                                                          loopnz  .10                                             ;yes, repeat till timeout
  4909                                                          pop     ecx                                             ;restore non-volatile regs
  4910                                                          ret                                                     ;return
  4911                                  ;-----------------------------------------------------------------------------------------------------------------------
  4912                                  ;
  4913                                  ;       Routine:        WaitForKeyOutBuffer
  4914                                  ;
  4915                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4916                                  ;
  4917                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4918                                  ;                               0 = Output buffer empty after timeout
  4919                                  ;
  4920                                  ;-----------------------------------------------------------------------------------------------------------------------
  4921                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4922                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4923                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4924                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  4925                                                          loopz   .10                                             ;loop until output buffer bit
  4926                                                          pop     ecx                                             ;restore non-volatile regs
  4927                                                          ret                                                     ;return
  4928                                  ;-----------------------------------------------------------------------------------------------------------------------
  4929                                  ;
  4930                                  ;       End of the Kernel Function Library
  4931                                  ;
  4932                                  ;-----------------------------------------------------------------------------------------------------------------------
  4933                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  4934                                  ;=======================================================================================================================
  4935                                  ;
  4936                                  ;       Console Task
  4937                                  ;
  4938                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4939                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4940                                  ;       screen and responds to user commands.
  4941                                  ;
  4942                                  ;=======================================================================================================================
  4943                                  ;-----------------------------------------------------------------------------------------------------------------------
  4944                                  ;
  4945                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4946                                  ;
  4947                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4948                                  ;
  4949                                  ;-----------------------------------------------------------------------------------------------------------------------
  4950                                  section                 constack                                                ;console task stack
  4951                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  4952                                  ;-----------------------------------------------------------------------------------------------------------------------
  4953                                  ;
  4954                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4955                                  ;
  4956                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4957                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4958                                  ;       16 descriptors. Six are initially defined.
  4959                                  ;
  4960                                  ;-----------------------------------------------------------------------------------------------------------------------
  4961                                  section                 conldt                                                  ;console local descriptors
  4962                                                          dq      004093004780007Fh                               ;04 TSS alias
  4963                                                          dq      004093004700007Fh                               ;0c LDT alias
  4964                                                          dq      00409300400006FFh                               ;14 stack
  4965                                                          dq      00CF93000000FFFFh                               ;1c data
  4966                                                          dq      00409B0050000FFFh                               ;24 code
  4967                                                          dq      00409300480007FFh                               ;2c message queue
  4968                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4969                                  ;-----------------------------------------------------------------------------------------------------------------------
  4970                                  ;
  4971                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4972                                  ;
  4973                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4974                                  ;       segment. CS to console code.
  4975                                  ;
  4976                                  ;-----------------------------------------------------------------------------------------------------------------------
  4977                                  section                 contss                                                  ;console task state segment
  4978                                                          dd      0                                               ;00 back-link tss
  4979                                                          dd      0700h                                           ;04 esp ring 0
  4980                                                          dd      0014h                                           ;08 ss ring 0
  4981                                                          dd      0700h                                           ;0c esp ring 1
  4982                                                          dd      0014h                                           ;10 es ring 1
  4983                                                          dd      0700h                                           ;14 esp ring 2
  4984                                                          dd      0014h                                           ;18 ss ring 2
  4985                                                          dd      0                                               ;1c cr ring 3
  4986                                                          dd      0                                               ;20 eip
  4987                                                          dd      0200h                                           ;24 eflags
  4988                                                          dd      0                                               ;28 eax
  4989                                                          dd      0                                               ;2c ecx
  4990                                                          dd      0                                               ;30 edx
  4991                                                          dd      0                                               ;34 ebx
  4992                                                          dd      0700h                                           ;38 esp ring 3
  4993                                                          dd      0                                               ;3c ebp
  4994                                                          dd      0                                               ;40 esi
  4995                                                          dd      0                                               ;44 edi
  4996                                                          dd      001Ch                                           ;48 es
  4997                                                          dd      0024h                                           ;4c cs
  4998                                                          dd      0014h                                           ;50 ss ring 3
  4999                                                          dd      001Ch                                           ;54 ds
  5000                                                          dd      0                                               ;58 fs
  5001                                                          dd      0                                               ;5c gs
  5002                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5003                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5004                                  ;-----------------------------------------------------------------------------------------------------------------------
  5005                                  ;
  5006                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5007                                  ;
  5008                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5009                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5010                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5011                                  ;       event.
  5012                                  ;
  5013                                  ;-----------------------------------------------------------------------------------------------------------------------
  5014                                  section                 conmque                                                 ;console message queue
  5015                                                          dd      8                                               ;head pointer
  5016                                                          dd      8                                               ;tail pointer
  5017                                                          times   510 dd 0                                        ;queue elements
  5018                                  ;-----------------------------------------------------------------------------------------------------------------------
  5019                                  ;
  5020                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5021                                  ;
  5022                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5023                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5024                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5025                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5026                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5027                                  ;       board input, echoing to the console screen and responding to user commands.
  5028                                  ;
  5029                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5030                                  ;
  5031                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5032                                  ;                               |  Real Mode Interrupt Vectors                  |
  5033                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5034                                  ;                               |  Reserved BIOS Memory Area                    |
  5035                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5036                                  ;                               |  Shared Kernel Memory Area                    |
  5037                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5038                                  ;                               |  Global Descriptor Table (GDT)                |
  5039                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5040                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5041                                  ;                       002000  +-----------------------------------------------+
  5042                                  ;                               |  Interrupt Handlers                           |
  5043                                  ;                               |  Kernel Function Library                      |
  5044                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5045                                  ;                               |  Console Task Stack Area                      |
  5046                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5047                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5048                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5049                                  ;                               |  Console Task Task State Segment (TSS)        |
  5050                                  ;                       004800  +-----------------------------------------------+
  5051                                  ;                               |  Console Task Message Queue                   |
  5052                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5053                                  ;                               |  Console Task Code                            |
  5054                                  ;                               |  Console Task Constants                       |
  5055                                  ;                       006000  +===============================================+
  5056                                  ;
  5057                                  ;-----------------------------------------------------------------------------------------------------------------------
  5058                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5059                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5060                                  
  5061                                                          clearConsoleScreen                                      ;clear the console screen
  5062                                                          putConsoleString czTitle                                ;display startup message
  5063                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5064                                                          placeCursor                                             ;set CRT cursor location
  5065                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5066                                                          putConsoleString czNewLine                              ;newline
  5067                                  
  5068                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5069                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5070                                                          call    ConTakeToken                                    ;handle console input
  5071                                                          mov     edx,wzConsoleToken                              ;token buffer
  5072                                                          call    ConDetermineCommand                             ;determine command number
  5073                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5074                                                          jb      .20                                             ;yes, branch
  5075                                  
  5076                                                          putConsoleString czUnknownCommand                       ;display error message
  5077                                  
  5078                                                          jmp     .10                                             ;next command
  5079                                  .20                     shl     eax,2                                           ;index into jump table
  5080                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5081                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5082                                                          call    eax                                             ;call command handler
  5083                                                          jmp     .10                                             ;next command
  5084                                  ;-----------------------------------------------------------------------------------------------------------------------
  5085                                  ;
  5086                                  ;       Routine:        ConInitializeData
  5087                                  ;
  5088                                  ;       Description:    This routine initializes console task variables.
  5089                                  ;
  5090                                  ;-----------------------------------------------------------------------------------------------------------------------
  5091                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5092                                                          push    edi                                             ;
  5093                                                          push    es                                              ;
  5094                                  ;
  5095                                  ;       Initialize console work areas.
  5096                                  ;
  5097                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5098                                                          pop     es                                              ;... into extra segment register
  5099                                                          mov     edi,ECONDATA                                    ;OS console data address
  5100                                                          xor     al,al                                           ;initialization value
  5101                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5102                                                          cld                                                     ;forward strings
  5103                                                          rep     stosb                                           ;initialize data
  5104                                  ;
  5105                                  ;       Initialize heap size
  5106                                  ;
  5107                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5108                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5109                                  ;
  5110                                  ;       Initialize MEMROOT structure
  5111                                  ;
  5112                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5113                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5114                                                          xor     ecx,ecx                                         ;zero register
  5115                                                          mov     cl,4                                            ;count
  5116                                                          rep     stosd                                           ;store first/last contig and free addrs
  5117                                                          xor     eax,eax                                         ;zero register
  5118                                                          stosd                                                   ;zero first task block
  5119                                                          stosd                                                   ;zero last task block
  5120                                  ;
  5121                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5122                                  ;
  5123                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5124                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5125                                                          stosd                                                   ;store signature
  5126                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5127                                                          stosd                                                   ;store block size
  5128                                                          xor     ecx,ecx                                         ;zero register
  5129                                                          mov     cl,6                                            ;count
  5130                                                          xor     eax,eax                                         ;zero register
  5131                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5132                                  ;
  5133                                  ;       Restore and return.
  5134                                  ;
  5135                                                          pop     es                                              ;restore non-volatile regs
  5136                                                          pop     edi                                             ;
  5137                                                          pop     ecx                                             ;
  5138                                                          ret                                                     ;return
  5139                                  ;-----------------------------------------------------------------------------------------------------------------------
  5140                                  ;
  5141                                  ;       Routine:        ConTakeToken
  5142                                  ;
  5143                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5144                                  ;
  5145                                  ;       In:             DS:EDX  source buffer address
  5146                                  ;                       DS:EBX  target buffer address
  5147                                  ;
  5148                                  ;       Out:            DS:EDX  source buffer address
  5149                                  ;                       DS:EBX  target buffer address
  5150                                  ;
  5151                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5152                                  ;
  5153                                  ;-----------------------------------------------------------------------------------------------------------------------
  5154                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5155                                                          push    edi                                             ;
  5156                                                          push    es                                              ;
  5157                                                          push    ds                                              ;load data segment selector ...
  5158                                                          pop     es                                              ;... into extra segment reg
  5159                                                          mov     esi,edx                                         ;source buffer address
  5160                                                          mov     edi,ebx                                         ;target buffer address
  5161                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5162                                                          cld                                                     ;forward strings
  5163                                  .10                     lodsb                                                   ;load byte
  5164                                                          cmp     al,EASCIISPACE                                  ;space?
  5165                                                          je      .10                                             ;yes, continue
  5166                                                          test    al,al                                           ;end of line?
  5167                                                          jz      .40                                             ;yes, branch
  5168                                  .20                     stosb                                                   ;store byte
  5169                                                          lodsb                                                   ;load byte
  5170                                                          test    al,al                                           ;end of line?
  5171                                                          jz      .40                                             ;no, continue
  5172                                                          cmp     al,EASCIISPACE                                  ;space?
  5173                                                          jne     .20                                             ;no, continue
  5174                                  .30                     lodsb                                                   ;load byte
  5175                                                          cmp     al,EASCIISPACE                                  ;space?
  5176                                                          je      .30                                             ;yes, continue
  5177                                                          dec     esi                                             ;pre-position
  5178                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5179                                                          mov     edi,edx                                         ;source buffer address
  5180                                  .50                     lodsb                                                   ;remaining byte
  5181                                                          stosb                                                   ;move to front of buffer
  5182                                                          test    al,al                                           ;end of line?
  5183                                                          jnz     .50                                             ;no, continue
  5184                                                          pop     es                                              ;restore non-volatile regs
  5185                                                          pop     edi                                             ;
  5186                                                          pop     esi                                             ;
  5187                                                          ret                                                     ;return
  5188                                  ;-----------------------------------------------------------------------------------------------------------------------
  5189                                  ;
  5190                                  ;       Routine:        ConDetermineCommand
  5191                                  ;
  5192                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5193                                  ;
  5194                                  ;       input:          DS:EDX  command address
  5195                                  ;
  5196                                  ;       output:         EAX     >=0     = command nbr
  5197                                  ;                               0       = unknown command
  5198                                  ;
  5199                                  ;-----------------------------------------------------------------------------------------------------------------------
  5200                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5201                                                          push    ecx                                             ;
  5202                                                          push    esi                                             ;
  5203                                                          push    edi                                             ;
  5204                                  
  5205                                                          upperCaseString                                         ;upper-case string at EDX
  5206                                  
  5207                                                          mov     esi,tConCmdTbl                                  ;commands table
  5208                                                          xor     edi,edi                                         ;intialize command number
  5209                                                          cld                                                     ;forward strings
  5210                                  .10                     lodsb                                                   ;command length
  5211                                                          movzx   ecx,al                                          ;command length
  5212                                                          jecxz   .20                                             ;branch if end of table
  5213                                                          mov     ebx,esi                                         ;table entry address
  5214                                                          add     esi,ecx                                         ;next table entry address
  5215                                  
  5216                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5217                                  
  5218                                                          jecxz   .20                                             ;branch if equal
  5219                                                          inc     edi                                             ;increment command nbr
  5220                                                          jmp     .10                                             ;repeat
  5221                                  .20                     mov     eax,edi                                         ;command number
  5222                                                          pop     edi                                             ;restore non-volatile regs
  5223                                                          pop     esi                                             ;
  5224                                                          pop     ecx                                             ;
  5225                                                          pop     ebx                                             ;
  5226                                                          ret                                                     ;return
  5227                                  ;-----------------------------------------------------------------------------------------------------------------------
  5228                                  ;
  5229                                  ;       Routine:        ConClear
  5230                                  ;
  5231                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5232                                  ;
  5233                                  ;-----------------------------------------------------------------------------------------------------------------------
  5234                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5235                                                          ret                                                     ;return
  5236                                  ;-----------------------------------------------------------------------------------------------------------------------
  5237                                  ;
  5238                                  ;       Routine:        ConDate
  5239                                  ;
  5240                                  ;       Description:    This routine handles the DATE command.
  5241                                  ;
  5242                                  ;-----------------------------------------------------------------------------------------------------------------------
  5243                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5244                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5245                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5246                                                          putConsoleString  czNewLine                             ;write newline to console
  5247                                                          ret                                                     ;return
  5248                                  ;-----------------------------------------------------------------------------------------------------------------------
  5249                                  ;
  5250                                  ;       Routine:        ConDay
  5251                                  ;
  5252                                  ;       Description:    This routine handles the DAY command.
  5253                                  ;
  5254                                  ;-----------------------------------------------------------------------------------------------------------------------
  5255                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5256                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5257                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5258                                                          putConsoleString  czNewLine                             ;write newline to console
  5259                                                          ret                                                     ;return
  5260                                  ;-----------------------------------------------------------------------------------------------------------------------
  5261                                  ;
  5262                                  ;       Routine:        ConExit
  5263                                  ;
  5264                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5265                                  ;
  5266                                  ;-----------------------------------------------------------------------------------------------------------------------
  5267                                  ConExit                 resetSystem                                             ;issue system reset
  5268                                                          ret                                                     ;return
  5269                                  ;-----------------------------------------------------------------------------------------------------------------------
  5270                                  ;
  5271                                  ;       Routine:        ConFree
  5272                                  ;
  5273                                  ;       Description:    This routine handles the FREE command.
  5274                                  ;
  5275                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5276                                  ;
  5277                                  ;-----------------------------------------------------------------------------------------------------------------------
  5278                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5279                                                          push    ecx                                             ;
  5280                                                          push    esi                                             ;
  5281                                                          push    edi                                             ;
  5282                                  ;
  5283                                  ;       Get address parameter
  5284                                  ;
  5285                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5286                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5287                                                          call    ConTakeToken                                    ;take first param as token
  5288                                  ;
  5289                                  ;       Convert input parameter from hexadecimal string to binary
  5290                                  ;
  5291                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5292                                                          je      .10                                             ;no, branch
  5293                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5294                                  
  5295                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5296                                  
  5297                                                          test    eax,eax                                         ;valid parameter?
  5298                                                          jz      .10                                             ;no, branch
  5299                                  ;
  5300                                  ;       Free memory block
  5301                                  ;
  5302                                                          freeMemory eax                                          ;free memory
  5303                                  
  5304                                                          cmp     eax,-1                                          ;memory freed?
  5305                                                          je      .10                                             ;no, branch
  5306                                  ;
  5307                                  ;       Indicate memory freed
  5308                                  ;
  5309                                                          putConsoleString czOK                                   ;indicate success
  5310                                  ;
  5311                                  ;       Restore and return
  5312                                  ;
  5313                                  .10                     pop     edi                                             ;restore non-volatile regs
  5314                                                          pop     esi                                             ;
  5315                                                          pop     ecx                                             ;
  5316                                                          pop     ebx                                             ;
  5317                                                          ret                                                     ;return
  5318                                  ;-----------------------------------------------------------------------------------------------------------------------
  5319                                  ;
  5320                                  ;       Routine:        ConHour
  5321                                  ;
  5322                                  ;       Description:    This routine Handles the HOUR command.
  5323                                  ;
  5324                                  ;-----------------------------------------------------------------------------------------------------------------------
  5325                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5326                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5327                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5328                                                          putConsoleString  czNewLine                             ;write newline to console
  5329                                                          ret                                                     ;return
  5330                                  ;-----------------------------------------------------------------------------------------------------------------------
  5331                                  ;
  5332                                  ;       Routine:        ConInt6
  5333                                  ;
  5334                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5335                                  ;
  5336                                  ;-----------------------------------------------------------------------------------------------------------------------
  5337                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5338                                                          ret                                                     ;return (not executed)
  5339                                  ;-----------------------------------------------------------------------------------------------------------------------
  5340                                  ;
  5341                                  ;       Routine:        ConMalloc
  5342                                  ;
  5343                                  ;       Description:    This routine handles the MALLOC command.
  5344                                  ;
  5345                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5346                                  ;
  5347                                  ;-----------------------------------------------------------------------------------------------------------------------
  5348                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5349                                                          push    ecx                                             ;
  5350                                                          push    esi                                             ;
  5351                                                          push    edi                                             ;
  5352                                  ;
  5353                                  ;       Get size parameter
  5354                                  ;
  5355                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5356                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5357                                                          call    ConTakeToken                                    ;take first param as token
  5358                                  ;
  5359                                  ;       Convert input parameter from decimal string to binary
  5360                                  ;
  5361                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5362                                                          je      .10                                             ;no, branch
  5363                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5364                                  
  5365                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5366                                  
  5367                                                          test    eax,eax                                         ;valid parameter?
  5368                                                          jz      .10                                             ;no, branch
  5369                                  ;
  5370                                  ;       Allocate memory block
  5371                                  ;
  5372                                                          allocateMemory eax                                      ;allocate memory
  5373                                  
  5374                                                          test    eax,eax                                         ;memory allocated?
  5375                                                          jz      .10                                             ;no, branch
  5376                                  ;
  5377                                  ;       Report allocated memory block address
  5378                                  ;
  5379                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5380                                                          mov     ecx,eax                                         ;memory address
  5381                                  
  5382                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5383                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5384                                                          putConsoleString czNewLine                              ;display new line
  5385                                  
  5386                                  .10                     pop     edi                                             ;restore non-volatile regs
  5387                                                          pop     esi                                             ;
  5388                                                          pop     ecx                                             ;
  5389                                                          pop     ebx                                             ;
  5390                                                          ret                                                     ;return
  5391                                  ;-----------------------------------------------------------------------------------------------------------------------
  5392                                  ;
  5393                                  ;       Routine:        ConMem
  5394                                  ;
  5395                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5396                                  ;
  5397                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5398                                  ;
  5399                                  ;-----------------------------------------------------------------------------------------------------------------------
  5400                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5401                                                          push    esi                                             ;
  5402                                                          push    edi                                             ;
  5403                                  ;
  5404                                  ;                       update the source address if a parameter is given
  5405                                  ;
  5406                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5407                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5408                                                          call    ConTakeToken                                    ;take first param as token
  5409                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5410                                                          je      .10                                             ;no, branch
  5411                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5412                                  
  5413                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5414                                  
  5415                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5416                                  ;
  5417                                  ;                       setup source address and row count
  5418                                  ;
  5419                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5420                                                          xor     ecx,ecx                                         ;zero register
  5421                                                          mov     cl,16                                           ;row count
  5422                                  ;
  5423                                  ;                       start the row with the source address in hexadecimal
  5424                                  ;
  5425                                  .20                     push    ecx                                             ;save remaining rows
  5426                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5427                                                          mov     edx,edi                                         ;output buffer address
  5428                                                          mov     ecx,esi                                         ;console memory address
  5429                                  
  5430                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5431                                  
  5432                                                          add     edi,8                                           ;end of memory addr hexnum
  5433                                                          mov     al,' '                                          ;ascii space
  5434                                                          stosb                                                   ;store delimiter
  5435                                  ;
  5436                                  ;                       output 16 ASCII hexadecimal byte values for the row
  5437                                  ;
  5438                                                          xor     ecx,ecx                                         ;zero register
  5439                                                          mov     cl,16                                           ;loop count
  5440                                  .30                     push    ecx                                             ;save loop count
  5441                                                          lodsb                                                   ;memory byte
  5442                                                          mov     ah,al                                           ;memory byte
  5443                                                          shr     al,4                                            ;high-order in bits 3-0
  5444                                                          or      al,30h                                          ;apply ascii numeric zone
  5445                                                          cmp     al,3ah                                          ;numeric range?
  5446                                                          jb      .40                                             ;yes, skip ahead
  5447                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5448                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5449                                                          mov     al,ah                                           ;low-order in bits 3-0
  5450                                                          and     al,0fh                                          ;mask out high-order bits
  5451                                                          or      al,30h                                          ;apply ascii numeric zone
  5452                                                          cmp     al,3ah                                          ;numeric range?
  5453                                                          jb      .50                                             ;yes, skip ahead
  5454                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5455                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5456                                                          mov     al,' '                                          ;ascii space
  5457                                                          stosb                                                   ;store ascii space delimiter
  5458                                                          pop     ecx                                             ;loop count
  5459                                                          loop    .30                                             ;next
  5460                                  ;
  5461                                  ;                       output printable ASCII character section for the row
  5462                                  ;
  5463                                                          sub     esi,16                                          ;reset source pointer
  5464                                                          mov     cl,16                                           ;loop count
  5465                                  .60                     lodsb                                                   ;source byte
  5466                                                          cmp     al,32                                           ;printable? (low-range test)
  5467                                                          jb      .70                                             ;no, skip ahead
  5468                                                          cmp     al,128                                          ;printable? (high-range test)
  5469                                                          jb      .80                                             ;yes, skip ahead
  5470                                  .70                     mov     al,' '                                          ;display space instead of printable
  5471                                  .80                     stosb                                                   ;store printable ascii byte
  5472                                                          loop    .60                                             ;next source byte
  5473                                                          xor     al,al                                           ;nul-terminator
  5474                                                          stosb                                                   ;terminate output line
  5475                                  ;
  5476                                  ;                       display constructed output buffer and newline
  5477                                  ;
  5478                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5479                                                          putConsoleString czNewLine                              ;display new line
  5480                                  ;
  5481                                  ;                       repeat until all lines displayed and preserve source address
  5482                                  ;
  5483                                                          pop     ecx                                             ;remaining rows
  5484                                                          loop    .20                                             ;next row
  5485                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5486                                                          pop     edi                                             ;restore regs
  5487                                                          pop     esi                                             ;
  5488                                                          pop     ebx                                             ;
  5489                                                          ret                                                     ;return
  5490                                  ;-----------------------------------------------------------------------------------------------------------------------
  5491                                  ;
  5492                                  ;       Routine:        ConMinute
  5493                                  ;
  5494                                  ;       Description:    This routine Handles the MINUTE command.
  5495                                  ;
  5496                                  ;-----------------------------------------------------------------------------------------------------------------------
  5497                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5498                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5499                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5500                                                          putConsoleString  czNewLine                             ;write newline to console
  5501                                                          ret                                                     ;return
  5502                                  ;-----------------------------------------------------------------------------------------------------------------------
  5503                                  ;
  5504                                  ;       Routine:        ConMonth
  5505                                  ;
  5506                                  ;       Description:    This routine Handles the MONTH command.
  5507                                  ;
  5508                                  ;-----------------------------------------------------------------------------------------------------------------------
  5509                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5510                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5511                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5512                                                          putConsoleString  czNewLine                             ;write newline to console
  5513                                                          ret                                                     ;return
  5514                                  ;-----------------------------------------------------------------------------------------------------------------------
  5515                                  ;
  5516                                  ;       Routine:        ConMonthName
  5517                                  ;
  5518                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5519                                  ;
  5520                                  ;-----------------------------------------------------------------------------------------------------------------------
  5521                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5522                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5523                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5524                                                          putConsoleString   czNewLine                            ;write newline to console
  5525                                                          ret                                                     ;return
  5526                                  ;-----------------------------------------------------------------------------------------------------------------------
  5527                                  ;
  5528                                  ;       Routine:        ConSecond
  5529                                  ;
  5530                                  ;       Description:    This routine Handles the SECOND command.
  5531                                  ;
  5532                                  ;-----------------------------------------------------------------------------------------------------------------------
  5533                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5534                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5535                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5536                                                          putConsoleString  czNewLine                             ;write newline to console
  5537                                                          ret                                                     ;return
  5538                                  ;-----------------------------------------------------------------------------------------------------------------------
  5539                                  ;
  5540                                  ;       Routine:        ConTime
  5541                                  ;
  5542                                  ;       Description:    This routine Handles the TIME command.
  5543                                  ;
  5544                                  ;-----------------------------------------------------------------------------------------------------------------------
  5545                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5546                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5547                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5548                                                          putConsoleString  czNewLine                             ;write newline to console
  5549                                                          ret                                                     ;return
  5550                                  ;-----------------------------------------------------------------------------------------------------------------------
  5551                                  ;
  5552                                  ;       Routine:        ConVersion
  5553                                  ;
  5554                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5555                                  ;
  5556                                  ;-----------------------------------------------------------------------------------------------------------------------
  5557                                  ConVersion              putConsoleString czTitle                                ;display version message
  5558                                                          ret                                                     ;return
  5559                                  ;-----------------------------------------------------------------------------------------------------------------------
  5560                                  ;
  5561                                  ;       Routine:        ConWeekday
  5562                                  ;
  5563                                  ;       Description:    This routine handles the WEEKDAY command.
  5564                                  ;
  5565                                  ;-----------------------------------------------------------------------------------------------------------------------
  5566                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5567                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5568                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5569                                                          putConsoleString  czNewLine                             ;write newline to console
  5570                                                          ret                                                     ;return
  5571                                  ;-----------------------------------------------------------------------------------------------------------------------
  5572                                  ;
  5573                                  ;       Routine:        ConWeekdayName
  5574                                  ;
  5575                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5576                                  ;
  5577                                  ;-----------------------------------------------------------------------------------------------------------------------
  5578                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5579                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5580                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5581                                                          putConsoleString     czNewLine                                  ;write newline to console
  5582                                                          ret                                                             ;return
  5583                                  ;-----------------------------------------------------------------------------------------------------------------------
  5584                                  ;
  5585                                  ;       Routine:        ConYear
  5586                                  ;
  5587                                  ;       Description:    This routine Handles the YEAR command.
  5588                                  ;
  5589                                  ;-----------------------------------------------------------------------------------------------------------------------
  5590                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5591                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5592                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5593                                                          putConsoleString  czNewLine                             ;write newline to console
  5594                                                          ret                                                     ;return
  5595                                  ;-----------------------------------------------------------------------------------------------------------------------
  5596                                  ;
  5597                                  ;       Routine:        ConYearIsLeap
  5598                                  ;
  5599                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5600                                  ;
  5601                                  ;-----------------------------------------------------------------------------------------------------------------------
  5602                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5603                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5604                                  
  5605                                                          jecxz   .10                                             ;branch if not leap
  5606                                  
  5607                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5608                                  
  5609                                                          jmp     .20                                             ;continue
  5610                                  
  5611                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5612                                  .20                     ret                                                     ;return
  5613                                  ;-----------------------------------------------------------------------------------------------------------------------
  5614                                  ;
  5615                                  ;       Tables
  5616                                  ;
  5617                                  ;-----------------------------------------------------------------------------------------------------------------------
  5618                                                                                                                  ;---------------------------------------
  5619                                                                                                                  ;  Command Jump Table
  5620                                                                                                                  ;---------------------------------------
  5621                                  tConJmpTbl              equ     $                                               ;command jump table
  5622                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  5623                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  5624                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  5625                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  5626                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  5627                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  5628                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  5629                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  5630                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  5631                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  5632                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  5633                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  5634                                                          dd      ConDate         - ConCode                       ;date command routine offset
  5635                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  5636                                                          dd      ConFree         - ConCode                       ;free command routine offset
  5637                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  5638                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  5639                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  5640                                                          dd      ConTime         - ConCode                       ;time command routine offset
  5641                                                          dd      ConYear         - ConCode                       ;year command routine offset
  5642                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  5643                                                          dd      ConDay          - ConCode                       ;day command routine offset
  5644                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  5645                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  5646                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  5647                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  5648                                                                                                                  ;---------------------------------------
  5649                                                                                                                  ;  Command Name Table
  5650                                                                                                                  ;---------------------------------------
  5651                                  tConCmdTbl              equ     $                                               ;command name table
  5652                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  5653                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  5654                                                          db      11,"MONTH.NAME",0                               ;month.name command
  5655                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  5656                                                          db      8,"VERSION",0                                   ;version command
  5657                                                          db      8,"WEEKDAY",0                                   ;weekday command
  5658                                                          db      7,"MALLOC",0                                    ;malloc command
  5659                                                          db      7,"MEMORY",0                                    ;memory command
  5660                                                          db      7,"MINUTE",0                                    ;minute command
  5661                                                          db      7,"SECOND",0                                    ;second command
  5662                                                          db      6,"CLEAR",0                                     ;clear command
  5663                                                          db      6,"MONTH",0                                     ;month command
  5664                                                          db      5,"DATE",0                                      ;date command
  5665                                                          db      5,"EXIT",0                                      ;exit command
  5666                                                          db      5,"FREE",0                                      ;free command
  5667                                                          db      5,"HOUR",0                                      ;hour command
  5668                                                          db      5,"INT6",0                                      ;int6 command
  5669                                                          db      5,"QUIT",0                                      ;quit command
  5670                                                          db      5,"TIME",0                                      ;time command
  5671                                                          db      5,"YEAR",0                                      ;year command
  5672                                                          db      4,"CLS",0                                       ;cls command
  5673                                                          db      4,"DAY",0                                       ;day command
  5674                                                          db      4,"MEM",0                                       ;mem command
  5675                                                          db      4,"VER",0                                       ;ver command
  5676                                                          db      0                                               ;end of table
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678                                  ;
  5679                                  ;       Constants
  5680                                  ;
  5681                                  ;-----------------------------------------------------------------------------------------------------------------------
  5682                                  czNewLine               db      13,10,0                                         ;new line string
  5683                                  czOK                    db      "ok",13,10,0                                    ;ok string
  5684                                  czPrompt                db      ":",0                                           ;prompt string
  5685                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5686                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5687                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  5688                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  5689                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  5690                                  %endif
  5691                                  %ifdef BUILDDISK
  5692                                  ;-----------------------------------------------------------------------------------------------------------------------
  5693                                  ;
  5694                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5695                                  ;
  5696                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5697                                  ;
  5698                                  ;-----------------------------------------------------------------------------------------------------------------------
  5699                                  section                 unused                                                  ;unused disk space
  5700                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5701                                  %endif
  5702                                  ;=======================================================================================================================
  5703                                  ;
  5704                                  ;       End of Program Code
  5705                                  ;
  5706                                  ;=======================================================================================================================
