     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.011
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading memory sizes from the BIOS
     8                                  ;                       and the Real Time Clock (RTC) chip.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;
   162                                  ;       Operating System Values
   163                                  ;
   164                                  ;       EBOOT...        Boot sector and loader values
   165                                  ;       ECON...         Console values (dimensions and attributes)
   166                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   167                                  ;       EKEYF...        Keyboard status flags
   168                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   169                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   170                                  ;       EMEM...         Memory Management values
   171                                  ;       EMSG...         Message identifers
   172                                  ;
   173                                  ;=======================================================================================================================
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       Hardware-Defined Values
   177                                  ;
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;
   181                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   182                                  ;
   183                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   184                                  ;       for CGA, EGA, VGA and compatible video modes.
   185                                  ;
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   188                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   189                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   190                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  ;
   193                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   194                                  ;
   195                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   196                                  ;
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   199                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   200                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   201                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   202                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  ;
   205                                  ;       8042 Keyboard Controller                                                EKEYB...
   206                                  ;
   207                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   208                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   209                                  ;
   210                                  ;-----------------------------------------------------------------------------------------------------------------------
   211                                  EKEYBPORTDATA           equ     060h                                            ;data port
   212                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   213                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   214                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   215                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   216                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   217                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   218                                                                                                                  ;---------------------------------------
   219                                                                                                                  ;       Keyboard Scan Codes
   220                                                                                                                  ;---------------------------------------
   221                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   222                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   223                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   224                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   225                                  EKEYBSLASH              equ     035h                                            ;slash
   226                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   227                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   228                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   229                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   230                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   231                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   232                                  EKEYBUP                 equ     080h                                            ;up
   233                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   234                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   235                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   236                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   237                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   238                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   239                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   240                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   241                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   242                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   243                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   244                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  ;
   247                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   248                                  ;
   249                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   250                                  ;       external devices and signals a hardware interrupt to the CPU.
   251                                  ;
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   254                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   255                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   256                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   257                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  ;
   260                                  ;       8253 Programmable Interval Timer                                        EPIT...
   261                                  ;
   262                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   263                                  ;       approximately 18.2 times per second.
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   270                                  ;
   271                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  ERTCREGPORT             equ     070h                                            ;register select port
   275                                  ERTCDATAPORT            equ     071h                                            ;data port
   276                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   277                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   278                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   279                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   280                                  ;-----------------------------------------------------------------------------------------------------------------------
   281                                  ;
   282                                  ;       x86 CPU Architecture                                                    ;EX86...
   283                                  ;
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;
   288                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   289                                  ;
   290                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   291                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   292                                  ;
   293                                  ;       0.......        Segment is not present in memory (triggers int 11)
   294                                  ;       1.......        Segment is present in memory
   295                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   296                                  ;       ...0....        Segment is a system segment
   297                                  ;       ...00010                Local Descriptor Table
   298                                  ;       ...00101                Task Gate
   299                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   300                                  ;       ...01100                Call Gate (386)
   301                                  ;       ...01110                Interrupt Gate (386)
   302                                  ;       ...01111                Trap Gate (386)
   303                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   304                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   305                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   309                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   310                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   311                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   312                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   313                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   314                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   315                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ;
   318                                  ;       Firmware-Defined Values
   319                                  ;
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;
   323                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   324                                  ;
   325                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   326                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   330                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   331                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   332                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   333                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   334                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   335                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   336                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   337                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   338                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   339                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ;
   342                                  ;       Standards-Based Values
   343                                  ;
   344                                  ;-----------------------------------------------------------------------------------------------------------------------
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;
   347                                  ;       ASCII                                                                   EASCII...
   348                                  ;
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   351                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   352                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   353                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   354                                  EASCIISPACE             equ     020h                                            ;space
   355                                  EASCIIUPPERA            equ     041h                                            ;'A'
   356                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   357                                  EASCIILOWERA            equ     061h                                            ;'a'
   358                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   359                                  EASCIITILDE             equ     07Eh                                            ;'~'
   360                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   361                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   362                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   363                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   364                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   365                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   366                                  EASCIICASE              equ     00100000b                                       ;case bit
   367                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ;
   370                                  ;       Operating System Values
   371                                  ;
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;
   375                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   376                                  ;
   377                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   378                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   379                                  ;
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   382                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   383                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   384                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   385                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   386                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   387                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  ;       Console Constants                                                       ECON...
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ECONCOLS                equ     80                                              ;columns per row
   392                                  ECONROWS                equ     24                                              ;console rows
   393                                  ECONOIAROW              equ     24                                              ;operator information area row
   394                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   395                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   396                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   397                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   398                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   401                                  ;-----------------------------------------------------------------------------------------------------------------------
   402                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   403                                  EGDTCGA                 equ     020h                                            ;cga video selector
   404                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   405                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   406                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   407                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   408                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   409                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;       Keyboard Flags                                                          EKEYF...
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   414                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   415                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   416                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   417                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   418                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   419                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   420                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   421                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   422                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   423                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;       Kernel Constants                                                        EKRN...
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   428                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   429                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   430                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   431                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   432                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ;       Memory Management Constants                                             EMEM...
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   441                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   442                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   443                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;       Message Identifiers                                                     EMSG...
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   448                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   449                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   450                                  ;=======================================================================================================================
   451                                  ;
   452                                  ;       Structures
   453                                  ;
   454                                  ;=======================================================================================================================
   455                                  ;-----------------------------------------------------------------------------------------------------------------------
   456                                  ;
   457                                  ;       MEMBLOCK
   458                                  ;
   459                                  ;       The MEMBLOCK structure defines a memory block.
   460                                  ;
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  struc                   MEMBLOCK
   463 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   464 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   465 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   466 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   467 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   468 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   469 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   470 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   471                                  EMEMBLOCKLEN            equ     ($-.signature)
   472                                  endstruc
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;
   475                                  ;       MEMROOT
   476                                  ;
   477                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   478                                  ;
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  struc                   MEMROOT
   481 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   482 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   483 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   484 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   485 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   486 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   487                                  EMEMROOTLEN             equ     ($-.firstcontig)
   488                                  endstruc
   489                                  ;-----------------------------------------------------------------------------------------------------------------------
   490                                  ;
   491                                  ;       MQUEUE
   492                                  ;
   493                                  ;       The MQUEUE structure maps memory used for a message queue.
   494                                  ;
   495                                  ;-----------------------------------------------------------------------------------------------------------------------
   496                                  struc                   MQUEUE
   497 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   498 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   499 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   500                                  endstruc
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;       OSDATA
   504                                  ;
   505                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   506                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   507                                  ;
   508                                  ;-----------------------------------------------------------------------------------------------------------------------
   509                                  struc                   OSDATA
   510 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   511 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   512 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   513 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   514 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   515 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   516 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   517 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   518 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   519 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   520 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   521 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   522 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   523 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   524 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   525 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   526 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   527 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   528 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   529 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   530 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   531 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   532 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   533 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   534 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   535 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   536 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   537 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   538 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   539 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   540 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   541 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   542 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   543 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   544 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   545 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   546 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   547 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   548 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   549 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   550 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   551 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   552 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   553 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   554 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   555 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   556 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   557 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   558 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   559 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   560 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   561 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   562 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   563 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   564 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   565 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   566 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   567 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   568 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   569 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   570 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   571 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   572 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   573 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   574 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   575 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   576 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   577 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   578 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   579 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   580 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   581 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   582 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   583 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   584 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   585 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   586 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   587 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   588 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   589 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   590 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   591 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   592 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   593 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   594 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   595 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   596 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   597 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   598 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   599 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   600 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   601 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   602 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   603 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   604 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   605 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   606 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   607 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   608 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   609 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   610 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   611                                  ;-----------------------------------------------------------------------------------------------------------------------
   612                                  ;
   613                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   614                                  ;
   615                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   616                                  ;
   617                                  ;-----------------------------------------------------------------------------------------------------------------------
   618                                  ECONDATA                equ     ($)
   619 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   620 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   621 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   622 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   623 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   624 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   625 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   626 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   627 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   628 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   629 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   630 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   631 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   632 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   633 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   634 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   635 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   636 00000820 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   637 00000870 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   638 000008C0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   639 00000910 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   640 0000091B <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   641 00000926 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   642 00000931 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   643                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   644                                  ;-----------------------------------------------------------------------------------------------------------------------
   645                                  ;
   646                                  ;       End of OS Variables
   647                                  ;
   648                                  ;-----------------------------------------------------------------------------------------------------------------------
   649                                  endstruc
   650                                  ;-----------------------------------------------------------------------------------------------------------------------
   651                                  ;
   652                                  ;       Macros
   653                                  ;
   654                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   655                                  ;
   656                                  ;-----------------------------------------------------------------------------------------------------------------------
   657                                  %macro                  mint    1
   658                                  _%1                     equ     ($-$$) / EX86DESCLEN
   659                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   660                                  %endmacro
   661                                  %macro                  mtrap   1
   662                                  _%1                     equ     ($-$$) / EX86DESCLEN
   663                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   664                                  %endmacro
   665                                  %macro                  menter  1
   666                                  ?%1                     equ     ($-$$)
   667                                  %endmacro
   668                                  %macro                  tsvce   1
   669                                  e%1                     equ     ($-tsvc)/4
   670                                                          dd      %1
   671                                  %endmacro
   672                                  %ifdef BUILDBOOT
   673                                  ;=======================================================================================================================
   674                                  ;
   675                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   676                                  ;
   677                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   678                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   679                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   680                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   681                                  ;
   682                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   683                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   684                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   685                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   686                                  ;       immediately followed by a disk parameter table.
   687                                  ;
   688                                  ;=======================================================================================================================
   689                                                          cpu     8086                                            ;assume minimal CPU
   690                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   691                                                          bits    16                                              ;16-bit code at power-up
   692                                  %ifdef BUILDPREP
   693 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   694                                  %else
   695                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   696                                  %endif
   697                                  ;-----------------------------------------------------------------------------------------------------------------------
   698                                  ;
   699                                  ;       Disk Parameter Table
   700                                  ;
   701                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   702                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   703                                  ;
   704                                  ;-----------------------------------------------------------------------------------------------------------------------
   705 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   706 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   707 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   708 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   709 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   710 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   711 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   712 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   713 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   714                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   715 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   716 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   717 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   718                                  ;
   719                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   720                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   721                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   722                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   723                                  ;       given several possible starting values for CS:IP.
   724                                  ;
   725                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   726 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   727                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   728 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   729 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   730 00000025 B104                                            mov     cl,4                                            ;shift count
   731 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   732 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   733 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   734                                  ;
   735                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   736                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   737                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   738                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   739                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   740                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   741                                  ;
   742 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   743 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   744 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   745 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   746 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   747                                  ;
   748                                  ;       Our boot addressability is now set up according to the following diagram.
   749                                  ;
   750                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   751                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   752                                  ;                               |  256 = 100h bytes                             |
   753                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   754                                  ;                               |  Boot Sector (vstart=0100h)                   |
   755                                  ;                               |  1 sector = 512 = 200h bytes                  |
   756                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   757                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   758                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   759                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   760                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   761                                  ;                               |  2 sectors = 1024 = 400h bytes
   762                                  ;                       009400  +-----------------------------------------------+ DS:1900
   763                                  ;
   764                                  ;       On entry, DL indicates the drive being booted from.
   765                                  ;
   766 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   767                                  ;
   768                                  ;       Compute directory i/o buffer address.
   769                                  ;
   770 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   771 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   772 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   773 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   774                                  ;
   775                                  ;       Compute segment where os.com will be loaded.
   776                                  ;
   777 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   778 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   779 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   780 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   781                                  ;
   782                                  ;       Set the video mode to 80 column, 25 row, text.
   783                                  ;
   784 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   785 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   786                                  ;
   787                                  ;       Write a message to the console so we know we have our addressability established.
   788                                  ;
   789 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   790 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   791                                  ;
   792                                  ;       Initialize the number of directory sectors to search.
   793                                  ;
   794 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   795 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   796                                  ;
   797                                  ;       Compute number of directory sectors and initialize overhead count.
   798                                  ;
   799 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   800 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   801 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   802 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   803                                  ;
   804                                  ;       Compute directory entries per sector.
   805                                  ;
   806 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   807 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   808 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   809                                  ;
   810                                  ;       Compute first logical directory sector and update overhead count.
   811                                  ;
   812 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   813 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   814 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   815 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   816 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   817 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   818                                  ;
   819                                  ;       Read directory sector.
   820                                  ;
   821 0000008E B001                    .30                     mov     al,1                                            ;sector count
   822 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   823 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   824 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   825                                  ;
   826                                  ;       Setup variables to search this directory sector.
   827                                  ;
   828 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   829 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   830 000000A1 7603                                            jna     .40                                             ;no, continue
   831 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   832 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   833 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   834 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   835                                  ;
   836                                  ;       Loop through directory sectors searching for kernel program.
   837                                  ;
   838 000000B1 56                      .50                     push    si                                              ;save kernel name address
   839 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   840 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   841 000000B6 FC                                              cld                                                     ;forward strings
   842 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   843 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   844 000000BA 5E                                              pop     si                                              ;restore kernel name address
   845 000000BB 7418                                            je      .60                                             ;exit loop if found
   846 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   847 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   848 000000C2 75ED                                            jnz     .50                                             ;next entry
   849                                  ;
   850                                  ;       Repeat search if we are not at the end of the directory.
   851                                  ;
   852 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   853 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   854 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   855 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   856 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   857                                  ;
   858                                  ;       If we find the kernel program in the directory, read the FAT.
   859                                  ;
   860 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   861 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   862 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   863 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   864 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   865 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   866                                  ;
   867                                  ;       Get the starting cluster of the kernel program and target address.
   868                                  ;
   869 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   870 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   871                                  ;
   872                                  ;       Read each program cluster into RAM.
   873                                  ;
   874 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   875 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   876 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   877 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   878 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   879 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   880 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   881 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   882 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   883                                  ;
   884                                  ;       Update buffer pointer for next cluster.
   885                                  ;
   886 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   887 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   888 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   889 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   890 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   891                                  ;
   892                                  ;       Compute next cluster number.
   893                                  ;
   894 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   895 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   896 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   897 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   898 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   899 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   900 00000120 83E701                                          and     di,1                                            ;get low bit
   901 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   902 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   903 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   904                                  ;
   905                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   906                                  ;
   907 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   908 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   909 00000130 B104                                            mov     cl,4                                            ;shift count
   910 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   911 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   912 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   913 0000013A 75B2                                            jne     .70                                             ;no, continue
   914                                  ;
   915                                  ;       Transfer control to the operating system program.
   916                                  ;
   917 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   918 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   919 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   920                                  ;
   921                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   922                                  ;
   923 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   924 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   925 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   926 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   927 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   928 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   929 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   930 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   931 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   932 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   933                                  ;
   934                                  ;       Try maxtries times to read sector.
   935                                  ;
   936 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   937 00000160 53                      .10                     push    bx                                              ;save buffer address
   938 00000161 51                                              push    cx                                              ;save retry count
   939 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   940 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   941 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   942 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   943 0000016F 59                                              pop     cx                                              ;restore retry count
   944 00000170 5B                                              pop     bx                                              ;restore buffer address
   945 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   946 00000173 E2EB                                            loop    .10                                             ;retry
   947                                  ;
   948                                  ;       Handle disk error: convert to ASCII and store in error string.
   949                                  ;
   950 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   951 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   952 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   953 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   954 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   955 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   956 00000183 7203                                            jb      .20                                             ;continue if numeral
   957 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   958 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   959 0000018A 7203                                            jb      .30                                             ;continue if numeral
   960 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   961 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   962 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   963 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   964                                  ;
   965                                  ;       Wait for a key press.
   966                                  ;
   967 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   968 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   969 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   970 0000019E FB                                              sti                                                     ;enable maskable interrupts
   971 0000019F F4                                              hlt                                                     ;wait for interrupt
   972 000001A0 EBF6                                            jmp     .10                                             ;repeat
   973                                  ;
   974                                  ;       Reset the system.
   975                                  ;
   976 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   977 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   978 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   979 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   980 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   981                                  ;
   982                                  ;       Display text message.
   983                                  ;
   984 000001AA FC                      BootPrint               cld                                                     ;forward strings
   985 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   986 000001AC 84C0                                            test    al,al                                           ;end of string?
   987 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   988 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   989 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   990 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   991 000001B6 C3                      BootReturn              ret                                                     ;return
   992                                  ;-----------------------------------------------------------------------------------------------------------------------
   993                                  ;
   994                                  ;       Constants
   995                                  ;
   996                                  ;-----------------------------------------------------------------------------------------------------------------------
   997 000001B7 90                                              align   2
   998 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   999 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   999 000001C3 4F4D               
  1000 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1000 000001CE 530D0A00           
  1001 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1001 000001DB 7220               
  1002 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1003 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1003 000001E9 6700               
  1004                                  ;-----------------------------------------------------------------------------------------------------------------------
  1005                                  ;
  1006                                  ;       Work Areas
  1007                                  ;
  1008                                  ;-----------------------------------------------------------------------------------------------------------------------
  1009 000001EB 90                                              align   2
  1010 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1011 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1012 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1013 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1014 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1015                                  wwReadCountCommand      equ     $                                               ;read count and command
  1016 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1017 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1018                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1019 000001F8 00                      wbDrive                 db      0                                               ;drive
  1020 000001F9 00                      wbHead                  db      0                                               ;head
  1021                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1022 000001FA 00                                              db      0                                               ;sector
  1023 000001FB 00                      wbTrack                 db      0                                               ;track
  1024 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1025 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1026                                  %endif
  1027                                  %ifdef BUILDPREP
  1028                                  ;=======================================================================================================================
  1029                                  ;
  1030                                  ;       Diskette Preparation Code
  1031                                  ;
  1032                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1033                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1034                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1035                                  ;
  1036                                  ;=======================================================================================================================
  1037                                  ;
  1038                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1039                                  ;
  1040 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1041 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1042                                  ;
  1043                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1044                                  ;
  1045 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1046 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1047 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1048 0000020C FB                                              sti                                                     ;enable interrupts
  1049 0000020D F4                                              hlt                                                     ;wait for interrupt
  1050 0000020E EBF6                                            jmp     .10                                             ;repeat
  1051 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1052 00000212 7407                                            je      .30                                             ;yes, branch
  1053 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1054 00000216 75EE                                            jne     .10                                             ;no, repeat
  1055 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
  1056                                  ;
  1057                                  ;       Display writing-sector message and patch the JMP instruction.
  1058                                  ;
  1059 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1060 0000021E E889FF                                          call    BootPrint                                       ;display message
  1061 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1062 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1063 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1064                                  ;
  1065                                  ;       Try to read the boot sector.
  1066                                  ;
  1067 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1068 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1069 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1070 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1071 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1072 00000236 B001                                            mov     al,1                                            ;one sector
  1073 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1074 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1075 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1076 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1077 0000023F E2EB                                            loop    .40                                             ;try again
  1078 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1079 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1080                                  ;
  1081                                  ;       Copy diskette parms from input buffer to output buffer.
  1082                                  ;
  1083 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1084 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1085 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1086 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1087 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1088 00000255 FC                                              cld                                                     ;forward string copies
  1089 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1090                                  ;
  1091                                  ;       Try to write boot sector to diskette.
  1092                                  ;
  1093 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1094 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1095 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1096 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1097 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1098 00000265 B001                                            mov     al,1                                            ;one sector
  1099 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1100 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1101 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1102 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1103 0000026E E2EB                                            loop    .60                                             ;try again
  1104 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1105                                  ;
  1106                                  ;       Convert the error code to ASCII and display the error message.
  1107                                  ;
  1108 00000273 50                      .70                     push    ax                                              ;save error code
  1109 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1110 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1111 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1112 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1113 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1114 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1115 00000282 7203                                            jb      .80                                             ;yes, continue
  1116 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1117 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1118 00000289 7202                                            jb      .90                                             ;yes, continue
  1119 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1120 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1121 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1122 00000293 58                                              pop     ax                                              ;restore error code
  1123                                  ;
  1124                                  ;       Display the completion message.
  1125                                  ;
  1126 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1127 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1128 00000299 3C00                                            cmp     al,0                                            ;success?
  1129 0000029B 7426                                            je      .110                                            ;yes, continue
  1130 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1131 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1132 000002A2 741F                                            je      .110                                            ;yes, continue
  1133 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1134 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1135 000002A9 7418                                            je      .110                                            ;yes, continue
  1136 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1137 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1138 000002B0 7411                                            je      .110                                            ;yes, continue
  1139 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1140 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1141 000002B7 740A                                            je      .110                                            ;yes, continue
  1142 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1143 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1144 000002BE 7403                                            je      .110                                            ;yes, continue
  1145 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1146 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1147 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1148 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1149 000002CB C3                                              ret                                                     ;return (should not execute)
  1150                                  ;-----------------------------------------------------------------------------------------------------------------------
  1151                                  ;
  1152                                  ;       Diskette Preparation Messages
  1153                                  ;
  1154                                  ;-----------------------------------------------------------------------------------------------------------------------
  1155 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1155 000002D5 5320426F6F742D4469-
  1155 000002DE 736B65747465205072-
  1155 000002E7 657061726174696F6E-
  1155 000002F0 2050726F6772616D   
  1156 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1156 00000301 687420284329203230-
  1156 0000030A 31302D323031382044-
  1156 00000313 61766964204A2E2057-
  1156 0000031C 616C6C696E672E2041-
  1156 00000325 6C6C20726967687473-
  1156 0000032E 207265736572766564-
  1156 00000337 2E                 
  1157 00000338 0D0A                                            db      13,10
  1158 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1158 00000343 6F6772616D206F7665-
  1158 0000034C 727772697465732074-
  1158 00000355 686520626F6F742073-
  1158 0000035E 6563746F72206F6620-
  1158 00000367 61206469736B657474-
  1158 00000370 652077697468207374-
  1158 00000379 617274757020636F64-
  1158 00000382 652074686174       
  1159 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1159 00000391 616420746865206F70-
  1159 0000039A 65726174696E672073-
  1159 000003A3 797374656D20696E74-
  1159 000003AC 6F206D656D6F727920-
  1159 000003B5 7768656E2074686520-
  1159 000003BE 636F6D707574657220-
  1159 000003C7 697320726573746172-
  1159 000003D0 7465642E           
  1160 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1160 000003DD 6565642C20706C6163-
  1160 000003E6 65206120666F726D61-
  1160 000003EF 74746564206469736B-
  1160 000003F8 6574746520696E746F-
  1160 00000401 20647269766520413A-
  1160 0000040A 20616E642070726573-
  1160 00000413 732074686520456E74-
  1160 0000041C 6572206B65792E     
  1161 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1161 0000042C 20746869732070726F-
  1161 00000435 6772616D2077697468-
  1161 0000043E 6F7574207072657061-
  1161 00000447 72696E672061206469-
  1161 00000450 736B657474652C2070-
  1161 00000459 726573732074686520-
  1161 00000462 457363617065206B65-
  1161 0000046B 792E               
  1162 0000046D 0D0A00                                          db      13,10,0
  1163 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1163 00000479 2074686520626F6F74-
  1163 00000482 20736563746F722074-
  1163 0000048B 6F2074686520646973-
  1163 00000494 6B65747465202E2E2E 
  1164 0000049D 0D0A00                                          db      13,10,0
  1165 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1165 000004A9 6F722D636F6465202E-
  1165 000004B2 2E2077617320726574-
  1165 000004BB 75726E65642066726F-
  1165 000004C4 6D207468652042494F-
  1165 000004CD 53207768696C652072-
  1165 000004D6 656164696E67206672-
  1165 000004DF 6F6D20746865206469-
  1165 000004E8 736B2E             
  1166 000004EB 0D0A00                                          db      13,10,0
  1167 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1167 000004F7 6F722D636F6465202E-
  1167 00000500 2E2077617320726574-
  1167 00000509 75726E65642066726F-
  1167 00000512 6D207468652042494F-
  1167 0000051B 53207768696C652077-
  1167 00000524 726974696E6720746F-
  1167 0000052D 20746865206469736B-
  1167 00000536 2E                 
  1168 00000537 0D0A00                                          db      13,10,0
  1169 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1169 00000543 742D736563746F7220-
  1169 0000054C 776173207772697474-
  1169 00000555 656E20746F20746865-
  1169 0000055E 206469736B65747465-
  1169 00000567 2E204265666F726520-
  1169 00000570 626F6F74696E672079-
  1169 00000579 6F757220636F6D7075-
  1169 00000582 7465722077697468   
  1170 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1170 00000593 736B657474652C206D-
  1170 0000059C 616B65207375726520-
  1170 000005A5 746861742074686520-
  1170 000005AE 66696C65204F532E43-
  1170 000005B7 4F4D20697320636F70-
  1170 000005C0 696564206F6E746F20-
  1170 000005C9 746865206469736B65-
  1170 000005D2 7474652E           
  1171 000005D6 0D0A00                                          db      13,10,0
  1172 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1172 000005E2 76616C696420446973-
  1172 000005EB 6B20506172616D6574-
  1172 000005F4 6572               
  1173 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1173 000005FF 20616E20696E746572-
  1173 00000608 6E616C206572726F72-
  1173 00000611 206361757365642062-
  1173 0000061A 7920616E20696E7661-
  1173 00000623 6C69642076616C7565-
  1173 0000062C 206265696E67207061-
  1173 00000635 7373656420746F2061-
  1173 0000063E 2073797374656D     
  1174 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1174 0000064E 6E2E20546865204F53-
  1174 00000657 424F4F542E434F4D20-
  1174 00000660 66696C65206D617920-
  1174 00000669 626520636F72727570-
  1174 00000672 742E20436F7079206F-
  1174 0000067B 7220646F776E6C6F61-
  1174 00000684 64207468652066696C-
  1174 0000068D 6520616761696E     
  1175 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1175 0000069D 72792E             
  1176 000006A0 0D0A00                                          db      13,10,0
  1177 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1177 000006AC 6472657373204D6172-
  1177 000006B5 6B204E6F7420466F75-
  1177 000006BE 6E64               
  1178 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1178 000006C9 726F7220696E646963-
  1178 000006D2 617465732061207068-
  1178 000006DB 79736963616C207072-
  1178 000006E4 6F626C656D20776974-
  1178 000006ED 682074686520666C6F-
  1178 000006F6 707079206469736B65-
  1178 000006FF 7474652E20506C6561-
  1178 00000708 7365207265747279   
  1179 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1179 00000719 6E6F74686572206469-
  1179 00000722 736B657474652E     
  1180 00000729 0D0A00                                          db      13,10,0
  1181 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1181 00000735 6F7465637465642044-
  1181 0000073E 69736B             
  1182 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1182 0000074A 726F72206973207573-
  1182 00000753 75616C6C7920636175-
  1182 0000075C 736564206279206174-
  1182 00000765 74656D7074696E6720-
  1182 0000076E 746F20777269746520-
  1182 00000777 746F20612077726974-
  1182 00000780 652D70726F74656374-
  1182 00000789 6564206469736B2E   
  1183 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1183 0000079A 686520277772697465-
  1183 000007A3 2D70726F7465637427-
  1183 000007AC 2073657474696E6720-
  1183 000007B5 6F6E20746865206469-
  1183 000007BE 736B206F7220726574-
  1183 000007C7 7279207573696E6720-
  1183 000007D0 7573696E6720616E6F-
  1183 000007D9 74686572206469736B-
  1183 000007E2 2E                 
  1184 000007E3 0D0A00                                          db      13,10,0
  1185 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1185 000007EF 736B65747465205265-
  1185 000007F8 6D6F766564         
  1186 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1186 00000806 726F72206D61792069-
  1186 0000080F 6E6469636174652074-
  1186 00000818 686174207468652066-
  1186 00000821 6C6F70707920646973-
  1186 0000082A 6B6574746520686173-
  1186 00000833 206265656E2072656D-
  1186 0000083C 6F7665642066726F6D-
  1186 00000845 20746865           
  1187 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1187 00000852 652064726976652E20-
  1187 0000085B 4F6E20736F6D652073-
  1187 00000864 797374656D732C2074-
  1187 0000086D 68697320636F646520-
  1187 00000876 6D617920616C736F20-
  1187 0000087F 6F6363757220696620-
  1187 00000888 746865206469736B65-
  1187 00000891 747465206973       
  1188 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1188 000008A0 70726F746563746564-
  1188 000008A9 2E2720506C65617365-
  1188 000008B2 207665726966792074-
  1188 000008BB 686174207468652064-
  1188 000008C4 69736B657474652069-
  1188 000008CD 73206E6F7420777269-
  1188 000008D6 74652D70726F746563-
  1188 000008DF 74656420616E64     
  1189 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1189 000008EF 65726C7920696E7365-
  1189 000008F8 7274656420696E2074-
  1189 00000901 6865206469736B6574-
  1189 0000090A 74652064726976652E 
  1190 00000913 0D0A00                                          db      13,10,0
  1191 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1191 0000091F 6976652054696D6564-
  1191 00000928 204F7574           
  1192 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1192 00000935 726F7220757375616C-
  1192 0000093E 6C7920696E64696361-
  1192 00000947 746573207468617420-
  1192 00000950 6E6F206469736B6574-
  1192 00000959 746520697320696E20-
  1192 00000962 746865206469736B65-
  1192 0000096B 747465206472697665-
  1192 00000974 2E20506C65617365   
  1193 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1193 00000985 726520746861742074-
  1193 0000098E 6865206469736B6574-
  1193 00000997 74652069732070726F-
  1193 000009A0 7065726C7920736561-
  1193 000009A9 74656420696E207468-
  1193 000009B2 652064726976652061-
  1193 000009BB 6E642072657472792E 
  1194 000009C4 0D0A00                                          db      13,10,0
  1195 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1195 000009D0 6B6E6F776E20457272-
  1195 000009D9 6F72               
  1196 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1196 000009E4 6F722D636F64652072-
  1196 000009ED 657475726E65642062-
  1196 000009F6 79207468652042494F-
  1196 000009FF 53206973206E6F7420-
  1196 00000A08 61207265636F676E69-
  1196 00000A11 7A6564206572726F72-
  1196 00000A1A 2E20506C6561736520-
  1196 00000A23 636F6E73756C74     
  1197 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1197 00000A33 6D7075746572277320-
  1197 00000A3C 746563686E6963616C-
  1197 00000A45 207265666572656E63-
  1197 00000A4E 6520666F7220612064-
  1197 00000A57 65736372697074696F-
  1197 00000A60 6E206F662074686973-
  1197 00000A69 206572726F7220636F-
  1197 00000A72 64652E             
  1198 00000A75 0D0A00                                          db      13,10,0
  1199                                  wcPrepInBuf             equ     $
  1200                                  %endif
  1201                                  %ifdef BUILDDISK
  1202                                  ;=======================================================================================================================
  1203                                  ;
  1204                                  ;       File Allocation Tables
  1205                                  ;
  1206                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1207                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1208                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1209                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1210                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1211                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1212                                  ;       the last cluster in the chain.
  1213                                  ;
  1214                                  ;       Every three bytes encode two FAT entries as follows:
  1215                                  ;
  1216                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1217                                  ;
  1218                                  ;=======================================================================================================================
  1219                                  ;-----------------------------------------------------------------------------------------------------------------------
  1220                                  ;
  1221                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1222                                  ;
  1223                                  ;-----------------------------------------------------------------------------------------------------------------------
  1224                                  section                 fat1                                                    ;first copy of FAT
  1225                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1226                                                          db      005h,060h,000h, 007h,080h,000h
  1227                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1228                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1229                                                          db      011h,020h,001h, 013h,040h,001h
  1230                                                          db      015h,060h,001h, 017h,080h,001h
  1231                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1232                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1233                                                          db      021h,020h,002h, 023h,040h,002h
  1234                                                          db      025h,060h,002h, 027h,080h,002h
  1235                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1236                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238                                  ;
  1239                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1240                                  ;
  1241                                  ;-----------------------------------------------------------------------------------------------------------------------
  1242                                  section                 fat2                                                    ;second copy of FAT
  1243                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1244                                                          db      005h,060h,000h, 007h,080h,000h
  1245                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1246                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1247                                                          db      011h,020h,001h, 013h,040h,001h
  1248                                                          db      015h,060h,001h, 017h,080h,001h
  1249                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1250                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1251                                                          db      021h,020h,002h, 023h,040h,002h
  1252                                                          db      025h,060h,002h, 027h,080h,002h
  1253                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1254                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1255                                  ;-----------------------------------------------------------------------------------------------------------------------
  1256                                  ;
  1257                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1258                                  ;
  1259                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1260                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1261                                  ;       copy.
  1262                                  ;
  1263                                  ;-----------------------------------------------------------------------------------------------------------------------
  1264                                  section                 dir                                                     ;diskette directory
  1265                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1266                                                          db      020h                                            ;attribute (archive bit set)
  1267                                                          times   10 db 0                                         ;unused
  1268                                                          dw      0h                                              ;time
  1269                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1270                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1271                                                          dw      2                                               ;first cluster
  1272                                                          dd      05400h                                          ;file size
  1273                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1274                                  %endif
  1275                                  %ifdef BUILDCOM
  1276                                  ;=======================================================================================================================
  1277                                  ;
  1278                                  ;       OS.COM
  1279                                  ;
  1280                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1281                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1282                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1283                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1284                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1285                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1286                                  ;
  1287                                  ;       Our loader addressability is set up according to the following diagram.
  1288                                  ;
  1289                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1290                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1291                                  ;                               |  256 = 100h bytes                             |
  1292                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1293                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1294                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1295                                  ;                       007e00  +-----------------------------------------------+
  1296                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1297                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1298                                  ;                               |                                               |
  1299                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1300                                  ;                               |                                               |
  1301                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1302                                  ;                               |  Loader Code                                  |
  1303                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1304                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1305                                  ;
  1306                                  ;=======================================================================================================================
  1307                                  ;-----------------------------------------------------------------------------------------------------------------------
  1308                                  ;
  1309                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1310                                  ;
  1311                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1312                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1313                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1314                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1315                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1316                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1317                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1318                                  ;       registers.
  1319                                  ;
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                                          cpu     8086                                            ;assume minimal CPU
  1322                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1323                                                          bits    16                                              ;this is 16-bit code
  1324                                  Loader                  push    cs                                              ;use the code segment
  1325                                                          pop     ds                                              ;...as our data segment
  1326                                                          push    cs                                              ;use the code segment
  1327                                                          pop     es                                              ;...as our extra segment
  1328                                  ;
  1329                                  ;       Write a message to the console so we know we have our addressability established.
  1330                                  ;
  1331                                                          mov     si,czStartingMsg                                ;starting message
  1332                                                          call    PutTTYString                                    ;display loader message
  1333                                  ;
  1334                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1335                                  ;
  1336                                                          call    GetCPUType                                      ;AL = cpu type
  1337                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1338                                                          cmp     al,3                                            ;80386+?
  1339                                                          jb      LoaderExit                                      ;no, exit with error message
  1340                                                          cpu     386                                             ;allow 80386 instructions
  1341                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1342                                                          call    PutTTYString                                    ;display message
  1343                                  ;
  1344                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1345                                  ;
  1346                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1347                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1348                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1349                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1350                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1351                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1352                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1353                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1354                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1355                                                          call    PutTTYString                                    ;display message
  1356                                  ;
  1357                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1358                                  ;
  1359                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1360                                                          pop     es                                              ;... as target segment
  1361                                                          xor     di,di                                           ;ES:DI = target address
  1362                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1363                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1364                                                          cld                                                     ;forward strings
  1365                                                          rep     movsb                                           ;copy kernel image
  1366                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1367                                                          call    PutTTYString                                    ;display message
  1368                                  ;
  1369                                  ;       Switch to protected mode.
  1370                                  ;
  1371                                                          xor     si,si                                           ;ES:SI = gdt addr
  1372                                                          mov     ss,si                                           ;protected mode ss
  1373                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1374                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1375                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1376                                                          mov     dx,001Fh                                        ;outer delay loop count
  1377                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1378                                                          loop    $                                               ;wait out pending interrupts
  1379                                                          dec     dx                                              ;restore outer loop count
  1380                                                          jnz     .10                                             ;continue outer loop
  1381                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1382                                  ;
  1383                                  ;       Enable hardware and maskable interrupts.
  1384                                  ;
  1385                                                          xor     al,al                                           ;enable all registers code
  1386                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1387                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1388                                                          sti                                                     ;enable maskable interrupts
  1389                                  ;
  1390                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1391                                  ;
  1392                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1393                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1394                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1395                                  ;-----------------------------------------------------------------------------------------------------------------------
  1396                                  ;
  1397                                  ;       Routine:        LoaderExit
  1398                                  ;
  1399                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1400                                  ;
  1401                                  ;       In:             DS:SI   string address
  1402                                  ;
  1403                                  ;-----------------------------------------------------------------------------------------------------------------------
  1404                                  LoaderExit              call    PutTTYString                                    ;display error message
  1405                                  ;
  1406                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1407                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1408                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1409                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1410                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1411                                  ;
  1412                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1413                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1414                                                          jnz     .40                                             ;exit if key pressed
  1415                                                          sti                                                     ;enable maskable interrupts
  1416                                                          hlt                                                     ;wait for interrupt
  1417                                                          jmp     .30                                             ;repeat until keypress
  1418                                  ;
  1419                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1420                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1421                                  ;       HLT until the system resets.
  1422                                  ;
  1423                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1424                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1425                                  .50                     sti                                                     ;enable maskable interrupts
  1426                                                          hlt                                                     ;stop until reset, int, nmi
  1427                                                          jmp     .50                                             ;loop until restart kicks in
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429                                  ;
  1430                                  ;       Routine:        GetCPUType
  1431                                  ;
  1432                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1433                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1434                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1435                                  ;
  1436                                  ;       Out:            AX      0 = 808x, v20, etc.
  1437                                  ;                               1 = 80186
  1438                                  ;                               2 = 80286
  1439                                  ;                               3 = 80386
  1440                                  ;
  1441                                  ;-----------------------------------------------------------------------------------------------------------------------
  1442                                  GetCPUType              mov     al,1                                            ;AL = 1
  1443                                                          mov     cl,32                                           ;shift count
  1444                                                          shr     al,cl                                           ;try a 32-bit shift
  1445                                                          or      al,al                                           ;did the shift happen?
  1446                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1447                                                          cpu     186
  1448                                                          push    sp                                              ;save stack pointer
  1449                                                          pop     cx                                              ;...into cx
  1450                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1451                                                          jne     .10                                             ;yes, cpu is 80186
  1452                                                          cpu     286
  1453                                                          inc     ax                                              ;AX = 2
  1454                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1455                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1456                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1457                                                          jz      .10                                             ;yes, cpu is 80286
  1458                                                          inc     ax                                              ;AX = 3
  1459                                  .10                     ret                                                     ;return
  1460                                  ;-----------------------------------------------------------------------------------------------------------------------
  1461                                  ;
  1462                                  ;       Routine:        PutTTYString
  1463                                  ;
  1464                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1465                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1466                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1467                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1468                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1469                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1470                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1471                                  ;                       to LODSB is not needed.
  1472                                  ;
  1473                                  ;       In:             DS:SI   address of string
  1474                                  ;
  1475                                  ;       Out:            DF      0
  1476                                  ;                       ZF      1
  1477                                  ;                       AL      0
  1478                                  ;
  1479                                  ;-----------------------------------------------------------------------------------------------------------------------
  1480                                  PutTTYString            cld                                                     ;forward strings
  1481                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1482                                                          test    al,al                                           ;end of string?
  1483                                                          jz      .20                                             ;... yes, exit our loop
  1484                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1485                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1486                                                          jmp     .10                                             ;repeat until done
  1487                                  .20                     ret                                                     ;return
  1488                                  ;-----------------------------------------------------------------------------------------------------------------------
  1489                                  ;
  1490                                  ;       Loader Data
  1491                                  ;
  1492                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1493                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1494                                  ;
  1495                                  ;-----------------------------------------------------------------------------------------------------------------------
  1496                                                          align   2
  1497                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1498                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1499                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1500                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1501                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1502                                                          db      "Please press any key to restart the computer.",13,10,0
  1503                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1504                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1505                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1506                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1507                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1508                                  ;=======================================================================================================================
  1509                                  ;
  1510                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1511                                  ;
  1512                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1513                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1514                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1515                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1516                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1517                                  ;
  1518                                  ;=======================================================================================================================
  1519                                  ;=======================================================================================================================
  1520                                  ;
  1521                                  ;       Kernel Tables
  1522                                  ;
  1523                                  ;=======================================================================================================================
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1527                                  ;
  1528                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1529                                  ;       first descriptor must be all nulls.
  1530                                  ;
  1531                                  ;       6   5         4         3         2         1         0
  1532                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1533                                  ;       ----------------------------------------------------------------
  1534                                  ;       h......hffffmmmma......ab......................bn..............n
  1535                                  ;
  1536                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1537                                  ;               ffff                                                            flags
  1538                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1539                                  ;                       a......a                                                access
  1540                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1541                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1542                                  ;
  1543                                  ;       00000000                                                                all areas have base addresses below 2^24
  1544                                  ;               0...                                                            single-byte size granularity
  1545                                  ;               1...                                                            4-kilobyte size granularity
  1546                                  ;               .0..                                                            16-bit default for code segments
  1547                                  ;               .1..                                                            32-bit default for code segments
  1548                                  ;               ..0.                                                            intel-reserved; should be zero
  1549                                  ;               ...0                                                            available for operating system use
  1550                                  ;                   0000                                                        segment is less than 2^16 in size
  1551                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1552                                  ;                       1.......                                                segment is present in memory
  1553                                  ;                       .00.....                                                segment is of privilege level 0
  1554                                  ;                       ...0....                                                segment is of system or gate type
  1555                                  ;                       ...00010                                                local decriptor table (LDT)
  1556                                  ;                       ...01001                                                task state segment (TSS) available
  1557                                  ;                       ...01011                                                task state segment (TSS) busy
  1558                                  ;                       ...10...                                                data segment
  1559                                  ;                       ...10011                                                writable data (accessed)
  1560                                  ;                       ...11...                                                code segment
  1561                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1562                                  ;
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  section                 gdt                                                     ;global descriptor table
  1565                                                          dq      0000000000000000h                               ;00 required null selector
  1566                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1567                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1568                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1569                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1570                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1571                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1572                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1573                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1574                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1575                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1576                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1577                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1578                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1579                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                  ;
  1582                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1583                                  ;
  1584                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1585                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1586                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1587                                  ;
  1588                                  ;       6   5         4         3         2         1         0
  1589                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1590                                  ;       ----------------------------------------------------------------
  1591                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1592                                  ;
  1593                                  ;       h...h   high-order offset (bits 16-31)
  1594                                  ;       P       present (0=unused interrupt)
  1595                                  ;       zz      descriptor privilege level
  1596                                  ;       S       storage segment (must be zero for IDT)
  1597                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1598                                  ;       S...S   handling code selector in GDT
  1599                                  ;       l...l   lo-order offset (bits 0-15)
  1600                                  ;
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  section                 idt                                                     ;interrupt descriptor table
  1603                                                          mint    dividebyzero                                    ;00 divide by zero
  1604                                                          mint    singlestep                                      ;01 single step
  1605                                                          mint    nmi                                             ;02 non-maskable
  1606                                                          mint    break                                           ;03 break
  1607                                                          mint    into                                            ;04 into
  1608                                                          mint    bounds                                          ;05 bounds
  1609                                                          mint    badopcode                                       ;06 bad op code
  1610                                                          mint    nocoproc                                        ;07 no coprocessor
  1611                                                          mint    doublefault                                     ;08 double-fault
  1612                                                          mint    operand                                         ;09 operand
  1613                                                          mint    badtss                                          ;0a bad TSS
  1614                                                          mint    notpresent                                      ;0b not-present
  1615                                                          mint    stacklimit                                      ;0c stack limit
  1616                                                          mint    protection                                      ;0d general protection fault
  1617                                                          mint    int14                                           ;0e (reserved)
  1618                                                          mint    int15                                           ;0f (reserved)
  1619                                                          mint    coproccalc                                      ;10 (reserved)
  1620                                                          mint    int17                                           ;11 (reserved)
  1621                                                          mint    int18                                           ;12 (reserved)
  1622                                                          mint    int19                                           ;13 (reserved)
  1623                                                          mint    int20                                           ;14 (reserved)
  1624                                                          mint    int21                                           ;15 (reserved)
  1625                                                          mint    int22                                           ;16 (reserved)
  1626                                                          mint    int23                                           ;17 (reserved)
  1627                                                          mint    int24                                           ;18 (reserved)
  1628                                                          mint    int25                                           ;19 (reserved)
  1629                                                          mint    int26                                           ;1a (reserved)
  1630                                                          mint    int27                                           ;1b (reserved)
  1631                                                          mint    int28                                           ;1c (reserved)
  1632                                                          mint    int29                                           ;1d (reserved)
  1633                                                          mint    int30                                           ;1e (reserved)
  1634                                                          mint    int31                                           ;1f (reserved)
  1635                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1636                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1637                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1638                                                          mtrap   com2                                            ;23 IRQ3 com2
  1639                                                          mtrap   com1                                            ;24 IRQ4 com1
  1640                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1641                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1642                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1643                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1644                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1645                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1646                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1647                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1648                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1649                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1650                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1651                                                          mtrap   svc                                             ;30 OS services
  1652                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1653                                  ;=======================================================================================================================
  1654                                  ;
  1655                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1656                                  ;
  1657                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1658                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1659                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1660                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1661                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1662                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1663                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1664                                  ;
  1665                                  ;=======================================================================================================================
  1666                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1667                                                          cpu     386                                             ;allow 80386 instructions
  1668                                                          bits    32                                              ;this is 32-bit code
  1669                                  ;=======================================================================================================================
  1670                                  ;
  1671                                  ;       CPU Interrupt Handlers
  1672                                  ;
  1673                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1674                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1675                                  ;
  1676                                  ;=======================================================================================================================
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                  ;
  1679                                  ;       INT0    Divide By Zero
  1680                                  ;
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                                          menter  dividebyzero                                    ;divide by zero
  1683                                                          push    0                                               ;store interrupt nbr
  1684                                                          push    czIntDivideByZero                               ;store message offset
  1685                                                          jmp     ReportInterrupt                                 ;report interrupt
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       INT1    Single Step
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                                          menter  singlestep                                      ;single step
  1692                                                          push    1                                               ;store interrupt nbr
  1693                                                          push    czIntSingleStep                                 ;store message offset
  1694                                                          jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT2    Non-Maskable Interrupt
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  nmi                                             ;non-maskable
  1701                                                          push    2                                               ;store interrupt nbr
  1702                                                          push    czIntNonMaskable                                ;store message offset
  1703                                                          jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT3    Break
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  break                                           ;break
  1710                                                          push    3                                               ;store interrupt nbr
  1711                                                          push    czIntBreak                                      ;store message offset
  1712                                                          jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT4    Into
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  into                                            ;into
  1719                                                          push    4                                               ;store interrupt nbr
  1720                                                          push    czIntInto                                       ;store message offset
  1721                                                          jmp     ReportInterrupt                                 ;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT5    Bounds
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  bounds                                          ;bounds
  1728                                                          push    5                                               ;store interrupt nbr
  1729                                                          push    czIntBounds                                     ;store message offset
  1730                                                          jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT6    Bad Operation Code
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  badopcode                                       ;bad opcode interrupt
  1737                                                          push    6                                               ;store interrupt nbr
  1738                                                          push    czIntBadOpCode                                  ;store message offset
  1739                                                          jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT7    No Coprocessor
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1746                                                          push    7                                               ;store interrupt nbr
  1747                                                          push    czIntNoCoprocessor                              ;store message offset
  1748                                                          jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT8    Double Fault
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  doublefault                                     ;doublefault interrupt
  1755                                                          push    8                                               ;store interrupt nbr
  1756                                                          push    czIntDoubleFault                                ;store message offset
  1757                                                          jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT9    Operand
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  operand                                         ;operand interrupt
  1764                                                          push    9                                               ;store interrupt nbr
  1765                                                          push    czIntOperand                                    ;store message offset
  1766                                                          jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT10   Bad Task State Segment
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  badtss                                          ;bad TSS interrupt
  1773                                                          push    10                                              ;store interrupt nbr
  1774                                                          push    czIntBadTSS                                     ;store message offset
  1775                                                          jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT11   Not Present
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  notpresent                                      ;not present interrupt
  1782                                                          push    11                                              ;store interrupt nbr
  1783                                                          push    czIntNotPresent                                 ;store message offset
  1784                                                          jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT12   Stack Limit
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  stacklimit                                      ;stack limit interrupt
  1791                                                          push    12                                              ;store interrupt nbr
  1792                                                          push    czIntStackLimit                                 ;store message offset
  1793                                                          jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT13   General Protection Fault
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  protection                                      ;protection fault interrupt
  1800                                                          push    13                                              ;store interrupt nbr
  1801                                                          push    czIntProtection                                 ;store message offset
  1802                                                          jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT14   Reserved
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  int14                                           ;(reserved)
  1809                                                          push    14                                              ;store interrupt nbr
  1810                                                          push    czIntReserved                                   ;store message offset
  1811                                                          jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT15   Reserved
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  int15                                           ;(reserved)
  1818                                                          push    15                                              ;store interrupt nbr
  1819                                                          push    czIntReserved                                   ;store message offset
  1820                                                          jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT16   Coprocessor Calculation
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  coproccalc                                      ;coprocessor calculation
  1827                                                          push    16                                              ;store interrupt nbr
  1828                                                          push    czIntCoprocessorCalc                            ;store message offset
  1829                                                          jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT17   Reserved
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  int17                                           ;(reserved)
  1836                                                          push    17                                              ;store interrupt nbr
  1837                                                          push    czIntReserved                                   ;store message offset
  1838                                                          jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       INT18   Reserved
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  int18                                           ;(reserved)
  1845                                                          push    18                                              ;store interrupt nbr
  1846                                                          push    czIntReserved                                   ;store message offset
  1847                                                          jmp     ReportInterrupt                                 ;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       INT19   Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  int19                                           ;(reserved)
  1854                                                          push    19                                              ;store interrupt nbr
  1855                                                          push    czIntReserved                                   ;store message offset
  1856                                                          jmp     ReportInterrupt                                 ;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;       INT20   Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                                          menter  int20                                           ;(reserved)
  1863                                                          push    20                                              ;store interrupt nbr
  1864                                                          push    czIntReserved                                   ;store message offset
  1865                                                          jmp     ReportInterrupt                                 ;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;       INT21   Reserved
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                                          menter  int21                                           ;(reserved)
  1872                                                          push    21                                              ;store interrupt nbr
  1873                                                          push    czIntReserved                                   ;store message offset
  1874                                                          jmp     ReportInterrupt                                 ;report interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       INT22   Reserved
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                                          menter  int22                                           ;(reserved)
  1881                                                          push    22                                              ;store interrupt nbr
  1882                                                          push    czIntReserved                                   ;store message offset
  1883                                                          jmp     ReportInterrupt                                 ;report interrupt
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;       INT23   Reserved
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                                          menter  int23                                           ;(reserved)
  1890                                                          push    23                                              ;store interrupt nbr
  1891                                                          push    czIntReserved                                   ;store message offset
  1892                                                          jmp     ReportInterrupt                                 ;report interrupt
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  ;
  1895                                  ;       INT24   Reserved
  1896                                  ;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                                          menter  int24                                           ;(reserved)
  1899                                                          push    24                                              ;store interrupt nbr
  1900                                                          push    czIntReserved                                   ;store message offset
  1901                                                          jmp     ReportInterrupt                                 ;report interrupt
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  ;
  1904                                  ;       INT25   Reserved
  1905                                  ;
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                                          menter  int25                                           ;(reserved)
  1908                                                          push    25                                              ;store interrupt nbr
  1909                                                          push    czIntReserved                                   ;store message offset
  1910                                                          jmp     ReportInterrupt                                 ;report interrupt
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  ;
  1913                                  ;       INT26   Reserved
  1914                                  ;
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                                          menter  int26                                           ;(reserved)
  1917                                                          push    26                                              ;store interrupt nbr
  1918                                                          push    czIntReserved                                   ;store message offset
  1919                                                          jmp     ReportInterrupt                                 ;report interrupt
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  ;
  1922                                  ;       INT27   Reserved
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                                          menter  int27                                           ;(reserved)
  1926                                                          push    27                                              ;store interrupt nbr
  1927                                                          push    czIntReserved                                   ;store message offset
  1928                                                          jmp     ReportInterrupt                                 ;report interrupt
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       INT28   Reserved
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  int28                                           ;(reserved)
  1935                                                          push    28                                              ;store interrupt nbr
  1936                                                          push    czIntReserved                                   ;store message offset
  1937                                                          jmp     ReportInterrupt                                 ;report interrupt
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;       INT29   Reserved
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                                          menter  int29                                           ;(reserved)
  1944                                                          push    29                                              ;store interrupt nbr
  1945                                                          push    czIntReserved                                   ;store message offset
  1946                                                          jmp     ReportInterrupt                                 ;report interrupt
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                  ;
  1949                                  ;       INT30   Reserved
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                                          menter  int30                                           ;(reserved)
  1953                                                          push    30                                              ;store interrupt nbr
  1954                                                          push    czIntReserved                                   ;store message offset
  1955                                                          jmp     ReportInterrupt                                 ;report interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;       INT31   Reserved
  1959                                  ;
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                                          menter  int31                                           ;(reserved)
  1962                                                          push    31                                              ;store interrupt nbr
  1963                                                          push    czIntReserved                                   ;store message offset
  1964                                                          jmp     ReportInterrupt                                 ;report interrupt
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;       Routine:        ReportInterrupt
  1968                                  ;
  1969                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1970                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1971                                  ;
  1972                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1973                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1974                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1975                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1976                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1977                                  ;
  1978                                  ;       Out:            N/A             This routine does not exit.
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1982                                                          push    es                                              ;save ES at time of interrupt
  1983                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1984                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  1985                                  ;
  1986                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1987                                  ;
  1988                                  ;                       [EBP+56]        EFLAGS
  1989                                  ;                       [EBP+52]        CS
  1990                                  ;                       [EBP+48]        EIP
  1991                                  ;                       [EBP+44]        interrupt number (0-31)
  1992                                  ;                       [EBP+40]        error message address
  1993                                  ;                       [EBP+36]        DS
  1994                                  ;                       [EBP+32]        ES
  1995                                  ;                       [EBP+28]        EAX
  1996                                  ;                       [EBP+24]        ECX
  1997                                  ;                       [EBP+20]        EDX
  1998                                  ;                       [EBP+16]        EBX
  1999                                  ;                       [EBP+12]        ESP
  2000                                  ;                       [EBP+8]         EBP
  2001                                  ;                       [EBP+4]         ESI
  2002                                  ;                       [EBP+0]         EDI
  2003                                  ;
  2004                                                          push    cs                                              ;load code selector ...
  2005                                                          pop     ds                                              ;... into DS
  2006                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2007                                                          pop     es                                              ;... into ES
  2008                                  ;
  2009                                  ;       Display the interrupt report boundary box
  2010                                  ;
  2011                                                          mov     cl,13                                           ;column
  2012                                                          mov     ch,6                                            ;row
  2013                                                          mov     dl,50                                           ;width
  2014                                                          mov     dh,8                                            ;height
  2015                                                          mov     bh,07h                                          ;attribute
  2016                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2017                                  ;
  2018                                  ;       Display the report header
  2019                                  ;
  2020                                                          mov     cl,15                                           ;column
  2021                                                          mov     ch,7                                            ;row
  2022                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2023                                                          call    SetConsoleString                                ;draw text string
  2024                                  ;
  2025                                  ;       Display the interrupt description label
  2026                                  ;
  2027                                                          mov     cl,15                                           ;column
  2028                                                          mov     ch,8                                            ;row
  2029                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2030                                                          call    SetConsoleString                                ;draw text string
  2031                                  ;
  2032                                  ;       Display the interrupt number
  2033                                  ;
  2034                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2035                                                          mov     cl,26                                           ;column
  2036                                                          mov     ch,8                                            ;row
  2037                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2038                                  ;
  2039                                  ;       Display the interrupt name
  2040                                  ;
  2041                                                          mov     cl,29                                           ;column
  2042                                                          mov     ch,8                                            ;row
  2043                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2044                                                          call    SetConsoleString                                ;display interrupt description
  2045                                  ;
  2046                                  ;       Display the register values header
  2047                                  ;
  2048                                                          mov     cl,15                                           ;column
  2049                                                          mov     ch,10                                           ;row
  2050                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2051                                                          call    SetConsoleString                                ;draw text string
  2052                                  ;
  2053                                  ;       Display the EAX register label and value
  2054                                  ;
  2055                                                          mov     cl,15                                           ;column
  2056                                                          mov     ch,11                                           ;row
  2057                                                          mov     esi,czIntEAX                                    ;register EAX label
  2058                                                          call    SetConsoleString                                ;draw label
  2059                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2060                                                          mov     cl,19                                           ;column
  2061                                                          mov     ch,11                                           ;row
  2062                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2063                                  ;
  2064                                  ;       Display the ECX register label and value
  2065                                  ;
  2066                                                          mov     cl,15                                           ;column
  2067                                                          mov     ch,12                                           ;row
  2068                                                          mov     esi,czIntECX                                    ;label
  2069                                                          call    SetConsoleString                                ;draw label
  2070                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2071                                                          mov     cl,19                                           ;column
  2072                                                          mov     ch,12                                           ;row
  2073                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2074                                  ;
  2075                                  ;       Display the EDX register label and value
  2076                                  ;
  2077                                                          mov     cl,15                                           ;column
  2078                                                          mov     ch,13                                           ;row
  2079                                                          mov     esi,czIntEDX                                    ;label
  2080                                                          call    SetConsoleString                                ;draw label
  2081                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2082                                                          mov     cl,19                                           ;column
  2083                                                          mov     ch,13                                           ;row
  2084                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2085                                  ;
  2086                                  ;       Display the EBX register label and value
  2087                                  ;
  2088                                                          mov     cl,15                                           ;column
  2089                                                          mov     ch,14                                           ;row
  2090                                                          mov     esi,czIntEBX                                    ;label
  2091                                                          call    SetConsoleString                                ;draw label
  2092                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2093                                                          mov     cl,19                                           ;column
  2094                                                          mov     ch,14                                           ;row
  2095                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2096                                  ;
  2097                                  ;       Display the ESI register label and value
  2098                                  ;
  2099                                                          mov     cl,29                                           ;column
  2100                                                          mov     ch,11                                           ;row
  2101                                                          mov     esi,czIntESI                                    ;label
  2102                                                          call    SetConsoleString                                ;draw label
  2103                                                          mov     eax,[ebp+4]                                     ;ESI
  2104                                                          mov     cl,33                                           ;column
  2105                                                          mov     ch,11                                           ;row
  2106                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2107                                  ;
  2108                                  ;       Display the EDI register label and value
  2109                                  ;
  2110                                                          mov     cl,29                                           ;column
  2111                                                          mov     ch,12                                           ;row
  2112                                                          mov     esi,czIntEDI                                    ;label
  2113                                                          call    SetConsoleString                                ;draw label
  2114                                                          mov     eax,[ebp+0]                                     ;EDI
  2115                                                          mov     cl,33                                           ;column
  2116                                                          mov     ch,12                                           ;row
  2117                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2118                                  ;
  2119                                  ;       Display the EBP register label and value
  2120                                  ;
  2121                                                          mov     cl,29                                           ;column
  2122                                                          mov     ch,13                                           ;row
  2123                                                          mov     esi,czIntEBP                                    ;label
  2124                                                          call    SetConsoleString                                ;draw label
  2125                                                          mov     eax,[ebp+8]                                     ;EBP
  2126                                                          mov     cl,33                                           ;column
  2127                                                          mov     ch,13                                           ;row
  2128                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2129                                  ;
  2130                                  ;       Display the DS register label and value
  2131                                  ;
  2132                                                          mov     cl,42                                           ;column
  2133                                                          mov     ch,11                                           ;row
  2134                                                          mov     esi,czIntDS                                     ;label
  2135                                                          call    SetConsoleString                                ;draw label
  2136                                                          xor     eax,eax                                         ;zero register
  2137                                                          mov     ax,[ebp+36]                                     ;DS
  2138                                                          mov     cl,46                                           ;column
  2139                                                          mov     ch,11                                           ;row
  2140                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2141                                  ;
  2142                                  ;       Display the ES register label and value
  2143                                  ;
  2144                                                          mov     cl,42                                           ;column
  2145                                                          mov     ch,12                                           ;row
  2146                                                          mov     esi,czIntES                                     ;label
  2147                                                          call    SetConsoleString                                ;draw label
  2148                                                          xor     eax,eax                                         ;zero register
  2149                                                          mov     ax,[ebp+32]                                     ;ES
  2150                                                          mov     cl,46                                           ;column
  2151                                                          mov     ch,12                                           ;row
  2152                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2153                                  ;
  2154                                  ;       Display the SS register label and value
  2155                                  ;
  2156                                                          mov     cl,42                                           ;column
  2157                                                          mov     ch,13                                           ;row
  2158                                                          mov     esi,czIntSS                                     ;label
  2159                                                          call    SetConsoleString                                ;draw label
  2160                                                          xor     eax,eax                                         ;zero register
  2161                                                          mov     ax,ss                                           ;SS
  2162                                                          mov     cl,46                                           ;column
  2163                                                          mov     ch,13                                           ;row
  2164                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2165                                  ;
  2166                                  ;       Display the CS register lable and value
  2167                                  ;
  2168                                                          mov     cl,42                                           ;column
  2169                                                          mov     ch,14                                           ;row
  2170                                                          mov     esi,czIntCS                                     ;label
  2171                                                          call    SetConsoleString                                ;draw label
  2172                                                          xor     eax,eax                                         ;zero register
  2173                                                          mov     ax,[ebp+52]                                     ;CS
  2174                                                          mov     cl,46                                           ;column
  2175                                                          mov     ch,14                                           ;row
  2176                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2177                                  ;
  2178                                  ;       Display the EFLAGS register label and value
  2179                                  ;
  2180                                                          mov     cl,51                                           ;column
  2181                                                          mov     ch,11                                           ;row
  2182                                                          mov     esi,czIntEFLAGS                                 ;label
  2183                                                          call    SetConsoleString                                ;draw label
  2184                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2185                                                          mov     cl,55                                           ;column
  2186                                                          mov     ch,11                                           ;row
  2187                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2188                                  ;
  2189                                  ;       Display the ESP register label and value
  2190                                  ;
  2191                                                          mov     cl,51                                           ;column
  2192                                                          mov     ch,13                                           ;row
  2193                                                          mov     esi,czIntESP                                    ;label
  2194                                                          call    SetConsoleString                                ;draw label
  2195                                                          mov     eax,[ebp+12]                                    ;ESP
  2196                                                          mov     cl,55                                           ;column
  2197                                                          mov     ch,13                                           ;row
  2198                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2199                                  ;
  2200                                  ;       Display the EIP register label and value
  2201                                  ;
  2202                                                          mov     cl,51                                           ;column
  2203                                                          mov     ch,14                                           ;row
  2204                                                          mov     esi,czIntEIP                                    ;label
  2205                                                          call    SetConsoleString                                ;draw label
  2206                                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2207                                                          mov     cl,55                                           ;column
  2208                                                          mov     ch,14                                           ;row
  2209                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2210                                  ;
  2211                                  ;       Halt and loop until reset
  2212                                  ;
  2213                                  .10                     sti                                                     ;enable maskable interrupts
  2214                                                          hlt                                                     ;halt processor
  2215                                                          jmp     .10                                             ;resume on interrupt
  2216                                  ;-----------------------------------------------------------------------------------------------------------------------
  2217                                  ;
  2218                                  ;       Processor Interrupt Name Strings
  2219                                  ;
  2220                                  ;-----------------------------------------------------------------------------------------------------------------------
  2221                                  czIntDivideByZero       db      "Division by zero",0
  2222                                  czIntSingleStep         db      "Single step",0
  2223                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2224                                  czIntBreak              db      "Break",0
  2225                                  czIntInto               db      "Into",0
  2226                                  czIntBounds             db      "Bounds",0
  2227                                  czIntBadOpCode          db      "Bad Operation Code",0
  2228                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2229                                  czIntDoubleFault        db      "Double Fault",0
  2230                                  czIntOperand            db      "Operand",0
  2231                                  czIntBadTSS             db      "Bad Task State Segment",0
  2232                                  czIntNotPresent         db      "Not Present",0
  2233                                  czIntStackLimit         db      "Stack Limit",0
  2234                                  czIntProtection         db      "General Protection Fault",0
  2235                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2236                                  czIntReserved           db      "Reserved",0
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                  ;
  2239                                  ;       Processor Interrupt Handling Strings
  2240                                  ;
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2243                                  czIntLabel              db      "Interrupt #",0
  2244                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2245                                  czIntEAX                db      "EAX:",0
  2246                                  czIntECX                db      "ECX:",0
  2247                                  czIntEDX                db      "EDX:",0
  2248                                  czIntEBX                db      "EBX:",0
  2249                                  czIntESI                db      "ESI:",0
  2250                                  czIntEDI                db      "EDI:",0
  2251                                  czIntEBP                db      "EBP:",0
  2252                                  czIntESP                db      "ESP:",0
  2253                                  czIntDS                 db      " DS:",0
  2254                                  czIntES                 db      " ES:",0
  2255                                  czIntSS                 db      " SS:",0
  2256                                  czIntCS                 db      " CS:",0
  2257                                  czIntEFLAGS             db      "FLG:",0
  2258                                  czIntEIP                db      "EIP:",0
  2259                                  ;-----------------------------------------------------------------------------------------------------------------------
  2260                                  ;
  2261                                  ;       Routine:        DrawTextDialogBox
  2262                                  ;
  2263                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2264                                  ;
  2265                                  ;       In:             CL      upper left column (0-79)
  2266                                  ;                       CH      upper left row (0-24)
  2267                                  ;                       DL      column width, excluding border
  2268                                  ;                       DH      row height, excluding border
  2269                                  ;                       BH      color attribute
  2270                                  ;
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2273                                                          push    esi                                             ;
  2274                                                          push    edi                                             ;
  2275                                                          push    es                                              ;
  2276                                                          push    EGDTCGA                                         ;load CGA selector ...
  2277                                                          pop     es                                              ;... into ES
  2278                                  ;
  2279                                  ;       Compute target display offset
  2280                                  ;
  2281                                                          xor     eax,eax                                         ;zero register
  2282                                                          mov     al,ch                                           ;row
  2283                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2284                                                          mul     ah                                              ;row offset
  2285                                                          add     al,cl                                           ;add column
  2286                                                          adc     ah,0                                            ;add overflow
  2287                                                          add     al,cl                                           ;add column
  2288                                                          adc     ah,0                                            ;add overflow
  2289                                                          mov     edi,eax                                         ;target row offset
  2290                                  ;
  2291                                  ;       Display top border row
  2292                                  ;
  2293                                                          push    edi                                             ;save target row offset
  2294                                                          mov     ah,bh                                           ;attribute
  2295                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2296                                                          stosw                                                   ;display character and attribute
  2297                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2298                                                          xor     ecx,ecx                                         ;zero register
  2299                                                          mov     cl,dl                                           ;width, excluding border
  2300                                                          rep     stosw                                           ;display horizontal border
  2301                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2302                                                          stosw                                                   ;display character and attribute
  2303                                                          pop     edi                                             ;restore target row offset
  2304                                                          add     edi,ECONROWBYTES                                ;next row
  2305                                  ;
  2306                                  ;       Display dialog box body rows
  2307                                  ;
  2308                                                          xor     ecx,ecx                                         ;zero register
  2309                                                          mov     cl,dh                                           ;height, excluding border
  2310                                  .10                     push    ecx                                             ;save remaining rows
  2311                                                          push    edi                                             ;save target row offset
  2312                                                          mov     ah,bh                                           ;attribute
  2313                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2314                                                          stosw                                                   ;display character and attribute
  2315                                                          mov     al,EASCIISPACE                                  ;space
  2316                                                          xor     ecx,ecx                                         ;zero register
  2317                                                          mov     cl,dl                                           ;width, excluding border
  2318                                                          rep     stosw                                           ;display row
  2319                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2320                                                          stosw                                                   ;display character and attribute
  2321                                                          pop     edi                                             ;restore target row offset
  2322                                                          add     edi,ECONROWBYTES                                ;next row
  2323                                                          pop     ecx                                             ;remaining rows
  2324                                                          loop    .10                                             ;next row
  2325                                  ;
  2326                                  ;       Display bottom border row
  2327                                  ;
  2328                                                          push    edi                                             ;save target row offset
  2329                                                          mov     ah,bh                                           ;attribute
  2330                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2331                                                          stosw                                                   ;display character and attribute
  2332                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2333                                                          xor     ecx,ecx                                         ;zero register
  2334                                                          mov     cl,dl                                           ;width, excluding border
  2335                                                          rep     stosw                                           ;display horizontal border
  2336                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2337                                                          stosw                                                   ;display character and attribute
  2338                                                          pop     edi                                             ;restore target row offset
  2339                                                          add     edi,ECONROWBYTES                                ;next row
  2340                                  ;
  2341                                  ;       Restore and return
  2342                                  ;
  2343                                                          pop     es                                              ;restore non-volatile regs
  2344                                                          pop     edi                                             ;
  2345                                                          pop     esi                                             ;
  2346                                                          pop     ecx                                             ;
  2347                                                          ret                                                     ;return
  2348                                  ;=======================================================================================================================
  2349                                  ;
  2350                                  ;       Hardware Device Interupts
  2351                                  ;
  2352                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2353                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2354                                  ;       (BX=2028h).
  2355                                  ;
  2356                                  ;=======================================================================================================================
  2357                                  ;-----------------------------------------------------------------------------------------------------------------------
  2358                                  ;
  2359                                  ;       IRQ0    Clock Tick Interrupt
  2360                                  ;
  2361                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2362                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2363                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2364                                  ;
  2365                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2366                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2367                                  ;
  2368                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2369                                  ;       zero, the floppy disk motors are turned off.
  2370                                  ;
  2371                                  ;-----------------------------------------------------------------------------------------------------------------------
  2372                                                          menter  clocktick                                       ;clock tick interrupt
  2373                                                          push    eax                                             ;save non-volatile regs
  2374                                                          push    edx                                             ;
  2375                                                          push    ds                                              ;
  2376                                  ;
  2377                                  ;       Update the clock tick count and the elapsed days as needed.
  2378                                  ;
  2379                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2380                                                          pop     ds                                              ;... into data segment register
  2381                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2382                                                          inc     eax                                             ;increment clock ticks
  2383                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2384                                                          jb      irq0.10                                         ;no, skip ahead
  2385                                                          inc     byte [wbClockDays]                              ;increment clock days
  2386                                                          xor     eax,eax                                         ;reset clock ticks
  2387                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2388                                  ;
  2389                                  ;       Decrement floppy disk motor timeout.
  2390                                  ;
  2391                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2392                                                          je      irq0.20                                         ;yes, skip ahead
  2393                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2394                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2395                                  ;
  2396                                  ;       Turn off the floppy disk motor if appropriate.
  2397                                  ;
  2398                                                          sti                                                     ;enable maskable interrupts
  2399                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2400                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2401                                                          in      al,dx                                           ;FDC main status byte
  2402                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2403                                                          jnz     irq0.15                                         ;wait while busy
  2404                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2405                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2406                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2407                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2408                                                          out     dx,al                                           ;turn motor off
  2409                                  ;
  2410                                  ;       Signal the end of the hardware interrupt.
  2411                                  ;
  2412                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2413                                  ;
  2414                                  ;       Restore and return.
  2415                                  ;
  2416                                                          pop     ds                                              ;restore modified regs
  2417                                                          pop     edx                                             ;
  2418                                                          pop     eax                                             ;
  2419                                                          iretd                                                   ;return
  2420                                  ;-----------------------------------------------------------------------------------------------------------------------
  2421                                  ;
  2422                                  ;       IRQ1    Keyboard Interrupt
  2423                                  ;
  2424                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2425                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2426                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2427                                  ;       ALL modified registers upon return.
  2428                                  ;
  2429                                  ;-----------------------------------------------------------------------------------------------------------------------
  2430                                                          menter  keyboard                                        ;keyboard interrrupt
  2431                                                          push    eax                                             ;save non-volatile regs
  2432                                                          push    ebx                                             ;
  2433                                                          push    ecx                                             ;
  2434                                                          push    esi                                             ;
  2435                                                          push    ds                                              ;
  2436                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2437                                                          pop     ds                                              ;... into data segment register
  2438                                                          xor     al,al                                           ;zero
  2439                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2440                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2441                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2442                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2443                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2444                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2445                                                          mov     al,' '                                          ;space
  2446                                                          mov     [wbConsoleChar],al                              ;set character to space
  2447                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2448                                                          not     al                                              ;controller timeout mask
  2449                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2450                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2451                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2452                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2453                                                          jz      irq1.140                                        ;yes, skip ahead
  2454                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2455                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2456                                                          mov     ah,al                                           ;copy scan code 0
  2457                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2458                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2459                                                          je      irq1.30                                         ;yes, set flag
  2460                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2461                                                          je      irq1.40                                         ;yes, reset flag
  2462                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2463                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2464                                                          je      irq1.30                                         ;yes, set flag
  2465                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2466                                                          je      irq1.40                                         ;yes, reset flag
  2467                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2468                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2469                                                          je      irq1.30                                         ;yes, set flag
  2470                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2471                                                          je      irq1.40                                         ;yes, reset flag
  2472                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2473                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2474                                                          je      irq1.30                                         ;yes, set flag
  2475                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2476                                                          je      irq1.40                                         ;yes, reset flag
  2477                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2478                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2479                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2480                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2481                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2482                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2483                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2484                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2485                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2486                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2487                                                          jne     irq1.70                                         ;no, skip ahead
  2488                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2489                                                          jz      irq1.140                                        ;yes, skip ahead
  2490                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2491                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2492                                                          mov     ah,al                                           ;copy scan code 1
  2493                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2494                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2495                                                          je      irq1.30                                         ;yes, set flag
  2496                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2497                                                          je      irq1.40                                         ;yes, reset flag
  2498                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2499                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2500                                                          je      irq1.30                                         ;yes, set flag
  2501                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2502                                                          je      irq1.40                                         ;yes, reset flag
  2503                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2504                                                          je      irq1.80                                         ;yes, skip ahead
  2505                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2506                                                          je      irq1.80                                         ;yes, skip ahead
  2507                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2508                                                          je      irq1.10                                         ;yes, continue
  2509                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2510                                                          jne     irq1.20                                         ;no, skip ahead
  2511                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2512                                                          jz      irq1.140                                        ;yes, skip ahead
  2513                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2514                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2515                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2516                                                          jz      irq1.140                                        ;yes, skip ahead
  2517                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2518                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2519                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2520                                  irq1.30                 or      bl,al                                           ;set shift flag
  2521                                                          jmp     irq1.60                                         ;skip ahead
  2522                                  irq1.40                 not     al                                              ;convert flag to mask
  2523                                                          and     bl,al                                           ;reset shift flag
  2524                                                          jmp     irq1.60                                         ;skip ahead
  2525                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2526                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2527                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2528                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2529                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2530                                                          jmp     irq1.150                                        ;finish keyboard handling
  2531                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2532                                                          jne     irq1.80                                         ;no continue
  2533                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2534                                                          jz      irq1.140                                        ;yes, skip ahead
  2535                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2536                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2537                                                          mov     ah,al                                           ;copy scan code 1
  2538                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2539                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2540                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2541                                                          jz      irq1.140                                        ;yes, skip ahead
  2542                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2543                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2544                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2545                                                          jz      irq1.140                                        ;yes, skip ahead
  2546                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2547                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2548                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2549                                                          jz      irq1.140                                        ;yes, skip ahead
  2550                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2551                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2552                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2553                                                          jz      irq1.140                                        ;yes, skip ahead
  2554                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2555                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2556                                                          jmp     irq1.150                                        ;continue
  2557                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2558                                                          test    ah,EKEYBUP                                      ;release code?
  2559                                                          jnz     irq1.130                                        ;yes, skip ahead
  2560                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2561                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2562                                                          jz      irq1.90                                         ;no, skip ahead
  2563                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2564                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2565                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2566                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2567                                                          jz      irq1.100                                        ;no skip ahead
  2568                                                          mov     cl,al                                           ;copy ASCII code
  2569                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2570                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2571                                                          jb      irq1.100                                        ;yes, skip ahead
  2572                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2573                                                          ja      irq1.100                                        ;yes, skip ahead
  2574                                                          xor     al,EASCIICASE                                   ;switch case
  2575                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2576                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2577                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2578                                                          jz      irq1.120                                        ;no, skip ahead
  2579                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2580                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2581                                                          or      edx,eax                                         ;msg id and codes
  2582                                                          xor     ecx,ecx                                         ;null param
  2583                                                          push    eax                                             ;save codes
  2584                                                          call    PutMessage                                      ;put message to console
  2585                                                          pop     eax                                             ;restore codes
  2586                                                          test    al,al                                           ;ASCII translation?
  2587                                                          jz      irq1.130                                        ;no, skip ahead
  2588                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2589                                                          and     eax,0FFFFh                                      ;clear high-order word
  2590                                                          or      edx,eax                                         ;msg id and codes
  2591                                                          xor     ecx,ecx                                         ;null param
  2592                                                          call    PutMessage                                      ;put message to console
  2593                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2594                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2595                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2596                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2597                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2598                                                          pop     ds                                              ;restore non-volatile regs
  2599                                                          pop     esi                                             ;
  2600                                                          pop     ecx                                             ;
  2601                                                          pop     ebx                                             ;
  2602                                                          pop     eax                                             ;
  2603                                                          iretd                                                   ;return
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                  ;       Scan-Code to ASCII Translation Tables
  2606                                  ;-----------------------------------------------------------------------------------------------------------------------
  2607                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2608                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2609                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2610                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2611                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2612                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2613                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2614                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2615                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2616                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2617                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2618                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2619                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2620                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2621                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2622                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2623                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2624                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2625                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2626                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2627                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2628                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2629                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2630                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2631                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2632                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2633                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2634                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2635                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2636                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2637                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2638                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                  ;
  2641                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2642                                  ;
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                                          menter  iochannel                                       ;secondary 8259A cascade
  2645                                                          push    eax                                             ;save modified regs
  2646                                                          jmp     hwint                                           ;end interrupt and return
  2647                                  ;-----------------------------------------------------------------------------------------------------------------------
  2648                                  ;
  2649                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2650                                  ;
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                                          menter  com2                                            ;serial port 2 interrupt
  2653                                                          push    eax                                             ;save modified regs
  2654                                                          jmp     hwint                                           ;end interrupt and return
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                  ;
  2657                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2658                                  ;
  2659                                  ;-----------------------------------------------------------------------------------------------------------------------
  2660                                                          menter  com1                                            ;serial port 1 interrupt
  2661                                                          push    eax                                             ;save modified regs
  2662                                                          jmp     hwint                                           ;end interrupt and return
  2663                                  ;-----------------------------------------------------------------------------------------------------------------------
  2664                                  ;
  2665                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2666                                  ;
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2669                                                          push    eax                                             ;save modified regs
  2670                                                          jmp     hwint                                           ;end interrupt and return
  2671                                  ;-----------------------------------------------------------------------------------------------------------------------
  2672                                  ;
  2673                                  ;       IRQ6    Diskette Hardware Interrupt
  2674                                  ;
  2675                                  ;-----------------------------------------------------------------------------------------------------------------------
  2676                                                          menter  diskette                                        ;floppy disk interrupt
  2677                                                          push    eax                                             ;save non-volatile regs
  2678                                                          push    ds                                              ;
  2679                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2680                                                          pop     ds                                              ;... into DS register
  2681                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2682                                                          or      al,10000000b                                    ;set IRQ flag
  2683                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2684                                                          pop     ds                                              ;restore non-volatile regs
  2685                                                          jmp     hwint                                           ;end primary PIC interrupt
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                  ;
  2688                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2689                                  ;
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2692                                                          push    eax                                             ;save modified regs
  2693                                                          jmp     hwint                                           ;end interrupt and return
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ;
  2696                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2697                                  ;
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                                          menter  rtclock                                         ;real-time clock interrupt
  2700                                                          push    eax                                             ;save modified regs
  2701                                                          jmp     hwwint                                          ;end interrupt and return
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  ;
  2704                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2708                                                          push    eax                                             ;save modified regs
  2709                                                          jmp     hwwint                                          ;end interrupt and return
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;
  2712                                  ;       IRQ10   Reserved Hardware Interrupt
  2713                                  ;
  2714                                  ;-----------------------------------------------------------------------------------------------------------------------
  2715                                                          menter  irq10                                           ;reserved
  2716                                                          push    eax                                             ;save modified regs
  2717                                                          jmp     hwwint                                          ;end interrupt and return
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;       IRQ11   Reserved Hardware Interrupt
  2721                                  ;
  2722                                  ;-----------------------------------------------------------------------------------------------------------------------
  2723                                                          menter  irq11                                           ;reserved
  2724                                                          push    eax                                             ;save modified regs
  2725                                                          jmp     hwwint                                          ;end interrupt and return
  2726                                  ;-----------------------------------------------------------------------------------------------------------------------
  2727                                  ;
  2728                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2729                                  ;
  2730                                  ;-----------------------------------------------------------------------------------------------------------------------
  2731                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2732                                                          push    eax                                             ;save modified regs
  2733                                                          jmp     hwwint                                          ;end interrupt and return
  2734                                  ;-----------------------------------------------------------------------------------------------------------------------
  2735                                  ;
  2736                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2737                                  ;
  2738                                  ;-----------------------------------------------------------------------------------------------------------------------
  2739                                                          menter  coprocessor                                     ;coprocessor interrupt
  2740                                                          push    eax                                             ;save modified regs
  2741                                                          jmp     hwwint                                          ;end interrupt and return
  2742                                  ;-----------------------------------------------------------------------------------------------------------------------
  2743                                  ;
  2744                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2745                                  ;
  2746                                  ;-----------------------------------------------------------------------------------------------------------------------
  2747                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2748                                                          push    eax                                             ;save modified regs
  2749                                                          jmp     hwwint                                          ;end interrupt and return
  2750                                  ;-----------------------------------------------------------------------------------------------------------------------
  2751                                  ;
  2752                                  ;       IRQ15   Reserved Hardware Interrupt
  2753                                  ;
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                                          menter  irq15                                           ;reserved
  2756                                                          push    eax                                             ;save modified regs
  2757                                                          jmp     hwwint                                          ;end interrupt and return
  2758                                  ;-----------------------------------------------------------------------------------------------------------------------
  2759                                  ;
  2760                                  ;       Exit from hardware interrupt
  2761                                  ;
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2764                                                          jmp     hwint90                                         ;skip ahead
  2765                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2766                                  hwint90                 pop     eax                                             ;restore modified regs
  2767                                                          iretd                                                   ;return from interrupt
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769                                  ;
  2770                                  ;       INT 30h Operating System Software Service Interrupt
  2771                                  ;
  2772                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2773                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2774                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2775                                  ;       the entry address of the specific function from a table.
  2776                                  ;
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                                          menter  svc
  2779                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2780                                                          jae     svc90                                           ;yes, skip ahead
  2781                                                          movzx   eax,al                                          ;function
  2782                                                          shl     eax,2                                           ;offset into table
  2783                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2784                                  svc90                   iretd                                                   ;return from interrupt
  2785                                  ;-----------------------------------------------------------------------------------------------------------------------
  2786                                  ;
  2787                                  ;       Service Request Table
  2788                                  ;
  2789                                  ;
  2790                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2791                                  ;
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2794                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2795                                                          tsvce   CompareMemory                                   ;compare memory
  2796                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2797                                                          tsvce   FreeMemory                                      ;free memory block
  2798                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2799                                                          tsvce   GetConsoleString                                ;get string input
  2800                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2801                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2802                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2803                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2804                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2805                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2806                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2807                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2808                                                          tsvce   UpperCaseString                                 ;upper-case string
  2809                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2810                                  ;-----------------------------------------------------------------------------------------------------------------------
  2811                                  ;
  2812                                  ;       Service Request Macros
  2813                                  ;
  2814                                  ;       These macros provide positional parameterization of service request calls.
  2815                                  ;
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  %macro                  allocateMemory 1
  2818                                                          mov     ecx,%1                                          ;bytes to allocate
  2819                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2820                                                          int     _svc                                            ;invoke OS service
  2821                                  %endmacro
  2822                                  %macro                  clearConsoleScreen 0
  2823                                                          mov     al,eClearConsoleScreen                          ;function code
  2824                                                          int     _svc                                            ;invoke OS service
  2825                                  %endmacro
  2826                                  %macro                  compareMemory 0
  2827                                                          mov     al,eCompareMemory                               ;function code
  2828                                                          int     _svc                                            ;invoke OS service
  2829                                  %endmacro
  2830                                  %macro                  decimalToUnsigned 0
  2831                                                          mov     al,eDecimalToUnsigned                           ;function code
  2832                                                          int     _svc                                            ;invoke OS servie
  2833                                  %endmacro
  2834                                  %macro                  freeMemory 1
  2835                                                          mov     edx,%1                                          ;address of memory block
  2836                                                          mov     al,eFreeMemory                                  ;function code
  2837                                                          int     _svc                                            ;invoke OS service
  2838                                  %endmacro
  2839                                  %macro                  getBaseMemSize 0
  2840                                                          mov     al,eGetBaseMemSize                              ;function code
  2841                                                          int     _svc                                            ;invoke OS service
  2842                                  %endmacro
  2843                                  %macro                  getConsoleString 4
  2844                                                          mov     edx,%1                                          ;buffer address
  2845                                                          mov     ecx,%2                                          ;max characters
  2846                                                          mov     bh,%3                                           ;echo indicator
  2847                                                          mov     bl,%4                                           ;terminator
  2848                                                          mov     al,eGetConsoleString                            ;function code
  2849                                                          int     _svc                                            ;invoke OS service
  2850                                  %endmacro
  2851                                  %macro                  getExtendedMemSize 0
  2852                                                          mov     al,eGetExtendedMemSize                          ;function code
  2853                                                          int     _svc                                            ;invoke OS service
  2854                                  %endmacro
  2855                                  %macro                  getROMMemSize 0
  2856                                                          mov     al,eGetROMMemSize                               ;function code
  2857                                                          int     _svc                                            ;invoke OS service
  2858                                  %endmacro
  2859                                  %macro                  hexadecimalToUnsigned 0
  2860                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2861                                                          int     _svc                                            ;invoke OS service
  2862                                  %endmacro
  2863                                  %macro                  placeCursor 0
  2864                                                          mov     al,ePlaceCursor                                 ;function code
  2865                                                          int     _svc                                            ;invoke OS service
  2866                                  %endmacro
  2867                                  %macro                  putConsoleString 1
  2868                                                          mov     edx,%1                                          ;string address
  2869                                                          mov     al,ePutConsoleString                            ;function code
  2870                                                          int     _svc                                            ;invoke OS service
  2871                                  %endmacro
  2872                                  %macro                  resetSystem 0
  2873                                                          mov     al,eResetSystem                                 ;function code
  2874                                                          int     _svc                                            ;invoke OS service
  2875                                  %endmacro
  2876                                  %macro                  unsignedToDecimalString 0
  2877                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2878                                                          int     _svc                                            ;invoke OS service
  2879                                  %endmacro
  2880                                  %macro                  unsignedToHexadecimal 0
  2881                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2882                                                          int     _svc                                            ;invoke OS service
  2883                                  %endmacro
  2884                                  %macro                  upperCaseString 0
  2885                                                          mov     al,eUpperCaseString                             ;function code
  2886                                                          int     _svc                                            ;invoke OS service
  2887                                  %endmacro
  2888                                  ;=======================================================================================================================
  2889                                  ;
  2890                                  ;       Kernel Function Library
  2891                                  ;
  2892                                  ;=======================================================================================================================
  2893                                  ;=======================================================================================================================
  2894                                  ;
  2895                                  ;       Memory Helper Routines
  2896                                  ;
  2897                                  ;       AllocateMemory
  2898                                  ;       FreeMemory
  2899                                  ;
  2900                                  ;=======================================================================================================================
  2901                                  ;-----------------------------------------------------------------------------------------------------------------------
  2902                                  ;
  2903                                  ;       Routine:        AllocateMemory
  2904                                  ;
  2905                                  ;       Description:    This routine allocates a memory block for the given task.
  2906                                  ;
  2907                                  ;       In:             ECX     bytes of memory to allocate
  2908                                  ;
  2909                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  2910                                  ;                               0       unable to allocate memory
  2911                                  ;
  2912                                  ;-----------------------------------------------------------------------------------------------------------------------
  2913                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  2914                                                          push    ecx                                             ;
  2915                                                          push    esi                                             ;
  2916                                                          push    ds                                              ;
  2917                                  ;
  2918                                  ;       Address kernel memory structures
  2919                                  ;
  2920                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  2921                                                          pop     ds                                              ;... into data segment reg
  2922                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  2923                                  ;
  2924                                  ;       Set requested size to minimum block size if requested size is too small.
  2925                                  ;
  2926                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  2927                                                          jae     .10                                             ;no, branch
  2928                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  2929                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  2930                                  ;
  2931                                  ;       Find the first free memory block large enough to satisfy the request.
  2932                                  ;
  2933                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  2934                                  .20                     test    eax,eax                                         ;end of free block chain?
  2935                                                          jz      .220                                            ;yes, branch
  2936                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  2937                                                          jbe     .30                                             ;yes, branch
  2938                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2939                                                          jmp     .20                                             ;continue
  2940                                  ;-----------------------------------------------------------------------------------------------------------------------
  2941                                  ;
  2942                                  ;       Address the previous and next free memory blocks.
  2943                                  ;
  2944                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  2945                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2946                                  ;
  2947                                  ;       Remove the free memory block from the forward free memory block chain.
  2948                                  ;
  2949                                                          test    ebx,ebx                                         ;any previous free memory block?
  2950                                                          jz      .40                                             ;no, branch
  2951                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  2952                                                          jmp     .50                                             ;continue
  2953                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  2954                                  ;
  2955                                  ;       Remove the free memory block from the reverse free memory block chain.
  2956                                  ;
  2957                                  .50                     test    edx,edx                                         ;any next free memory block?
  2958                                                          jz      .60                                             ;no, branch
  2959                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  2960                                                          jmp     .70                                             ;continue
  2961                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  2962                                  ;-----------------------------------------------------------------------------------------------------------------------
  2963                                  ;
  2964                                  ;       Determine if the free memory block can be split.
  2965                                  ;
  2966                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  2967                                                          sub     ebx,ecx                                         ;subtract requested memory size
  2968                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  2969                                                          jb      .150                                            ;no, branch
  2970                                  ;
  2971                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  2972                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  2973                                  ;       of the requested memory size.
  2974                                  ;
  2975                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  2976                                                          mov     edx,eax                                         ;memory block address
  2977                                                          add     edx,ecx                                         ;address new new next contig block
  2978                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  2979                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  2980                                  ;
  2981                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  2982                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  2983                                  ;
  2984                                                          jecxz   .80                                             ;no next contig, branch
  2985                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  2986                                                          jmp     .90                                             ;continue
  2987                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  2988                                  ;
  2989                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  2990                                  ;
  2991                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  2992                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  2993                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  2994                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  2995                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  2996                                                          xor     ebx,ebx                                         ;zero register
  2997                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  2998                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  2999                                  ;
  3000                                  ;       Find the proper location in the free block chain for the new free block
  3001                                  ;
  3002                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3003                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3004                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3005                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3006                                                          jbe     .110                                            ;yes, branch
  3007                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3008                                                          jmp     .100                                            ;continue
  3009                                  ;
  3010                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3011                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3012                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3013                                  ;       block of hte next block, if there is one.
  3014                                  ;
  3015                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3016                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3017                                                          jecxz   .120                                            ;branch if no next block
  3018                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3019                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3020                                                          jmp     .130                                            ;continue
  3021                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3022                                  ;
  3023                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3024                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3025                                  ;       last user block pointers if necessary.
  3026                                  ;
  3027                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3028                                                          test    ebx,ebx                                         ;is there a previous block?
  3029                                                          jz      .140                                            ;no, branch
  3030                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3031                                                          jmp     .150                                            ;continue
  3032                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3033                                  ;
  3034                                  ;       Update the newly allocated block's owner and signature.
  3035                                  ;
  3036                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3037                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3038                                                          xor     edx,edx                                         ;zero register
  3039                                                          str     dx                                              ;load the task state register
  3040                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3041                                  ;
  3042                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3043                                  ;
  3044                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3045                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3046                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3047                                                          jb      .180                                            ;branch if block belongs to next task
  3048                                                          je      .170                                            ;branch if block belongs to this task
  3049                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3050                                                          jmp     .160                                            ;continue
  3051                                  ;
  3052                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3053                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3054                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3055                                  ;       place to insert the block.
  3056                                  ;
  3057                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3058                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3059                                                          jbe     .180                                            ;yes, branch
  3060                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3061                                                          test    ecx,ecx                                         ;end of chain?
  3062                                                          jz      .180                                            ;yes, branch
  3063                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3064                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3065                                                          je      .170                                            ;yes, continue search
  3066                                  ;
  3067                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3068                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3069                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3070                                  ;       do have a previous-block, we update that block's next-block pointer.
  3071                                  ;
  3072                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3073                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3074                                                          jecxz   .190                                            ;branch if no next-task block
  3075                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3076                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3077                                                          jmp     .200                                            ;continue
  3078                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3079                                  ;
  3080                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3081                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3082                                  ;       global first and/or last user-block pointers if necessary.
  3083                                  ;
  3084                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3085                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3086                                                          jz      .210                                            ;no, branch
  3087                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3088                                                          jmp     .220                                            ;continue
  3089                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3090                                  ;
  3091                                  ;       Restore registers and return to caller.
  3092                                  ;
  3093                                  .220                    pop     ds                                              ;restore non-volatie regs
  3094                                                          pop     esi                                             ;
  3095                                                          pop     ecx                                             ;
  3096                                                          pop     ebx                                             ;
  3097                                                          ret                                                     ;return
  3098                                  ;-----------------------------------------------------------------------------------------------------------------------
  3099                                  ;
  3100                                  ;       Routine:        FreeMemory
  3101                                  ;
  3102                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3103                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3104                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3105                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3106                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3107                                  ;
  3108                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3109                                  ;
  3110                                  ;       Out:            EAX     -1      invalid memory block
  3111                                  ;                               0       memory block freed
  3112                                  ;
  3113                                  ;-----------------------------------------------------------------------------------------------------------------------
  3114                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3115                                                          push    ecx                                             ;
  3116                                                          push    esi                                             ;
  3117                                                          push    edi                                             ;
  3118                                                          push    ds                                              ;
  3119                                                          push    es                                              ;
  3120                                  ;
  3121                                  ;       Address the root memory structure
  3122                                  ;
  3123                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3124                                                          pop     es                                              ;... into extra segment reg
  3125                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3126                                                          pop     ds                                              ;... into data segment reg
  3127                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3128                                                          mov     edi,edx                                         ;memory block address
  3129                                  ;
  3130                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3131                                  ;
  3132                                                          xor     eax,eax                                         ;indicate success
  3133                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3134                                                          je      .240                                            ;yes, branch
  3135                                                          dec     eax                                             ;indicate failure
  3136                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3137                                                          jne     .240                                            ;no, branch
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;       Unlink the USER memory block.
  3141                                  ;
  3142                                  ;-----------------------------------------------------------------------------------------------------------------------
  3143                                  ;
  3144                                  ;       Set the block signature. Reset owner.
  3145                                  ;
  3146                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3147                                                          xor     eax,eax                                         ;zero register
  3148                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3149                                  ;
  3150                                  ;       Wipe user area.
  3151                                  ;
  3152                                                          push    edi                                             ;save block address
  3153                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3154                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3155                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3156                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3157                                                          rep     stosb                                           ;clear memory
  3158                                                          pop     edi                                             ;restore block address
  3159                                  ;
  3160                                  ;       Address the preceding and following USER memory blocks
  3161                                  ;
  3162                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3163                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3164                                  ;
  3165                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3166                                  ;       pointer to point to the USER block following this block.
  3167                                  ;
  3168                                                          test    ebx,ebx                                         ;is there a previous block?
  3169                                                          jz      .10                                             ;no, branch
  3170                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3171                                                          jmp     .20                                             ;continue
  3172                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3173                                  ;
  3174                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3175                                  ;       pointer to point to the USER block preceding this block.
  3176                                  ;
  3177                                  .20                     jecxz   .30                                             ;branch if no next block
  3178                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3179                                                          jmp     .40                                             ;continue
  3180                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  ;
  3183                                  ;       Merge with a previous contiguous FREE memory block.
  3184                                  ;
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  ;
  3187                                  ;       Address the preceding and following contiguous memory blocks.
  3188                                  ;
  3189                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3190                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3191                                  ;
  3192                                  ;       Verify we have a previous contiguous FREE block.
  3193                                  ;
  3194                                                          test    ebx,ebx                                         ;is there a previous block?
  3195                                                          jz      .100                                            ;no, branch
  3196                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3197                                                          jne     .100                                            ;no, branch
  3198                                  ;
  3199                                  ;       Update adjacent block's contiguous pointers.
  3200                                  ;
  3201                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3202                                                          jecxz   .50                                             ;branch if no next contiguous block
  3203                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3204                                                          jmp     .60                                             ;continue
  3205                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3206                                  ;
  3207                                  ;       Update the size of the merged FREE block.
  3208                                  ;
  3209                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3210                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3211                                  ;
  3212                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3213                                  ;
  3214                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3215                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3216                                                          rep     stosb                                           ;clear memory header
  3217                                                          mov     edi,ebx                                         ;current block is now previous block
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219                                  ;
  3220                                  ;       Unlink the previous contiguous FREE memory block
  3221                                  ;
  3222                                  ;-----------------------------------------------------------------------------------------------------------------------
  3223                                  ;
  3224                                  ;       Address the preceding and following USER memory blocks
  3225                                  ;
  3226                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3227                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3228                                  ;
  3229                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3230                                  ;       block pointer.
  3231                                  ;
  3232                                                          test    ebx,ebx                                         ;is there a previous block?
  3233                                                          jz      .70                                             ;no, branch
  3234                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3235                                                          jmp     .80                                             ;branch
  3236                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3237                                  ;
  3238                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3239                                  ;       pointer.
  3240                                  ;
  3241                                  .80                     jecxz   .90                                             ;branch if no next block
  3242                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3243                                                          jmp     .100                                            ;continue
  3244                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246                                  ;
  3247                                  ;       Merge with a following contiguous FREE memory block.
  3248                                  ;
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                  ;
  3251                                  ;       Verify we have a following contiguous FREE block.
  3252                                  ;
  3253                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3254                                                          jecxz   .170                                            ;branch if no next contiguous block
  3255                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3256                                                          jne     .170                                            ;no, branch
  3257                                  ;
  3258                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3259                                  ;
  3260                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3261                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3262                                  ;
  3263                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3264                                  ;
  3265                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3266                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3267                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3268                                                          jz      .110                                            ;no, branch
  3269                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3270                                                          jmp     .120                                            ;continue
  3271                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3272                                  ;-----------------------------------------------------------------------------------------------------------------------
  3273                                  ;
  3274                                  ;       Unlink the following contiguous FREE memory block
  3275                                  ;
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277                                  ;
  3278                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3279                                  ;
  3280                                  .120                    push    edi                                             ;save this block
  3281                                                          mov     edi,ecx                                         ;next contiguous block
  3282                                                          push    ecx                                             ;save next contiguous block
  3283                                  ;
  3284                                  ;       Address the preceding and following USER memory blocks
  3285                                  ;
  3286                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3287                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3288                                  ;
  3289                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3290                                  ;       block pointer.
  3291                                  ;
  3292                                                          test    ebx,ebx                                         ;is there a previous block?
  3293                                                          jz      .130                                            ;no, branch
  3294                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3295                                                          jmp     .140                                            ;branch
  3296                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3297                                  ;
  3298                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3299                                  ;       pointer.
  3300                                  ;
  3301                                  .140                    jecxz   .150                                            ;branch if no next block
  3302                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3303                                                          jmp     .160                                            ;continue
  3304                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3305                                  ;
  3306                                  ;       Clear next contiguous block's header
  3307                                  ;
  3308                                  .160                    pop     edi                                             ;next congiguous block pointer
  3309                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3310                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3311                                                          rep     stosb                                           ;clear memory header
  3312                                                          pop     edi                                             ;this block's pointer
  3313                                  ;-----------------------------------------------------------------------------------------------------------------------
  3314                                  ;
  3315                                  ;       Insert the final FREE block back into the block chain.
  3316                                  ;
  3317                                  ;-----------------------------------------------------------------------------------------------------------------------
  3318                                  ;
  3319                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3320                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3321                                  ;       all are smaller in size.
  3322                                  ;
  3323                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3324                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3325                                  .180                    jecxz   .190                                            ;exit if no ptr
  3326                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3327                                                          jb      .190                                            ;yes, branch
  3328                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3329                                                          jmp     .180                                            ;continue
  3330                                  ;
  3331                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3332                                  ;       larger free block. Update the next block's previous block pointer.
  3333                                  ;
  3334                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3335                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3336                                                          jecxz   .200                                            ;branch if no block found
  3337                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3338                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3339                                                          jmp     .210                                            ;continue
  3340                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3341                                  ;
  3342                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3343                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3344                                  ;       next pointer.
  3345                                  ;
  3346                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3347                                                          test    ebx,ebx                                         ;do we have a previous block?
  3348                                                          jz      .220                                            ;no, branch
  3349                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3350                                                          jmp     .230                                            ;continue
  3351                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3352                                  ;
  3353                                  ;       The memory free has completed.
  3354                                  ;
  3355                                  .230                    xor     eax,eax                                         ;indicate success
  3356                                  ;
  3357                                  ;       Restore and return.
  3358                                  ;
  3359                                  .240                    pop     es                                              ;restore non-volatile regs
  3360                                                          pop     ds                                              ;
  3361                                                          pop     edi                                             ;
  3362                                                          pop     esi                                             ;
  3363                                                          pop     ecx                                             ;
  3364                                                          pop     ebx                                             ;
  3365                                                          ret                                                     ;return
  3366                                  ;=======================================================================================================================
  3367                                  ;
  3368                                  ;       String Helper Routines
  3369                                  ;
  3370                                  ;       CompareMemory
  3371                                  ;       UpperCaseString
  3372                                  ;
  3373                                  ;=======================================================================================================================
  3374                                  ;-----------------------------------------------------------------------------------------------------------------------
  3375                                  ;
  3376                                  ;       Routine:        CompareMemory
  3377                                  ;
  3378                                  ;       Description:    This routine compares two byte arrays.
  3379                                  ;
  3380                                  ;       In:             DS:EDX  first source address
  3381                                  ;                       DS:EBX  second source address
  3382                                  ;                       ECX     comparison length
  3383                                  ;
  3384                                  ;       Out:            EDX     first source address
  3385                                  ;                       EBX     second source address
  3386                                  ;                       ECX     0       array 1 = array 2
  3387                                  ;                               <0      array 1 < array 2
  3388                                  ;                               >0      array 1 > array 2
  3389                                  ;
  3390                                  ;-----------------------------------------------------------------------------------------------------------------------
  3391                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3392                                                          push    edi                                             ;
  3393                                                          push    es                                              ;
  3394                                                          push    ds                                              ;copy DS
  3395                                                          pop     es                                              ;... to ES
  3396                                                          mov     esi,edx                                         ;first source address
  3397                                                          mov     edi,ebx                                         ;second source address
  3398                                                          cld                                                     ;forward strings
  3399                                                          rep     cmpsb                                           ;compare bytes
  3400                                                          mov     al,0                                            ;default result
  3401                                                          jz      .10                                             ;branch if arrays equal
  3402                                                          mov     al,1                                            ;positive result
  3403                                                          jnc     .10                                             ;branch if target > source
  3404                                                          mov     al,-1                                           ;negative result
  3405                                  .10                     movsx   ecx,al                                          ;extend sign
  3406                                                          pop     es                                              ;restore non-volatile regs
  3407                                                          pop     edi                                             ;
  3408                                                          pop     esi                                             ;
  3409                                                          ret                                                     ;return
  3410                                  ;-----------------------------------------------------------------------------------------------------------------------
  3411                                  ;
  3412                                  ;       Routine:        UpperCaseString
  3413                                  ;
  3414                                  ;       Description:    This routine places all characters in the given string to upper case.
  3415                                  ;
  3416                                  ;       In:             DS:EDX  string address
  3417                                  ;
  3418                                  ;       Out:            EDX     string address
  3419                                  ;
  3420                                  ;-----------------------------------------------------------------------------------------------------------------------
  3421                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3422                                                          mov     esi,edx                                         ;string address
  3423                                                          cld                                                     ;forward strings
  3424                                  .10                     lodsb                                                   ;string character
  3425                                                          test    al,al                                           ;null?
  3426                                                          jz      .20                                             ;yes, skip ahead
  3427                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3428                                                          jb      .10                                             ;no, continue
  3429                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3430                                                          ja      .10                                             ;no, continue
  3431                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3432                                                          mov     [esi-1],al                                      ;upper character
  3433                                                          jmp     .10                                             ;continue
  3434                                  .20                     pop     esi                                             ;restore non-volatile regs
  3435                                                          ret                                                     ;return
  3436                                  ;=======================================================================================================================
  3437                                  ;
  3438                                  ;       Console Helper Routines
  3439                                  ;
  3440                                  ;       FirstConsoleColumn
  3441                                  ;       GetConsoleChar
  3442                                  ;       GetConsoleString
  3443                                  ;       NextConsoleColumn
  3444                                  ;       NextConsoleRow
  3445                                  ;       PreviousConsoleColumn
  3446                                  ;       PutConsoleChar
  3447                                  ;       PutConsoleHexByte
  3448                                  ;       PutConsoleHexDword
  3449                                  ;       PutConsoleHexWord
  3450                                  ;       PutConsoleOIAChar
  3451                                  ;       PutConsoleOIAShift
  3452                                  ;       PutConsoleString
  3453                                  ;       Yield
  3454                                  ;
  3455                                  ;=======================================================================================================================
  3456                                  ;-----------------------------------------------------------------------------------------------------------------------
  3457                                  ;
  3458                                  ;       Routine:        FirstConsoleColumn
  3459                                  ;
  3460                                  ;       Description:    This routine resets the console column to start of the row.
  3461                                  ;
  3462                                  ;       In:             DS      OS data selector
  3463                                  ;
  3464                                  ;-----------------------------------------------------------------------------------------------------------------------
  3465                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3466                                                          mov     [wbConsoleColumn],al                            ;save column
  3467                                                          ret                                                     ;return
  3468                                  ;-----------------------------------------------------------------------------------------------------------------------
  3469                                  ;
  3470                                  ;       Routine:        GetConsoleChar
  3471                                  ;
  3472                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3473                                  ;
  3474                                  ;       Out:            AL      ASCII character code
  3475                                  ;                       AH      keyboard scan code
  3476                                  ;
  3477                                  ;-----------------------------------------------------------------------------------------------------------------------
  3478                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3479                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  3480                                                          or      eax,eax                                         ;do we have a message?
  3481                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  3482                                                          push    eax                                             ;save key codes
  3483                                                          and     eax,0FFFF0000h                                  ;mask for message type
  3484                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3485                                                          pop     eax                                             ;restore key codes
  3486                                                          jne     GetConsoleChar                                  ;no, try again
  3487                                                          and     eax,0000ffffh                                   ;mask for key codes
  3488                                                          ret                                                     ;return
  3489                                  ;-----------------------------------------------------------------------------------------------------------------------
  3490                                  ;
  3491                                  ;       Routine:        GetConsoleString
  3492                                  ;
  3493                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3494                                  ;
  3495                                  ;       In:             DS:EDX  target buffer address
  3496                                  ;                       ECX     maximum number of characters to accept
  3497                                  ;                       BH      echo to terminal
  3498                                  ;                       BL      terminating character
  3499                                  ;
  3500                                  ;-----------------------------------------------------------------------------------------------------------------------
  3501                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  3502                                                          push    esi                                             ;
  3503                                                          push    edi                                             ;
  3504                                                          push    es                                              ;
  3505                                                          push    ds                                              ;load data segment selector ...
  3506                                                          pop     es                                              ;... into extra segment register
  3507                                                          mov     edi,edx                                         ;edi = target buffer
  3508                                                          push    ecx                                             ;save maximum characters
  3509                                                          xor     al,al                                           ;zero register
  3510                                                          cld                                                     ;forward strings
  3511                                                          rep     stosb                                           ;zero fill buffer
  3512                                                          pop     ecx                                             ;maximum characters
  3513                                                          mov     edi,edx                                         ;edi = target buffer
  3514                                                          mov     esi,edx                                         ;esi = target buffer
  3515                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  3516                                  .20                     call    GetConsoleChar                                  ;al = next input char
  3517                                                          cmp     al,bl                                           ;is this the terminator?
  3518                                                          je      .50                                             ;yes, exit
  3519                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3520                                                          jne     .30                                             ;no, skip ahead
  3521                                                          cmp     esi,edi                                         ;at start of buffer?
  3522                                                          je      .20                                             ;yes, get next character
  3523                                                          dec     edi                                             ;backup target pointer
  3524                                                          mov     byte [edi],0                                    ;zero previous character
  3525                                                          inc     ecx                                             ;increment remaining chars
  3526                                                          test    bh,1                                            ;echo to console?
  3527                                                          jz      .20                                             ;no, get next character
  3528                                                          call    PreviousConsoleColumn                           ;backup console position
  3529                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3530                                                          call    PutConsoleChar                                  ;write space to console
  3531                                                          call    PlaceCursor                                     ;position the cursor
  3532                                                          jmp     .20                                             ;get next character
  3533                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3534                                                          jb      .20                                             ;no, get another character
  3535                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3536                                                          ja      .20                                             ;no, get another character
  3537                                                          stosb                                                   ;store character in buffer
  3538                                                          test    bh,1                                            ;echo to console?
  3539                                                          jz      .40                                             ;no, skip ahead
  3540                                                          call    PutConsoleChar                                  ;write character to console
  3541                                                          call    NextConsoleColumn                               ;advance console position
  3542                                                          call    PlaceCursor                                     ;position the cursor
  3543                                  .40                     dec     ecx                                             ;decrement remaining chars
  3544                                                          jmp     .10                                             ;next
  3545                                  .50                     xor     al,al                                           ;null
  3546                                                          stosb                                                   ;terminate buffer
  3547                                                          pop     es                                              ;restore non-volatile regs
  3548                                                          pop     edi                                             ;
  3549                                                          pop     esi                                             ;
  3550                                                          pop     ecx                                             ;
  3551                                                          ret                                                     ;return
  3552                                  ;-----------------------------------------------------------------------------------------------------------------------
  3553                                  ;
  3554                                  ;       Routine:        NextConsoleColumn
  3555                                  ;
  3556                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3557                                  ;                       incremented if the end of the current row is reached.
  3558                                  ;
  3559                                  ;       In:             DS      OS data selector
  3560                                  ;
  3561                                  ;-----------------------------------------------------------------------------------------------------------------------
  3562                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3563                                                          inc     al                                              ;increment column
  3564                                                          mov     [wbConsoleColumn],al                            ;save column
  3565                                                          cmp     al,ECONCOLS                                     ;end of row?
  3566                                                          jb      .10                                             ;no, skip ahead
  3567                                                          call    FirstConsoleColumn                              ;reset column to start of row
  3568                                                          call    NextConsoleRow                                  ;line feed to next row
  3569                                  .10                     ret                                                     ;return
  3570                                  ;-----------------------------------------------------------------------------------------------------------------------
  3571                                  ;
  3572                                  ;       Routine:        NextConsoleRow
  3573                                  ;
  3574                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3575                                  ;
  3576                                  ;       In:             DS      OS data selector
  3577                                  ;
  3578                                  ;-----------------------------------------------------------------------------------------------------------------------
  3579                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3580                                                          inc     al                                              ;increment row
  3581                                                          mov     [wbConsoleRow],al                               ;save row
  3582                                                          cmp     al,ECONROWS                                     ;end of screen?
  3583                                                          jb      .10                                             ;no, skip ahead
  3584                                                          call    ScrollConsoleRow                                ;scroll up one row
  3585                                                          mov     al,[wbConsoleRow]                               ;row
  3586                                                          dec     al                                              ;decrement row
  3587                                                          mov     [wbConsoleRow],al                               ;save row
  3588                                  .10                     ret                                                     ;return
  3589                                  ;-----------------------------------------------------------------------------------------------------------------------
  3590                                  ;
  3591                                  ;       Routine:        PreviousConsoleColumn
  3592                                  ;
  3593                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3594                                  ;                       the column is set to the last position in the row and the row is decremented.
  3595                                  ;
  3596                                  ;       In:             DS      OS data selector
  3597                                  ;
  3598                                  ;-----------------------------------------------------------------------------------------------------------------------
  3599                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3600                                                          or      al,al                                           ;start of row?
  3601                                                          jnz     .10                                             ;no, skip ahead
  3602                                                          mov     ah,[wbConsoleRow]                               ;current row
  3603                                                          or      ah,ah                                           ;top of screen?
  3604                                                          jz      .20                                             ;yes, exit with no change
  3605                                                          dec     ah                                              ;decrement row
  3606                                                          mov     [wbConsoleRow],ah                               ;save row
  3607                                                          mov     al,ECONCOLS                                     ;set maximum column
  3608                                  .10                     dec     al                                              ;decrement column
  3609                                                          mov     [wbConsoleColumn],al                            ;save column
  3610                                  .20                     ret                                                     ;return
  3611                                  ;-----------------------------------------------------------------------------------------------------------------------
  3612                                  ;
  3613                                  ;       Routine:        PutConsoleChar
  3614                                  ;
  3615                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3616                                  ;
  3617                                  ;       In:             AL      ASCII character
  3618                                  ;                       DS      OS data selector
  3619                                  ;
  3620                                  ;-----------------------------------------------------------------------------------------------------------------------
  3621                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3622                                                          push    es                                              ;
  3623                                                          push    EGDTCGA                                         ;load CGA selector ...
  3624                                                          pop     es                                              ;... into extra segment reg
  3625                                                          mov     cl,[wbConsoleColumn]                            ;column
  3626                                                          mov     ch,[wbConsoleRow]                               ;row
  3627                                                          call    SetConsoleChar                                  ;put character at row, column
  3628                                                          pop     es                                              ;restore non-volatile regs
  3629                                                          pop     ecx                                             ;
  3630                                                          ret                                                     ;return
  3631                                  ;-----------------------------------------------------------------------------------------------------------------------
  3632                                  ;
  3633                                  ;       Routine:        PutConsoleHexByte
  3634                                  ;
  3635                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3636                                  ;
  3637                                  ;       In:             AL      byte value
  3638                                  ;                       CL      column
  3639                                  ;                       CH      row
  3640                                  ;                       DS      OS data selector
  3641                                  ;                       ES      CGA selector
  3642                                  ;
  3643                                  ;-----------------------------------------------------------------------------------------------------------------------
  3644                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  3645                                                          shr     al,4                                            ;hi-order nybble
  3646                                                          call    .10                                             ;make ASCII and store
  3647                                                          pop     eax                                             ;byte value
  3648                                                          and     al,0Fh                                          ;lo-order nybble
  3649                                  .10                     or      al,030h                                         ;apply ASCII zone
  3650                                                          cmp     al,03Ah                                         ;numeric?
  3651                                                          jb      .20                                             ;yes, skip ahead
  3652                                                          add     al,7                                            ;add ASCII offset for alpha
  3653                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3654                                                          ret                                                     ;return
  3655                                  ;-----------------------------------------------------------------------------------------------------------------------
  3656                                  ;
  3657                                  ;       Routine:        PutConsoleHexDword
  3658                                  ;
  3659                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3660                                  ;
  3661                                  ;       In:             EAX     value
  3662                                  ;                       CL      column
  3663                                  ;                       CH      row
  3664                                  ;                       DS      OS data selector
  3665                                  ;                       ES      CGA selector
  3666                                  ;
  3667                                  ;-----------------------------------------------------------------------------------------------------------------------
  3668                                  PutConsoleHexDword      push    eax
  3669                                                          shr     eax,16
  3670                                                          call    PutConsoleHexWord
  3671                                                          pop     eax
  3672                                                          call    PutConsoleHexWord
  3673                                                          ret
  3674                                  ;-----------------------------------------------------------------------------------------------------------------------
  3675                                  ;
  3676                                  ;       Routine:        PutConsoleHexWord
  3677                                  ;
  3678                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3679                                  ;
  3680                                  ;       In:             EAX     value
  3681                                  ;                       CL      column
  3682                                  ;                       CH      row
  3683                                  ;                       DS      OS data selector
  3684                                  ;                       ES      CGA selector
  3685                                  ;
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                  PutConsoleHexWord       push    eax
  3688                                                          shr     eax,8
  3689                                                          call    PutConsoleHexByte
  3690                                                          pop     eax
  3691                                                          call    PutConsoleHexByte
  3692                                                          ret
  3693                                  ;-----------------------------------------------------------------------------------------------------------------------
  3694                                  ;
  3695                                  ;       Routine:        PutConsoleOIAChar
  3696                                  ;
  3697                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3698                                  ;
  3699                                  ;       In:             DS      OS data selector
  3700                                  ;
  3701                                  ;-----------------------------------------------------------------------------------------------------------------------
  3702                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3703                                                          push    ecx                                             ;
  3704                                                          push    esi                                             ;
  3705                                                          push    ds                                              ;
  3706                                                          push    es                                              ;
  3707                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3708                                                          pop     ds                                              ;... into data segment register
  3709                                                          push    EGDTCGA                                         ;load CGA selector ...
  3710                                                          pop     es                                              ;... into extra segment register
  3711                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3712                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3713                                                          mov     bl,0                                            ;starting column
  3714                                                          mov     ecx,6                                           ;maximum scan codes
  3715                                  .10                     push    ecx                                             ;save remaining count
  3716                                                          mov     ecx,ebx                                         ;row, column
  3717                                                          lodsb                                                   ;read scan code
  3718                                                          or      al,al                                           ;scan code present?
  3719                                                          jz      .20                                             ;no, skip ahead
  3720                                                          call    PutConsoleHexByte                               ;display scan code
  3721                                                          jmp     .30                                             ;continue
  3722                                  .20                     mov     al,' '                                          ;ASCII space
  3723                                                          call    SetConsoleChar                                  ;display space
  3724                                                          mov     al,' '                                          ;ASCII space
  3725                                                          call    SetConsoleChar                                  ;display space
  3726                                  .30                     add     bl,2                                            ;next column (+2)
  3727                                                          pop     ecx                                             ;restore remaining
  3728                                                          loop    .10                                             ;next code
  3729                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3730                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3731                                                          jb      .40                                             ;no, skip ahead
  3732                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3733                                                          ja      .40                                             ;no, skip ahead
  3734                                                          mov     ch,bh                                           ;OIA row
  3735                                                          mov     cl,40                                           ;character display column
  3736                                                          call    SetConsoleChar                                  ;display ASCII character
  3737                                  .40                     pop     es                                              ;restore non-volatile regs
  3738                                                          pop     ds                                              ;
  3739                                                          pop     esi                                             ;
  3740                                                          pop     ecx                                             ;
  3741                                                          pop     ebx                                             ;
  3742                                                          ret                                                     ;return
  3743                                  ;-----------------------------------------------------------------------------------------------------------------------
  3744                                  ;
  3745                                  ;       Routine:        PutConsoleOIAShift
  3746                                  ;
  3747                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3748                                  ;
  3749                                  ;       In:             BL      shift flags
  3750                                  ;                       BH      lock flags
  3751                                  ;                       DS      OS data selector
  3752                                  ;
  3753                                  ;-----------------------------------------------------------------------------------------------------------------------
  3754                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3755                                                          push    es                                              ;
  3756                                                          push    EGDTCGA                                         ;load CGA selector ...
  3757                                                          pop     es                                              ;... into ES register
  3758                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3759                                                          mov     al,EASCIISPACE                                  ;space is default character
  3760                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3761                                                          jz      .10                                             ;no, skip ahead
  3762                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3763                                  .10                     mov     cl,14                                           ;indicator column
  3764                                                          call    SetConsoleChar                                  ;display ASCII character
  3765                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3766                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3767                                                          jz      .20                                             ;no, skip ahead
  3768                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3769                                  .20                     mov     cl,64                                           ;indicator column
  3770                                                          call    SetConsoleChar                                  ;display ASCII character
  3771                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3772                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3773                                                          jz      .30                                             ;no, skip ahead
  3774                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3775                                  .30                     mov     cl,15                                           ;indicator column
  3776                                                          call    SetConsoleChar                                  ;display ASCII character
  3777                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3778                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3779                                                          jz      .40                                             ;no, skip ahead
  3780                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3781                                  .40                     mov     cl,63                                           ;indicator column
  3782                                                          call    SetConsoleChar                                  ;display ASCII character
  3783                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3784                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3785                                                          jz      .50                                             ;no, skip ahead
  3786                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3787                                  .50                     mov     cl,16                                           ;indicator column
  3788                                                          call    SetConsoleChar                                  ;display ASCII character
  3789                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3790                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3791                                                          jz      .60                                             ;no, skip ahead
  3792                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3793                                  .60                     mov     cl,62                                           ;indicator column
  3794                                                          call    SetConsoleChar                                  ;display ASCII character
  3795                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3796                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3797                                                          jz      .70                                             ;no, skip ahead
  3798                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3799                                  .70                     mov     cl,78                                           ;indicator column
  3800                                                          call    SetConsoleChar                                  ;display ASCII character
  3801                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3802                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3803                                                          jz      .80                                             ;no, skip ahead
  3804                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3805                                  .80                     mov     cl,77                                           ;indicator column
  3806                                                          call    SetConsoleChar                                  ;display ASCII character
  3807                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3808                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3809                                                          jz      .90                                             ;no, skip ahead
  3810                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3811                                  .90                     mov     cl,76                                           ;indicator column
  3812                                                          call    SetConsoleChar                                  ;display ASCII character
  3813                                                          pop     es                                              ;restore non-volatile regs
  3814                                                          pop     ecx                                             ;
  3815                                                          ret                                                     ;return
  3816                                  ;-----------------------------------------------------------------------------------------------------------------------
  3817                                  ;
  3818                                  ;       Routine:        PutConsoleString
  3819                                  ;
  3820                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3821                                  ;                       console position as needed.
  3822                                  ;
  3823                                  ;       In:             EDX     source address
  3824                                  ;                       DS      OS data selector
  3825                                  ;
  3826                                  ;-----------------------------------------------------------------------------------------------------------------------
  3827                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3828                                                          mov     esi,edx                                         ;source address
  3829                                                          cld                                                     ;forward strings
  3830                                  .10                     lodsb                                                   ;ASCII character
  3831                                                          or      al,al                                           ;end of string?
  3832                                                          jz      .40                                             ;yes, skip ahead
  3833                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3834                                                          jne     .20                                             ;no, skip ahead
  3835                                                          call    FirstConsoleColumn                              ;move to start of row
  3836                                                          jmp     .10                                             ;next character
  3837                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3838                                                          jne     .30                                             ;no, skip ahead
  3839                                                          call    NextConsoleRow                                  ;move to next row
  3840                                                          jmp     .10                                             ;next character
  3841                                  .30                     call    PutConsoleChar                                  ;output character to console
  3842                                                          call    NextConsoleColumn                               ;advance to next column
  3843                                                          jmp     .10                                             ;next character
  3844                                  .40                     pop     esi                                             ;restore non-volatile regs
  3845                                                          ret                                                     ;return
  3846                                  ;-----------------------------------------------------------------------------------------------------------------------
  3847                                  ;
  3848                                  ;       Routine:        Yield
  3849                                  ;
  3850                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3851                                  ;
  3852                                  ;-----------------------------------------------------------------------------------------------------------------------
  3853                                  Yield                   sti                                                     ;enable maskagle interrupts
  3854                                                          hlt                                                     ;halt until external interrupt
  3855                                                          ret                                                     ;return
  3856                                  ;=======================================================================================================================
  3857                                  ;
  3858                                  ;       Data-Type Conversion Helper Routines
  3859                                  ;
  3860                                  ;       DecimalToUnsigned
  3861                                  ;       HexadecimalToUnsigned
  3862                                  ;       UnsignedToDecimalString
  3863                                  ;       UnsignedToHexadecimal
  3864                                  ;
  3865                                  ;=======================================================================================================================
  3866                                  ;-----------------------------------------------------------------------------------------------------------------------
  3867                                  ;
  3868                                  ;       Routine:        DecimalToUnsigned
  3869                                  ;
  3870                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  3871                                  ;
  3872                                  ;       Input:          DS:EDX  null-terminated decimal string address
  3873                                  ;
  3874                                  ;       Output:         EAX     unsigned integer value
  3875                                  ;
  3876                                  ;-----------------------------------------------------------------------------------------------------------------------
  3877                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  3878                                                          mov     esi,edx                                         ;source address
  3879                                                          xor     edx,edx                                         ;zero total
  3880                                  .10                     lodsb                                                   ;source byte
  3881                                                          cmp     al,','                                          ;comma?
  3882                                                          je      .10                                             ;yes, ignore
  3883                                                          test    al,al                                           ;end of string?
  3884                                                          jz      .30                                             ;yes, done
  3885                                                          cmp     al,'.'                                          ;decimal point?
  3886                                                          je      .30                                             ;yes, done
  3887                                                          cmp     al,'0'                                          ;numeral?
  3888                                                          jb      .20                                             ;no, invalid string
  3889                                                          cmp     al,'9'                                          ;numeral?
  3890                                                          ja      .20                                             ;no, invalid string
  3891                                                          and     al,00Fh                                         ;mask ASCII zone
  3892                                                          push    eax                                             ;save numeral
  3893                                                          shl     edx,1                                           ;total * 2
  3894                                                          mov     eax,edx                                         ;total * 2
  3895                                                          shl     edx,2                                           ;total * 8
  3896                                                          add     edx,eax                                         ;total * 10
  3897                                                          pop     eax                                             ;restore numeral
  3898                                                          add     edx,eax                                         ;accumulate decimal digit
  3899                                                          xor     eax,eax                                         ;zero register
  3900                                                          jmp     .10                                             ;next
  3901                                  .20                     xor     edx,edx                                         ;zero result on error
  3902                                  .30                     mov     eax,edx                                         ;result
  3903                                                          pop     esi                                             ;restore non-volatile regs
  3904                                                          ret                                                     ;return
  3905                                  ;-----------------------------------------------------------------------------------------------------------------------
  3906                                  ;
  3907                                  ;       Routine:        HexadecimalToUnsigned
  3908                                  ;
  3909                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3910                                  ;
  3911                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3912                                  ;
  3913                                  ;       Output:         EAX     unsigned integer value
  3914                                  ;
  3915                                  ;-----------------------------------------------------------------------------------------------------------------------
  3916                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3917                                                          mov     esi,edx                                         ;source address
  3918                                                          xor     edx,edx                                         ;zero register
  3919                                  .10                     lodsb                                                   ;source byte
  3920                                                          test    al,al                                           ;end of string?
  3921                                                          jz      .30                                             ;yes, branch
  3922                                                          cmp     al,'9'                                          ;hexadecimal?
  3923                                                          jna     .20                                             ;no, skip ahead
  3924                                                          sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  3925                                  .20                     and     eax,00Fh                                        ;remove ascii zone
  3926                                                          shl     edx,4                                           ;previous total x 16
  3927                                                          add     edx,eax                                         ;add prior value x 16
  3928                                                          jmp     .10                                             ;next
  3929                                  .30                     mov     eax,edx                                         ;result
  3930                                                          pop     esi                                             ;restore non-volatile regs
  3931                                                          ret                                                     ;return
  3932                                  ;-----------------------------------------------------------------------------------------------------------------------
  3933                                  ;
  3934                                  ;       Routine:        UnsignedToDecimalString
  3935                                  ;
  3936                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3937                                  ;
  3938                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  3939                                  ;                                               bit 1: 1 = include comma grouping delimiters
  3940                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  3941                                  ;                       ECX     32-bit binary
  3942                                  ;                       DS:EDX  output buffer address
  3943                                  ;
  3944                                  ;-----------------------------------------------------------------------------------------------------------------------
  3945                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  3946                                                          push    ecx                                             ;
  3947                                                          push    edi                                             ;
  3948                                                          push    es                                              ;
  3949                                                          push    ds                                              ;load data selector
  3950                                                          pop     es                                              ;... into extra segment reg
  3951                                                          mov     edi,edx                                         ;output buffer address
  3952                                                          and     bh,00001111b                                    ;zero internal flags
  3953                                                          mov     edx,ecx                                         ;binary
  3954                                                          mov     ecx,1000000000                                  ;10^9 divisor
  3955                                                          call    .30                                             ;divide and store
  3956                                                          mov     ecx,100000000                                   ;10^8 divisor
  3957                                                          call    .10                                             ;divide and store
  3958                                                          mov     ecx,10000000                                    ;10^7 divisor
  3959                                                          call    .30                                             ;divide and store
  3960                                                          mov     ecx,1000000                                     ;10^6 divisor
  3961                                                          call    .30                                             ;divide and store
  3962                                                          mov     ecx,100000                                      ;10^5 divisor
  3963                                                          call    .10                                             ;divide and store
  3964                                                          mov     ecx,10000                                       ;10^4 divisor
  3965                                                          call    .30                                             ;divide and store
  3966                                                          mov     ecx,1000                                        ;10^3 divisor
  3967                                                          call    .30                                             ;divide and store
  3968                                                          mov     ecx,100                                         ;10^2 divisor
  3969                                                          call    .10                                             ;divide and store
  3970                                                          mov     ecx,10                                          ;10^2 divisor
  3971                                                          call    .30                                             ;divide and store
  3972                                                          mov     eax,edx                                         ;10^1 remainder
  3973                                                          call    .40                                             ;store
  3974                                                          xor     al,al                                           ;null terminator
  3975                                                          stosb                                                   ;store in output buffer
  3976                                                          pop     es                                              ;restore non-volatile regs
  3977                                                          pop     edi                                             ;
  3978                                                          pop     ecx                                             ;
  3979                                                          pop     ebx                                             ;
  3980                                                          ret                                                     ;return
  3981                                  .10                     test    bh,00000010b                                    ;comma group delims?
  3982                                                          jz      .30                                             ;no, branch
  3983                                                          test    bh,00000001b                                    ;trim leading zeros?
  3984                                                          jz      .20                                             ;no, store delim
  3985                                                          test    bh,00010000b                                    ;non-zero found?
  3986                                                          jz      .30                                             ;no, branch
  3987                                  .20                     mov     al,','                                          ;delimiter
  3988                                                          stosb                                                   ;store delimiter
  3989                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  3990                                                          xor     edx,edx                                         ;zero hi-order
  3991                                                          div     ecx                                             ;divide by power of 10
  3992                                                          test    al,al                                           ;zero?
  3993                                                          jz      .50                                             ;yes, branch
  3994                                                          or      bh,00010000b                                    ;non-zero found
  3995                                  .40                     or      al,030h                                         ;ASCII zone
  3996                                                          stosb                                                   ;store digit
  3997                                                          ret                                                     ;return
  3998                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  3999                                                          jz      .40                                             ;no, store and continue
  4000                                                          test    bh,00010000b                                    ;non-zero found?
  4001                                                          jnz     .40                                             ;yes, store and continue
  4002                                                          ret                                                     ;return
  4003                                  ;-----------------------------------------------------------------------------------------------------------------------
  4004                                  ;
  4005                                  ;       Routine:        UnsignedToHexadecimal
  4006                                  ;
  4007                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4008                                  ;
  4009                                  ;       Input:          DS:EDX  output buffer address
  4010                                  ;                       ECX     32-bit binary
  4011                                  ;
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4014                                                          mov     edi,edx                                         ;output buffer address
  4015                                                          mov     edx,ecx                                         ;32-bit unsigned
  4016                                                          xor     ecx,ecx                                         ;zero register
  4017                                                          mov     cl,8                                            ;nybble count
  4018                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4019                                                          mov     al,dl                                           ;????bbbb
  4020                                                          and     al,00Fh                                         ;mask out bits 4-7
  4021                                                          or      al,030h                                         ;mask in ascii zone
  4022                                                          cmp     al,03Ah                                         ;A through F?
  4023                                                          jb      .20                                             ;no, skip ahead
  4024                                                          add     al,7                                            ;41h through 46h
  4025                                  .20                     stosb                                                   ;store hexnum
  4026                                                          loop    .10                                             ;next nybble
  4027                                                          xor     al,al                                           ;zero reg
  4028                                                          stosb                                                   ;null terminate
  4029                                                          pop     edi                                             ;restore non-volatile regs
  4030                                                          ret                                                     ;return
  4031                                  ;=======================================================================================================================
  4032                                  ;
  4033                                  ;       Message Queue Helper Routines
  4034                                  ;
  4035                                  ;       GetMessage
  4036                                  ;       PutMessage
  4037                                  ;
  4038                                  ;=======================================================================================================================
  4039                                  ;-----------------------------------------------------------------------------------------------------------------------
  4040                                  ;
  4041                                  ;       Routine:        GetMessage
  4042                                  ;
  4043                                  ;       Description:    This routine reads and removes a message from the message queue.
  4044                                  ;
  4045                                  ;       Out:            EAX     lo-order message data
  4046                                  ;                       EDX     hi-order message data
  4047                                  ;
  4048                                  ;                       CY      0 = message read
  4049                                  ;                               1 = no message to read
  4050                                  ;
  4051                                  ;-----------------------------------------------------------------------------------------------------------------------
  4052                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4053                                                          push    ecx                                             ;
  4054                                                          push    ds                                              ;
  4055                                                          push    ELDTMQ                                          ;load message queue selector ...
  4056                                                          pop     ds                                              ;... into data segment register
  4057                                                          mov     ebx,[MQHead]                                    ;head ptr
  4058                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4059                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4060                                                          or      eax,edx                                         ;is queue empty?
  4061                                                          stc                                                     ;assume queue is emtpy
  4062                                                          jz      .20                                             ;yes, skip ahead
  4063                                                          xor     ecx,ecx                                         ;store zero
  4064                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4065                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4066                                                          add     ebx,8                                           ;next queue element
  4067                                                          and     ebx,03FCh                                       ;at end of queue?
  4068                                                          jnz     .10                                             ;no, skip ahead
  4069                                                          mov     bl,8                                            ;reset to 1st entry
  4070                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4071                                                          clc                                                     ;indicate message read
  4072                                  .20                     pop     ds                                              ;restore non-volatile regs
  4073                                                          pop     ecx                                             ;
  4074                                                          pop     ebx                                             ;
  4075                                                          ret                                                     ;return
  4076                                  ;-----------------------------------------------------------------------------------------------------------------------
  4077                                  ;
  4078                                  ;       Routine:        PutMessage
  4079                                  ;
  4080                                  ;       Description:    This routine adda a message to the message queue.
  4081                                  ;
  4082                                  ;       In:             ECX     hi-order data word
  4083                                  ;                       EDX     lo-order data word
  4084                                  ;
  4085                                  ;       Out:            CY      0 = success
  4086                                  ;                               1 = fail: queue is full
  4087                                  ;
  4088                                  ;-----------------------------------------------------------------------------------------------------------------------
  4089                                  PutMessage              push    ds                                              ;save non-volatile regs
  4090                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4091                                                          pop     ds                                              ;... into data segment register
  4092                                                          mov     eax,[MQTail]                                    ;tail ptr
  4093                                                          cmp     dword [eax],0                                   ;is queue full?
  4094                                                          stc                                                     ;assume failure
  4095                                                          jne     .20                                             ;yes, cannot store
  4096                                                          mov     [eax],edx                                       ;store lo-order data
  4097                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4098                                                          add     eax,8                                           ;next queue element adr
  4099                                                          and     eax,03FCh                                       ;at end of queue?
  4100                                                          jnz     .10                                             ;no, skip ahead
  4101                                                          mov     al,8                                            ;reset to top of queue
  4102                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4103                                                          clc                                                     ;indicate success
  4104                                  .20                     pop     ds                                              ;restore non-volatile regs
  4105                                                          ret                                                     ;return
  4106                                  ;=======================================================================================================================
  4107                                  ;
  4108                                  ;       Memory-Mapped Video Routines
  4109                                  ;
  4110                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4111                                  ;
  4112                                  ;       ClearConsoleScreen
  4113                                  ;       ScrollConsoleRow
  4114                                  ;       SetConsoleChar
  4115                                  ;       SetConsoleString
  4116                                  ;
  4117                                  ;=======================================================================================================================
  4118                                  ;-----------------------------------------------------------------------------------------------------------------------
  4119                                  ;
  4120                                  ;       Routine:        ClearConsoleScreen
  4121                                  ;
  4122                                  ;       Description:    This routine clears the console (CGA) screen.
  4123                                  ;
  4124                                  ;-----------------------------------------------------------------------------------------------------------------------
  4125                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4126                                                          push    edi                                             ;
  4127                                                          push    ds                                              ;
  4128                                                          push    es                                              ;
  4129                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4130                                                          pop     ds                                              ;... into DS register
  4131                                                          push    EGDTCGA                                         ;load CGA selector ...
  4132                                                          pop     es                                              ;... into ES register
  4133                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4134                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4135                                                          xor     edi,edi                                         ;target offset
  4136                                                          cld                                                     ;forward strings
  4137                                                          rep     stosd                                           ;reset screen body
  4138                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4139                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4140                                                          rep     stosd                                           ;reset OIA line
  4141                                                          xor     al,al                                           ;zero register
  4142                                                          mov     [wbConsoleRow],al                               ;reset console row
  4143                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4144                                                          call    PlaceCursor                                     ;place cursor at current position
  4145                                                          pop     es                                              ;restore non-volatile regs
  4146                                                          pop     ds                                              ;
  4147                                                          pop     edi                                             ;
  4148                                                          pop     ecx                                             ;
  4149                                                          ret                                                     ;return
  4150                                  ;-----------------------------------------------------------------------------------------------------------------------
  4151                                  ;
  4152                                  ;       Routine:        ScrollConsoleRow
  4153                                  ;
  4154                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4155                                  ;
  4156                                  ;-----------------------------------------------------------------------------------------------------------------------
  4157                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4158                                                          push    esi                                             ;
  4159                                                          push    edi                                             ;
  4160                                                          push    ds                                              ;
  4161                                                          push    es                                              ;
  4162                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4163                                                          pop     ds                                              ;... into DS
  4164                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4165                                                          pop     es                                              ;... into ES
  4166                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4167                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4168                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4169                                                          cld                                                     ;forward strings
  4170                                                          rep     movsd                                           ;move 24 lines up
  4171                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4172                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4173                                                          rep     stosd                                           ;clear bottom row
  4174                                                          pop     es                                              ;restore non-volatile regs
  4175                                                          pop     ds                                              ;
  4176                                                          pop     edi                                             ;
  4177                                                          pop     esi                                             ;
  4178                                                          pop     ecx                                             ;
  4179                                                          ret                                                     ;return
  4180                                  ;-----------------------------------------------------------------------------------------------------------------------
  4181                                  ;
  4182                                  ;       Routine:        SetConsoleChar
  4183                                  ;
  4184                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4185                                  ;
  4186                                  ;       In:             AL      ASCII character
  4187                                  ;                       CL      column
  4188                                  ;                       CH      row
  4189                                  ;                       ES      CGA selector
  4190                                  ;
  4191                                  ;       Out:            EAX     last target address written (ES:)
  4192                                  ;                       CL      column + 1
  4193                                  ;
  4194                                  ;-----------------------------------------------------------------------------------------------------------------------
  4195                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4196                                                          movzx   eax,ch                                          ;row
  4197                                                          mov     ah,ECONCOLS                                     ;cols/row
  4198                                                          mul     ah                                              ;row * cols/row
  4199                                                          add     al,cl                                           ;add column
  4200                                                          adc     ah,0                                            ;handle carry
  4201                                                          shl     eax,1                                           ;screen offset
  4202                                                          mov     [es:eax],dl                                     ;store character
  4203                                                          inc     cl                                              ;next column
  4204                                                          ret                                                     ;return
  4205                                  ;-----------------------------------------------------------------------------------------------------------------------
  4206                                  ;
  4207                                  ;       Routine:        SetConsoleString
  4208                                  ;
  4209                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4210                                  ;
  4211                                  ;       In:             ESI     source offset (DS:)
  4212                                  ;                       CL      column
  4213                                  ;                       CH      row
  4214                                  ;                       ES      CGA selector
  4215                                  ;
  4216                                  ;-----------------------------------------------------------------------------------------------------------------------
  4217                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4218                                                          cld                                                     ;forward strings
  4219                                  .10                     lodsb                                                   ;next ASCII character
  4220                                                          test    al,al                                           ;end of string?
  4221                                                          jz      .20                                             ;yes, branch
  4222                                                          call    SetConsoleChar                                  ;store character
  4223                                                          jmp     .10                                             ;continue
  4224                                  .20                     pop     esi                                             ;restore non-volatile regs
  4225                                                          ret                                                     ;return
  4226                                  ;=======================================================================================================================
  4227                                  ;
  4228                                  ;       Input/Output Routines
  4229                                  ;
  4230                                  ;       These routines read and/or write directly to ports.
  4231                                  ;
  4232                                  ;       GetBaseMemSize
  4233                                  ;       GetExtendedMemSize
  4234                                  ;       GetROMMemSize
  4235                                  ;       PlaceCursor
  4236                                  ;       PutPrimaryEndOfInt
  4237                                  ;       PutSecondaryEndOfInt
  4238                                  ;       ResetSystem
  4239                                  ;       SetKeyboardLamps
  4240                                  ;       WaitForKeyInBuffer
  4241                                  ;       WaitForKeyOutBuffer
  4242                                  ;
  4243                                  ;=======================================================================================================================
  4244                                  ;-----------------------------------------------------------------------------------------------------------------------
  4245                                  ;
  4246                                  ;       Routine:        GetBaseMemSize
  4247                                  ;
  4248                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4249                                  ;
  4250                                  ;       Output:         EAX     base RAM size in bytes
  4251                                  ;
  4252                                  ;-----------------------------------------------------------------------------------------------------------------------
  4253                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4254                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4255                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4256                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4257                                                          mov     ah,al                                           ;save base RAM high
  4258                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4259                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4260                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4261                                                          ret                                                     ;return to caller
  4262                                  ;-----------------------------------------------------------------------------------------------------------------------
  4263                                  ;
  4264                                  ;       Routine:        GetExtendedMemSize
  4265                                  ;
  4266                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4267                                  ;
  4268                                  ;       Output:         EAX     extended RAM size in bytes
  4269                                  ;
  4270                                  ;-----------------------------------------------------------------------------------------------------------------------
  4271                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4272                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4273                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4274                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4275                                                          mov     ah,al                                           ;save extended RAM high
  4276                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4277                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4278                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4279                                                          ret                                                     ;return to caller
  4280                                  ;-----------------------------------------------------------------------------------------------------------------------
  4281                                  ;
  4282                                  ;       Routine:        GetROMMemSize
  4283                                  ;
  4284                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4285                                  ;
  4286                                  ;       Output:         EAX     RAM size in bytes
  4287                                  ;
  4288                                  ;-----------------------------------------------------------------------------------------------------------------------
  4289                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4290                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4291                                                          ret                                                     ;return
  4292                                  ;-----------------------------------------------------------------------------------------------------------------------
  4293                                  ;
  4294                                  ;       Routine:        PlaceCursor
  4295                                  ;
  4296                                  ;       Description:    This routine positions the cursor on the console.
  4297                                  ;
  4298                                  ;       In:             DS      OS data selector
  4299                                  ;
  4300                                  ;-----------------------------------------------------------------------------------------------------------------------
  4301                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4302                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4303                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4304                                                          mul     ah                                              ;row offset
  4305                                                          add     al,[wbConsoleColumn]                            ;add column
  4306                                                          adc     ah,0                                            ;add overflow
  4307                                                          mov     ecx,eax                                         ;screen offset
  4308                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4309                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4310                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4311                                                          out     dx,al                                           ;select register
  4312                                                          inc     edx                                             ;data port
  4313                                                          mov     al,ch                                           ;hi-order cursor loc
  4314                                                          out     dx,al                                           ;store hi-order loc
  4315                                                          dec     edx                                             ;register select port
  4316                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4317                                                          out     dx,al                                           ;select register
  4318                                                          inc     edx                                             ;data port
  4319                                                          mov     al,cl                                           ;lo-order cursor loc
  4320                                                          out     dx,al                                           ;store lo-order loc
  4321                                                          pop     ecx                                             ;restore non-volatile regs
  4322                                                          ret                                                     ;return
  4323                                  ;-----------------------------------------------------------------------------------------------------------------------
  4324                                  ;
  4325                                  ;       Routine:        PutPrimaryEndOfInt
  4326                                  ;
  4327                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4328                                  ;
  4329                                  ;-----------------------------------------------------------------------------------------------------------------------
  4330                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4331                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4332                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4333                                                          ret                                                     ;return
  4334                                  ;-----------------------------------------------------------------------------------------------------------------------
  4335                                  ;
  4336                                  ;       Routine:        PutSecondaryEndOfInt
  4337                                  ;
  4338                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4339                                  ;
  4340                                  ;-----------------------------------------------------------------------------------------------------------------------
  4341                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4342                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4343                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4344                                                          ret                                                     ;return
  4345                                  ;-----------------------------------------------------------------------------------------------------------------------
  4346                                  ;
  4347                                  ;       Routine:        ResetSystem
  4348                                  ;
  4349                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4350                                  ;
  4351                                  ;       Out:            N/A     This routine does not return.
  4352                                  ;
  4353                                  ;-----------------------------------------------------------------------------------------------------------------------
  4354                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4355                                                          loop    $                                               ;clear interrupts
  4356                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4357                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4358                                  .10                     sti                                                     ;enable maskable interrupts
  4359                                                          hlt                                                     ;halt until interrupt
  4360                                                          jmp     .10                                             ;repeat until reset kicks in
  4361                                  ;-----------------------------------------------------------------------------------------------------------------------
  4362                                  ;
  4363                                  ;       Routine:        SetKeyboardLamps
  4364                                  ;
  4365                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4366                                  ;
  4367                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4368                                  ;
  4369                                  ;-----------------------------------------------------------------------------------------------------------------------
  4370                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4371                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4372                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4373                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4374                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4375                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4376                                                          mov     al,bh                                           ;set/reset lamps value
  4377                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4378                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4379                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4380                                                          ret                                                     ;return
  4381                                  ;-----------------------------------------------------------------------------------------------------------------------
  4382                                  ;
  4383                                  ;       Routine:        WaitForKeyInBuffer
  4384                                  ;
  4385                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4386                                  ;
  4387                                  ;       Out:            ZF      1 = Input buffer ready
  4388                                  ;                               0 = Input buffer not ready after timeout
  4389                                  ;
  4390                                  ;-----------------------------------------------------------------------------------------------------------------------
  4391                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4392                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4393                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4394                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4395                                                          loopnz  .10                                             ;yes, repeat till timeout
  4396                                                          pop     ecx                                             ;restore non-volatile regs
  4397                                                          ret                                                     ;return
  4398                                  ;-----------------------------------------------------------------------------------------------------------------------
  4399                                  ;
  4400                                  ;       Routine:        WaitForKeyOutBuffer
  4401                                  ;
  4402                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4403                                  ;
  4404                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4405                                  ;                               0 = Output buffer empty after timeout
  4406                                  ;
  4407                                  ;-----------------------------------------------------------------------------------------------------------------------
  4408                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4409                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4410                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4411                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  4412                                                          loopz   .10                                             ;loop until output buffer bit
  4413                                                          pop     ecx                                             ;restore non-volatile regs
  4414                                                          ret                                                     ;return
  4415                                  ;-----------------------------------------------------------------------------------------------------------------------
  4416                                  ;
  4417                                  ;       End of the Kernel Function Library
  4418                                  ;
  4419                                  ;-----------------------------------------------------------------------------------------------------------------------
  4420                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  4421                                  ;=======================================================================================================================
  4422                                  ;
  4423                                  ;       Console Task
  4424                                  ;
  4425                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4426                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4427                                  ;       screen and responds to user commands.
  4428                                  ;
  4429                                  ;=======================================================================================================================
  4430                                  ;-----------------------------------------------------------------------------------------------------------------------
  4431                                  ;
  4432                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4433                                  ;
  4434                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4435                                  ;
  4436                                  ;-----------------------------------------------------------------------------------------------------------------------
  4437                                  section                 constack                                                ;console task stack
  4438                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  4439                                  ;-----------------------------------------------------------------------------------------------------------------------
  4440                                  ;
  4441                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4442                                  ;
  4443                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4444                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4445                                  ;       16 descriptors. Six are initially defined.
  4446                                  ;
  4447                                  ;-----------------------------------------------------------------------------------------------------------------------
  4448                                  section                 conldt                                                  ;console local descriptors
  4449                                                          dq      004093004780007Fh                               ;04 TSS alias
  4450                                                          dq      004093004700007Fh                               ;0c LDT alias
  4451                                                          dq      00409300400006FFh                               ;14 stack
  4452                                                          dq      00CF93000000FFFFh                               ;1c data
  4453                                                          dq      00409B0050000FFFh                               ;24 code
  4454                                                          dq      00409300480007FFh                               ;2c message queue
  4455                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4456                                  ;-----------------------------------------------------------------------------------------------------------------------
  4457                                  ;
  4458                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4459                                  ;
  4460                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4461                                  ;       segment. CS to console code.
  4462                                  ;
  4463                                  ;-----------------------------------------------------------------------------------------------------------------------
  4464                                  section                 contss                                                  ;console task state segment
  4465                                                          dd      0                                               ;00 back-link tss
  4466                                                          dd      0700h                                           ;04 esp ring 0
  4467                                                          dd      0014h                                           ;08 ss ring 0
  4468                                                          dd      0700h                                           ;0c esp ring 1
  4469                                                          dd      0014h                                           ;10 es ring 1
  4470                                                          dd      0700h                                           ;14 esp ring 2
  4471                                                          dd      0014h                                           ;18 ss ring 2
  4472                                                          dd      0                                               ;1c cr ring 3
  4473                                                          dd      0                                               ;20 eip
  4474                                                          dd      0200h                                           ;24 eflags
  4475                                                          dd      0                                               ;28 eax
  4476                                                          dd      0                                               ;2c ecx
  4477                                                          dd      0                                               ;30 edx
  4478                                                          dd      0                                               ;34 ebx
  4479                                                          dd      0700h                                           ;38 esp ring 3
  4480                                                          dd      0                                               ;3c ebp
  4481                                                          dd      0                                               ;40 esi
  4482                                                          dd      0                                               ;44 edi
  4483                                                          dd      001Ch                                           ;48 es
  4484                                                          dd      0024h                                           ;4c cs
  4485                                                          dd      0014h                                           ;50 ss ring 3
  4486                                                          dd      001Ch                                           ;54 ds
  4487                                                          dd      0                                               ;58 fs
  4488                                                          dd      0                                               ;5c gs
  4489                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4490                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4491                                  ;-----------------------------------------------------------------------------------------------------------------------
  4492                                  ;
  4493                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4494                                  ;
  4495                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4496                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4497                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4498                                  ;       event.
  4499                                  ;
  4500                                  ;-----------------------------------------------------------------------------------------------------------------------
  4501                                  section                 conmque                                                 ;console message queue
  4502                                                          dd      8                                               ;head pointer
  4503                                                          dd      8                                               ;tail pointer
  4504                                                          times   510 dd 0                                        ;queue elements
  4505                                  ;-----------------------------------------------------------------------------------------------------------------------
  4506                                  ;
  4507                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4508                                  ;
  4509                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4510                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4511                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4512                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4513                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4514                                  ;       board input, echoing to the console screen and responding to user commands.
  4515                                  ;
  4516                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4517                                  ;
  4518                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4519                                  ;                               |  Real Mode Interrupt Vectors                  |
  4520                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4521                                  ;                               |  Reserved BIOS Memory Area                    |
  4522                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4523                                  ;                               |  Shared Kernel Memory Area                    |
  4524                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4525                                  ;                               |  Global Descriptor Table (GDT)                |
  4526                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4527                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4528                                  ;                       002000  +-----------------------------------------------+
  4529                                  ;                               |  Interrupt Handlers                           |
  4530                                  ;                               |  Kernel Function Library                      |
  4531                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4532                                  ;                               |  Console Task Stack Area                      |
  4533                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4534                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4535                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4536                                  ;                               |  Console Task Task State Segment (TSS)        |
  4537                                  ;                       004800  +-----------------------------------------------+
  4538                                  ;                               |  Console Task Message Queue                   |
  4539                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4540                                  ;                               |  Console Task Code                            |
  4541                                  ;                               |  Console Task Constants                       |
  4542                                  ;                       006000  +===============================================+
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4546                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  4547                                                          clearConsoleScreen                                      ;clear the console screen
  4548                                                          putConsoleString czTitle                                ;display startup message
  4549                                                          putConsoleString czBaseMem                              ;base memory label
  4550                                                          putConsoleString wzBaseMemSize                          ;base memory size
  4551                                                          putConsoleString czKB                                   ;Kilobytes
  4552                                                          call    ConPutNewLine                                   ;new line
  4553                                                          putConsoleString czROMMem                               ;ROM memory label
  4554                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  4555                                                          putConsoleString czKB                                   ;Kilobytes
  4556                                                          call    ConPutNewLine                                   ;new line
  4557                                                          putConsoleString czExtendedMem                          ;extended memory label
  4558                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  4559                                                          putConsoleString czKB                                   ;Kilobytes
  4560                                                          call    ConPutNewLine                                   ;new line
  4561                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4562                                                          placeCursor                                             ;set CRT cursor location
  4563                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4564                                                          call    ConPutNewLine                                   ;newline
  4565                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  4566                                                          mov     ebx,wzConsoleToken                              ;token buffer
  4567                                                          call    ConTakeToken                                    ;handle console input
  4568                                                          mov     edx,wzConsoleToken                              ;token buffer
  4569                                                          call    ConDetermineCommand                             ;determine command number
  4570                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4571                                                          jb      .20                                             ;yes, branch
  4572                                                          putConsoleString czUnknownCommand                       ;display error message
  4573                                                          jmp     .10                                             ;next command
  4574                                  .20                     shl     eax,2                                           ;index into jump table
  4575                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  4576                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4577                                                          call    eax                                             ;call command handler
  4578                                                          jmp     .10                                             ;next command
  4579                                  ;-----------------------------------------------------------------------------------------------------------------------
  4580                                  ;
  4581                                  ;       Routine:        ConInitializeData
  4582                                  ;
  4583                                  ;       Description:    This routine initializes console task variables.
  4584                                  ;
  4585                                  ;-----------------------------------------------------------------------------------------------------------------------
  4586                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  4587                                                          push    edi                                             ;
  4588                                                          push    es                                              ;
  4589                                  ;
  4590                                  ;       Initialize console work areas.
  4591                                  ;
  4592                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4593                                                          pop     es                                              ;... into extra segment register
  4594                                                          mov     edi,ECONDATA                                    ;OS console data address
  4595                                                          xor     al,al                                           ;initialization value
  4596                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  4597                                                          cld                                                     ;forward strings
  4598                                                          rep     stosb                                           ;initialize data
  4599                                  ;
  4600                                  ;       Initialize heap size
  4601                                  ;
  4602                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4603                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  4604                                  ;
  4605                                  ;       Initialize MEMROOT structure
  4606                                  ;
  4607                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  4608                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  4609                                                          xor     ecx,ecx                                         ;zero register
  4610                                                          mov     cl,4                                            ;count
  4611                                                          rep     stosd                                           ;store first/last contig and free addrs
  4612                                                          xor     eax,eax                                         ;zero register
  4613                                                          stosd                                                   ;zero first task block
  4614                                                          stosd                                                   ;zero last task block
  4615                                  ;
  4616                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  4617                                  ;
  4618                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  4619                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  4620                                                          stosd                                                   ;store signature
  4621                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4622                                                          stosd                                                   ;store block size
  4623                                                          xor     ecx,ecx                                         ;zero register
  4624                                                          mov     cl,6                                            ;count
  4625                                                          xor     eax,eax                                         ;zero register
  4626                                                          rep     stosd                                           ;zero owner, reserved, pointers
  4627                                  ;
  4628                                  ;       Read memory sizes from ROM
  4629                                  ;
  4630                                                          getROMMemSize                                           ;get ROM memory size
  4631                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  4632                                                          mov     ecx,eax                                         ;integer param
  4633                                                          mov     edx,wzROMMemSize                                ;output buffer param
  4634                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  4635                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4636                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  4637                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  4638                                                          mov     ecx,eax                                         ;integer param
  4639                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  4640                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  4641                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4642                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  4643                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  4644                                                          mov     ecx,eax                                         ;integer param
  4645                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  4646                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  4647                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  4648                                  ;
  4649                                  ;       Restore and return.
  4650                                  ;
  4651                                                          pop     es                                              ;restore non-volatile regs
  4652                                                          pop     edi                                             ;
  4653                                                          pop     ecx                                             ;
  4654                                                          ret                                                     ;return
  4655                                  ;-----------------------------------------------------------------------------------------------------------------------
  4656                                  ;
  4657                                  ;       Routine:        ConPutNewLine
  4658                                  ;
  4659                                  ;       Description:    Write a new-line to the console.
  4660                                  ;
  4661                                  ;-----------------------------------------------------------------------------------------------------------------------
  4662                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  4663                                                          ret                                                     ;return
  4664                                  ;-----------------------------------------------------------------------------------------------------------------------
  4665                                  ;
  4666                                  ;       Routine:        ConTakeToken
  4667                                  ;
  4668                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4669                                  ;
  4670                                  ;       In:             DS:EDX  source buffer address
  4671                                  ;                       DS:EBX  target buffer address
  4672                                  ;
  4673                                  ;       Out:            DS:EDX  source buffer address
  4674                                  ;                       DS:EBX  target buffer address
  4675                                  ;
  4676                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4677                                  ;
  4678                                  ;-----------------------------------------------------------------------------------------------------------------------
  4679                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  4680                                                          push    edi                                             ;
  4681                                                          push    es                                              ;
  4682                                                          push    ds                                              ;load data segment selector ...
  4683                                                          pop     es                                              ;... into extra segment reg
  4684                                                          mov     esi,edx                                         ;source buffer address
  4685                                                          mov     edi,ebx                                         ;target buffer address
  4686                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4687                                                          cld                                                     ;forward strings
  4688                                  .10                     lodsb                                                   ;load byte
  4689                                                          cmp     al,EASCIISPACE                                  ;space?
  4690                                                          je      .10                                             ;yes, continue
  4691                                                          test    al,al                                           ;end of line?
  4692                                                          jz      .40                                             ;yes, branch
  4693                                  .20                     stosb                                                   ;store byte
  4694                                                          lodsb                                                   ;load byte
  4695                                                          test    al,al                                           ;end of line?
  4696                                                          jz      .40                                             ;no, continue
  4697                                                          cmp     al,EASCIISPACE                                  ;space?
  4698                                                          jne     .20                                             ;no, continue
  4699                                  .30                     lodsb                                                   ;load byte
  4700                                                          cmp     al,EASCIISPACE                                  ;space?
  4701                                                          je      .30                                             ;yes, continue
  4702                                                          dec     esi                                             ;pre-position
  4703                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4704                                                          mov     edi,edx                                         ;source buffer address
  4705                                  .50                     lodsb                                                   ;remaining byte
  4706                                                          stosb                                                   ;move to front of buffer
  4707                                                          test    al,al                                           ;end of line?
  4708                                                          jnz     .50                                             ;no, continue
  4709                                                          pop     es                                              ;restore non-volatile regs
  4710                                                          pop     edi                                             ;
  4711                                                          pop     esi                                             ;
  4712                                                          ret                                                     ;return
  4713                                  ;-----------------------------------------------------------------------------------------------------------------------
  4714                                  ;
  4715                                  ;       Routine:        ConDetermineCommand
  4716                                  ;
  4717                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4718                                  ;
  4719                                  ;       input:          DS:EDX  command address
  4720                                  ;
  4721                                  ;       output:         EAX     >=0     = command nbr
  4722                                  ;                               0       = unknown command
  4723                                  ;
  4724                                  ;-----------------------------------------------------------------------------------------------------------------------
  4725                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4726                                                          push    ecx                                             ;
  4727                                                          push    esi                                             ;
  4728                                                          push    edi                                             ;
  4729                                                          upperCaseString                                         ;upper-case string at EDX
  4730                                                          mov     esi,tConCmdTbl                                  ;commands table
  4731                                                          xor     edi,edi                                         ;intialize command number
  4732                                                          cld                                                     ;forward strings
  4733                                  .10                     lodsb                                                   ;command length
  4734                                                          movzx   ecx,al                                          ;command length
  4735                                                          jecxz   .20                                             ;branch if end of table
  4736                                                          mov     ebx,esi                                         ;table entry address
  4737                                                          add     esi,ecx                                         ;next table entry address
  4738                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4739                                                          jecxz   .20                                             ;branch if equal
  4740                                                          inc     edi                                             ;increment command nbr
  4741                                                          jmp     .10                                             ;repeat
  4742                                  .20                     mov     eax,edi                                         ;command number
  4743                                                          pop     edi                                             ;restore non-volatile regs
  4744                                                          pop     esi                                             ;
  4745                                                          pop     ecx                                             ;
  4746                                                          pop     ebx                                             ;
  4747                                                          ret                                                     ;return
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749                                  ;
  4750                                  ;       Routine:        ConClear
  4751                                  ;
  4752                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4753                                  ;
  4754                                  ;-----------------------------------------------------------------------------------------------------------------------
  4755                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4756                                                          ret                                                     ;return
  4757                                  ;-----------------------------------------------------------------------------------------------------------------------
  4758                                  ;
  4759                                  ;       Routine:        ConExit
  4760                                  ;
  4761                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4762                                  ;
  4763                                  ;-----------------------------------------------------------------------------------------------------------------------
  4764                                  ConExit                 resetSystem                                             ;issue system reset
  4765                                                          ret                                                     ;return
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ;
  4768                                  ;       Routine:        ConFree
  4769                                  ;
  4770                                  ;       Description:    This routine handles the FREE command.
  4771                                  ;
  4772                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4773                                  ;
  4774                                  ;-----------------------------------------------------------------------------------------------------------------------
  4775                                  ConFree                 push    ebx                                             ;save non-volatile regs
  4776                                                          push    ecx                                             ;
  4777                                                          push    esi                                             ;
  4778                                                          push    edi                                             ;
  4779                                  ;
  4780                                  ;       Get address parameter
  4781                                  ;
  4782                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  4783                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4784                                                          call    ConTakeToken                                    ;take first param as token
  4785                                  ;
  4786                                  ;       Convert input parameter from hexadecimal string to binary
  4787                                  ;
  4788                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4789                                                          je      .10                                             ;no, branch
  4790                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4791                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4792                                                          test    eax,eax                                         ;valid parameter?
  4793                                                          jz      .10                                             ;no, branch
  4794                                  ;
  4795                                  ;       Free memory block
  4796                                  ;
  4797                                                          freeMemory eax                                          ;free memory
  4798                                                          cmp     eax,-1                                          ;memory freed?
  4799                                                          je      .10                                             ;no, branch
  4800                                  ;
  4801                                  ;       Indicate memory freed
  4802                                  ;
  4803                                                          putConsoleString czOK                                   ;indicate success
  4804                                  ;
  4805                                  ;       Restore and return
  4806                                  ;
  4807                                  .10                     pop     edi                                             ;restore non-volatile regs
  4808                                                          pop     esi                                             ;
  4809                                                          pop     ecx                                             ;
  4810                                                          pop     ebx                                             ;
  4811                                                          ret                                                     ;return
  4812                                  ;-----------------------------------------------------------------------------------------------------------------------
  4813                                  ;
  4814                                  ;       Routine:        ConInt6
  4815                                  ;
  4816                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4817                                  ;
  4818                                  ;-----------------------------------------------------------------------------------------------------------------------
  4819                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  4820                                                          ret                                                     ;return (not executed)
  4821                                  ;-----------------------------------------------------------------------------------------------------------------------
  4822                                  ;
  4823                                  ;       Routine:        ConMalloc
  4824                                  ;
  4825                                  ;       Description:    This routine handles the MALLOC command.
  4826                                  ;
  4827                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4828                                  ;
  4829                                  ;-----------------------------------------------------------------------------------------------------------------------
  4830                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  4831                                                          push    ecx                                             ;
  4832                                                          push    esi                                             ;
  4833                                                          push    edi                                             ;
  4834                                  ;
  4835                                  ;       Get size parameter
  4836                                  ;
  4837                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4838                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4839                                                          call    ConTakeToken                                    ;take first param as token
  4840                                  ;
  4841                                  ;       Convert input parameter from decimal string to binary
  4842                                  ;
  4843                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4844                                                          je      .10                                             ;no, branch
  4845                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4846                                                          decimalToUnsigned                                       ;convert string token to unsigned
  4847                                                          test    eax,eax                                         ;valid parameter?
  4848                                                          jz      .10                                             ;no, branch
  4849                                  ;
  4850                                  ;       Allocate memory block
  4851                                  ;
  4852                                                          allocateMemory eax                                      ;allocate memory
  4853                                                          test    eax,eax                                         ;memory allocated?
  4854                                                          jz      .10                                             ;no, branch
  4855                                  ;
  4856                                  ;       Report allocated memory block address
  4857                                  ;
  4858                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  4859                                                          mov     ecx,eax                                         ;memory address
  4860                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  4861                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  4862                                                          call    ConPutNewLine                                   ;display new line
  4863                                  .10                     pop     edi                                             ;restore non-volatile regs
  4864                                                          pop     esi                                             ;
  4865                                                          pop     ecx                                             ;
  4866                                                          pop     ebx                                             ;
  4867                                                          ret                                                     ;return
  4868                                  ;-----------------------------------------------------------------------------------------------------------------------
  4869                                  ;
  4870                                  ;       Routine:        ConMem
  4871                                  ;
  4872                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4873                                  ;
  4874                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4875                                  ;
  4876                                  ;-----------------------------------------------------------------------------------------------------------------------
  4877                                  ConMem                  push    ebx                                             ;save non-volatile regs
  4878                                                          push    esi                                             ;
  4879                                                          push    edi                                             ;
  4880                                  ;
  4881                                  ;       Update the source address if a parameter is given.
  4882                                  ;
  4883                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4884                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4885                                                          call    ConTakeToken                                    ;take first param as token
  4886                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4887                                                          je      .10                                             ;no, branch
  4888                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4889                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4890                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  4891                                  ;
  4892                                  ;       Setup source address and row count.
  4893                                  ;
  4894                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4895                                                          xor     ecx,ecx                                         ;zero register
  4896                                                          mov     cl,16                                           ;row count
  4897                                  ;
  4898                                  ;       Start the row with the source address in hexadecimal.
  4899                                  ;
  4900                                  .20                     push    ecx                                             ;save remaining rows
  4901                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4902                                                          mov     edx,edi                                         ;output buffer address
  4903                                                          mov     ecx,esi                                         ;console memory address
  4904                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4905                                                          add     edi,8                                           ;end of memory addr hexnum
  4906                                                          mov     al,' '                                          ;ascii space
  4907                                                          stosb                                                   ;store delimiter
  4908                                  ;
  4909                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  4910                                  ;
  4911                                                          xor     ecx,ecx                                         ;zero register
  4912                                                          mov     cl,16                                           ;loop count
  4913                                  .30                     push    ecx                                             ;save loop count
  4914                                                          lodsb                                                   ;memory byte
  4915                                                          mov     ah,al                                           ;memory byte
  4916                                                          shr     al,4                                            ;high-order in bits 3-0
  4917                                                          or      al,30h                                          ;apply ascii numeric zone
  4918                                                          cmp     al,3ah                                          ;numeric range?
  4919                                                          jb      .40                                             ;yes, skip ahead
  4920                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4921                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4922                                                          mov     al,ah                                           ;low-order in bits 3-0
  4923                                                          and     al,0fh                                          ;mask out high-order bits
  4924                                                          or      al,30h                                          ;apply ascii numeric zone
  4925                                                          cmp     al,3ah                                          ;numeric range?
  4926                                                          jb      .50                                             ;yes, skip ahead
  4927                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4928                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4929                                                          mov     al,' '                                          ;ascii space
  4930                                                          stosb                                                   ;store ascii space delimiter
  4931                                                          pop     ecx                                             ;loop count
  4932                                                          loop    .30                                             ;next
  4933                                  ;
  4934                                  ;       Output printable ASCII character section for the row.
  4935                                  ;
  4936                                                          sub     esi,16                                          ;reset source pointer
  4937                                                          mov     cl,16                                           ;loop count
  4938                                  .60                     lodsb                                                   ;source byte
  4939                                                          cmp     al,32                                           ;printable? (low-range test)
  4940                                                          jb      .70                                             ;no, skip ahead
  4941                                                          cmp     al,128                                          ;printable? (high-range test)
  4942                                                          jb      .80                                             ;yes, skip ahead
  4943                                  .70                     mov     al,' '                                          ;display space instead of printable
  4944                                  .80                     stosb                                                   ;store printable ascii byte
  4945                                                          loop    .60                                             ;next source byte
  4946                                                          xor     al,al                                           ;nul-terminator
  4947                                                          stosb                                                   ;terminate output line
  4948                                  ;
  4949                                  ;       Display constructed output buffer and newline.
  4950                                  ;
  4951                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4952                                                          call    ConPutNewLine                                   ;display new line
  4953                                  ;
  4954                                  ;       Repeat until all lines displayed and preserve source address.
  4955                                  ;
  4956                                                          pop     ecx                                             ;remaining rows
  4957                                                          loop    .20                                             ;next row
  4958                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4959                                                          pop     edi                                             ;restore regs
  4960                                                          pop     esi                                             ;
  4961                                                          pop     ebx                                             ;
  4962                                                          ret                                                     ;return
  4963                                  ;-----------------------------------------------------------------------------------------------------------------------
  4964                                  ;
  4965                                  ;       Routine:        ConVersion
  4966                                  ;
  4967                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4968                                  ;
  4969                                  ;-----------------------------------------------------------------------------------------------------------------------
  4970                                  ConVersion              putConsoleString czTitle                                ;display version message
  4971                                                          ret                                                     ;return
  4972                                  ;-----------------------------------------------------------------------------------------------------------------------
  4973                                  ;
  4974                                  ;       Tables
  4975                                  ;
  4976                                  ;-----------------------------------------------------------------------------------------------------------------------
  4977                                                                                                                  ;---------------------------------------
  4978                                                                                                                  ;  Command Jump Table
  4979                                                                                                                  ;---------------------------------------
  4980                                  tConJmpTbl              equ     $                                               ;command jump table
  4981                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4982                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4983                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  4984                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4985                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4986                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4987                                                          dd      ConFree         - ConCode                       ;free command routine offset
  4988                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4989                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4990                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4991                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4992                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4993                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4994                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4995                                                                                                                  ;---------------------------------------
  4996                                                                                                                  ;  Command Name Table
  4997                                                                                                                  ;---------------------------------------
  4998                                  tConCmdTbl              equ     $                                               ;command name table
  4999                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  5000                                                          db      8,"VERSION",0                                   ;version command
  5001                                                          db      7,"MALLOC",0                                    ;malloc command
  5002                                                          db      7,"MEMORY",0                                    ;memory command
  5003                                                          db      6,"CLEAR",0                                     ;clear command
  5004                                                          db      5,"EXIT",0                                      ;exit command
  5005                                                          db      5,"FREE",0                                      ;free command
  5006                                                          db      5,"INT6",0                                      ;int6 command
  5007                                                          db      5,"QUIT",0                                      ;quit command
  5008                                                          db      4,"CLS",0                                       ;cls command
  5009                                                          db      4,"MEM",0                                       ;mem command
  5010                                                          db      4,"VER",0                                       ;ver command
  5011                                                          db      0                                               ;end of table
  5012                                  ;-----------------------------------------------------------------------------------------------------------------------
  5013                                  ;
  5014                                  ;       Constants
  5015                                  ;
  5016                                  ;-----------------------------------------------------------------------------------------------------------------------
  5017                                  czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  5018                                  czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  5019                                  czKB                    db      "KB",0                                          ;Kilobytes
  5020                                  czNewLine               db      13,10,0                                         ;new line string
  5021                                  czOK                    db      "ok",13,10,0                                    ;ok string
  5022                                  czPrompt                db      ":",0                                           ;prompt string
  5023                                  czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  5024                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5025                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5026                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  5027                                  %endif
  5028                                  %ifdef BUILDDISK
  5029                                  ;-----------------------------------------------------------------------------------------------------------------------
  5030                                  ;
  5031                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5032                                  ;
  5033                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5034                                  ;
  5035                                  ;-----------------------------------------------------------------------------------------------------------------------
  5036                                  section                 unused                                                  ;unused disk space
  5037                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5038                                  %endif
  5039                                  ;=======================================================================================================================
  5040                                  ;
  5041                                  ;       End of Program Code
  5042                                  ;
  5043                                  ;=======================================================================================================================
