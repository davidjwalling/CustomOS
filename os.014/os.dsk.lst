     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.014
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to locate and report the ethernet adapter
     8                                  ;                       at start-up.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EHWF...         Hardware flags
   169                                  ;       EKEYF...        Keyboard status flags
   170                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   171                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   172                                  ;       EMEM...         Memory Management values
   173                                  ;       EMSG...         Message identifers
   174                                  ;
   175                                  ;=======================================================================================================================
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Hardware-Defined Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   184                                  ;
   185                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   186                                  ;       for CGA, EGA, VGA and compatible video modes.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   190                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   191                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   192                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ;
   195                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   196                                  ;
   197                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   198                                  ;
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   201                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   202                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   203                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   204                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8042 Keyboard Controller                                                EKEYB...
   208                                  ;
   209                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   210                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EKEYBPORTDATA           equ     060h                                            ;data port
   214                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   215                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   216                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   217                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   218                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   219                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   220                                                                                                                  ;---------------------------------------
   221                                                                                                                  ;       Keyboard Scan Codes
   222                                                                                                                  ;---------------------------------------
   223                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   224                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   225                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   226                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   227                                  EKEYBSLASH              equ     035h                                            ;slash
   228                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   229                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   230                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   231                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   232                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   233                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   234                                  EKEYBUP                 equ     080h                                            ;up
   235                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   236                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   237                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   238                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   239                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   240                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   241                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   242                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   243                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   244                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   245                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   246                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  ;
   249                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   250                                  ;
   251                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   252                                  ;       external devices and signals a hardware interrupt to the CPU.
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   256                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   257                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   258                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   259                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       8253 Programmable Interval Timer                                        EPIT...
   263                                  ;
   264                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   265                                  ;       approximately 18.2 times per second.
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 CPU Architecture                                                    ;EX86...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   301                                  ;
   302                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   303                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   304                                  ;
   305                                  ;       0.......        Segment is not present in memory (triggers int 11)
   306                                  ;       1.......        Segment is present in memory
   307                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   308                                  ;       ...0....        Segment is a system segment
   309                                  ;       ...00010                Local Descriptor Table
   310                                  ;       ...00101                Task Gate
   311                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   312                                  ;       ...01100                Call Gate (386)
   313                                  ;       ...01110                Interrupt Gate (386)
   314                                  ;       ...01111                Trap Gate (386)
   315                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   316                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   317                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   321                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   322                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   323                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   324                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   325                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   326                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   327                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       Firmware-Defined Values
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   336                                  ;
   337                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   338                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   342                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   343                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   344                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   345                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   346                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   347                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   348                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   349                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   350                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   351                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Standards-Based Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       ASCII                                                                   EASCII...
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   363                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   364                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   365                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   366                                  EASCIISPACE             equ     020h                                            ;space
   367                                  EASCIIPERIOD            equ     02Eh                                            ;period
   368                                  EASCIIUPPERA            equ     041h                                            ;'A'
   369                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   370                                  EASCIILOWERA            equ     061h                                            ;'a'
   371                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   372                                  EASCIITILDE             equ     07Eh                                            ;'~'
   373                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   374                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   375                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   376                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   377                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   378                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   379                                  EASCIICASE              equ     00100000b                                       ;case bit
   380                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  ;
   383                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   384                                  ;
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   387                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   388                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   389                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   390                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   391                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   392                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   393                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   394                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   395                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   396                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   397                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   398                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   399                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   400                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   401                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;
   404                                  ;       Operating System Values
   405                                  ;
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;
   409                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   410                                  ;
   411                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   412                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   413                                  ;
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   416                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   417                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   418                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   419                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   420                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   421                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ;       Console Constants                                                       ECON...
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ECONCOLS                equ     80                                              ;columns per row
   426                                  ECONROWS                equ     24                                              ;console rows
   427                                  ECONOIAROW              equ     24                                              ;operator information area row
   428                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   429                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   430                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   431                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   432                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   437                                  EGDTCGA                 equ     020h                                            ;cga video selector
   438                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   439                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   440                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   441                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   442                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   443                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;       Hardware Flags                                                          EHWF...
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  ;       Keyboard Flags                                                          EKEYF...
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   452                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   453                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   454                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   455                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   456                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   457                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   458                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   459                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   460                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   461                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ;       Kernel Constants                                                        EKRN...
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   466                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   467                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   468                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   469                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   470                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;       Memory Management Constants                                             EMEM...
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   479                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   480                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   481                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  ;       Message Identifiers                                                     EMSG...
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   486                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   487                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   488                                  ;=======================================================================================================================
   489                                  ;
   490                                  ;       Structures
   491                                  ;
   492                                  ;=======================================================================================================================
   493                                  ;-----------------------------------------------------------------------------------------------------------------------
   494                                  ;
   495                                  ;       DATETIME
   496                                  ;
   497                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   498                                  ;
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  struc                   DATETIME
   501 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   502 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   503 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   504 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   505 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   506 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   507 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   508 00000007 <res 00000001>          .century                resb    1                                               ;century
   509                                  EDATETIMELEN            equ     ($-.second)
   510                                  endstruc
   511                                  ;-----------------------------------------------------------------------------------------------------------------------
   512                                  ;
   513                                  ;       ETHER
   514                                  ;
   515                                  ;       The ETHER structure defines an Ethernet adapter context.
   516                                  ;
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  struc                   ETHER
   519 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   520 00000004 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address
   521 00000008 <res 00000004>          .port                   resd    1                                               ;i/o port
   522 0000000C <res 00000006>          .mac                    resb    6                                               ;mac address
   523 00000012 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   524                                  EETHERLEN               equ     ($-.selector)
   525                                  endstruc
   526                                  ;-----------------------------------------------------------------------------------------------------------------------
   527                                  ;
   528                                  ;       MEMBLOCK
   529                                  ;
   530                                  ;       The MEMBLOCK structure defines a memory block.
   531                                  ;
   532                                  ;-----------------------------------------------------------------------------------------------------------------------
   533                                  struc                   MEMBLOCK
   534 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   535 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   536 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   537 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   538 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   539 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   540 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   541 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   542                                  EMEMBLOCKLEN            equ     ($-.signature)
   543                                  endstruc
   544                                  ;-----------------------------------------------------------------------------------------------------------------------
   545                                  ;
   546                                  ;       MEMROOT
   547                                  ;
   548                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   549                                  ;
   550                                  ;-----------------------------------------------------------------------------------------------------------------------
   551                                  struc                   MEMROOT
   552 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   553 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   554 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   555 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   556 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   557 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   558                                  EMEMROOTLEN             equ     ($-.firstcontig)
   559                                  endstruc
   560                                  ;-----------------------------------------------------------------------------------------------------------------------
   561                                  ;
   562                                  ;       MQUEUE
   563                                  ;
   564                                  ;       The MQUEUE structure maps memory used for a message queue.
   565                                  ;
   566                                  ;-----------------------------------------------------------------------------------------------------------------------
   567                                  struc                   MQUEUE
   568 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   569 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   570 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   571                                  endstruc
   572                                  ;-----------------------------------------------------------------------------------------------------------------------
   573                                  ;
   574                                  ;       PCI
   575                                  ;
   576                                  ;       The PCI structure defines a PCI bus, device and function context.
   577                                  ;
   578                                  ;-----------------------------------------------------------------------------------------------------------------------
   579                                  struc                   PCI
   580 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   581 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   582 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   583 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   584 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   585                                  .configdata             equ     $                                               ;data read from port 0CFCh
   586 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   587 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   588 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   589 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   590                                  EPCILEN                 equ     ($-.configdata)
   591                                  endstruc
   592                                  ;-----------------------------------------------------------------------------------------------------------------------
   593                                  ;
   594                                  ;       OSDATA
   595                                  ;
   596                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   597                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   598                                  ;
   599                                  ;-----------------------------------------------------------------------------------------------------------------------
   600                                  struc                   OSDATA
   601 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   602 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   603 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   604 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   605 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   606 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   607 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   608 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   609 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   610 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   611 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   612 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   613 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   614 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   615 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   616 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   617 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   618 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   619 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   620 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   621 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   622 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   623 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   624 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   625 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   626 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   627 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   628 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   629 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   630 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   631 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   632 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   633 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   634 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   635 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   636 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   637 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   638 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   639 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   640 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   641 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   642 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   643 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   644 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   645 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   646 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   647 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   648 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   649 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   650 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   651 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   652 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   653 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   654 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   655 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   656 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   657 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   658 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   659 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   660 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   661 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   662 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   663 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   664 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   665 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   666 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   667 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   668 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   669 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   670 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   671 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   672 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   673 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   674 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   675 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   676 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   677 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   678 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   679 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   680 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   681 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   682 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   683 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   684 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   685 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   686 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   687 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   688 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   689 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   690 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   691 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   692 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   693 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   694 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   695 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   696 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   697 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   698 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   699 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   700 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   701 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   702                                  ;-----------------------------------------------------------------------------------------------------------------------
   703                                  ;
   704                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   705                                  ;
   706                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   707                                  ;
   708                                  ;-----------------------------------------------------------------------------------------------------------------------
   709                                  ECONDATA                equ     ($)
   710 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   711 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   712 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   713 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   714 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   715 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   716 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   717 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   718 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   719 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   720 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   721 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   722 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   723 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   724 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   725 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   726 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   727 00000820 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   728 00000821 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   729 00000871 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   730 000008C1 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   731 00000911 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   732 0000091C <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   733 00000927 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   734 00000932 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   735 0000093B <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   736 00000953 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   737 0000095B <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   738 00000967 <res 00000013>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   739                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   740                                  ;-----------------------------------------------------------------------------------------------------------------------
   741                                  ;
   742                                  ;       End of OS Variables
   743                                  ;
   744                                  ;-----------------------------------------------------------------------------------------------------------------------
   745                                  endstruc
   746                                  ;-----------------------------------------------------------------------------------------------------------------------
   747                                  ;
   748                                  ;       Macros
   749                                  ;
   750                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   751                                  ;
   752                                  ;-----------------------------------------------------------------------------------------------------------------------
   753                                  %macro                  mint    1
   754                                  _%1                     equ     ($-$$) / EX86DESCLEN
   755                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   756                                  %endmacro
   757                                  %macro                  mtrap   1
   758                                  _%1                     equ     ($-$$) / EX86DESCLEN
   759                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   760                                  %endmacro
   761                                  %macro                  menter  1
   762                                  ?%1                     equ     ($-$$)
   763                                  %endmacro
   764                                  %macro                  tsvce   1
   765                                  e%1                     equ     ($-tsvc)/4
   766                                                          dd      %1
   767                                  %endmacro
   768                                  %ifdef BUILDBOOT
   769                                  ;=======================================================================================================================
   770                                  ;
   771                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   772                                  ;
   773                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   774                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   775                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   776                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   777                                  ;
   778                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   779                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   780                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   781                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   782                                  ;       immediately followed by a disk parameter table.
   783                                  ;
   784                                  ;=======================================================================================================================
   785                                                          cpu     8086                                            ;assume minimal CPU
   786                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   787                                                          bits    16                                              ;16-bit code at power-up
   788                                  %ifdef BUILDPREP
   789                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   790                                  %else
   791 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   792                                  %endif
   793                                  ;-----------------------------------------------------------------------------------------------------------------------
   794                                  ;
   795                                  ;       Disk Parameter Table
   796                                  ;
   797                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   798                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   799                                  ;
   800                                  ;-----------------------------------------------------------------------------------------------------------------------
   801 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   802 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   803 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   804 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   805 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   806 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   807 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   808 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   809 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   810                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   811 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   812 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   813 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   814                                  ;
   815                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   816                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   817                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   818                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   819                                  ;       given several possible starting values for CS:IP.
   820                                  ;
   821                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   822 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   823                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   824 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   825 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   826 00000025 B104                                            mov     cl,4                                            ;shift count
   827 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   828 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   829 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   830                                  ;
   831                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   832                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   833                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   834                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   835                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   836                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   837                                  ;
   838 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   839 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   840 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   841 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   842 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   843                                  ;
   844                                  ;       Our boot addressability is now set up according to the following diagram.
   845                                  ;
   846                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   847                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   848                                  ;                               |  256 = 100h bytes                             |
   849                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   850                                  ;                               |  Boot Sector (vstart=0100h)                   |
   851                                  ;                               |  1 sector = 512 = 200h bytes                  |
   852                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   853                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   854                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   855                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   856                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   857                                  ;                               |  2 sectors = 1024 = 400h bytes
   858                                  ;                       009400  +-----------------------------------------------+ DS:1900
   859                                  ;
   860                                  ;       On entry, DL indicates the drive being booted from.
   861                                  ;
   862 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   863                                  ;
   864                                  ;       Compute directory i/o buffer address.
   865                                  ;
   866 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   867 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   868 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   869 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   870                                  ;
   871                                  ;       Compute segment where os.com will be loaded.
   872                                  ;
   873 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   874 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   875 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   876 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   877                                  ;
   878                                  ;       Set the video mode to 80 column, 25 row, text.
   879                                  ;
   880 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   881 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   882                                  ;
   883                                  ;       Write a message to the console so we know we have our addressability established.
   884                                  ;
   885 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   886 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   887                                  ;
   888                                  ;       Initialize the number of directory sectors to search.
   889                                  ;
   890 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   891 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   892                                  ;
   893                                  ;       Compute number of directory sectors and initialize overhead count.
   894                                  ;
   895 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   896 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   897 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   898 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   899                                  ;
   900                                  ;       Compute directory entries per sector.
   901                                  ;
   902 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   903 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   904 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   905                                  ;
   906                                  ;       Compute first logical directory sector and update overhead count.
   907                                  ;
   908 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   909 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   910 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   911 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   912 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   913 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   914                                  ;
   915                                  ;       Read directory sector.
   916                                  ;
   917 0000008E B001                    .30                     mov     al,1                                            ;sector count
   918 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   919 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   920 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   921                                  ;
   922                                  ;       Setup variables to search this directory sector.
   923                                  ;
   924 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   925 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   926 000000A1 7603                                            jna     .40                                             ;no, continue
   927 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   928 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   929 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   930 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   931                                  ;
   932                                  ;       Loop through directory sectors searching for kernel program.
   933                                  ;
   934 000000B1 56                      .50                     push    si                                              ;save kernel name address
   935 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   936 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   937 000000B6 FC                                              cld                                                     ;forward strings
   938 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   939 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   940 000000BA 5E                                              pop     si                                              ;restore kernel name address
   941 000000BB 7418                                            je      .60                                             ;exit loop if found
   942 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   943 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   944 000000C2 75ED                                            jnz     .50                                             ;next entry
   945                                  ;
   946                                  ;       Repeat search if we are not at the end of the directory.
   947                                  ;
   948 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   949 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   950 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   951 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   952 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   953                                  ;
   954                                  ;       If we find the kernel program in the directory, read the FAT.
   955                                  ;
   956 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   957 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   958 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   959 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   960 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   961 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   962                                  ;
   963                                  ;       Get the starting cluster of the kernel program and target address.
   964                                  ;
   965 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   966 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   967                                  ;
   968                                  ;       Read each program cluster into RAM.
   969                                  ;
   970 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   971 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   972 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   973 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   974 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   975 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   976 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   977 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   978 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   979                                  ;
   980                                  ;       Update buffer pointer for next cluster.
   981                                  ;
   982 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   983 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   984 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   985 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   986 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   987                                  ;
   988                                  ;       Compute next cluster number.
   989                                  ;
   990 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   991 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   992 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   993 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   994 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   995 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   996 00000120 83E701                                          and     di,1                                            ;get low bit
   997 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   998 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   999 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
  1000                                  ;
  1001                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1002                                  ;
  1003 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
  1004 0000012E 7404                                            jz      .80                                             ;no, skip ahead
  1005 00000130 B104                                            mov     cl,4                                            ;shift count
  1006 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
  1007 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1008 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1009 0000013A 75B2                                            jne     .70                                             ;no, continue
  1010                                  ;
  1011                                  ;       Transfer control to the operating system program.
  1012                                  ;
  1013 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1014 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1015 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1016                                  ;
  1017                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1018                                  ;
  1019 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1020 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1021 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1022 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1023 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1024 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1025 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1026 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1027 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1028 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1029                                  ;
  1030                                  ;       Try maxtries times to read sector.
  1031                                  ;
  1032 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1033 00000160 53                      .10                     push    bx                                              ;save buffer address
  1034 00000161 51                                              push    cx                                              ;save retry count
  1035 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1036 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1037 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1038 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1039 0000016F 59                                              pop     cx                                              ;restore retry count
  1040 00000170 5B                                              pop     bx                                              ;restore buffer address
  1041 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1042 00000173 E2EB                                            loop    .10                                             ;retry
  1043                                  ;
  1044                                  ;       Handle disk error: convert to ASCII and store in error string.
  1045                                  ;
  1046 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1047 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1048 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1049 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1050 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1051 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1052 00000183 7203                                            jb      .20                                             ;continue if numeral
  1053 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1054 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1055 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1056 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1057 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1058 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1059 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1060                                  ;
  1061                                  ;       Wait for a key press.
  1062                                  ;
  1063 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1064 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1065 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1066 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1067 0000019F F4                                              hlt                                                     ;wait for interrupt
  1068 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1069                                  ;
  1070                                  ;       Reset the system.
  1071                                  ;
  1072 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1073 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1074 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1075 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1076 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1077                                  ;
  1078                                  ;       Display text message.
  1079                                  ;
  1080 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1081 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1082 000001AC 84C0                                            test    al,al                                           ;end of string?
  1083 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1084 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1085 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1086 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1087 000001B6 C3                      BootReturn              ret                                                     ;return
  1088                                  ;-----------------------------------------------------------------------------------------------------------------------
  1089                                  ;
  1090                                  ;       Constants
  1091                                  ;
  1092                                  ;-----------------------------------------------------------------------------------------------------------------------
  1093 000001B7 90                                              align   2
  1094 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1095 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1095 000001C3 4F4D               
  1096 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1096 000001CE 530D0A00           
  1097 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1097 000001DB 7220               
  1098 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1099 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1099 000001E9 6700               
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101                                  ;
  1102                                  ;       Work Areas
  1103                                  ;
  1104                                  ;-----------------------------------------------------------------------------------------------------------------------
  1105 000001EB 90                                              align   2
  1106 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1107 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1108 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1109 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1110 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1111                                  wwReadCountCommand      equ     $                                               ;read count and command
  1112 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1113 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1114                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1115 000001F8 00                      wbDrive                 db      0                                               ;drive
  1116 000001F9 00                      wbHead                  db      0                                               ;head
  1117                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1118 000001FA 00                                              db      0                                               ;sector
  1119 000001FB 00                      wbTrack                 db      0                                               ;track
  1120 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1121 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1122                                  %endif
  1123                                  %ifdef BUILDPREP
  1124                                  ;=======================================================================================================================
  1125                                  ;
  1126                                  ;       Diskette Preparation Code
  1127                                  ;
  1128                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1129                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1130                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1131                                  ;
  1132                                  ;=======================================================================================================================
  1133                                  ;
  1134                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1135                                  ;
  1136                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1137                                                          call    BootPrint                                       ;display message
  1138                                  ;
  1139                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1140                                  ;
  1141                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1142                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1143                                                          jnz     .20                                             ;continue if key pressed
  1144                                                          sti                                                     ;enable interrupts
  1145                                                          hlt                                                     ;wait for interrupt
  1146                                                          jmp     .10                                             ;repeat
  1147                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1148                                                          je      .30                                             ;yes, branch
  1149                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1150                                                          jne     .10                                             ;no, repeat
  1151                                                          jmp     .120                                            ;yes, exit program
  1152                                  ;
  1153                                  ;       Display writing-sector message and patch the JMP instruction.
  1154                                  ;
  1155                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1156                                                          call    BootPrint                                       ;display message
  1157                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1158                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1159                                                          mov     [bx],ax                                         ;update the JMP instruction
  1160                                  ;
  1161                                  ;       Try to read the boot sector.
  1162                                  ;
  1163                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1164                                  .40                     push    cx                                              ;save remaining tries
  1165                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1166                                                          mov     dx,0                                            ;head zero, drive zero
  1167                                                          mov     cx,1                                            ;track zero, sector one
  1168                                                          mov     al,1                                            ;one sector
  1169                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1170                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1171                                                          pop     cx                                              ;restore remaining retries
  1172                                                          jnc     .50                                             ;skip ahead if successful
  1173                                                          loop    .40                                             ;try again
  1174                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1175                                                          jmp     .70                                             ;branch to error routine
  1176                                  ;
  1177                                  ;       Copy diskette parms from input buffer to output buffer.
  1178                                  ;
  1179                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1180                                                          add     si,11                                           ;skip over JMP and system ID
  1181                                                          mov     di,Boot                                         ;output buffer address
  1182                                                          add     di,11                                           ;skip over JMP and system ID
  1183                                                          mov     cx,19                                           ;length of diskette parameters
  1184                                                          cld                                                     ;forward string copies
  1185                                                          rep     movsb                                           ;copy diskette parameters
  1186                                  ;
  1187                                  ;       Try to write boot sector to diskette.
  1188                                  ;
  1189                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1190                                  .60                     push    cx                                              ;save remaining tries
  1191                                                          mov     bx,Boot                                         ;output buffer address
  1192                                                          mov     dx,0                                            ;head zero, drive zero
  1193                                                          mov     cx,1                                            ;track zero, sector one
  1194                                                          mov     al,1                                            ;one sector
  1195                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1196                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1197                                                          pop     cx                                              ;restore remaining retries
  1198                                                          jnc     .100                                            ;skip ahead if successful
  1199                                                          loop    .60                                             ;try again
  1200                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1201                                  ;
  1202                                  ;       Convert the error code to ASCII and display the error message.
  1203                                  ;
  1204                                  .70                     push    ax                                              ;save error code
  1205                                                          mov     al,ah                                           ;copy error code
  1206                                                          mov     ah,0                                            ;AX = error code
  1207                                                          mov     dl,10h                                          ;hexadecimal divisor
  1208                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1209                                                          or      ax,03030h                                       ;add ASCII zone digits
  1210                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1211                                                          jb      .80                                             ;yes, continue
  1212                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1213                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1214                                                          jb      .90                                             ;yes, continue
  1215                                                          add     al,7                                            ;no, make ASCII
  1216                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1217                                                          call    BootPrint                                       ;write error message
  1218                                                          pop     ax                                              ;restore error code
  1219                                  ;
  1220                                  ;       Display the completion message.
  1221                                  ;
  1222                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1223                                                          mov     al,ah                                           ;BIOS return code
  1224                                                          cmp     al,0                                            ;success?
  1225                                                          je      .110                                            ;yes, continue
  1226                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1227                                                          cmp     al,1                                            ;disk parameter error?
  1228                                                          je      .110                                            ;yes, continue
  1229                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1230                                                          cmp     al,2                                            ;address mark not found?
  1231                                                          je      .110                                            ;yes, continue
  1232                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1233                                                          cmp     al,3                                            ;protected disk?
  1234                                                          je      .110                                            ;yes, continue
  1235                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1236                                                          cmp     al,6                                            ;diskette removed?
  1237                                                          je      .110                                            ;yes, continue
  1238                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1239                                                          cmp     al,80H                                          ;drive timed out?
  1240                                                          je      .110                                            ;yes, continue
  1241                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1242                                  .110                    call    BootPrint                                       ;display result message
  1243                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1244                                                          int     021h                                            ;terminate DOS program
  1245                                                          ret                                                     ;return (should not execute)
  1246                                  ;-----------------------------------------------------------------------------------------------------------------------
  1247                                  ;
  1248                                  ;       Diskette Preparation Messages
  1249                                  ;
  1250                                  ;-----------------------------------------------------------------------------------------------------------------------
  1251                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1252                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1253                                                          db      13,10
  1254                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1255                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1256                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1257                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1258                                                          db      13,10,0
  1259                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1260                                                          db      13,10,0
  1261                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1262                                                          db      13,10,0
  1263                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1264                                                          db      13,10,0
  1265                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1266                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1267                                                          db      13,10,0
  1268                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1269                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1270                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1271                                                          db      13,10,"and retry."
  1272                                                          db      13,10,0
  1273                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1274                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1275                                                          db      13,10,"using another diskette."
  1276                                                          db      13,10,0
  1277                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1278                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1279                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1280                                                          db      13,10,0
  1281                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1282                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1283                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1284                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1285                                                          db      13,10,"is properly inserted in the diskette drive."
  1286                                                          db      13,10,0
  1287                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1288                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1289                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1290                                                          db      13,10,0
  1291                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1292                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1293                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1294                                                          db      13,10,0
  1295                                  wcPrepInBuf             equ     $
  1296                                  %endif
  1297                                  %ifdef BUILDDISK
  1298                                  ;=======================================================================================================================
  1299                                  ;
  1300                                  ;       File Allocation Tables
  1301                                  ;
  1302                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1303                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1304                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1305                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1306                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1307                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1308                                  ;       the last cluster in the chain.
  1309                                  ;
  1310                                  ;       Every three bytes encode two FAT entries as follows:
  1311                                  ;
  1312                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1313                                  ;
  1314                                  ;=======================================================================================================================
  1315                                  ;-----------------------------------------------------------------------------------------------------------------------
  1316                                  ;
  1317                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1318                                  ;
  1319                                  ;-----------------------------------------------------------------------------------------------------------------------
  1320                                  section                 fat1                                                    ;first copy of FAT
  1321 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1322 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1323 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1324 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1325 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1326 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1327 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1328 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1329 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1330 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1331 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1332 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1333                                  ;-----------------------------------------------------------------------------------------------------------------------
  1334                                  ;
  1335                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1336                                  ;
  1337                                  ;-----------------------------------------------------------------------------------------------------------------------
  1338                                  section                 fat2                                                    ;second copy of FAT
  1339 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1340 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1341 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1342 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1343 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1344 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1345 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1346 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1347 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1348 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1349 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1350 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1351                                  ;-----------------------------------------------------------------------------------------------------------------------
  1352                                  ;
  1353                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1354                                  ;
  1355                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1356                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1357                                  ;       copy.
  1358                                  ;
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  section                 dir                                                     ;diskette directory
  1361 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1361 00000009 4F4D               
  1362 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1363 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1364 00000016 0000                                            dw      0h                                              ;time
  1365 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1366 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1367 0000001A 0200                                            dw      2                                               ;first cluster
  1368 0000001C 00540000                                        dd      05400h                                          ;file size
  1369 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1370                                  %endif
  1371                                  %ifdef BUILDCOM
  1372                                  ;=======================================================================================================================
  1373                                  ;
  1374                                  ;       OS.COM
  1375                                  ;
  1376                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1377                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1378                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1379                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1380                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1381                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1382                                  ;
  1383                                  ;       Our loader addressability is set up according to the following diagram.
  1384                                  ;
  1385                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1386                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1387                                  ;                               |  256 = 100h bytes                             |
  1388                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1389                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1390                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1391                                  ;                       007e00  +-----------------------------------------------+
  1392                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1393                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1394                                  ;                               |                                               |
  1395                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1396                                  ;                               |                                               |
  1397                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1398                                  ;                               |  Loader Code                                  |
  1399                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1400                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1401                                  ;
  1402                                  ;=======================================================================================================================
  1403                                  ;-----------------------------------------------------------------------------------------------------------------------
  1404                                  ;
  1405                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1406                                  ;
  1407                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1408                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1409                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1410                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1411                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1412                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1413                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1414                                  ;       registers.
  1415                                  ;
  1416                                  ;-----------------------------------------------------------------------------------------------------------------------
  1417                                                          cpu     8086                                            ;assume minimal CPU
  1418                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1419                                                          bits    16                                              ;this is 16-bit code
  1420 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1421 00000001 1F                                              pop     ds                                              ;...as our data segment
  1422 00000002 0E                                              push    cs                                              ;use the code segment
  1423 00000003 07                                              pop     es                                              ;...as our extra segment
  1424                                  ;
  1425                                  ;       Write a message to the console so we know we have our addressability established.
  1426                                  ;
  1427 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1428 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1429                                  ;
  1430                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1431                                  ;
  1432 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1433 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1434 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1435 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1436                                                          cpu     386                                             ;allow 80386 instructions
  1437 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1438 00000017 E89600                                          call    PutTTYString                                    ;display message
  1439                                  ;
  1440                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1441                                  ;
  1442 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1443 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1444 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1445 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1446 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1447 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1448 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1449 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1450 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1451 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1452                                  ;
  1453                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1454                                  ;
  1455 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1456 00000038 07                                              pop     es                                              ;... as target segment
  1457 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1458 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1459 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1460 00000041 FC                                              cld                                                     ;forward strings
  1461 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1462 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1463 00000047 E86600                                          call    PutTTYString                                    ;display message
  1464                                  ;
  1465                                  ;       Switch to protected mode.
  1466                                  ;
  1467 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1468 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1469 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1470 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1471 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1472 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1473 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1474 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1475 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1476 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1477 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1478                                  ;
  1479                                  ;       Enable hardware and maskable interrupts.
  1480                                  ;
  1481 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1482 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1483 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1484 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1485                                  ;
  1486                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1487                                  ;
  1488 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1489 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1490 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1491                                  ;-----------------------------------------------------------------------------------------------------------------------
  1492                                  ;
  1493                                  ;       Routine:        LoaderExit
  1494                                  ;
  1495                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1496                                  ;
  1497                                  ;       In:             DS:SI   string address
  1498                                  ;
  1499                                  ;-----------------------------------------------------------------------------------------------------------------------
  1500 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1501                                  ;
  1502                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1503                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1504                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1505                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1506                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1507                                  ;
  1508 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1509 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1510 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1511 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1512 00000085 F4                                              hlt                                                     ;wait for interrupt
  1513 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1514                                  ;
  1515                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1516                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1517                                  ;       HLT until the system resets.
  1518                                  ;
  1519 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1520 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1521 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1522 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1523 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;       Routine:        GetCPUType
  1527                                  ;
  1528                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1529                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1530                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1531                                  ;
  1532                                  ;       Out:            AX      0 = 808x, v20, etc.
  1533                                  ;                               1 = 80186
  1534                                  ;                               2 = 80286
  1535                                  ;                               3 = 80386
  1536                                  ;
  1537                                  ;-----------------------------------------------------------------------------------------------------------------------
  1538 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1539 00000092 B120                                            mov     cl,32                                           ;shift count
  1540 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1541 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1542 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1543                                                          cpu     186
  1544 0000009A 54                                              push    sp                                              ;save stack pointer
  1545 0000009B 59                                              pop     cx                                              ;...into cx
  1546 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1547 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1548                                                          cpu     286
  1549 000000A0 40                                              inc     ax                                              ;AX = 2
  1550 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1551 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1552 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1553 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1554 000000AE 40                                              inc     ax                                              ;AX = 3
  1555 000000AF C3                      .10                     ret                                                     ;return
  1556                                  ;-----------------------------------------------------------------------------------------------------------------------
  1557                                  ;
  1558                                  ;       Routine:        PutTTYString
  1559                                  ;
  1560                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1561                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1562                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1563                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1564                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1565                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1566                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1567                                  ;                       to LODSB is not needed.
  1568                                  ;
  1569                                  ;       In:             DS:SI   address of string
  1570                                  ;
  1571                                  ;       Out:            DF      0
  1572                                  ;                       ZF      1
  1573                                  ;                       AL      0
  1574                                  ;
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1577 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1578 000000B2 84C0                                            test    al,al                                           ;end of string?
  1579 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1580 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1581 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1582 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1583 000000BC C3                      .20                     ret                                                     ;return
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  ;
  1586                                  ;       Loader Data
  1587                                  ;
  1588                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1589                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1590                                  ;
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592 000000BD 90                                              align   2
  1593 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1594 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1595 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1596 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1597 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1597 000000D1 74696E672073797374-
  1597 000000DA 656D20726571756972-
  1597 000000E3 657320616E20693338-
  1597 000000EC 36206F72206C617465-
  1597 000000F5 722070726F63657373-
  1597 000000FE 6F722E0D0A         
  1598 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1598 0000010C 65737320616E79206B-
  1598 00000115 657920746F20726573-
  1598 0000011E 746172742074686520-
  1598 00000127 636F6D70757465722E-
  1598 00000130 0D0A00             
  1599 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1600 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1600 00000145 7265640D0A00       
  1601 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1601 00000154 616465640D0A00     
  1602 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1602 00000164 4F530D0A00         
  1603 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1604                                  ;=======================================================================================================================
  1605                                  ;
  1606                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1607                                  ;
  1608                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1609                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1610                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1611                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1612                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1613                                  ;
  1614                                  ;=======================================================================================================================
  1615                                  ;=======================================================================================================================
  1616                                  ;
  1617                                  ;       Kernel Tables
  1618                                  ;
  1619                                  ;=======================================================================================================================
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  ;
  1622                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1623                                  ;
  1624                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1625                                  ;       first descriptor must be all nulls.
  1626                                  ;
  1627                                  ;       6   5         4         3         2         1         0
  1628                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1629                                  ;       ----------------------------------------------------------------
  1630                                  ;       h......hffffmmmma......ab......................bn..............n
  1631                                  ;
  1632                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1633                                  ;               ffff                                                            flags
  1634                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1635                                  ;                       a......a                                                access
  1636                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1637                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1638                                  ;
  1639                                  ;       00000000                                                                all areas have base addresses below 2^24
  1640                                  ;               0...                                                            single-byte size granularity
  1641                                  ;               1...                                                            4-kilobyte size granularity
  1642                                  ;               .0..                                                            16-bit default for code segments
  1643                                  ;               .1..                                                            32-bit default for code segments
  1644                                  ;               ..0.                                                            intel-reserved; should be zero
  1645                                  ;               ...0                                                            available for operating system use
  1646                                  ;                   0000                                                        segment is less than 2^16 in size
  1647                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1648                                  ;                       1.......                                                segment is present in memory
  1649                                  ;                       .00.....                                                segment is of privilege level 0
  1650                                  ;                       ...0....                                                segment is of system or gate type
  1651                                  ;                       ...00010                                                local decriptor table (LDT)
  1652                                  ;                       ...01001                                                task state segment (TSS) available
  1653                                  ;                       ...01011                                                task state segment (TSS) busy
  1654                                  ;                       ...10...                                                data segment
  1655                                  ;                       ...10011                                                writable data (accessed)
  1656                                  ;                       ...11...                                                code segment
  1657                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  section                 gdt                                                     ;global descriptor table
  1661 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1662 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1663 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1664 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1665 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1666 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1667 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1668 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1669 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1670 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1671 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1672 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1673 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1674 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1675 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1679                                  ;
  1680                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1681                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1682                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1683                                  ;
  1684                                  ;       6   5         4         3         2         1         0
  1685                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1686                                  ;       ----------------------------------------------------------------
  1687                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1688                                  ;
  1689                                  ;       h...h   high-order offset (bits 16-31)
  1690                                  ;       P       present (0=unused interrupt)
  1691                                  ;       zz      descriptor privilege level
  1692                                  ;       S       storage segment (must be zero for IDT)
  1693                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1694                                  ;       S...S   handling code selector in GDT
  1695                                  ;       l...l   lo-order offset (bits 0-15)
  1696                                  ;
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  section                 idt                                                     ;interrupt descriptor table
  1699                                                          mint    dividebyzero                                    ;00 divide by zero
  1699                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1699 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1700                                                          mint    singlestep                                      ;01 single step
  1700                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1700 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1701                                                          mint    nmi                                             ;02 non-maskable
  1701                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1701 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1702                                                          mint    break                                           ;03 break
  1702                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1702 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1703                                                          mint    into                                            ;04 into
  1703                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1703 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1704                                                          mint    bounds                                          ;05 bounds
  1704                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1704 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1705                                                          mint    badopcode                                       ;06 bad op code
  1705                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1705 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1706                                                          mint    nocoproc                                        ;07 no coprocessor
  1706                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1706 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1707                                                          mint    doublefault                                     ;08 double-fault
  1707                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1707 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1708                                                          mint    operand                                         ;09 operand
  1708                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1708 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1709                                                          mint    badtss                                          ;0a bad TSS
  1709                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1709 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1710                                                          mint    notpresent                                      ;0b not-present
  1710                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1710 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1711                                                          mint    stacklimit                                      ;0c stack limit
  1711                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1711 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1712                                                          mint    protection                                      ;0d general protection fault
  1712                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1712 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1713                                                          mint    int14                                           ;0e (reserved)
  1713                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1713 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1714                                                          mint    int15                                           ;0f (reserved)
  1714                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1714 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1715                                                          mint    coproccalc                                      ;10 (reserved)
  1715                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1715 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1716                                                          mint    int17                                           ;11 (reserved)
  1716                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1716 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1717                                                          mint    int18                                           ;12 (reserved)
  1717                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1717 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1718                                                          mint    int19                                           ;13 (reserved)
  1718                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1718 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1719                                                          mint    int20                                           ;14 (reserved)
  1719                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1719 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1720                                                          mint    int21                                           ;15 (reserved)
  1720                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1720 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1721                                                          mint    int22                                           ;16 (reserved)
  1721                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1721 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1722                                                          mint    int23                                           ;17 (reserved)
  1722                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1722 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1723                                                          mint    int24                                           ;18 (reserved)
  1723                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1723 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1724                                                          mint    int25                                           ;19 (reserved)
  1724                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1724 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1725                                                          mint    int26                                           ;1a (reserved)
  1725                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1725 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1726                                                          mint    int27                                           ;1b (reserved)
  1726                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1726 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1727                                                          mint    int28                                           ;1c (reserved)
  1727                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1727 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1728                                                          mint    int29                                           ;1d (reserved)
  1728                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1728 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1729                                                          mint    int30                                           ;1e (reserved)
  1729                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1729 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1730                                                          mint    int31                                           ;1f (reserved)
  1730                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1730 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1731                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1731                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1731 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1732                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1732                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1732 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1733                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1733                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1733 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1734                                                          mtrap   com2                                            ;23 IRQ3 com2
  1734                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1734 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1735                                                          mtrap   com1                                            ;24 IRQ4 com1
  1735                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1735 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1736                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1736                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1736 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1737                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1737                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1737 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1738                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1738                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1738 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1739                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1739                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1739 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1740                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1740                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1740 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1741                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1741                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1741 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1742                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1742                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1742 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1743                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1743                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1743 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1744                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1744                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1744 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1745                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1745                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1745 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1746                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1746                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1746 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1747                                                          mtrap   svc                                             ;30 OS services
  1747                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1747 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1748 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1749                                  ;=======================================================================================================================
  1750                                  ;
  1751                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1752                                  ;
  1753                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1754                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1755                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1756                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1757                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1758                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1759                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1760                                  ;
  1761                                  ;=======================================================================================================================
  1762                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1763                                                          cpu     386                                             ;allow 80386 instructions
  1764                                                          bits    32                                              ;this is 32-bit code
  1765                                  ;=======================================================================================================================
  1766                                  ;
  1767                                  ;       CPU Interrupt Handlers
  1768                                  ;
  1769                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1770                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1771                                  ;
  1772                                  ;=======================================================================================================================
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;       INT0    Divide By Zero
  1776                                  ;
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                                          menter  dividebyzero                                    ;divide by zero
  1778                              <1> ?%1 equ ($-$$)
  1779 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1780 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1781 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;       INT1    Single Step
  1785                                  ;
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                                          menter  singlestep                                      ;single step
  1787                              <1> ?%1 equ ($-$$)
  1788 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1789 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1790 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;
  1793                                  ;       INT2    Non-Maskable Interrupt
  1794                                  ;
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                                          menter  nmi                                             ;non-maskable
  1796                              <1> ?%1 equ ($-$$)
  1797 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1798 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1799 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ;
  1802                                  ;       INT3    Break
  1803                                  ;
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                                          menter  break                                           ;break
  1805                              <1> ?%1 equ ($-$$)
  1806 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1807 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1808 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                  ;
  1811                                  ;       INT4    Into
  1812                                  ;
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                                          menter  into                                            ;into
  1814                              <1> ?%1 equ ($-$$)
  1815 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1816 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1817 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT5    Bounds
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  bounds                                          ;bounds
  1823                              <1> ?%1 equ ($-$$)
  1824 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1825 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1826 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       INT6    Bad Operation Code
  1830                                  ;
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                                          menter  badopcode                                       ;bad opcode interrupt
  1832                              <1> ?%1 equ ($-$$)
  1833 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1834 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1835 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;       INT7    No Coprocessor
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1841                              <1> ?%1 equ ($-$$)
  1842 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1843 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1844 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                  ;
  1847                                  ;       INT8    Double Fault
  1848                                  ;
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                                          menter  doublefault                                     ;doublefault interrupt
  1850                              <1> ?%1 equ ($-$$)
  1851 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1852 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1853 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  ;
  1856                                  ;       INT9    Operand
  1857                                  ;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                                          menter  operand                                         ;operand interrupt
  1859                              <1> ?%1 equ ($-$$)
  1860 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1861 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1862 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                  ;
  1865                                  ;       INT10   Bad Task State Segment
  1866                                  ;
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                                          menter  badtss                                          ;bad TSS interrupt
  1868                              <1> ?%1 equ ($-$$)
  1869 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1870 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1871 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  ;
  1874                                  ;       INT11   Not Present
  1875                                  ;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                                          menter  notpresent                                      ;not present interrupt
  1877                              <1> ?%1 equ ($-$$)
  1878 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1879 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1880 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;       INT12   Stack Limit
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                                          menter  stacklimit                                      ;stack limit interrupt
  1886                              <1> ?%1 equ ($-$$)
  1887 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1888 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1889 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;       INT13   General Protection Fault
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                                          menter  protection                                      ;protection fault interrupt
  1895                              <1> ?%1 equ ($-$$)
  1896 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1897 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1898 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;       INT14   Reserved
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                                          menter  int14                                           ;(reserved)
  1904                              <1> ?%1 equ ($-$$)
  1905 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1906 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1907 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  ;
  1910                                  ;       INT15   Reserved
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                                          menter  int15                                           ;(reserved)
  1913                              <1> ?%1 equ ($-$$)
  1914 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1915 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1916 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                  ;
  1919                                  ;       INT16   Coprocessor Calculation
  1920                                  ;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                                          menter  coproccalc                                      ;coprocessor calculation
  1922                              <1> ?%1 equ ($-$$)
  1923 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1924 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1925 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  ;
  1928                                  ;       INT17   Reserved
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                                          menter  int17                                           ;(reserved)
  1931                              <1> ?%1 equ ($-$$)
  1932 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1933 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1934 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  ;
  1937                                  ;       INT18   Reserved
  1938                                  ;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                                          menter  int18                                           ;(reserved)
  1940                              <1> ?%1 equ ($-$$)
  1941 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1942 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1943 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                  ;
  1946                                  ;       INT19   Reserved
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                                          menter  int19                                           ;(reserved)
  1949                              <1> ?%1 equ ($-$$)
  1950 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1951 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1952 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                  ;
  1955                                  ;       INT20   Reserved
  1956                                  ;
  1957                                  ;-----------------------------------------------------------------------------------------------------------------------
  1958                                                          menter  int20                                           ;(reserved)
  1958                              <1> ?%1 equ ($-$$)
  1959 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1960 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1961 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                  ;
  1964                                  ;       INT21   Reserved
  1965                                  ;
  1966                                  ;-----------------------------------------------------------------------------------------------------------------------
  1967                                                          menter  int21                                           ;(reserved)
  1967                              <1> ?%1 equ ($-$$)
  1968 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1969 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1970 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;       INT22   Reserved
  1974                                  ;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                                          menter  int22                                           ;(reserved)
  1976                              <1> ?%1 equ ($-$$)
  1977 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1978 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1979 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  ;
  1982                                  ;       INT23   Reserved
  1983                                  ;
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                                          menter  int23                                           ;(reserved)
  1985                              <1> ?%1 equ ($-$$)
  1986 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1987 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1988 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ;
  1991                                  ;       INT24   Reserved
  1992                                  ;
  1993                                  ;-----------------------------------------------------------------------------------------------------------------------
  1994                                                          menter  int24                                           ;(reserved)
  1994                              <1> ?%1 equ ($-$$)
  1995 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1996 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1997 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                  ;
  2000                                  ;       INT25   Reserved
  2001                                  ;
  2002                                  ;-----------------------------------------------------------------------------------------------------------------------
  2003                                                          menter  int25                                           ;(reserved)
  2003                              <1> ?%1 equ ($-$$)
  2004 00000114 6A19                                            push    25                                              ;store interrupt nbr
  2005 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2006 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                  ;
  2009                                  ;       INT26   Reserved
  2010                                  ;
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                                          menter  int26                                           ;(reserved)
  2012                              <1> ?%1 equ ($-$$)
  2013 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  2014 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2015 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                  ;
  2018                                  ;       INT27   Reserved
  2019                                  ;
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                                          menter  int27                                           ;(reserved)
  2021                              <1> ?%1 equ ($-$$)
  2022 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  2023 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2024 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  2025                                  ;-----------------------------------------------------------------------------------------------------------------------
  2026                                  ;
  2027                                  ;       INT28   Reserved
  2028                                  ;
  2029                                  ;-----------------------------------------------------------------------------------------------------------------------
  2030                                                          menter  int28                                           ;(reserved)
  2030                              <1> ?%1 equ ($-$$)
  2031 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  2032 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2033 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;
  2036                                  ;       INT29   Reserved
  2037                                  ;
  2038                                  ;-----------------------------------------------------------------------------------------------------------------------
  2039                                                          menter  int29                                           ;(reserved)
  2039                              <1> ?%1 equ ($-$$)
  2040 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  2041 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2042 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  2043                                  ;-----------------------------------------------------------------------------------------------------------------------
  2044                                  ;
  2045                                  ;       INT30   Reserved
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048                                                          menter  int30                                           ;(reserved)
  2048                              <1> ?%1 equ ($-$$)
  2049 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  2050 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2051 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053                                  ;
  2054                                  ;       INT31   Reserved
  2055                                  ;
  2056                                  ;-----------------------------------------------------------------------------------------------------------------------
  2057                                                          menter  int31                                           ;(reserved)
  2057                              <1> ?%1 equ ($-$$)
  2058 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  2059 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2060 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  2061                                  ;-----------------------------------------------------------------------------------------------------------------------
  2062                                  ;
  2063                                  ;       Routine:        ReportInterrupt
  2064                                  ;
  2065                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2066                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2067                                  ;
  2068                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2069                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2070                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2071                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2072                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2073                                  ;
  2074                                  ;       Out:            N/A             This routine does not exit.
  2075                                  ;
  2076                                  ;-----------------------------------------------------------------------------------------------------------------------
  2077 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2078 00000154 06                                              push    es                                              ;save ES at time of interrupt
  2079 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2080 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  2081                                  ;
  2082                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2083                                  ;
  2084                                  ;                       [EBP+60]        EFLAGS
  2085                                  ;                       [EBP+56]        CS
  2086                                  ;                       [EBP+52]        EIP
  2087                                  ;                       [EBP+48]        EIP hi-order
  2088                                  ;                       [EBP+44]        interrupt number (0-31)
  2089                                  ;                       [EBP+40]        error message address
  2090                                  ;                       [EBP+36]        DS
  2091                                  ;                       [EBP+32]        ES
  2092                                  ;                       [EBP+28]        EAX
  2093                                  ;                       [EBP+24]        ECX
  2094                                  ;                       [EBP+20]        EDX
  2095                                  ;                       [EBP+16]        EBX
  2096                                  ;                       [EBP+12]        ESP
  2097                                  ;                       [EBP+8]         EBP
  2098                                  ;                       [EBP+4]         ESI
  2099                                  ;                       [EBP+0]         EDI
  2100                                  ;
  2101 00000158 0E                                              push    cs                                              ;load code selector ...
  2102 00000159 1F                                              pop     ds                                              ;... into DS
  2103 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2104 0000015C 07                                              pop     es                                              ;... into ES
  2105                                  ;
  2106                                  ;       Display the interrupt report boundary box
  2107                                  ;
  2108 0000015D B10D                                            mov     cl,13                                           ;column
  2109 0000015F B506                                            mov     ch,6                                            ;row
  2110 00000161 B232                                            mov     dl,50                                           ;width
  2111 00000163 B608                                            mov     dh,8                                            ;height
  2112 00000165 B707                                            mov     bh,07h                                          ;attribute
  2113 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2114                                  ;
  2115                                  ;       Display the report header
  2116                                  ;
  2117 0000016C B10F                                            mov     cl,15                                           ;column
  2118 0000016E B507                                            mov     ch,7                                            ;row
  2119 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2120 00000175 E84F110000                                      call    SetConsoleString                                ;draw text string
  2121                                  ;
  2122                                  ;       Display the interrupt description label
  2123                                  ;
  2124 0000017A B10F                                            mov     cl,15                                           ;column
  2125 0000017C B508                                            mov     ch,8                                            ;row
  2126 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2127 00000183 E841110000                                      call    SetConsoleString                                ;draw text string
  2128                                  ;
  2129                                  ;       Display the interrupt number
  2130                                  ;
  2131 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2132 0000018B B11A                                            mov     cl,26                                           ;column
  2133 0000018D B508                                            mov     ch,8                                            ;row
  2134 0000018F E8DE0D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2135                                  ;
  2136                                  ;       Display the interrupt name
  2137                                  ;
  2138 00000194 B11D                                            mov     cl,29                                           ;column
  2139 00000196 B508                                            mov     ch,8                                            ;row
  2140 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2141 0000019B E829110000                                      call    SetConsoleString                                ;display interrupt description
  2142                                  ;
  2143                                  ;       Display the register values header
  2144                                  ;
  2145 000001A0 B10F                                            mov     cl,15                                           ;column
  2146 000001A2 B50A                                            mov     ch,10                                           ;row
  2147 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2148 000001A9 E81B110000                                      call    SetConsoleString                                ;draw text string
  2149                                  ;
  2150                                  ;       Display the EAX register label and value
  2151                                  ;
  2152 000001AE B10F                                            mov     cl,15                                           ;column
  2153 000001B0 B50B                                            mov     ch,11                                           ;row
  2154 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2155 000001B7 E80D110000                                      call    SetConsoleString                                ;draw label
  2156 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2157 000001BF B113                                            mov     cl,19                                           ;column
  2158 000001C1 B50B                                            mov     ch,11                                           ;row
  2159 000001C3 E8D00D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2160                                  ;
  2161                                  ;       Display the ECX register label and value
  2162                                  ;
  2163 000001C8 B10F                                            mov     cl,15                                           ;column
  2164 000001CA B50C                                            mov     ch,12                                           ;row
  2165 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2166 000001D1 E8F3100000                                      call    SetConsoleString                                ;draw label
  2167 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2168 000001D9 B113                                            mov     cl,19                                           ;column
  2169 000001DB B50C                                            mov     ch,12                                           ;row
  2170 000001DD E8B60D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2171                                  ;
  2172                                  ;       Display the EDX register label and value
  2173                                  ;
  2174 000001E2 B10F                                            mov     cl,15                                           ;column
  2175 000001E4 B50D                                            mov     ch,13                                           ;row
  2176 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2177 000001EB E8D9100000                                      call    SetConsoleString                                ;draw label
  2178 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2179 000001F3 B113                                            mov     cl,19                                           ;column
  2180 000001F5 B50D                                            mov     ch,13                                           ;row
  2181 000001F7 E89C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2182                                  ;
  2183                                  ;       Display the EBX register label and value
  2184                                  ;
  2185 000001FC B10F                                            mov     cl,15                                           ;column
  2186 000001FE B50E                                            mov     ch,14                                           ;row
  2187 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2188 00000205 E8BF100000                                      call    SetConsoleString                                ;draw label
  2189 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2190 0000020D B113                                            mov     cl,19                                           ;column
  2191 0000020F B50E                                            mov     ch,14                                           ;row
  2192 00000211 E8820D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2193                                  ;
  2194                                  ;       Display the ESI register label and value
  2195                                  ;
  2196 00000216 B11D                                            mov     cl,29                                           ;column
  2197 00000218 B50B                                            mov     ch,11                                           ;row
  2198 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2199 0000021F E8A5100000                                      call    SetConsoleString                                ;draw label
  2200 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2201 00000227 B121                                            mov     cl,33                                           ;column
  2202 00000229 B50B                                            mov     ch,11                                           ;row
  2203 0000022B E8680D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2204                                  ;
  2205                                  ;       Display the EDI register label and value
  2206                                  ;
  2207 00000230 B11D                                            mov     cl,29                                           ;column
  2208 00000232 B50C                                            mov     ch,12                                           ;row
  2209 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2210 00000239 E88B100000                                      call    SetConsoleString                                ;draw label
  2211 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2212 00000241 B121                                            mov     cl,33                                           ;column
  2213 00000243 B50C                                            mov     ch,12                                           ;row
  2214 00000245 E84E0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2215                                  ;
  2216                                  ;       Display the EBP register label and value
  2217                                  ;
  2218 0000024A B11D                                            mov     cl,29                                           ;column
  2219 0000024C B50D                                            mov     ch,13                                           ;row
  2220 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2221 00000253 E871100000                                      call    SetConsoleString                                ;draw label
  2222 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2223 0000025B B121                                            mov     cl,33                                           ;column
  2224 0000025D B50D                                            mov     ch,13                                           ;row
  2225 0000025F E8340D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2226                                  ;
  2227                                  ;       Display the DS register label and value
  2228                                  ;
  2229 00000264 B12A                                            mov     cl,42                                           ;column
  2230 00000266 B50B                                            mov     ch,11                                           ;row
  2231 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2232 0000026D E857100000                                      call    SetConsoleString                                ;draw label
  2233 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2234 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2235 00000278 B12E                                            mov     cl,46                                           ;column
  2236 0000027A B50B                                            mov     ch,11                                           ;row
  2237 0000027C E8270D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2238                                  ;
  2239                                  ;       Display the ES register label and value
  2240                                  ;
  2241 00000281 B12A                                            mov     cl,42                                           ;column
  2242 00000283 B50C                                            mov     ch,12                                           ;row
  2243 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2244 0000028A E83A100000                                      call    SetConsoleString                                ;draw label
  2245 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2246 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2247 00000295 B12E                                            mov     cl,46                                           ;column
  2248 00000297 B50C                                            mov     ch,12                                           ;row
  2249 00000299 E80A0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2250                                  ;
  2251                                  ;       Display the SS register label and value
  2252                                  ;
  2253 0000029E B12A                                            mov     cl,42                                           ;column
  2254 000002A0 B50D                                            mov     ch,13                                           ;row
  2255 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2256 000002A7 E81D100000                                      call    SetConsoleString                                ;draw label
  2257 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2258 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2259 000002B1 B12E                                            mov     cl,46                                           ;column
  2260 000002B3 B50D                                            mov     ch,13                                           ;row
  2261 000002B5 E8EE0C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2262                                  ;
  2263                                  ;       Display the CS register lable and value
  2264                                  ;
  2265 000002BA B12A                                            mov     cl,42                                           ;column
  2266 000002BC B50E                                            mov     ch,14                                           ;row
  2267 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2268 000002C3 E801100000                                      call    SetConsoleString                                ;draw label
  2269 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2270 000002CA 668B4538                                        mov     ax,[ebp+56]                                     ;CS
  2271 000002CE B12E                                            mov     cl,46                                           ;column
  2272 000002D0 B50E                                            mov     ch,14                                           ;row
  2273 000002D2 E8D10C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2274                                  ;
  2275                                  ;       Display the EFLAGS register label and value
  2276                                  ;
  2277 000002D7 B133                                            mov     cl,51                                           ;column
  2278 000002D9 B50B                                            mov     ch,11                                           ;row
  2279 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2280 000002E0 E8E40F0000                                      call    SetConsoleString                                ;draw label
  2281 000002E5 8B453C                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2282 000002E8 B137                                            mov     cl,55                                           ;column
  2283 000002EA B50B                                            mov     ch,11                                           ;row
  2284 000002EC E8A70C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2285                                  ;
  2286                                  ;       Display the ESP register label and value
  2287                                  ;
  2288 000002F1 B133                                            mov     cl,51                                           ;column
  2289 000002F3 B50D                                            mov     ch,13                                           ;row
  2290 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2291 000002FA E8CA0F0000                                      call    SetConsoleString                                ;draw label
  2292 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2293 00000302 B137                                            mov     cl,55                                           ;column
  2294 00000304 B50D                                            mov     ch,13                                           ;row
  2295 00000306 E88D0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2296                                  ;
  2297                                  ;       Display the EIP register label and value
  2298                                  ;
  2299 0000030B B133                                            mov     cl,51                                           ;column
  2300 0000030D B50E                                            mov     ch,14                                           ;row
  2301 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2302 00000314 E8B00F0000                                      call    SetConsoleString                                ;draw label
  2303 00000319 8B4534                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2304 0000031C B137                                            mov     cl,55                                           ;column
  2305 0000031E B50E                                            mov     ch,14                                           ;row
  2306 00000320 E8730C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2307                                  ;
  2308                                  ;       Halt and loop until reset
  2309                                  ;
  2310 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2311 00000326 F4                                              hlt                                                     ;halt processor
  2312 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2313                                  ;-----------------------------------------------------------------------------------------------------------------------
  2314                                  ;
  2315                                  ;       Processor Interrupt Name Strings
  2316                                  ;
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2318 00000332 6279207A65726F00   
  2319 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2319 00000343 657000             
  2320 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2320 0000034F 626C6520696E746572-
  2320 00000358 7275707400         
  2321 0000035D 427265616B00            czIntBreak              db      "Break",0
  2322 00000363 496E746F00              czIntInto               db      "Into",0
  2323 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2324 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2324 00000378 74696F6E20436F6465-
  2324 00000381 00                 
  2325 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2325 0000038B 6573736F7200       
  2326 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2326 0000039A 756C7400           
  2327 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2328 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2328 000003AF 537461746520536567-
  2328 000003B8 6D656E7400         
  2329 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2329 000003C6 6E7400             
  2330 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2330 000003D2 697400             
  2331 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2331 000003DE 726F74656374696F6E-
  2331 000003E7 204661756C7400     
  2332 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2332 000003F7 6F722043616C63756C-
  2332 00000400 6174696F6E00       
  2333 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  ;
  2336                                  ;       Processor Interrupt Handling Strings
  2337                                  ;
  2338                                  ;-----------------------------------------------------------------------------------------------------------------------
  2339 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2339 00000418 6C65642070726F6365-
  2339 00000421 73736F7220696E7465-
  2339 0000042A 727275707420686173-
  2339 00000433 206F63637572726564-
  2339 0000043C 3A00               
  2340 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2340 00000447 202300             
  2341 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2341 00000453 206174207468652074-
  2341 0000045C 696D65206F66207468-
  2341 00000465 6520696E7465727275-
  2341 0000046E 70743A00           
  2342 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2343 00000477 4543583A00              czIntECX                db      "ECX:",0
  2344 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2345 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2346 00000486 4553493A00              czIntESI                db      "ESI:",0
  2347 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2348 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2349 00000495 4553503A00              czIntESP                db      "ESP:",0
  2350 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2351 0000049F 2045533A00              czIntES                 db      " ES:",0
  2352 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2353 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2354 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2355 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357                                  ;
  2358                                  ;       Routine:        DrawTextDialogBox
  2359                                  ;
  2360                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2361                                  ;
  2362                                  ;       In:             CL      upper left column (0-79)
  2363                                  ;                       CH      upper left row (0-24)
  2364                                  ;                       DL      column width, excluding border
  2365                                  ;                       DH      row height, excluding border
  2366                                  ;                       BH      color attribute
  2367                                  ;
  2368                                  ;-----------------------------------------------------------------------------------------------------------------------
  2369 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2370 000004B9 56                                              push    esi                                             ;
  2371 000004BA 57                                              push    edi                                             ;
  2372 000004BB 06                                              push    es                                              ;
  2373 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2374 000004BE 07                                              pop     es                                              ;... into ES
  2375                                  ;
  2376                                  ;       Compute target display offset
  2377                                  ;
  2378 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2379 000004C1 88E8                                            mov     al,ch                                           ;row
  2380 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2381 000004C5 F6E4                                            mul     ah                                              ;row offset
  2382 000004C7 00C8                                            add     al,cl                                           ;add column
  2383 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2384 000004CC 00C8                                            add     al,cl                                           ;add column
  2385 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2386 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2387                                  ;
  2388                                  ;       Display top border row
  2389                                  ;
  2390 000004D3 57                                              push    edi                                             ;save target row offset
  2391 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2392 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2393 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2394 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2395 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2396 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2397 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2398 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2399 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2400 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2401 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2402                                  ;
  2403                                  ;       Display dialog box body rows
  2404                                  ;
  2405 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2406 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2407 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2408 000004F3 57                                              push    edi                                             ;save target row offset
  2409 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2410 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2411 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2412 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2413 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2414 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2415 00000500 F366AB                                          rep     stosw                                           ;display row
  2416 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2417 00000505 66AB                                            stosw                                                   ;display character and attribute
  2418 00000507 5F                                              pop     edi                                             ;restore target row offset
  2419 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2420 0000050E 59                                              pop     ecx                                             ;remaining rows
  2421 0000050F E2E1                                            loop    .10                                             ;next row
  2422                                  ;
  2423                                  ;       Display bottom border row
  2424                                  ;
  2425 00000511 57                                              push    edi                                             ;save target row offset
  2426 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2427 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2428 00000516 66AB                                            stosw                                                   ;display character and attribute
  2429 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2430 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2431 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2432 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2433 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2434 00000523 66AB                                            stosw                                                   ;display character and attribute
  2435 00000525 5F                                              pop     edi                                             ;restore target row offset
  2436 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2437                                  ;
  2438                                  ;       Restore and return
  2439                                  ;
  2440 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2441 0000052D 5F                                              pop     edi                                             ;
  2442 0000052E 5E                                              pop     esi                                             ;
  2443 0000052F 59                                              pop     ecx                                             ;
  2444 00000530 C3                                              ret                                                     ;return
  2445                                  ;=======================================================================================================================
  2446                                  ;
  2447                                  ;       Hardware Device Interupts
  2448                                  ;
  2449                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2450                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2451                                  ;       (BX=2028h).
  2452                                  ;
  2453                                  ;=======================================================================================================================
  2454                                  ;-----------------------------------------------------------------------------------------------------------------------
  2455                                  ;
  2456                                  ;       IRQ0    Clock Tick Interrupt
  2457                                  ;
  2458                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2459                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2460                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2461                                  ;
  2462                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2463                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2464                                  ;
  2465                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2466                                  ;       zero, the floppy disk motors are turned off.
  2467                                  ;
  2468                                  ;-----------------------------------------------------------------------------------------------------------------------
  2469                                                          menter  clocktick                                       ;clock tick interrupt
  2469                              <1> ?%1 equ ($-$$)
  2470 00000531 50                                              push    eax                                             ;save non-volatile regs
  2471 00000532 52                                              push    edx                                             ;
  2472 00000533 1E                                              push    ds                                              ;
  2473                                  ;
  2474                                  ;       Update the clock tick count and the elapsed days as needed.
  2475                                  ;
  2476 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2477 00000536 1F                                              pop     ds                                              ;... into data segment register
  2478 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2479 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2480 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2481 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2482 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2483 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2484 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2485                                  ;
  2486                                  ;       Decrement floppy disk motor timeout.
  2487                                  ;
  2488 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2489 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2490 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2491 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2492                                  ;
  2493                                  ;       Turn off the floppy disk motor if appropriate.
  2494                                  ;
  2495 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2496 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2497 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2498 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2499 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2500 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2501 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2502 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2503 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2504 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2505 00000577 EE                                              out     dx,al                                           ;turn motor off
  2506                                  ;
  2507                                  ;       Signal the end of the hardware interrupt.
  2508                                  ;
  2509 00000578 E8B10D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2510                                  ;
  2511                                  ;       Restore and return.
  2512                                  ;
  2513 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2514 0000057E 5A                                              pop     edx                                             ;
  2515 0000057F 58                                              pop     eax                                             ;
  2516 00000580 CF                                              iretd                                                   ;return
  2517                                  ;-----------------------------------------------------------------------------------------------------------------------
  2518                                  ;
  2519                                  ;       IRQ1    Keyboard Interrupt
  2520                                  ;
  2521                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2522                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2523                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2524                                  ;       ALL modified registers upon return.
  2525                                  ;
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                                          menter  keyboard                                        ;keyboard interrrupt
  2527                              <1> ?%1 equ ($-$$)
  2528 00000581 50                                              push    eax                                             ;save non-volatile regs
  2529 00000582 53                                              push    ebx                                             ;
  2530 00000583 51                                              push    ecx                                             ;
  2531 00000584 56                                              push    esi                                             ;
  2532 00000585 1E                                              push    ds                                              ;
  2533 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2534 00000588 1F                                              pop     ds                                              ;... into data segment register
  2535 00000589 30C0                                            xor     al,al                                           ;zero
  2536 0000058B A219080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2537 00000590 A21A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2538 00000595 A21B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2539 0000059A A21C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2540 0000059F A21D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2541 000005A4 A21E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2542 000005A9 B020                                            mov     al,' '                                          ;space
  2543 000005AB A21F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2544 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2545 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2546 000005B4 200518080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2547 000005BA 8A1D16080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2548 000005C0 8A3D17080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2549 000005C6 E8180E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2550 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2551 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2552 000005D3 A219080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2553 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2554 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2555 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2556 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2557 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2558 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2559 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2560 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2561 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2562 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2563 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2564 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2565 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2566 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2567 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2568 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2569 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2570 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2571 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2572 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2573 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2574 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2575 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2576 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2577 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2578 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2579 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2580 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2581 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2582 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2583 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2584 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2585 00000654 E88A0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2586 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2587 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2588 00000661 A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2589 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2590 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2591 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2592 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2593 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2594 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2595 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2596 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2597 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2598 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2599 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2600 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2601 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2602 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2603 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2604 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2605 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2606 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2607 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2608 0000069C E8420D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2609 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2610 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2611 000006A9 A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2612 000006AE E8300D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2613 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2614 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2615 000006BB A21C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2616 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2617 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2618 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2619 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2620 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2621 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2622 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2623 000006D1 E8DE0C0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2624 000006D6 881D16080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2625 000006DC 883D17080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2626 000006E2 E829090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2627 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2628 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2629 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2630 000006F1 E8ED0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2631 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2632 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2633 000006FE A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2634 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2635 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2636 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2637 0000070E E8D00C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2638 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2639 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2640 0000071B A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2641 00000720 E8BE0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2642 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2643 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2644 0000072D A21C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2645 00000732 E8AC0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2646 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2647 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2648 0000073F A21D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2649 00000744 E89A0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2650 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2651 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2652 0000074D A21E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2653 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2654 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2655 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2656 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2657 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2658 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2659 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2660 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2661 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2662 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2663 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2664 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2665 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2666 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2667 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2668 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2669 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2670 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2671 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2672 00000787 A21F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2673 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2674 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2675 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2676 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2677 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2678 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2679 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2680 000007A4 50                                              push    eax                                             ;save codes
  2681 000007A5 E87A0A0000                                      call    PutMessage                                      ;put message to console
  2682 000007AA 58                                              pop     eax                                             ;restore codes
  2683 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2684 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2685 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2686 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2687 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2688 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2689 000007BD E8620A0000                                      call    PutMessage                                      ;put message to console
  2690 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2691 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2692 000007C6 080518080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2693 000007CC E8E7070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2694 000007D1 E8580B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2695 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2696 000007D7 5E                                              pop     esi                                             ;
  2697 000007D8 59                                              pop     ecx                                             ;
  2698 000007D9 5B                                              pop     ebx                                             ;
  2699 000007DA 58                                              pop     eax                                             ;
  2700 000007DB CF                                              iretd                                                   ;return
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  ;       Scan-Code to ASCII Translation Tables
  2703                                  ;-----------------------------------------------------------------------------------------------------------------------
  2704 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2705 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2706 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2707 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2708 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2709 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2710 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2711 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2712 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2713 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2714 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2715 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2716 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2717 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2718 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2719 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2720 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2721 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2722 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2723 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2724 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2725 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2726 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2727 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2728 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2729 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2730 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2731 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2732 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2733 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2734 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2735 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  ;
  2738                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2739                                  ;
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                                          menter  iochannel                                       ;secondary 8259A cascade
  2741                              <1> ?%1 equ ($-$$)
  2742 000008DC 50                                              push    eax                                             ;save modified regs
  2743 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                  ;
  2746                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2747                                  ;
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                                          menter  com2                                            ;serial port 2 interrupt
  2749                              <1> ?%1 equ ($-$$)
  2750 000008DF 50                                              push    eax                                             ;save modified regs
  2751 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2752                                  ;-----------------------------------------------------------------------------------------------------------------------
  2753                                  ;
  2754                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2755                                  ;
  2756                                  ;-----------------------------------------------------------------------------------------------------------------------
  2757                                                          menter  com1                                            ;serial port 1 interrupt
  2757                              <1> ?%1 equ ($-$$)
  2758 000008E2 50                                              push    eax                                             ;save modified regs
  2759 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761                                  ;
  2762                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2763                                  ;
  2764                                  ;-----------------------------------------------------------------------------------------------------------------------
  2765                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2765                              <1> ?%1 equ ($-$$)
  2766 000008E5 50                                              push    eax                                             ;save modified regs
  2767 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769                                  ;
  2770                                  ;       IRQ6    Diskette Hardware Interrupt
  2771                                  ;
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                                          menter  diskette                                        ;floppy disk interrupt
  2773                              <1> ?%1 equ ($-$$)
  2774 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2775 000008E9 1E                                              push    ds                                              ;
  2776 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2777 000008EC 1F                                              pop     ds                                              ;... into DS register
  2778 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2779 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2780 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2781 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2782 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                  ;
  2785                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2786                                  ;
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2788                              <1> ?%1 equ ($-$$)
  2789 000008FC 50                                              push    eax                                             ;save modified regs
  2790 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                  ;
  2793                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2794                                  ;
  2795                                  ;-----------------------------------------------------------------------------------------------------------------------
  2796                                                          menter  rtclock                                         ;real-time clock interrupt
  2796                              <1> ?%1 equ ($-$$)
  2797 000008FF 50                                              push    eax                                             ;save modified regs
  2798 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                  ;
  2801                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2802                                  ;
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2804                              <1> ?%1 equ ($-$$)
  2805 00000902 50                                              push    eax                                             ;save modified regs
  2806 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                  ;
  2809                                  ;       IRQ10   Reserved Hardware Interrupt
  2810                                  ;
  2811                                  ;-----------------------------------------------------------------------------------------------------------------------
  2812                                                          menter  irq10                                           ;reserved
  2812                              <1> ?%1 equ ($-$$)
  2813 00000905 50                                              push    eax                                             ;save modified regs
  2814 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                  ;
  2817                                  ;       IRQ11   Reserved Hardware Interrupt
  2818                                  ;
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                                          menter  irq11                                           ;reserved
  2820                              <1> ?%1 equ ($-$$)
  2821 00000908 50                                              push    eax                                             ;save modified regs
  2822 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                  ;
  2825                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2826                                  ;
  2827                                  ;-----------------------------------------------------------------------------------------------------------------------
  2828                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2828                              <1> ?%1 equ ($-$$)
  2829 0000090B 50                                              push    eax                                             ;save modified regs
  2830 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2831                                  ;-----------------------------------------------------------------------------------------------------------------------
  2832                                  ;
  2833                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2834                                  ;
  2835                                  ;-----------------------------------------------------------------------------------------------------------------------
  2836                                                          menter  coprocessor                                     ;coprocessor interrupt
  2836                              <1> ?%1 equ ($-$$)
  2837 0000090E 50                                              push    eax                                             ;save modified regs
  2838 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2839                                  ;-----------------------------------------------------------------------------------------------------------------------
  2840                                  ;
  2841                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2842                                  ;
  2843                                  ;-----------------------------------------------------------------------------------------------------------------------
  2844                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2844                              <1> ?%1 equ ($-$$)
  2845 00000911 50                                              push    eax                                             ;save modified regs
  2846 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2847                                  ;-----------------------------------------------------------------------------------------------------------------------
  2848                                  ;
  2849                                  ;       IRQ15   Reserved Hardware Interrupt
  2850                                  ;
  2851                                  ;-----------------------------------------------------------------------------------------------------------------------
  2852                                                          menter  irq15                                           ;reserved
  2852                              <1> ?%1 equ ($-$$)
  2853 00000914 50                                              push    eax                                             ;save modified regs
  2854 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2855                                  ;-----------------------------------------------------------------------------------------------------------------------
  2856                                  ;
  2857                                  ;       Exit from hardware interrupt
  2858                                  ;
  2859                                  ;-----------------------------------------------------------------------------------------------------------------------
  2860 00000917 E8180A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2861 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2862 0000091E E80B0A0000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2863 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2864 00000924 CF                                              iretd                                                   ;return from interrupt
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  ;
  2867                                  ;       INT 30h Operating System Software Service Interrupt
  2868                                  ;
  2869                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2870                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2871                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2872                                  ;       the entry address of the specific function from a table.
  2873                                  ;
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                                          menter  svc
  2875                              <1> ?%1 equ ($-$$)
  2876 00000925 3C1D                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2877 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2878 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2879 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2880 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2881 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2882                                  ;-----------------------------------------------------------------------------------------------------------------------
  2883                                  ;
  2884                                  ;       Service Request Table
  2885                                  ;
  2886                                  ;
  2887                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2888                                  ;
  2889                                  ;-----------------------------------------------------------------------------------------------------------------------
  2890                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2890                              <1> tsvc :
  2890                              <1> e%1 equ ($-tsvc)/4
  2890 00000937 [D00B0000]          <1>  dd %1
  2891                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2891                              <1> e%1 equ ($-tsvc)/4
  2891 0000093B [4C120000]          <1>  dd %1
  2892                                                          tsvce   CompareMemory                                   ;compare memory
  2892                              <1> e%1 equ ($-tsvc)/4
  2892 0000093F [2B0E0000]          <1>  dd %1
  2893                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2893                              <1> e%1 equ ($-tsvc)/4
  2893 00000943 [DA100000]          <1>  dd %1
  2894                                                          tsvce   FreeMemory                                      ;free memory block
  2894                              <1> e%1 equ ($-tsvc)/4
  2894 00000947 [EE0C0000]          <1>  dd %1
  2895                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2895                              <1> e%1 equ ($-tsvc)/4
  2895 0000094B [D9120000]          <1>  dd %1
  2896                                                          tsvce   GetConsoleString                                ;get string input
  2896                              <1> e%1 equ ($-tsvc)/4
  2896 0000094F [8C0E0000]          <1>  dd %1
  2897                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2897                              <1> e%1 equ ($-tsvc)/4
  2897 00000953 [EA120000]          <1>  dd %1
  2898                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2898                              <1> e%1 equ ($-tsvc)/4
  2898 00000957 [FB120000]          <1>  dd %1
  2899                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2899                              <1> e%1 equ ($-tsvc)/4
  2899 0000095B [0D110000]          <1>  dd %1
  2900                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2900                              <1> e%1 equ ($-tsvc)/4
  2900 0000095F [B9090000]          <1>  dd %1
  2901                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2901                              <1> e%1 equ ($-tsvc)/4
  2901 00000963 [04130000]          <1>  dd %1
  2902                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2902                              <1> e%1 equ ($-tsvc)/4
  2902 00000967 [AA100000]          <1>  dd %1
  2903                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2903                              <1> e%1 equ ($-tsvc)/4
  2903 0000096B [D4090000]          <1>  dd %1
  2904                                                          tsvce   PutDayString                                    ;put DD string
  2904                              <1> e%1 equ ($-tsvc)/4
  2904 0000096F [150A0000]          <1>  dd %1
  2905                                                          tsvce   PutHourString                                   ;put hh string
  2905                              <1> e%1 equ ($-tsvc)/4
  2905 00000973 [230A0000]          <1>  dd %1
  2906                                                          tsvce   PutMinuteString                                 ;put mm string
  2906                              <1> e%1 equ ($-tsvc)/4
  2906 00000977 [310A0000]          <1>  dd %1
  2907                                                          tsvce   PutMonthString                                  ;put MM string
  2907                              <1> e%1 equ ($-tsvc)/4
  2907 0000097B [3F0A0000]          <1>  dd %1
  2908                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2908                              <1> e%1 equ ($-tsvc)/4
  2908 0000097F [4D0A0000]          <1>  dd %1
  2909                                                          tsvce   PutSecondString                                 ;put ss string
  2909                              <1> e%1 equ ($-tsvc)/4
  2909 00000983 [710A0000]          <1>  dd %1
  2910                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2910                              <1> e%1 equ ($-tsvc)/4
  2910 00000987 [7E0A0000]          <1>  dd %1
  2911                                                          tsvce   PutWeekdayString                                ;put weekday string
  2911                              <1> e%1 equ ($-tsvc)/4
  2911 0000098B [B30A0000]          <1>  dd %1
  2912                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2912                              <1> e%1 equ ($-tsvc)/4
  2912 0000098F [C10A0000]          <1>  dd %1
  2913                                                          tsvce   PutYearString                                   ;put YYYY string
  2913                              <1> e%1 equ ($-tsvc)/4
  2913 00000993 [E40A0000]          <1>  dd %1
  2914                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2914                              <1> e%1 equ ($-tsvc)/4
  2914 00000997 [3A130000]          <1>  dd %1
  2915                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2915                              <1> e%1 equ ($-tsvc)/4
  2915 0000099B [A5130000]          <1>  dd %1
  2916                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2916                              <1> e%1 equ ($-tsvc)/4
  2916 0000099F [2B110000]          <1>  dd %1
  2917                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2917                              <1> e%1 equ ($-tsvc)/4
  2917 000009A3 [CF110000]          <1>  dd %1
  2918                                                          tsvce   UpperCaseString                                 ;upper-case string
  2918                              <1> e%1 equ ($-tsvc)/4
  2918 000009A7 [480E0000]          <1>  dd %1
  2919                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2920                                  ;-----------------------------------------------------------------------------------------------------------------------
  2921                                  ;
  2922                                  ;       Service Request Macros
  2923                                  ;
  2924                                  ;       These macros provide positional parameterization of service request calls.
  2925                                  ;
  2926                                  ;-----------------------------------------------------------------------------------------------------------------------
  2927                                  %macro                  allocateMemory 1
  2928                                                          mov     ecx,%1                                          ;bytes to allocate
  2929                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2930                                                          int     _svc                                            ;invoke OS service
  2931                                  %endmacro
  2932                                  %macro                  clearConsoleScreen 0
  2933                                                          mov     al,eClearConsoleScreen                          ;function code
  2934                                                          int     _svc                                            ;invoke OS service
  2935                                  %endmacro
  2936                                  %macro                  compareMemory 0
  2937                                                          mov     al,eCompareMemory                               ;function code
  2938                                                          int     _svc                                            ;invoke OS service
  2939                                  %endmacro
  2940                                  %macro                  decimalToUnsigned 0
  2941                                                          mov     al,eDecimalToUnsigned                           ;function code
  2942                                                          int     _svc                                            ;invoke OS servie
  2943                                  %endmacro
  2944                                  %macro                  freeMemory 1
  2945                                                          mov     edx,%1                                          ;address of memory block
  2946                                                          mov     al,eFreeMemory                                  ;function code
  2947                                                          int     _svc                                            ;invoke OS service
  2948                                  %endmacro
  2949                                  %macro                  getBaseMemSize 0
  2950                                                          mov     al,eGetBaseMemSize                              ;function code
  2951                                                          int     _svc                                            ;invoke OS service
  2952                                  %endmacro
  2953                                  %macro                  getConsoleString 4
  2954                                                          mov     edx,%1                                          ;buffer address
  2955                                                          mov     ecx,%2                                          ;max characters
  2956                                                          mov     bh,%3                                           ;echo indicator
  2957                                                          mov     bl,%4                                           ;terminator
  2958                                                          mov     al,eGetConsoleString                            ;function code
  2959                                                          int     _svc                                            ;invoke OS service
  2960                                  %endmacro
  2961                                  %macro                  getExtendedMemSize 0
  2962                                                          mov     al,eGetExtendedMemSize                          ;function code
  2963                                                          int     _svc                                            ;invoke OS service
  2964                                  %endmacro
  2965                                  %macro                  getROMMemSize 0
  2966                                                          mov     al,eGetROMMemSize                               ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  hexadecimalToUnsigned 0
  2970                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2971                                                          int     _svc                                            ;invoke OS service
  2972                                  %endmacro
  2973                                  %macro                  isLeapYear 1
  2974                                                          mov     ebx,%1                                          ;DATETIME addr
  2975                                                          mov     al,eIsLeapYear                                  ;function code
  2976                                                          int     _svc                                            ;invoke OS service
  2977                                  %endmacro
  2978                                  %macro                  placeCursor 0
  2979                                                          mov     al,ePlaceCursor                                 ;function code
  2980                                                          int     _svc                                            ;invoke OS service
  2981                                  %endmacro
  2982                                  %macro                  putConsoleString 1
  2983                                                          mov     edx,%1                                          ;string address
  2984                                                          mov     al,ePutConsoleString                            ;function code
  2985                                                          int     _svc                                            ;invoke OS service
  2986                                  %endmacro
  2987                                  %macro                  putDateString 0
  2988                                                          mov     al,ePutDateString                               ;function code
  2989                                                          int     _svc                                            ;invoke OS service
  2990                                  %endmacro
  2991                                  %macro                  putDateString 2
  2992                                                          mov     ebx,%1                                          ;DATETIME addr
  2993                                                          mov     edx,%2                                          ;output buffer addr
  2994                                                          mov     al,ePutDateString                               ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  putDayString 2
  2998                                                          mov     ebx,%1                                          ;DATETIME addr
  2999                                                          mov     edx,%2                                          ;output buffer addr
  3000                                                          mov     al,ePutDayString                                ;function code
  3001                                                          int     _svc                                            ;invoke OS service
  3002                                  %endmacro
  3003                                  %macro                  putHourString 2
  3004                                                          mov     ebx,%1                                          ;DATETIME addr
  3005                                                          mov     edx,%2                                          ;output buffer addr
  3006                                                          mov     al,ePutHourString                               ;function code
  3007                                                          int     _svc                                            ;invoke OS service
  3008                                  %endmacro
  3009                                  %macro                  putMinuteString 2
  3010                                                          mov     ebx,%1                                          ;DATETIME addr
  3011                                                          mov     edx,%2                                          ;output buffer addr
  3012                                                          mov     al,ePutMinuteString                             ;function code
  3013                                                          int     _svc                                            ;invoke OS service
  3014                                  %endmacro
  3015                                  %macro                  putMonthString 2
  3016                                                          mov     ebx,%1                                          ;DATETIME addr
  3017                                                          mov     edx,%2                                          ;output buffer addr
  3018                                                          mov     al,ePutMonthString                              ;function code
  3019                                                          int     _svc                                            ;invoke OS service
  3020                                  %endmacro
  3021                                  %macro                  putMonthNameString 2
  3022                                                          mov     ebx,%1                                          ;DATETIME addr
  3023                                                          mov     edx,%2                                          ;output buffer addr
  3024                                                          mov     al,ePutMonthNameString                          ;function code
  3025                                                          int     _svc                                            ;invoke OS service
  3026                                  %endmacro
  3027                                  %macro                  putSecondString 2
  3028                                                          mov     ebx,%1                                          ;DATETIME addr
  3029                                                          mov     edx,%2                                          ;output buffer addr
  3030                                                          mov     al,ePutSecondString                             ;function code
  3031                                                          int     _svc                                            ;invoke OS service
  3032                                  %endmacro
  3033                                  %macro                  putTimeString 0
  3034                                                          mov     al,ePutTimeString                               ;function code
  3035                                                          int     _svc                                            ;invoke OS service
  3036                                  %endmacro
  3037                                  %macro                  putTimeString 2
  3038                                                          mov     ebx,%1                                          ;DATETIME addr
  3039                                                          mov     edx,%2                                          ;output buffer addr
  3040                                                          mov     al,ePutTimeString                               ;function code
  3041                                                          int     _svc                                            ;invoke OS service
  3042                                  %endmacro
  3043                                  %macro                  putWeekdayString 2
  3044                                                          mov     ebx,%1                                          ;DATETIME addr
  3045                                                          mov     edx,%2                                          ;output buffer addr
  3046                                                          mov     al,ePutWeekdayString                            ;function code
  3047                                                          int     _svc                                            ;invoke OS service
  3048                                  %endmacro
  3049                                  %macro                  putWeekdayNameString 2
  3050                                                          mov     ebx,%1                                          ;DATETIME addr
  3051                                                          mov     edx,%2                                          ;output buffer addr
  3052                                                          mov     al,ePutWeekdayNameString                        ;function code
  3053                                                          int     _svc                                            ;invoke OS service
  3054                                  %endmacro
  3055                                  %macro                  putYearString 2
  3056                                                          mov     ebx,%1                                          ;DATETIME addr
  3057                                                          mov     edx,%2                                          ;output buffer addr
  3058                                                          mov     al,ePutYearString                               ;function code
  3059                                                          int     _svc                                            ;invoke OS service
  3060                                  %endmacro
  3061                                  %macro                  readRealTimeClock 0
  3062                                                          mov     al,eReadRealTimeClock                           ;function code
  3063                                                          int     _svc                                            ;invoke OS service
  3064                                  %endmacro
  3065                                  %macro                  readRealTimeClock 1
  3066                                                          mov     ebx,%1                                          ;DATETIME addr
  3067                                                          mov     al,eReadRealTimeClock                           ;function code
  3068                                                          int     _svc                                            ;invoke OS service
  3069                                  %endmacro
  3070                                  %macro                  resetSystem 0
  3071                                                          mov     al,eResetSystem                                 ;function code
  3072                                                          int     _svc                                            ;invoke OS service
  3073                                  %endmacro
  3074                                  %macro                  unsignedToDecimalString 0
  3075                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3076                                                          int     _svc                                            ;invoke OS service
  3077                                  %endmacro
  3078                                  %macro                  unsignedToHexadecimal 0
  3079                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3080                                                          int     _svc                                            ;invoke OS service
  3081                                  %endmacro
  3082                                  %macro                  upperCaseString 0
  3083                                                          mov     al,eUpperCaseString                             ;function code
  3084                                                          int     _svc                                            ;invoke OS service
  3085                                  %endmacro
  3086                                  ;=======================================================================================================================
  3087                                  ;
  3088                                  ;       Kernel Function Library
  3089                                  ;
  3090                                  ;=======================================================================================================================
  3091                                  ;=======================================================================================================================
  3092                                  ;
  3093                                  ;       Date and Time Helper Routines
  3094                                  ;
  3095                                  ;       GetYear
  3096                                  ;       IsLeapYear
  3097                                  ;       PutDateString
  3098                                  ;       PutDayString
  3099                                  ;       PutHourString
  3100                                  ;       PutMinuteString
  3101                                  ;       PutMonthString
  3102                                  ;       PutMonthNameString
  3103                                  ;       PutSecondString
  3104                                  ;       PutTimeString
  3105                                  ;       PutWeekdayString
  3106                                  ;       PutWeekdayNameString
  3107                                  ;       PutYearString
  3108                                  ;
  3109                                  ;=======================================================================================================================
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111                                  ;
  3112                                  ;       Routine:        GetYear
  3113                                  ;
  3114                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3115                                  ;
  3116                                  ;       In:             DS:EBX  DATETIME address
  3117                                  ;
  3118                                  ;       Out:            ECX     year
  3119                                  ;
  3120                                  ;-----------------------------------------------------------------------------------------------------------------------
  3121 000009AB 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3122 000009AF 6BC964                                          imul    ecx,100                                         ;century * 100
  3123 000009B2 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3124 000009B6 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3125 000009B8 C3                                              ret                                                     ;return
  3126                                  ;-----------------------------------------------------------------------------------------------------------------------
  3127                                  ;
  3128                                  ;       Routine:        IsLeapYear
  3129                                  ;
  3130                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3131                                  ;
  3132                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3133                                  ;
  3134                                  ;       Out:            ECX     0 = not a leap year
  3135                                  ;                               1 = leap year
  3136                                  ;
  3137                                  ;-----------------------------------------------------------------------------------------------------------------------
  3138 000009B9 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3139 000009BE 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3140 000009C0 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3141 000009C2 A803                                            test    al,00000011b                                    ;multiple of four?
  3142 000009C4 750D                                            jnz     .no                                             ;no, branch
  3143 000009C6 B264                                            mov     dl,100                                          ;divisor
  3144 000009C8 F6F2                                            div     dl                                              ;divide by 100
  3145 000009CA 84E4                                            test    ah,ah                                           ;multiple of 100?
  3146 000009CC 7504                                            jnz     .yes                                            ;yes, branch
  3147 000009CE A803                                            test    al,00000011b                                    ;multiple of 400?
  3148 000009D0 7501                                            jnz     .no                                             ;no, branch
  3149 000009D2 41                      .yes                    inc     ecx                                             ;indicate leap
  3150 000009D3 C3                      .no                     ret                                                     ;return
  3151                                  ;-----------------------------------------------------------------------------------------------------------------------
  3152                                  ;
  3153                                  ;       Routine:        PutDateString
  3154                                  ;
  3155                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3156                                  ;                       structure at ds:ebx.
  3157                                  ;
  3158                                  ;       In:             DS:EBX  DATETIME address
  3159                                  ;                       DS:EDX  output buffer address
  3160                                  ;
  3161                                  ;-----------------------------------------------------------------------------------------------------------------------
  3162 000009D4 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3163 000009D5 57                                              push    edi                                             ;
  3164 000009D6 06                                              push    es                                              ;
  3165 000009D7 1E                                              push    ds                                              ;store data selector ...
  3166 000009D8 07                                              pop     es                                              ;... in extra segment reg
  3167 000009D9 89D7                                            mov     edi,edx                                         ;output buffer address
  3168 000009DB B10A                                            mov     cl,10                                           ;divisor
  3169 000009DD BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3170 000009E2 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3171 000009E6 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3172 000009E8 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3173 000009EA FC                                              cld                                                     ;forward strings
  3174 000009EB AB                                              stosd                                                   ;store "mm/"nul
  3175 000009EC 4F                                              dec     edi                                             ;address of terminator
  3176 000009ED 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3177 000009F1 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3178 000009F3 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3179 000009F5 AB                                              stosd                                                   ;store "dd/"nul
  3180 000009F6 4F                                              dec     edi                                             ;address of terminator
  3181 000009F7 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3182 000009FB F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3183 000009FD 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3184 000009FF AB                                              stosd                                                   ;store "cc/"null
  3185 00000A00 4F                                              dec     edi                                             ;address of terminator
  3186 00000A01 4F                                              dec     edi                                             ;address of delimiter
  3187 00000A02 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3188 00000A06 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3189 00000A08 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3190 00000A0A AA                                              stosb                                                   ;store quotient
  3191 00000A0B 88E0                                            mov     al,ah                                           ;remainder
  3192 00000A0D AA                                              stosb                                                   ;store remainder
  3193 00000A0E 30C0                                            xor     al,al                                           ;null terminator
  3194 00000A10 AA                                              stosb                                                   ;store terminator
  3195 00000A11 07                                              pop     es                                              ;restore non-volatile regs
  3196 00000A12 5F                                              pop     edi                                             ;
  3197 00000A13 59                                              pop     ecx                                             ;
  3198 00000A14 C3                                              ret                                                     ;return
  3199                                  ;-----------------------------------------------------------------------------------------------------------------------
  3200                                  ;
  3201                                  ;       Routine:        PutDayString
  3202                                  ;
  3203                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3204                                  ;                       structure at ds:ebx.
  3205                                  ;
  3206                                  ;       In:             DS:EBX  DATETIME address
  3207                                  ;                       DS:EDX  output buffer address
  3208                                  ;
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210 00000A15 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3211 00000A16 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3212 00000A1A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3213 00000A1C E80A070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3214 00000A21 59                                              pop     ecx                                             ;
  3215 00000A22 C3                                              ret                                                     ;return
  3216                                  ;-----------------------------------------------------------------------------------------------------------------------
  3217                                  ;
  3218                                  ;       Routine:        PutHourString
  3219                                  ;
  3220                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3221                                  ;                       structure at ds:ebx.
  3222                                  ;
  3223                                  ;       In:             DS:EBX  DATETIME address
  3224                                  ;                       DS:EDX  output buffer address
  3225                                  ;
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227 00000A23 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3228 00000A24 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3229 00000A28 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3230 00000A2A E8FC060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3231 00000A2F 59                                              pop     ecx                                             ;
  3232 00000A30 C3                                              ret                                                     ;return
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  ;
  3235                                  ;       Routine:        PutMinuteString
  3236                                  ;
  3237                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3238                                  ;                       structure at ds:ebx.
  3239                                  ;
  3240                                  ;       In:             DS:EBX  DATETIME address
  3241                                  ;                       DS:EDX  output buffer address
  3242                                  ;
  3243                                  ;-----------------------------------------------------------------------------------------------------------------------
  3244 00000A31 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3245 00000A32 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3246 00000A36 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3247 00000A38 E8EE060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3248 00000A3D 59                                              pop     ecx                                             ;
  3249 00000A3E C3                                              ret                                                     ;return
  3250                                  ;-----------------------------------------------------------------------------------------------------------------------
  3251                                  ;
  3252                                  ;       Routine:        PutMonthString
  3253                                  ;
  3254                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3255                                  ;                       structure at ds:ebx.
  3256                                  ;
  3257                                  ;       In:             DS:EBX  DATETIME address
  3258                                  ;                       DS:EDX  output buffer address
  3259                                  ;
  3260                                  ;-----------------------------------------------------------------------------------------------------------------------
  3261 00000A3F 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3262 00000A40 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3263 00000A44 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3264 00000A46 E8E0060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3265 00000A4B 59                                              pop     ecx                                             ;
  3266 00000A4C C3                                              ret                                                     ;return
  3267                                  ;-----------------------------------------------------------------------------------------------------------------------
  3268                                  ;
  3269                                  ;       Routine:        PutMonthNameString
  3270                                  ;
  3271                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3272                                  ;                       structure at ds:ebx.
  3273                                  ;
  3274                                  ;       In:             DS:EBX  DATETIME address
  3275                                  ;                       DS:EDX  output buffer address
  3276                                  ;
  3277                                  ;-----------------------------------------------------------------------------------------------------------------------
  3278 00000A4D 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3279 00000A4E 57                                              push    edi                                             ;
  3280 00000A4F 1E                                              push    ds                                              ;
  3281 00000A50 06                                              push    es                                              ;
  3282 00000A51 1E                                              push    ds                                              ;load data selector ...
  3283 00000A52 07                                              pop     es                                              ;... into extra segment
  3284 00000A53 89D7                                            mov     edi,edx                                         ;output buffer address
  3285 00000A55 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3286 00000A59 48                                              dec     eax                                             ;month (0-11)
  3287 00000A5A C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3288 00000A5D 0E                                              push    cs                                              ;load code selector ...
  3289 00000A5E 1F                                              pop     ds                                              ;... into data segment
  3290 00000A5F 8BB0[A00B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3291 00000A65 FC                                              cld                                                     ;forward strings
  3292 00000A66 AC                      .10                     lodsb                                                   ;name character
  3293 00000A67 AA                                              stosb                                                   ;store in output buffer
  3294 00000A68 84C0                                            test    al,al                                           ;end of string?
  3295 00000A6A 75FA                                            jnz     .10                                             ;no, continue
  3296 00000A6C 07                                              pop     es                                              ;restore non-volatile regs
  3297 00000A6D 1F                                              pop     ds                                              ;
  3298 00000A6E 5F                                              pop     edi                                             ;
  3299 00000A6F 5E                                              pop     esi                                             ;
  3300 00000A70 C3                                              ret                                                     ;return
  3301                                  ;-----------------------------------------------------------------------------------------------------------------------
  3302                                  ;
  3303                                  ;       Routine:        PutSecondString
  3304                                  ;
  3305                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3306                                  ;                       structure at ds:ebx.
  3307                                  ;
  3308                                  ;       In:             DS:EBX  DATETIME address
  3309                                  ;                       DS:EDX  output buffer address
  3310                                  ;
  3311                                  ;-----------------------------------------------------------------------------------------------------------------------
  3312 00000A71 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3313 00000A72 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3314 00000A75 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3315 00000A77 E8AF060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3316 00000A7C 59                                              pop     ecx                                             ;
  3317 00000A7D C3                                              ret                                                     ;return
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319                                  ;
  3320                                  ;       Routine:        PutTimeString
  3321                                  ;
  3322                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3323                                  ;                       structure at ds:ebx.
  3324                                  ;
  3325                                  ;       In:             DS:EBX  DATETIME address
  3326                                  ;                       DS:EDX  output buffer address
  3327                                  ;
  3328                                  ;-----------------------------------------------------------------------------------------------------------------------
  3329 00000A7E 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3330 00000A7F 57                                              push    edi                                             ;
  3331 00000A80 06                                              push    es                                              ;
  3332 00000A81 1E                                              push    ds                                              ;store data selector ...
  3333 00000A82 07                                              pop     es                                              ;... in extra segment reg
  3334 00000A83 89D7                                            mov     edi,edx                                         ;output buffer address
  3335 00000A85 B10A                                            mov     cl,10                                           ;divisor
  3336 00000A87 BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3337 00000A8C 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3338 00000A90 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3339 00000A92 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3340 00000A94 FC                                              cld                                                     ;forward strings
  3341 00000A95 AB                                              stosd                                                   ;store "mm/"nul
  3342 00000A96 4F                                              dec     edi                                             ;address of terminator
  3343 00000A97 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3344 00000A9B F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3345 00000A9D 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3346 00000A9F AB                                              stosd                                                   ;store "dd/"nul
  3347 00000AA0 4F                                              dec     edi                                             ;address of terminator
  3348 00000AA1 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3349 00000AA4 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3350 00000AA6 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3351 00000AA8 AA                                              stosb                                                   ;store quotient
  3352 00000AA9 88E0                                            mov     al,ah                                           ;remainder
  3353 00000AAB AA                                              stosb                                                   ;store remainder
  3354 00000AAC 30C0                                            xor     al,al                                           ;null terminator
  3355 00000AAE AA                                              stosb                                                   ;store terminator
  3356 00000AAF 07                                              pop     es                                              ;restore non-volatile regs
  3357 00000AB0 5F                                              pop     edi                                             ;
  3358 00000AB1 59                                              pop     ecx                                             ;
  3359 00000AB2 C3                                              ret                                                     ;return
  3360                                  ;-----------------------------------------------------------------------------------------------------------------------
  3361                                  ;
  3362                                  ;       Routine:        PutWeekdayString
  3363                                  ;
  3364                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3365                                  ;                       structure at ds:ebx.
  3366                                  ;
  3367                                  ;       In:             DS:EBX  DATETIME address
  3368                                  ;                       DS:EDX  output buffer address
  3369                                  ;
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371 00000AB3 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3372 00000AB4 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3373 00000AB8 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3374 00000ABA E86C060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3375 00000ABF 59                                              pop     ecx                                             ;
  3376 00000AC0 C3                                              ret                                                     ;return
  3377                                  ;-----------------------------------------------------------------------------------------------------------------------
  3378                                  ;
  3379                                  ;       Routine:        PutWeekdayNameString
  3380                                  ;
  3381                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3382                                  ;                       structure at ds:ebx.
  3383                                  ;
  3384                                  ;       In:             DS:EBX  DATETIME address
  3385                                  ;                       DS:EDX  output buffer address
  3386                                  ;
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388 00000AC1 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3389 00000AC2 57                                              push    edi                                             ;
  3390 00000AC3 1E                                              push    ds                                              ;
  3391 00000AC4 06                                              push    es                                              ;
  3392 00000AC5 1E                                              push    ds                                              ;load data selector ...
  3393 00000AC6 07                                              pop     es                                              ;... into extra segment
  3394 00000AC7 89D7                                            mov     edi,edx                                         ;output buffer address
  3395 00000AC9 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3396 00000ACD C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3397 00000AD0 0E                                              push    cs                                              ;load code selector ...
  3398 00000AD1 1F                                              pop     ds                                              ;... into data segment
  3399 00000AD2 8BB0[840B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3400 00000AD8 FC                                              cld                                                     ;forward strings
  3401 00000AD9 AC                      .10                     lodsb                                                   ;name character
  3402 00000ADA AA                                              stosb                                                   ;store in output buffer
  3403 00000ADB 84C0                                            test    al,al                                           ;end of string?
  3404 00000ADD 75FA                                            jnz     .10                                             ;no, continue
  3405 00000ADF 07                                              pop     es                                              ;restore non-volatile regs
  3406 00000AE0 1F                                              pop     ds                                              ;
  3407 00000AE1 5F                                              pop     edi                                             ;
  3408 00000AE2 5E                                              pop     esi                                             ;
  3409 00000AE3 C3                                              ret                                                     ;return
  3410                                  ;-----------------------------------------------------------------------------------------------------------------------
  3411                                  ;
  3412                                  ;       Routine:        PutYearString
  3413                                  ;
  3414                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3415                                  ;                       structure at ds:ebx.
  3416                                  ;
  3417                                  ;       In:             DS:EBX  DATETIME address
  3418                                  ;                       DS:EDX  output buffer address
  3419                                  ;
  3420                                  ;-----------------------------------------------------------------------------------------------------------------------
  3421 00000AE4 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3422 00000AE5 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3423 00000AEA B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3424 00000AEC E83A060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3425 00000AF1 59                                              pop     ecx                                             ;restore non-volatile regs
  3426 00000AF2 C3                                              ret                                                     ;return
  3427                                  ;-----------------------------------------------------------------------------------------------------------------------
  3428                                  ;
  3429                                  ;       Day Names
  3430                                  ;
  3431                                  ;-----------------------------------------------------------------------------------------------------------------------
  3432 00000AF3 53756E64617900          czSunday                db      "Sunday",0
  3433 00000AFA 4D6F6E64617900          czMonday                db      "Monday",0
  3434 00000B01 5475657364617900        czTuesday               db      "Tuesday",0
  3435 00000B09 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3435 00000B12 00                 
  3436 00000B13 546875727364617900      czThursday              db      "Thursday",0
  3437 00000B1C 46726964617900          czFriday                db      "Friday",0
  3438 00000B23 536174757264617900      czSaturday              db      "Saturday",0
  3439                                  ;-----------------------------------------------------------------------------------------------------------------------
  3440                                  ;
  3441                                  ;       Month Names
  3442                                  ;
  3443                                  ;-----------------------------------------------------------------------------------------------------------------------
  3444 00000B2C 4A616E7561727900        czJanuary               db      "January",0
  3445 00000B34 466562727561727900      czFebruary              db      "February",0
  3446 00000B3D 4D6172636800            czMarch                 db      "March",0
  3447 00000B43 417072696C00            czApril                 db      "April",0
  3448 00000B49 4D617900                czMay                   db      "May",0
  3449 00000B4D 4A756E6500              czJune                  db      "June",0
  3450 00000B52 4A756C7900              czJuly                  db      "July",0
  3451 00000B57 41756775737400          czAugust                db      "August",0
  3452 00000B5E 53657074656D626572-     czSeptember             db      "September",0
  3452 00000B67 00                 
  3453 00000B68 4F63746F62657200        czOctober               db      "October",0
  3454 00000B70 4E6F76656D62657200      czNovember              db      "November",0
  3455 00000B79 446563656D62657200      czDecember              db      "December",0
  3456                                  ;-----------------------------------------------------------------------------------------------------------------------
  3457                                  ;
  3458                                  ;       Day Names Lookup Table
  3459                                  ;
  3460                                  ;-----------------------------------------------------------------------------------------------------------------------
  3461 00000B82 90<rept>                                        align   4
  3462                                  tDayNames               equ     $
  3463 00000B84 [F30A0000]                                      dd      czSunday
  3464 00000B88 [FA0A0000]                                      dd      czMonday
  3465 00000B8C [010B0000]                                      dd      czTuesday
  3466 00000B90 [090B0000]                                      dd      czWednesday
  3467 00000B94 [130B0000]                                      dd      czThursday
  3468 00000B98 [1C0B0000]                                      dd      czFriday
  3469 00000B9C [230B0000]                                      dd      czSaturday
  3470                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3471                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3472                                  ;-----------------------------------------------------------------------------------------------------------------------
  3473                                  ;
  3474                                  ;       Month Names Lookup Table
  3475                                  ;
  3476                                  ;-----------------------------------------------------------------------------------------------------------------------
  3477                                                          align   4
  3478                                  tMonthNames             equ     $
  3479 00000BA0 [2C0B0000]                                      dd      czJanuary
  3480 00000BA4 [340B0000]                                      dd      czFebruary
  3481 00000BA8 [3D0B0000]                                      dd      czMarch
  3482 00000BAC [430B0000]                                      dd      czApril
  3483 00000BB0 [490B0000]                                      dd      czMay
  3484 00000BB4 [4D0B0000]                                      dd      czJune
  3485 00000BB8 [520B0000]                                      dd      czJuly
  3486 00000BBC [570B0000]                                      dd      czAugust
  3487 00000BC0 [5E0B0000]                                      dd      czSeptember
  3488 00000BC4 [680B0000]                                      dd      czOctober
  3489 00000BC8 [700B0000]                                      dd      czNovember
  3490 00000BCC [790B0000]                                      dd      czDecember
  3491                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3492                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3493                                  ;=======================================================================================================================
  3494                                  ;
  3495                                  ;       Memory Helper Routines
  3496                                  ;
  3497                                  ;       AllocateMemory
  3498                                  ;       FreeMemory
  3499                                  ;
  3500                                  ;=======================================================================================================================
  3501                                  ;-----------------------------------------------------------------------------------------------------------------------
  3502                                  ;
  3503                                  ;       Routine:        AllocateMemory
  3504                                  ;
  3505                                  ;       Description:    This routine allocates a memory block for the given task.
  3506                                  ;
  3507                                  ;       In:             ECX     bytes of memory to allocate
  3508                                  ;
  3509                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3510                                  ;                               0       unable to allocate memory
  3511                                  ;
  3512                                  ;-----------------------------------------------------------------------------------------------------------------------
  3513 00000BD0 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3514 00000BD1 51                                              push    ecx                                             ;
  3515 00000BD2 56                                              push    esi                                             ;
  3516 00000BD3 1E                                              push    ds                                              ;
  3517                                  ;
  3518                                  ;       Address kernel memory structures
  3519                                  ;
  3520 00000BD4 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3521 00000BD6 1F                                              pop     ds                                              ;... into data segment reg
  3522 00000BD7 BE3B090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3523                                  ;
  3524                                  ;       Set requested size to minimum block size if requested size is too small.
  3525                                  ;
  3526 00000BDC 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3527 00000BE2 7305                                            jae     .10                                             ;no, branch
  3528 00000BE4 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3529 00000BE9 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3530                                  ;
  3531                                  ;       Find the first free memory block large enough to satisfy the request.
  3532                                  ;
  3533 00000BEC 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3534 00000BEF 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3535 00000BF1 0F84F2000000                                    jz      .220                                            ;yes, branch
  3536 00000BF7 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3537 00000BFA 7605                                            jbe     .30                                             ;yes, branch
  3538 00000BFC 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3539 00000BFF EBEE                                            jmp     .20                                             ;continue
  3540                                  ;-----------------------------------------------------------------------------------------------------------------------
  3541                                  ;
  3542                                  ;       Address the previous and next free memory blocks.
  3543                                  ;
  3544 00000C01 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3545 00000C04 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3546                                  ;
  3547                                  ;       Remove the free memory block from the forward free memory block chain.
  3548                                  ;
  3549 00000C07 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3550 00000C09 7405                                            jz      .40                                             ;no, branch
  3551 00000C0B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3552 00000C0E EB03                                            jmp     .50                                             ;continue
  3553 00000C10 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3554                                  ;
  3555                                  ;       Remove the free memory block from the reverse free memory block chain.
  3556                                  ;
  3557 00000C13 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3558 00000C15 7405                                            jz      .60                                             ;no, branch
  3559 00000C17 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3560 00000C1A EB03                                            jmp     .70                                             ;continue
  3561 00000C1C 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3562                                  ;-----------------------------------------------------------------------------------------------------------------------
  3563                                  ;
  3564                                  ;       Determine if the free memory block can be split.
  3565                                  ;
  3566 00000C1F 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3567 00000C22 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3568 00000C24 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3569 00000C2A 7263                                            jb      .150                                            ;no, branch
  3570                                  ;
  3571                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3572                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3573                                  ;       of the requested memory size.
  3574                                  ;
  3575 00000C2C 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3576 00000C2F 89C2                                            mov     edx,eax                                         ;memory block address
  3577 00000C31 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3578 00000C33 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3579 00000C36 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3580                                  ;
  3581                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3582                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3583                                  ;
  3584 00000C39 E305                                            jecxz   .80                                             ;no next contig, branch
  3585 00000C3B 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3586 00000C3E EB03                                            jmp     .90                                             ;continue
  3587 00000C40 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3588                                  ;
  3589                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3590                                  ;
  3591 00000C43 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3592 00000C46 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3593 00000C49 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3594 00000C4C BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3595 00000C51 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3596 00000C53 31DB                                            xor     ebx,ebx                                         ;zero register
  3597 00000C55 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3598 00000C58 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3599                                  ;
  3600                                  ;       Find the proper location in the free block chain for the new free block
  3601                                  ;
  3602 00000C5B 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3603 00000C5E 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3604 00000C61 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3605 00000C63 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3606 00000C66 7605                                            jbe     .110                                            ;yes, branch
  3607 00000C68 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3608 00000C6B EBF4                                            jmp     .100                                            ;continue
  3609                                  ;
  3610                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3611                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3612                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3613                                  ;       block of hte next block, if there is one.
  3614                                  ;
  3615 00000C6D 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3616 00000C70 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3617 00000C73 E308                                            jecxz   .120                                            ;branch if no next block
  3618 00000C75 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3619 00000C78 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3620 00000C7B EB03                                            jmp     .130                                            ;continue
  3621 00000C7D 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3622                                  ;
  3623                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3624                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3625                                  ;       last user block pointers if necessary.
  3626                                  ;
  3627 00000C80 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3628 00000C83 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3629 00000C85 7405                                            jz      .140                                            ;no, branch
  3630 00000C87 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3631 00000C8A EB03                                            jmp     .150                                            ;continue
  3632 00000C8C 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3633                                  ;
  3634                                  ;       Update the newly allocated block's owner and signature.
  3635                                  ;
  3636 00000C8F BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3637 00000C94 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3638 00000C96 31D2                                            xor     edx,edx                                         ;zero register
  3639 00000C98 660F00CA                                        str     dx                                              ;load the task state register
  3640 00000C9C 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3641                                  ;
  3642                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3643                                  ;
  3644 00000C9F 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3645 00000CA2 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3646 00000CA4 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3647 00000CA7 721E                                            jb      .180                                            ;branch if block belongs to next task
  3648 00000CA9 7405                                            je      .170                                            ;branch if block belongs to this task
  3649 00000CAB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3650 00000CAE EBF2                                            jmp     .160                                            ;continue
  3651                                  ;
  3652                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3653                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3654                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3655                                  ;       place to insert the block.
  3656                                  ;
  3657 00000CB0 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3658 00000CB3 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3659 00000CB6 760F                                            jbe     .180                                            ;yes, branch
  3660 00000CB8 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3661 00000CBB 85C9                                            test    ecx,ecx                                         ;end of chain?
  3662 00000CBD 7408                                            jz      .180                                            ;yes, branch
  3663 00000CBF 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3664 00000CC2 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3665 00000CC5 74E9                                            je      .170                                            ;yes, continue search
  3666                                  ;
  3667                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3668                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3669                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3670                                  ;       do have a previous-block, we update that block's next-block pointer.
  3671                                  ;
  3672 00000CC7 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3673 00000CCA 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3674 00000CCD E308                                            jecxz   .190                                            ;branch if no next-task block
  3675 00000CCF 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3676 00000CD2 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3677 00000CD5 EB03                                            jmp     .200                                            ;continue
  3678 00000CD7 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3679                                  ;
  3680                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3681                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3682                                  ;       global first and/or last user-block pointers if necessary.
  3683                                  ;
  3684 00000CDA 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3685 00000CDD 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3686 00000CDF 7405                                            jz      .210                                            ;no, branch
  3687 00000CE1 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3688 00000CE4 EB03                                            jmp     .220                                            ;continue
  3689 00000CE6 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3690                                  ;
  3691                                  ;       Restore registers and return to caller.
  3692                                  ;
  3693 00000CE9 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3694 00000CEA 5E                                              pop     esi                                             ;
  3695 00000CEB 59                                              pop     ecx                                             ;
  3696 00000CEC 5B                                              pop     ebx                                             ;
  3697 00000CED C3                                              ret                                                     ;return
  3698                                  ;-----------------------------------------------------------------------------------------------------------------------
  3699                                  ;
  3700                                  ;       Routine:        FreeMemory
  3701                                  ;
  3702                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3703                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3704                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3705                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3706                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3707                                  ;
  3708                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3709                                  ;
  3710                                  ;       Out:            EAX     -1      invalid memory block
  3711                                  ;                               0       memory block freed
  3712                                  ;
  3713                                  ;-----------------------------------------------------------------------------------------------------------------------
  3714 00000CEE 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3715 00000CEF 51                                              push    ecx                                             ;
  3716 00000CF0 56                                              push    esi                                             ;
  3717 00000CF1 57                                              push    edi                                             ;
  3718 00000CF2 1E                                              push    ds                                              ;
  3719 00000CF3 06                                              push    es                                              ;
  3720                                  ;
  3721                                  ;       Address the root memory structure
  3722                                  ;
  3723 00000CF4 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3724 00000CF6 07                                              pop     es                                              ;... into extra segment reg
  3725 00000CF7 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3726 00000CF9 1F                                              pop     ds                                              ;... into data segment reg
  3727 00000CFA BE3B090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3728 00000CFF 89D7                                            mov     edi,edx                                         ;memory block address
  3729                                  ;
  3730                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3731                                  ;
  3732 00000D01 31C0                                            xor     eax,eax                                         ;indicate success
  3733 00000D03 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3734 00000D09 0F8415010000                                    je      .240                                            ;yes, branch
  3735 00000D0F 48                                              dec     eax                                             ;indicate failure
  3736 00000D10 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3737 00000D16 0F8508010000                                    jne     .240                                            ;no, branch
  3738                                  ;-----------------------------------------------------------------------------------------------------------------------
  3739                                  ;
  3740                                  ;       Unlink the USER memory block.
  3741                                  ;
  3742                                  ;-----------------------------------------------------------------------------------------------------------------------
  3743                                  ;
  3744                                  ;       Set the block signature. Reset owner.
  3745                                  ;
  3746 00000D1C C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3747 00000D22 31C0                                            xor     eax,eax                                         ;zero register
  3748 00000D24 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3749                                  ;
  3750                                  ;       Wipe user area.
  3751                                  ;
  3752 00000D27 57                                              push    edi                                             ;save block address
  3753 00000D28 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3754 00000D2B 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3755 00000D2E 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3756 00000D31 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3757 00000D33 F3AA                                            rep     stosb                                           ;clear memory
  3758 00000D35 5F                                              pop     edi                                             ;restore block address
  3759                                  ;
  3760                                  ;       Address the preceding and following USER memory blocks
  3761                                  ;
  3762 00000D36 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3763 00000D39 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3764                                  ;
  3765                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3766                                  ;       pointer to point to the USER block following this block.
  3767                                  ;
  3768 00000D3C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3769 00000D3E 7405                                            jz      .10                                             ;no, branch
  3770 00000D40 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3771 00000D43 EB03                                            jmp     .20                                             ;continue
  3772 00000D45 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3773                                  ;
  3774                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3775                                  ;       pointer to point to the USER block preceding this block.
  3776                                  ;
  3777 00000D48 E305                    .20                     jecxz   .30                                             ;branch if no next block
  3778 00000D4A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3779 00000D4D EB03                                            jmp     .40                                             ;continue
  3780 00000D4F 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3781                                  ;-----------------------------------------------------------------------------------------------------------------------
  3782                                  ;
  3783                                  ;       Merge with a previous contiguous FREE memory block.
  3784                                  ;
  3785                                  ;-----------------------------------------------------------------------------------------------------------------------
  3786                                  ;
  3787                                  ;       Address the preceding and following contiguous memory blocks.
  3788                                  ;
  3789 00000D52 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3790 00000D55 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3791                                  ;
  3792                                  ;       Verify we have a previous contiguous FREE block.
  3793                                  ;
  3794 00000D58 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3795 00000D5A 7442                                            jz      .100                                            ;no, branch
  3796 00000D5C 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3797 00000D62 753A                                            jne     .100                                            ;no, branch
  3798                                  ;
  3799                                  ;       Update adjacent block's contiguous pointers.
  3800                                  ;
  3801 00000D64 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3802 00000D67 E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3803 00000D69 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3804 00000D6C EB03                                            jmp     .60                                             ;continue
  3805 00000D6E 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3806                                  ;
  3807                                  ;       Update the size of the merged FREE block.
  3808                                  ;
  3809 00000D71 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3810 00000D74 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3811                                  ;
  3812                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3813                                  ;
  3814 00000D77 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3815 00000D7C B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3816 00000D7E F3AA                                            rep     stosb                                           ;clear memory header
  3817 00000D80 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819                                  ;
  3820                                  ;       Unlink the previous contiguous FREE memory block
  3821                                  ;
  3822                                  ;-----------------------------------------------------------------------------------------------------------------------
  3823                                  ;
  3824                                  ;       Address the preceding and following USER memory blocks
  3825                                  ;
  3826 00000D82 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3827 00000D85 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3828                                  ;
  3829                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3830                                  ;       block pointer.
  3831                                  ;
  3832 00000D88 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3833 00000D8A 7405                                            jz      .70                                             ;no, branch
  3834 00000D8C 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3835 00000D8F EB03                                            jmp     .80                                             ;branch
  3836 00000D91 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3837                                  ;
  3838                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3839                                  ;       pointer.
  3840                                  ;
  3841 00000D94 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3842 00000D96 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3843 00000D99 EB03                                            jmp     .100                                            ;continue
  3844 00000D9B 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3845                                  ;-----------------------------------------------------------------------------------------------------------------------
  3846                                  ;
  3847                                  ;       Merge with a following contiguous FREE memory block.
  3848                                  ;
  3849                                  ;-----------------------------------------------------------------------------------------------------------------------
  3850                                  ;
  3851                                  ;       Verify we have a following contiguous FREE block.
  3852                                  ;
  3853 00000D9E 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3854 00000DA1 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3855 00000DA3 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3856 00000DA9 7543                                            jne     .170                                            ;no, branch
  3857                                  ;
  3858                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3859                                  ;
  3860 00000DAB 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3861 00000DAE 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3862                                  ;
  3863                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3864                                  ;
  3865 00000DB1 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3866 00000DB4 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3867 00000DB7 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3868 00000DB9 7405                                            jz      .110                                            ;no, branch
  3869 00000DBB 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3870 00000DBE EB03                                            jmp     .120                                            ;continue
  3871 00000DC0 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3872                                  ;-----------------------------------------------------------------------------------------------------------------------
  3873                                  ;
  3874                                  ;       Unlink the following contiguous FREE memory block
  3875                                  ;
  3876                                  ;-----------------------------------------------------------------------------------------------------------------------
  3877                                  ;
  3878                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3879                                  ;
  3880 00000DC3 57                      .120                    push    edi                                             ;save this block
  3881 00000DC4 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3882 00000DC6 51                                              push    ecx                                             ;save next contiguous block
  3883                                  ;
  3884                                  ;       Address the preceding and following USER memory blocks
  3885                                  ;
  3886 00000DC7 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3887 00000DCA 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3888                                  ;
  3889                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3890                                  ;       block pointer.
  3891                                  ;
  3892 00000DCD 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3893 00000DCF 7405                                            jz      .130                                            ;no, branch
  3894 00000DD1 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3895 00000DD4 EB03                                            jmp     .140                                            ;branch
  3896 00000DD6 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3897                                  ;
  3898                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3899                                  ;       pointer.
  3900                                  ;
  3901 00000DD9 E305                    .140                    jecxz   .150                                            ;branch if no next block
  3902 00000DDB 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3903 00000DDE EB03                                            jmp     .160                                            ;continue
  3904 00000DE0 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3905                                  ;
  3906                                  ;       Clear next contiguous block's header
  3907                                  ;
  3908 00000DE3 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3909 00000DE4 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3910 00000DE9 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3911 00000DEB F3AA                                            rep     stosb                                           ;clear memory header
  3912 00000DED 5F                                              pop     edi                                             ;this block's pointer
  3913                                  ;-----------------------------------------------------------------------------------------------------------------------
  3914                                  ;
  3915                                  ;       Insert the final FREE block back into the block chain.
  3916                                  ;
  3917                                  ;-----------------------------------------------------------------------------------------------------------------------
  3918                                  ;
  3919                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3920                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3921                                  ;       all are smaller in size.
  3922                                  ;
  3923 00000DEE 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3924 00000DF1 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3925 00000DF4 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3926 00000DF6 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3927 00000DF9 7205                                            jb      .190                                            ;yes, branch
  3928 00000DFB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3929 00000DFE EBF4                                            jmp     .180                                            ;continue
  3930                                  ;
  3931                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3932                                  ;       larger free block. Update the next block's previous block pointer.
  3933                                  ;
  3934 00000E00 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3935 00000E03 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3936 00000E06 E308                                            jecxz   .200                                            ;branch if no block found
  3937 00000E08 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3938 00000E0B 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3939 00000E0E EB03                                            jmp     .210                                            ;continue
  3940 00000E10 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3941                                  ;
  3942                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3943                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3944                                  ;       next pointer.
  3945                                  ;
  3946 00000E13 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3947 00000E16 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3948 00000E18 7405                                            jz      .220                                            ;no, branch
  3949 00000E1A 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3950 00000E1D EB03                                            jmp     .230                                            ;continue
  3951 00000E1F 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3952                                  ;
  3953                                  ;       The memory free has completed.
  3954                                  ;
  3955 00000E22 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3956                                  ;
  3957                                  ;       Restore and return.
  3958                                  ;
  3959 00000E24 07                      .240                    pop     es                                              ;restore non-volatile regs
  3960 00000E25 1F                                              pop     ds                                              ;
  3961 00000E26 5F                                              pop     edi                                             ;
  3962 00000E27 5E                                              pop     esi                                             ;
  3963 00000E28 59                                              pop     ecx                                             ;
  3964 00000E29 5B                                              pop     ebx                                             ;
  3965 00000E2A C3                                              ret                                                     ;return
  3966                                  ;=======================================================================================================================
  3967                                  ;
  3968                                  ;       String Helper Routines
  3969                                  ;
  3970                                  ;       CompareMemory
  3971                                  ;       UpperCaseString
  3972                                  ;
  3973                                  ;=======================================================================================================================
  3974                                  ;-----------------------------------------------------------------------------------------------------------------------
  3975                                  ;
  3976                                  ;       Routine:        CompareMemory
  3977                                  ;
  3978                                  ;       Description:    This routine compares two byte arrays.
  3979                                  ;
  3980                                  ;       In:             DS:EDX  first source address
  3981                                  ;                       DS:EBX  second source address
  3982                                  ;                       ECX     comparison length
  3983                                  ;
  3984                                  ;       Out:            EDX     first source address
  3985                                  ;                       EBX     second source address
  3986                                  ;                       ECX     0       array 1 = array 2
  3987                                  ;                               <0      array 1 < array 2
  3988                                  ;                               >0      array 1 > array 2
  3989                                  ;
  3990                                  ;-----------------------------------------------------------------------------------------------------------------------
  3991 00000E2B 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3992 00000E2C 57                                              push    edi                                             ;
  3993 00000E2D 06                                              push    es                                              ;
  3994 00000E2E 1E                                              push    ds                                              ;copy DS
  3995 00000E2F 07                                              pop     es                                              ;... to ES
  3996 00000E30 89D6                                            mov     esi,edx                                         ;first source address
  3997 00000E32 89DF                                            mov     edi,ebx                                         ;second source address
  3998 00000E34 FC                                              cld                                                     ;forward strings
  3999 00000E35 F3A6                                            rep     cmpsb                                           ;compare bytes
  4000 00000E37 B000                                            mov     al,0                                            ;default result
  4001 00000E39 7406                                            jz      .10                                             ;branch if arrays equal
  4002 00000E3B B001                                            mov     al,1                                            ;positive result
  4003 00000E3D 7302                                            jnc     .10                                             ;branch if target > source
  4004 00000E3F B0FF                                            mov     al,-1                                           ;negative result
  4005 00000E41 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  4006 00000E44 07                                              pop     es                                              ;restore non-volatile regs
  4007 00000E45 5F                                              pop     edi                                             ;
  4008 00000E46 5E                                              pop     esi                                             ;
  4009 00000E47 C3                                              ret                                                     ;return
  4010                                  ;-----------------------------------------------------------------------------------------------------------------------
  4011                                  ;
  4012                                  ;       Routine:        UpperCaseString
  4013                                  ;
  4014                                  ;       Description:    This routine places all characters in the given string to upper case.
  4015                                  ;
  4016                                  ;       In:             DS:EDX  string address
  4017                                  ;
  4018                                  ;       Out:            EDX     string address
  4019                                  ;
  4020                                  ;-----------------------------------------------------------------------------------------------------------------------
  4021 00000E48 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  4022 00000E49 89D6                                            mov     esi,edx                                         ;string address
  4023 00000E4B FC                                              cld                                                     ;forward strings
  4024 00000E4C AC                      .10                     lodsb                                                   ;string character
  4025 00000E4D 84C0                                            test    al,al                                           ;null?
  4026 00000E4F 740F                                            jz      .20                                             ;yes, skip ahead
  4027 00000E51 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4028 00000E53 72F7                                            jb      .10                                             ;no, continue
  4029 00000E55 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4030 00000E57 77F3                                            ja      .10                                             ;no, continue
  4031 00000E59 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  4032 00000E5B 8846FF                                          mov     [esi-1],al                                      ;upper character
  4033 00000E5E EBEC                                            jmp     .10                                             ;continue
  4034 00000E60 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4035 00000E61 C3                                              ret                                                     ;return
  4036                                  ;=======================================================================================================================
  4037                                  ;
  4038                                  ;       Console Helper Routines
  4039                                  ;
  4040                                  ;       FirstConsoleColumn
  4041                                  ;       GetConsoleChar
  4042                                  ;       GetConsoleString
  4043                                  ;       NextConsoleColumn
  4044                                  ;       NextConsoleRow
  4045                                  ;       PreviousConsoleColumn
  4046                                  ;       PutConsoleChar
  4047                                  ;       PutConsoleHexByte
  4048                                  ;       PutConsoleHexDword
  4049                                  ;       PutConsoleHexWord
  4050                                  ;       PutConsoleOIAChar
  4051                                  ;       PutConsoleOIAShift
  4052                                  ;       PutConsoleString
  4053                                  ;       Yield
  4054                                  ;
  4055                                  ;=======================================================================================================================
  4056                                  ;-----------------------------------------------------------------------------------------------------------------------
  4057                                  ;
  4058                                  ;       Routine:        FirstConsoleColumn
  4059                                  ;
  4060                                  ;       Description:    This routine resets the console column to start of the row.
  4061                                  ;
  4062                                  ;       In:             DS      OS data selector
  4063                                  ;
  4064                                  ;-----------------------------------------------------------------------------------------------------------------------
  4065 00000E62 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  4066 00000E64 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4067 00000E69 C3                                              ret                                                     ;return
  4068                                  ;-----------------------------------------------------------------------------------------------------------------------
  4069                                  ;
  4070                                  ;       Routine:        GetConsoleChar
  4071                                  ;
  4072                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4073                                  ;
  4074                                  ;       Out:            AL      ASCII character code
  4075                                  ;                       AH      keyboard scan code
  4076                                  ;
  4077                                  ;-----------------------------------------------------------------------------------------------------------------------
  4078 00000E6A E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4079 00000E6F E87B030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  4080 00000E74 09C0                                            or      eax,eax                                         ;do we have a message?
  4081 00000E76 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  4082 00000E78 50                                              push    eax                                             ;save key codes
  4083 00000E79 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  4084 00000E7E 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4085 00000E83 58                                              pop     eax                                             ;restore key codes
  4086 00000E84 75E9                                            jne     GetConsoleChar                                  ;no, try again
  4087 00000E86 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4088 00000E8B C3                                              ret                                                     ;return
  4089                                  ;-----------------------------------------------------------------------------------------------------------------------
  4090                                  ;
  4091                                  ;       Routine:        GetConsoleString
  4092                                  ;
  4093                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4094                                  ;
  4095                                  ;       In:             DS:EDX  target buffer address
  4096                                  ;                       ECX     maximum number of characters to accept
  4097                                  ;                       BH      echo to terminal
  4098                                  ;                       BL      terminating character
  4099                                  ;
  4100                                  ;-----------------------------------------------------------------------------------------------------------------------
  4101 00000E8C 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4102 00000E8D 56                                              push    esi                                             ;
  4103 00000E8E 57                                              push    edi                                             ;
  4104 00000E8F 06                                              push    es                                              ;
  4105 00000E90 1E                                              push    ds                                              ;load data segment selector ...
  4106 00000E91 07                                              pop     es                                              ;... into extra segment register
  4107 00000E92 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4108 00000E94 51                                              push    ecx                                             ;save maximum characters
  4109 00000E95 30C0                                            xor     al,al                                           ;zero register
  4110 00000E97 FC                                              cld                                                     ;forward strings
  4111 00000E98 F3AA                                            rep     stosb                                           ;zero fill buffer
  4112 00000E9A 59                                              pop     ecx                                             ;maximum characters
  4113 00000E9B 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4114 00000E9D 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4115 00000E9F E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4116 00000EA1 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4117 00000EA6 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4118 00000EA8 7445                                            je      .50                                             ;yes, exit
  4119 00000EAA 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4120 00000EAC 7521                                            jne     .30                                             ;no, skip ahead
  4121 00000EAE 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4122 00000EB0 74EF                                            je      .20                                             ;yes, get next character
  4123 00000EB2 4F                                              dec     edi                                             ;backup target pointer
  4124 00000EB3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4125 00000EB6 41                                              inc     ecx                                             ;increment remaining chars
  4126 00000EB7 F6C701                                          test    bh,1                                            ;echo to console?
  4127 00000EBA 74E5                                            jz      .20                                             ;no, get next character
  4128 00000EBC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4129 00000EC1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4130 00000EC3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4131 00000EC8 E837040000                                      call    PlaceCursor                                     ;position the cursor
  4132 00000ECD EBD2                                            jmp     .20                                             ;get next character
  4133 00000ECF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4134 00000ED1 72CE                                            jb      .20                                             ;no, get another character
  4135 00000ED3 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4136 00000ED5 77CA                                            ja      .20                                             ;no, get another character
  4137 00000ED7 AA                                              stosb                                                   ;store character in buffer
  4138 00000ED8 F6C701                                          test    bh,1                                            ;echo to console?
  4139 00000EDB 740F                                            jz      .40                                             ;no, skip ahead
  4140 00000EDD E877000000                                      call    PutConsoleChar                                  ;write character to console
  4141 00000EE2 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4142 00000EE7 E818040000                                      call    PlaceCursor                                     ;position the cursor
  4143 00000EEC 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4144 00000EED EBB0                                            jmp     .10                                             ;next
  4145 00000EEF 30C0                    .50                     xor     al,al                                           ;null
  4146 00000EF1 AA                                              stosb                                                   ;terminate buffer
  4147 00000EF2 07                                              pop     es                                              ;restore non-volatile regs
  4148 00000EF3 5F                                              pop     edi                                             ;
  4149 00000EF4 5E                                              pop     esi                                             ;
  4150 00000EF5 59                                              pop     ecx                                             ;
  4151 00000EF6 C3                                              ret                                                     ;return
  4152                                  ;-----------------------------------------------------------------------------------------------------------------------
  4153                                  ;
  4154                                  ;       Routine:        NextConsoleColumn
  4155                                  ;
  4156                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4157                                  ;                       incremented if the end of the current row is reached.
  4158                                  ;
  4159                                  ;       In:             DS      OS data selector
  4160                                  ;
  4161                                  ;-----------------------------------------------------------------------------------------------------------------------
  4162 00000EF7 A014080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4163 00000EFC FEC0                                            inc     al                                              ;increment column
  4164 00000EFE A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4165 00000F03 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4166 00000F05 720A                                            jb      .10                                             ;no, skip ahead
  4167 00000F07 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4168 00000F0C E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4169 00000F11 C3                      .10                     ret                                                     ;return
  4170                                  ;-----------------------------------------------------------------------------------------------------------------------
  4171                                  ;
  4172                                  ;       Routine:        NextConsoleRow
  4173                                  ;
  4174                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4175                                  ;
  4176                                  ;       In:             DS      OS data selector
  4177                                  ;
  4178                                  ;-----------------------------------------------------------------------------------------------------------------------
  4179 00000F12 A015080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4180 00000F17 FEC0                                            inc     al                                              ;increment row
  4181 00000F19 A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4182 00000F1E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4183 00000F20 7211                                            jb      .10                                             ;no, skip ahead
  4184 00000F22 E860030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4185 00000F27 A015080000                                      mov     al,[wbConsoleRow]                               ;row
  4186 00000F2C FEC8                                            dec     al                                              ;decrement row
  4187 00000F2E A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4188 00000F33 C3                      .10                     ret                                                     ;return
  4189                                  ;-----------------------------------------------------------------------------------------------------------------------
  4190                                  ;
  4191                                  ;       Routine:        PreviousConsoleColumn
  4192                                  ;
  4193                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4194                                  ;                       the column is set to the last position in the row and the row is decremented.
  4195                                  ;
  4196                                  ;       In:             DS      OS data selector
  4197                                  ;
  4198                                  ;-----------------------------------------------------------------------------------------------------------------------
  4199 00000F34 A014080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4200 00000F39 08C0                                            or      al,al                                           ;start of row?
  4201 00000F3B 7514                                            jnz     .10                                             ;no, skip ahead
  4202 00000F3D 8A2515080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4203 00000F43 08E4                                            or      ah,ah                                           ;top of screen?
  4204 00000F45 7411                                            jz      .20                                             ;yes, exit with no change
  4205 00000F47 FECC                                            dec     ah                                              ;decrement row
  4206 00000F49 882515080000                                    mov     [wbConsoleRow],ah                               ;save row
  4207 00000F4F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4208 00000F51 FEC8                    .10                     dec     al                                              ;decrement column
  4209 00000F53 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4210 00000F58 C3                      .20                     ret                                                     ;return
  4211                                  ;-----------------------------------------------------------------------------------------------------------------------
  4212                                  ;
  4213                                  ;       Routine:        PutConsoleChar
  4214                                  ;
  4215                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4216                                  ;
  4217                                  ;       In:             AL      ASCII character
  4218                                  ;                       DS      OS data selector
  4219                                  ;
  4220                                  ;-----------------------------------------------------------------------------------------------------------------------
  4221 00000F59 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4222 00000F5A 06                                              push    es                                              ;
  4223 00000F5B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4224 00000F5D 07                                              pop     es                                              ;... into extra segment reg
  4225 00000F5E 8A0D14080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4226 00000F64 8A2D15080000                                    mov     ch,[wbConsoleRow]                               ;row
  4227 00000F6A E844030000                                      call    SetConsoleChar                                  ;put character at row, column
  4228 00000F6F 07                                              pop     es                                              ;restore non-volatile regs
  4229 00000F70 59                                              pop     ecx                                             ;
  4230 00000F71 C3                                              ret                                                     ;return
  4231                                  ;-----------------------------------------------------------------------------------------------------------------------
  4232                                  ;
  4233                                  ;       Routine:        PutConsoleHexByte
  4234                                  ;
  4235                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4236                                  ;
  4237                                  ;       In:             AL      byte value
  4238                                  ;                       CL      column
  4239                                  ;                       CH      row
  4240                                  ;                       DS      OS data selector
  4241                                  ;                       ES      CGA selector
  4242                                  ;
  4243                                  ;-----------------------------------------------------------------------------------------------------------------------
  4244 00000F72 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4245 00000F73 88C3                                            mov     bl,al                                           ;save byte value
  4246 00000F75 C0E804                                          shr     al,4                                            ;hi-order nybble
  4247 00000F78 0C30                                            or      al,030h                                         ;apply ASCII zone
  4248 00000F7A 3C3A                                            cmp     al,03ah                                         ;numeric?
  4249 00000F7C 7202                                            jb      .10                                             ;yes, skip ahead
  4250 00000F7E 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4251 00000F80 E82E030000              .10                     call    SetConsoleChar                                  ;display ASCII character
  4252 00000F85 88D8                                            mov     al,bl                                           ;byte value
  4253 00000F87 240F                                            and     al,0fh                                          ;lo-order nybble
  4254 00000F89 0C30                                            or      al,30h                                          ;apply ASCII zone
  4255 00000F8B 3C3A                                            cmp     al,03ah                                         ;numeric?
  4256 00000F8D 7202                                            jb      .20                                             ;yes, skip ahead
  4257 00000F8F 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4258 00000F91 E81D030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4259 00000F96 5B                                              pop     ebx                                             ;restore non-volatile regs
  4260 00000F97 C3                                              ret                                                     ;return
  4261                                  ;-----------------------------------------------------------------------------------------------------------------------
  4262                                  ;
  4263                                  ;       Routine:        PutConsoleHexDword
  4264                                  ;
  4265                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4266                                  ;
  4267                                  ;       In:             EAX     value
  4268                                  ;                       CL      column
  4269                                  ;                       CH      row
  4270                                  ;                       DS      OS data selector
  4271                                  ;                       ES      CGA selector
  4272                                  ;
  4273                                  ;-----------------------------------------------------------------------------------------------------------------------
  4274 00000F98 50                      PutConsoleHexDword      push    eax
  4275 00000F99 C1E810                                          shr     eax,16
  4276 00000F9C E807000000                                      call    PutConsoleHexWord
  4277 00000FA1 58                                              pop     eax
  4278 00000FA2 E801000000                                      call    PutConsoleHexWord
  4279 00000FA7 C3                                              ret
  4280                                  ;-----------------------------------------------------------------------------------------------------------------------
  4281                                  ;
  4282                                  ;       Routine:        PutConsoleHexWord
  4283                                  ;
  4284                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4285                                  ;
  4286                                  ;       In:             EAX     value
  4287                                  ;                       CL      column
  4288                                  ;                       CH      row
  4289                                  ;                       DS      OS data selector
  4290                                  ;                       ES      CGA selector
  4291                                  ;
  4292                                  ;-----------------------------------------------------------------------------------------------------------------------
  4293 00000FA8 50                      PutConsoleHexWord       push    eax
  4294 00000FA9 C1E808                                          shr     eax,8
  4295 00000FAC E8C1FFFFFF                                      call    PutConsoleHexByte
  4296 00000FB1 58                                              pop     eax
  4297 00000FB2 E8BBFFFFFF                                      call    PutConsoleHexByte
  4298 00000FB7 C3                                              ret
  4299                                  ;-----------------------------------------------------------------------------------------------------------------------
  4300                                  ;
  4301                                  ;       Routine:        PutConsoleOIAChar
  4302                                  ;
  4303                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4304                                  ;
  4305                                  ;       In:             DS      OS data selector
  4306                                  ;
  4307                                  ;-----------------------------------------------------------------------------------------------------------------------
  4308 00000FB8 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4309 00000FB9 51                                              push    ecx                                             ;
  4310 00000FBA 56                                              push    esi                                             ;
  4311 00000FBB 1E                                              push    ds                                              ;
  4312 00000FBC 06                                              push    es                                              ;
  4313 00000FBD 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4314 00000FBF 1F                                              pop     ds                                              ;... into data segment register
  4315 00000FC0 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4316 00000FC2 07                                              pop     es                                              ;... into extra segment register
  4317 00000FC3 BE19080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4318 00000FC8 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4319 00000FCA B300                                            mov     bl,0                                            ;starting column
  4320 00000FCC B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4321 00000FD1 51                      .10                     push    ecx                                             ;save remaining count
  4322 00000FD2 89D9                                            mov     ecx,ebx                                         ;row, column
  4323 00000FD4 AC                                              lodsb                                                   ;read scan code
  4324 00000FD5 08C0                                            or      al,al                                           ;scan code present?
  4325 00000FD7 7407                                            jz      .20                                             ;no, skip ahead
  4326 00000FD9 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4327 00000FDE EB0E                                            jmp     .30                                             ;continue
  4328 00000FE0 B020                    .20                     mov     al,' '                                          ;ASCII space
  4329 00000FE2 E8CC020000                                      call    SetConsoleChar                                  ;display space
  4330 00000FE7 B020                                            mov     al,' '                                          ;ASCII space
  4331 00000FE9 E8C5020000                                      call    SetConsoleChar                                  ;display space
  4332 00000FEE 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4333 00000FF1 59                                              pop     ecx                                             ;restore remaining
  4334 00000FF2 E2DD                                            loop    .10                                             ;next code
  4335 00000FF4 A01F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4336 00000FF9 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4337 00000FFB 720D                                            jb      .40                                             ;no, skip ahead
  4338 00000FFD 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4339 00000FFF 7709                                            ja      .40                                             ;no, skip ahead
  4340 00001001 88FD                                            mov     ch,bh                                           ;OIA row
  4341 00001003 B128                                            mov     cl,40                                           ;character display column
  4342 00001005 E8A9020000                                      call    SetConsoleChar                                  ;display ASCII character
  4343 0000100A 07                      .40                     pop     es                                              ;restore non-volatile regs
  4344 0000100B 1F                                              pop     ds                                              ;
  4345 0000100C 5E                                              pop     esi                                             ;
  4346 0000100D 59                                              pop     ecx                                             ;
  4347 0000100E 5B                                              pop     ebx                                             ;
  4348 0000100F C3                                              ret                                                     ;return
  4349                                  ;-----------------------------------------------------------------------------------------------------------------------
  4350                                  ;
  4351                                  ;       Routine:        PutConsoleOIAShift
  4352                                  ;
  4353                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4354                                  ;
  4355                                  ;       In:             BL      shift flags
  4356                                  ;                       BH      lock flags
  4357                                  ;                       DS      OS data selector
  4358                                  ;
  4359                                  ;-----------------------------------------------------------------------------------------------------------------------
  4360 00001010 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4361 00001011 06                                              push    es                                              ;
  4362 00001012 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4363 00001014 07                                              pop     es                                              ;... into ES register
  4364 00001015 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4365 00001017 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4366 00001019 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4367 0000101C 7402                                            jz      .10                                             ;no, skip ahead
  4368 0000101E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4369 00001020 B10E                    .10                     mov     cl,14                                           ;indicator column
  4370 00001022 E88C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4371 00001027 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4372 00001029 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4373 0000102C 7402                                            jz      .20                                             ;no, skip ahead
  4374 0000102E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4375 00001030 B140                    .20                     mov     cl,64                                           ;indicator column
  4376 00001032 E87C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4377 00001037 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4378 00001039 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4379 0000103C 7402                                            jz      .30                                             ;no, skip ahead
  4380 0000103E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4381 00001040 B10F                    .30                     mov     cl,15                                           ;indicator column
  4382 00001042 E86C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4383 00001047 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4384 00001049 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4385 0000104C 7402                                            jz      .40                                             ;no, skip ahead
  4386 0000104E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4387 00001050 B13F                    .40                     mov     cl,63                                           ;indicator column
  4388 00001052 E85C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4389 00001057 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4390 00001059 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4391 0000105C 7402                                            jz      .50                                             ;no, skip ahead
  4392 0000105E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4393 00001060 B110                    .50                     mov     cl,16                                           ;indicator column
  4394 00001062 E84C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4395 00001067 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4396 00001069 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4397 0000106C 7402                                            jz      .60                                             ;no, skip ahead
  4398 0000106E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4399 00001070 B13E                    .60                     mov     cl,62                                           ;indicator column
  4400 00001072 E83C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4401 00001077 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4402 00001079 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4403 0000107C 7402                                            jz      .70                                             ;no, skip ahead
  4404 0000107E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4405 00001080 B14E                    .70                     mov     cl,78                                           ;indicator column
  4406 00001082 E82C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4407 00001087 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4408 00001089 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4409 0000108C 7402                                            jz      .80                                             ;no, skip ahead
  4410 0000108E B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4411 00001090 B14D                    .80                     mov     cl,77                                           ;indicator column
  4412 00001092 E81C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4413 00001097 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4414 00001099 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4415 0000109C 7402                                            jz      .90                                             ;no, skip ahead
  4416 0000109E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4417 000010A0 B14C                    .90                     mov     cl,76                                           ;indicator column
  4418 000010A2 E80C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4419 000010A7 07                                              pop     es                                              ;restore non-volatile regs
  4420 000010A8 59                                              pop     ecx                                             ;
  4421 000010A9 C3                                              ret                                                     ;return
  4422                                  ;-----------------------------------------------------------------------------------------------------------------------
  4423                                  ;
  4424                                  ;       Routine:        PutConsoleString
  4425                                  ;
  4426                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4427                                  ;                       console position as needed.
  4428                                  ;
  4429                                  ;       In:             EDX     source address
  4430                                  ;                       DS      OS data selector
  4431                                  ;
  4432                                  ;-----------------------------------------------------------------------------------------------------------------------
  4433 000010AA 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4434 000010AB 89D6                                            mov     esi,edx                                         ;source address
  4435 000010AD FC                                              cld                                                     ;forward strings
  4436 000010AE AC                      .10                     lodsb                                                   ;ASCII character
  4437 000010AF 08C0                                            or      al,al                                           ;end of string?
  4438 000010B1 7422                                            jz      .40                                             ;yes, skip ahead
  4439 000010B3 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4440 000010B5 7507                                            jne     .20                                             ;no, skip ahead
  4441 000010B7 E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4442 000010BC EBF0                                            jmp     .10                                             ;next character
  4443 000010BE 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4444 000010C0 7507                                            jne     .30                                             ;no, skip ahead
  4445 000010C2 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4446 000010C7 EBE5                                            jmp     .10                                             ;next character
  4447 000010C9 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4448 000010CE E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4449 000010D3 EBD9                                            jmp     .10                                             ;next character
  4450 000010D5 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4451 000010D6 C3                                              ret                                                     ;return
  4452                                  ;-----------------------------------------------------------------------------------------------------------------------
  4453                                  ;
  4454                                  ;       Routine:        Yield
  4455                                  ;
  4456                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4457                                  ;
  4458                                  ;-----------------------------------------------------------------------------------------------------------------------
  4459 000010D7 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4460 000010D8 F4                                              hlt                                                     ;halt until external interrupt
  4461 000010D9 C3                                              ret                                                     ;return
  4462                                  ;=======================================================================================================================
  4463                                  ;
  4464                                  ;       Data-Type Conversion Helper Routines
  4465                                  ;
  4466                                  ;       DecimalToUnsigned
  4467                                  ;       HexadecimalToUnsigned
  4468                                  ;       UnsignedToDecimalString
  4469                                  ;       UnsignedToHexadecimal
  4470                                  ;
  4471                                  ;=======================================================================================================================
  4472                                  ;-----------------------------------------------------------------------------------------------------------------------
  4473                                  ;
  4474                                  ;       Routine:        DecimalToUnsigned
  4475                                  ;
  4476                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4477                                  ;
  4478                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4479                                  ;
  4480                                  ;       Output:         EAX     unsigned integer value
  4481                                  ;
  4482                                  ;-----------------------------------------------------------------------------------------------------------------------
  4483 000010DA 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4484 000010DB 89D6                                            mov     esi,edx                                         ;source address
  4485 000010DD 31D2                                            xor     edx,edx                                         ;zero total
  4486 000010DF AC                      .10                     lodsb                                                   ;source byte
  4487 000010E0 3C2C                                            cmp     al,','                                          ;comma?
  4488 000010E2 74FB                                            je      .10                                             ;yes, ignore
  4489 000010E4 84C0                                            test    al,al                                           ;end of string?
  4490 000010E6 7421                                            jz      .30                                             ;yes, done
  4491 000010E8 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4492 000010EA 741D                                            je      .30                                             ;yes, done
  4493 000010EC 3C30                                            cmp     al,'0'                                          ;numeral?
  4494 000010EE 7217                                            jb      .20                                             ;no, invalid string
  4495 000010F0 3C39                                            cmp     al,'9'                                          ;numeral?
  4496 000010F2 7713                                            ja      .20                                             ;no, invalid string
  4497 000010F4 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4498 000010F6 50                                              push    eax                                             ;save numeral
  4499 000010F7 D1E2                                            shl     edx,1                                           ;total * 2
  4500 000010F9 89D0                                            mov     eax,edx                                         ;total * 2
  4501 000010FB C1E202                                          shl     edx,2                                           ;total * 8
  4502 000010FE 01C2                                            add     edx,eax                                         ;total * 10
  4503 00001100 58                                              pop     eax                                             ;restore numeral
  4504 00001101 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4505 00001103 31C0                                            xor     eax,eax                                         ;zero register
  4506 00001105 EBD8                                            jmp     .10                                             ;next
  4507 00001107 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4508 00001109 89D0                    .30                     mov     eax,edx                                         ;result
  4509 0000110B 5E                                              pop     esi                                             ;restore non-volatile regs
  4510 0000110C C3                                              ret                                                     ;return
  4511                                  ;-----------------------------------------------------------------------------------------------------------------------
  4512                                  ;
  4513                                  ;       Routine:        HexadecimalToUnsigned
  4514                                  ;
  4515                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4516                                  ;
  4517                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4518                                  ;
  4519                                  ;       Output:         EAX     unsigned integer value
  4520                                  ;
  4521                                  ;-----------------------------------------------------------------------------------------------------------------------
  4522 0000110D 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4523 0000110E 89D6                                            mov     esi,edx                                         ;source address
  4524 00001110 31D2                                            xor     edx,edx                                         ;zero register
  4525 00001112 AC                      .10                     lodsb                                                   ;source byte
  4526 00001113 84C0                                            test    al,al                                           ;end of string?
  4527 00001115 7410                                            jz      .30                                             ;yes, branch
  4528 00001117 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4529 00001119 7602                                            jna     .20                                             ;no, skip ahead
  4530 0000111B 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4531 0000111D 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  4532 00001120 C1E204                                          shl     edx,4                                           ;previous total x 16
  4533 00001123 01C2                                            add     edx,eax                                         ;add prior value x 16
  4534 00001125 EBEB                                            jmp     .10                                             ;next
  4535 00001127 89D0                    .30                     mov     eax,edx                                         ;result
  4536 00001129 5E                                              pop     esi                                             ;restore non-volatile regs
  4537 0000112A C3                                              ret                                                     ;return
  4538                                  ;-----------------------------------------------------------------------------------------------------------------------
  4539                                  ;
  4540                                  ;       Routine:        UnsignedToDecimalString
  4541                                  ;
  4542                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4543                                  ;
  4544                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4545                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4546                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4547                                  ;                       ECX     32-bit binary
  4548                                  ;                       DS:EDX  output buffer address
  4549                                  ;
  4550                                  ;-----------------------------------------------------------------------------------------------------------------------
  4551 0000112B 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4552 0000112C 51                                              push    ecx                                             ;
  4553 0000112D 57                                              push    edi                                             ;
  4554 0000112E 06                                              push    es                                              ;
  4555 0000112F 1E                                              push    ds                                              ;load data selector
  4556 00001130 07                                              pop     es                                              ;... into extra segment reg
  4557 00001131 89D7                                            mov     edi,edx                                         ;output buffer address
  4558 00001133 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4559 00001136 89CA                                            mov     edx,ecx                                         ;binary
  4560 00001138 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4561 0000113D E871000000                                      call    .30                                             ;divide and store
  4562 00001142 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4563 00001147 E855000000                                      call    .10                                             ;divide and store
  4564 0000114C B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4565 00001151 E85D000000                                      call    .30                                             ;divide and store
  4566 00001156 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4567 0000115B E853000000                                      call    .30                                             ;divide and store
  4568 00001160 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4569 00001165 E837000000                                      call    .10                                             ;divide and store
  4570 0000116A B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4571 0000116F E83F000000                                      call    .30                                             ;divide and store
  4572 00001174 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4573 00001179 E835000000                                      call    .30                                             ;divide and store
  4574 0000117E B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4575 00001183 E819000000                                      call    .10                                             ;divide and store
  4576 00001188 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4577 0000118D E821000000                                      call    .30                                             ;divide and store
  4578 00001192 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4579 00001194 E827000000                                      call    .40                                             ;store
  4580 00001199 30C0                                            xor     al,al                                           ;null terminator
  4581 0000119B AA                                              stosb
  4582 0000119C 07                                              pop     es                                              ;restore non-volatile regs
  4583 0000119D 5F                                              pop     edi                                             ;
  4584 0000119E 59                                              pop     ecx                                             ;
  4585 0000119F 5B                                              pop     ebx                                             ;
  4586 000011A0 C3                                              ret                                                     ;return
  4587 000011A1 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4588 000011A4 740D                                            jz      .30                                             ;no, branch
  4589 000011A6 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4590 000011A9 7405                                            jz      .20                                             ;no, store delim
  4591 000011AB F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4592 000011AE 7403                                            jz      .30                                             ;no, branch
  4593 000011B0 B02C                    .20                     mov     al,','                                          ;delimiter
  4594 000011B2 AA                                              stosb                                                   ;store delimiter
  4595 000011B3 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4596 000011B5 31D2                                            xor     edx,edx                                         ;zero hi-order
  4597 000011B7 F7F1                                            div     ecx                                             ;divide by power of 10
  4598 000011B9 84C0                                            test    al,al                                           ;zero?
  4599 000011BB 7407                                            jz      .50                                             ;yes, branch
  4600 000011BD 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4601 000011C0 0C30                    .40                     or      al,30h                                          ;ASCII zone
  4602 000011C2 AA                                              stosb                                                   ;store digit
  4603 000011C3 C3                                              ret                                                     ;return
  4604 000011C4 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4605 000011C7 74F7                                            jz      .40                                             ;no, store and continue
  4606 000011C9 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4607 000011CC 75F2                                            jnz     .40                                             ;yes, store and continue
  4608 000011CE C3                                              ret                                                     ;return
  4609                                  ;-----------------------------------------------------------------------------------------------------------------------
  4610                                  ;
  4611                                  ;       Routine:        UnsignedToHexadecimal
  4612                                  ;
  4613                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4614                                  ;
  4615                                  ;       Input:          DS:EDX  output buffer address
  4616                                  ;                       ECX     32-bit binary
  4617                                  ;
  4618                                  ;-----------------------------------------------------------------------------------------------------------------------
  4619 000011CF 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4620 000011D0 89D7                                            mov     edi,edx                                         ;output buffer address
  4621 000011D2 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4622 000011D4 31C9                                            xor     ecx,ecx                                         ;zero register
  4623 000011D6 B108                                            mov     cl,8                                            ;nybble count
  4624 000011D8 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4625 000011DB 88D0                                            mov     al,dl                                           ;????bbbb
  4626 000011DD 240F                                            and     al,0fh                                          ;mask out bits 4-7
  4627 000011DF 0C30                                            or      al,30h                                          ;mask in ascii zone
  4628 000011E1 3C3A                                            cmp     al,3ah                                          ;A through F?
  4629 000011E3 7202                                            jb      .20                                             ;no, skip ahead
  4630 000011E5 0407                                            add     al,7                                            ;41h through 46h
  4631 000011E7 AA                      .20                     stosb                                                   ;store hexnum
  4632 000011E8 E2EE                                            loop    .10                                             ;next nybble
  4633 000011EA 30C0                                            xor     al,al                                           ;zero reg
  4634 000011EC AA                                              stosb                                                   ;null terminate
  4635 000011ED 5F                                              pop     edi                                             ;restore non-volatile regs
  4636 000011EE C3                                              ret                                                     ;return
  4637                                  ;=======================================================================================================================
  4638                                  ;
  4639                                  ;       Message Queue Helper Routines
  4640                                  ;
  4641                                  ;       GetMessage
  4642                                  ;       PutMessage
  4643                                  ;
  4644                                  ;=======================================================================================================================
  4645                                  ;-----------------------------------------------------------------------------------------------------------------------
  4646                                  ;
  4647                                  ;       Routine:        GetMessage
  4648                                  ;
  4649                                  ;       Description:    This routine reads and removes a message from the message queue.
  4650                                  ;
  4651                                  ;       Out:            EAX     lo-order message data
  4652                                  ;                       EDX     hi-order message data
  4653                                  ;
  4654                                  ;                       CY      0 = message read
  4655                                  ;                               1 = no message to read
  4656                                  ;
  4657                                  ;-----------------------------------------------------------------------------------------------------------------------
  4658 000011EF 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4659 000011F0 51                                              push    ecx                                             ;
  4660 000011F1 1E                                              push    ds                                              ;
  4661 000011F2 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4662 000011F4 1F                                              pop     ds                                              ;... into data segment register
  4663 000011F5 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4664 000011FB 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4665 000011FD 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4666 00001200 09D0                                            or      eax,edx                                         ;is queue empty?
  4667 00001202 F9                                              stc                                                     ;assume queue is emtpy
  4668 00001203 741B                                            jz      .20                                             ;yes, skip ahead
  4669 00001205 31C9                                            xor     ecx,ecx                                         ;store zero
  4670 00001207 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4671 00001209 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4672 0000120C 83C308                                          add     ebx,8                                           ;next queue element
  4673 0000120F 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  4674 00001215 7502                                            jnz     .10                                             ;no, skip ahead
  4675 00001217 B308                                            mov     bl,8                                            ;reset to 1st entry
  4676 00001219 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4677 0000121F F8                                              clc                                                     ;indicate message read
  4678 00001220 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4679 00001221 59                                              pop     ecx                                             ;
  4680 00001222 5B                                              pop     ebx                                             ;
  4681 00001223 C3                                              ret                                                     ;return
  4682                                  ;-----------------------------------------------------------------------------------------------------------------------
  4683                                  ;
  4684                                  ;       Routine:        PutMessage
  4685                                  ;
  4686                                  ;       Description:    This routine adda a message to the message queue.
  4687                                  ;
  4688                                  ;       In:             ECX     hi-order data word
  4689                                  ;                       EDX     lo-order data word
  4690                                  ;
  4691                                  ;       Out:            CY      0 = success
  4692                                  ;                               1 = fail: queue is full
  4693                                  ;
  4694                                  ;-----------------------------------------------------------------------------------------------------------------------
  4695 00001224 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4696 00001225 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4697 00001227 1F                                              pop     ds                                              ;... into data segment register
  4698 00001228 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4699 0000122D 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4700 00001230 F9                                              stc                                                     ;assume failure
  4701 00001231 7517                                            jne     .20                                             ;yes, cannot store
  4702 00001233 8910                                            mov     [eax],edx                                       ;store lo-order data
  4703 00001235 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4704 00001238 83C008                                          add     eax,8                                           ;next queue element adr
  4705 0000123B 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  4706 00001240 7502                                            jnz     .10                                             ;no, skip ahead
  4707 00001242 B008                                            mov     al,8                                            ;reset to top of queue
  4708 00001244 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4709 00001249 F8                                              clc                                                     ;indicate success
  4710 0000124A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4711 0000124B C3                                              ret                                                     ;return
  4712                                  ;=======================================================================================================================
  4713                                  ;
  4714                                  ;       Memory-Mapped Video Routines
  4715                                  ;
  4716                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4717                                  ;
  4718                                  ;       ClearConsoleScreen
  4719                                  ;       ScrollConsoleRow
  4720                                  ;       SetConsoleChar
  4721                                  ;       SetConsoleString
  4722                                  ;
  4723                                  ;=======================================================================================================================
  4724                                  ;-----------------------------------------------------------------------------------------------------------------------
  4725                                  ;
  4726                                  ;       Routine:        ClearConsoleScreen
  4727                                  ;
  4728                                  ;       Description:    This routine clears the console (CGA) screen.
  4729                                  ;
  4730                                  ;-----------------------------------------------------------------------------------------------------------------------
  4731 0000124C 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4732 0000124D 57                                              push    edi                                             ;
  4733 0000124E 1E                                              push    ds                                              ;
  4734 0000124F 06                                              push    es                                              ;
  4735 00001250 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4736 00001252 1F                                              pop     ds                                              ;... into DS register
  4737 00001253 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4738 00001255 07                                              pop     es                                              ;... into ES register
  4739 00001256 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4740 0000125B B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4741 00001260 31FF                                            xor     edi,edi                                         ;target offset
  4742 00001262 FC                                              cld                                                     ;forward strings
  4743 00001263 F3AB                                            rep     stosd                                           ;reset screen body
  4744 00001265 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4745 0000126A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4746 0000126F F3AB                                            rep     stosd                                           ;reset OIA line
  4747 00001271 30C0                                            xor     al,al                                           ;zero register
  4748 00001273 A215080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4749 00001278 A214080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4750 0000127D E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4751 00001282 07                                              pop     es                                              ;restore non-volatile regs
  4752 00001283 1F                                              pop     ds                                              ;
  4753 00001284 5F                                              pop     edi                                             ;
  4754 00001285 59                                              pop     ecx                                             ;
  4755 00001286 C3                                              ret                                                     ;return
  4756                                  ;-----------------------------------------------------------------------------------------------------------------------
  4757                                  ;
  4758                                  ;       Routine:        ScrollConsoleRow
  4759                                  ;
  4760                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4761                                  ;
  4762                                  ;-----------------------------------------------------------------------------------------------------------------------
  4763 00001287 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4764 00001288 56                                              push    esi                                             ;
  4765 00001289 57                                              push    edi                                             ;
  4766 0000128A 1E                                              push    ds                                              ;
  4767 0000128B 06                                              push    es                                              ;
  4768 0000128C 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4769 0000128E 1F                                              pop     ds                                              ;... into DS
  4770 0000128F 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4771 00001291 07                                              pop     es                                              ;... into ES
  4772 00001292 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4773 00001297 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4774 0000129C 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4775 0000129E FC                                              cld                                                     ;forward strings
  4776 0000129F F3A5                                            rep     movsd                                           ;move 24 lines up
  4777 000012A1 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4778 000012A6 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4779 000012AB F3AB                                            rep     stosd                                           ;clear bottom row
  4780 000012AD 07                                              pop     es                                              ;restore non-volatile regs
  4781 000012AE 1F                                              pop     ds                                              ;
  4782 000012AF 5F                                              pop     edi                                             ;
  4783 000012B0 5E                                              pop     esi                                             ;
  4784 000012B1 59                                              pop     ecx                                             ;
  4785 000012B2 C3                                              ret                                                     ;return
  4786                                  ;-----------------------------------------------------------------------------------------------------------------------
  4787                                  ;
  4788                                  ;       Routine:        SetConsoleChar
  4789                                  ;
  4790                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4791                                  ;
  4792                                  ;       In:             AL      ASCII character
  4793                                  ;                       CL      column
  4794                                  ;                       CH      row
  4795                                  ;                       ES      CGA selector
  4796                                  ;
  4797                                  ;       Out:            EAX     last target address written (ES:)
  4798                                  ;                       CL      column + 1
  4799                                  ;
  4800                                  ;-----------------------------------------------------------------------------------------------------------------------
  4801 000012B3 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4802 000012B5 0FB6C5                                          movzx   eax,ch                                          ;row
  4803 000012B8 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4804 000012BA F6E4                                            mul     ah                                              ;row * cols/row
  4805 000012BC 00C8                                            add     al,cl                                           ;add column
  4806 000012BE 80D400                                          adc     ah,0                                            ;handle carry
  4807 000012C1 D1E0                                            shl     eax,1                                           ;screen offset
  4808 000012C3 268810                                          mov     [es:eax],dl                                     ;store character
  4809 000012C6 FEC1                                            inc     cl                                              ;next column
  4810 000012C8 C3                                              ret                                                     ;return
  4811                                  ;-----------------------------------------------------------------------------------------------------------------------
  4812                                  ;
  4813                                  ;       Routine:        SetConsoleString
  4814                                  ;
  4815                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4816                                  ;
  4817                                  ;       In:             ESI     source offset (DS:)
  4818                                  ;                       CL      column
  4819                                  ;                       CH      row
  4820                                  ;                       ES      CGA selector
  4821                                  ;
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823 000012C9 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4824 000012CA FC                                              cld                                                     ;forward strings
  4825 000012CB AC                      .10                     lodsb                                                   ;next ASCII character
  4826 000012CC 84C0                                            test    al,al                                           ;end of string?
  4827 000012CE 7407                                            jz      .20                                             ;yes, branch
  4828 000012D0 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4829 000012D5 EBF4                                            jmp     .10                                             ;continue
  4830 000012D7 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4831 000012D8 C3                                              ret                                                     ;return
  4832                                  ;=======================================================================================================================
  4833                                  ;
  4834                                  ;       Input/Output Routines
  4835                                  ;
  4836                                  ;       These routines read and/or write directly to ports.
  4837                                  ;
  4838                                  ;       GetBaseMemSize
  4839                                  ;       GetExtendedMemSize
  4840                                  ;       GetROMMemSize
  4841                                  ;       PlaceCursor
  4842                                  ;       PutPrimaryEndOfInt
  4843                                  ;       PutSecondaryEndOfInt
  4844                                  ;       ReadRealTimeClock
  4845                                  ;       ResetSystem
  4846                                  ;       SetKeyboardLamps
  4847                                  ;       WaitForKeyInBuffer
  4848                                  ;       WaitForKeyOutBuffer
  4849                                  ;
  4850                                  ;=======================================================================================================================
  4851                                  ;-----------------------------------------------------------------------------------------------------------------------
  4852                                  ;
  4853                                  ;       Routine:        GetBaseMemSize
  4854                                  ;
  4855                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4856                                  ;
  4857                                  ;       Output:         EAX     base RAM size in bytes
  4858                                  ;
  4859                                  ;-----------------------------------------------------------------------------------------------------------------------
  4860 000012D9 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4861 000012DB B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4862 000012DD E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4863 000012DF E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4864 000012E1 88C4                                            mov     ah,al                                           ;save base RAM high
  4865 000012E3 B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4866 000012E5 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4867 000012E7 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4868 000012E9 C3                                              ret                                                     ;return to caller
  4869                                  ;-----------------------------------------------------------------------------------------------------------------------
  4870                                  ;
  4871                                  ;       Routine:        GetExtendedMemSize
  4872                                  ;
  4873                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4874                                  ;
  4875                                  ;       Output:         EAX     extended RAM size in bytes
  4876                                  ;
  4877                                  ;-----------------------------------------------------------------------------------------------------------------------
  4878 000012EA 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4879 000012EC B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4880 000012EE E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4881 000012F0 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4882 000012F2 88C4                                            mov     ah,al                                           ;save extended RAM high
  4883 000012F4 B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4884 000012F6 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4885 000012F8 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4886 000012FA C3                                              ret                                                     ;return to caller
  4887                                  ;-----------------------------------------------------------------------------------------------------------------------
  4888                                  ;
  4889                                  ;       Routine:        GetROMMemSize
  4890                                  ;
  4891                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4892                                  ;
  4893                                  ;       Output:         EAX     RAM size in bytes
  4894                                  ;
  4895                                  ;-----------------------------------------------------------------------------------------------------------------------
  4896 000012FB 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4897 000012FD 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4898 00001303 C3                                              ret                                                     ;return
  4899                                  ;-----------------------------------------------------------------------------------------------------------------------
  4900                                  ;
  4901                                  ;       Routine:        PlaceCursor
  4902                                  ;
  4903                                  ;       Description:    This routine positions the cursor on the console.
  4904                                  ;
  4905                                  ;       In:             DS      OS data selector
  4906                                  ;
  4907                                  ;-----------------------------------------------------------------------------------------------------------------------
  4908 00001304 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4909 00001305 A015080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4910 0000130A B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4911 0000130C F6E4                                            mul     ah                                              ;row offset
  4912 0000130E 020514080000                                    add     al,[wbConsoleColumn]                            ;add column
  4913 00001314 80D400                                          adc     ah,0                                            ;add overflow
  4914 00001317 89C1                                            mov     ecx,eax                                         ;screen offset
  4915 00001319 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4916 0000131B B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4917 0000131D B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4918 0000131F EE                                              out     dx,al                                           ;select register
  4919 00001320 42                                              inc     edx                                             ;data port
  4920 00001321 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4921 00001323 EE                                              out     dx,al                                           ;store hi-order loc
  4922 00001324 4A                                              dec     edx                                             ;register select port
  4923 00001325 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4924 00001327 EE                                              out     dx,al                                           ;select register
  4925 00001328 42                                              inc     edx                                             ;data port
  4926 00001329 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4927 0000132B EE                                              out     dx,al                                           ;store lo-order loc
  4928 0000132C 59                                              pop     ecx                                             ;restore non-volatile regs
  4929 0000132D C3                                              ret                                                     ;return
  4930                                  ;-----------------------------------------------------------------------------------------------------------------------
  4931                                  ;
  4932                                  ;       Routine:        PutPrimaryEndOfInt
  4933                                  ;
  4934                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4935                                  ;
  4936                                  ;-----------------------------------------------------------------------------------------------------------------------
  4937 0000132E FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4938 0000132F B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4939 00001331 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4940 00001333 C3                                              ret                                                     ;return
  4941                                  ;-----------------------------------------------------------------------------------------------------------------------
  4942                                  ;
  4943                                  ;       Routine:        PutSecondaryEndOfInt
  4944                                  ;
  4945                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4946                                  ;
  4947                                  ;-----------------------------------------------------------------------------------------------------------------------
  4948 00001334 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4949 00001335 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4950 00001337 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4951 00001339 C3                                              ret                                                     ;return
  4952                                  ;-----------------------------------------------------------------------------------------------------------------------
  4953                                  ;
  4954                                  ;       Routine:        ReadRealTimeClock
  4955                                  ;
  4956                                  ;       Description:    This routine gets current date time from the real-time clock.
  4957                                  ;
  4958                                  ;       In:             DS:EBX  DATETIME structure
  4959                                  ;
  4960                                  ;-----------------------------------------------------------------------------------------------------------------------
  4961 0000133A 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4962 0000133B 57                                              push    edi                                             ;
  4963 0000133C 06                                              push    es                                              ;
  4964 0000133D 1E                                              push    ds                                              ;store data selector ...
  4965 0000133E 07                                              pop     es                                              ;... in es register
  4966 0000133F 89DF                                            mov     edi,ebx                                         ;date-time structure
  4967 00001341 B000                                            mov     al,ERTCSECONDREG                                ;second register
  4968 00001343 E670                                            out     ERTCREGPORT,al                                  ;select second register
  4969 00001345 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4970 00001347 FC                                              cld                                                     ;forward strings
  4971 00001348 AA                                              stosb                                                   ;store second value
  4972 00001349 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4973 0000134B E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4974 0000134D E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4975 0000134F AA                                              stosb                                                   ;store minute value
  4976 00001350 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4977 00001352 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4978 00001354 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4979 00001356 AA                                              stosb                                                   ;store hour value
  4980 00001357 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4981 00001359 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4982 0000135B E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4983 0000135D AA                                              stosb                                                   ;store weekday value
  4984 0000135E B007                                            mov     al,ERTCDAYREG                                   ;day register
  4985 00001360 E670                                            out     ERTCREGPORT,al                                  ;select day register
  4986 00001362 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4987 00001364 AA                                              stosb                                                   ;store day value
  4988 00001365 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4989 00001367 E670                                            out     ERTCREGPORT,al                                  ;select month register
  4990 00001369 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  4991 0000136B AA                                              stosb                                                   ;store month value
  4992 0000136C B009                                            mov     al,ERTCYEARREG                                  ;year register
  4993 0000136E E670                                            out     ERTCREGPORT,al                                  ;select year register
  4994 00001370 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  4995 00001372 AA                                              stosb                                                   ;store year value
  4996 00001373 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  4997 00001375 E670                                            out     ERTCREGPORT,al                                  ;select century register
  4998 00001377 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  4999 00001379 AA                                              stosb                                                   ;store century value
  5000 0000137A B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  5001 0000137C E670                                            out     ERTCREGPORT,al                                  ;select status register
  5002 0000137E E471                                            in      al,ERTCDATAPORT                                 ;read status register
  5003 00001380 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  5004 00001382 751D                                            jnz     .20                                             ;skip ahead if binary values
  5005 00001384 89DE                                            mov     esi,ebx                                         ;date-time structure address
  5006 00001386 89DF                                            mov     edi,ebx                                         ;date-time structure address
  5007 00001388 B908000000                                      mov     ecx,8                                           ;loop counter
  5008 0000138D AC                      .10                     lodsb                                                   ;BCD value
  5009 0000138E 88C4                                            mov     ah,al                                           ;BCD value
  5010 00001390 240F                                            and     al,00001111b                                    ;low-order decimal zone
  5011 00001392 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  5012 00001395 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  5013 00001397 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  5014 00001399 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  5015 0000139C 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  5016 0000139E AA                                              stosb                                                   ;replace BCD with binary
  5017 0000139F E2EC                                            loop    .10                                             ;next value
  5018 000013A1 07                      .20                     pop     es                                              ;restore non-volatile regs
  5019 000013A2 5F                                              pop     edi                                             ;
  5020 000013A3 5E                                              pop     esi                                             ;
  5021 000013A4 C3                                              ret                                                     ;return
  5022                                  ;-----------------------------------------------------------------------------------------------------------------------
  5023                                  ;
  5024                                  ;       Routine:        ResetSystem
  5025                                  ;
  5026                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5027                                  ;
  5028                                  ;       Out:            N/A     This routine does not return.
  5029                                  ;
  5030                                  ;-----------------------------------------------------------------------------------------------------------------------
  5031 000013A5 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5032 000013AA E2FE                                            loop    $                                               ;clear interrupts
  5033 000013AC B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5034 000013AE E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5035 000013B0 FB                      .10                     sti                                                     ;enable maskable interrupts
  5036 000013B1 F4                                              hlt                                                     ;halt until interrupt
  5037 000013B2 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  5038                                  ;-----------------------------------------------------------------------------------------------------------------------
  5039                                  ;
  5040                                  ;       Routine:        SetKeyboardLamps
  5041                                  ;
  5042                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5043                                  ;
  5044                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5045                                  ;
  5046                                  ;-----------------------------------------------------------------------------------------------------------------------
  5047 000013B4 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5048 000013B9 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5049 000013BB E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  5050 000013BD E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5051 000013C2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5052 000013C4 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5053 000013C9 88F8                                            mov     al,bh                                           ;set/reset lamps value
  5054 000013CB E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  5055 000013CD E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5056 000013D2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5057 000013D4 C3                                              ret                                                     ;return
  5058                                  ;-----------------------------------------------------------------------------------------------------------------------
  5059                                  ;
  5060                                  ;       Routine:        WaitForKeyInBuffer
  5061                                  ;
  5062                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5063                                  ;
  5064                                  ;       Out:            ZF      1 = Input buffer ready
  5065                                  ;                               0 = Input buffer not ready after timeout
  5066                                  ;
  5067                                  ;-----------------------------------------------------------------------------------------------------------------------
  5068 000013D5 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5069 000013D6 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5070 000013DB E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5071 000013DD A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  5072 000013DF E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  5073 000013E1 59                                              pop     ecx                                             ;restore non-volatile regs
  5074 000013E2 C3                                              ret                                                     ;return
  5075                                  ;-----------------------------------------------------------------------------------------------------------------------
  5076                                  ;
  5077                                  ;       Routine:        WaitForKeyOutBuffer
  5078                                  ;
  5079                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5080                                  ;
  5081                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5082                                  ;                               0 = Output buffer empty after timeout
  5083                                  ;
  5084                                  ;-----------------------------------------------------------------------------------------------------------------------
  5085 000013E3 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5086 000013E4 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5087 000013E9 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5088 000013EB A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5089 000013ED E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5090 000013EF 59                                              pop     ecx                                             ;restore non-volatile regs
  5091 000013F0 C3                                              ret                                                     ;return
  5092                                  ;-----------------------------------------------------------------------------------------------------------------------
  5093                                  ;
  5094                                  ;       End of the Kernel Function Library
  5095                                  ;
  5096                                  ;-----------------------------------------------------------------------------------------------------------------------
  5097 000013F1 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5098                                  ;=======================================================================================================================
  5099                                  ;
  5100                                  ;       Console Task
  5101                                  ;
  5102                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5103                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5104                                  ;       screen and responds to user commands.
  5105                                  ;
  5106                                  ;=======================================================================================================================
  5107                                  ;-----------------------------------------------------------------------------------------------------------------------
  5108                                  ;
  5109                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5110                                  ;
  5111                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5112                                  ;
  5113                                  ;-----------------------------------------------------------------------------------------------------------------------
  5114                                  section                 constack                                                ;console task stack
  5115 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5116                                  ;-----------------------------------------------------------------------------------------------------------------------
  5117                                  ;
  5118                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5119                                  ;
  5120                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5121                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5122                                  ;       16 descriptors. Six are initially defined.
  5123                                  ;
  5124                                  ;-----------------------------------------------------------------------------------------------------------------------
  5125                                  section                 conldt                                                  ;console local descriptors
  5126 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5127 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5128 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5129 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5130 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  5131 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5132 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5133                                  ;-----------------------------------------------------------------------------------------------------------------------
  5134                                  ;
  5135                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5136                                  ;
  5137                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5138                                  ;       segment. CS to console code.
  5139                                  ;
  5140                                  ;-----------------------------------------------------------------------------------------------------------------------
  5141                                  section                 contss                                                  ;console task state segment
  5142 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5143 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5144 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5145 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5146 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5147 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5148 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5149 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5150 00000020 00000000                                        dd      0                                               ;20 eip
  5151 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5152 00000028 00000000                                        dd      0                                               ;28 eax
  5153 0000002C 00000000                                        dd      0                                               ;2c ecx
  5154 00000030 00000000                                        dd      0                                               ;30 edx
  5155 00000034 00000000                                        dd      0                                               ;34 ebx
  5156 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5157 0000003C 00000000                                        dd      0                                               ;3c ebp
  5158 00000040 00000000                                        dd      0                                               ;40 esi
  5159 00000044 00000000                                        dd      0                                               ;44 edi
  5160 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5161 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5162 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5163 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5164 00000058 00000000                                        dd      0                                               ;58 fs
  5165 0000005C 00000000                                        dd      0                                               ;5c gs
  5166 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5167 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5168                                  ;-----------------------------------------------------------------------------------------------------------------------
  5169                                  ;
  5170                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5171                                  ;
  5172                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5173                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5174                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5175                                  ;       event.
  5176                                  ;
  5177                                  ;-----------------------------------------------------------------------------------------------------------------------
  5178                                  section                 conmque                                                 ;console message queue
  5179 00000000 08000000                                        dd      8                                               ;head pointer
  5180 00000004 08000000                                        dd      8                                               ;tail pointer
  5181 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5182                                  ;-----------------------------------------------------------------------------------------------------------------------
  5183                                  ;
  5184                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5185                                  ;
  5186                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5187                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5188                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5189                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5190                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5191                                  ;       board input, echoing to the console screen and responding to user commands.
  5192                                  ;
  5193                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5194                                  ;
  5195                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5196                                  ;                               |  Real Mode Interrupt Vectors                  |
  5197                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5198                                  ;                               |  Reserved BIOS Memory Area                    |
  5199                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5200                                  ;                               |  Shared Kernel Memory Area                    |
  5201                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5202                                  ;                               |  Global Descriptor Table (GDT)                |
  5203                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5204                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5205                                  ;                       002000  +-----------------------------------------------+
  5206                                  ;                               |  Interrupt Handlers                           |
  5207                                  ;                               |  Kernel Function Library                      |
  5208                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5209                                  ;                               |  Console Task Stack Area                      |
  5210                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5211                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5212                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5213                                  ;                               |  Console Task Task State Segment (TSS)        |
  5214                                  ;                       004800  +-----------------------------------------------+
  5215                                  ;                               |  Console Task Message Queue                   |
  5216                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5217                                  ;                               |  Console Task Code                            |
  5218                                  ;                               |  Console Task Constants                       |
  5219                                  ;                       006000  +===============================================+
  5220                                  ;
  5221                                  ;-----------------------------------------------------------------------------------------------------------------------
  5222                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5223 00000000 E8DE000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5224                                  
  5225                                                          clearConsoleScreen                                      ;clear the console screen
  5225 00000005 B001                <1>  mov al,eClearConsoleScreen
  5225 00000007 CD30                <1>  int _svc
  5226                                                          putConsoleString czTitle                                ;display startup message
  5226 00000009 BA[A20A0000]        <1>  mov edx,%1
  5226 0000000E B00C                <1>  mov al,ePutConsoleString
  5226 00000010 CD30                <1>  int _svc
  5227                                                          putConsoleString czROMMem                               ;ROM memory label
  5227 00000012 BA[7D0A0000]        <1>  mov edx,%1
  5227 00000017 B00C                <1>  mov al,ePutConsoleString
  5227 00000019 CD30                <1>  int _svc
  5228                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5228 0000001B BA1C090000          <1>  mov edx,%1
  5228 00000020 B00C                <1>  mov al,ePutConsoleString
  5228 00000022 CD30                <1>  int _svc
  5229                                                          putConsoleString czKB                                   ;Kilobytes
  5229 00000024 BA[F7090000]        <1>  mov edx,%1
  5229 00000029 B00C                <1>  mov al,ePutConsoleString
  5229 0000002B CD30                <1>  int _svc
  5230                                                          putConsoleString czNewLine                              ;new line
  5230 0000002D BA[FA090000]        <1>  mov edx,%1
  5230 00000032 B00C                <1>  mov al,ePutConsoleString
  5230 00000034 CD30                <1>  int _svc
  5231                                                          putConsoleString czBaseMem                              ;base memory label
  5231 00000036 BA[76090000]        <1>  mov edx,%1
  5231 0000003B B00C                <1>  mov al,ePutConsoleString
  5231 0000003D CD30                <1>  int _svc
  5232                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5232 0000003F BA11090000          <1>  mov edx,%1
  5232 00000044 B00C                <1>  mov al,ePutConsoleString
  5232 00000046 CD30                <1>  int _svc
  5233                                                          putConsoleString czKB                                   ;Kilobytes
  5233 00000048 BA[F7090000]        <1>  mov edx,%1
  5233 0000004D B00C                <1>  mov al,ePutConsoleString
  5233 0000004F CD30                <1>  int _svc
  5234                                                          putConsoleString czNewLine                              ;new line
  5234 00000051 BA[FA090000]        <1>  mov edx,%1
  5234 00000056 B00C                <1>  mov al,ePutConsoleString
  5234 00000058 CD30                <1>  int _svc
  5235                                                          putConsoleString czExtendedMem                          ;extended memory label
  5235 0000005A BA[DF090000]        <1>  mov edx,%1
  5235 0000005F B00C                <1>  mov al,ePutConsoleString
  5235 00000061 CD30                <1>  int _svc
  5236                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5236 00000063 BA27090000          <1>  mov edx,%1
  5236 00000068 B00C                <1>  mov al,ePutConsoleString
  5236 0000006A CD30                <1>  int _svc
  5237                                                          putConsoleString czKB                                   ;Kilobytes
  5237 0000006C BA[F7090000]        <1>  mov edx,%1
  5237 00000071 B00C                <1>  mov al,ePutConsoleString
  5237 00000073 CD30                <1>  int _svc
  5238                                                          putConsoleString czNewLine                              ;new line
  5238 00000075 BA[FA090000]        <1>  mov edx,%1
  5238 0000007A B00C                <1>  mov al,ePutConsoleString
  5238 0000007C CD30                <1>  int _svc
  5239                                  
  5240 0000007E E8F2000000                                      call    ConInitializeNetwork
  5241                                  
  5242                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5242                              <1> .10 :
  5242 00000083 BA[5E0A0000]        <1>  mov edx,%1
  5242 00000088 B00C                <1>  mov al,ePutConsoleString
  5242 0000008A CD30                <1>  int _svc
  5243                                                          placeCursor                                             ;set CRT cursor location
  5243 0000008C B00B                <1>  mov al,ePlaceCursor
  5243 0000008E CD30                <1>  int _svc
  5244                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5244 00000090 BA21080000          <1>  mov edx,%1
  5244 00000095 B94F000000          <1>  mov ecx,%2
  5244 0000009A B701                <1>  mov bh,%3
  5244 0000009C B30D                <1>  mov bl,%4
  5244 0000009E B006                <1>  mov al,eGetConsoleString
  5244 000000A0 CD30                <1>  int _svc
  5245                                                          putConsoleString czNewLine                              ;newline
  5245 000000A2 BA[FA090000]        <1>  mov edx,%1
  5245 000000A7 B00C                <1>  mov al,ePutConsoleString
  5245 000000A9 CD30                <1>  int _svc
  5246                                  
  5247 000000AB BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5248 000000B0 BB71080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5249 000000B5 E8DC010000                                      call    ConTakeToken                                    ;handle console input
  5250 000000BA BA71080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5251 000000BF E807020000                                      call    ConDetermineCommand                             ;determine command number
  5252 000000C4 83F81A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5253 000000C7 720B                                            jb      .20                                             ;yes, branch
  5254                                  
  5255                                                          putConsoleString czUnknownCommand                       ;display error message
  5255 000000C9 BA[C00A0000]        <1>  mov edx,%1
  5255 000000CE B00C                <1>  mov al,ePutConsoleString
  5255 000000D0 CD30                <1>  int _svc
  5256                                  
  5257 000000D2 EBAF                                            jmp     .10                                             ;next command
  5258 000000D4 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5259 000000D7 BA[2A080000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5260 000000DC 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5261 000000DF FFD0                                            call    eax                                             ;call command handler
  5262 000000E1 EBA0                                            jmp     .10                                             ;next command
  5263                                  ;-----------------------------------------------------------------------------------------------------------------------
  5264                                  ;
  5265                                  ;       Routine:        ConInitializeData
  5266                                  ;
  5267                                  ;       Description:    This routine initializes console task variables.
  5268                                  ;
  5269                                  ;-----------------------------------------------------------------------------------------------------------------------
  5270 000000E3 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5271 000000E4 57                                              push    edi                                             ;
  5272 000000E5 06                                              push    es                                              ;
  5273                                  ;
  5274                                  ;       Initialize console work areas.
  5275                                  ;
  5276 000000E6 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5277 000000E8 07                                              pop     es                                              ;... into extra segment register
  5278 000000E9 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5279 000000EE 30C0                                            xor     al,al                                           ;initialization value
  5280 000000F0 B97A010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5281 000000F5 FC                                              cld                                                     ;forward strings
  5282 000000F6 F3AA                                            rep     stosb                                           ;initialize data
  5283                                  ;
  5284                                  ;       Initialize heap size
  5285                                  ;
  5286 000000F8 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5287 000000FD A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5288                                  ;
  5289                                  ;       Initialize MEMROOT structure
  5290                                  ;
  5291 00000102 BF3B090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5292 00000107 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5293 0000010C 31C9                                            xor     ecx,ecx                                         ;zero register
  5294 0000010E B104                                            mov     cl,4                                            ;count
  5295 00000110 F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5296 00000112 31C0                                            xor     eax,eax                                         ;zero register
  5297 00000114 AB                                              stosd                                                   ;zero first task block
  5298 00000115 AB                                              stosd                                                   ;zero last task block
  5299                                  ;
  5300                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5301                                  ;
  5302 00000116 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5303 0000011B B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5304 00000120 AB                                              stosd                                                   ;store signature
  5305 00000121 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5306 00000126 AB                                              stosd                                                   ;store block size
  5307 00000127 31C9                                            xor     ecx,ecx                                         ;zero register
  5308 00000129 B106                                            mov     cl,6                                            ;count
  5309 0000012B 31C0                                            xor     eax,eax                                         ;zero register
  5310 0000012D F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5311                                  ;
  5312                                  ;       Read memory sizes from ROM
  5313                                  ;
  5314                                                          getROMMemSize                                           ;get ROM memory size
  5314 0000012F B008                <1>  mov al,eGetROMMemSize
  5314 00000131 CD30                <1>  int _svc
  5315 00000133 A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5316 00000138 89C1                                            mov     ecx,eax                                         ;integer param
  5317 0000013A BA1C090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  5318 0000013F B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5319                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5319 00000141 B01A                <1>  mov al,eUnsignedToDecimalString
  5319 00000143 CD30                <1>  int _svc
  5320                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5320 00000145 B005                <1>  mov al,eGetBaseMemSize
  5320 00000147 CD30                <1>  int _svc
  5321 00000149 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  5322 0000014E 89C1                                            mov     ecx,eax                                         ;integer param
  5323 00000150 BA11090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  5324 00000155 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5325                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5325 00000157 B01A                <1>  mov al,eUnsignedToDecimalString
  5325 00000159 CD30                <1>  int _svc
  5326                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5326 0000015B B007                <1>  mov al,eGetExtendedMemSize
  5326 0000015D CD30                <1>  int _svc
  5327 0000015F A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5328 00000164 89C1                                            mov     ecx,eax                                         ;integer param
  5329 00000166 BA27090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  5330 0000016B B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5331                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5331 0000016D B01A                <1>  mov al,eUnsignedToDecimalString
  5331 0000016F CD30                <1>  int _svc
  5332                                  ;
  5333                                  ;       Restore and return.
  5334                                  ;
  5335 00000171 07                                              pop     es                                              ;restore non-volatile regs
  5336 00000172 5F                                              pop     edi                                             ;
  5337 00000173 59                                              pop     ecx                                             ;
  5338 00000174 C3                                              ret                                                     ;return
  5339                                  ;-----------------------------------------------------------------------------------------------------------------------
  5340                                  ;
  5341                                  ;       Routine:        ConInitializeNetwork
  5342                                  ;
  5343                                  ;       Description:    This routine initializes console network variables.
  5344                                  ;
  5345                                  ;-----------------------------------------------------------------------------------------------------------------------
  5346 00000175 53                      ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5347 00000176 51                                              push    ecx                                             ;
  5348 00000177 56                                              push    esi                                             ;
  5349 00000178 57                                              push    edi                                             ;
  5350                                  ;
  5351                                  ;       Initialize ETHER structure.
  5352                                  ;
  5353 00000179 BB67090000                                      mov     ebx,wsConsoleEther                              ;ETHER structure address
  5354 0000017E E8FE000000                                      call    ConInitEtherContext                             ;initialize ETHER struct
  5355                                  
  5356                                  ;       Initialize variables.
  5357                                  ;       Construct PCI selector.
  5358                                  ;       Read PCI configuration data.
  5359                                  ;
  5360 00000183 89DE                    			mov	esi,ebx						;ETHER structure address
  5361 00000185 BB5B090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  5362 0000018A E81C040000                                      call    ConInitPCIContext                               ;initialize PCI struct
  5363 0000018F E82C040000              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5364 00000194 E848040000                                      call    ConReadPCIConfigData                            ;read the configuration data
  5365                                  
  5366                                  ;
  5367                                  ;       Proceed to next device is function 0 = -1. Otherwise proceed to next function.
  5368                                  ;
  5369 00000199 83F8FF                                          cmp     eax,-1		                                ;function defined?
  5370 0000019C 7506                                            jne     .20                                             ;yes, branch
  5371 0000019E 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  5372 000001A2 740E                                            je      .30                                             ;yes, skip to next device
  5373                                  ;
  5374                                  ;       Exit PCI probe if supported adapter found. Otherwise, proceed to next function.
  5375                                  ;
  5376 000001A4 3D86800F10              .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5377 000001A9 7413                                            je      .40                                             ;yes, found!
  5378                                  ;
  5379                                  ;       Next function
  5380                                  ;
  5381 000001AB E84F050000                                      call    ConNextPCIFunction                              ;next function
  5382 000001B0 72DD                                            jb      .10                                             ;continue if no overflow
  5383                                  ;
  5384                                  ;       Next device, bus.
  5385                                  ;
  5386 000001B2 E856050000              .30                     call    ConNextPCIDevice                                ;next device, bus.
  5387 000001B7 72D6                                            jb      .10                                             ;continue if no overflow
  5388 000001B9 E9BE000000                                      jmp     .990                                            ;done, ETHER not found
  5389                                  ;
  5390                                  ;       Notify adapter found
  5391                                  ;       Set hardware flag if supported adapter found.
  5392                                  ;
  5393                                  .40                     putConsoleString czEthernetAdapterFound
  5393                              <1> .40 :
  5393 000001BE BA[84090000]        <1>  mov edx,%1
  5393 000001C3 B00C                <1>  mov al,ePutConsoleString
  5393 000001C5 CD30                <1>  int _svc
  5394                                  
  5395 000001C7 800D2008000080                                  or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5396 000001CE 8B4304                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5397 000001D1 8906                                            mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5398 000001D3 E9A4000000                                      jmp     .990                                            ;done, ETHER found
  5399                                  ;
  5400                                  ;       Setup search of buffer addresses for Memory-mapped I/O address
  5401                                  ;
  5402 000001D8 C6430310                                        mov     byte [ebx+PCI.register],010h          		;offset of first BAR register
  5403 000001DC 31C9                                            xor     ecx,ecx                                         ;zero reg
  5404 000001DE B106                                            mov     cl,6                                            ;maximum number of BAR
  5405                                  ;
  5406                                  ;       Apply BAR register offset to selector
  5407                                  ;
  5408 000001E0 8B4304                  .50                     mov     eax,[ebx+PCI.selector]                		;selector (register is zero)
  5409 000001E3 8A4303                                          mov     al,[ebx+PCI.register]                 		;next BAR register
  5410 000001E6 8906                                            mov     [esi+ETHER.selector],eax                	;save selector
  5411                                  ;
  5412                                  ;       Select and read buffer address register.
  5413                                  ;
  5414 000001E8 B60C                                            mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port (high)
  5415 000001EA B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port (low)
  5416 000001EC EF                                              out     dx,eax                                          ;select register
  5417 000001ED B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5418 000001EF ED                                              in      eax,dx                                          ;read register
  5419                                  ;
  5420                                  ;       Skip BAR if null. Otherwise, test if memory-mapped i/o addr
  5421                                  ;
  5422 000001F0 85C0                                            test    eax,eax                                         ;BAR has a value?
  5423 000001F2 741C                                            jz      .70                                             ;no, branch
  5424 000001F4 A801                                            test    al,1                                            ;memory BAR (bit 0=0)
  5425 000001F6 750D                                            jnz     .60                                             ;no, branch
  5426                                  ;
  5427                                  ;       Skip if we already have MMIO. Otherwise, mask bits and save.
  5428                                  ;
  5429 000001F8 837E0400                                        cmp     dword [esi+ETHER.mmio],0                        ;do we already have an mmio addr?
  5430 000001FC 7512                                            jne     .70                                             ;yes, branch
  5431 000001FE 24F8                                            and     al,0F8h                                         ;mask out bits 2-0
  5432 00000200 894604                                          mov     [esi+ETHER.mmio],eax                            ;save the memory mapped i/o addr
  5433 00000203 EB0B                                            jmp     .70                                             ;continue to next BAR
  5434                                  ;
  5435                                  ;       Skip port if we already have one. Otherwise, mask bits and save.
  5436                                  ;
  5437 00000205 837E0800                .60                     cmp     dword [esi+ETHER.port],0                        ;do we already have a port?
  5438 00000209 7505                                            jne     .70                                             ;yes, branch
  5439 0000020B 24FC                                            and     al,0FCh                                         ;zero bits 0,1
  5440 0000020D 894608                                          mov     [esi+ETHER.port],eax                            ;save port addr
  5441                                  ;
  5442                                  ;       Next BAR
  5443                                  ;
  5444 00000210 80430304                .70                     add     byte [ebx+PCI.register],4                       ;next BAR register offset
  5445 00000214 E2CA                                            loop    .50                                             ;look for next BAR
  5446                                  ;
  5447                                  ;       Read interrupt nbr
  5448                                  ;
  5449 00000216 8B4500                                          mov     eax,[ebp+ETHER.selector]                        ;ethernet device PCI selector
  5450 00000219 B03C                                            mov     al,3ch                                          ;interrupt number port addr
  5451 0000021B 8906                                            mov     [esi+ETHER.selector],eax                        ;ethernet device PCI select|register
  5452 0000021D B60C                                            mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port (high)
  5453 0000021F B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port (low)
  5454 00000221 EF                                              out     dx,eax                                          ;select register
  5455 00000222 B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5456 00000224 ED                                              in      eax,dx                                          ;read register
  5457 00000225 884612                                          mov     [esi+ETHER.irq],al                              ;save IRQ
  5458                                  ;
  5459                                  ;       Error if we have no MMIO address
  5460                                  ;
  5461 00000228 8B4604                                          mov     eax,[esi+ETHER.mmio]                            ;ethernet device memory I/O address
  5462 0000022B 85C0                                            test    eax,eax                                         ;do we have memory I/O address?
  5463 0000022D 750B                                            jnz     .80                                             ;yes, branch
  5464                                  
  5465                                                          putConsoleString czEthernetNotAddressable               ;report not addressable
  5465 0000022F BA[BC090000]        <1>  mov edx,%1
  5465 00000234 B00C                <1>  mov al,ePutConsoleString
  5465 00000236 CD30                <1>  int _svc
  5466                                  
  5467 00000238 EB42                                            jmp     .990                                            ;done (could do MAC read from EEPROM here)
  5468                                  
  5469                                  .80                     putConsoleString czEthernetAddressable                  ;report addressable
  5469                              <1> .80 :
  5469 0000023A BA[9D090000]        <1>  mov edx,%1
  5469 0000023F B00C                <1>  mov al,ePutConsoleString
  5469 00000241 CD30                <1>  int _svc
  5470                                  ;
  5471                                  ;       Read MAC address from MMIO
  5472                                  ;
  5473 00000243 8B5604                                          mov     edx,[esi+ETHER.mmio]                            ;MMIO address
  5474 00000246 81C200540000                                    add     edx,5400h                                       ;MAC address offset
  5475 0000024C 8B02                                            mov     eax,[edx]                                       ;MAC address lo-order dword
  5476 0000024E 89460C                                          mov     [esi+ETHER.mac],eax                             ;save
  5477 00000251 668B4204                                        mov     ax,[edx+4]                                      ;MAC address hi-order word
  5478 00000255 66894610                                        mov     [esi+ETHER.mac+4],ax                            ;save
  5479                                  ;
  5480                                  ;       Enable transmission of packets
  5481                                  ;
  5482                                  
  5483                                  
  5484                                  ;
  5485                                  ;       Setup read base address (RDBAL) (2800h)
  5486                                  ;
  5487                                  
  5488                                  ;
  5489                                  ;       Setup receive descriptor table length (2808h)
  5490                                  ;
  5491                                  
  5492                                  ;
  5493                                  ;       Enable receipt of packets
  5494                                  ;
  5495 00000259 9C                                              pushf
  5496 0000025A FA                                              cli
  5497 0000025B 8B5604                                          mov     edx,[esi+ETHER.mmio]                            ;memory i/o address
  5498 0000025E 81C200010000                                    add     edx,0100h                                       ;RCTL register address
  5499 00000264 8B02                                            mov     eax,[edx]                                       ;RCTL value
  5500 00000266 83C802                                          or      eax,00000002h                                   ;enable
  5501 00000269 8902                                            mov     [edx],eax                                       ;store RCTL value
  5502 0000026B 9D                                              popf
  5503                                  ;
  5504                                  ;       Enable board interrupt
  5505                                  ;
  5506 0000026C 8B5604                                          mov     edx,[esi+ETHER.mmio]                            ;memory i/o address
  5507 0000026F 81C218280000                                    add     edx,2818h                                       ;add descriptor tail offset
  5508 00000275 B802000000                                      mov     eax,2                                           ;buffer number
  5509 0000027A 8902                                            mov     [edx],eax                                       ;store buffer number
  5510                                  
  5511                                  
  5512                                  ;-----------------------------------------------------------------------------------------------------------------------
  5513                                  ;       Decprecated code to read MAC from EEPROM
  5514                                  ;-----------------------------------------------------------------------------------------------------------------------
  5515                                  ;                       add     edx,14h                                         ;EERD register (to read EEPROM)
  5516                                  ;                       xor     eax,eax                                         ;0000 0000 0000 0000 0000 0000 0000 0000
  5517                                  ;                       mov     al,1                                            ;dddd dddd dddd dddd aaaa aaaa 000d 0001
  5518                                  ;                       mov     [edx],eax                                       ;start EEPROM read
  5519                                  ;                       mov     ecx,10000h
  5520                                  ;.51                    mov     eax,[edx]
  5521                                  ;                       test    al,010h
  5522                                  ;                       jnz     .52
  5523                                  ;                       loop    .51
  5524                                  ;                       putConsoleString czEthernetEEPROMReadTimeOut
  5525                                  ;                       jmp     .90
  5526                                  ;.52                    shr     eax,16
  5527                                  ;                       mov     [ebx+ETHER.mac],al
  5528                                  ;                       mov     [ebx+ETHER.mac+1],ah
  5529                                  ;                       xor     eax,eax
  5530                                  ;                       mov     ah,1
  5531                                  ;                       mov     al,1
  5532                                  ;                       mov     [edx],eax
  5533                                  ;                       mov     ecx,10000h
  5534                                  ;.53                    mov     eax,[edx]
  5535                                  ;                       test    al,010h
  5536                                  ;                       jnz     .54
  5537                                  ;                       loop    .53
  5538                                  ;                       putConsoleString czEthernetEEPROMReadTimeOut
  5539                                  ;                       jmp     .90
  5540                                  ;.54                    shr     eax,16
  5541                                  ;                       mov     [ebx+ETHER.mac+2],al
  5542                                  ;                       mov     [ebx+ETHER.mac+3],ah
  5543                                  ;                       xor     eax,eax
  5544                                  ;                       mov     ah,2
  5545                                  ;                       mov     al,1
  5546                                  ;                       mov     [edx],eax                                       ;start EEPROM read register 2
  5547                                  ;                       mov     ecx,10000h                                      ;timeout loop
  5548                                  ;.55                    mov     eax,[edx]                                       ;read EERD register
  5549                                  ;                       test    al,010h                                         ;test DONE bit
  5550                                  ;                       jnz     .56                                             ;branch if done
  5551                                  ;                       loop    .55                                             ;continue
  5552                                  ;                       putConsoleString czEthernetEEPROMReadTimeOut
  5553                                  ;                       jmp     .90
  5554                                  ;.56                    shr     eax,16                                          ;AX = MAC addr bytes 5,6
  5555                                  ;                       mov     [ebx+ETHER.mac+4],al                            ;save byte 5
  5556                                  ;                       mov     [ebx+ETHER.mac+5],ah                            ;save byte 6
  5557                                  ;                       putConsoleString czEthernetEEPROMReadOK
  5558                                  ;.60                    jmp     .90                                             ;branch to return
  5559                                  ;-----------------------------------------------------------------------------------------------------------------------
  5560                                  ;       end of EEPROM code
  5561                                  ;-----------------------------------------------------------------------------------------------------------------------
  5562 0000027C 5F                      .990                    pop     edi                                             ;restore non-volatile regs
  5563 0000027D 5E                                              pop     esi                                             ;
  5564 0000027E 59                                              pop     ecx                                             ;
  5565 0000027F 5B                                              pop     ebx                                             ;
  5566 00000280 C3                                              ret                                                     ;return
  5567                                  ;-----------------------------------------------------------------------------------------------------------------------
  5568                                  ;
  5569                                  ;       Routine:        ConInitEtherContext
  5570                                  ;
  5571                                  ;       Description:    This routine zeros an ETHER structure
  5572                                  ;
  5573                                  ;       In:             DS:EBX  ETHER structure address
  5574                                  ;
  5575                                  ;-----------------------------------------------------------------------------------------------------------------------
  5576 00000281 51                      ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  5577 00000282 57                                              push    edi                                             ;
  5578 00000283 06                                              push    es                                              ;
  5579                                  ;
  5580                                  ;       Zero context.
  5581                                  ;
  5582 00000284 1E                                              push    ds                                              ;load data segment...
  5583 00000285 07                                              pop     es                                              ;...into extra segment
  5584 00000286 89DF                                            mov     edi,ebx                                         ;ETHER structure offset
  5585 00000288 B913000000                                      mov     ecx,EETHERLEN                                   ;ETHER structure length
  5586 0000028D 30C0                                            xor     al,al                                           ;zero
  5587 0000028F FC                                              cld                                                     ;forward strings
  5588 00000290 F3AA                                            rep     stosb                                           ;zero structure members
  5589                                  ;
  5590                                  ;       Restore and return.
  5591                                  ;
  5592 00000292 07                                              pop     es                                              ;restore non-volatile regs
  5593 00000293 5F                                              pop     edi                                             ;
  5594 00000294 59                                              pop     ecx                                             ;
  5595 00000295 C3                                              ret                                                     ;return
  5596                                  ;-----------------------------------------------------------------------------------------------------------------------
  5597                                  ;
  5598                                  ;       Routine:        ConTakeToken
  5599                                  ;
  5600                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5601                                  ;
  5602                                  ;       In:             DS:EDX  source buffer address
  5603                                  ;                       DS:EBX  target buffer address
  5604                                  ;
  5605                                  ;       Out:            DS:EDX  source buffer address
  5606                                  ;                       DS:EBX  target buffer address
  5607                                  ;
  5608                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5609                                  ;
  5610                                  ;-----------------------------------------------------------------------------------------------------------------------
  5611 00000296 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5612 00000297 57                                              push    edi                                             ;
  5613 00000298 06                                              push    es                                              ;
  5614 00000299 1E                                              push    ds                                              ;load data segment selector ...
  5615 0000029A 07                                              pop     es                                              ;... into extra segment reg
  5616 0000029B 89D6                                            mov     esi,edx                                         ;source buffer address
  5617 0000029D 89DF                                            mov     edi,ebx                                         ;target buffer address
  5618 0000029F C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5619 000002A2 FC                                              cld                                                     ;forward strings
  5620 000002A3 AC                      .10                     lodsb                                                   ;load byte
  5621 000002A4 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5622 000002A6 74FB                                            je      .10                                             ;yes, continue
  5623 000002A8 84C0                                            test    al,al                                           ;end of line?
  5624 000002AA 7410                                            jz      .40                                             ;yes, branch
  5625 000002AC AA                      .20                     stosb                                                   ;store byte
  5626 000002AD AC                                              lodsb                                                   ;load byte
  5627 000002AE 84C0                                            test    al,al                                           ;end of line?
  5628 000002B0 740A                                            jz      .40                                             ;no, continue
  5629 000002B2 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5630 000002B4 75F6                                            jne     .20                                             ;no, continue
  5631 000002B6 AC                      .30                     lodsb                                                   ;load byte
  5632 000002B7 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5633 000002B9 74FB                                            je      .30                                             ;yes, continue
  5634 000002BB 4E                                              dec     esi                                             ;pre-position
  5635 000002BC C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5636 000002BF 89D7                                            mov     edi,edx                                         ;source buffer address
  5637 000002C1 AC                      .50                     lodsb                                                   ;remaining byte
  5638 000002C2 AA                                              stosb                                                   ;move to front of buffer
  5639 000002C3 84C0                                            test    al,al                                           ;end of line?
  5640 000002C5 75FA                                            jnz     .50                                             ;no, continue
  5641 000002C7 07                                              pop     es                                              ;restore non-volatile regs
  5642 000002C8 5F                                              pop     edi                                             ;
  5643 000002C9 5E                                              pop     esi                                             ;
  5644 000002CA C3                                              ret                                                     ;return
  5645                                  ;-----------------------------------------------------------------------------------------------------------------------
  5646                                  ;
  5647                                  ;       Routine:        ConDetermineCommand
  5648                                  ;
  5649                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5650                                  ;
  5651                                  ;       input:          DS:EDX  command address
  5652                                  ;
  5653                                  ;       output:         EAX     >=0     = command nbr
  5654                                  ;                               0       = unknown command
  5655                                  ;
  5656                                  ;-----------------------------------------------------------------------------------------------------------------------
  5657 000002CB 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5658 000002CC 51                                              push    ecx                                             ;
  5659 000002CD 56                                              push    esi                                             ;
  5660 000002CE 57                                              push    edi                                             ;
  5661                                  
  5662                                                          upperCaseString                                         ;upper-case string at EDX
  5662 000002CF B01C                <1>  mov al,eUpperCaseString
  5662 000002D1 CD30                <1>  int _svc
  5663                                  
  5664 000002D3 BE[92080000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5665 000002D8 31FF                                            xor     edi,edi                                         ;intialize command number
  5666 000002DA FC                                              cld                                                     ;forward strings
  5667 000002DB AC                      .10                     lodsb                                                   ;command length
  5668 000002DC 0FB6C8                                          movzx   ecx,al                                          ;command length
  5669 000002DF E30D                                            jecxz   .20                                             ;branch if end of table
  5670 000002E1 89F3                                            mov     ebx,esi                                         ;table entry address
  5671 000002E3 01CE                                            add     esi,ecx                                         ;next table entry address
  5672                                  
  5673                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5673 000002E5 B002                <1>  mov al,eCompareMemory
  5673 000002E7 CD30                <1>  int _svc
  5674                                  
  5675 000002E9 E303                                            jecxz   .20                                             ;branch if equal
  5676 000002EB 47                                              inc     edi                                             ;increment command nbr
  5677 000002EC EBED                                            jmp     .10                                             ;repeat
  5678 000002EE 89F8                    .20                     mov     eax,edi                                         ;command number
  5679 000002F0 5F                                              pop     edi                                             ;restore non-volatile regs
  5680 000002F1 5E                                              pop     esi                                             ;
  5681 000002F2 59                                              pop     ecx                                             ;
  5682 000002F3 5B                                              pop     ebx                                             ;
  5683 000002F4 C3                                              ret                                                     ;return
  5684                                  ;-----------------------------------------------------------------------------------------------------------------------
  5685                                  ;
  5686                                  ;       Routine:        ConClear
  5687                                  ;
  5688                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5689                                  ;
  5690                                  ;-----------------------------------------------------------------------------------------------------------------------
  5691                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5691                              <1> ConClear :
  5691 000002F5 B001                <1>  mov al,eClearConsoleScreen
  5691 000002F7 CD30                <1>  int _svc
  5692 000002F9 C3                                              ret                                                     ;return
  5693                                  ;-----------------------------------------------------------------------------------------------------------------------
  5694                                  ;
  5695                                  ;       Routine:        ConDate
  5696                                  ;
  5697                                  ;       Description:    This routine handles the DATE command.
  5698                                  ;
  5699                                  ;-----------------------------------------------------------------------------------------------------------------------
  5700                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5700                              <1> ConDate :
  5700 000002FA BB53090000          <1>  mov ebx,%1
  5700 000002FF B018                <1>  mov al,eReadRealTimeClock
  5700 00000301 CD30                <1>  int _svc
  5701                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5701 00000303 BB53090000          <1>  mov ebx,%1
  5701 00000308 BAC1080000          <1>  mov edx,%2
  5701 0000030D B00D                <1>  mov al,ePutDateString
  5701 0000030F CD30                <1>  int _svc
  5702                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5702 00000311 BAC1080000          <1>  mov edx,%1
  5702 00000316 B00C                <1>  mov al,ePutConsoleString
  5702 00000318 CD30                <1>  int _svc
  5703                                                          putConsoleString  czNewLine                             ;write newline to console
  5703 0000031A BA[FA090000]        <1>  mov edx,%1
  5703 0000031F B00C                <1>  mov al,ePutConsoleString
  5703 00000321 CD30                <1>  int _svc
  5704 00000323 C3                                              ret                                                     ;return
  5705                                  ;-----------------------------------------------------------------------------------------------------------------------
  5706                                  ;
  5707                                  ;       Routine:        ConDay
  5708                                  ;
  5709                                  ;       Description:    This routine handles the DAY command.
  5710                                  ;
  5711                                  ;-----------------------------------------------------------------------------------------------------------------------
  5712                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5712                              <1> ConDay :
  5712 00000324 BB53090000          <1>  mov ebx,%1
  5712 00000329 B018                <1>  mov al,eReadRealTimeClock
  5712 0000032B CD30                <1>  int _svc
  5713                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5713 0000032D BB53090000          <1>  mov ebx,%1
  5713 00000332 BAC1080000          <1>  mov edx,%2
  5713 00000337 B00E                <1>  mov al,ePutDayString
  5713 00000339 CD30                <1>  int _svc
  5714                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5714 0000033B BAC1080000          <1>  mov edx,%1
  5714 00000340 B00C                <1>  mov al,ePutConsoleString
  5714 00000342 CD30                <1>  int _svc
  5715                                                          putConsoleString  czNewLine                             ;write newline to console
  5715 00000344 BA[FA090000]        <1>  mov edx,%1
  5715 00000349 B00C                <1>  mov al,ePutConsoleString
  5715 0000034B CD30                <1>  int _svc
  5716 0000034D C3                                              ret                                                     ;return
  5717                                  ;-----------------------------------------------------------------------------------------------------------------------
  5718                                  ;
  5719                                  ;       Routine:        ConExit
  5720                                  ;
  5721                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5722                                  ;
  5723                                  ;-----------------------------------------------------------------------------------------------------------------------
  5724                                  ConExit                 resetSystem                                             ;issue system reset
  5724                              <1> ConExit :
  5724 0000034E B019                <1>  mov al,eResetSystem
  5724 00000350 CD30                <1>  int _svc
  5725 00000352 C3                                              ret                                                     ;return
  5726                                  ;-----------------------------------------------------------------------------------------------------------------------
  5727                                  ;
  5728                                  ;       Routine:        ConFree
  5729                                  ;
  5730                                  ;       Description:    This routine handles the FREE command.
  5731                                  ;
  5732                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5733                                  ;
  5734                                  ;-----------------------------------------------------------------------------------------------------------------------
  5735 00000353 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5736 00000354 51                                              push    ecx                                             ;
  5737 00000355 56                                              push    esi                                             ;
  5738 00000356 57                                              push    edi                                             ;
  5739                                  ;
  5740                                  ;       Get address parameter
  5741                                  ;
  5742 00000357 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5743 0000035C BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5744 00000361 E830FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5745                                  ;
  5746                                  ;       Convert input parameter from hexadecimal string to binary
  5747                                  ;
  5748 00000366 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5749 0000036D 7421                                            je      .10                                             ;no, branch
  5750 0000036F BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5751                                  
  5752                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5752 00000374 B009                <1>  mov al,eHexadecimalToUnsigned
  5752 00000376 CD30                <1>  int _svc
  5753                                  
  5754 00000378 85C0                                            test    eax,eax                                         ;valid parameter?
  5755 0000037A 7414                                            jz      .10                                             ;no, branch
  5756                                  ;
  5757                                  ;       Free memory block
  5758                                  ;
  5759                                                          freeMemory eax                                          ;free memory
  5759 0000037C 89C2                <1>  mov edx,%1
  5759 0000037E B004                <1>  mov al,eFreeMemory
  5759 00000380 CD30                <1>  int _svc
  5760                                  
  5761 00000382 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5762 00000385 7409                                            je      .10                                             ;no, branch
  5763                                  ;
  5764                                  ;       Indicate memory freed
  5765                                  ;
  5766                                                          putConsoleString czOK                                   ;indicate success
  5766 00000387 BA[FD090000]        <1>  mov edx,%1
  5766 0000038C B00C                <1>  mov al,ePutConsoleString
  5766 0000038E CD30                <1>  int _svc
  5767                                  ;
  5768                                  ;       Restore and return
  5769                                  ;
  5770 00000390 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5771 00000391 5E                                              pop     esi                                             ;
  5772 00000392 59                                              pop     ecx                                             ;
  5773 00000393 5B                                              pop     ebx                                             ;
  5774 00000394 C3                                              ret                                                     ;return
  5775                                  ;-----------------------------------------------------------------------------------------------------------------------
  5776                                  ;
  5777                                  ;       Routine:        ConHour
  5778                                  ;
  5779                                  ;       Description:    This routine Handles the HOUR command.
  5780                                  ;
  5781                                  ;-----------------------------------------------------------------------------------------------------------------------
  5782                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5782                              <1> ConHour :
  5782 00000395 BB53090000          <1>  mov ebx,%1
  5782 0000039A B018                <1>  mov al,eReadRealTimeClock
  5782 0000039C CD30                <1>  int _svc
  5783                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5783 0000039E BB53090000          <1>  mov ebx,%1
  5783 000003A3 BAC1080000          <1>  mov edx,%2
  5783 000003A8 B00F                <1>  mov al,ePutHourString
  5783 000003AA CD30                <1>  int _svc
  5784                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5784 000003AC BAC1080000          <1>  mov edx,%1
  5784 000003B1 B00C                <1>  mov al,ePutConsoleString
  5784 000003B3 CD30                <1>  int _svc
  5785                                                          putConsoleString  czNewLine                             ;write newline to console
  5785 000003B5 BA[FA090000]        <1>  mov edx,%1
  5785 000003BA B00C                <1>  mov al,ePutConsoleString
  5785 000003BC CD30                <1>  int _svc
  5786 000003BE C3                                              ret                                                     ;return
  5787                                  ;-----------------------------------------------------------------------------------------------------------------------
  5788                                  ;
  5789                                  ;       Routine:        ConInt6
  5790                                  ;
  5791                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5792                                  ;
  5793                                  ;-----------------------------------------------------------------------------------------------------------------------
  5794 000003BF 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5795 000003C1 C3                                              ret                                                     ;return (not executed)
  5796                                  ;-----------------------------------------------------------------------------------------------------------------------
  5797                                  ;
  5798                                  ;       Routine:        ConMalloc
  5799                                  ;
  5800                                  ;       Description:    This routine handles the MALLOC command.
  5801                                  ;
  5802                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5803                                  ;
  5804                                  ;-----------------------------------------------------------------------------------------------------------------------
  5805 000003C2 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5806 000003C3 51                                              push    ecx                                             ;
  5807 000003C4 56                                              push    esi                                             ;
  5808 000003C5 57                                              push    edi                                             ;
  5809                                  ;
  5810                                  ;       Get size parameter
  5811                                  ;
  5812 000003C6 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5813 000003CB BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5814 000003D0 E8C1FEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5815                                  ;
  5816                                  ;       Convert input parameter from decimal string to binary
  5817                                  ;
  5818 000003D5 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5819 000003DC 7434                                            je      .10                                             ;no, branch
  5820 000003DE BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5821                                  
  5822                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5822 000003E3 B003                <1>  mov al,eDecimalToUnsigned
  5822 000003E5 CD30                <1>  int _svc
  5823                                  
  5824 000003E7 85C0                                            test    eax,eax                                         ;valid parameter?
  5825 000003E9 7427                                            jz      .10                                             ;no, branch
  5826                                  ;
  5827                                  ;       Allocate memory block
  5828                                  ;
  5829                                                          allocateMemory eax                                      ;allocate memory
  5829 000003EB 89C1                <1>  mov ecx,%1
  5829 000003ED B000                <1>  mov al,eAllocateMemory
  5829 000003EF CD30                <1>  int _svc
  5830                                  
  5831 000003F1 85C0                                            test    eax,eax                                         ;memory allocated?
  5832 000003F3 741D                                            jz      .10                                             ;no, branch
  5833                                  ;
  5834                                  ;       Report allocated memory block address
  5835                                  ;
  5836 000003F5 BAC1080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5837 000003FA 89C1                                            mov     ecx,eax                                         ;memory address
  5838                                  
  5839                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5839 000003FC B01B                <1>  mov al,eUnsignedToHexadecimal
  5839 000003FE CD30                <1>  int _svc
  5840                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5840 00000400 BAC1080000          <1>  mov edx,%1
  5840 00000405 B00C                <1>  mov al,ePutConsoleString
  5840 00000407 CD30                <1>  int _svc
  5841                                                          putConsoleString czNewLine                              ;display new line
  5841 00000409 BA[FA090000]        <1>  mov edx,%1
  5841 0000040E B00C                <1>  mov al,ePutConsoleString
  5841 00000410 CD30                <1>  int _svc
  5842                                  
  5843 00000412 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5844 00000413 5E                                              pop     esi                                             ;
  5845 00000414 59                                              pop     ecx                                             ;
  5846 00000415 5B                                              pop     ebx                                             ;
  5847 00000416 C3                                              ret                                                     ;return
  5848                                  ;-----------------------------------------------------------------------------------------------------------------------
  5849                                  ;
  5850                                  ;       Routine:        ConMem
  5851                                  ;
  5852                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5853                                  ;
  5854                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5855                                  ;
  5856                                  ;-----------------------------------------------------------------------------------------------------------------------
  5857 00000417 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  5858 00000418 56                                              push    esi                                             ;
  5859 00000419 57                                              push    edi                                             ;
  5860                                  ;
  5861                                  ;       Update the source address if a parameter is given.
  5862                                  ;
  5863 0000041A BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5864 0000041F BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5865 00000424 E86DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5866 00000429 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5867 00000430 740E                                            je      .10                                             ;no, branch
  5868 00000432 BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5869                                  
  5870                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5870 00000437 B009                <1>  mov al,eHexadecimalToUnsigned
  5870 00000439 CD30                <1>  int _svc
  5871                                  
  5872 0000043B A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  5873                                  ;
  5874                                  ;       Setup source address and row count.
  5875                                  ;
  5876 00000440 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5877 00000446 31C9                                            xor     ecx,ecx                                         ;zero register
  5878 00000448 B110                                            mov     cl,16                                           ;row count
  5879                                  ;
  5880                                  ;       Start the row with the source address in hexadecimal.
  5881                                  ;
  5882 0000044A 51                      .20                     push    ecx                                             ;save remaining rows
  5883 0000044B BFC1080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5884 00000450 89FA                                            mov     edx,edi                                         ;output buffer address
  5885 00000452 89F1                                            mov     ecx,esi                                         ;console memory address
  5886                                  
  5887                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5887 00000454 B01B                <1>  mov al,eUnsignedToHexadecimal
  5887 00000456 CD30                <1>  int _svc
  5888                                  
  5889 00000458 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  5890 0000045B B020                                            mov     al,' '                                          ;ascii space
  5891 0000045D AA                                              stosb                                                   ;store delimiter
  5892                                  ;
  5893                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5894                                  ;
  5895 0000045E 31C9                                            xor     ecx,ecx                                         ;zero register
  5896 00000460 B110                                            mov     cl,16                                           ;loop count
  5897 00000462 51                      .30                     push    ecx                                             ;save loop count
  5898 00000463 AC                                              lodsb                                                   ;memory byte
  5899 00000464 88C4                                            mov     ah,al                                           ;memory byte
  5900 00000466 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  5901 00000469 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5902 0000046B 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5903 0000046D 7202                                            jb      .40                                             ;yes, skip ahead
  5904 0000046F 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5905 00000471 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5906 00000472 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  5907 00000474 240F                                            and     al,0fh                                          ;mask out high-order bits
  5908 00000476 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5909 00000478 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5910 0000047A 7202                                            jb      .50                                             ;yes, skip ahead
  5911 0000047C 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5912 0000047E AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5913 0000047F B020                                            mov     al,' '                                          ;ascii space
  5914 00000481 AA                                              stosb                                                   ;store ascii space delimiter
  5915 00000482 59                                              pop     ecx                                             ;loop count
  5916 00000483 E2DD                                            loop    .30                                             ;next
  5917                                  ;
  5918                                  ;       Output printable ASCII character section for the row.
  5919                                  ;
  5920 00000485 83EE10                                          sub     esi,16                                          ;reset source pointer
  5921 00000488 B110                                            mov     cl,16                                           ;loop count
  5922 0000048A AC                      .60                     lodsb                                                   ;source byte
  5923 0000048B 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  5924 0000048D 7204                                            jb      .70                                             ;no, skip ahead
  5925 0000048F 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  5926 00000491 7202                                            jb      .80                                             ;yes, skip ahead
  5927 00000493 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  5928 00000495 AA                      .80                     stosb                                                   ;store printable ascii byte
  5929 00000496 E2F2                                            loop    .60                                             ;next source byte
  5930 00000498 30C0                                            xor     al,al                                           ;nul-terminator
  5931 0000049A AA                                              stosb                                                   ;terminate output line
  5932                                  ;
  5933                                  ;       Display constructed output buffer and newline.
  5934                                  ;
  5935                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5935 0000049B BAC1080000          <1>  mov edx,%1
  5935 000004A0 B00C                <1>  mov al,ePutConsoleString
  5935 000004A2 CD30                <1>  int _svc
  5936                                                          putConsoleString czNewLine                              ;display new line
  5936 000004A4 BA[FA090000]        <1>  mov edx,%1
  5936 000004A9 B00C                <1>  mov al,ePutConsoleString
  5936 000004AB CD30                <1>  int _svc
  5937                                  ;
  5938                                  ;       Repeat until all lines displayed and preserve source address.
  5939                                  ;
  5940 000004AD 59                                              pop     ecx                                             ;remaining rows
  5941 000004AE E29A                                            loop    .20                                             ;next row
  5942 000004B0 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  5943 000004B6 5F                                              pop     edi                                             ;restore regs
  5944 000004B7 5E                                              pop     esi                                             ;
  5945 000004B8 5B                                              pop     ebx                                             ;
  5946 000004B9 C3                                              ret                                                     ;return
  5947                                  ;-----------------------------------------------------------------------------------------------------------------------
  5948                                  ;
  5949                                  ;       Routine:        ConMinute
  5950                                  ;
  5951                                  ;       Description:    This routine Handles the MINUTE command.
  5952                                  ;
  5953                                  ;-----------------------------------------------------------------------------------------------------------------------
  5954                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5954                              <1> ConMinute :
  5954 000004BA BB53090000          <1>  mov ebx,%1
  5954 000004BF B018                <1>  mov al,eReadRealTimeClock
  5954 000004C1 CD30                <1>  int _svc
  5955                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5955 000004C3 BB53090000          <1>  mov ebx,%1
  5955 000004C8 BAC1080000          <1>  mov edx,%2
  5955 000004CD B010                <1>  mov al,ePutMinuteString
  5955 000004CF CD30                <1>  int _svc
  5956                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5956 000004D1 BAC1080000          <1>  mov edx,%1
  5956 000004D6 B00C                <1>  mov al,ePutConsoleString
  5956 000004D8 CD30                <1>  int _svc
  5957                                                          putConsoleString  czNewLine                             ;write newline to console
  5957 000004DA BA[FA090000]        <1>  mov edx,%1
  5957 000004DF B00C                <1>  mov al,ePutConsoleString
  5957 000004E1 CD30                <1>  int _svc
  5958 000004E3 C3                                              ret                                                     ;return
  5959                                  ;-----------------------------------------------------------------------------------------------------------------------
  5960                                  ;
  5961                                  ;       Routine:        ConMonth
  5962                                  ;
  5963                                  ;       Description:    This routine Handles the MONTH command.
  5964                                  ;
  5965                                  ;-----------------------------------------------------------------------------------------------------------------------
  5966                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5966                              <1> ConMonth :
  5966 000004E4 BB53090000          <1>  mov ebx,%1
  5966 000004E9 B018                <1>  mov al,eReadRealTimeClock
  5966 000004EB CD30                <1>  int _svc
  5967                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5967 000004ED BB53090000          <1>  mov ebx,%1
  5967 000004F2 BAC1080000          <1>  mov edx,%2
  5967 000004F7 B011                <1>  mov al,ePutMonthString
  5967 000004F9 CD30                <1>  int _svc
  5968                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5968 000004FB BAC1080000          <1>  mov edx,%1
  5968 00000500 B00C                <1>  mov al,ePutConsoleString
  5968 00000502 CD30                <1>  int _svc
  5969                                                          putConsoleString  czNewLine                             ;write newline to console
  5969 00000504 BA[FA090000]        <1>  mov edx,%1
  5969 00000509 B00C                <1>  mov al,ePutConsoleString
  5969 0000050B CD30                <1>  int _svc
  5970 0000050D C3                                              ret                                                     ;return
  5971                                  ;-----------------------------------------------------------------------------------------------------------------------
  5972                                  ;
  5973                                  ;       Routine:        ConMonthName
  5974                                  ;
  5975                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5976                                  ;
  5977                                  ;-----------------------------------------------------------------------------------------------------------------------
  5978                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5978                              <1> ConMonthName :
  5978 0000050E BB53090000          <1>  mov ebx,%1
  5978 00000513 B018                <1>  mov al,eReadRealTimeClock
  5978 00000515 CD30                <1>  int _svc
  5979                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5979 00000517 BB53090000          <1>  mov ebx,%1
  5979 0000051C BAC1080000          <1>  mov edx,%2
  5979 00000521 B012                <1>  mov al,ePutMonthNameString
  5979 00000523 CD30                <1>  int _svc
  5980                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5980 00000525 BAC1080000          <1>  mov edx,%1
  5980 0000052A B00C                <1>  mov al,ePutConsoleString
  5980 0000052C CD30                <1>  int _svc
  5981                                                          putConsoleString   czNewLine                            ;write newline to console
  5981 0000052E BA[FA090000]        <1>  mov edx,%1
  5981 00000533 B00C                <1>  mov al,ePutConsoleString
  5981 00000535 CD30                <1>  int _svc
  5982 00000537 C3                                              ret                                                     ;return
  5983                                  ;-----------------------------------------------------------------------------------------------------------------------
  5984                                  ;
  5985                                  ;       Routine:        ConPCIProbe
  5986                                  ;
  5987                                  ;       Description:    This routine handles the PCIProbe command.
  5988                                  ;
  5989                                  ;-----------------------------------------------------------------------------------------------------------------------
  5990 00000538 53                      ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5991                                  ;
  5992                                  ;       Initialize variables.
  5993                                  ;       Construct PCI selector.
  5994                                  ;       Read PCI configuration data.
  5995                                  ;
  5996 00000539 BB5B090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  5997 0000053E E868000000                                      call    ConInitPCIContext                               ;initialize PCI struct
  5998 00000543 E878000000              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5999 00000548 E894000000                                      call    ConReadPCIConfigData                            ;read the configuration data
  6000                                  ;
  6001                                  ;       Interpret PCI data value and display finding.
  6002                                  ;
  6003 0000054D 83F8FF                                          cmp     eax,-1                                          ;function defined?
  6004 00000550 7508                                            jne     .20                                             ;yes, branch
  6005 00000552 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  6006 00000556 744A                                            je      .40                                             ;yes, skip to next device
  6007 00000558 EB41                                            jmp     short .30                                       ;no, skip to next function
  6008                                  ;
  6009                                  ;       Build PCI identifying string.
  6010                                  ;       Write identifying string to console.
  6011                                  ;       Determine the vendor and chip.
  6012                                  ;       Write vendor and chip to console.
  6013                                  ;
  6014 0000055A BA32090000              .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6015 0000055F E88E000000                                      call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6016 00000564 E8CA000000                                      call    ConInterpretPCIData                             ;update flags based on data
  6017                                  
  6018                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6018 00000569 BA32090000          <1>  mov edx,%1
  6018 0000056E B00C                <1>  mov al,ePutConsoleString
  6018 00000570 CD30                <1>  int _svc
  6019                                                          putConsoleString czSpace                                ;space delimiter
  6019 00000572 BA[A00A0000]        <1>  mov edx,%1
  6019 00000577 B00C                <1>  mov al,ePutConsoleString
  6019 00000579 CD30                <1>  int _svc
  6020                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6020 0000057B 8B530C              <1>  mov edx,%1
  6020 0000057E B00C                <1>  mov al,ePutConsoleString
  6020 00000580 CD30                <1>  int _svc
  6021                                                          putConsoleString czSpace                                ;space delimiter
  6021 00000582 BA[A00A0000]        <1>  mov edx,%1
  6021 00000587 B00C                <1>  mov al,ePutConsoleString
  6021 00000589 CD30                <1>  int _svc
  6022                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6022 0000058B 8B5310              <1>  mov edx,%1
  6022 0000058E B00C                <1>  mov al,ePutConsoleString
  6022 00000590 CD30                <1>  int _svc
  6023                                                          putConsoleString czNewLine                              ;display new line
  6023 00000592 BA[FA090000]        <1>  mov edx,%1
  6023 00000597 B00C                <1>  mov al,ePutConsoleString
  6023 00000599 CD30                <1>  int _svc
  6024                                  ;
  6025                                  ;       Next function.
  6026                                  ;
  6027 0000059B E85F010000              .30                     call    ConNextPCIFunction                              ;next function
  6028 000005A0 72A1                                            jb      .10                                             ;continue if no overflow
  6029                                  ;
  6030                                  ;       Next device, bus.
  6031                                  ;
  6032 000005A2 E866010000              .40                     call    ConNextPCIDevice                                ;next device, bus
  6033 000005A7 729A                                            jb      .10                                             ;continue if no overflow
  6034                                  ;
  6035                                  ;       Restore and return.
  6036                                  ;
  6037 000005A9 5B                                              pop     ebx                                             ;restore non-volatile regs
  6038 000005AA C3                                              ret                                                     ;return
  6039                                  ;-----------------------------------------------------------------------------------------------------------------------
  6040                                  ;
  6041                                  ;       Routine:        ConInitPCIContext
  6042                                  ;
  6043                                  ;       Description:    This routine initializes a PCI structure.
  6044                                  ;
  6045                                  ;       In:             DS:EBX  PCI structure address
  6046                                  ;
  6047                                  ;-----------------------------------------------------------------------------------------------------------------------
  6048 000005AB 51                      ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  6049 000005AC 57                                              push    edi                                             ;
  6050 000005AD 06                                              push    es                                              ;
  6051                                  ;
  6052                                  ;       Zero context.
  6053                                  ;
  6054 000005AE 1E                                              push    ds                                              ;load data segment...
  6055 000005AF 07                                              pop     es                                              ;...into extra segment
  6056 000005B0 89DF                                            mov     edi,ebx                                         ;PCI structure offset
  6057 000005B2 B90C000000                                      mov     ecx,EPCILEN                                     ;PCI structure length
  6058 000005B7 30C0                                            xor     al,al                                           ;zero
  6059 000005B9 FC                                              cld                                                     ;forward strings
  6060 000005BA F3AA                                            rep     stosb                                           ;zero structure members
  6061                                  ;
  6062                                  ;       Restore and return.
  6063                                  ;
  6064 000005BC 07                                              pop     es                                              ;restore non-volatile regs
  6065 000005BD 5F                                              pop     edi                                             ;
  6066 000005BE 59                                              pop     ecx                                             ;
  6067 000005BF C3                                              ret                                                     ;return
  6068                                  ;-----------------------------------------------------------------------------------------------------------------------
  6069                                  ;
  6070                                  ;       Routine:        ConBuildPCISelector
  6071                                  ;
  6072                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  6073                                  ;
  6074                                  ;       In:             DS:EBX  PCI structure address
  6075                                  ;
  6076                                  ;       Out:            EAX     bus, device, function, register selector
  6077                                  ;
  6078                                  ;-----------------------------------------------------------------------------------------------------------------------
  6079 000005C0 8A23                    ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  6080 000005C2 8A5301                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  6081 000005C5 C0E203                                          shl     dl,3                                            ;DL = dddd d000
  6082 000005C8 8A4302                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  6083 000005CB 2407                                            and     al,007h                                         ;AL = 0000 0fff
  6084 000005CD 08D0                                            or      al,dl                                           ;AL = dddd dfff
  6085 000005CF 0FB7C0                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  6086 000005D2 C1E008                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  6087 000005D5 8A4303                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6088 000005D8 0D00000080                                      or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6089 000005DD 894304                                          mov     [ebx+PCI.selector],eax                          ;set selector
  6090 000005E0 C3                                              ret                                                     ;return
  6091                                  ;-----------------------------------------------------------------------------------------------------------------------
  6092                                  ;
  6093                                  ;       Routine:        ConReadPCIConfigData
  6094                                  ;
  6095                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  6096                                  ;
  6097                                  ;       In:             DS:EBX  PCI structure address
  6098                                  ;
  6099                                  ;       Out:            EAX     config data
  6100                                  ;
  6101                                  ;-----------------------------------------------------------------------------------------------------------------------
  6102 000005E1 B60C                    ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  6103 000005E3 B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  6104 000005E5 8B4304                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  6105 000005E8 EF                                              out     dx,eax                                          ;select bus, device, function, reg
  6106 000005E9 B60C                                            mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  6107 000005EB B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  6108 000005ED ED                                              in      eax,dx                                          ;read register
  6109 000005EE 894308                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  6110 000005F1 C3                                              ret                                                     ;return
  6111                                  ;-----------------------------------------------------------------------------------------------------------------------
  6112                                  ;
  6113                                  ;       Routine:        ConBuildPCIIdent
  6114                                  ;
  6115                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  6116                                  ;                       Function code values.
  6117                                  ;
  6118                                  ;       In:             DS:EBX  PCI structure address
  6119                                  ;                       DS:EDX  output buffer address 999.99.9\0
  6120                                  ;
  6121                                  ;-----------------------------------------------------------------------------------------------------------------------
  6122 000005F2 57                      ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  6123 000005F3 06                                              push    es                                              ;
  6124                                  ;
  6125                                  ;       Establish addressability
  6126                                  ;
  6127 000005F4 1E                                              push    ds                                              ;load data segment...
  6128 000005F5 07                                              pop     es                                              ;...into extra segment reg
  6129                                  ;
  6130                                  ;       Build identifier string (bus.device.function)
  6131                                  ;
  6132 000005F6 89D7                                            mov     edi,edx                                         ;output buffer address
  6133 000005F8 8A03                                            mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  6134 000005FA 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  6135 000005FC B164                                            mov     cl,100                                          ;divisor (10^2)
  6136 000005FE F6F1                                            div     cl                                              ;AL=100's, AH=bus MOD 100
  6137 00000600 0C30                                            or      al,30h                                          ;apply ASCII zone
  6138 00000602 FC                                              cld                                                     ;forward strings
  6139 00000603 AA                                              stosb                                                   ;store 100's digit
  6140 00000604 88E0                                            mov     al,ah                                           ;bus MOD 100
  6141 00000606 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  6142 00000608 B10A                                            mov     cl,10                                           ;divisor (10^1)
  6143 0000060A F6F1                                            div     cl                                              ;AL=10's, AH=1's
  6144 0000060C 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  6145 00000610 66AB                                            stosw                                                   ;store 10's and 1's
  6146 00000612 B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6147 00000614 AA                                              stosb                                                   ;store delimiter
  6148 00000615 8A4301                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  6149 00000618 30E4                                            xor     ah,ah                                           ;zero high order dividend
  6150 0000061A B10A                                            mov     cl,10                                           ;divisor (10^1)
  6151 0000061C F6F1                                            div     cl                                              ;AL=10's, AH=1's
  6152 0000061E 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  6153 00000622 66AB                                            stosw                                                   ;store 10's and 1's
  6154 00000624 B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6155 00000626 AA                                              stosb                                                   ;store delimiter
  6156 00000627 8A4302                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  6157 0000062A 0C30                                            or      al,30h                                          ;apply ASCII zone
  6158 0000062C AA                                              stosb                                                   ;store 1's
  6159 0000062D 30C0                                            xor     al,al                                           ;null terminator
  6160 0000062F AA                                              stosb                                                   ;store terminator
  6161                                  ;
  6162                                  ;       Restore and return.
  6163                                  ;
  6164 00000630 07                                              pop     es                                              ;restore non-volatile regs
  6165 00000631 5F                                              pop     edi                                             ;
  6166 00000632 C3                                              ret                                                     ;return
  6167                                  ;-----------------------------------------------------------------------------------------------------------------------
  6168                                  ;
  6169                                  ;       Routine:        ConInterpretPCIData
  6170                                  ;
  6171                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  6172                                  ;
  6173                                  ;       In:             DS:EBX  PCI structure address
  6174                                  ;
  6175                                  ;-----------------------------------------------------------------------------------------------------------------------
  6176 00000633 B8[59090000]            ConInterpretPCIData     mov     eax,czApple
  6177 00000638 66817B086B10                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  6178 0000063E 751A                                            jne     .10                                             ;no, branch
  6179 00000640 BA[D20A0000]                                    mov     edx,czUSBController
  6180 00000645 66837B0A3F                                      cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  6181 0000064A 0F84A8000000                                    je      .40                                             ;yes, branch
  6182 00000650 BA[090A0000]                                    mov     edx,czOther                                     ;other
  6183 00000655 E99E000000                                      jmp     .40                                             ;continue
  6184 0000065A B8[F1090000]            .10                     mov     eax,czIntel                                     ;Intel
  6185 0000065F 66817B088680                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  6186 00000665 7559                                            jne     .20                                             ;no, branch
  6187 00000667 BA[600A0000]                                    mov     edx,czPro1000MT                                 ;Pro/1000 MT
  6188 0000066C 66817B0A0F10                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  6189 00000672 0F8480000000                                    je      .40                                             ;yes, branch
  6190 00000678 BA[0F0A0000]                                    mov     edx,czPCIAndMem                                 ;PCI and Memory
  6191 0000067D 66817B0A3712                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  6192 00000683 7473                                            je      .40                                             ;yes, branch
  6193 00000685 BA[5F090000]                                    mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  6194 0000068A 66817B0A1524                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  6195 00000690 7466                                            je      .40                                             ;yes, branch
  6196 00000692 BA[1E0A0000]                                    mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  6197 00000697 66817B0A0070                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  6198 0000069D 7459                                            je      .40                                             ;yes, branch
  6199 0000069F BA[490B0000]                                    mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  6200 000006A4 66817B0A1171                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  6201 000006AA 744C                                            je      .40                                             ;yes, branch
  6202 000006AC BA[360A0000]                                    mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  6203 000006B1 66817B0A1371                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  6204 000006B7 743F                                            je      .40                                             ;yes, branch
  6205 000006B9 BA[090A0000]                                    mov     edx,czOther                                     ;other
  6206 000006BE EB38                                            jmp     .40                                             ;continue
  6207 000006C0 B8[020A0000]            .20                     mov     eax,czOracle                                    ;Oracle
  6208 000006C5 66817B08EE80                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  6209 000006CB 7521                                            jne     .30                                             ;no, branch
  6210 000006CD BA[F30A0000]                                    mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  6211 000006D2 66817B0AEFBE                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  6212 000006D8 741E                                            je      .40                                             ;yes, branch
  6213 000006DA BA[E10A0000]                                    mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  6214 000006DF 66817B0AFECA                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  6215 000006E5 7411                                            je      .40                                             ;yes, branch
  6216 000006E7 BA[090A0000]                                    mov     edx,czOther                                     ;other
  6217 000006EC EB0A                                            jmp     .40                                             ;continue
  6218 000006EE B8[090A0000]            .30                     mov     eax,czOther                                     ;other
  6219 000006F3 BA[090A0000]                                    mov     edx,czOther                                     ;other
  6220 000006F8 89430C                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  6221 000006FB 895310                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  6222 000006FE C3                                              ret                                                     ;return
  6223                                  ;-----------------------------------------------------------------------------------------------------------------------
  6224                                  ;
  6225                                  ;       Routine:        ConNextPCIFunction
  6226                                  ;
  6227                                  ;       Description:    This routine increments the function of the device.
  6228                                  ;
  6229                                  ;       In:             DS:EBX  PCI structure address
  6230                                  ;
  6231                                  ;       Out:            CY      0 = overflow
  6232                                  ;                               1 = no overflow, continue
  6233                                  ;
  6234                                  ;-----------------------------------------------------------------------------------------------------------------------
  6235 000006FF FE4302                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  6236 00000702 807B0208                                        cmp     byte [ebx+PCI.function],8                       ;at limit?
  6237 00000706 7204                                            jb      .10                                             ;no, continue
  6238 00000708 C6430200                                        mov     byte [ebx+PCI.function],0                       ;zero function
  6239 0000070C C3                      .10                     ret                                                     ;return
  6240                                  ;-----------------------------------------------------------------------------------------------------------------------
  6241                                  ;
  6242                                  ;       Routine:        ConNextPCIDevice
  6243                                  ;
  6244                                  ;       Description:    This routine increments the device of the PCI across buses.
  6245                                  ;
  6246                                  ;       In:             DS:EBX  PCI structure address
  6247                                  ;
  6248                                  ;       Out:            CY      0 = overflow
  6249                                  ;                               1 = no overflow, continue
  6250                                  ;
  6251                                  ;-----------------------------------------------------------------------------------------------------------------------
  6252 0000070D FE4301                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  6253 00000710 807B0120                                        cmp     byte [ebx+PCI.device],32                        ;at limit?
  6254 00000714 720E                                            jb      .10                                             ;no, continue
  6255 00000716 C6430100                                        mov     byte [ebx+PCI.device],0                         ;zero device
  6256 0000071A FE03                                            inc     byte [ebx+PCI.bus]                              ;next bus
  6257 0000071C 803B08                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  6258 0000071F 7203                                            jb      .10                                             ;no, continue
  6259 00000721 C60300                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  6260 00000724 C3                      .10                     ret                                                     ;return
  6261                                  ;-----------------------------------------------------------------------------------------------------------------------
  6262                                  ;
  6263                                  ;       Routine:        ConSecond
  6264                                  ;
  6265                                  ;       Description:    This routine Handles the SECOND command.
  6266                                  ;
  6267                                  ;-----------------------------------------------------------------------------------------------------------------------
  6268                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6268                              <1> ConSecond :
  6268 00000725 BB53090000          <1>  mov ebx,%1
  6268 0000072A B018                <1>  mov al,eReadRealTimeClock
  6268 0000072C CD30                <1>  int _svc
  6269                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  6269 0000072E BB53090000          <1>  mov ebx,%1
  6269 00000733 BAC1080000          <1>  mov edx,%2
  6269 00000738 B013                <1>  mov al,ePutSecondString
  6269 0000073A CD30                <1>  int _svc
  6270                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6270 0000073C BAC1080000          <1>  mov edx,%1
  6270 00000741 B00C                <1>  mov al,ePutConsoleString
  6270 00000743 CD30                <1>  int _svc
  6271                                                          putConsoleString  czNewLine                             ;write newline to console
  6271 00000745 BA[FA090000]        <1>  mov edx,%1
  6271 0000074A B00C                <1>  mov al,ePutConsoleString
  6271 0000074C CD30                <1>  int _svc
  6272 0000074E C3                                              ret                                                     ;return
  6273                                  ;-----------------------------------------------------------------------------------------------------------------------
  6274                                  ;
  6275                                  ;       Routine:        ConTime
  6276                                  ;
  6277                                  ;       Description:    This routine Handles the TIME command.
  6278                                  ;
  6279                                  ;-----------------------------------------------------------------------------------------------------------------------
  6280                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6280                              <1> ConTime :
  6280 0000074F BB53090000          <1>  mov ebx,%1
  6280 00000754 B018                <1>  mov al,eReadRealTimeClock
  6280 00000756 CD30                <1>  int _svc
  6281                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6281 00000758 BB53090000          <1>  mov ebx,%1
  6281 0000075D BAC1080000          <1>  mov edx,%2
  6281 00000762 B014                <1>  mov al,ePutTimeString
  6281 00000764 CD30                <1>  int _svc
  6282                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6282 00000766 BAC1080000          <1>  mov edx,%1
  6282 0000076B B00C                <1>  mov al,ePutConsoleString
  6282 0000076D CD30                <1>  int _svc
  6283                                                          putConsoleString  czNewLine                             ;write newline to console
  6283 0000076F BA[FA090000]        <1>  mov edx,%1
  6283 00000774 B00C                <1>  mov al,ePutConsoleString
  6283 00000776 CD30                <1>  int _svc
  6284 00000778 C3                                              ret                                                     ;return
  6285                                  ;-----------------------------------------------------------------------------------------------------------------------
  6286                                  ;
  6287                                  ;       Routine:        ConVersion
  6288                                  ;
  6289                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6290                                  ;
  6291                                  ;-----------------------------------------------------------------------------------------------------------------------
  6292                                  ConVersion              putConsoleString czTitle                                ;display version message
  6292                              <1> ConVersion :
  6292 00000779 BA[A20A0000]        <1>  mov edx,%1
  6292 0000077E B00C                <1>  mov al,ePutConsoleString
  6292 00000780 CD30                <1>  int _svc
  6293 00000782 C3                                              ret                                                     ;return
  6294                                  ;-----------------------------------------------------------------------------------------------------------------------
  6295                                  ;
  6296                                  ;       Routine:        ConWeekday
  6297                                  ;
  6298                                  ;       Description:    This routine handles the WEEKDAY command.
  6299                                  ;
  6300                                  ;-----------------------------------------------------------------------------------------------------------------------
  6301                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6301                              <1> ConWeekday :
  6301 00000783 BB53090000          <1>  mov ebx,%1
  6301 00000788 B018                <1>  mov al,eReadRealTimeClock
  6301 0000078A CD30                <1>  int _svc
  6302                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6302 0000078C BB53090000          <1>  mov ebx,%1
  6302 00000791 BAC1080000          <1>  mov edx,%2
  6302 00000796 B015                <1>  mov al,ePutWeekdayString
  6302 00000798 CD30                <1>  int _svc
  6303                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6303 0000079A BAC1080000          <1>  mov edx,%1
  6303 0000079F B00C                <1>  mov al,ePutConsoleString
  6303 000007A1 CD30                <1>  int _svc
  6304                                                          putConsoleString  czNewLine                             ;write newline to console
  6304 000007A3 BA[FA090000]        <1>  mov edx,%1
  6304 000007A8 B00C                <1>  mov al,ePutConsoleString
  6304 000007AA CD30                <1>  int _svc
  6305 000007AC C3                                              ret                                                     ;return
  6306                                  ;-----------------------------------------------------------------------------------------------------------------------
  6307                                  ;
  6308                                  ;       Routine:        ConWeekdayName
  6309                                  ;
  6310                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6311                                  ;
  6312                                  ;-----------------------------------------------------------------------------------------------------------------------
  6313                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6313                              <1> ConWeekdayName :
  6313 000007AD BB53090000          <1>  mov ebx,%1
  6313 000007B2 B018                <1>  mov al,eReadRealTimeClock
  6313 000007B4 CD30                <1>  int _svc
  6314                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6314 000007B6 BB53090000          <1>  mov ebx,%1
  6314 000007BB BAC1080000          <1>  mov edx,%2
  6314 000007C0 B016                <1>  mov al,ePutWeekdayNameString
  6314 000007C2 CD30                <1>  int _svc
  6315                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6315 000007C4 BAC1080000          <1>  mov edx,%1
  6315 000007C9 B00C                <1>  mov al,ePutConsoleString
  6315 000007CB CD30                <1>  int _svc
  6316                                                          putConsoleString     czNewLine                                  ;write newline to console
  6316 000007CD BA[FA090000]        <1>  mov edx,%1
  6316 000007D2 B00C                <1>  mov al,ePutConsoleString
  6316 000007D4 CD30                <1>  int _svc
  6317 000007D6 C3                                              ret                                                             ;return
  6318                                  ;-----------------------------------------------------------------------------------------------------------------------
  6319                                  ;
  6320                                  ;       Routine:        ConYear
  6321                                  ;
  6322                                  ;       Description:    This routine Handles the YEAR command.
  6323                                  ;
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6325                              <1> ConYear :
  6325 000007D7 BB53090000          <1>  mov ebx,%1
  6325 000007DC B018                <1>  mov al,eReadRealTimeClock
  6325 000007DE CD30                <1>  int _svc
  6326                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6326 000007E0 BB53090000          <1>  mov ebx,%1
  6326 000007E5 BAC1080000          <1>  mov edx,%2
  6326 000007EA B017                <1>  mov al,ePutYearString
  6326 000007EC CD30                <1>  int _svc
  6327                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6327 000007EE BAC1080000          <1>  mov edx,%1
  6327 000007F3 B00C                <1>  mov al,ePutConsoleString
  6327 000007F5 CD30                <1>  int _svc
  6328                                                          putConsoleString  czNewLine                             ;write newline to console
  6328 000007F7 BA[FA090000]        <1>  mov edx,%1
  6328 000007FC B00C                <1>  mov al,ePutConsoleString
  6328 000007FE CD30                <1>  int _svc
  6329 00000800 C3                                              ret                                                     ;return
  6330                                  ;-----------------------------------------------------------------------------------------------------------------------
  6331                                  ;
  6332                                  ;       Routine:        ConYearIsLeap
  6333                                  ;
  6334                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6335                                  ;
  6336                                  ;-----------------------------------------------------------------------------------------------------------------------
  6337                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6337                              <1> ConYearIsLeap :
  6337 00000801 BB53090000          <1>  mov ebx,%1
  6337 00000806 B018                <1>  mov al,eReadRealTimeClock
  6337 00000808 CD30                <1>  int _svc
  6338                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6338 0000080A BB53090000          <1>  mov ebx,%1
  6338 0000080F B00A                <1>  mov al,eIsLeapYear
  6338 00000811 CD30                <1>  int _svc
  6339                                  
  6340 00000813 E30B                                            jecxz   .10                                             ;branch if not leap
  6341                                  
  6342                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6342 00000815 BA[0F0B0000]        <1>  mov edx,%1
  6342 0000081A B00C                <1>  mov al,ePutConsoleString
  6342 0000081C CD30                <1>  int _svc
  6343                                  
  6344 0000081E EB09                                            jmp     .20                                             ;continue
  6345                                  
  6346                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6346                              <1> .10 :
  6346 00000820 BA[2A0B0000]        <1>  mov edx,%1
  6346 00000825 B00C                <1>  mov al,ePutConsoleString
  6346 00000827 CD30                <1>  int _svc
  6347 00000829 C3                      .20                     ret                                                     ;return
  6348                                  ;-----------------------------------------------------------------------------------------------------------------------
  6349                                  ;
  6350                                  ;       Tables
  6351                                  ;
  6352                                  ;-----------------------------------------------------------------------------------------------------------------------
  6353                                                                                                                  ;---------------------------------------
  6354                                                                                                                  ;  Command Jump Table
  6355                                                                                                                  ;---------------------------------------
  6356                                  tConJmpTbl              equ     $                                               ;command jump table
  6357 0000082A AD070000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6358 0000082E 01080000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6359 00000832 0E050000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6360 00000836 38050000                                        dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6361 0000083A 4E030000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  6362 0000083E 79070000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  6363 00000842 83070000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6364 00000846 C2030000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6365 0000084A 17040000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  6366 0000084E BA040000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  6367 00000852 25070000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  6368 00000856 F5020000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  6369 0000085A 38050000                                        dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6370 0000085E E4040000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  6371 00000862 FA020000                                        dd      ConDate         - ConCode                       ;date command routine offset
  6372 00000866 4E030000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  6373 0000086A 53030000                                        dd      ConFree         - ConCode                       ;free command routine offset
  6374 0000086E 95030000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  6375 00000872 BF030000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  6376 00000876 4E030000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  6377 0000087A 4F070000                                        dd      ConTime         - ConCode                       ;time command routine offset
  6378 0000087E D7070000                                        dd      ConYear         - ConCode                       ;year command routine offset
  6379 00000882 F5020000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  6380 00000886 24030000                                        dd      ConDay          - ConCode                       ;day command routine offset
  6381 0000088A 17040000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  6382 0000088E 79070000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  6383                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6384                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6385                                                                                                                  ;---------------------------------------
  6386                                                                                                                  ;  Command Name Table
  6387                                                                                                                  ;---------------------------------------
  6388                                  tConCmdTbl              equ     $                                               ;command name table
  6389 00000892 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6389 0000089B 4E414D4500         
  6390 000008A0 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6390 000008A9 45415000           
  6391 000008AD 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  6391 000008B6 4D4500             
  6392 000008B9 0950434950524F4245-                             db      9,"PCIPROBE",0                                  ;pciprobe command
  6392 000008C2 00                 
  6393 000008C3 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  6393 000008CC 00                 
  6394 000008CD 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  6395 000008D6 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  6396 000008DF 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  6397 000008E7 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  6398 000008EF 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  6399 000008F7 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  6400 000008FF 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  6401 00000906 064C5350434900                                  db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6402 0000090D 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  6403 00000914 054441544500                                    db      5,"DATE",0                                      ;date command
  6404 0000091A 054558495400                                    db      5,"EXIT",0                                      ;exit command
  6405 00000920 054652454500                                    db      5,"FREE",0                                      ;free command
  6406 00000926 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  6407 0000092C 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  6408 00000932 055155495400                                    db      5,"QUIT",0                                      ;quit command
  6409 00000938 0554494D4500                                    db      5,"TIME",0                                      ;time command
  6410 0000093E 055945415200                                    db      5,"YEAR",0                                      ;year command
  6411 00000944 04434C5300                                      db      4,"CLS",0                                       ;cls command
  6412 00000949 0444415900                                      db      4,"DAY",0                                       ;day command
  6413 0000094E 044D454D00                                      db      4,"MEM",0                                       ;mem command
  6414 00000953 0456455200                                      db      4,"VER",0                                       ;ver command
  6415 00000958 00                                              db      0                                               ;end of table
  6416                                  ;-----------------------------------------------------------------------------------------------------------------------
  6417                                  ;
  6418                                  ;       Constants
  6419                                  ;
  6420                                  ;-----------------------------------------------------------------------------------------------------------------------
  6421 00000959 4170706C6500            czApple                 db      "Apple",0                                       ;vendor name string
  6422 0000095F 41757265616C204144-     czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6422 00000968 3138383120534F554E-
  6422 00000971 444D415800         
  6423 00000976 42617365206D656D6F-     czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6423 0000097F 72793A2000         
  6424 00000984 45746865726E657420-     czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6424 0000098D 616461707465722066-
  6424 00000996 6F756E640D0A00     
  6425 0000099D 45746865726E657420-     czEthernetAddressable   db      "Ethernet adapter addressable",13,10,0          ;adapter is mmio addressable
  6425 000009A6 616461707465722061-
  6425 000009AF 64647265737361626C-
  6425 000009B8 650D0A00           
  6426 000009BC 45746865726E657420-     czEthernetNotAddressable db     "Ethernet adapter not addressable",13,10,0      ;adapter is not mmio addressable
  6426 000009C5 61646170746572206E-
  6426 000009CE 6F7420616464726573-
  6426 000009D7 7361626C650D0A00   
  6427 000009DF 457874656E64656420-     czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6427 000009E8 6D656D6F72793A2000 
  6428 000009F1 496E74656C00            czIntel                 db      "Intel",0                                       ;vendor name string
  6429 000009F7 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  6430 000009FA 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  6431 000009FD 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  6432 00000A02 4F7261636C6500          czOracle                db      "Oracle",0                                      ;vendor name string
  6433 00000A09 4F7468657200            czOther                 db      "Other",0                                       ;default name string
  6434 00000A0F 5043492026204D656D-     czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6434 00000A18 6F727900           
  6435 00000A1C 2E00                    czPeriod                db      ".",0                                           ;period delimiter
  6436 00000A1E 504949583320504349-     czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6436 00000A27 2D746F2D4953412042-
  6436 00000A30 726964676500       
  6437 00000A36 50494958342F34452F-     czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6437 00000A3F 344D20506F77657220-
  6437 00000A48 4D616E6167656D656E-
  6437 00000A51 7420436F6E74726F6C-
  6437 00000A5A 6C657200           
  6438 00000A5E 3A00                    czPrompt                db      ":",0                                           ;prompt string
  6439 00000A60 50726F2F3130303020-     czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6439 00000A69 4D542045746865726E-
  6439 00000A72 657420416461707465-
  6439 00000A7B 7200               
  6440 00000A7D 42617365206D656D6F-     czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6440 00000A86 72792062656C6F7720-
  6440 00000A8F 454244412028496E74-
  6440 00000A98 20313268293A2000   
  6441 00000AA0 2000                    czSpace                 db      " ",0                                           ;space delimiter
  6442 00000AA2 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6442 00000AAB 65726174696E672053-
  6442 00000AB4 797374656D20312E30-
  6442 00000ABD 0D0A00             
  6443 00000AC0 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6443 00000AC9 6F6D6D616E640D0A00 
  6444 00000AD2 55534220436F6E7472-     czUSBController         db      "USB Controller",0                              ;USB controller string
  6444 00000ADB 6F6C6C657200       
  6445 00000AE1 5669727475616C426F-     czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6445 00000AEA 782044657669636500 
  6446 00000AF3 5669727475616C426F-     czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6446 00000AFC 782047726170686963-
  6446 00000B05 732041646170746572-
  6446 00000B0E 00                 
  6447 00000B0F 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6447 00000B18 69732061206C656170-
  6447 00000B21 20796561722E0D0A00 
  6448 00000B2A 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6448 00000B33 6973206E6F74206120-
  6448 00000B3C 6C6561702079656172-
  6448 00000B45 2E0D0A00           
  6449 00000B49 383233373141422F45-     cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6449 00000B52 422050434920427573-
  6449 00000B5B 204D61737465722049-
  6449 00000B64 444520436F6E74726F-
  6449 00000B6D 6C6C657200         
  6450 00000B72 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  6451                                  %endif
  6452                                  %ifdef BUILDDISK
  6453                                  ;-----------------------------------------------------------------------------------------------------------------------
  6454                                  ;
  6455                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6456                                  ;
  6457                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6458                                  ;
  6459                                  ;-----------------------------------------------------------------------------------------------------------------------
  6460                                  section                 unused                                                  ;unused disk space
  6461 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6462                                  %endif
  6463                                  ;=======================================================================================================================
  6464                                  ;
  6465                                  ;       End of Program Code
  6466                                  ;
  6467                                  ;=======================================================================================================================
