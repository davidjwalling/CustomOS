     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.014
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to locate and report the ethernet adapter
     8                                  ;                       at start-up.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EHWF...         Hardware flags
   169                                  ;       EKEYF...        Keyboard status flags
   170                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   171                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   172                                  ;       EMEM...         Memory Management values
   173                                  ;       EMSG...         Message identifers
   174                                  ;
   175                                  ;=======================================================================================================================
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Hardware-Defined Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   184                                  ;
   185                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   186                                  ;       for CGA, EGA, VGA and compatible video modes.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   190                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   191                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   192                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ;
   195                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   196                                  ;
   197                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   198                                  ;
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   201                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   202                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   203                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   204                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8042 Keyboard Controller                                                EKEYB...
   208                                  ;
   209                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   210                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EKEYBPORTDATA           equ     060h                                            ;data port
   214                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   215                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   216                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   217                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   218                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   219                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   220                                                                                                                  ;---------------------------------------
   221                                                                                                                  ;       Keyboard Scan Codes
   222                                                                                                                  ;---------------------------------------
   223                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   224                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   225                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   226                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   227                                  EKEYBSLASH              equ     035h                                            ;slash
   228                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   229                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   230                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   231                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   232                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   233                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   234                                  EKEYBUP                 equ     080h                                            ;up
   235                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   236                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   237                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   238                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   239                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   240                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   241                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   242                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   243                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   244                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   245                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   246                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  ;
   249                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   250                                  ;
   251                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   252                                  ;       external devices and signals a hardware interrupt to the CPU.
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   256                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   257                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   258                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   259                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       8253 Programmable Interval Timer                                        EPIT...
   263                                  ;
   264                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   265                                  ;       approximately 18.2 times per second.
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 CPU Architecture                                                    ;EX86...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   301                                  ;
   302                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   303                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   304                                  ;
   305                                  ;       0.......        Segment is not present in memory (triggers int 11)
   306                                  ;       1.......        Segment is present in memory
   307                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   308                                  ;       ...0....        Segment is a system segment
   309                                  ;       ...00010                Local Descriptor Table
   310                                  ;       ...00101                Task Gate
   311                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   312                                  ;       ...01100                Call Gate (386)
   313                                  ;       ...01110                Interrupt Gate (386)
   314                                  ;       ...01111                Trap Gate (386)
   315                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   316                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   317                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   321                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   322                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   323                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   324                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   325                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   326                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   327                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       Firmware-Defined Values
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   336                                  ;
   337                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   338                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   342                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   343                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   344                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   345                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   346                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   347                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   348                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   349                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   350                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   351                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Standards-Based Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       ASCII                                                                   EASCII...
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   363                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   364                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   365                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   366                                  EASCIISPACE             equ     020h                                            ;space
   367                                  EASCIIDASH              equ     02Dh                                            ;dash or minus
   368                                  EASCIIPERIOD            equ     02Eh                                            ;period
   369                                  EASCIIUPPERA            equ     041h                                            ;'A'
   370                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   371                                  EASCIILOWERA            equ     061h                                            ;'a'
   372                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   373                                  EASCIITILDE             equ     07Eh                                            ;'~'
   374                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   375                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   376                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   377                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   378                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   379                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   380                                  EASCIICASE              equ     00100000b                                       ;case bit
   381                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  ;
   384                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   385                                  ;
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   388                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   389                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   390                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   391                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   392                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   393                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   394                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   395                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   396                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   397                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   398                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   399                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   400                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   401                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   402                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;
   405                                  ;       Operating System Values
   406                                  ;
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;
   410                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   411                                  ;
   412                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   413                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   414                                  ;
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   417                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   418                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   419                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   420                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   421                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   422                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  ;       Console Constants                                                       ECON...
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  ECONCOLS                equ     80                                              ;columns per row
   427                                  ECONROWS                equ     24                                              ;console rows
   428                                  ECONOIAROW              equ     24                                              ;operator information area row
   429                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   430                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   431                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   432                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   433                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   438                                  EGDTCGA                 equ     020h                                            ;cga video selector
   439                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   440                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   441                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   442                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   443                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   444                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ;       Hardware Flags                                                          EHWF...
   447                                  ;-----------------------------------------------------------------------------------------------------------------------
   448                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  ;       Keyboard Flags                                                          EKEYF...
   451                                  ;-----------------------------------------------------------------------------------------------------------------------
   452                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   453                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   454                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   455                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   456                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   457                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   458                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   459                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   460                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   461                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   462                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  ;       Kernel Constants                                                        EKRN...
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   467                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   468                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   469                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   470                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   471                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   476                                  ;-----------------------------------------------------------------------------------------------------------------------
   477                                  ;       Memory Management Constants                                             EMEM...
   478                                  ;-----------------------------------------------------------------------------------------------------------------------
   479                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   480                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   481                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   482                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;       Message Identifiers                                                     EMSG...
   485                                  ;-----------------------------------------------------------------------------------------------------------------------
   486                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   487                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   488                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   489                                  ;=======================================================================================================================
   490                                  ;
   491                                  ;       Structures
   492                                  ;
   493                                  ;=======================================================================================================================
   494                                  ;-----------------------------------------------------------------------------------------------------------------------
   495                                  ;
   496                                  ;       DATETIME
   497                                  ;
   498                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   499                                  ;
   500                                  ;-----------------------------------------------------------------------------------------------------------------------
   501                                  struc                   DATETIME
   502 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   503 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   504 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   505 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   506 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   507 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   508 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   509 00000007 <res 00000001>          .century                resb    1                                               ;century
   510                                  EDATETIMELEN            equ     ($-.second)
   511                                  endstruc
   512                                  ;-----------------------------------------------------------------------------------------------------------------------
   513                                  ;
   514                                  ;       ETHER
   515                                  ;
   516                                  ;       The ETHER structure defines an Ethernet adapter context.
   517                                  ;
   518                                  ;-----------------------------------------------------------------------------------------------------------------------
   519                                  struc                   ETHER
   520 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   521                                  .devicevendor           equ     $                                               ;device id | vendor id
   522 00000004 <res 00000002>          .vendor                 resw    1                                               ;vendor id
   523 00000006 <res 00000002>          .device                 resw    1                                               ;device id
   524                                  .statuscommand          equ     $                                               ;status reg | command reg
   525 00000008 <res 00000002>          .commandreg             resw    1                                               ;command register
   526 0000000A <res 00000002>          .statusreg              resw    1                                               ;status register
   527 0000000C <res 00000004>          .classrev               resd    1                                               ;class code | revision id
   528 00000010 <res 00000004>          .misc                   resd    1                                               ;BIST | Hdr | latency | cache
   529 00000014 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address (bar 0)
   530 00000018 <res 00000004>          .flash                  resd    1                                               ;flash base address (bar 1)
   531 0000001C <res 00000004>          .port                   resd    1                                               ;i/o port (base 2)
   532 00000020 <res 00000006>          .mac                    resb    6                                               ;mac address
   533 00000026 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   534                                  EETHERLEN               equ     ($-.selector)
   535                                  endstruc
   536                                  ;-----------------------------------------------------------------------------------------------------------------------
   537                                  ;
   538                                  ;       MEMBLOCK
   539                                  ;
   540                                  ;       The MEMBLOCK structure defines a memory block.
   541                                  ;
   542                                  ;-----------------------------------------------------------------------------------------------------------------------
   543                                  struc                   MEMBLOCK
   544 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   545 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   546 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   547 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   548 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   549 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   550 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   551 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   552                                  EMEMBLOCKLEN            equ     ($-.signature)
   553                                  endstruc
   554                                  ;-----------------------------------------------------------------------------------------------------------------------
   555                                  ;
   556                                  ;       MEMROOT
   557                                  ;
   558                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   559                                  ;
   560                                  ;-----------------------------------------------------------------------------------------------------------------------
   561                                  struc                   MEMROOT
   562 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   563 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   564 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   565 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   566 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   567 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   568                                  EMEMROOTLEN             equ     ($-.firstcontig)
   569                                  endstruc
   570                                  ;-----------------------------------------------------------------------------------------------------------------------
   571                                  ;
   572                                  ;       MQUEUE
   573                                  ;
   574                                  ;       The MQUEUE structure maps memory used for a message queue.
   575                                  ;
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  struc                   MQUEUE
   578 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   579 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   580 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   581                                  endstruc
   582                                  ;-----------------------------------------------------------------------------------------------------------------------
   583                                  ;
   584                                  ;       PCI
   585                                  ;
   586                                  ;       The PCI structure defines a PCI bus, device and function context.
   587                                  ;
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  struc                   PCI
   590 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   591 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   592 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   593 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   594 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   595                                  .configdata             equ     $                                               ;data read from port 0CFCh
   596 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   597 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   598 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   599 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   600                                  EPCILEN                 equ     ($-.configdata)
   601                                  endstruc
   602                                  ;-----------------------------------------------------------------------------------------------------------------------
   603                                  ;
   604                                  ;       OSDATA
   605                                  ;
   606                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   607                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   608                                  ;
   609                                  ;-----------------------------------------------------------------------------------------------------------------------
   610                                  struc                   OSDATA
   611 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   612 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   613 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   614 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   615 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   616 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   617 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   618 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   619 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   620 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   621 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   622 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   623 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   624 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   625 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   626 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   627 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   628 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   629 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   630 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   631 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   632 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   633 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   634 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   635 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   636 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   637 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   638 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   639 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   640 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   641 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   642 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   643 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   644 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   645 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   646 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   647 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   648 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   649 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   650 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   651 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   652 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   653 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   654 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   655 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   656 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   657 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   658 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   659 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   660 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   661 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   662 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   663 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   664 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   665 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   666 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   667 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   668 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   669 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   670 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   671 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   672 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   673 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   674 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   675 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   676 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   677 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   678 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   679 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   680 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   681 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   682 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   683 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   684 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   685 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   686 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   687 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   688 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   689 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   690 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   691 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   692 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   693 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   694 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   695 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   696 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   697 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   698 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   699 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   700 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   701 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   702 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   703 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   704 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   705 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   706 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   707 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   708 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   709 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   710 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   711 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   712                                  ;-----------------------------------------------------------------------------------------------------------------------
   713                                  ;
   714                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   715                                  ;
   716                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   717                                  ;
   718                                  ;-----------------------------------------------------------------------------------------------------------------------
   719                                  ECONDATA                equ     ($)
   720 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   721 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   722 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   723 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   724 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   725 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   726 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   727 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   728 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   729 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   730 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   731 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   732 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   733 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   734 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   735 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   736 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   737 00000820 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   738 00000821 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   739 00000871 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   740 000008C1 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   741 00000911 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   742 0000091C <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   743 00000927 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   744 00000932 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   745 0000093B <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   746 00000953 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   747 0000095B <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   748 00000967 <res 00000027>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   749                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   750                                  ;-----------------------------------------------------------------------------------------------------------------------
   751                                  ;
   752                                  ;       End of OS Variables
   753                                  ;
   754                                  ;-----------------------------------------------------------------------------------------------------------------------
   755                                  endstruc
   756                                  ;-----------------------------------------------------------------------------------------------------------------------
   757                                  ;
   758                                  ;       Macros
   759                                  ;
   760                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   761                                  ;
   762                                  ;-----------------------------------------------------------------------------------------------------------------------
   763                                  %macro                  mint    1
   764                                  _%1                     equ     ($-$$) / EX86DESCLEN
   765                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   766                                  %endmacro
   767                                  %macro                  mtrap   1
   768                                  _%1                     equ     ($-$$) / EX86DESCLEN
   769                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   770                                  %endmacro
   771                                  %macro                  menter  1
   772                                  ?%1                     equ     ($-$$)
   773                                  %endmacro
   774                                  %macro                  tsvce   1
   775                                  e%1                     equ     ($-tsvc)/4
   776                                                          dd      %1
   777                                  %endmacro
   778                                  %ifdef BUILDBOOT
   779                                  ;=======================================================================================================================
   780                                  ;
   781                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   782                                  ;
   783                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   784                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   785                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   786                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   787                                  ;
   788                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   789                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   790                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   791                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   792                                  ;       immediately followed by a disk parameter table.
   793                                  ;
   794                                  ;=======================================================================================================================
   795                                                          cpu     8086                                            ;assume minimal CPU
   796                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   797                                                          bits    16                                              ;16-bit code at power-up
   798                                  %ifdef BUILDPREP
   799                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   800                                  %else
   801 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   802                                  %endif
   803                                  ;-----------------------------------------------------------------------------------------------------------------------
   804                                  ;
   805                                  ;       Disk Parameter Table
   806                                  ;
   807                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   808                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   809                                  ;
   810                                  ;-----------------------------------------------------------------------------------------------------------------------
   811 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   812 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   813 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   814 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   815 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   816 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   817 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   818 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   819 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   820                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   821 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   822 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   823 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   824                                  ;
   825                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   826                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   827                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   828                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   829                                  ;       given several possible starting values for CS:IP.
   830                                  ;
   831                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   832 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   833                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   834 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   835 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   836 00000025 B104                                            mov     cl,4                                            ;shift count
   837 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   838 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   839 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   840                                  ;
   841                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   842                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   843                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   844                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   845                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   846                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   847                                  ;
   848 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   849 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   850 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   851 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   852 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   853                                  ;
   854                                  ;       Our boot addressability is now set up according to the following diagram.
   855                                  ;
   856                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   857                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   858                                  ;                               |  256 = 100h bytes                             |
   859                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   860                                  ;                               |  Boot Sector (vstart=0100h)                   |
   861                                  ;                               |  1 sector = 512 = 200h bytes                  |
   862                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   863                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   864                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   865                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   866                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   867                                  ;                               |  2 sectors = 1024 = 400h bytes
   868                                  ;                       009400  +-----------------------------------------------+ DS:1900
   869                                  ;
   870                                  ;       On entry, DL indicates the drive being booted from.
   871                                  ;
   872 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   873                                  ;
   874                                  ;       Compute directory i/o buffer address.
   875                                  ;
   876 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   877 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   878 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   879 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   880                                  ;
   881                                  ;       Compute segment where os.com will be loaded.
   882                                  ;
   883 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   884 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   885 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   886 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   887                                  ;
   888                                  ;       Set the video mode to 80 column, 25 row, text.
   889                                  ;
   890 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   891 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   892                                  ;
   893                                  ;       Write a message to the console so we know we have our addressability established.
   894                                  ;
   895 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   896 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   897                                  ;
   898                                  ;       Initialize the number of directory sectors to search.
   899                                  ;
   900 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   901 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   902                                  ;
   903                                  ;       Compute number of directory sectors and initialize overhead count.
   904                                  ;
   905 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   906 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   907 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   908 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   909                                  ;
   910                                  ;       Compute directory entries per sector.
   911                                  ;
   912 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   913 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   914 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   915                                  ;
   916                                  ;       Compute first logical directory sector and update overhead count.
   917                                  ;
   918 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   919 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   920 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   921 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   922 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   923 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   924                                  ;
   925                                  ;       Read directory sector.
   926                                  ;
   927 0000008E B001                    .30                     mov     al,1                                            ;sector count
   928 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   929 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   930 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   931                                  ;
   932                                  ;       Setup variables to search this directory sector.
   933                                  ;
   934 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   935 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   936 000000A1 7603                                            jna     .40                                             ;no, continue
   937 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   938 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   939 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   940 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   941                                  ;
   942                                  ;       Loop through directory sectors searching for kernel program.
   943                                  ;
   944 000000B1 56                      .50                     push    si                                              ;save kernel name address
   945 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   946 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   947 000000B6 FC                                              cld                                                     ;forward strings
   948 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   949 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   950 000000BA 5E                                              pop     si                                              ;restore kernel name address
   951 000000BB 7418                                            je      .60                                             ;exit loop if found
   952 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   953 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   954 000000C2 75ED                                            jnz     .50                                             ;next entry
   955                                  ;
   956                                  ;       Repeat search if we are not at the end of the directory.
   957                                  ;
   958 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   959 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   960 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   961 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   962 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   963                                  ;
   964                                  ;       If we find the kernel program in the directory, read the FAT.
   965                                  ;
   966 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   967 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   968 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   969 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   970 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   971 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   972                                  ;
   973                                  ;       Get the starting cluster of the kernel program and target address.
   974                                  ;
   975 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   976 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   977                                  ;
   978                                  ;       Read each program cluster into RAM.
   979                                  ;
   980 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   981 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   982 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   983 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   984 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   985 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   986 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   987 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   988 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   989                                  ;
   990                                  ;       Update buffer pointer for next cluster.
   991                                  ;
   992 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   993 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   994 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   995 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   996 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   997                                  ;
   998                                  ;       Compute next cluster number.
   999                                  ;
  1000 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
  1001 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
  1002 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
  1003 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
  1004 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
  1005 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
  1006 00000120 83E701                                          and     di,1                                            ;get low bit
  1007 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
  1008 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
  1009 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
  1010                                  ;
  1011                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1012                                  ;
  1013 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
  1014 0000012E 7404                                            jz      .80                                             ;no, skip ahead
  1015 00000130 B104                                            mov     cl,4                                            ;shift count
  1016 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
  1017 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1018 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1019 0000013A 75B2                                            jne     .70                                             ;no, continue
  1020                                  ;
  1021                                  ;       Transfer control to the operating system program.
  1022                                  ;
  1023 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1024 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1025 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1026                                  ;
  1027                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1028                                  ;
  1029 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1030 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1031 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1032 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1033 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1034 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1035 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1036 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1037 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1038 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1039                                  ;
  1040                                  ;       Try maxtries times to read sector.
  1041                                  ;
  1042 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1043 00000160 53                      .10                     push    bx                                              ;save buffer address
  1044 00000161 51                                              push    cx                                              ;save retry count
  1045 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1046 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1047 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1048 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1049 0000016F 59                                              pop     cx                                              ;restore retry count
  1050 00000170 5B                                              pop     bx                                              ;restore buffer address
  1051 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1052 00000173 E2EB                                            loop    .10                                             ;retry
  1053                                  ;
  1054                                  ;       Handle disk error: convert to ASCII and store in error string.
  1055                                  ;
  1056 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1057 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1058 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1059 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1060 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1061 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1062 00000183 7203                                            jb      .20                                             ;continue if numeral
  1063 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1064 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1065 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1066 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1067 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1068 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1069 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1070                                  ;
  1071                                  ;       Wait for a key press.
  1072                                  ;
  1073 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1074 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1075 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1076 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1077 0000019F F4                                              hlt                                                     ;wait for interrupt
  1078 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1079                                  ;
  1080                                  ;       Reset the system.
  1081                                  ;
  1082 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1083 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1084 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1085 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1086 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1087                                  ;
  1088                                  ;       Display text message.
  1089                                  ;
  1090 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1091 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1092 000001AC 84C0                                            test    al,al                                           ;end of string?
  1093 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1094 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1095 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1096 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1097 000001B6 C3                      BootReturn              ret                                                     ;return
  1098                                  ;-----------------------------------------------------------------------------------------------------------------------
  1099                                  ;
  1100                                  ;       Constants
  1101                                  ;
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103 000001B7 90                                              align   2
  1104 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1105 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1105 000001C3 4F4D               
  1106 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1106 000001CE 530D0A00           
  1107 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1107 000001DB 7220               
  1108 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1109 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1109 000001E9 6700               
  1110                                  ;-----------------------------------------------------------------------------------------------------------------------
  1111                                  ;
  1112                                  ;       Work Areas
  1113                                  ;
  1114                                  ;-----------------------------------------------------------------------------------------------------------------------
  1115 000001EB 90                                              align   2
  1116 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1117 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1118 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1119 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1120 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1121                                  wwReadCountCommand      equ     $                                               ;read count and command
  1122 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1123 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1124                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1125 000001F8 00                      wbDrive                 db      0                                               ;drive
  1126 000001F9 00                      wbHead                  db      0                                               ;head
  1127                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1128 000001FA 00                                              db      0                                               ;sector
  1129 000001FB 00                      wbTrack                 db      0                                               ;track
  1130 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1131 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1132                                  %endif
  1133                                  %ifdef BUILDPREP
  1134                                  ;=======================================================================================================================
  1135                                  ;
  1136                                  ;       Diskette Preparation Code
  1137                                  ;
  1138                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1139                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1140                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1141                                  ;
  1142                                  ;=======================================================================================================================
  1143                                  ;
  1144                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1145                                  ;
  1146                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1147                                                          call    BootPrint                                       ;display message
  1148                                  ;
  1149                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1150                                  ;
  1151                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1152                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1153                                                          jnz     .20                                             ;continue if key pressed
  1154                                                          sti                                                     ;enable interrupts
  1155                                                          hlt                                                     ;wait for interrupt
  1156                                                          jmp     .10                                             ;repeat
  1157                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1158                                                          je      .30                                             ;yes, branch
  1159                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1160                                                          jne     .10                                             ;no, repeat
  1161                                                          jmp     .120                                            ;yes, exit program
  1162                                  ;
  1163                                  ;       Display writing-sector message and patch the JMP instruction.
  1164                                  ;
  1165                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1166                                                          call    BootPrint                                       ;display message
  1167                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1168                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1169                                                          mov     [bx],ax                                         ;update the JMP instruction
  1170                                  ;
  1171                                  ;       Try to read the boot sector.
  1172                                  ;
  1173                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1174                                  .40                     push    cx                                              ;save remaining tries
  1175                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1176                                                          mov     dx,0                                            ;head zero, drive zero
  1177                                                          mov     cx,1                                            ;track zero, sector one
  1178                                                          mov     al,1                                            ;one sector
  1179                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1180                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1181                                                          pop     cx                                              ;restore remaining retries
  1182                                                          jnc     .50                                             ;skip ahead if successful
  1183                                                          loop    .40                                             ;try again
  1184                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1185                                                          jmp     .70                                             ;branch to error routine
  1186                                  ;
  1187                                  ;       Copy diskette parms from input buffer to output buffer.
  1188                                  ;
  1189                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1190                                                          add     si,11                                           ;skip over JMP and system ID
  1191                                                          mov     di,Boot                                         ;output buffer address
  1192                                                          add     di,11                                           ;skip over JMP and system ID
  1193                                                          mov     cx,19                                           ;length of diskette parameters
  1194                                                          cld                                                     ;forward string copies
  1195                                                          rep     movsb                                           ;copy diskette parameters
  1196                                  ;
  1197                                  ;       Try to write boot sector to diskette.
  1198                                  ;
  1199                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1200                                  .60                     push    cx                                              ;save remaining tries
  1201                                                          mov     bx,Boot                                         ;output buffer address
  1202                                                          mov     dx,0                                            ;head zero, drive zero
  1203                                                          mov     cx,1                                            ;track zero, sector one
  1204                                                          mov     al,1                                            ;one sector
  1205                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1206                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1207                                                          pop     cx                                              ;restore remaining retries
  1208                                                          jnc     .100                                            ;skip ahead if successful
  1209                                                          loop    .60                                             ;try again
  1210                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1211                                  ;
  1212                                  ;       Convert the error code to ASCII and display the error message.
  1213                                  ;
  1214                                  .70                     push    ax                                              ;save error code
  1215                                                          mov     al,ah                                           ;copy error code
  1216                                                          mov     ah,0                                            ;AX = error code
  1217                                                          mov     dl,10h                                          ;hexadecimal divisor
  1218                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1219                                                          or      ax,03030h                                       ;add ASCII zone digits
  1220                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1221                                                          jb      .80                                             ;yes, continue
  1222                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1223                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1224                                                          jb      .90                                             ;yes, continue
  1225                                                          add     al,7                                            ;no, make ASCII
  1226                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1227                                                          call    BootPrint                                       ;write error message
  1228                                                          pop     ax                                              ;restore error code
  1229                                  ;
  1230                                  ;       Display the completion message.
  1231                                  ;
  1232                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1233                                                          mov     al,ah                                           ;BIOS return code
  1234                                                          cmp     al,0                                            ;success?
  1235                                                          je      .110                                            ;yes, continue
  1236                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1237                                                          cmp     al,1                                            ;disk parameter error?
  1238                                                          je      .110                                            ;yes, continue
  1239                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1240                                                          cmp     al,2                                            ;address mark not found?
  1241                                                          je      .110                                            ;yes, continue
  1242                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1243                                                          cmp     al,3                                            ;protected disk?
  1244                                                          je      .110                                            ;yes, continue
  1245                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1246                                                          cmp     al,6                                            ;diskette removed?
  1247                                                          je      .110                                            ;yes, continue
  1248                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1249                                                          cmp     al,80H                                          ;drive timed out?
  1250                                                          je      .110                                            ;yes, continue
  1251                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1252                                  .110                    call    BootPrint                                       ;display result message
  1253                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1254                                                          int     021h                                            ;terminate DOS program
  1255                                                          ret                                                     ;return (should not execute)
  1256                                  ;-----------------------------------------------------------------------------------------------------------------------
  1257                                  ;
  1258                                  ;       Diskette Preparation Messages
  1259                                  ;
  1260                                  ;-----------------------------------------------------------------------------------------------------------------------
  1261                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1262                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1263                                                          db      13,10
  1264                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1265                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1266                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1267                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1268                                                          db      13,10,0
  1269                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1270                                                          db      13,10,0
  1271                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1272                                                          db      13,10,0
  1273                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1274                                                          db      13,10,0
  1275                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1276                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1277                                                          db      13,10,0
  1278                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1279                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1280                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1281                                                          db      13,10,"and retry."
  1282                                                          db      13,10,0
  1283                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1284                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1285                                                          db      13,10,"using another diskette."
  1286                                                          db      13,10,0
  1287                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1288                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1289                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1290                                                          db      13,10,0
  1291                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1292                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1293                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1294                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1295                                                          db      13,10,"is properly inserted in the diskette drive."
  1296                                                          db      13,10,0
  1297                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1298                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1299                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1300                                                          db      13,10,0
  1301                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1302                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1303                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1304                                                          db      13,10,0
  1305                                  wcPrepInBuf             equ     $
  1306                                  %endif
  1307                                  %ifdef BUILDDISK
  1308                                  ;=======================================================================================================================
  1309                                  ;
  1310                                  ;       File Allocation Tables
  1311                                  ;
  1312                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1313                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1314                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1315                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1316                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1317                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1318                                  ;       the last cluster in the chain.
  1319                                  ;
  1320                                  ;       Every three bytes encode two FAT entries as follows:
  1321                                  ;
  1322                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1323                                  ;
  1324                                  ;=======================================================================================================================
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326                                  ;
  1327                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1328                                  ;
  1329                                  ;-----------------------------------------------------------------------------------------------------------------------
  1330                                  section                 fat1                                                    ;first copy of FAT
  1331 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1332 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1333 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1334 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1335 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1336 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1337 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1338 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1339 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1340 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1341 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1342 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1343                                  ;-----------------------------------------------------------------------------------------------------------------------
  1344                                  ;
  1345                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1346                                  ;
  1347                                  ;-----------------------------------------------------------------------------------------------------------------------
  1348                                  section                 fat2                                                    ;second copy of FAT
  1349 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1350 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1351 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1352 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1353 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1354 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1355 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1356 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1357 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1358 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1359 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1360 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1361                                  ;-----------------------------------------------------------------------------------------------------------------------
  1362                                  ;
  1363                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1364                                  ;
  1365                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1366                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1367                                  ;       copy.
  1368                                  ;
  1369                                  ;-----------------------------------------------------------------------------------------------------------------------
  1370                                  section                 dir                                                     ;diskette directory
  1371 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1371 00000009 4F4D               
  1372 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1373 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1374 00000016 0000                                            dw      0h                                              ;time
  1375 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1376 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1377 0000001A 0200                                            dw      2                                               ;first cluster
  1378 0000001C 00540000                                        dd      05400h                                          ;file size
  1379 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1380                                  %endif
  1381                                  %ifdef BUILDCOM
  1382                                  ;=======================================================================================================================
  1383                                  ;
  1384                                  ;       OS.COM
  1385                                  ;
  1386                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1387                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1388                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1389                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1390                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1391                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1392                                  ;
  1393                                  ;       Our loader addressability is set up according to the following diagram.
  1394                                  ;
  1395                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1396                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1397                                  ;                               |  256 = 100h bytes                             |
  1398                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1399                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1400                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1401                                  ;                       007e00  +-----------------------------------------------+
  1402                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1403                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1404                                  ;                               |                                               |
  1405                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1406                                  ;                               |                                               |
  1407                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1408                                  ;                               |  Loader Code                                  |
  1409                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1410                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1411                                  ;
  1412                                  ;=======================================================================================================================
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414                                  ;
  1415                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1416                                  ;
  1417                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1418                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1419                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1420                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1421                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1422                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1423                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1424                                  ;       registers.
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                                          cpu     8086                                            ;assume minimal CPU
  1428                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1429                                                          bits    16                                              ;this is 16-bit code
  1430 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1431 00000001 1F                                              pop     ds                                              ;...as our data segment
  1432 00000002 0E                                              push    cs                                              ;use the code segment
  1433 00000003 07                                              pop     es                                              ;...as our extra segment
  1434                                  ;
  1435                                  ;       Write a message to the console so we know we have our addressability established.
  1436                                  ;
  1437 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1438 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1439                                  ;
  1440                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1441                                  ;
  1442 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1443 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1444 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1445 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1446                                                          cpu     386                                             ;allow 80386 instructions
  1447 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1448 00000017 E89600                                          call    PutTTYString                                    ;display message
  1449                                  ;
  1450                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1451                                  ;
  1452 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1453 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1454 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1455 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1456 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1457 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1458 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1459 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1460 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1461 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1462                                  ;
  1463                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1464                                  ;
  1465 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1466 00000038 07                                              pop     es                                              ;... as target segment
  1467 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1468 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1469 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1470 00000041 FC                                              cld                                                     ;forward strings
  1471 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1472 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1473 00000047 E86600                                          call    PutTTYString                                    ;display message
  1474                                  ;
  1475                                  ;       Switch to protected mode.
  1476                                  ;
  1477 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1478 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1479 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1480 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1481 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1482 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1483 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1484 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1485 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1486 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1487 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1488                                  ;
  1489                                  ;       Enable hardware and maskable interrupts.
  1490                                  ;
  1491 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1492 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1493 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1494 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1495                                  ;
  1496                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1497                                  ;
  1498 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1499 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1500 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1501                                  ;-----------------------------------------------------------------------------------------------------------------------
  1502                                  ;
  1503                                  ;       Routine:        LoaderExit
  1504                                  ;
  1505                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1506                                  ;
  1507                                  ;       In:             DS:SI   string address
  1508                                  ;
  1509                                  ;-----------------------------------------------------------------------------------------------------------------------
  1510 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1511                                  ;
  1512                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1513                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1514                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1515                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1516                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1517                                  ;
  1518 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1519 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1520 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1521 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1522 00000085 F4                                              hlt                                                     ;wait for interrupt
  1523 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1524                                  ;
  1525                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1526                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1527                                  ;       HLT until the system resets.
  1528                                  ;
  1529 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1530 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1531 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1532 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1533 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  ;
  1536                                  ;       Routine:        GetCPUType
  1537                                  ;
  1538                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1539                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1540                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1541                                  ;
  1542                                  ;       Out:            AX      0 = 808x, v20, etc.
  1543                                  ;                               1 = 80186
  1544                                  ;                               2 = 80286
  1545                                  ;                               3 = 80386
  1546                                  ;
  1547                                  ;-----------------------------------------------------------------------------------------------------------------------
  1548 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1549 00000092 B120                                            mov     cl,32                                           ;shift count
  1550 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1551 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1552 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1553                                                          cpu     186
  1554 0000009A 54                                              push    sp                                              ;save stack pointer
  1555 0000009B 59                                              pop     cx                                              ;...into cx
  1556 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1557 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1558                                                          cpu     286
  1559 000000A0 40                                              inc     ax                                              ;AX = 2
  1560 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1561 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1562 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1563 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1564 000000AE 40                                              inc     ax                                              ;AX = 3
  1565 000000AF C3                      .10                     ret                                                     ;return
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                  ;
  1568                                  ;       Routine:        PutTTYString
  1569                                  ;
  1570                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1571                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1572                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1573                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1574                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1575                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1576                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1577                                  ;                       to LODSB is not needed.
  1578                                  ;
  1579                                  ;       In:             DS:SI   address of string
  1580                                  ;
  1581                                  ;       Out:            DF      0
  1582                                  ;                       ZF      1
  1583                                  ;                       AL      0
  1584                                  ;
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1587 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1588 000000B2 84C0                                            test    al,al                                           ;end of string?
  1589 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1590 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1591 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1592 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1593 000000BC C3                      .20                     ret                                                     ;return
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                  ;
  1596                                  ;       Loader Data
  1597                                  ;
  1598                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1599                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1600                                  ;
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602 000000BD 90                                              align   2
  1603 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1604 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1605 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1606 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1607 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1607 000000D1 74696E672073797374-
  1607 000000DA 656D20726571756972-
  1607 000000E3 657320616E20693338-
  1607 000000EC 36206F72206C617465-
  1607 000000F5 722070726F63657373-
  1607 000000FE 6F722E0D0A         
  1608 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1608 0000010C 65737320616E79206B-
  1608 00000115 657920746F20726573-
  1608 0000011E 746172742074686520-
  1608 00000127 636F6D70757465722E-
  1608 00000130 0D0A00             
  1609 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1610 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1610 00000145 7265640D0A00       
  1611 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1611 00000154 616465640D0A00     
  1612 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1612 00000164 4F530D0A00         
  1613 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1614                                  ;=======================================================================================================================
  1615                                  ;
  1616                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1617                                  ;
  1618                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1619                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1620                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1621                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1622                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1623                                  ;
  1624                                  ;=======================================================================================================================
  1625                                  ;=======================================================================================================================
  1626                                  ;
  1627                                  ;       Kernel Tables
  1628                                  ;
  1629                                  ;=======================================================================================================================
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                  ;
  1632                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1633                                  ;
  1634                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1635                                  ;       first descriptor must be all nulls.
  1636                                  ;
  1637                                  ;       6   5         4         3         2         1         0
  1638                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1639                                  ;       ----------------------------------------------------------------
  1640                                  ;       h......hffffmmmma......ab......................bn..............n
  1641                                  ;
  1642                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1643                                  ;               ffff                                                            flags
  1644                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1645                                  ;                       a......a                                                access
  1646                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1647                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1648                                  ;
  1649                                  ;       00000000                                                                all areas have base addresses below 2^24
  1650                                  ;               0...                                                            single-byte size granularity
  1651                                  ;               1...                                                            4-kilobyte size granularity
  1652                                  ;               .0..                                                            16-bit default for code segments
  1653                                  ;               .1..                                                            32-bit default for code segments
  1654                                  ;               ..0.                                                            intel-reserved; should be zero
  1655                                  ;               ...0                                                            available for operating system use
  1656                                  ;                   0000                                                        segment is less than 2^16 in size
  1657                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1658                                  ;                       1.......                                                segment is present in memory
  1659                                  ;                       .00.....                                                segment is of privilege level 0
  1660                                  ;                       ...0....                                                segment is of system or gate type
  1661                                  ;                       ...00010                                                local decriptor table (LDT)
  1662                                  ;                       ...01001                                                task state segment (TSS) available
  1663                                  ;                       ...01011                                                task state segment (TSS) busy
  1664                                  ;                       ...10...                                                data segment
  1665                                  ;                       ...10011                                                writable data (accessed)
  1666                                  ;                       ...11...                                                code segment
  1667                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1668                                  ;
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  section                 gdt                                                     ;global descriptor table
  1671 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1672 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1673 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1674 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1675 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1676 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1677 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1678 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1679 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1680 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1681 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1682 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1683 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1684 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1685 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1689                                  ;
  1690                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1691                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1692                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1693                                  ;
  1694                                  ;       6   5         4         3         2         1         0
  1695                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1696                                  ;       ----------------------------------------------------------------
  1697                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1698                                  ;
  1699                                  ;       h...h   high-order offset (bits 16-31)
  1700                                  ;       P       present (0=unused interrupt)
  1701                                  ;       zz      descriptor privilege level
  1702                                  ;       S       storage segment (must be zero for IDT)
  1703                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1704                                  ;       S...S   handling code selector in GDT
  1705                                  ;       l...l   lo-order offset (bits 0-15)
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  section                 idt                                                     ;interrupt descriptor table
  1709                                                          mint    dividebyzero                                    ;00 divide by zero
  1709                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1709 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1710                                                          mint    singlestep                                      ;01 single step
  1710                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1710 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1711                                                          mint    nmi                                             ;02 non-maskable
  1711                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1711 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1712                                                          mint    break                                           ;03 break
  1712                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1712 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1713                                                          mint    into                                            ;04 into
  1713                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1713 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1714                                                          mint    bounds                                          ;05 bounds
  1714                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1714 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1715                                                          mint    badopcode                                       ;06 bad op code
  1715                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1715 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1716                                                          mint    nocoproc                                        ;07 no coprocessor
  1716                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1716 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1717                                                          mint    doublefault                                     ;08 double-fault
  1717                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1717 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1718                                                          mint    operand                                         ;09 operand
  1718                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1718 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1719                                                          mint    badtss                                          ;0a bad TSS
  1719                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1719 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1720                                                          mint    notpresent                                      ;0b not-present
  1720                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1720 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1721                                                          mint    stacklimit                                      ;0c stack limit
  1721                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1721 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1722                                                          mint    protection                                      ;0d general protection fault
  1722                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1722 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1723                                                          mint    int14                                           ;0e (reserved)
  1723                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1723 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1724                                                          mint    int15                                           ;0f (reserved)
  1724                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1724 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1725                                                          mint    coproccalc                                      ;10 (reserved)
  1725                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1725 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1726                                                          mint    int17                                           ;11 (reserved)
  1726                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1726 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1727                                                          mint    int18                                           ;12 (reserved)
  1727                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1727 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1728                                                          mint    int19                                           ;13 (reserved)
  1728                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1728 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1729                                                          mint    int20                                           ;14 (reserved)
  1729                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1729 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1730                                                          mint    int21                                           ;15 (reserved)
  1730                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1730 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1731                                                          mint    int22                                           ;16 (reserved)
  1731                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1731 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1732                                                          mint    int23                                           ;17 (reserved)
  1732                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1732 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1733                                                          mint    int24                                           ;18 (reserved)
  1733                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1733 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1734                                                          mint    int25                                           ;19 (reserved)
  1734                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1734 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1735                                                          mint    int26                                           ;1a (reserved)
  1735                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1735 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1736                                                          mint    int27                                           ;1b (reserved)
  1736                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1736 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1737                                                          mint    int28                                           ;1c (reserved)
  1737                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1737 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1738                                                          mint    int29                                           ;1d (reserved)
  1738                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1738 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1739                                                          mint    int30                                           ;1e (reserved)
  1739                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1739 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1740                                                          mint    int31                                           ;1f (reserved)
  1740                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1740 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1741                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1741                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1741 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1742                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1742                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1742 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1743                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1743                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1743 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1744                                                          mtrap   com2                                            ;23 IRQ3 com2
  1744                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1744 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1745                                                          mtrap   com1                                            ;24 IRQ4 com1
  1745                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1745 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1746                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1746                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1746 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1747                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1747                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1747 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1748                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1748                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1748 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1749                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1749                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1749 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1750                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1750                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1750 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1751                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1751                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1751 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1752                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1752                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1752 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1753                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1753                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1753 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1754                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1754                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1754 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1755                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1755                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1755 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1756                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1756                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1756 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1757                                                          mtrap   svc                                             ;30 OS services
  1757                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1757 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1758 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1759                                  ;=======================================================================================================================
  1760                                  ;
  1761                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1762                                  ;
  1763                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1764                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1765                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1766                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1767                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1768                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1769                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1770                                  ;
  1771                                  ;=======================================================================================================================
  1772                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1773                                                          cpu     386                                             ;allow 80386 instructions
  1774                                                          bits    32                                              ;this is 32-bit code
  1775                                  ;=======================================================================================================================
  1776                                  ;
  1777                                  ;       CPU Interrupt Handlers
  1778                                  ;
  1779                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1780                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1781                                  ;
  1782                                  ;=======================================================================================================================
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT0    Divide By Zero
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  dividebyzero                                    ;divide by zero
  1788                              <1> ?%1 equ ($-$$)
  1789 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1790 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1791 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                  ;
  1794                                  ;       INT1    Single Step
  1795                                  ;
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                                          menter  singlestep                                      ;single step
  1797                              <1> ?%1 equ ($-$$)
  1798 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1799 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1800 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                  ;
  1803                                  ;       INT2    Non-Maskable Interrupt
  1804                                  ;
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                                          menter  nmi                                             ;non-maskable
  1806                              <1> ?%1 equ ($-$$)
  1807 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1808 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1809 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  ;
  1812                                  ;       INT3    Break
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                                          menter  break                                           ;break
  1815                              <1> ?%1 equ ($-$$)
  1816 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1817 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1818 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;       INT4    Into
  1822                                  ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                                          menter  into                                            ;into
  1824                              <1> ?%1 equ ($-$$)
  1825 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1826 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1827 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;       INT5    Bounds
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                                          menter  bounds                                          ;bounds
  1833                              <1> ?%1 equ ($-$$)
  1834 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1835 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1836 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                  ;
  1839                                  ;       INT6    Bad Operation Code
  1840                                  ;
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                                          menter  badopcode                                       ;bad opcode interrupt
  1842                              <1> ?%1 equ ($-$$)
  1843 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1844 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1845 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  ;
  1848                                  ;       INT7    No Coprocessor
  1849                                  ;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1851                              <1> ?%1 equ ($-$$)
  1852 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1853 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1854 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       INT8    Double Fault
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  doublefault                                     ;doublefault interrupt
  1860                              <1> ?%1 equ ($-$$)
  1861 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1862 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1863 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  ;
  1866                                  ;       INT9    Operand
  1867                                  ;
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                                          menter  operand                                         ;operand interrupt
  1869                              <1> ?%1 equ ($-$$)
  1870 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1871 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1872 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       INT10   Bad Task State Segment
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  badtss                                          ;bad TSS interrupt
  1878                              <1> ?%1 equ ($-$$)
  1879 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1880 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1881 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       INT11   Not Present
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  notpresent                                      ;not present interrupt
  1887                              <1> ?%1 equ ($-$$)
  1888 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1889 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1890 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;       INT12   Stack Limit
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                                          menter  stacklimit                                      ;stack limit interrupt
  1896                              <1> ?%1 equ ($-$$)
  1897 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1898 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1899 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                  ;
  1902                                  ;       INT13   General Protection Fault
  1903                                  ;
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                                          menter  protection                                      ;protection fault interrupt
  1905                              <1> ?%1 equ ($-$$)
  1906 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1907 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1908 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                  ;
  1911                                  ;       INT14   Reserved
  1912                                  ;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                                          menter  int14                                           ;(reserved)
  1914                              <1> ?%1 equ ($-$$)
  1915 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1916 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1917 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                  ;
  1920                                  ;       INT15   Reserved
  1921                                  ;
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                                          menter  int15                                           ;(reserved)
  1923                              <1> ?%1 equ ($-$$)
  1924 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1925 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1926 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  ;
  1929                                  ;       INT16   Coprocessor Calculation
  1930                                  ;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                                          menter  coproccalc                                      ;coprocessor calculation
  1932                              <1> ?%1 equ ($-$$)
  1933 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1934 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1935 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937                                  ;
  1938                                  ;       INT17   Reserved
  1939                                  ;
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                                          menter  int17                                           ;(reserved)
  1941                              <1> ?%1 equ ($-$$)
  1942 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1943 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1944 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       INT18   Reserved
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                                          menter  int18                                           ;(reserved)
  1950                              <1> ?%1 equ ($-$$)
  1951 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1952 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1953 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                  ;
  1956                                  ;       INT19   Reserved
  1957                                  ;
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                                          menter  int19                                           ;(reserved)
  1959                              <1> ?%1 equ ($-$$)
  1960 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1961 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1962 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  ;
  1965                                  ;       INT20   Reserved
  1966                                  ;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                                          menter  int20                                           ;(reserved)
  1968                              <1> ?%1 equ ($-$$)
  1969 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1970 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1971 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1972                                  ;-----------------------------------------------------------------------------------------------------------------------
  1973                                  ;
  1974                                  ;       INT21   Reserved
  1975                                  ;
  1976                                  ;-----------------------------------------------------------------------------------------------------------------------
  1977                                                          menter  int21                                           ;(reserved)
  1977                              <1> ?%1 equ ($-$$)
  1978 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1979 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1980 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1981                                  ;-----------------------------------------------------------------------------------------------------------------------
  1982                                  ;
  1983                                  ;       INT22   Reserved
  1984                                  ;
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                                          menter  int22                                           ;(reserved)
  1986                              <1> ?%1 equ ($-$$)
  1987 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1988 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1989 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                  ;
  1992                                  ;       INT23   Reserved
  1993                                  ;
  1994                                  ;-----------------------------------------------------------------------------------------------------------------------
  1995                                                          menter  int23                                           ;(reserved)
  1995                              <1> ?%1 equ ($-$$)
  1996 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1997 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1998 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1999                                  ;-----------------------------------------------------------------------------------------------------------------------
  2000                                  ;
  2001                                  ;       INT24   Reserved
  2002                                  ;
  2003                                  ;-----------------------------------------------------------------------------------------------------------------------
  2004                                                          menter  int24                                           ;(reserved)
  2004                              <1> ?%1 equ ($-$$)
  2005 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  2006 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2007 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  2008                                  ;-----------------------------------------------------------------------------------------------------------------------
  2009                                  ;
  2010                                  ;       INT25   Reserved
  2011                                  ;
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                                          menter  int25                                           ;(reserved)
  2013                              <1> ?%1 equ ($-$$)
  2014 00000114 6A19                                            push    25                                              ;store interrupt nbr
  2015 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2016 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  2017                                  ;-----------------------------------------------------------------------------------------------------------------------
  2018                                  ;
  2019                                  ;       INT26   Reserved
  2020                                  ;
  2021                                  ;-----------------------------------------------------------------------------------------------------------------------
  2022                                                          menter  int26                                           ;(reserved)
  2022                              <1> ?%1 equ ($-$$)
  2023 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  2024 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2025 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  2026                                  ;-----------------------------------------------------------------------------------------------------------------------
  2027                                  ;
  2028                                  ;       INT27   Reserved
  2029                                  ;
  2030                                  ;-----------------------------------------------------------------------------------------------------------------------
  2031                                                          menter  int27                                           ;(reserved)
  2031                              <1> ?%1 equ ($-$$)
  2032 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  2033 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2034 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036                                  ;
  2037                                  ;       INT28   Reserved
  2038                                  ;
  2039                                  ;-----------------------------------------------------------------------------------------------------------------------
  2040                                                          menter  int28                                           ;(reserved)
  2040                              <1> ?%1 equ ($-$$)
  2041 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  2042 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2043 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  2044                                  ;-----------------------------------------------------------------------------------------------------------------------
  2045                                  ;
  2046                                  ;       INT29   Reserved
  2047                                  ;
  2048                                  ;-----------------------------------------------------------------------------------------------------------------------
  2049                                                          menter  int29                                           ;(reserved)
  2049                              <1> ?%1 equ ($-$$)
  2050 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  2051 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2052 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  2053                                  ;-----------------------------------------------------------------------------------------------------------------------
  2054                                  ;
  2055                                  ;       INT30   Reserved
  2056                                  ;
  2057                                  ;-----------------------------------------------------------------------------------------------------------------------
  2058                                                          menter  int30                                           ;(reserved)
  2058                              <1> ?%1 equ ($-$$)
  2059 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  2060 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2061 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  2062                                  ;-----------------------------------------------------------------------------------------------------------------------
  2063                                  ;
  2064                                  ;       INT31   Reserved
  2065                                  ;
  2066                                  ;-----------------------------------------------------------------------------------------------------------------------
  2067                                                          menter  int31                                           ;(reserved)
  2067                              <1> ?%1 equ ($-$$)
  2068 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  2069 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2070 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  2071                                  ;-----------------------------------------------------------------------------------------------------------------------
  2072                                  ;
  2073                                  ;       Routine:        ReportInterrupt
  2074                                  ;
  2075                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2076                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2077                                  ;
  2078                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2079                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2080                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2081                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2082                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2083                                  ;
  2084                                  ;       Out:            N/A             This routine does not exit.
  2085                                  ;
  2086                                  ;-----------------------------------------------------------------------------------------------------------------------
  2087 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2088 00000154 06                                              push    es                                              ;save ES at time of interrupt
  2089 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2090 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  2091                                  ;
  2092                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2093                                  ;
  2094                                  ;                       [EBP+56]        EFLAGS
  2095                                  ;                       [EBP+52]        CS
  2096                                  ;                       [EBP+48]        EIP
  2097                                  ;                       [EBP+44]        interrupt number (0-31)
  2098                                  ;                       [EBP+40]        error message address
  2099                                  ;                       [EBP+36]        DS
  2100                                  ;                       [EBP+32]        ES
  2101                                  ;                       [EBP+28]        EAX
  2102                                  ;                       [EBP+24]        ECX
  2103                                  ;                       [EBP+20]        EDX
  2104                                  ;                       [EBP+16]        EBX
  2105                                  ;                       [EBP+12]        ESP
  2106                                  ;                       [EBP+8]         EBP
  2107                                  ;                       [EBP+4]         ESI
  2108                                  ;                       [EBP+0]         EDI
  2109                                  ;
  2110 00000158 0E                                              push    cs                                              ;load code selector ...
  2111 00000159 1F                                              pop     ds                                              ;... into DS
  2112 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2113 0000015C 07                                              pop     es                                              ;... into ES
  2114                                  ;
  2115                                  ;       Display the interrupt report boundary box
  2116                                  ;
  2117 0000015D B10D                                            mov     cl,13                                           ;column
  2118 0000015F B506                                            mov     ch,6                                            ;row
  2119 00000161 B232                                            mov     dl,50                                           ;width
  2120 00000163 B608                                            mov     dh,8                                            ;height
  2121 00000165 B707                                            mov     bh,07h                                          ;attribute
  2122 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2123                                  ;
  2124                                  ;       Display the report header
  2125                                  ;
  2126 0000016C B10F                                            mov     cl,15                                           ;column
  2127 0000016E B507                                            mov     ch,7                                            ;row
  2128 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2129 00000175 E87F110000                                      call    SetConsoleString                                ;draw text string
  2130                                  ;
  2131                                  ;       Display the interrupt description label
  2132                                  ;
  2133 0000017A B10F                                            mov     cl,15                                           ;column
  2134 0000017C B508                                            mov     ch,8                                            ;row
  2135 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2136 00000183 E871110000                                      call    SetConsoleString                                ;draw text string
  2137                                  ;
  2138                                  ;       Display the interrupt number
  2139                                  ;
  2140 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2141 0000018B B11A                                            mov     cl,26                                           ;column
  2142 0000018D B508                                            mov     ch,8                                            ;row
  2143 0000018F E8E20D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2144                                  ;
  2145                                  ;       Display the interrupt name
  2146                                  ;
  2147 00000194 B11D                                            mov     cl,29                                           ;column
  2148 00000196 B508                                            mov     ch,8                                            ;row
  2149 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2150 0000019B E859110000                                      call    SetConsoleString                                ;display interrupt description
  2151                                  ;
  2152                                  ;       Display the register values header
  2153                                  ;
  2154 000001A0 B10F                                            mov     cl,15                                           ;column
  2155 000001A2 B50A                                            mov     ch,10                                           ;row
  2156 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2157 000001A9 E84B110000                                      call    SetConsoleString                                ;draw text string
  2158                                  ;
  2159                                  ;       Display the EAX register label and value
  2160                                  ;
  2161 000001AE B10F                                            mov     cl,15                                           ;column
  2162 000001B0 B50B                                            mov     ch,11                                           ;row
  2163 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2164 000001B7 E83D110000                                      call    SetConsoleString                                ;draw label
  2165 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2166 000001BF B113                                            mov     cl,19                                           ;column
  2167 000001C1 B50B                                            mov     ch,11                                           ;row
  2168 000001C3 E8C80D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2169                                  ;
  2170                                  ;       Display the ECX register label and value
  2171                                  ;
  2172 000001C8 B10F                                            mov     cl,15                                           ;column
  2173 000001CA B50C                                            mov     ch,12                                           ;row
  2174 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2175 000001D1 E823110000                                      call    SetConsoleString                                ;draw label
  2176 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2177 000001D9 B113                                            mov     cl,19                                           ;column
  2178 000001DB B50C                                            mov     ch,12                                           ;row
  2179 000001DD E8AE0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2180                                  ;
  2181                                  ;       Display the EDX register label and value
  2182                                  ;
  2183 000001E2 B10F                                            mov     cl,15                                           ;column
  2184 000001E4 B50D                                            mov     ch,13                                           ;row
  2185 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2186 000001EB E809110000                                      call    SetConsoleString                                ;draw label
  2187 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2188 000001F3 B113                                            mov     cl,19                                           ;column
  2189 000001F5 B50D                                            mov     ch,13                                           ;row
  2190 000001F7 E8940D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2191                                  ;
  2192                                  ;       Display the EBX register label and value
  2193                                  ;
  2194 000001FC B10F                                            mov     cl,15                                           ;column
  2195 000001FE B50E                                            mov     ch,14                                           ;row
  2196 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2197 00000205 E8EF100000                                      call    SetConsoleString                                ;draw label
  2198 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2199 0000020D B113                                            mov     cl,19                                           ;column
  2200 0000020F B50E                                            mov     ch,14                                           ;row
  2201 00000211 E87A0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2202                                  ;
  2203                                  ;       Display the ESI register label and value
  2204                                  ;
  2205 00000216 B11D                                            mov     cl,29                                           ;column
  2206 00000218 B50B                                            mov     ch,11                                           ;row
  2207 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2208 0000021F E8D5100000                                      call    SetConsoleString                                ;draw label
  2209 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2210 00000227 B121                                            mov     cl,33                                           ;column
  2211 00000229 B50B                                            mov     ch,11                                           ;row
  2212 0000022B E8600D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2213                                  ;
  2214                                  ;       Display the EDI register label and value
  2215                                  ;
  2216 00000230 B11D                                            mov     cl,29                                           ;column
  2217 00000232 B50C                                            mov     ch,12                                           ;row
  2218 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2219 00000239 E8BB100000                                      call    SetConsoleString                                ;draw label
  2220 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2221 00000241 B121                                            mov     cl,33                                           ;column
  2222 00000243 B50C                                            mov     ch,12                                           ;row
  2223 00000245 E8460D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2224                                  ;
  2225                                  ;       Display the EBP register label and value
  2226                                  ;
  2227 0000024A B11D                                            mov     cl,29                                           ;column
  2228 0000024C B50D                                            mov     ch,13                                           ;row
  2229 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2230 00000253 E8A1100000                                      call    SetConsoleString                                ;draw label
  2231 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2232 0000025B B121                                            mov     cl,33                                           ;column
  2233 0000025D B50D                                            mov     ch,13                                           ;row
  2234 0000025F E82C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2235                                  ;
  2236                                  ;       Display the DS register label and value
  2237                                  ;
  2238 00000264 B12A                                            mov     cl,42                                           ;column
  2239 00000266 B50B                                            mov     ch,11                                           ;row
  2240 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2241 0000026D E887100000                                      call    SetConsoleString                                ;draw label
  2242 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2243 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2244 00000278 B12E                                            mov     cl,46                                           ;column
  2245 0000027A B50B                                            mov     ch,11                                           ;row
  2246 0000027C E81F0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2247                                  ;
  2248                                  ;       Display the ES register label and value
  2249                                  ;
  2250 00000281 B12A                                            mov     cl,42                                           ;column
  2251 00000283 B50C                                            mov     ch,12                                           ;row
  2252 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2253 0000028A E86A100000                                      call    SetConsoleString                                ;draw label
  2254 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2255 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2256 00000295 B12E                                            mov     cl,46                                           ;column
  2257 00000297 B50C                                            mov     ch,12                                           ;row
  2258 00000299 E8020D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2259                                  ;
  2260                                  ;       Display the SS register label and value
  2261                                  ;
  2262 0000029E B12A                                            mov     cl,42                                           ;column
  2263 000002A0 B50D                                            mov     ch,13                                           ;row
  2264 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2265 000002A7 E84D100000                                      call    SetConsoleString                                ;draw label
  2266 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2267 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2268 000002B1 B12E                                            mov     cl,46                                           ;column
  2269 000002B3 B50D                                            mov     ch,13                                           ;row
  2270 000002B5 E8E60C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2271                                  ;
  2272                                  ;       Display the CS register lable and value
  2273                                  ;
  2274 000002BA B12A                                            mov     cl,42                                           ;column
  2275 000002BC B50E                                            mov     ch,14                                           ;row
  2276 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2277 000002C3 E831100000                                      call    SetConsoleString                                ;draw label
  2278 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2279 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2280 000002CE B12E                                            mov     cl,46                                           ;column
  2281 000002D0 B50E                                            mov     ch,14                                           ;row
  2282 000002D2 E8C90C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2283                                  ;
  2284                                  ;       Display the EFLAGS register label and value
  2285                                  ;
  2286 000002D7 B133                                            mov     cl,51                                           ;column
  2287 000002D9 B50B                                            mov     ch,11                                           ;row
  2288 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2289 000002E0 E814100000                                      call    SetConsoleString                                ;draw label
  2290 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2291 000002E8 B137                                            mov     cl,55                                           ;column
  2292 000002EA B50B                                            mov     ch,11                                           ;row
  2293 000002EC E89F0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2294                                  ;
  2295                                  ;       Display the ESP register label and value
  2296                                  ;
  2297 000002F1 B133                                            mov     cl,51                                           ;column
  2298 000002F3 B50D                                            mov     ch,13                                           ;row
  2299 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2300 000002FA E8FA0F0000                                      call    SetConsoleString                                ;draw label
  2301 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2302 00000302 B137                                            mov     cl,55                                           ;column
  2303 00000304 B50D                                            mov     ch,13                                           ;row
  2304 00000306 E8850C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2305                                  ;
  2306                                  ;       Display the EIP register label and value
  2307                                  ;
  2308 0000030B B133                                            mov     cl,51                                           ;column
  2309 0000030D B50E                                            mov     ch,14                                           ;row
  2310 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2311 00000314 E8E00F0000                                      call    SetConsoleString                                ;draw label
  2312 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2313 0000031C B137                                            mov     cl,55                                           ;column
  2314 0000031E B50E                                            mov     ch,14                                           ;row
  2315 00000320 E86B0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2316                                  ;
  2317                                  ;       Halt and loop until reset
  2318                                  ;
  2319 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2320 00000326 F4                                              hlt                                                     ;halt processor
  2321 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2322                                  ;-----------------------------------------------------------------------------------------------------------------------
  2323                                  ;
  2324                                  ;       Processor Interrupt Name Strings
  2325                                  ;
  2326                                  ;-----------------------------------------------------------------------------------------------------------------------
  2327 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2327 00000332 6279207A65726F00   
  2328 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2328 00000343 657000             
  2329 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2329 0000034F 626C6520696E746572-
  2329 00000358 7275707400         
  2330 0000035D 427265616B00            czIntBreak              db      "Break",0
  2331 00000363 496E746F00              czIntInto               db      "Into",0
  2332 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2333 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2333 00000378 74696F6E20436F6465-
  2333 00000381 00                 
  2334 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2334 0000038B 6573736F7200       
  2335 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2335 0000039A 756C7400           
  2336 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2337 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2337 000003AF 537461746520536567-
  2337 000003B8 6D656E7400         
  2338 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2338 000003C6 6E7400             
  2339 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2339 000003D2 697400             
  2340 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2340 000003DE 726F74656374696F6E-
  2340 000003E7 204661756C7400     
  2341 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2341 000003F7 6F722043616C63756C-
  2341 00000400 6174696F6E00       
  2342 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2343                                  ;-----------------------------------------------------------------------------------------------------------------------
  2344                                  ;
  2345                                  ;       Processor Interrupt Handling Strings
  2346                                  ;
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2348 00000418 6C65642070726F6365-
  2348 00000421 73736F7220696E7465-
  2348 0000042A 727275707420686173-
  2348 00000433 206F63637572726564-
  2348 0000043C 3A00               
  2349 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2349 00000447 202300             
  2350 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2350 00000453 206174207468652074-
  2350 0000045C 696D65206F66207468-
  2350 00000465 6520696E7465727275-
  2350 0000046E 70743A00           
  2351 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2352 00000477 4543583A00              czIntECX                db      "ECX:",0
  2353 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2354 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2355 00000486 4553493A00              czIntESI                db      "ESI:",0
  2356 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2357 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2358 00000495 4553503A00              czIntESP                db      "ESP:",0
  2359 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2360 0000049F 2045533A00              czIntES                 db      " ES:",0
  2361 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2362 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2363 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2364 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2365                                  ;-----------------------------------------------------------------------------------------------------------------------
  2366                                  ;
  2367                                  ;       Routine:        DrawTextDialogBox
  2368                                  ;
  2369                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2370                                  ;
  2371                                  ;       In:             CL      upper left column (0-79)
  2372                                  ;                       CH      upper left row (0-24)
  2373                                  ;                       DL      column width, excluding border
  2374                                  ;                       DH      row height, excluding border
  2375                                  ;                       BH      color attribute
  2376                                  ;
  2377                                  ;-----------------------------------------------------------------------------------------------------------------------
  2378 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2379 000004B9 56                                              push    esi                                             ;
  2380 000004BA 57                                              push    edi                                             ;
  2381 000004BB 06                                              push    es                                              ;
  2382 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2383 000004BE 07                                              pop     es                                              ;... into ES
  2384                                  ;
  2385                                  ;       Compute target display offset
  2386                                  ;
  2387 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2388 000004C1 88E8                                            mov     al,ch                                           ;row
  2389 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2390 000004C5 F6E4                                            mul     ah                                              ;row offset
  2391 000004C7 00C8                                            add     al,cl                                           ;add column
  2392 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2393 000004CC 00C8                                            add     al,cl                                           ;add column
  2394 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2395 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2396                                  ;
  2397                                  ;       Display top border row
  2398                                  ;
  2399 000004D3 57                                              push    edi                                             ;save target row offset
  2400 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2401 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2402 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2403 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2404 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2405 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2406 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2407 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2408 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2409 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2410 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2411                                  ;
  2412                                  ;       Display dialog box body rows
  2413                                  ;
  2414 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2415 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2416 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2417 000004F3 57                                              push    edi                                             ;save target row offset
  2418 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2419 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2420 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2421 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2422 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2423 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2424 00000500 F366AB                                          rep     stosw                                           ;display row
  2425 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2426 00000505 66AB                                            stosw                                                   ;display character and attribute
  2427 00000507 5F                                              pop     edi                                             ;restore target row offset
  2428 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2429 0000050E 59                                              pop     ecx                                             ;remaining rows
  2430 0000050F E2E1                                            loop    .10                                             ;next row
  2431                                  ;
  2432                                  ;       Display bottom border row
  2433                                  ;
  2434 00000511 57                                              push    edi                                             ;save target row offset
  2435 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2436 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2437 00000516 66AB                                            stosw                                                   ;display character and attribute
  2438 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2439 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2440 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2441 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2442 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2443 00000523 66AB                                            stosw                                                   ;display character and attribute
  2444 00000525 5F                                              pop     edi                                             ;restore target row offset
  2445 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2446                                  ;
  2447                                  ;       Restore and return
  2448                                  ;
  2449 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2450 0000052D 5F                                              pop     edi                                             ;
  2451 0000052E 5E                                              pop     esi                                             ;
  2452 0000052F 59                                              pop     ecx                                             ;
  2453 00000530 C3                                              ret                                                     ;return
  2454                                  ;=======================================================================================================================
  2455                                  ;
  2456                                  ;       Hardware Device Interupts
  2457                                  ;
  2458                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2459                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2460                                  ;       (BX=2028h).
  2461                                  ;
  2462                                  ;=======================================================================================================================
  2463                                  ;-----------------------------------------------------------------------------------------------------------------------
  2464                                  ;
  2465                                  ;       IRQ0    Clock Tick Interrupt
  2466                                  ;
  2467                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2468                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2469                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2470                                  ;
  2471                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2472                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2473                                  ;
  2474                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2475                                  ;       zero, the floppy disk motors are turned off.
  2476                                  ;
  2477                                  ;-----------------------------------------------------------------------------------------------------------------------
  2478                                                          menter  clocktick                                       ;clock tick interrupt
  2478                              <1> ?%1 equ ($-$$)
  2479 00000531 50                                              push    eax                                             ;save non-volatile regs
  2480 00000532 52                                              push    edx                                             ;
  2481 00000533 1E                                              push    ds                                              ;
  2482                                  ;
  2483                                  ;       Update the clock tick count and the elapsed days as needed.
  2484                                  ;
  2485 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2486 00000536 1F                                              pop     ds                                              ;... into data segment register
  2487 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2488 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2489 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2490 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2491 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2492 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2493 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2494                                  ;
  2495                                  ;       Decrement floppy disk motor timeout.
  2496                                  ;
  2497 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2498 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2499 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2500 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2501                                  ;
  2502                                  ;       Turn off the floppy disk motor if appropriate.
  2503                                  ;
  2504 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2505 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2506 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2507 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2508 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2509 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2510 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2511 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2512 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2513 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2514 00000577 EE                                              out     dx,al                                           ;turn motor off
  2515                                  ;
  2516                                  ;       Signal the end of the hardware interrupt.
  2517                                  ;
  2518 00000578 E8E10D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2519                                  ;
  2520                                  ;       Restore and return.
  2521                                  ;
  2522 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2523 0000057E 5A                                              pop     edx                                             ;
  2524 0000057F 58                                              pop     eax                                             ;
  2525 00000580 CF                                              iretd                                                   ;return
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                  ;
  2528                                  ;       IRQ1    Keyboard Interrupt
  2529                                  ;
  2530                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2531                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2532                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2533                                  ;       ALL modified registers upon return.
  2534                                  ;
  2535                                  ;-----------------------------------------------------------------------------------------------------------------------
  2536                                                          menter  keyboard                                        ;keyboard interrrupt
  2536                              <1> ?%1 equ ($-$$)
  2537 00000581 50                                              push    eax                                             ;save non-volatile regs
  2538 00000582 53                                              push    ebx                                             ;
  2539 00000583 51                                              push    ecx                                             ;
  2540 00000584 56                                              push    esi                                             ;
  2541 00000585 1E                                              push    ds                                              ;
  2542 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2543 00000588 1F                                              pop     ds                                              ;... into data segment register
  2544 00000589 30C0                                            xor     al,al                                           ;zero
  2545 0000058B A219080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2546 00000590 A21A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2547 00000595 A21B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2548 0000059A A21C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2549 0000059F A21D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2550 000005A4 A21E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2551 000005A9 B020                                            mov     al,' '                                          ;space
  2552 000005AB A21F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2553 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2554 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2555 000005B4 200518080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2556 000005BA 8A1D16080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2557 000005C0 8A3D17080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2558 000005C6 E8480E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2559 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2560 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2561 000005D3 A219080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2562 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2563 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2564 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2565 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2566 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2567 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2568 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2569 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2570 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2571 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2572 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2573 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2574 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2575 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2576 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2577 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2578 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2579 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2580 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2581 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2582 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2583 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2584 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2585 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2586 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2587 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2588 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2589 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2590 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2591 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2592 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2593 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2594 00000654 E8BA0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2595 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2596 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2597 00000661 A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2598 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2599 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2600 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2601 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2602 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2603 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2604 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2605 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2606 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2607 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2608 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2609 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2610 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2611 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2612 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2613 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2614 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2615 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2616 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2617 0000069C E8720D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2618 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2619 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2620 000006A9 A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2621 000006AE E8600D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2622 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2623 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2624 000006BB A21C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2625 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2626 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2627 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2628 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2629 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2630 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2631 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2632 000006D1 E80E0D0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2633 000006D6 881D16080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2634 000006DC 883D17080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2635 000006E2 E821090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2636 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2637 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2638 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2639 000006F1 E81D0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2640 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2641 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2642 000006FE A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2643 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2644 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2645 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2646 0000070E E8000D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2647 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2648 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2649 0000071B A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2650 00000720 E8EE0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2651 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2652 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2653 0000072D A21C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2654 00000732 E8DC0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2655 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2656 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2657 0000073F A21D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2658 00000744 E8CA0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2659 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2660 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2661 0000074D A21E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2662 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2663 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2664 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2665 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2666 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2667 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2668 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2669 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2670 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2671 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2672 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2673 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2674 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2675 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2676 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2677 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2678 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2679 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2680 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2681 00000787 A21F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2682 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2683 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2684 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2685 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2686 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2687 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2688 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2689 000007A4 50                                              push    eax                                             ;save codes
  2690 000007A5 E8AA0A0000                                      call    PutMessage                                      ;put message to console
  2691 000007AA 58                                              pop     eax                                             ;restore codes
  2692 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2693 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2694 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2695 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2696 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2697 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2698 000007BD E8920A0000                                      call    PutMessage                                      ;put message to console
  2699 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2700 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2701 000007C6 080518080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2702 000007CC E8DF070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2703 000007D1 E8880B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2704 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2705 000007D7 5E                                              pop     esi                                             ;
  2706 000007D8 59                                              pop     ecx                                             ;
  2707 000007D9 5B                                              pop     ebx                                             ;
  2708 000007DA 58                                              pop     eax                                             ;
  2709 000007DB CF                                              iretd                                                   ;return
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;       Scan-Code to ASCII Translation Tables
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2714 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2715 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2716 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2717 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2718 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2719 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2720 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2721 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2722 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2723 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2724 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2725 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2726 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2727 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2728 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2729 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2730 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2731 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2732 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2733 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2734 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2735 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2736 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2737 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2738 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2739 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2740 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2741 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2742 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2743 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2744 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                  ;
  2747                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2748                                  ;
  2749                                  ;-----------------------------------------------------------------------------------------------------------------------
  2750                                                          menter  iochannel                                       ;secondary 8259A cascade
  2750                              <1> ?%1 equ ($-$$)
  2751 000008DC 50                                              push    eax                                             ;save modified regs
  2752 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                  ;
  2755                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2756                                  ;
  2757                                  ;-----------------------------------------------------------------------------------------------------------------------
  2758                                                          menter  com2                                            ;serial port 2 interrupt
  2758                              <1> ?%1 equ ($-$$)
  2759 000008DF 50                                              push    eax                                             ;save modified regs
  2760 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2764                                  ;
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                                          menter  com1                                            ;serial port 1 interrupt
  2766                              <1> ?%1 equ ($-$$)
  2767 000008E2 50                                              push    eax                                             ;save modified regs
  2768 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                  ;
  2771                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2772                                  ;
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2774                              <1> ?%1 equ ($-$$)
  2775 000008E5 50                                              push    eax                                             ;save modified regs
  2776 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                  ;
  2779                                  ;       IRQ6    Diskette Hardware Interrupt
  2780                                  ;
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                                          menter  diskette                                        ;floppy disk interrupt
  2782                              <1> ?%1 equ ($-$$)
  2783 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2784 000008E9 1E                                              push    ds                                              ;
  2785 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2786 000008EC 1F                                              pop     ds                                              ;... into DS register
  2787 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2788 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2789 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2790 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2791 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793                                  ;
  2794                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2795                                  ;
  2796                                  ;-----------------------------------------------------------------------------------------------------------------------
  2797                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2797                              <1> ?%1 equ ($-$$)
  2798 000008FC 50                                              push    eax                                             ;save modified regs
  2799 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2800                                  ;-----------------------------------------------------------------------------------------------------------------------
  2801                                  ;
  2802                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2803                                  ;
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                                          menter  rtclock                                         ;real-time clock interrupt
  2805                              <1> ?%1 equ ($-$$)
  2806 000008FF 50                                              push    eax                                             ;save modified regs
  2807 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2808                                  ;-----------------------------------------------------------------------------------------------------------------------
  2809                                  ;
  2810                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2811                                  ;
  2812                                  ;-----------------------------------------------------------------------------------------------------------------------
  2813                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2813                              <1> ?%1 equ ($-$$)
  2814 00000902 50                                              push    eax                                             ;save modified regs
  2815 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  ;
  2818                                  ;       IRQ10   Reserved Hardware Interrupt
  2819                                  ;
  2820                                  ;-----------------------------------------------------------------------------------------------------------------------
  2821                                                          menter  irq10                                           ;reserved
  2821                              <1> ?%1 equ ($-$$)
  2822 00000905 50                                              push    eax                                             ;save modified regs
  2823 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  ;
  2826                                  ;       IRQ11   Reserved Hardware Interrupt
  2827                                  ;
  2828                                  ;-----------------------------------------------------------------------------------------------------------------------
  2829                                                          menter  irq11                                           ;reserved
  2829                              <1> ?%1 equ ($-$$)
  2830 00000908 50                                              push    eax                                             ;save modified regs
  2831 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833                                  ;
  2834                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2835                                  ;
  2836                                  ;-----------------------------------------------------------------------------------------------------------------------
  2837                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2837                              <1> ?%1 equ ($-$$)
  2838 0000090B 50                                              push    eax                                             ;save modified regs
  2839 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2843                                  ;
  2844                                  ;-----------------------------------------------------------------------------------------------------------------------
  2845                                                          menter  coprocessor                                     ;coprocessor interrupt
  2845                              <1> ?%1 equ ($-$$)
  2846 0000090E 50                                              push    eax                                             ;save modified regs
  2847 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849                                  ;
  2850                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2851                                  ;
  2852                                  ;-----------------------------------------------------------------------------------------------------------------------
  2853                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2853                              <1> ?%1 equ ($-$$)
  2854 00000911 50                                              push    eax                                             ;save modified regs
  2855 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                  ;
  2858                                  ;       IRQ15   Reserved Hardware Interrupt
  2859                                  ;
  2860                                  ;-----------------------------------------------------------------------------------------------------------------------
  2861                                                          menter  irq15                                           ;reserved
  2861                              <1> ?%1 equ ($-$$)
  2862 00000914 50                                              push    eax                                             ;save modified regs
  2863 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                  ;
  2866                                  ;       Exit from hardware interrupt
  2867                                  ;
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869 00000917 E8480A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2870 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2871 0000091E E83B0A0000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2872 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2873 00000924 CF                                              iretd                                                   ;return from interrupt
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  ;
  2876                                  ;       INT 30h Operating System Software Service Interrupt
  2877                                  ;
  2878                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2879                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2880                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2881                                  ;       the entry address of the specific function from a table.
  2882                                  ;
  2883                                  ;-----------------------------------------------------------------------------------------------------------------------
  2884                                                          menter  svc
  2884                              <1> ?%1 equ ($-$$)
  2885 00000925 3C1E                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2886 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2887 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2888 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2889 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2890 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;       Service Request Table
  2894                                  ;
  2895                                  ;
  2896                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2897                                  ;
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2899                              <1> tsvc :
  2899                              <1> e%1 equ ($-tsvc)/4
  2899 00000937 [D40B0000]          <1>  dd %1
  2900                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2900                              <1> e%1 equ ($-tsvc)/4
  2900 0000093B [7C120000]          <1>  dd %1
  2901                                                          tsvce   CompareMemory                                   ;compare memory
  2901                              <1> e%1 equ ($-tsvc)/4
  2901 0000093F [2F0E0000]          <1>  dd %1
  2902                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2902                              <1> e%1 equ ($-tsvc)/4
  2902 00000943 [E9100000]          <1>  dd %1
  2903                                                          tsvce   FreeMemory                                      ;free memory block
  2903                              <1> e%1 equ ($-tsvc)/4
  2903 00000947 [F20C0000]          <1>  dd %1
  2904                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2904                              <1> e%1 equ ($-tsvc)/4
  2904 0000094B [09130000]          <1>  dd %1
  2905                                                          tsvce   GetConsoleString                                ;get string input
  2905                              <1> e%1 equ ($-tsvc)/4
  2905 0000094F [900E0000]          <1>  dd %1
  2906                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2906                              <1> e%1 equ ($-tsvc)/4
  2906 00000953 [1A130000]          <1>  dd %1
  2907                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2907                              <1> e%1 equ ($-tsvc)/4
  2907 00000957 [2B130000]          <1>  dd %1
  2908                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2908                              <1> e%1 equ ($-tsvc)/4
  2908 0000095B [1C110000]          <1>  dd %1
  2909                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2909                              <1> e%1 equ ($-tsvc)/4
  2909 0000095F [BD090000]          <1>  dd %1
  2910                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2910                              <1> e%1 equ ($-tsvc)/4
  2910 00000963 [34130000]          <1>  dd %1
  2911                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2911                              <1> e%1 equ ($-tsvc)/4
  2911 00000967 [A2100000]          <1>  dd %1
  2912                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2912                              <1> e%1 equ ($-tsvc)/4
  2912 0000096B [D8090000]          <1>  dd %1
  2913                                                          tsvce   PutDayString                                    ;put DD string
  2913                              <1> e%1 equ ($-tsvc)/4
  2913 0000096F [190A0000]          <1>  dd %1
  2914                                                          tsvce   PutHourString                                   ;put hh string
  2914                              <1> e%1 equ ($-tsvc)/4
  2914 00000973 [270A0000]          <1>  dd %1
  2915                                                          tsvce   PutMACString                                    ;put MAC address string
  2915                              <1> e%1 equ ($-tsvc)/4
  2915 00000977 [3A110000]          <1>  dd %1
  2916                                                          tsvce   PutMinuteString                                 ;put mm string
  2916                              <1> e%1 equ ($-tsvc)/4
  2916 0000097B [350A0000]          <1>  dd %1
  2917                                                          tsvce   PutMonthString                                  ;put MM string
  2917                              <1> e%1 equ ($-tsvc)/4
  2917 0000097F [430A0000]          <1>  dd %1
  2918                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2918                              <1> e%1 equ ($-tsvc)/4
  2918 00000983 [510A0000]          <1>  dd %1
  2919                                                          tsvce   PutSecondString                                 ;put ss string
  2919                              <1> e%1 equ ($-tsvc)/4
  2919 00000987 [750A0000]          <1>  dd %1
  2920                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2920                              <1> e%1 equ ($-tsvc)/4
  2920 0000098B [820A0000]          <1>  dd %1
  2921                                                          tsvce   PutWeekdayString                                ;put weekday string
  2921                              <1> e%1 equ ($-tsvc)/4
  2921 0000098F [B70A0000]          <1>  dd %1
  2922                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2922                              <1> e%1 equ ($-tsvc)/4
  2922 00000993 [C50A0000]          <1>  dd %1
  2923                                                          tsvce   PutYearString                                   ;put YYYY string
  2923                              <1> e%1 equ ($-tsvc)/4
  2923 00000997 [E80A0000]          <1>  dd %1
  2924                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2924                              <1> e%1 equ ($-tsvc)/4
  2924 0000099B [6A130000]          <1>  dd %1
  2925                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2925                              <1> e%1 equ ($-tsvc)/4
  2925 0000099F [D5130000]          <1>  dd %1
  2926                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2926                              <1> e%1 equ ($-tsvc)/4
  2926 000009A3 [5B110000]          <1>  dd %1
  2927                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2927                              <1> e%1 equ ($-tsvc)/4
  2927 000009A7 [FF110000]          <1>  dd %1
  2928                                                          tsvce   UpperCaseString                                 ;upper-case string
  2928                              <1> e%1 equ ($-tsvc)/4
  2928 000009AB [4C0E0000]          <1>  dd %1
  2929                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2930                                  ;-----------------------------------------------------------------------------------------------------------------------
  2931                                  ;
  2932                                  ;       Service Request Macros
  2933                                  ;
  2934                                  ;       These macros provide positional parameterization of service request calls.
  2935                                  ;
  2936                                  ;-----------------------------------------------------------------------------------------------------------------------
  2937                                  %macro                  allocateMemory 1
  2938                                                          mov     ecx,%1                                          ;bytes to allocate
  2939                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2940                                                          int     _svc                                            ;invoke OS service
  2941                                  %endmacro
  2942                                  %macro                  clearConsoleScreen 0
  2943                                                          mov     al,eClearConsoleScreen                          ;function code
  2944                                                          int     _svc                                            ;invoke OS service
  2945                                  %endmacro
  2946                                  %macro                  compareMemory 0
  2947                                                          mov     al,eCompareMemory                               ;function code
  2948                                                          int     _svc                                            ;invoke OS service
  2949                                  %endmacro
  2950                                  %macro                  decimalToUnsigned 0
  2951                                                          mov     al,eDecimalToUnsigned                           ;function code
  2952                                                          int     _svc                                            ;invoke OS servie
  2953                                  %endmacro
  2954                                  %macro                  freeMemory 1
  2955                                                          mov     edx,%1                                          ;address of memory block
  2956                                                          mov     al,eFreeMemory                                  ;function code
  2957                                                          int     _svc                                            ;invoke OS service
  2958                                  %endmacro
  2959                                  %macro                  getBaseMemSize 0
  2960                                                          mov     al,eGetBaseMemSize                              ;function code
  2961                                                          int     _svc                                            ;invoke OS service
  2962                                  %endmacro
  2963                                  %macro                  getConsoleString 4
  2964                                                          mov     edx,%1                                          ;buffer address
  2965                                                          mov     ecx,%2                                          ;max characters
  2966                                                          mov     bh,%3                                           ;echo indicator
  2967                                                          mov     bl,%4                                           ;terminator
  2968                                                          mov     al,eGetConsoleString                            ;function code
  2969                                                          int     _svc                                            ;invoke OS service
  2970                                  %endmacro
  2971                                  %macro                  getExtendedMemSize 0
  2972                                                          mov     al,eGetExtendedMemSize                          ;function code
  2973                                                          int     _svc                                            ;invoke OS service
  2974                                  %endmacro
  2975                                  %macro                  getROMMemSize 0
  2976                                                          mov     al,eGetROMMemSize                               ;function code
  2977                                                          int     _svc                                            ;invoke OS service
  2978                                  %endmacro
  2979                                  %macro                  hexadecimalToUnsigned 0
  2980                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2981                                                          int     _svc                                            ;invoke OS service
  2982                                  %endmacro
  2983                                  %macro                  isLeapYear 1
  2984                                                          mov     ebx,%1                                          ;DATETIME addr
  2985                                                          mov     al,eIsLeapYear                                  ;function code
  2986                                                          int     _svc                                            ;invoke OS service
  2987                                  %endmacro
  2988                                  %macro                  placeCursor 0
  2989                                                          mov     al,ePlaceCursor                                 ;function code
  2990                                                          int     _svc                                            ;invoke OS service
  2991                                  %endmacro
  2992                                  %macro                  putConsoleString 0
  2993                                                          mov     al,ePutConsoleString                            ;function code
  2994                                                          int     _svc                                            ;invoke OS service
  2995                                  %endmacro
  2996                                  %macro                  putConsoleString 1
  2997                                                          mov     edx,%1                                          ;string address
  2998                                                          mov     al,ePutConsoleString                            ;function code
  2999                                                          int     _svc                                            ;invoke OS service
  3000                                  %endmacro
  3001                                  %macro                  putDateString 0
  3002                                                          mov     al,ePutDateString                               ;function code
  3003                                                          int     _svc                                            ;invoke OS service
  3004                                  %endmacro
  3005                                  %macro                  putDateString 2
  3006                                                          mov     ebx,%1                                          ;DATETIME addr
  3007                                                          mov     edx,%2                                          ;output buffer addr
  3008                                                          mov     al,ePutDateString                               ;function code
  3009                                                          int     _svc                                            ;invoke OS service
  3010                                  %endmacro
  3011                                  %macro                  putDayString 2
  3012                                                          mov     ebx,%1                                          ;DATETIME addr
  3013                                                          mov     edx,%2                                          ;output buffer addr
  3014                                                          mov     al,ePutDayString                                ;function code
  3015                                                          int     _svc                                            ;invoke OS service
  3016                                  %endmacro
  3017                                  %macro                  putHourString 2
  3018                                                          mov     ebx,%1                                          ;DATETIME addr
  3019                                                          mov     edx,%2                                          ;output buffer addr
  3020                                                          mov     al,ePutHourString                               ;function code
  3021                                                          int     _svc                                            ;invoke OS service
  3022                                  %endmacro
  3023                                  %macro                  putMACString 1
  3024                                                          mov     edx,%1                                          ;output buffer address
  3025                                                          mov     al,ePutMACString                                ;function code
  3026                                                          int     _svc                                            ;invoke OS service
  3027                                  %endmacro
  3028                                  %macro                  putMinuteString 2
  3029                                                          mov     ebx,%1                                          ;DATETIME addr
  3030                                                          mov     edx,%2                                          ;output buffer addr
  3031                                                          mov     al,ePutMinuteString                             ;function code
  3032                                                          int     _svc                                            ;invoke OS service
  3033                                  %endmacro
  3034                                  %macro                  putMonthString 2
  3035                                                          mov     ebx,%1                                          ;DATETIME addr
  3036                                                          mov     edx,%2                                          ;output buffer addr
  3037                                                          mov     al,ePutMonthString                              ;function code
  3038                                                          int     _svc                                            ;invoke OS service
  3039                                  %endmacro
  3040                                  %macro                  putMonthNameString 2
  3041                                                          mov     ebx,%1                                          ;DATETIME addr
  3042                                                          mov     edx,%2                                          ;output buffer addr
  3043                                                          mov     al,ePutMonthNameString                          ;function code
  3044                                                          int     _svc                                            ;invoke OS service
  3045                                  %endmacro
  3046                                  %macro                  putSecondString 2
  3047                                                          mov     ebx,%1                                          ;DATETIME addr
  3048                                                          mov     edx,%2                                          ;output buffer addr
  3049                                                          mov     al,ePutSecondString                             ;function code
  3050                                                          int     _svc                                            ;invoke OS service
  3051                                  %endmacro
  3052                                  %macro                  putTimeString 0
  3053                                                          mov     al,ePutTimeString                               ;function code
  3054                                                          int     _svc                                            ;invoke OS service
  3055                                  %endmacro
  3056                                  %macro                  putTimeString 2
  3057                                                          mov     ebx,%1                                          ;DATETIME addr
  3058                                                          mov     edx,%2                                          ;output buffer addr
  3059                                                          mov     al,ePutTimeString                               ;function code
  3060                                                          int     _svc                                            ;invoke OS service
  3061                                  %endmacro
  3062                                  %macro                  putWeekdayString 2
  3063                                                          mov     ebx,%1                                          ;DATETIME addr
  3064                                                          mov     edx,%2                                          ;output buffer addr
  3065                                                          mov     al,ePutWeekdayString                            ;function code
  3066                                                          int     _svc                                            ;invoke OS service
  3067                                  %endmacro
  3068                                  %macro                  putWeekdayNameString 2
  3069                                                          mov     ebx,%1                                          ;DATETIME addr
  3070                                                          mov     edx,%2                                          ;output buffer addr
  3071                                                          mov     al,ePutWeekdayNameString                        ;function code
  3072                                                          int     _svc                                            ;invoke OS service
  3073                                  %endmacro
  3074                                  %macro                  putYearString 2
  3075                                                          mov     ebx,%1                                          ;DATETIME addr
  3076                                                          mov     edx,%2                                          ;output buffer addr
  3077                                                          mov     al,ePutYearString                               ;function code
  3078                                                          int     _svc                                            ;invoke OS service
  3079                                  %endmacro
  3080                                  %macro                  readRealTimeClock 0
  3081                                                          mov     al,eReadRealTimeClock                           ;function code
  3082                                                          int     _svc                                            ;invoke OS service
  3083                                  %endmacro
  3084                                  %macro                  readRealTimeClock 1
  3085                                                          mov     ebx,%1                                          ;DATETIME addr
  3086                                                          mov     al,eReadRealTimeClock                           ;function code
  3087                                                          int     _svc                                            ;invoke OS service
  3088                                  %endmacro
  3089                                  %macro                  resetSystem 0
  3090                                                          mov     al,eResetSystem                                 ;function code
  3091                                                          int     _svc                                            ;invoke OS service
  3092                                  %endmacro
  3093                                  %macro                  unsignedToDecimalString 0
  3094                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3095                                                          int     _svc                                            ;invoke OS service
  3096                                  %endmacro
  3097                                  %macro                  unsignedToHexadecimal 0
  3098                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3099                                                          int     _svc                                            ;invoke OS service
  3100                                  %endmacro
  3101                                  %macro                  upperCaseString 0
  3102                                                          mov     al,eUpperCaseString                             ;function code
  3103                                                          int     _svc                                            ;invoke OS service
  3104                                  %endmacro
  3105                                  ;=======================================================================================================================
  3106                                  ;
  3107                                  ;       Kernel Function Library
  3108                                  ;
  3109                                  ;=======================================================================================================================
  3110                                  ;=======================================================================================================================
  3111                                  ;
  3112                                  ;       Date and Time Helper Routines
  3113                                  ;
  3114                                  ;       GetYear
  3115                                  ;       IsLeapYear
  3116                                  ;       PutDateString
  3117                                  ;       PutDayString
  3118                                  ;       PutHourString
  3119                                  ;       PutMinuteString
  3120                                  ;       PutMonthString
  3121                                  ;       PutMonthNameString
  3122                                  ;       PutSecondString
  3123                                  ;       PutTimeString
  3124                                  ;       PutWeekdayString
  3125                                  ;       PutWeekdayNameString
  3126                                  ;       PutYearString
  3127                                  ;
  3128                                  ;=======================================================================================================================
  3129                                  ;-----------------------------------------------------------------------------------------------------------------------
  3130                                  ;
  3131                                  ;       Routine:        GetYear
  3132                                  ;
  3133                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3134                                  ;
  3135                                  ;       In:             DS:EBX  DATETIME address
  3136                                  ;
  3137                                  ;       Out:            ECX     year
  3138                                  ;
  3139                                  ;-----------------------------------------------------------------------------------------------------------------------
  3140 000009AF 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3141 000009B3 6BC964                                          imul    ecx,100                                         ;century * 100
  3142 000009B6 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3143 000009BA 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3144 000009BC C3                                              ret                                                     ;return
  3145                                  ;-----------------------------------------------------------------------------------------------------------------------
  3146                                  ;
  3147                                  ;       Routine:        IsLeapYear
  3148                                  ;
  3149                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3150                                  ;
  3151                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3152                                  ;
  3153                                  ;       Out:            ECX     0 = not a leap year
  3154                                  ;                               1 = leap year
  3155                                  ;
  3156                                  ;-----------------------------------------------------------------------------------------------------------------------
  3157 000009BD E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3158 000009C2 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3159 000009C4 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3160 000009C6 A803                                            test    al,00000011b                                    ;multiple of four?
  3161 000009C8 750D                                            jnz     .no                                             ;no, branch
  3162 000009CA B264                                            mov     dl,100                                          ;divisor
  3163 000009CC F6F2                                            div     dl                                              ;divide by 100
  3164 000009CE 84E4                                            test    ah,ah                                           ;multiple of 100?
  3165 000009D0 7504                                            jnz     .yes                                            ;yes, branch
  3166 000009D2 A803                                            test    al,00000011b                                    ;multiple of 400?
  3167 000009D4 7501                                            jnz     .no                                             ;no, branch
  3168 000009D6 41                      .yes                    inc     ecx                                             ;indicate leap
  3169 000009D7 C3                      .no                     ret                                                     ;return
  3170                                  ;-----------------------------------------------------------------------------------------------------------------------
  3171                                  ;
  3172                                  ;       Routine:        PutDateString
  3173                                  ;
  3174                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3175                                  ;                       structure at ds:ebx.
  3176                                  ;
  3177                                  ;       In:             DS:EBX  DATETIME address
  3178                                  ;                       DS:EDX  output buffer address
  3179                                  ;
  3180                                  ;-----------------------------------------------------------------------------------------------------------------------
  3181 000009D8 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3182 000009D9 57                                              push    edi                                             ;
  3183 000009DA 06                                              push    es                                              ;
  3184 000009DB 1E                                              push    ds                                              ;store data selector ...
  3185 000009DC 07                                              pop     es                                              ;... in extra segment reg
  3186 000009DD 89D7                                            mov     edi,edx                                         ;output buffer address
  3187 000009DF B10A                                            mov     cl,10                                           ;divisor
  3188 000009E1 BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3189 000009E6 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3190 000009EA F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3191 000009EC 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3192 000009EE FC                                              cld                                                     ;forward strings
  3193 000009EF AB                                              stosd                                                   ;store "mm/"nul
  3194 000009F0 4F                                              dec     edi                                             ;address of terminator
  3195 000009F1 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3196 000009F5 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3197 000009F7 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3198 000009F9 AB                                              stosd                                                   ;store "dd/"nul
  3199 000009FA 4F                                              dec     edi                                             ;address of terminator
  3200 000009FB 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3201 000009FF F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3202 00000A01 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3203 00000A03 AB                                              stosd                                                   ;store "cc/"null
  3204 00000A04 4F                                              dec     edi                                             ;address of terminator
  3205 00000A05 4F                                              dec     edi                                             ;address of delimiter
  3206 00000A06 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3207 00000A0A F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3208 00000A0C 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3209 00000A0E AA                                              stosb                                                   ;store quotient
  3210 00000A0F 88E0                                            mov     al,ah                                           ;remainder
  3211 00000A11 AA                                              stosb                                                   ;store remainder
  3212 00000A12 30C0                                            xor     al,al                                           ;null terminator
  3213 00000A14 AA                                              stosb                                                   ;store terminator
  3214 00000A15 07                                              pop     es                                              ;restore non-volatile regs
  3215 00000A16 5F                                              pop     edi                                             ;
  3216 00000A17 59                                              pop     ecx                                             ;
  3217 00000A18 C3                                              ret                                                     ;return
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219                                  ;
  3220                                  ;       Routine:        PutDayString
  3221                                  ;
  3222                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3223                                  ;                       structure at ds:ebx.
  3224                                  ;
  3225                                  ;       In:             DS:EBX  DATETIME address
  3226                                  ;                       DS:EDX  output buffer address
  3227                                  ;
  3228                                  ;-----------------------------------------------------------------------------------------------------------------------
  3229 00000A19 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3230 00000A1A 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3231 00000A1E B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3232 00000A20 E836070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3233 00000A25 59                                              pop     ecx                                             ;
  3234 00000A26 C3                                              ret                                                     ;return
  3235                                  ;-----------------------------------------------------------------------------------------------------------------------
  3236                                  ;
  3237                                  ;       Routine:        PutHourString
  3238                                  ;
  3239                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3240                                  ;                       structure at ds:ebx.
  3241                                  ;
  3242                                  ;       In:             DS:EBX  DATETIME address
  3243                                  ;                       DS:EDX  output buffer address
  3244                                  ;
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246 00000A27 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3247 00000A28 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3248 00000A2C B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3249 00000A2E E828070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3250 00000A33 59                                              pop     ecx                                             ;
  3251 00000A34 C3                                              ret                                                     ;return
  3252                                  ;-----------------------------------------------------------------------------------------------------------------------
  3253                                  ;
  3254                                  ;       Routine:        PutMinuteString
  3255                                  ;
  3256                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3257                                  ;                       structure at ds:ebx.
  3258                                  ;
  3259                                  ;       In:             DS:EBX  DATETIME address
  3260                                  ;                       DS:EDX  output buffer address
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263 00000A35 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3264 00000A36 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3265 00000A3A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3266 00000A3C E81A070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3267 00000A41 59                                              pop     ecx                                             ;
  3268 00000A42 C3                                              ret                                                     ;return
  3269                                  ;-----------------------------------------------------------------------------------------------------------------------
  3270                                  ;
  3271                                  ;       Routine:        PutMonthString
  3272                                  ;
  3273                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3274                                  ;                       structure at ds:ebx.
  3275                                  ;
  3276                                  ;       In:             DS:EBX  DATETIME address
  3277                                  ;                       DS:EDX  output buffer address
  3278                                  ;
  3279                                  ;-----------------------------------------------------------------------------------------------------------------------
  3280 00000A43 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3281 00000A44 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3282 00000A48 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3283 00000A4A E80C070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3284 00000A4F 59                                              pop     ecx                                             ;
  3285 00000A50 C3                                              ret                                                     ;return
  3286                                  ;-----------------------------------------------------------------------------------------------------------------------
  3287                                  ;
  3288                                  ;       Routine:        PutMonthNameString
  3289                                  ;
  3290                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3291                                  ;                       structure at ds:ebx.
  3292                                  ;
  3293                                  ;       In:             DS:EBX  DATETIME address
  3294                                  ;                       DS:EDX  output buffer address
  3295                                  ;
  3296                                  ;-----------------------------------------------------------------------------------------------------------------------
  3297 00000A51 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3298 00000A52 57                                              push    edi                                             ;
  3299 00000A53 1E                                              push    ds                                              ;
  3300 00000A54 06                                              push    es                                              ;
  3301 00000A55 1E                                              push    ds                                              ;load data selector ...
  3302 00000A56 07                                              pop     es                                              ;... into extra segment
  3303 00000A57 89D7                                            mov     edi,edx                                         ;output buffer address
  3304 00000A59 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3305 00000A5D 48                                              dec     eax                                             ;month (0-11)
  3306 00000A5E C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3307 00000A61 0E                                              push    cs                                              ;load code selector ...
  3308 00000A62 1F                                              pop     ds                                              ;... into data segment
  3309 00000A63 8BB0[A40B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3310 00000A69 FC                                              cld                                                     ;forward strings
  3311 00000A6A AC                      .10                     lodsb                                                   ;name character
  3312 00000A6B AA                                              stosb                                                   ;store in output buffer
  3313 00000A6C 84C0                                            test    al,al                                           ;end of string?
  3314 00000A6E 75FA                                            jnz     .10                                             ;no, continue
  3315 00000A70 07                                              pop     es                                              ;restore non-volatile regs
  3316 00000A71 1F                                              pop     ds                                              ;
  3317 00000A72 5F                                              pop     edi                                             ;
  3318 00000A73 5E                                              pop     esi                                             ;
  3319 00000A74 C3                                              ret                                                     ;return
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321                                  ;
  3322                                  ;       Routine:        PutSecondString
  3323                                  ;
  3324                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3325                                  ;                       structure at ds:ebx.
  3326                                  ;
  3327                                  ;       In:             DS:EBX  DATETIME address
  3328                                  ;                       DS:EDX  output buffer address
  3329                                  ;
  3330                                  ;-----------------------------------------------------------------------------------------------------------------------
  3331 00000A75 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3332 00000A76 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3333 00000A79 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3334 00000A7B E8DB060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3335 00000A80 59                                              pop     ecx                                             ;
  3336 00000A81 C3                                              ret                                                     ;return
  3337                                  ;-----------------------------------------------------------------------------------------------------------------------
  3338                                  ;
  3339                                  ;       Routine:        PutTimeString
  3340                                  ;
  3341                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3342                                  ;                       structure at ds:ebx.
  3343                                  ;
  3344                                  ;       In:             DS:EBX  DATETIME address
  3345                                  ;                       DS:EDX  output buffer address
  3346                                  ;
  3347                                  ;-----------------------------------------------------------------------------------------------------------------------
  3348 00000A82 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3349 00000A83 57                                              push    edi                                             ;
  3350 00000A84 06                                              push    es                                              ;
  3351 00000A85 1E                                              push    ds                                              ;store data selector ...
  3352 00000A86 07                                              pop     es                                              ;... in extra segment reg
  3353 00000A87 89D7                                            mov     edi,edx                                         ;output buffer address
  3354 00000A89 B10A                                            mov     cl,10                                           ;divisor
  3355 00000A8B BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3356 00000A90 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3357 00000A94 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3358 00000A96 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3359 00000A98 FC                                              cld                                                     ;forward strings
  3360 00000A99 AB                                              stosd                                                   ;store "mm/"nul
  3361 00000A9A 4F                                              dec     edi                                             ;address of terminator
  3362 00000A9B 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3363 00000A9F F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3364 00000AA1 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3365 00000AA3 AB                                              stosd                                                   ;store "dd/"nul
  3366 00000AA4 4F                                              dec     edi                                             ;address of terminator
  3367 00000AA5 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3368 00000AA8 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3369 00000AAA 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3370 00000AAC AA                                              stosb                                                   ;store quotient
  3371 00000AAD 88E0                                            mov     al,ah                                           ;remainder
  3372 00000AAF AA                                              stosb                                                   ;store remainder
  3373 00000AB0 30C0                                            xor     al,al                                           ;null terminator
  3374 00000AB2 AA                                              stosb                                                   ;store terminator
  3375 00000AB3 07                                              pop     es                                              ;restore non-volatile regs
  3376 00000AB4 5F                                              pop     edi                                             ;
  3377 00000AB5 59                                              pop     ecx                                             ;
  3378 00000AB6 C3                                              ret                                                     ;return
  3379                                  ;-----------------------------------------------------------------------------------------------------------------------
  3380                                  ;
  3381                                  ;       Routine:        PutWeekdayString
  3382                                  ;
  3383                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3384                                  ;                       structure at ds:ebx.
  3385                                  ;
  3386                                  ;       In:             DS:EBX  DATETIME address
  3387                                  ;                       DS:EDX  output buffer address
  3388                                  ;
  3389                                  ;-----------------------------------------------------------------------------------------------------------------------
  3390 00000AB7 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3391 00000AB8 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3392 00000ABC B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3393 00000ABE E898060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3394 00000AC3 59                                              pop     ecx                                             ;
  3395 00000AC4 C3                                              ret                                                     ;return
  3396                                  ;-----------------------------------------------------------------------------------------------------------------------
  3397                                  ;
  3398                                  ;       Routine:        PutWeekdayNameString
  3399                                  ;
  3400                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3401                                  ;                       structure at ds:ebx.
  3402                                  ;
  3403                                  ;       In:             DS:EBX  DATETIME address
  3404                                  ;                       DS:EDX  output buffer address
  3405                                  ;
  3406                                  ;-----------------------------------------------------------------------------------------------------------------------
  3407 00000AC5 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3408 00000AC6 57                                              push    edi                                             ;
  3409 00000AC7 1E                                              push    ds                                              ;
  3410 00000AC8 06                                              push    es                                              ;
  3411 00000AC9 1E                                              push    ds                                              ;load data selector ...
  3412 00000ACA 07                                              pop     es                                              ;... into extra segment
  3413 00000ACB 89D7                                            mov     edi,edx                                         ;output buffer address
  3414 00000ACD 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3415 00000AD1 C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3416 00000AD4 0E                                              push    cs                                              ;load code selector ...
  3417 00000AD5 1F                                              pop     ds                                              ;... into data segment
  3418 00000AD6 8BB0[880B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3419 00000ADC FC                                              cld                                                     ;forward strings
  3420 00000ADD AC                      .10                     lodsb                                                   ;name character
  3421 00000ADE AA                                              stosb                                                   ;store in output buffer
  3422 00000ADF 84C0                                            test    al,al                                           ;end of string?
  3423 00000AE1 75FA                                            jnz     .10                                             ;no, continue
  3424 00000AE3 07                                              pop     es                                              ;restore non-volatile regs
  3425 00000AE4 1F                                              pop     ds                                              ;
  3426 00000AE5 5F                                              pop     edi                                             ;
  3427 00000AE6 5E                                              pop     esi                                             ;
  3428 00000AE7 C3                                              ret                                                     ;return
  3429                                  ;-----------------------------------------------------------------------------------------------------------------------
  3430                                  ;
  3431                                  ;       Routine:        PutYearString
  3432                                  ;
  3433                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3434                                  ;                       structure at ds:ebx.
  3435                                  ;
  3436                                  ;       In:             DS:EBX  DATETIME address
  3437                                  ;                       DS:EDX  output buffer address
  3438                                  ;
  3439                                  ;-----------------------------------------------------------------------------------------------------------------------
  3440 00000AE8 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3441 00000AE9 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3442 00000AEE B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3443 00000AF0 E866060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3444 00000AF5 59                                              pop     ecx                                             ;restore non-volatile regs
  3445 00000AF6 C3                                              ret                                                     ;return
  3446                                  ;-----------------------------------------------------------------------------------------------------------------------
  3447                                  ;
  3448                                  ;       Day Names
  3449                                  ;
  3450                                  ;-----------------------------------------------------------------------------------------------------------------------
  3451 00000AF7 53756E64617900          czSunday                db      "Sunday",0
  3452 00000AFE 4D6F6E64617900          czMonday                db      "Monday",0
  3453 00000B05 5475657364617900        czTuesday               db      "Tuesday",0
  3454 00000B0D 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3454 00000B16 00                 
  3455 00000B17 546875727364617900      czThursday              db      "Thursday",0
  3456 00000B20 46726964617900          czFriday                db      "Friday",0
  3457 00000B27 536174757264617900      czSaturday              db      "Saturday",0
  3458                                  ;-----------------------------------------------------------------------------------------------------------------------
  3459                                  ;
  3460                                  ;       Month Names
  3461                                  ;
  3462                                  ;-----------------------------------------------------------------------------------------------------------------------
  3463 00000B30 4A616E7561727900        czJanuary               db      "January",0
  3464 00000B38 466562727561727900      czFebruary              db      "February",0
  3465 00000B41 4D6172636800            czMarch                 db      "March",0
  3466 00000B47 417072696C00            czApril                 db      "April",0
  3467 00000B4D 4D617900                czMay                   db      "May",0
  3468 00000B51 4A756E6500              czJune                  db      "June",0
  3469 00000B56 4A756C7900              czJuly                  db      "July",0
  3470 00000B5B 41756775737400          czAugust                db      "August",0
  3471 00000B62 53657074656D626572-     czSeptember             db      "September",0
  3471 00000B6B 00                 
  3472 00000B6C 4F63746F62657200        czOctober               db      "October",0
  3473 00000B74 4E6F76656D62657200      czNovember              db      "November",0
  3474 00000B7D 446563656D62657200      czDecember              db      "December",0
  3475                                  ;-----------------------------------------------------------------------------------------------------------------------
  3476                                  ;
  3477                                  ;       Day Names Lookup Table
  3478                                  ;
  3479                                  ;-----------------------------------------------------------------------------------------------------------------------
  3480 00000B86 90<rept>                                        align   4
  3481                                  tDayNames               equ     $
  3482 00000B88 [F70A0000]                                      dd      czSunday
  3483 00000B8C [FE0A0000]                                      dd      czMonday
  3484 00000B90 [050B0000]                                      dd      czTuesday
  3485 00000B94 [0D0B0000]                                      dd      czWednesday
  3486 00000B98 [170B0000]                                      dd      czThursday
  3487 00000B9C [200B0000]                                      dd      czFriday
  3488 00000BA0 [270B0000]                                      dd      czSaturday
  3489                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3490                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3491                                  ;-----------------------------------------------------------------------------------------------------------------------
  3492                                  ;
  3493                                  ;       Month Names Lookup Table
  3494                                  ;
  3495                                  ;-----------------------------------------------------------------------------------------------------------------------
  3496                                                          align   4
  3497                                  tMonthNames             equ     $
  3498 00000BA4 [300B0000]                                      dd      czJanuary
  3499 00000BA8 [380B0000]                                      dd      czFebruary
  3500 00000BAC [410B0000]                                      dd      czMarch
  3501 00000BB0 [470B0000]                                      dd      czApril
  3502 00000BB4 [4D0B0000]                                      dd      czMay
  3503 00000BB8 [510B0000]                                      dd      czJune
  3504 00000BBC [560B0000]                                      dd      czJuly
  3505 00000BC0 [5B0B0000]                                      dd      czAugust
  3506 00000BC4 [620B0000]                                      dd      czSeptember
  3507 00000BC8 [6C0B0000]                                      dd      czOctober
  3508 00000BCC [740B0000]                                      dd      czNovember
  3509 00000BD0 [7D0B0000]                                      dd      czDecember
  3510                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3511                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3512                                  ;=======================================================================================================================
  3513                                  ;
  3514                                  ;       Memory Helper Routines
  3515                                  ;
  3516                                  ;       AllocateMemory
  3517                                  ;       FreeMemory
  3518                                  ;
  3519                                  ;=======================================================================================================================
  3520                                  ;-----------------------------------------------------------------------------------------------------------------------
  3521                                  ;
  3522                                  ;       Routine:        AllocateMemory
  3523                                  ;
  3524                                  ;       Description:    This routine allocates a memory block for the given task.
  3525                                  ;
  3526                                  ;       In:             ECX     bytes of memory to allocate
  3527                                  ;
  3528                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3529                                  ;                               0       unable to allocate memory
  3530                                  ;
  3531                                  ;-----------------------------------------------------------------------------------------------------------------------
  3532 00000BD4 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3533 00000BD5 51                                              push    ecx                                             ;
  3534 00000BD6 56                                              push    esi                                             ;
  3535 00000BD7 1E                                              push    ds                                              ;
  3536                                  ;
  3537                                  ;       Address kernel memory structures
  3538                                  ;
  3539 00000BD8 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3540 00000BDA 1F                                              pop     ds                                              ;... into data segment reg
  3541 00000BDB BE3B090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3542                                  ;
  3543                                  ;       Set requested size to minimum block size if requested size is too small.
  3544                                  ;
  3545 00000BE0 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3546 00000BE6 7305                                            jae     .10                                             ;no, branch
  3547 00000BE8 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3548 00000BED 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3549                                  ;
  3550                                  ;       Find the first free memory block large enough to satisfy the request.
  3551                                  ;
  3552 00000BF0 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3553 00000BF3 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3554 00000BF5 0F84F2000000                                    jz      .220                                            ;yes, branch
  3555 00000BFB 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3556 00000BFE 7605                                            jbe     .30                                             ;yes, branch
  3557 00000C00 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3558 00000C03 EBEE                                            jmp     .20                                             ;continue
  3559                                  ;-----------------------------------------------------------------------------------------------------------------------
  3560                                  ;
  3561                                  ;       Address the previous and next free memory blocks.
  3562                                  ;
  3563 00000C05 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3564 00000C08 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3565                                  ;
  3566                                  ;       Remove the free memory block from the forward free memory block chain.
  3567                                  ;
  3568 00000C0B 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3569 00000C0D 7405                                            jz      .40                                             ;no, branch
  3570 00000C0F 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3571 00000C12 EB03                                            jmp     .50                                             ;continue
  3572 00000C14 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3573                                  ;
  3574                                  ;       Remove the free memory block from the reverse free memory block chain.
  3575                                  ;
  3576 00000C17 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3577 00000C19 7405                                            jz      .60                                             ;no, branch
  3578 00000C1B 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3579 00000C1E EB03                                            jmp     .70                                             ;continue
  3580 00000C20 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3581                                  ;-----------------------------------------------------------------------------------------------------------------------
  3582                                  ;
  3583                                  ;       Determine if the free memory block can be split.
  3584                                  ;
  3585 00000C23 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3586 00000C26 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3587 00000C28 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3588 00000C2E 7263                                            jb      .150                                            ;no, branch
  3589                                  ;
  3590                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3591                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3592                                  ;       of the requested memory size.
  3593                                  ;
  3594 00000C30 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3595 00000C33 89C2                                            mov     edx,eax                                         ;memory block address
  3596 00000C35 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3597 00000C37 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3598 00000C3A 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3599                                  ;
  3600                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3601                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3602                                  ;
  3603 00000C3D E305                                            jecxz   .80                                             ;no next contig, branch
  3604 00000C3F 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3605 00000C42 EB03                                            jmp     .90                                             ;continue
  3606 00000C44 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3607                                  ;
  3608                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3609                                  ;
  3610 00000C47 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3611 00000C4A 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3612 00000C4D 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3613 00000C50 BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3614 00000C55 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3615 00000C57 31DB                                            xor     ebx,ebx                                         ;zero register
  3616 00000C59 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3617 00000C5C 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3618                                  ;
  3619                                  ;       Find the proper location in the free block chain for the new free block
  3620                                  ;
  3621 00000C5F 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3622 00000C62 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3623 00000C65 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3624 00000C67 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3625 00000C6A 7605                                            jbe     .110                                            ;yes, branch
  3626 00000C6C 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3627 00000C6F EBF4                                            jmp     .100                                            ;continue
  3628                                  ;
  3629                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3630                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3631                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3632                                  ;       block of hte next block, if there is one.
  3633                                  ;
  3634 00000C71 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3635 00000C74 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3636 00000C77 E308                                            jecxz   .120                                            ;branch if no next block
  3637 00000C79 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3638 00000C7C 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3639 00000C7F EB03                                            jmp     .130                                            ;continue
  3640 00000C81 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3641                                  ;
  3642                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3643                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3644                                  ;       last user block pointers if necessary.
  3645                                  ;
  3646 00000C84 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3647 00000C87 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3648 00000C89 7405                                            jz      .140                                            ;no, branch
  3649 00000C8B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3650 00000C8E EB03                                            jmp     .150                                            ;continue
  3651 00000C90 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3652                                  ;
  3653                                  ;       Update the newly allocated block's owner and signature.
  3654                                  ;
  3655 00000C93 BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3656 00000C98 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3657 00000C9A 31D2                                            xor     edx,edx                                         ;zero register
  3658 00000C9C 660F00CA                                        str     dx                                              ;load the task state register
  3659 00000CA0 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3660                                  ;
  3661                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3662                                  ;
  3663 00000CA3 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3664 00000CA6 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3665 00000CA8 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3666 00000CAB 721E                                            jb      .180                                            ;branch if block belongs to next task
  3667 00000CAD 7405                                            je      .170                                            ;branch if block belongs to this task
  3668 00000CAF 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3669 00000CB2 EBF2                                            jmp     .160                                            ;continue
  3670                                  ;
  3671                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3672                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3673                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3674                                  ;       place to insert the block.
  3675                                  ;
  3676 00000CB4 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3677 00000CB7 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3678 00000CBA 760F                                            jbe     .180                                            ;yes, branch
  3679 00000CBC 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3680 00000CBF 85C9                                            test    ecx,ecx                                         ;end of chain?
  3681 00000CC1 7408                                            jz      .180                                            ;yes, branch
  3682 00000CC3 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3683 00000CC6 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3684 00000CC9 74E9                                            je      .170                                            ;yes, continue search
  3685                                  ;
  3686                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3687                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3688                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3689                                  ;       do have a previous-block, we update that block's next-block pointer.
  3690                                  ;
  3691 00000CCB 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3692 00000CCE 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3693 00000CD1 E308                                            jecxz   .190                                            ;branch if no next-task block
  3694 00000CD3 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3695 00000CD6 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3696 00000CD9 EB03                                            jmp     .200                                            ;continue
  3697 00000CDB 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3698                                  ;
  3699                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3700                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3701                                  ;       global first and/or last user-block pointers if necessary.
  3702                                  ;
  3703 00000CDE 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3704 00000CE1 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3705 00000CE3 7405                                            jz      .210                                            ;no, branch
  3706 00000CE5 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3707 00000CE8 EB03                                            jmp     .220                                            ;continue
  3708 00000CEA 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3709                                  ;
  3710                                  ;       Restore registers and return to caller.
  3711                                  ;
  3712 00000CED 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3713 00000CEE 5E                                              pop     esi                                             ;
  3714 00000CEF 59                                              pop     ecx                                             ;
  3715 00000CF0 5B                                              pop     ebx                                             ;
  3716 00000CF1 C3                                              ret                                                     ;return
  3717                                  ;-----------------------------------------------------------------------------------------------------------------------
  3718                                  ;
  3719                                  ;       Routine:        FreeMemory
  3720                                  ;
  3721                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3722                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3723                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3724                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3725                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3726                                  ;
  3727                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3728                                  ;
  3729                                  ;       Out:            EAX     -1      invalid memory block
  3730                                  ;                               0       memory block freed
  3731                                  ;
  3732                                  ;-----------------------------------------------------------------------------------------------------------------------
  3733 00000CF2 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3734 00000CF3 51                                              push    ecx                                             ;
  3735 00000CF4 56                                              push    esi                                             ;
  3736 00000CF5 57                                              push    edi                                             ;
  3737 00000CF6 1E                                              push    ds                                              ;
  3738 00000CF7 06                                              push    es                                              ;
  3739                                  ;
  3740                                  ;       Address the root memory structure
  3741                                  ;
  3742 00000CF8 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3743 00000CFA 07                                              pop     es                                              ;... into extra segment reg
  3744 00000CFB 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3745 00000CFD 1F                                              pop     ds                                              ;... into data segment reg
  3746 00000CFE BE3B090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3747 00000D03 89D7                                            mov     edi,edx                                         ;memory block address
  3748                                  ;
  3749                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3750                                  ;
  3751 00000D05 31C0                                            xor     eax,eax                                         ;indicate success
  3752 00000D07 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3753 00000D0D 0F8415010000                                    je      .240                                            ;yes, branch
  3754 00000D13 48                                              dec     eax                                             ;indicate failure
  3755 00000D14 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3756 00000D1A 0F8508010000                                    jne     .240                                            ;no, branch
  3757                                  ;-----------------------------------------------------------------------------------------------------------------------
  3758                                  ;
  3759                                  ;       Unlink the USER memory block.
  3760                                  ;
  3761                                  ;-----------------------------------------------------------------------------------------------------------------------
  3762                                  ;
  3763                                  ;       Set the block signature. Reset owner.
  3764                                  ;
  3765 00000D20 C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3766 00000D26 31C0                                            xor     eax,eax                                         ;zero register
  3767 00000D28 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3768                                  ;
  3769                                  ;       Wipe user area.
  3770                                  ;
  3771 00000D2B 57                                              push    edi                                             ;save block address
  3772 00000D2C 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3773 00000D2F 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3774 00000D32 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3775 00000D35 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3776 00000D37 F3AA                                            rep     stosb                                           ;clear memory
  3777 00000D39 5F                                              pop     edi                                             ;restore block address
  3778                                  ;
  3779                                  ;       Address the preceding and following USER memory blocks
  3780                                  ;
  3781 00000D3A 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3782 00000D3D 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3783                                  ;
  3784                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3785                                  ;       pointer to point to the USER block following this block.
  3786                                  ;
  3787 00000D40 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3788 00000D42 7405                                            jz      .10                                             ;no, branch
  3789 00000D44 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3790 00000D47 EB03                                            jmp     .20                                             ;continue
  3791 00000D49 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3792                                  ;
  3793                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3794                                  ;       pointer to point to the USER block preceding this block.
  3795                                  ;
  3796 00000D4C E305                    .20                     jecxz   .30                                             ;branch if no next block
  3797 00000D4E 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3798 00000D51 EB03                                            jmp     .40                                             ;continue
  3799 00000D53 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3800                                  ;-----------------------------------------------------------------------------------------------------------------------
  3801                                  ;
  3802                                  ;       Merge with a previous contiguous FREE memory block.
  3803                                  ;
  3804                                  ;-----------------------------------------------------------------------------------------------------------------------
  3805                                  ;
  3806                                  ;       Address the preceding and following contiguous memory blocks.
  3807                                  ;
  3808 00000D56 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3809 00000D59 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3810                                  ;
  3811                                  ;       Verify we have a previous contiguous FREE block.
  3812                                  ;
  3813 00000D5C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3814 00000D5E 7442                                            jz      .100                                            ;no, branch
  3815 00000D60 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3816 00000D66 753A                                            jne     .100                                            ;no, branch
  3817                                  ;
  3818                                  ;       Update adjacent block's contiguous pointers.
  3819                                  ;
  3820 00000D68 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3821 00000D6B E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3822 00000D6D 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3823 00000D70 EB03                                            jmp     .60                                             ;continue
  3824 00000D72 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3825                                  ;
  3826                                  ;       Update the size of the merged FREE block.
  3827                                  ;
  3828 00000D75 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3829 00000D78 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3830                                  ;
  3831                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3832                                  ;
  3833 00000D7B B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3834 00000D80 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3835 00000D82 F3AA                                            rep     stosb                                           ;clear memory header
  3836 00000D84 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3837                                  ;-----------------------------------------------------------------------------------------------------------------------
  3838                                  ;
  3839                                  ;       Unlink the previous contiguous FREE memory block
  3840                                  ;
  3841                                  ;-----------------------------------------------------------------------------------------------------------------------
  3842                                  ;
  3843                                  ;       Address the preceding and following USER memory blocks
  3844                                  ;
  3845 00000D86 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3846 00000D89 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3847                                  ;
  3848                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3849                                  ;       block pointer.
  3850                                  ;
  3851 00000D8C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3852 00000D8E 7405                                            jz      .70                                             ;no, branch
  3853 00000D90 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3854 00000D93 EB03                                            jmp     .80                                             ;branch
  3855 00000D95 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3856                                  ;
  3857                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3858                                  ;       pointer.
  3859                                  ;
  3860 00000D98 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3861 00000D9A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3862 00000D9D EB03                                            jmp     .100                                            ;continue
  3863 00000D9F 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3864                                  ;-----------------------------------------------------------------------------------------------------------------------
  3865                                  ;
  3866                                  ;       Merge with a following contiguous FREE memory block.
  3867                                  ;
  3868                                  ;-----------------------------------------------------------------------------------------------------------------------
  3869                                  ;
  3870                                  ;       Verify we have a following contiguous FREE block.
  3871                                  ;
  3872 00000DA2 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3873 00000DA5 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3874 00000DA7 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3875 00000DAD 7543                                            jne     .170                                            ;no, branch
  3876                                  ;
  3877                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3878                                  ;
  3879 00000DAF 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3880 00000DB2 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3881                                  ;
  3882                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3883                                  ;
  3884 00000DB5 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3885 00000DB8 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3886 00000DBB 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3887 00000DBD 7405                                            jz      .110                                            ;no, branch
  3888 00000DBF 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3889 00000DC2 EB03                                            jmp     .120                                            ;continue
  3890 00000DC4 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3891                                  ;-----------------------------------------------------------------------------------------------------------------------
  3892                                  ;
  3893                                  ;       Unlink the following contiguous FREE memory block
  3894                                  ;
  3895                                  ;-----------------------------------------------------------------------------------------------------------------------
  3896                                  ;
  3897                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3898                                  ;
  3899 00000DC7 57                      .120                    push    edi                                             ;save this block
  3900 00000DC8 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3901 00000DCA 51                                              push    ecx                                             ;save next contiguous block
  3902                                  ;
  3903                                  ;       Address the preceding and following USER memory blocks
  3904                                  ;
  3905 00000DCB 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3906 00000DCE 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3907                                  ;
  3908                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3909                                  ;       block pointer.
  3910                                  ;
  3911 00000DD1 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3912 00000DD3 7405                                            jz      .130                                            ;no, branch
  3913 00000DD5 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3914 00000DD8 EB03                                            jmp     .140                                            ;branch
  3915 00000DDA 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3916                                  ;
  3917                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3918                                  ;       pointer.
  3919                                  ;
  3920 00000DDD E305                    .140                    jecxz   .150                                            ;branch if no next block
  3921 00000DDF 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3922 00000DE2 EB03                                            jmp     .160                                            ;continue
  3923 00000DE4 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3924                                  ;
  3925                                  ;       Clear next contiguous block's header
  3926                                  ;
  3927 00000DE7 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3928 00000DE8 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3929 00000DED B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3930 00000DEF F3AA                                            rep     stosb                                           ;clear memory header
  3931 00000DF1 5F                                              pop     edi                                             ;this block's pointer
  3932                                  ;-----------------------------------------------------------------------------------------------------------------------
  3933                                  ;
  3934                                  ;       Insert the final FREE block back into the block chain.
  3935                                  ;
  3936                                  ;-----------------------------------------------------------------------------------------------------------------------
  3937                                  ;
  3938                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3939                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3940                                  ;       all are smaller in size.
  3941                                  ;
  3942 00000DF2 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3943 00000DF5 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3944 00000DF8 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3945 00000DFA 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3946 00000DFD 7205                                            jb      .190                                            ;yes, branch
  3947 00000DFF 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3948 00000E02 EBF4                                            jmp     .180                                            ;continue
  3949                                  ;
  3950                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3951                                  ;       larger free block. Update the next block's previous block pointer.
  3952                                  ;
  3953 00000E04 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3954 00000E07 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3955 00000E0A E308                                            jecxz   .200                                            ;branch if no block found
  3956 00000E0C 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3957 00000E0F 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3958 00000E12 EB03                                            jmp     .210                                            ;continue
  3959 00000E14 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3960                                  ;
  3961                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3962                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3963                                  ;       next pointer.
  3964                                  ;
  3965 00000E17 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3966 00000E1A 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3967 00000E1C 7405                                            jz      .220                                            ;no, branch
  3968 00000E1E 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3969 00000E21 EB03                                            jmp     .230                                            ;continue
  3970 00000E23 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3971                                  ;
  3972                                  ;       The memory free has completed.
  3973                                  ;
  3974 00000E26 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3975                                  ;
  3976                                  ;       Restore and return.
  3977                                  ;
  3978 00000E28 07                      .240                    pop     es                                              ;restore non-volatile regs
  3979 00000E29 1F                                              pop     ds                                              ;
  3980 00000E2A 5F                                              pop     edi                                             ;
  3981 00000E2B 5E                                              pop     esi                                             ;
  3982 00000E2C 59                                              pop     ecx                                             ;
  3983 00000E2D 5B                                              pop     ebx                                             ;
  3984 00000E2E C3                                              ret                                                     ;return
  3985                                  ;=======================================================================================================================
  3986                                  ;
  3987                                  ;       String Helper Routines
  3988                                  ;
  3989                                  ;       CompareMemory
  3990                                  ;       UpperCaseString
  3991                                  ;
  3992                                  ;=======================================================================================================================
  3993                                  ;-----------------------------------------------------------------------------------------------------------------------
  3994                                  ;
  3995                                  ;       Routine:        CompareMemory
  3996                                  ;
  3997                                  ;       Description:    This routine compares two byte arrays.
  3998                                  ;
  3999                                  ;       In:             DS:EDX  first source address
  4000                                  ;                       DS:EBX  second source address
  4001                                  ;                       ECX     comparison length
  4002                                  ;
  4003                                  ;       Out:            EDX     first source address
  4004                                  ;                       EBX     second source address
  4005                                  ;                       ECX     0       array 1 = array 2
  4006                                  ;                               <0      array 1 < array 2
  4007                                  ;                               >0      array 1 > array 2
  4008                                  ;
  4009                                  ;-----------------------------------------------------------------------------------------------------------------------
  4010 00000E2F 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  4011 00000E30 57                                              push    edi                                             ;
  4012 00000E31 06                                              push    es                                              ;
  4013 00000E32 1E                                              push    ds                                              ;copy DS
  4014 00000E33 07                                              pop     es                                              ;... to ES
  4015 00000E34 89D6                                            mov     esi,edx                                         ;first source address
  4016 00000E36 89DF                                            mov     edi,ebx                                         ;second source address
  4017 00000E38 FC                                              cld                                                     ;forward strings
  4018 00000E39 F3A6                                            rep     cmpsb                                           ;compare bytes
  4019 00000E3B B000                                            mov     al,0                                            ;default result
  4020 00000E3D 7406                                            jz      .10                                             ;branch if arrays equal
  4021 00000E3F B001                                            mov     al,1                                            ;positive result
  4022 00000E41 7302                                            jnc     .10                                             ;branch if target > source
  4023 00000E43 B0FF                                            mov     al,-1                                           ;negative result
  4024 00000E45 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  4025 00000E48 07                                              pop     es                                              ;restore non-volatile regs
  4026 00000E49 5F                                              pop     edi                                             ;
  4027 00000E4A 5E                                              pop     esi                                             ;
  4028 00000E4B C3                                              ret                                                     ;return
  4029                                  ;-----------------------------------------------------------------------------------------------------------------------
  4030                                  ;
  4031                                  ;       Routine:        UpperCaseString
  4032                                  ;
  4033                                  ;       Description:    This routine places all characters in the given string to upper case.
  4034                                  ;
  4035                                  ;       In:             DS:EDX  string address
  4036                                  ;
  4037                                  ;       Out:            EDX     string address
  4038                                  ;
  4039                                  ;-----------------------------------------------------------------------------------------------------------------------
  4040 00000E4C 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  4041 00000E4D 89D6                                            mov     esi,edx                                         ;string address
  4042 00000E4F FC                                              cld                                                     ;forward strings
  4043 00000E50 AC                      .10                     lodsb                                                   ;string character
  4044 00000E51 84C0                                            test    al,al                                           ;null?
  4045 00000E53 740F                                            jz      .20                                             ;yes, skip ahead
  4046 00000E55 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4047 00000E57 72F7                                            jb      .10                                             ;no, continue
  4048 00000E59 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4049 00000E5B 77F3                                            ja      .10                                             ;no, continue
  4050 00000E5D 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  4051 00000E5F 8846FF                                          mov     [esi-1],al                                      ;upper character
  4052 00000E62 EBEC                                            jmp     .10                                             ;continue
  4053 00000E64 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4054 00000E65 C3                                              ret                                                     ;return
  4055                                  ;=======================================================================================================================
  4056                                  ;
  4057                                  ;       Console Helper Routines
  4058                                  ;
  4059                                  ;       FirstConsoleColumn
  4060                                  ;       GetConsoleChar
  4061                                  ;       GetConsoleString
  4062                                  ;       NextConsoleColumn
  4063                                  ;       NextConsoleRow
  4064                                  ;       PreviousConsoleColumn
  4065                                  ;       PutConsoleChar
  4066                                  ;       PutConsoleHexByte
  4067                                  ;       PutConsoleHexDword
  4068                                  ;       PutConsoleHexWord
  4069                                  ;       PutConsoleOIAChar
  4070                                  ;       PutConsoleOIAShift
  4071                                  ;       PutConsoleString
  4072                                  ;       Yield
  4073                                  ;
  4074                                  ;=======================================================================================================================
  4075                                  ;-----------------------------------------------------------------------------------------------------------------------
  4076                                  ;
  4077                                  ;       Routine:        FirstConsoleColumn
  4078                                  ;
  4079                                  ;       Description:    This routine resets the console column to start of the row.
  4080                                  ;
  4081                                  ;       In:             DS      OS data selector
  4082                                  ;
  4083                                  ;-----------------------------------------------------------------------------------------------------------------------
  4084 00000E66 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  4085 00000E68 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4086 00000E6D C3                                              ret                                                     ;return
  4087                                  ;-----------------------------------------------------------------------------------------------------------------------
  4088                                  ;
  4089                                  ;       Routine:        GetConsoleChar
  4090                                  ;
  4091                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4092                                  ;
  4093                                  ;       Out:            AL      ASCII character code
  4094                                  ;                       AH      keyboard scan code
  4095                                  ;
  4096                                  ;-----------------------------------------------------------------------------------------------------------------------
  4097 00000E6E E85C020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4098 00000E73 E8A7030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  4099 00000E78 09C0                                            or      eax,eax                                         ;do we have a message?
  4100 00000E7A 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  4101 00000E7C 50                                              push    eax                                             ;save key codes
  4102 00000E7D 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  4103 00000E82 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4104 00000E87 58                                              pop     eax                                             ;restore key codes
  4105 00000E88 75E9                                            jne     GetConsoleChar                                  ;no, try again
  4106 00000E8A 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4107 00000E8F C3                                              ret                                                     ;return
  4108                                  ;-----------------------------------------------------------------------------------------------------------------------
  4109                                  ;
  4110                                  ;       Routine:        GetConsoleString
  4111                                  ;
  4112                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4113                                  ;
  4114                                  ;       In:             DS:EDX  target buffer address
  4115                                  ;                       ECX     maximum number of characters to accept
  4116                                  ;                       BH      echo to terminal
  4117                                  ;                       BL      terminating character
  4118                                  ;
  4119                                  ;-----------------------------------------------------------------------------------------------------------------------
  4120 00000E90 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4121 00000E91 56                                              push    esi                                             ;
  4122 00000E92 57                                              push    edi                                             ;
  4123 00000E93 06                                              push    es                                              ;
  4124 00000E94 1E                                              push    ds                                              ;load data segment selector ...
  4125 00000E95 07                                              pop     es                                              ;... into extra segment register
  4126 00000E96 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4127 00000E98 51                                              push    ecx                                             ;save maximum characters
  4128 00000E99 30C0                                            xor     al,al                                           ;zero register
  4129 00000E9B FC                                              cld                                                     ;forward strings
  4130 00000E9C F3AA                                            rep     stosb                                           ;zero fill buffer
  4131 00000E9E 59                                              pop     ecx                                             ;maximum characters
  4132 00000E9F 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4133 00000EA1 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4134 00000EA3 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4135 00000EA5 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4136 00000EAA 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4137 00000EAC 7445                                            je      .50                                             ;yes, exit
  4138 00000EAE 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4139 00000EB0 7521                                            jne     .30                                             ;no, skip ahead
  4140 00000EB2 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4141 00000EB4 74EF                                            je      .20                                             ;yes, get next character
  4142 00000EB6 4F                                              dec     edi                                             ;backup target pointer
  4143 00000EB7 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4144 00000EBA 41                                              inc     ecx                                             ;increment remaining chars
  4145 00000EBB F6C701                                          test    bh,1                                            ;echo to console?
  4146 00000EBE 74E5                                            jz      .20                                             ;no, get next character
  4147 00000EC0 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4148 00000EC5 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4149 00000EC7 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4150 00000ECC E863040000                                      call    PlaceCursor                                     ;position the cursor
  4151 00000ED1 EBD2                                            jmp     .20                                             ;get next character
  4152 00000ED3 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4153 00000ED5 72CE                                            jb      .20                                             ;no, get another character
  4154 00000ED7 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4155 00000ED9 77CA                                            ja      .20                                             ;no, get another character
  4156 00000EDB AA                                              stosb                                                   ;store character in buffer
  4157 00000EDC F6C701                                          test    bh,1                                            ;echo to console?
  4158 00000EDF 740F                                            jz      .40                                             ;no, skip ahead
  4159 00000EE1 E877000000                                      call    PutConsoleChar                                  ;write character to console
  4160 00000EE6 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4161 00000EEB E844040000                                      call    PlaceCursor                                     ;position the cursor
  4162 00000EF0 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4163 00000EF1 EBB0                                            jmp     .10                                             ;next
  4164 00000EF3 30C0                    .50                     xor     al,al                                           ;null
  4165 00000EF5 AA                                              stosb                                                   ;terminate buffer
  4166 00000EF6 07                                              pop     es                                              ;restore non-volatile regs
  4167 00000EF7 5F                                              pop     edi                                             ;
  4168 00000EF8 5E                                              pop     esi                                             ;
  4169 00000EF9 59                                              pop     ecx                                             ;
  4170 00000EFA C3                                              ret                                                     ;return
  4171                                  ;-----------------------------------------------------------------------------------------------------------------------
  4172                                  ;
  4173                                  ;       Routine:        NextConsoleColumn
  4174                                  ;
  4175                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4176                                  ;                       incremented if the end of the current row is reached.
  4177                                  ;
  4178                                  ;       In:             DS      OS data selector
  4179                                  ;
  4180                                  ;-----------------------------------------------------------------------------------------------------------------------
  4181 00000EFB A014080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4182 00000F00 FEC0                                            inc     al                                              ;increment column
  4183 00000F02 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4184 00000F07 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4185 00000F09 720A                                            jb      .10                                             ;no, skip ahead
  4186 00000F0B E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4187 00000F10 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4188 00000F15 C3                      .10                     ret                                                     ;return
  4189                                  ;-----------------------------------------------------------------------------------------------------------------------
  4190                                  ;
  4191                                  ;       Routine:        NextConsoleRow
  4192                                  ;
  4193                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4194                                  ;
  4195                                  ;       In:             DS      OS data selector
  4196                                  ;
  4197                                  ;-----------------------------------------------------------------------------------------------------------------------
  4198 00000F16 A015080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4199 00000F1B FEC0                                            inc     al                                              ;increment row
  4200 00000F1D A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4201 00000F22 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4202 00000F24 7211                                            jb      .10                                             ;no, skip ahead
  4203 00000F26 E88C030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4204 00000F2B A015080000                                      mov     al,[wbConsoleRow]                               ;row
  4205 00000F30 FEC8                                            dec     al                                              ;decrement row
  4206 00000F32 A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4207 00000F37 C3                      .10                     ret                                                     ;return
  4208                                  ;-----------------------------------------------------------------------------------------------------------------------
  4209                                  ;
  4210                                  ;       Routine:        PreviousConsoleColumn
  4211                                  ;
  4212                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4213                                  ;                       the column is set to the last position in the row and the row is decremented.
  4214                                  ;
  4215                                  ;       In:             DS      OS data selector
  4216                                  ;
  4217                                  ;-----------------------------------------------------------------------------------------------------------------------
  4218 00000F38 A014080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4219 00000F3D 08C0                                            or      al,al                                           ;start of row?
  4220 00000F3F 7514                                            jnz     .10                                             ;no, skip ahead
  4221 00000F41 8A2515080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4222 00000F47 08E4                                            or      ah,ah                                           ;top of screen?
  4223 00000F49 7411                                            jz      .20                                             ;yes, exit with no change
  4224 00000F4B FECC                                            dec     ah                                              ;decrement row
  4225 00000F4D 882515080000                                    mov     [wbConsoleRow],ah                               ;save row
  4226 00000F53 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4227 00000F55 FEC8                    .10                     dec     al                                              ;decrement column
  4228 00000F57 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4229 00000F5C C3                      .20                     ret                                                     ;return
  4230                                  ;-----------------------------------------------------------------------------------------------------------------------
  4231                                  ;
  4232                                  ;       Routine:        PutConsoleChar
  4233                                  ;
  4234                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4235                                  ;
  4236                                  ;       In:             AL      ASCII character
  4237                                  ;                       DS      OS data selector
  4238                                  ;
  4239                                  ;-----------------------------------------------------------------------------------------------------------------------
  4240 00000F5D 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4241 00000F5E 06                                              push    es                                              ;
  4242 00000F5F 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4243 00000F61 07                                              pop     es                                              ;... into extra segment reg
  4244 00000F62 8A0D14080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4245 00000F68 8A2D15080000                                    mov     ch,[wbConsoleRow]                               ;row
  4246 00000F6E E870030000                                      call    SetConsoleChar                                  ;put character at row, column
  4247 00000F73 07                                              pop     es                                              ;restore non-volatile regs
  4248 00000F74 59                                              pop     ecx                                             ;
  4249 00000F75 C3                                              ret                                                     ;return
  4250                                  ;-----------------------------------------------------------------------------------------------------------------------
  4251                                  ;
  4252                                  ;       Routine:        PutConsoleHexByte
  4253                                  ;
  4254                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4255                                  ;
  4256                                  ;       In:             AL      byte value
  4257                                  ;                       CL      column
  4258                                  ;                       CH      row
  4259                                  ;                       DS      OS data selector
  4260                                  ;                       ES      CGA selector
  4261                                  ;
  4262                                  ;-----------------------------------------------------------------------------------------------------------------------
  4263 00000F76 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  4264 00000F77 C0E804                                          shr     al,4                                            ;hi-order nybble
  4265 00000F7A E803000000                                      call    .10                                             ;make ASCII and store
  4266 00000F7F 58                                              pop     eax                                             ;byte value
  4267 00000F80 240F                                            and     al,0Fh                                          ;lo-order nybble
  4268 00000F82 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  4269 00000F84 3C3A                                            cmp     al,03Ah                                         ;numeric?
  4270 00000F86 7202                                            jb      .20                                             ;yes, skip ahead
  4271 00000F88 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4272 00000F8A E854030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4273 00000F8F C3                                              ret                                                     ;return
  4274                                  ;-----------------------------------------------------------------------------------------------------------------------
  4275                                  ;
  4276                                  ;       Routine:        PutConsoleHexDword
  4277                                  ;
  4278                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4279                                  ;
  4280                                  ;       In:             EAX     value
  4281                                  ;                       CL      column
  4282                                  ;                       CH      row
  4283                                  ;                       DS      OS data selector
  4284                                  ;                       ES      CGA selector
  4285                                  ;
  4286                                  ;-----------------------------------------------------------------------------------------------------------------------
  4287 00000F90 50                      PutConsoleHexDword      push    eax
  4288 00000F91 C1E810                                          shr     eax,16
  4289 00000F94 E807000000                                      call    PutConsoleHexWord
  4290 00000F99 58                                              pop     eax
  4291 00000F9A E801000000                                      call    PutConsoleHexWord
  4292 00000F9F C3                                              ret
  4293                                  ;-----------------------------------------------------------------------------------------------------------------------
  4294                                  ;
  4295                                  ;       Routine:        PutConsoleHexWord
  4296                                  ;
  4297                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4298                                  ;
  4299                                  ;       In:             EAX     value
  4300                                  ;                       CL      column
  4301                                  ;                       CH      row
  4302                                  ;                       DS      OS data selector
  4303                                  ;                       ES      CGA selector
  4304                                  ;
  4305                                  ;-----------------------------------------------------------------------------------------------------------------------
  4306 00000FA0 50                      PutConsoleHexWord       push    eax
  4307 00000FA1 C1E808                                          shr     eax,8
  4308 00000FA4 E8CDFFFFFF                                      call    PutConsoleHexByte
  4309 00000FA9 58                                              pop     eax
  4310 00000FAA E8C7FFFFFF                                      call    PutConsoleHexByte
  4311 00000FAF C3                                              ret
  4312                                  ;-----------------------------------------------------------------------------------------------------------------------
  4313                                  ;
  4314                                  ;       Routine:        PutConsoleOIAChar
  4315                                  ;
  4316                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4317                                  ;
  4318                                  ;       In:             DS      OS data selector
  4319                                  ;
  4320                                  ;-----------------------------------------------------------------------------------------------------------------------
  4321 00000FB0 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4322 00000FB1 51                                              push    ecx                                             ;
  4323 00000FB2 56                                              push    esi                                             ;
  4324 00000FB3 1E                                              push    ds                                              ;
  4325 00000FB4 06                                              push    es                                              ;
  4326 00000FB5 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4327 00000FB7 1F                                              pop     ds                                              ;... into data segment register
  4328 00000FB8 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4329 00000FBA 07                                              pop     es                                              ;... into extra segment register
  4330 00000FBB BE19080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4331 00000FC0 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4332 00000FC2 B300                                            mov     bl,0                                            ;starting column
  4333 00000FC4 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4334 00000FC9 51                      .10                     push    ecx                                             ;save remaining count
  4335 00000FCA 89D9                                            mov     ecx,ebx                                         ;row, column
  4336 00000FCC AC                                              lodsb                                                   ;read scan code
  4337 00000FCD 08C0                                            or      al,al                                           ;scan code present?
  4338 00000FCF 7407                                            jz      .20                                             ;no, skip ahead
  4339 00000FD1 E8A0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4340 00000FD6 EB0E                                            jmp     .30                                             ;continue
  4341 00000FD8 B020                    .20                     mov     al,' '                                          ;ASCII space
  4342 00000FDA E804030000                                      call    SetConsoleChar                                  ;display space
  4343 00000FDF B020                                            mov     al,' '                                          ;ASCII space
  4344 00000FE1 E8FD020000                                      call    SetConsoleChar                                  ;display space
  4345 00000FE6 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4346 00000FE9 59                                              pop     ecx                                             ;restore remaining
  4347 00000FEA E2DD                                            loop    .10                                             ;next code
  4348 00000FEC A01F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4349 00000FF1 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4350 00000FF3 720D                                            jb      .40                                             ;no, skip ahead
  4351 00000FF5 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4352 00000FF7 7709                                            ja      .40                                             ;no, skip ahead
  4353 00000FF9 88FD                                            mov     ch,bh                                           ;OIA row
  4354 00000FFB B128                                            mov     cl,40                                           ;character display column
  4355 00000FFD E8E1020000                                      call    SetConsoleChar                                  ;display ASCII character
  4356 00001002 07                      .40                     pop     es                                              ;restore non-volatile regs
  4357 00001003 1F                                              pop     ds                                              ;
  4358 00001004 5E                                              pop     esi                                             ;
  4359 00001005 59                                              pop     ecx                                             ;
  4360 00001006 5B                                              pop     ebx                                             ;
  4361 00001007 C3                                              ret                                                     ;return
  4362                                  ;-----------------------------------------------------------------------------------------------------------------------
  4363                                  ;
  4364                                  ;       Routine:        PutConsoleOIAShift
  4365                                  ;
  4366                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4367                                  ;
  4368                                  ;       In:             BL      shift flags
  4369                                  ;                       BH      lock flags
  4370                                  ;                       DS      OS data selector
  4371                                  ;
  4372                                  ;-----------------------------------------------------------------------------------------------------------------------
  4373 00001008 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4374 00001009 06                                              push    es                                              ;
  4375 0000100A 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4376 0000100C 07                                              pop     es                                              ;... into ES register
  4377 0000100D B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4378 0000100F B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4379 00001011 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4380 00001014 7402                                            jz      .10                                             ;no, skip ahead
  4381 00001016 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4382 00001018 B10E                    .10                     mov     cl,14                                           ;indicator column
  4383 0000101A E8C4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4384 0000101F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4385 00001021 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4386 00001024 7402                                            jz      .20                                             ;no, skip ahead
  4387 00001026 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4388 00001028 B140                    .20                     mov     cl,64                                           ;indicator column
  4389 0000102A E8B4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4390 0000102F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4391 00001031 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4392 00001034 7402                                            jz      .30                                             ;no, skip ahead
  4393 00001036 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4394 00001038 B10F                    .30                     mov     cl,15                                           ;indicator column
  4395 0000103A E8A4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4396 0000103F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4397 00001041 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4398 00001044 7402                                            jz      .40                                             ;no, skip ahead
  4399 00001046 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4400 00001048 B13F                    .40                     mov     cl,63                                           ;indicator column
  4401 0000104A E894020000                                      call    SetConsoleChar                                  ;display ASCII character
  4402 0000104F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4403 00001051 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4404 00001054 7402                                            jz      .50                                             ;no, skip ahead
  4405 00001056 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4406 00001058 B110                    .50                     mov     cl,16                                           ;indicator column
  4407 0000105A E884020000                                      call    SetConsoleChar                                  ;display ASCII character
  4408 0000105F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4409 00001061 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4410 00001064 7402                                            jz      .60                                             ;no, skip ahead
  4411 00001066 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4412 00001068 B13E                    .60                     mov     cl,62                                           ;indicator column
  4413 0000106A E874020000                                      call    SetConsoleChar                                  ;display ASCII character
  4414 0000106F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4415 00001071 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4416 00001074 7402                                            jz      .70                                             ;no, skip ahead
  4417 00001076 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4418 00001078 B14E                    .70                     mov     cl,78                                           ;indicator column
  4419 0000107A E864020000                                      call    SetConsoleChar                                  ;display ASCII character
  4420 0000107F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4421 00001081 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4422 00001084 7402                                            jz      .80                                             ;no, skip ahead
  4423 00001086 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4424 00001088 B14D                    .80                     mov     cl,77                                           ;indicator column
  4425 0000108A E854020000                                      call    SetConsoleChar                                  ;display ASCII character
  4426 0000108F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4427 00001091 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4428 00001094 7402                                            jz      .90                                             ;no, skip ahead
  4429 00001096 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4430 00001098 B14C                    .90                     mov     cl,76                                           ;indicator column
  4431 0000109A E844020000                                      call    SetConsoleChar                                  ;display ASCII character
  4432 0000109F 07                                              pop     es                                              ;restore non-volatile regs
  4433 000010A0 59                                              pop     ecx                                             ;
  4434 000010A1 C3                                              ret                                                     ;return
  4435                                  ;-----------------------------------------------------------------------------------------------------------------------
  4436                                  ;
  4437                                  ;       Routine:        PutConsoleString
  4438                                  ;
  4439                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4440                                  ;                       console position as needed.
  4441                                  ;
  4442                                  ;       In:             EDX     source address
  4443                                  ;                       DS      OS data selector
  4444                                  ;
  4445                                  ;-----------------------------------------------------------------------------------------------------------------------
  4446 000010A2 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4447 000010A3 89D6                                            mov     esi,edx                                         ;source address
  4448 000010A5 FC                                              cld                                                     ;forward strings
  4449 000010A6 AC                      .10                     lodsb                                                   ;ASCII character
  4450 000010A7 08C0                                            or      al,al                                           ;end of string?
  4451 000010A9 7422                                            jz      .40                                             ;yes, skip ahead
  4452 000010AB 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4453 000010AD 7507                                            jne     .20                                             ;no, skip ahead
  4454 000010AF E8B2FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4455 000010B4 EBF0                                            jmp     .10                                             ;next character
  4456 000010B6 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4457 000010B8 7507                                            jne     .30                                             ;no, skip ahead
  4458 000010BA E857FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4459 000010BF EBE5                                            jmp     .10                                             ;next character
  4460 000010C1 E897FEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4461 000010C6 E830FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4462 000010CB EBD9                                            jmp     .10                                             ;next character
  4463 000010CD 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4464 000010CE C3                                              ret                                                     ;return
  4465                                  ;-----------------------------------------------------------------------------------------------------------------------
  4466                                  ;
  4467                                  ;       Routine:        Yield
  4468                                  ;
  4469                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4470                                  ;
  4471                                  ;-----------------------------------------------------------------------------------------------------------------------
  4472 000010CF FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4473 000010D0 F4                                              hlt                                                     ;halt until external interrupt
  4474 000010D1 C3                                              ret                                                     ;return
  4475                                  ;=======================================================================================================================
  4476                                  ;
  4477                                  ;       Data-Type Conversion Helper Routines
  4478                                  ;
  4479                                  ;       ByteToHex
  4480                                  ;       DecimalToUnsigned
  4481                                  ;       HexadecimalToUnsigned
  4482                                  ;       PutMACString
  4483                                  ;       UnsignedToDecimalString
  4484                                  ;       UnsignedToHexadecimal
  4485                                  ;
  4486                                  ;=======================================================================================================================
  4487                                  ;-----------------------------------------------------------------------------------------------------------------------
  4488                                  ;
  4489                                  ;       Routine:        ByteToHex
  4490                                  ;
  4491                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of 8-bit binary input.
  4492                                  ;
  4493                                  ;       Input:          DS:ESI  source address of byte
  4494                                  ;                       ES:EDI  target address of ASCIIZ string
  4495                                  ;
  4496                                  ;-----------------------------------------------------------------------------------------------------------------------
  4497 000010D2 AC                      ByteToHex               lodsb                                                   ;input byte
  4498 000010D3 50                                              push    eax                                             ;save input byte
  4499 000010D4 C0E804                                          shr     al,4                                            ;hi-order nybble
  4500 000010D7 E803000000                                      call    .10                                             ;make ASCII and store
  4501 000010DC 58                                              pop     eax                                             ;input byte
  4502 000010DD 240F                                            and     al,00Fh                                         ;lo-order nybble
  4503 000010DF 0C30                    .10                     or      al,030h                                         ;ASCII numeral zone
  4504 000010E1 3C3A                                            cmp     al,03Ah                                         ;'A' through 'F'?
  4505 000010E3 7202                                            jb      .20                                             ;no, branch
  4506 000010E5 0407                                            add     al,7                                            ;ajdust for 'A' through 'F'
  4507 000010E7 AA                      .20                     stosb                                                   ;store to output buffer
  4508 000010E8 C3                                              ret                                                     ;return
  4509                                  ;-----------------------------------------------------------------------------------------------------------------------
  4510                                  ;
  4511                                  ;       Routine:        DecimalToUnsigned
  4512                                  ;
  4513                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4514                                  ;
  4515                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4516                                  ;
  4517                                  ;       Output:         EAX     unsigned integer value
  4518                                  ;
  4519                                  ;-----------------------------------------------------------------------------------------------------------------------
  4520 000010E9 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4521 000010EA 89D6                                            mov     esi,edx                                         ;source address
  4522 000010EC 31D2                                            xor     edx,edx                                         ;zero total
  4523 000010EE AC                      .10                     lodsb                                                   ;source byte
  4524 000010EF 3C2C                                            cmp     al,','                                          ;comma?
  4525 000010F1 74FB                                            je      .10                                             ;yes, ignore
  4526 000010F3 84C0                                            test    al,al                                           ;end of string?
  4527 000010F5 7421                                            jz      .30                                             ;yes, done
  4528 000010F7 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4529 000010F9 741D                                            je      .30                                             ;yes, done
  4530 000010FB 3C30                                            cmp     al,'0'                                          ;numeral?
  4531 000010FD 7217                                            jb      .20                                             ;no, invalid string
  4532 000010FF 3C39                                            cmp     al,'9'                                          ;numeral?
  4533 00001101 7713                                            ja      .20                                             ;no, invalid string
  4534 00001103 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4535 00001105 50                                              push    eax                                             ;save numeral
  4536 00001106 D1E2                                            shl     edx,1                                           ;total * 2
  4537 00001108 89D0                                            mov     eax,edx                                         ;total * 2
  4538 0000110A C1E202                                          shl     edx,2                                           ;total * 8
  4539 0000110D 01C2                                            add     edx,eax                                         ;total * 10
  4540 0000110F 58                                              pop     eax                                             ;restore numeral
  4541 00001110 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4542 00001112 31C0                                            xor     eax,eax                                         ;zero register
  4543 00001114 EBD8                                            jmp     .10                                             ;next
  4544 00001116 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4545 00001118 89D0                    .30                     mov     eax,edx                                         ;result
  4546 0000111A 5E                                              pop     esi                                             ;restore non-volatile regs
  4547 0000111B C3                                              ret                                                     ;return
  4548                                  ;-----------------------------------------------------------------------------------------------------------------------
  4549                                  ;
  4550                                  ;       Routine:        HexadecimalToUnsigned
  4551                                  ;
  4552                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4553                                  ;
  4554                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4555                                  ;
  4556                                  ;       Output:         EAX     unsigned integer value
  4557                                  ;
  4558                                  ;-----------------------------------------------------------------------------------------------------------------------
  4559 0000111C 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4560 0000111D 89D6                                            mov     esi,edx                                         ;source address
  4561 0000111F 31D2                                            xor     edx,edx                                         ;zero register
  4562 00001121 AC                      .10                     lodsb                                                   ;source byte
  4563 00001122 84C0                                            test    al,al                                           ;end of string?
  4564 00001124 7410                                            jz      .30                                             ;yes, branch
  4565 00001126 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4566 00001128 7602                                            jna     .20                                             ;no, skip ahead
  4567 0000112A 2C37                                            sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  4568 0000112C 83E00F                  .20                     and     eax,00Fh                                        ;remove ascii zone
  4569 0000112F C1E204                                          shl     edx,4                                           ;previous total x 16
  4570 00001132 01C2                                            add     edx,eax                                         ;add prior value x 16
  4571 00001134 EBEB                                            jmp     .10                                             ;next
  4572 00001136 89D0                    .30                     mov     eax,edx                                         ;result
  4573 00001138 5E                                              pop     esi                                             ;restore non-volatile regs
  4574 00001139 C3                                              ret                                                     ;return
  4575                                  ;-----------------------------------------------------------------------------------------------------------------------
  4576                                  ;
  4577                                  ;       Routine:        PutMACString
  4578                                  ;
  4579                                  ;       Description:    This routine creates an ASCIIZ string representing the MAC address at the source address
  4580                                  ;
  4581                                  ;       Input:          ECX     source address of byte
  4582                                  ;                       EDX     target address of ASCIIZ string
  4583                                  ;
  4584                                  ;-----------------------------------------------------------------------------------------------------------------------
  4585 0000113A 51                      PutMACString            push    ecx                                             ;save non-volatile regs
  4586 0000113B 56                                              push    esi                                             ;
  4587 0000113C 57                                              push    edi                                             ;
  4588 0000113D 89D7                                            mov     edi,edx                                         ;output buffer address
  4589 0000113F 89CE                                            mov     esi,ecx                                         ;source buffer address
  4590 00001141 31C9                                            xor     ecx,ecx                                         ;zero ecx
  4591 00001143 B105                                            mov     cl,5                                            ;bytes that precede dashes
  4592 00001145 E888FFFFFF              .10                     call    ByteToHex                                       ;store hexadecimal ASCII
  4593 0000114A B02D                                            mov     al,EASCIIDASH                                   ;delimiter
  4594 0000114C AA                                              stosb                                                   ;store delimiter
  4595 0000114D E2F6                                            loop    .10                                             ;next
  4596 0000114F E87EFFFFFF                                      call    ByteToHex                                       ;store hexadecimal ASCII
  4597 00001154 30C0                                            xor     al,al                                           ;terminator
  4598 00001156 AA                                              stosb                                                   ;store terminator
  4599 00001157 5F                                              pop     edi                                             ;restore non-volatile regs
  4600 00001158 5E                                              pop     esi                                             ;
  4601 00001159 59                                              pop     ecx                                             ;
  4602 0000115A C3                                              ret                                                     ;return
  4603                                  ;-----------------------------------------------------------------------------------------------------------------------
  4604                                  ;
  4605                                  ;       Routine:        UnsignedToDecimalString
  4606                                  ;
  4607                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4608                                  ;
  4609                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4610                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4611                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4612                                  ;                       ECX     32-bit binary
  4613                                  ;                       DS:EDX  output buffer address
  4614                                  ;
  4615                                  ;-----------------------------------------------------------------------------------------------------------------------
  4616 0000115B 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4617 0000115C 51                                              push    ecx                                             ;
  4618 0000115D 57                                              push    edi                                             ;
  4619 0000115E 06                                              push    es                                              ;
  4620 0000115F 1E                                              push    ds                                              ;load data selector
  4621 00001160 07                                              pop     es                                              ;... into extra segment reg
  4622 00001161 89D7                                            mov     edi,edx                                         ;output buffer address
  4623 00001163 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4624 00001166 89CA                                            mov     edx,ecx                                         ;binary
  4625 00001168 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4626 0000116D E871000000                                      call    .30                                             ;divide and store
  4627 00001172 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4628 00001177 E855000000                                      call    .10                                             ;divide and store
  4629 0000117C B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4630 00001181 E85D000000                                      call    .30                                             ;divide and store
  4631 00001186 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4632 0000118B E853000000                                      call    .30                                             ;divide and store
  4633 00001190 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4634 00001195 E837000000                                      call    .10                                             ;divide and store
  4635 0000119A B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4636 0000119F E83F000000                                      call    .30                                             ;divide and store
  4637 000011A4 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4638 000011A9 E835000000                                      call    .30                                             ;divide and store
  4639 000011AE B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4640 000011B3 E819000000                                      call    .10                                             ;divide and store
  4641 000011B8 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4642 000011BD E821000000                                      call    .30                                             ;divide and store
  4643 000011C2 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4644 000011C4 E827000000                                      call    .40                                             ;store
  4645 000011C9 30C0                                            xor     al,al                                           ;null terminator
  4646 000011CB AA                                              stosb                                                   ;store in output buffer
  4647 000011CC 07                                              pop     es                                              ;restore non-volatile regs
  4648 000011CD 5F                                              pop     edi                                             ;
  4649 000011CE 59                                              pop     ecx                                             ;
  4650 000011CF 5B                                              pop     ebx                                             ;
  4651 000011D0 C3                                              ret                                                     ;return
  4652 000011D1 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4653 000011D4 740D                                            jz      .30                                             ;no, branch
  4654 000011D6 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4655 000011D9 7405                                            jz      .20                                             ;no, store delim
  4656 000011DB F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4657 000011DE 7403                                            jz      .30                                             ;no, branch
  4658 000011E0 B02C                    .20                     mov     al,','                                          ;delimiter
  4659 000011E2 AA                                              stosb                                                   ;store delimiter
  4660 000011E3 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4661 000011E5 31D2                                            xor     edx,edx                                         ;zero hi-order
  4662 000011E7 F7F1                                            div     ecx                                             ;divide by power of 10
  4663 000011E9 84C0                                            test    al,al                                           ;zero?
  4664 000011EB 7407                                            jz      .50                                             ;yes, branch
  4665 000011ED 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4666 000011F0 0C30                    .40                     or      al,030h                                         ;ASCII zone
  4667 000011F2 AA                                              stosb                                                   ;store digit
  4668 000011F3 C3                                              ret                                                     ;return
  4669 000011F4 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4670 000011F7 74F7                                            jz      .40                                             ;no, store and continue
  4671 000011F9 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4672 000011FC 75F2                                            jnz     .40                                             ;yes, store and continue
  4673 000011FE C3                                              ret                                                     ;return
  4674                                  ;-----------------------------------------------------------------------------------------------------------------------
  4675                                  ;
  4676                                  ;       Routine:        UnsignedToHexadecimal
  4677                                  ;
  4678                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4679                                  ;
  4680                                  ;       Input:          DS:EDX  output buffer address
  4681                                  ;                       ECX     32-bit binary
  4682                                  ;
  4683                                  ;-----------------------------------------------------------------------------------------------------------------------
  4684 000011FF 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4685 00001200 89D7                                            mov     edi,edx                                         ;output buffer address
  4686 00001202 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4687 00001204 31C9                                            xor     ecx,ecx                                         ;zero register
  4688 00001206 B108                                            mov     cl,8                                            ;nybble count
  4689 00001208 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4690 0000120B 88D0                                            mov     al,dl                                           ;????bbbb
  4691 0000120D 240F                                            and     al,00Fh                                         ;mask out bits 4-7
  4692 0000120F 0C30                                            or      al,030h                                         ;mask in ascii zone
  4693 00001211 3C3A                                            cmp     al,03Ah                                         ;A through F?
  4694 00001213 7202                                            jb      .20                                             ;no, skip ahead
  4695 00001215 0407                                            add     al,7                                            ;41h through 46h
  4696 00001217 AA                      .20                     stosb                                                   ;store hexnum
  4697 00001218 E2EE                                            loop    .10                                             ;next nybble
  4698 0000121A 30C0                                            xor     al,al                                           ;zero reg
  4699 0000121C AA                                              stosb                                                   ;null terminate
  4700 0000121D 5F                                              pop     edi                                             ;restore non-volatile regs
  4701 0000121E C3                                              ret                                                     ;return
  4702                                  ;=======================================================================================================================
  4703                                  ;
  4704                                  ;       Message Queue Helper Routines
  4705                                  ;
  4706                                  ;       GetMessage
  4707                                  ;       PutMessage
  4708                                  ;
  4709                                  ;=======================================================================================================================
  4710                                  ;-----------------------------------------------------------------------------------------------------------------------
  4711                                  ;
  4712                                  ;       Routine:        GetMessage
  4713                                  ;
  4714                                  ;       Description:    This routine reads and removes a message from the message queue.
  4715                                  ;
  4716                                  ;       Out:            EAX     lo-order message data
  4717                                  ;                       EDX     hi-order message data
  4718                                  ;
  4719                                  ;                       CY      0 = message read
  4720                                  ;                               1 = no message to read
  4721                                  ;
  4722                                  ;-----------------------------------------------------------------------------------------------------------------------
  4723 0000121F 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4724 00001220 51                                              push    ecx                                             ;
  4725 00001221 1E                                              push    ds                                              ;
  4726 00001222 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4727 00001224 1F                                              pop     ds                                              ;... into data segment register
  4728 00001225 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4729 0000122B 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4730 0000122D 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4731 00001230 09D0                                            or      eax,edx                                         ;is queue empty?
  4732 00001232 F9                                              stc                                                     ;assume queue is emtpy
  4733 00001233 741B                                            jz      .20                                             ;yes, skip ahead
  4734 00001235 31C9                                            xor     ecx,ecx                                         ;store zero
  4735 00001237 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4736 00001239 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4737 0000123C 83C308                                          add     ebx,8                                           ;next queue element
  4738 0000123F 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  4739 00001245 7502                                            jnz     .10                                             ;no, skip ahead
  4740 00001247 B308                                            mov     bl,8                                            ;reset to 1st entry
  4741 00001249 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4742 0000124F F8                                              clc                                                     ;indicate message read
  4743 00001250 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4744 00001251 59                                              pop     ecx                                             ;
  4745 00001252 5B                                              pop     ebx                                             ;
  4746 00001253 C3                                              ret                                                     ;return
  4747                                  ;-----------------------------------------------------------------------------------------------------------------------
  4748                                  ;
  4749                                  ;       Routine:        PutMessage
  4750                                  ;
  4751                                  ;       Description:    This routine adda a message to the message queue.
  4752                                  ;
  4753                                  ;       In:             ECX     hi-order data word
  4754                                  ;                       EDX     lo-order data word
  4755                                  ;
  4756                                  ;       Out:            CY      0 = success
  4757                                  ;                               1 = fail: queue is full
  4758                                  ;
  4759                                  ;-----------------------------------------------------------------------------------------------------------------------
  4760 00001254 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4761 00001255 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4762 00001257 1F                                              pop     ds                                              ;... into data segment register
  4763 00001258 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4764 0000125D 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4765 00001260 F9                                              stc                                                     ;assume failure
  4766 00001261 7517                                            jne     .20                                             ;yes, cannot store
  4767 00001263 8910                                            mov     [eax],edx                                       ;store lo-order data
  4768 00001265 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4769 00001268 83C008                                          add     eax,8                                           ;next queue element adr
  4770 0000126B 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  4771 00001270 7502                                            jnz     .10                                             ;no, skip ahead
  4772 00001272 B008                                            mov     al,8                                            ;reset to top of queue
  4773 00001274 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4774 00001279 F8                                              clc                                                     ;indicate success
  4775 0000127A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4776 0000127B C3                                              ret                                                     ;return
  4777                                  ;=======================================================================================================================
  4778                                  ;
  4779                                  ;       Memory-Mapped Video Routines
  4780                                  ;
  4781                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4782                                  ;
  4783                                  ;       ClearConsoleScreen
  4784                                  ;       ScrollConsoleRow
  4785                                  ;       SetConsoleChar
  4786                                  ;       SetConsoleString
  4787                                  ;
  4788                                  ;=======================================================================================================================
  4789                                  ;-----------------------------------------------------------------------------------------------------------------------
  4790                                  ;
  4791                                  ;       Routine:        ClearConsoleScreen
  4792                                  ;
  4793                                  ;       Description:    This routine clears the console (CGA) screen.
  4794                                  ;
  4795                                  ;-----------------------------------------------------------------------------------------------------------------------
  4796 0000127C 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4797 0000127D 57                                              push    edi                                             ;
  4798 0000127E 1E                                              push    ds                                              ;
  4799 0000127F 06                                              push    es                                              ;
  4800 00001280 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4801 00001282 1F                                              pop     ds                                              ;... into DS register
  4802 00001283 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4803 00001285 07                                              pop     es                                              ;... into ES register
  4804 00001286 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4805 0000128B B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4806 00001290 31FF                                            xor     edi,edi                                         ;target offset
  4807 00001292 FC                                              cld                                                     ;forward strings
  4808 00001293 F3AB                                            rep     stosd                                           ;reset screen body
  4809 00001295 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4810 0000129A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4811 0000129F F3AB                                            rep     stosd                                           ;reset OIA line
  4812 000012A1 30C0                                            xor     al,al                                           ;zero register
  4813 000012A3 A215080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4814 000012A8 A214080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4815 000012AD E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4816 000012B2 07                                              pop     es                                              ;restore non-volatile regs
  4817 000012B3 1F                                              pop     ds                                              ;
  4818 000012B4 5F                                              pop     edi                                             ;
  4819 000012B5 59                                              pop     ecx                                             ;
  4820 000012B6 C3                                              ret                                                     ;return
  4821                                  ;-----------------------------------------------------------------------------------------------------------------------
  4822                                  ;
  4823                                  ;       Routine:        ScrollConsoleRow
  4824                                  ;
  4825                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4826                                  ;
  4827                                  ;-----------------------------------------------------------------------------------------------------------------------
  4828 000012B7 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4829 000012B8 56                                              push    esi                                             ;
  4830 000012B9 57                                              push    edi                                             ;
  4831 000012BA 1E                                              push    ds                                              ;
  4832 000012BB 06                                              push    es                                              ;
  4833 000012BC 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4834 000012BE 1F                                              pop     ds                                              ;... into DS
  4835 000012BF 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4836 000012C1 07                                              pop     es                                              ;... into ES
  4837 000012C2 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4838 000012C7 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4839 000012CC 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4840 000012CE FC                                              cld                                                     ;forward strings
  4841 000012CF F3A5                                            rep     movsd                                           ;move 24 lines up
  4842 000012D1 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4843 000012D6 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4844 000012DB F3AB                                            rep     stosd                                           ;clear bottom row
  4845 000012DD 07                                              pop     es                                              ;restore non-volatile regs
  4846 000012DE 1F                                              pop     ds                                              ;
  4847 000012DF 5F                                              pop     edi                                             ;
  4848 000012E0 5E                                              pop     esi                                             ;
  4849 000012E1 59                                              pop     ecx                                             ;
  4850 000012E2 C3                                              ret                                                     ;return
  4851                                  ;-----------------------------------------------------------------------------------------------------------------------
  4852                                  ;
  4853                                  ;       Routine:        SetConsoleChar
  4854                                  ;
  4855                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4856                                  ;
  4857                                  ;       In:             AL      ASCII character
  4858                                  ;                       CL      column
  4859                                  ;                       CH      row
  4860                                  ;                       ES      CGA selector
  4861                                  ;
  4862                                  ;       Out:            EAX     last target address written (ES:)
  4863                                  ;                       CL      column + 1
  4864                                  ;
  4865                                  ;-----------------------------------------------------------------------------------------------------------------------
  4866 000012E3 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4867 000012E5 0FB6C5                                          movzx   eax,ch                                          ;row
  4868 000012E8 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4869 000012EA F6E4                                            mul     ah                                              ;row * cols/row
  4870 000012EC 00C8                                            add     al,cl                                           ;add column
  4871 000012EE 80D400                                          adc     ah,0                                            ;handle carry
  4872 000012F1 D1E0                                            shl     eax,1                                           ;screen offset
  4873 000012F3 268810                                          mov     [es:eax],dl                                     ;store character
  4874 000012F6 FEC1                                            inc     cl                                              ;next column
  4875 000012F8 C3                                              ret                                                     ;return
  4876                                  ;-----------------------------------------------------------------------------------------------------------------------
  4877                                  ;
  4878                                  ;       Routine:        SetConsoleString
  4879                                  ;
  4880                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4881                                  ;
  4882                                  ;       In:             ESI     source offset (DS:)
  4883                                  ;                       CL      column
  4884                                  ;                       CH      row
  4885                                  ;                       ES      CGA selector
  4886                                  ;
  4887                                  ;-----------------------------------------------------------------------------------------------------------------------
  4888 000012F9 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4889 000012FA FC                                              cld                                                     ;forward strings
  4890 000012FB AC                      .10                     lodsb                                                   ;next ASCII character
  4891 000012FC 84C0                                            test    al,al                                           ;end of string?
  4892 000012FE 7407                                            jz      .20                                             ;yes, branch
  4893 00001300 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4894 00001305 EBF4                                            jmp     .10                                             ;continue
  4895 00001307 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4896 00001308 C3                                              ret                                                     ;return
  4897                                  ;=======================================================================================================================
  4898                                  ;
  4899                                  ;       Input/Output Routines
  4900                                  ;
  4901                                  ;       These routines read and/or write directly to ports.
  4902                                  ;
  4903                                  ;       GetBaseMemSize
  4904                                  ;       GetExtendedMemSize
  4905                                  ;       GetROMMemSize
  4906                                  ;       PlaceCursor
  4907                                  ;       PutPrimaryEndOfInt
  4908                                  ;       PutSecondaryEndOfInt
  4909                                  ;       ReadRealTimeClock
  4910                                  ;       ResetSystem
  4911                                  ;       SetKeyboardLamps
  4912                                  ;       WaitForKeyInBuffer
  4913                                  ;       WaitForKeyOutBuffer
  4914                                  ;
  4915                                  ;=======================================================================================================================
  4916                                  ;-----------------------------------------------------------------------------------------------------------------------
  4917                                  ;
  4918                                  ;       Routine:        GetBaseMemSize
  4919                                  ;
  4920                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4921                                  ;
  4922                                  ;       Output:         EAX     base RAM size in bytes
  4923                                  ;
  4924                                  ;-----------------------------------------------------------------------------------------------------------------------
  4925 00001309 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4926 0000130B B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4927 0000130D E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4928 0000130F E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4929 00001311 88C4                                            mov     ah,al                                           ;save base RAM high
  4930 00001313 B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4931 00001315 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4932 00001317 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4933 00001319 C3                                              ret                                                     ;return to caller
  4934                                  ;-----------------------------------------------------------------------------------------------------------------------
  4935                                  ;
  4936                                  ;       Routine:        GetExtendedMemSize
  4937                                  ;
  4938                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4939                                  ;
  4940                                  ;       Output:         EAX     extended RAM size in bytes
  4941                                  ;
  4942                                  ;-----------------------------------------------------------------------------------------------------------------------
  4943 0000131A 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4944 0000131C B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4945 0000131E E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4946 00001320 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4947 00001322 88C4                                            mov     ah,al                                           ;save extended RAM high
  4948 00001324 B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4949 00001326 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4950 00001328 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4951 0000132A C3                                              ret                                                     ;return to caller
  4952                                  ;-----------------------------------------------------------------------------------------------------------------------
  4953                                  ;
  4954                                  ;       Routine:        GetROMMemSize
  4955                                  ;
  4956                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4957                                  ;
  4958                                  ;       Output:         EAX     RAM size in bytes
  4959                                  ;
  4960                                  ;-----------------------------------------------------------------------------------------------------------------------
  4961 0000132B 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4962 0000132D 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4963 00001333 C3                                              ret                                                     ;return
  4964                                  ;-----------------------------------------------------------------------------------------------------------------------
  4965                                  ;
  4966                                  ;       Routine:        PlaceCursor
  4967                                  ;
  4968                                  ;       Description:    This routine positions the cursor on the console.
  4969                                  ;
  4970                                  ;       In:             DS      OS data selector
  4971                                  ;
  4972                                  ;-----------------------------------------------------------------------------------------------------------------------
  4973 00001334 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4974 00001335 A015080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4975 0000133A B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4976 0000133C F6E4                                            mul     ah                                              ;row offset
  4977 0000133E 020514080000                                    add     al,[wbConsoleColumn]                            ;add column
  4978 00001344 80D400                                          adc     ah,0                                            ;add overflow
  4979 00001347 89C1                                            mov     ecx,eax                                         ;screen offset
  4980 00001349 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4981 0000134B B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4982 0000134D B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4983 0000134F EE                                              out     dx,al                                           ;select register
  4984 00001350 42                                              inc     edx                                             ;data port
  4985 00001351 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4986 00001353 EE                                              out     dx,al                                           ;store hi-order loc
  4987 00001354 4A                                              dec     edx                                             ;register select port
  4988 00001355 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4989 00001357 EE                                              out     dx,al                                           ;select register
  4990 00001358 42                                              inc     edx                                             ;data port
  4991 00001359 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4992 0000135B EE                                              out     dx,al                                           ;store lo-order loc
  4993 0000135C 59                                              pop     ecx                                             ;restore non-volatile regs
  4994 0000135D C3                                              ret                                                     ;return
  4995                                  ;-----------------------------------------------------------------------------------------------------------------------
  4996                                  ;
  4997                                  ;       Routine:        PutPrimaryEndOfInt
  4998                                  ;
  4999                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  5000                                  ;
  5001                                  ;-----------------------------------------------------------------------------------------------------------------------
  5002 0000135E FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  5003 0000135F B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5004 00001361 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  5005 00001363 C3                                              ret                                                     ;return
  5006                                  ;-----------------------------------------------------------------------------------------------------------------------
  5007                                  ;
  5008                                  ;       Routine:        PutSecondaryEndOfInt
  5009                                  ;
  5010                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  5011                                  ;
  5012                                  ;-----------------------------------------------------------------------------------------------------------------------
  5013 00001364 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  5014 00001365 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5015 00001367 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  5016 00001369 C3                                              ret                                                     ;return
  5017                                  ;-----------------------------------------------------------------------------------------------------------------------
  5018                                  ;
  5019                                  ;       Routine:        ReadRealTimeClock
  5020                                  ;
  5021                                  ;       Description:    This routine gets current date time from the real-time clock.
  5022                                  ;
  5023                                  ;       In:             DS:EBX  DATETIME structure
  5024                                  ;
  5025                                  ;-----------------------------------------------------------------------------------------------------------------------
  5026 0000136A 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  5027 0000136B 57                                              push    edi                                             ;
  5028 0000136C 06                                              push    es                                              ;
  5029 0000136D 1E                                              push    ds                                              ;store data selector ...
  5030 0000136E 07                                              pop     es                                              ;... in es register
  5031 0000136F 89DF                                            mov     edi,ebx                                         ;date-time structure
  5032 00001371 B000                                            mov     al,ERTCSECONDREG                                ;second register
  5033 00001373 E670                                            out     ERTCREGPORT,al                                  ;select second register
  5034 00001375 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  5035 00001377 FC                                              cld                                                     ;forward strings
  5036 00001378 AA                                              stosb                                                   ;store second value
  5037 00001379 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  5038 0000137B E670                                            out     ERTCREGPORT,al                                  ;select minute register
  5039 0000137D E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  5040 0000137F AA                                              stosb                                                   ;store minute value
  5041 00001380 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  5042 00001382 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  5043 00001384 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  5044 00001386 AA                                              stosb                                                   ;store hour value
  5045 00001387 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  5046 00001389 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  5047 0000138B E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  5048 0000138D AA                                              stosb                                                   ;store weekday value
  5049 0000138E B007                                            mov     al,ERTCDAYREG                                   ;day register
  5050 00001390 E670                                            out     ERTCREGPORT,al                                  ;select day register
  5051 00001392 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  5052 00001394 AA                                              stosb                                                   ;store day value
  5053 00001395 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  5054 00001397 E670                                            out     ERTCREGPORT,al                                  ;select month register
  5055 00001399 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  5056 0000139B AA                                              stosb                                                   ;store month value
  5057 0000139C B009                                            mov     al,ERTCYEARREG                                  ;year register
  5058 0000139E E670                                            out     ERTCREGPORT,al                                  ;select year register
  5059 000013A0 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  5060 000013A2 AA                                              stosb                                                   ;store year value
  5061 000013A3 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  5062 000013A5 E670                                            out     ERTCREGPORT,al                                  ;select century register
  5063 000013A7 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  5064 000013A9 AA                                              stosb                                                   ;store century value
  5065 000013AA B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  5066 000013AC E670                                            out     ERTCREGPORT,al                                  ;select status register
  5067 000013AE E471                                            in      al,ERTCDATAPORT                                 ;read status register
  5068 000013B0 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  5069 000013B2 751D                                            jnz     .20                                             ;skip ahead if binary values
  5070 000013B4 89DE                                            mov     esi,ebx                                         ;date-time structure address
  5071 000013B6 89DF                                            mov     edi,ebx                                         ;date-time structure address
  5072 000013B8 B908000000                                      mov     ecx,8                                           ;loop counter
  5073 000013BD AC                      .10                     lodsb                                                   ;BCD value
  5074 000013BE 88C4                                            mov     ah,al                                           ;BCD value
  5075 000013C0 240F                                            and     al,00001111b                                    ;low-order decimal zone
  5076 000013C2 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  5077 000013C5 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  5078 000013C7 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  5079 000013C9 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  5080 000013CC 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  5081 000013CE AA                                              stosb                                                   ;replace BCD with binary
  5082 000013CF E2EC                                            loop    .10                                             ;next value
  5083 000013D1 07                      .20                     pop     es                                              ;restore non-volatile regs
  5084 000013D2 5F                                              pop     edi                                             ;
  5085 000013D3 5E                                              pop     esi                                             ;
  5086 000013D4 C3                                              ret                                                     ;return
  5087                                  ;-----------------------------------------------------------------------------------------------------------------------
  5088                                  ;
  5089                                  ;       Routine:        ResetSystem
  5090                                  ;
  5091                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5092                                  ;
  5093                                  ;       Out:            N/A     This routine does not return.
  5094                                  ;
  5095                                  ;-----------------------------------------------------------------------------------------------------------------------
  5096 000013D5 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5097 000013DA E2FE                                            loop    $                                               ;clear interrupts
  5098 000013DC B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5099 000013DE E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5100 000013E0 FB                      .10                     sti                                                     ;enable maskable interrupts
  5101 000013E1 F4                                              hlt                                                     ;halt until interrupt
  5102 000013E2 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  5103                                  ;-----------------------------------------------------------------------------------------------------------------------
  5104                                  ;
  5105                                  ;       Routine:        SetKeyboardLamps
  5106                                  ;
  5107                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5108                                  ;
  5109                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5110                                  ;
  5111                                  ;-----------------------------------------------------------------------------------------------------------------------
  5112 000013E4 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5113 000013E9 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5114 000013EB E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  5115 000013ED E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5116 000013F2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5117 000013F4 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5118 000013F9 88F8                                            mov     al,bh                                           ;set/reset lamps value
  5119 000013FB E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  5120 000013FD E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5121 00001402 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5122 00001404 C3                                              ret                                                     ;return
  5123                                  ;-----------------------------------------------------------------------------------------------------------------------
  5124                                  ;
  5125                                  ;       Routine:        WaitForKeyInBuffer
  5126                                  ;
  5127                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5128                                  ;
  5129                                  ;       Out:            ZF      1 = Input buffer ready
  5130                                  ;                               0 = Input buffer not ready after timeout
  5131                                  ;
  5132                                  ;-----------------------------------------------------------------------------------------------------------------------
  5133 00001405 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5134 00001406 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5135 0000140B E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5136 0000140D A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  5137 0000140F E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  5138 00001411 59                                              pop     ecx                                             ;restore non-volatile regs
  5139 00001412 C3                                              ret                                                     ;return
  5140                                  ;-----------------------------------------------------------------------------------------------------------------------
  5141                                  ;
  5142                                  ;       Routine:        WaitForKeyOutBuffer
  5143                                  ;
  5144                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5145                                  ;
  5146                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5147                                  ;                               0 = Output buffer empty after timeout
  5148                                  ;
  5149                                  ;-----------------------------------------------------------------------------------------------------------------------
  5150 00001413 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5151 00001414 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5152 00001419 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5153 0000141B A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5154 0000141D E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5155 0000141F 59                                              pop     ecx                                             ;restore non-volatile regs
  5156 00001420 C3                                              ret                                                     ;return
  5157                                  ;-----------------------------------------------------------------------------------------------------------------------
  5158                                  ;
  5159                                  ;       End of the Kernel Function Library
  5160                                  ;
  5161                                  ;-----------------------------------------------------------------------------------------------------------------------
  5162 00001421 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5163                                  ;=======================================================================================================================
  5164                                  ;
  5165                                  ;       Console Task
  5166                                  ;
  5167                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5168                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5169                                  ;       screen and responds to user commands.
  5170                                  ;
  5171                                  ;=======================================================================================================================
  5172                                  ;-----------------------------------------------------------------------------------------------------------------------
  5173                                  ;
  5174                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5175                                  ;
  5176                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5177                                  ;
  5178                                  ;-----------------------------------------------------------------------------------------------------------------------
  5179                                  section                 constack                                                ;console task stack
  5180 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5181                                  ;-----------------------------------------------------------------------------------------------------------------------
  5182                                  ;
  5183                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5184                                  ;
  5185                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5186                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5187                                  ;       16 descriptors. Six are initially defined.
  5188                                  ;
  5189                                  ;-----------------------------------------------------------------------------------------------------------------------
  5190                                  section                 conldt                                                  ;console local descriptors
  5191 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5192 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5193 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5194 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5195 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  5196 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5197 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5198                                  ;-----------------------------------------------------------------------------------------------------------------------
  5199                                  ;
  5200                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5201                                  ;
  5202                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5203                                  ;       segment. CS to console code.
  5204                                  ;
  5205                                  ;-----------------------------------------------------------------------------------------------------------------------
  5206                                  section                 contss                                                  ;console task state segment
  5207 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5208 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5209 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5210 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5211 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5212 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5213 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5214 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5215 00000020 00000000                                        dd      0                                               ;20 eip
  5216 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5217 00000028 00000000                                        dd      0                                               ;28 eax
  5218 0000002C 00000000                                        dd      0                                               ;2c ecx
  5219 00000030 00000000                                        dd      0                                               ;30 edx
  5220 00000034 00000000                                        dd      0                                               ;34 ebx
  5221 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5222 0000003C 00000000                                        dd      0                                               ;3c ebp
  5223 00000040 00000000                                        dd      0                                               ;40 esi
  5224 00000044 00000000                                        dd      0                                               ;44 edi
  5225 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5226 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5227 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5228 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5229 00000058 00000000                                        dd      0                                               ;58 fs
  5230 0000005C 00000000                                        dd      0                                               ;5c gs
  5231 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5232 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5233                                  ;-----------------------------------------------------------------------------------------------------------------------
  5234                                  ;
  5235                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5236                                  ;
  5237                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5238                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5239                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5240                                  ;       event.
  5241                                  ;
  5242                                  ;-----------------------------------------------------------------------------------------------------------------------
  5243                                  section                 conmque                                                 ;console message queue
  5244 00000000 08000000                                        dd      8                                               ;head pointer
  5245 00000004 08000000                                        dd      8                                               ;tail pointer
  5246 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5247                                  ;-----------------------------------------------------------------------------------------------------------------------
  5248                                  ;
  5249                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5250                                  ;
  5251                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5252                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5253                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5254                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5255                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5256                                  ;       board input, echoing to the console screen and responding to user commands.
  5257                                  ;
  5258                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5259                                  ;
  5260                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5261                                  ;                               |  Real Mode Interrupt Vectors                  |
  5262                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5263                                  ;                               |  Reserved BIOS Memory Area                    |
  5264                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5265                                  ;                               |  Shared Kernel Memory Area                    |
  5266                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5267                                  ;                               |  Global Descriptor Table (GDT)                |
  5268                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5269                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5270                                  ;                       002000  +-----------------------------------------------+
  5271                                  ;                               |  Interrupt Handlers                           |
  5272                                  ;                               |  Kernel Function Library                      |
  5273                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5274                                  ;                               |  Console Task Stack Area                      |
  5275                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5276                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5277                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5278                                  ;                               |  Console Task Task State Segment (TSS)        |
  5279                                  ;                       004800  +-----------------------------------------------+
  5280                                  ;                               |  Console Task Message Queue                   |
  5281                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5282                                  ;                               |  Console Task Code                            |
  5283                                  ;                               |  Console Task Constants                       |
  5284                                  ;                       006000  +===============================================+
  5285                                  ;
  5286                                  ;-----------------------------------------------------------------------------------------------------------------------
  5287                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5288 00000000 E8CE000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5289                                                          clearConsoleScreen                                      ;clear the console screen
  5289 00000005 B001                <1>  mov al,eClearConsoleScreen
  5289 00000007 CD30                <1>  int _svc
  5290                                                          putConsoleString czTitle                                ;display startup message
  5290 00000009 BA[EE0A0000]        <1>  mov edx,%1
  5290 0000000E B00C                <1>  mov al,ePutConsoleString
  5290 00000010 CD30                <1>  int _svc
  5291                                                          putConsoleString czBaseMem                              ;base memory label
  5291 00000012 BA[A7090000]        <1>  mov edx,%1
  5291 00000017 B00C                <1>  mov al,ePutConsoleString
  5291 00000019 CD30                <1>  int _svc
  5292                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5292 0000001B BA11090000          <1>  mov edx,%1
  5292 00000020 B00C                <1>  mov al,ePutConsoleString
  5292 00000022 CD30                <1>  int _svc
  5293                                                          putConsoleString czKB                                   ;Kilobytes
  5293 00000024 BA[4E0A0000]        <1>  mov edx,%1
  5293 00000029 B00C                <1>  mov al,ePutConsoleString
  5293 0000002B CD30                <1>  int _svc
  5294 0000002D E833010000                                      call    ConPutNewLine                                   ;new line
  5295                                                          putConsoleString czROMMem                               ;ROM memory label
  5295 00000032 BA[D40A0000]        <1>  mov edx,%1
  5295 00000037 B00C                <1>  mov al,ePutConsoleString
  5295 00000039 CD30                <1>  int _svc
  5296                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5296 0000003B BA1C090000          <1>  mov edx,%1
  5296 00000040 B00C                <1>  mov al,ePutConsoleString
  5296 00000042 CD30                <1>  int _svc
  5297                                                          putConsoleString czKB                                   ;Kilobytes
  5297 00000044 BA[4E0A0000]        <1>  mov edx,%1
  5297 00000049 B00C                <1>  mov al,ePutConsoleString
  5297 0000004B CD30                <1>  int _svc
  5298 0000004D E813010000                                      call    ConPutNewLine                                   ;new line
  5299                                                          putConsoleString czExtendedMem                          ;extended memory label
  5299 00000052 BA[300A0000]        <1>  mov edx,%1
  5299 00000057 B00C                <1>  mov al,ePutConsoleString
  5299 00000059 CD30                <1>  int _svc
  5300                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5300 0000005B BA27090000          <1>  mov edx,%1
  5300 00000060 B00C                <1>  mov al,ePutConsoleString
  5300 00000062 CD30                <1>  int _svc
  5301                                                          putConsoleString czKB                                   ;Kilobytes
  5301 00000064 BA[4E0A0000]        <1>  mov edx,%1
  5301 00000069 B00C                <1>  mov al,ePutConsoleString
  5301 0000006B CD30                <1>  int _svc
  5302 0000006D E8F3000000                                      call    ConPutNewLine                                   ;new line
  5303 00000072 E8F8000000                                      call    ConInitializeNetwork                            ;initialize network
  5304                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5304                              <1> .10 :
  5304 00000077 BA[B50A0000]        <1>  mov edx,%1
  5304 0000007C B00C                <1>  mov al,ePutConsoleString
  5304 0000007E CD30                <1>  int _svc
  5305                                                          placeCursor                                             ;set CRT cursor location
  5305 00000080 B00B                <1>  mov al,ePlaceCursor
  5305 00000082 CD30                <1>  int _svc
  5306                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5306 00000084 BA21080000          <1>  mov edx,%1
  5306 00000089 B94F000000          <1>  mov ecx,%2
  5306 0000008E B701                <1>  mov bh,%3
  5306 00000090 B30D                <1>  mov bl,%4
  5306 00000092 B006                <1>  mov al,eGetConsoleString
  5306 00000094 CD30                <1>  int _svc
  5307 00000096 E8CA000000                                      call    ConPutNewLine                                   ;newline
  5308 0000009B BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5309 000000A0 BB71080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5310 000000A5 E8C2020000                                      call    ConTakeToken                                    ;handle console input
  5311 000000AA BA71080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5312 000000AF E8ED020000                                      call    ConDetermineCommand                             ;determine command number
  5313 000000B4 83F81A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5314 000000B7 720B                                            jb      .20                                             ;yes, branch
  5315                                                          putConsoleString czUnknownCommand                       ;display error message
  5315 000000B9 BA[0C0B0000]        <1>  mov edx,%1
  5315 000000BE B00C                <1>  mov al,ePutConsoleString
  5315 000000C0 CD30                <1>  int _svc
  5316 000000C2 EBB3                                            jmp     .10                                             ;next command
  5317 000000C4 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5318 000000C7 BA[5B080000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5319 000000CC 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5320 000000CF FFD0                                            call    eax                                             ;call command handler
  5321 000000D1 EBA4                                            jmp     .10                                             ;next command
  5322                                  ;-----------------------------------------------------------------------------------------------------------------------
  5323                                  ;
  5324                                  ;       Routine:        ConInitializeData
  5325                                  ;
  5326                                  ;       Description:    This routine initializes console task variables.
  5327                                  ;
  5328                                  ;-----------------------------------------------------------------------------------------------------------------------
  5329 000000D3 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5330 000000D4 57                                              push    edi                                             ;
  5331 000000D5 06                                              push    es                                              ;
  5332                                  ;
  5333                                  ;       Initialize console work areas.
  5334                                  ;
  5335 000000D6 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5336 000000D8 07                                              pop     es                                              ;... into extra segment register
  5337 000000D9 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5338 000000DE 30C0                                            xor     al,al                                           ;initialization value
  5339 000000E0 B98E010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5340 000000E5 FC                                              cld                                                     ;forward strings
  5341 000000E6 F3AA                                            rep     stosb                                           ;initialize data
  5342                                  ;
  5343                                  ;       Initialize heap size
  5344                                  ;
  5345 000000E8 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5346 000000ED A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5347                                  ;
  5348                                  ;       Initialize MEMROOT structure
  5349                                  ;
  5350 000000F2 BF3B090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5351 000000F7 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5352 000000FC 31C9                                            xor     ecx,ecx                                         ;zero register
  5353 000000FE B104                                            mov     cl,4                                            ;count
  5354 00000100 F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5355 00000102 31C0                                            xor     eax,eax                                         ;zero register
  5356 00000104 AB                                              stosd                                                   ;zero first task block
  5357 00000105 AB                                              stosd                                                   ;zero last task block
  5358                                  ;
  5359                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5360                                  ;
  5361 00000106 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5362 0000010B B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5363 00000110 AB                                              stosd                                                   ;store signature
  5364 00000111 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5365 00000116 AB                                              stosd                                                   ;store block size
  5366 00000117 31C9                                            xor     ecx,ecx                                         ;zero register
  5367 00000119 B106                                            mov     cl,6                                            ;count
  5368 0000011B 31C0                                            xor     eax,eax                                         ;zero register
  5369 0000011D F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5370                                  ;
  5371                                  ;       Read memory sizes from ROM
  5372                                  ;
  5373                                                          getROMMemSize                                           ;get ROM memory size
  5373 0000011F B008                <1>  mov al,eGetROMMemSize
  5373 00000121 CD30                <1>  int _svc
  5374 00000123 A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5375 00000128 89C1                                            mov     ecx,eax                                         ;integer param
  5376 0000012A BA1C090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  5377 0000012F B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5378                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5378 00000131 B01B                <1>  mov al,eUnsignedToDecimalString
  5378 00000133 CD30                <1>  int _svc
  5379                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5379 00000135 B005                <1>  mov al,eGetBaseMemSize
  5379 00000137 CD30                <1>  int _svc
  5380 00000139 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  5381 0000013E 89C1                                            mov     ecx,eax                                         ;integer param
  5382 00000140 BA11090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  5383 00000145 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5384                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5384 00000147 B01B                <1>  mov al,eUnsignedToDecimalString
  5384 00000149 CD30                <1>  int _svc
  5385                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5385 0000014B B007                <1>  mov al,eGetExtendedMemSize
  5385 0000014D CD30                <1>  int _svc
  5386 0000014F A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5387 00000154 89C1                                            mov     ecx,eax                                         ;integer param
  5388 00000156 BA27090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  5389 0000015B B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5390                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5390 0000015D B01B                <1>  mov al,eUnsignedToDecimalString
  5390 0000015F CD30                <1>  int _svc
  5391                                  ;
  5392                                  ;       Restore and return.
  5393                                  ;
  5394 00000161 07                                              pop     es                                              ;restore non-volatile regs
  5395 00000162 5F                                              pop     edi                                             ;
  5396 00000163 59                                              pop     ecx                                             ;
  5397 00000164 C3                                              ret                                                     ;return
  5398                                  ;-----------------------------------------------------------------------------------------------------------------------
  5399                                  ;
  5400                                  ;       Routine:        ConPutNewLine
  5401                                  ;
  5402                                  ;       Description:    Write a new-line to the console.
  5403                                  ;
  5404                                  ;-----------------------------------------------------------------------------------------------------------------------
  5405                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  5405                              <1> ConPutNewLine :
  5405 00000165 BA[510A0000]        <1>  mov edx,%1
  5405 0000016A B00C                <1>  mov al,ePutConsoleString
  5405 0000016C CD30                <1>  int _svc
  5406 0000016E C3                                              ret                                                     ;return
  5407                                  ;-----------------------------------------------------------------------------------------------------------------------
  5408                                  ;
  5409                                  ;       Routine:        ConInitializeNetwork
  5410                                  ;
  5411                                  ;       Description:    This routine initializes console network variables.
  5412                                  ;
  5413                                  ;-----------------------------------------------------------------------------------------------------------------------
  5414 0000016F 53                      ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5415 00000170 51                                              push    ecx                                             ;
  5416 00000171 56                                              push    esi                                             ;
  5417 00000172 57                                              push    edi                                             ;
  5418                                  ;
  5419                                  ;       Initialize ETHER structure.
  5420                                  ;
  5421 00000173 BB67090000                                      mov     ebx,wsConsoleEther                              ;ETHER structure address
  5422 00000178 E80F010000                                      call    ConInitEtherContext                             ;initialize ETHER struct
  5423 0000017D 89DE                                            mov     esi,ebx                                         ;ETHER structure address
  5424                                  ;
  5425                                  ;       Initialize variables.
  5426                                  ;       Construct PCI selector.
  5427                                  ;       Read PCI configuration data.
  5428                                  ;
  5429 0000017F BB5B090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  5430 00000184 E818010000                                      call    ConInitPCIContext                               ;initialize PCI struct
  5431 00000189 E828010000              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5432 0000018E E844010000                                      call    ConReadPCIConfigData                            ;read the configuration data
  5433                                  ;
  5434                                  ;       Interpret PCI data value.
  5435                                  ;
  5436 00000193 83F8FF                                          cmp     eax,-1		                                ;function defined?
  5437 00000196 7508                                            jne     .20                                             ;yes, branch
  5438 00000198 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  5439 0000019C 7410                                            je      .40                                             ;yes, skip to next device
  5440 0000019E EB07                                            jmp     short .30                                       ;no, skip to next function
  5441                                  ;
  5442                                  ;       Exit PCI probe if supported adapter found.
  5443                                  ;
  5444 000001A0 3D86800F10              .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5445 000001A5 7413                                            je      .50                                             ;yes, found!
  5446                                  ;
  5447                                  ;       Next function.
  5448                                  ;
  5449 000001A7 E83C010000              .30                     call    ConNextPCIFunction                              ;next function
  5450 000001AC 72DB                                            jb      .10                                             ;continue if no overflow
  5451                                  ;
  5452                                  ;       Next device, bus.
  5453                                  ;
  5454 000001AE E843010000              .40                     call    ConNextPCIDevice                                ;next device, bus.
  5455 000001B3 72D4                                            jb      .10                                             ;continue if no overflow
  5456 000001B5 E9CD000000                                      jmp     .60                                             ;done, ETHER not found
  5457                                  ;
  5458                                  ;       Set hardware flag and save selector.
  5459                                  ;
  5460 000001BA 8B4304                  .50                     mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5461 000001BD 8906                                            mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5462 000001BF 800D2008000080                                  or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5463                                                          putConsoleString czEthernetAdapterFound                 ;ethernet adapter found message
  5463 000001C6 BA[BF090000]        <1>  mov edx,%1
  5463 000001CB B00C                <1>  mov al,ePutConsoleString
  5463 000001CD CD30                <1>  int _svc
  5464                                  ;
  5465                                  ;       Save and report PCI data.
  5466                                  ;
  5467 000001CF 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5468 000001D1 89C1                                            mov     ecx,eax                                         ;ethernet adapter PCI selector
  5469 000001D3 BA[160A0000]                                    mov     edx,czEthernetSelector                          ;message label
  5470 000001D8 E831010000                                      call    ConPutLabeledHexValue                           ;output labeled message to console
  5471                                  
  5472 000001DD 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5473 000001DF 30C0                                            xor     al,al                                           ;register 0
  5474 000001E1 E847010000                                      call    ConReadPCIRegister                              ;EAX = device id | vendor id
  5475 000001E6 894604                                          mov     [esi+ETHER.devicevendor],eax                    ;save device id | vendor id
  5476 000001E9 89C1                                            mov     ecx,eax                                         ;device id | vendor id
  5477 000001EB BA[D8090000]                                    mov     edx,czEthernetDeviceVendor                      ;message label
  5478 000001F0 E819010000                                      call    ConPutLabeledHexValue                           ;output labeled message to console
  5479                                  
  5480 000001F5 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5481 000001F7 B004                                            mov     al,004h                                         ;status and command register
  5482 000001F9 E82F010000                                      call    ConReadPCIRegister                              ;EAX = status | command
  5483 000001FE 894608                                          mov     [esi+ETHER.statuscommand],eax                   ;save status | command
  5484 00000201 89C1                                            mov     ecx,eax                                         ;status | command
  5485 00000203 BA[260A0000]                                    mov     edx,czEthernetStatusCommand                     ;message label
  5486 00000208 E829010000                                      call    ConPutLabeledHexLine                            ;output labeled message to console
  5487                                  
  5488 0000020D 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5489 0000020F B010                                            mov     al,010h                                         ;mapped memory I/O (BAR0) register
  5490 00000211 E817010000                                      call    ConReadPCIRegister                              ;EAX = MMIO
  5491 00000216 894614                                          mov     [esi+ETHER.mmio],eax                            ;save MMIO
  5492 00000219 89C1                                            mov     ecx,eax                                         ;MMIO
  5493 0000021B BA[FC090000]                                    mov     edx,czEthernetMemoryAddr                        ;message label
  5494 00000220 E8E9000000                                      call    ConPutLabeledHexValue                           ;output labeled message to console
  5495                                  
  5496 00000225 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5497 00000227 B018                                            mov     al,018h                                         ;I/O port (BAR1) register
  5498 00000229 E8FF000000                                      call    ConReadPCIRegister                              ;EAX = I/O port
  5499 0000022E 83E0F8                                          and     eax,-8                                          ;mask out bits 2:0
  5500 00000231 89461C                                          mov     [esi+ETHER.port],eax                            ;save I/O port
  5501 00000234 89C1                                            mov     ecx,eax                                         ;I/O port
  5502 00000236 BA[0C0A0000]                                    mov     edx,czEthernetPort                              ;message label
  5503 0000023B E8CE000000                                      call    ConPutLabeledHexValue                           ;output labeled message to console
  5504                                  
  5505 00000240 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet device PCI selector
  5506 00000242 B03C                                            mov     al,03Ch                                         ;interrupt number register
  5507 00000244 E8E4000000                                      call    ConReadPCIRegister                              ;EAX = interrupt number
  5508 00000249 884626                                          mov     [esi+ETHER.irq],al                              ;save interrupt number
  5509 0000024C 0FB6C8                                          movzx   ecx,al                                          ;interrupt number
  5510 0000024F BA[E2090000]                                    mov     edx,czEthernetIRQ                               ;message label
  5511 00000254 E8E8000000                                      call    ConPutLabeledDecLine                            ;output labeled message to console
  5512                                  ;
  5513                                  ;       Read MAC address from MMIO
  5514                                  ;
  5515 00000259 8B4E14                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  5516 0000025C E329                                            jecxz   .60                                             ;branch if none
  5517 0000025E 81C100540000                                    add     ecx,05400h                                      ;MAC address offset
  5518 00000264 8B01                                            mov     eax,[ecx]                                       ;MAC address lo-order dword
  5519 00000266 894620                                          mov     [esi+ETHER.mac],eax                             ;save
  5520 00000269 668B4104                                        mov     ax,[ecx+4]                                      ;MAC address hi-order word
  5521 0000026D 66894624                                        mov     [esi+ETHER.mac+4],ax                            ;save
  5522 00000271 8D4E20                                          lea     ecx,[esi+ETHER.mac]                             ;address of MAC bytes
  5523                                                          putMACString wzConsoleToken                             ;output MAC ASCIIZ string
  5523 00000274 BA71080000          <1>  mov edx,%1
  5523 00000279 B010                <1>  mov al,ePutMACString
  5523 0000027B CD30                <1>  int _svc
  5524 0000027D BA[EC090000]                                    mov     edx,czEthernetMAC                               ;label string
  5525 00000282 E8DA000000                                      call    ConPutLabeledLine                               ;output labeled line to console
  5526                                  ;
  5527                                  ;       Restore and return.
  5528                                  ;
  5529 00000287 5F                      .60                     pop     edi                                             ;restore non-volatile regs
  5530 00000288 5E                                              pop     esi                                             ;
  5531 00000289 59                                              pop     ecx                                             ;
  5532 0000028A 5B                                              pop     ebx                                             ;
  5533 0000028B C3                                              ret                                                     ;return
  5534                                  ;-----------------------------------------------------------------------------------------------------------------------
  5535                                  ;
  5536                                  ;       Routine:        ConInitEtherContext
  5537                                  ;
  5538                                  ;       Description:    This routine zeros an ETHER structure
  5539                                  ;
  5540                                  ;       In:             DS:EBX  ETHER structure address
  5541                                  ;
  5542                                  ;-----------------------------------------------------------------------------------------------------------------------
  5543 0000028C 51                      ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  5544 0000028D 57                                              push    edi                                             ;
  5545 0000028E 06                                              push    es                                              ;
  5546                                  ;
  5547                                  ;       Zero context.
  5548                                  ;
  5549 0000028F 1E                                              push    ds                                              ;load data segment...
  5550 00000290 07                                              pop     es                                              ;...into extra segment
  5551 00000291 89DF                                            mov     edi,ebx                                         ;ETHER structure offset
  5552 00000293 B927000000                                      mov     ecx,EETHERLEN                                   ;ETHER structure length
  5553 00000298 30C0                                            xor     al,al                                           ;zero
  5554 0000029A FC                                              cld                                                     ;forward strings
  5555 0000029B F3AA                                            rep     stosb                                           ;zero structure members
  5556                                  ;
  5557                                  ;       Restore and return.
  5558                                  ;
  5559 0000029D 07                                              pop     es                                              ;restore non-volatile regs
  5560 0000029E 5F                                              pop     edi                                             ;
  5561 0000029F 59                                              pop     ecx                                             ;
  5562 000002A0 C3                                              ret                                                     ;return
  5563                                  ;-----------------------------------------------------------------------------------------------------------------------
  5564                                  ;
  5565                                  ;       Routine:        ConInitPCIContext
  5566                                  ;
  5567                                  ;       Description:    This routine initializes a PCI structure.
  5568                                  ;
  5569                                  ;       In:             DS:EBX  PCI structure address
  5570                                  ;
  5571                                  ;-----------------------------------------------------------------------------------------------------------------------
  5572 000002A1 51                      ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  5573 000002A2 57                                              push    edi                                             ;
  5574 000002A3 06                                              push    es                                              ;
  5575                                  ;
  5576                                  ;       Zero context.
  5577                                  ;
  5578 000002A4 1E                                              push    ds                                              ;load data segment...
  5579 000002A5 07                                              pop     es                                              ;...into extra segment
  5580 000002A6 89DF                                            mov     edi,ebx                                         ;PCI structure offset
  5581 000002A8 B90C000000                                      mov     ecx,EPCILEN                                     ;PCI structure length
  5582 000002AD 30C0                                            xor     al,al                                           ;zero
  5583 000002AF FC                                              cld                                                     ;forward strings
  5584 000002B0 F3AA                                            rep     stosb                                           ;zero structure members
  5585                                  ;
  5586                                  ;       Restore and return.
  5587                                  ;
  5588 000002B2 07                                              pop     es                                              ;restore non-volatile regs
  5589 000002B3 5F                                              pop     edi                                             ;
  5590 000002B4 59                                              pop     ecx                                             ;
  5591 000002B5 C3                                              ret                                                     ;return
  5592                                  ;-----------------------------------------------------------------------------------------------------------------------
  5593                                  ;
  5594                                  ;       Routine:        ConBuildPCISelector
  5595                                  ;
  5596                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  5597                                  ;
  5598                                  ;       In:             DS:EBX  PCI structure address
  5599                                  ;
  5600                                  ;       Out:            EAX     bus, device, function, register selector
  5601                                  ;
  5602                                  ;-----------------------------------------------------------------------------------------------------------------------
  5603 000002B6 8A23                    ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  5604 000002B8 8A5301                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  5605 000002BB C0E203                                          shl     dl,3                                            ;DL = dddd d000
  5606 000002BE 8A4302                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  5607 000002C1 2407                                            and     al,007h                                         ;AL = 0000 0fff
  5608 000002C3 08D0                                            or      al,dl                                           ;AL = dddd dfff
  5609 000002C5 0FB7C0                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5610 000002C8 C1E008                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5611 000002CB 8A4303                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  5612 000002CE 0D00000080                                      or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  5613 000002D3 894304                                          mov     [ebx+PCI.selector],eax                          ;set selector
  5614 000002D6 C3                                              ret                                                     ;return
  5615                                  ;-----------------------------------------------------------------------------------------------------------------------
  5616                                  ;
  5617                                  ;       Routine:        ConReadPCIConfigData
  5618                                  ;
  5619                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  5620                                  ;
  5621                                  ;       In:             DS:EBX  PCI structure address
  5622                                  ;
  5623                                  ;       Out:            EAX     config data
  5624                                  ;
  5625                                  ;-----------------------------------------------------------------------------------------------------------------------
  5626 000002D7 B60C                    ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  5627 000002D9 B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  5628 000002DB 8B4304                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5629 000002DE EF                                              out     dx,eax                                          ;select bus, device, function, reg
  5630 000002DF B60C                                            mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  5631 000002E1 B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  5632 000002E3 ED                                              in      eax,dx                                          ;read register
  5633 000002E4 894308                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  5634 000002E7 C3                                              ret                                                     ;return
  5635                                  ;-----------------------------------------------------------------------------------------------------------------------
  5636                                  ;
  5637                                  ;       Routine:        ConNextPCIFunction
  5638                                  ;
  5639                                  ;       Description:    This routine increments the function of the device.
  5640                                  ;
  5641                                  ;       In:             DS:EBX  PCI structure address
  5642                                  ;
  5643                                  ;       Out:            CY      0 = overflow
  5644                                  ;                               1 = no overflow, continue
  5645                                  ;
  5646                                  ;-----------------------------------------------------------------------------------------------------------------------
  5647 000002E8 FE4302                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  5648 000002EB 807B0208                                        cmp     byte [ebx+PCI.function],8                       ;at limit?
  5649 000002EF 7204                                            jb      .10                                             ;no, continue
  5650 000002F1 C6430200                                        mov     byte [ebx+PCI.function],0                       ;zero function
  5651 000002F5 C3                      .10                     ret                                                     ;return
  5652                                  ;-----------------------------------------------------------------------------------------------------------------------
  5653                                  ;
  5654                                  ;       Routine:        ConNextPCIDevice
  5655                                  ;
  5656                                  ;       Description:    This routine increments the device of the PCI across buses.
  5657                                  ;
  5658                                  ;       In:             DS:EBX  PCI structure address
  5659                                  ;
  5660                                  ;       Out:            CY      0 = overflow
  5661                                  ;                               1 = no overflow, continue
  5662                                  ;
  5663                                  ;-----------------------------------------------------------------------------------------------------------------------
  5664 000002F6 FE4301                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  5665 000002F9 807B0120                                        cmp     byte [ebx+PCI.device],32                        ;at limit?
  5666 000002FD 720E                                            jb      .10                                             ;no, continue
  5667 000002FF C6430100                                        mov     byte [ebx+PCI.device],0                         ;zero device
  5668 00000303 FE03                                            inc     byte [ebx+PCI.bus]                              ;next bus
  5669 00000305 803B08                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  5670 00000308 7203                                            jb      .10                                             ;no, continue
  5671 0000030A C60300                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  5672 0000030D C3                      .10                     ret                                                     ;return
  5673                                  ;-----------------------------------------------------------------------------------------------------------------------
  5674                                  ;
  5675                                  ;       Routine:        ConPutLabeledHexValue
  5676                                  ;
  5677                                  ;       Description:    Write labeled binary value as a hexadecimal string.
  5678                                  ;
  5679                                  ;       In:             ECX     binary value
  5680                                  ;                       EDX     prompt string address
  5681                                  ;
  5682                                  ;-----------------------------------------------------------------------------------------------------------------------
  5683 0000030E 52                      ConPutLabeledHexValue   push    edx                                             ;save prompt string address
  5684 0000030F BA71080000                                      mov     edx,wzConsoleToken                              ;output buffer address
  5685                                                          unsignedToHexadecimal                                   ;convert binary to ASCII hex
  5685 00000314 B01C                <1>  mov al,eUnsignedToHexadecimal
  5685 00000316 CD30                <1>  int _svc
  5686 00000318 5A                                              pop     edx                                             ;prompt string address
  5687 00000319 E801000000                                      call    ConPutLabeledString                             ;write labeled string to console
  5688 0000031E C3                                              ret                                                     ;return
  5689                                  ;-----------------------------------------------------------------------------------------------------------------------
  5690                                  ;
  5691                                  ;       Routine:        ConPutLabeledString
  5692                                  ;
  5693                                  ;       Description:    Write labeled string to the console.
  5694                                  ;
  5695                                  ;       In:             EDX     prompt string address
  5696                                  ;
  5697                                  ;-----------------------------------------------------------------------------------------------------------------------
  5698                                  ConPutLabeledString     putConsoleString                                        ;write value at DS:EDX to console
  5698                              <1> ConPutLabeledString :
  5698 0000031F B00C                <1>  mov al,ePutConsoleString
  5698 00000321 CD30                <1>  int _svc
  5699                                                          putConsoleString wzConsoleToken                         ;write token value to console
  5699 00000323 BA71080000          <1>  mov edx,%1
  5699 00000328 B00C                <1>  mov al,ePutConsoleString
  5699 0000032A CD30                <1>  int _svc
  5700 0000032C C3                                              ret                                                     ;return
  5701                                  ;-----------------------------------------------------------------------------------------------------------------------
  5702                                  ;
  5703                                  ;       Routine:        ConReadPCIRegister
  5704                                  ;
  5705                                  ;       Description:    This routine reads a PCI register
  5706                                  ;
  5707                                  ;       In:             EAX     PCI register
  5708                                  ;
  5709                                  ;       Out:            EAX     PCI register value
  5710                                  ;-----------------------------------------------------------------------------------------------------------------------
  5711 0000032D B60C                    ConReadPCIRegister      mov     dh,EPCIPORTCONFIGADDRHI                         ;hi-order PCI configuration addr port
  5712 0000032F B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;lo-order PCI configuration addr port
  5713 00000331 EF                                              out     dx,eax                                          ;select PCI register
  5714 00000332 B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5715 00000334 ED                                              in      eax,dx                                          ;read register
  5716 00000335 C3                                              ret                                                     ;return
  5717                                  ;-----------------------------------------------------------------------------------------------------------------------
  5718                                  ;
  5719                                  ;       Routine:        ConPutLabeledHexLine
  5720                                  ;
  5721                                  ;       Description:    Write labeled binary value as a hexadecimal string with new-line.
  5722                                  ;
  5723                                  ;       In:             ECX     binary value
  5724                                  ;                       EDX     prompt string address
  5725                                  ;
  5726                                  ;-----------------------------------------------------------------------------------------------------------------------
  5727 00000336 E8D3FFFFFF              ConPutLabeledHexLine    call    ConPutLabeledHexValue                           ;write labeled value to console
  5728 0000033B E825FEFFFF                                      call    ConPutNewLine                                   ;write new-line to console
  5729 00000340 C3                                              ret                                                     ;return
  5730                                  ;-----------------------------------------------------------------------------------------------------------------------
  5731                                  ;
  5732                                  ;       Routine:        ConPutLabeledDecLine
  5733                                  ;
  5734                                  ;       Description:    Write labeled binary value as a decimal string with new-line.
  5735                                  ;
  5736                                  ;       In:             ECX     binary value
  5737                                  ;                       EDX     prompt string address
  5738                                  ;
  5739                                  ;-----------------------------------------------------------------------------------------------------------------------
  5740 00000341 E806000000              ConPutLabeledDecLine    call    ConPutLabeledDecValue                           ;write labeled value to console
  5741 00000346 E81AFEFFFF                                      call    ConPutNewLine                                   ;write new-line to console
  5742 0000034B C3                                              ret                                                     ;return
  5743                                  ;-----------------------------------------------------------------------------------------------------------------------
  5744                                  ;
  5745                                  ;       Routine:        ConPutLabeledDecValue
  5746                                  ;
  5747                                  ;       Description:    Write labeled binary value as a decimal string.
  5748                                  ;
  5749                                  ;       In:             ECX     binary value
  5750                                  ;                       EDX     prompt string address
  5751                                  ;
  5752                                  ;-----------------------------------------------------------------------------------------------------------------------
  5753 0000034C 53                      ConPutLabeledDecValue   push    ebx                                             ;save non-volatile regs
  5754 0000034D 52                                              push    edx                                             ;save prompt string address
  5755 0000034E BA71080000                                      mov     edx,wzConsoleToken                              ;output bufer address
  5756 00000353 B701                                            mov     bh,1                                            ;suppress leading zeros
  5757                                                          unsignedToDecimalString                                 ;convert binary to decimal string
  5757 00000355 B01B                <1>  mov al,eUnsignedToDecimalString
  5757 00000357 CD30                <1>  int _svc
  5758 00000359 5A                                              pop     edx                                             ;prompt string address
  5759 0000035A E8C0FFFFFF                                      call    ConPutLabeledString                             ;write labeled string to console
  5760 0000035F 5B                                              pop     ebx                                             ;restore non-volatile regs
  5761 00000360 C3                                              ret                                                     ;return
  5762                                  ;-----------------------------------------------------------------------------------------------------------------------
  5763                                  ;
  5764                                  ;       Routine:        ConPutLabeledLine
  5765                                  ;
  5766                                  ;       Description:    Write labeled string value with new-line.
  5767                                  ;
  5768                                  ;       In:             EDX     prompt string address
  5769                                  ;
  5770                                  ;-----------------------------------------------------------------------------------------------------------------------
  5771 00000361 E8B9FFFFFF              ConPutLabeledLine       call    ConPutLabeledString                             ;write labeled string to console
  5772 00000366 E8FAFDFFFF                                      call    ConPutNewLine                                   ;write new-line to console
  5773 0000036B C3                                              ret                                                     ;return
  5774                                  ;-----------------------------------------------------------------------------------------------------------------------
  5775                                  ;
  5776                                  ;       Routine:        ConTakeToken
  5777                                  ;
  5778                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5779                                  ;
  5780                                  ;       In:             DS:EDX  source buffer address
  5781                                  ;                       DS:EBX  target buffer address
  5782                                  ;
  5783                                  ;       Out:            DS:EDX  source buffer address
  5784                                  ;                       DS:EBX  target buffer address
  5785                                  ;
  5786                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5787                                  ;
  5788                                  ;-----------------------------------------------------------------------------------------------------------------------
  5789 0000036C 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5790 0000036D 57                                              push    edi                                             ;
  5791 0000036E 06                                              push    es                                              ;
  5792 0000036F 1E                                              push    ds                                              ;load data segment selector ...
  5793 00000370 07                                              pop     es                                              ;... into extra segment reg
  5794 00000371 89D6                                            mov     esi,edx                                         ;source buffer address
  5795 00000373 89DF                                            mov     edi,ebx                                         ;target buffer address
  5796 00000375 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5797 00000378 FC                                              cld                                                     ;forward strings
  5798 00000379 AC                      .10                     lodsb                                                   ;load byte
  5799 0000037A 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5800 0000037C 74FB                                            je      .10                                             ;yes, continue
  5801 0000037E 84C0                                            test    al,al                                           ;end of line?
  5802 00000380 7410                                            jz      .40                                             ;yes, branch
  5803 00000382 AA                      .20                     stosb                                                   ;store byte
  5804 00000383 AC                                              lodsb                                                   ;load byte
  5805 00000384 84C0                                            test    al,al                                           ;end of line?
  5806 00000386 740A                                            jz      .40                                             ;no, continue
  5807 00000388 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5808 0000038A 75F6                                            jne     .20                                             ;no, continue
  5809 0000038C AC                      .30                     lodsb                                                   ;load byte
  5810 0000038D 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5811 0000038F 74FB                                            je      .30                                             ;yes, continue
  5812 00000391 4E                                              dec     esi                                             ;pre-position
  5813 00000392 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5814 00000395 89D7                                            mov     edi,edx                                         ;source buffer address
  5815 00000397 AC                      .50                     lodsb                                                   ;remaining byte
  5816 00000398 AA                                              stosb                                                   ;move to front of buffer
  5817 00000399 84C0                                            test    al,al                                           ;end of line?
  5818 0000039B 75FA                                            jnz     .50                                             ;no, continue
  5819 0000039D 07                                              pop     es                                              ;restore non-volatile regs
  5820 0000039E 5F                                              pop     edi                                             ;
  5821 0000039F 5E                                              pop     esi                                             ;
  5822 000003A0 C3                                              ret                                                     ;return
  5823                                  ;-----------------------------------------------------------------------------------------------------------------------
  5824                                  ;
  5825                                  ;       Routine:        ConDetermineCommand
  5826                                  ;
  5827                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5828                                  ;
  5829                                  ;       input:          DS:EDX  command address
  5830                                  ;
  5831                                  ;       output:         EAX     >=0     = command nbr
  5832                                  ;                               0       = unknown command
  5833                                  ;
  5834                                  ;-----------------------------------------------------------------------------------------------------------------------
  5835 000003A1 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5836 000003A2 51                                              push    ecx                                             ;
  5837 000003A3 56                                              push    esi                                             ;
  5838 000003A4 57                                              push    edi                                             ;
  5839                                                          upperCaseString                                         ;upper-case string at EDX
  5839 000003A5 B01D                <1>  mov al,eUpperCaseString
  5839 000003A7 CD30                <1>  int _svc
  5840 000003A9 BE[C3080000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5841 000003AE 31FF                                            xor     edi,edi                                         ;intialize command number
  5842 000003B0 FC                                              cld                                                     ;forward strings
  5843 000003B1 AC                      .10                     lodsb                                                   ;command length
  5844 000003B2 0FB6C8                                          movzx   ecx,al                                          ;command length
  5845 000003B5 E30D                                            jecxz   .20                                             ;branch if end of table
  5846 000003B7 89F3                                            mov     ebx,esi                                         ;table entry address
  5847 000003B9 01CE                                            add     esi,ecx                                         ;next table entry address
  5848                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5848 000003BB B002                <1>  mov al,eCompareMemory
  5848 000003BD CD30                <1>  int _svc
  5849 000003BF E303                                            jecxz   .20                                             ;branch if equal
  5850 000003C1 47                                              inc     edi                                             ;increment command nbr
  5851 000003C2 EBED                                            jmp     .10                                             ;repeat
  5852 000003C4 89F8                    .20                     mov     eax,edi                                         ;command number
  5853 000003C6 5F                                              pop     edi                                             ;restore non-volatile regs
  5854 000003C7 5E                                              pop     esi                                             ;
  5855 000003C8 59                                              pop     ecx                                             ;
  5856 000003C9 5B                                              pop     ebx                                             ;
  5857 000003CA C3                                              ret                                                     ;return
  5858                                  ;-----------------------------------------------------------------------------------------------------------------------
  5859                                  ;
  5860                                  ;       Routine:        ConClear
  5861                                  ;
  5862                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5863                                  ;
  5864                                  ;-----------------------------------------------------------------------------------------------------------------------
  5865                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5865                              <1> ConClear :
  5865 000003CB B001                <1>  mov al,eClearConsoleScreen
  5865 000003CD CD30                <1>  int _svc
  5866 000003CF C3                                              ret                                                     ;return
  5867                                  ;-----------------------------------------------------------------------------------------------------------------------
  5868                                  ;
  5869                                  ;       Routine:        ConDate
  5870                                  ;
  5871                                  ;       Description:    This routine handles the DATE command.
  5872                                  ;
  5873                                  ;-----------------------------------------------------------------------------------------------------------------------
  5874                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5874                              <1> ConDate :
  5874 000003D0 BB53090000          <1>  mov ebx,%1
  5874 000003D5 B019                <1>  mov al,eReadRealTimeClock
  5874 000003D7 CD30                <1>  int _svc
  5875                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5875 000003D9 BB53090000          <1>  mov ebx,%1
  5875 000003DE BAC1080000          <1>  mov edx,%2
  5875 000003E3 B00D                <1>  mov al,ePutDateString
  5875 000003E5 CD30                <1>  int _svc
  5876                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5876 000003E7 BAC1080000          <1>  mov edx,%1
  5876 000003EC B00C                <1>  mov al,ePutConsoleString
  5876 000003EE CD30                <1>  int _svc
  5877 000003F0 E870FDFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5878 000003F5 C3                                              ret                                                     ;return
  5879                                  ;-----------------------------------------------------------------------------------------------------------------------
  5880                                  ;
  5881                                  ;       Routine:        ConDay
  5882                                  ;
  5883                                  ;       Description:    This routine handles the DAY command.
  5884                                  ;
  5885                                  ;-----------------------------------------------------------------------------------------------------------------------
  5886                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5886                              <1> ConDay :
  5886 000003F6 BB53090000          <1>  mov ebx,%1
  5886 000003FB B019                <1>  mov al,eReadRealTimeClock
  5886 000003FD CD30                <1>  int _svc
  5887                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5887 000003FF BB53090000          <1>  mov ebx,%1
  5887 00000404 BAC1080000          <1>  mov edx,%2
  5887 00000409 B00E                <1>  mov al,ePutDayString
  5887 0000040B CD30                <1>  int _svc
  5888                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5888 0000040D BAC1080000          <1>  mov edx,%1
  5888 00000412 B00C                <1>  mov al,ePutConsoleString
  5888 00000414 CD30                <1>  int _svc
  5889 00000416 E84AFDFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5890 0000041B C3                                              ret                                                     ;return
  5891                                  ;-----------------------------------------------------------------------------------------------------------------------
  5892                                  ;
  5893                                  ;       Routine:        ConExit
  5894                                  ;
  5895                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5896                                  ;
  5897                                  ;-----------------------------------------------------------------------------------------------------------------------
  5898                                  ConExit                 resetSystem                                             ;issue system reset
  5898                              <1> ConExit :
  5898 0000041C B01A                <1>  mov al,eResetSystem
  5898 0000041E CD30                <1>  int _svc
  5899 00000420 C3                                              ret                                                     ;return
  5900                                  ;-----------------------------------------------------------------------------------------------------------------------
  5901                                  ;
  5902                                  ;       Routine:        ConFree
  5903                                  ;
  5904                                  ;       Description:    This routine handles the FREE command.
  5905                                  ;
  5906                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5907                                  ;
  5908                                  ;-----------------------------------------------------------------------------------------------------------------------
  5909 00000421 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5910 00000422 51                                              push    ecx                                             ;
  5911 00000423 56                                              push    esi                                             ;
  5912 00000424 57                                              push    edi                                             ;
  5913                                  ;
  5914                                  ;       Get address parameter
  5915                                  ;
  5916 00000425 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5917 0000042A BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5918 0000042F E838FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5919                                  ;
  5920                                  ;       Convert input parameter from hexadecimal string to binary
  5921                                  ;
  5922 00000434 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5923 0000043B 7421                                            je      .10                                             ;no, branch
  5924 0000043D BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5925                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5925 00000442 B009                <1>  mov al,eHexadecimalToUnsigned
  5925 00000444 CD30                <1>  int _svc
  5926 00000446 85C0                                            test    eax,eax                                         ;valid parameter?
  5927 00000448 7414                                            jz      .10                                             ;no, branch
  5928                                  ;
  5929                                  ;       Free memory block
  5930                                  ;
  5931                                                          freeMemory eax                                          ;free memory
  5931 0000044A 89C2                <1>  mov edx,%1
  5931 0000044C B004                <1>  mov al,eFreeMemory
  5931 0000044E CD30                <1>  int _svc
  5932 00000450 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5933 00000453 7409                                            je      .10                                             ;no, branch
  5934                                  ;
  5935                                  ;       Indicate memory freed
  5936                                  ;
  5937                                                          putConsoleString czOK                                   ;indicate success
  5937 00000455 BA[540A0000]        <1>  mov edx,%1
  5937 0000045A B00C                <1>  mov al,ePutConsoleString
  5937 0000045C CD30                <1>  int _svc
  5938                                  ;
  5939                                  ;       Restore and return
  5940                                  ;
  5941 0000045E 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5942 0000045F 5E                                              pop     esi                                             ;
  5943 00000460 59                                              pop     ecx                                             ;
  5944 00000461 5B                                              pop     ebx                                             ;
  5945 00000462 C3                                              ret                                                     ;return
  5946                                  ;-----------------------------------------------------------------------------------------------------------------------
  5947                                  ;
  5948                                  ;       Routine:        ConHour
  5949                                  ;
  5950                                  ;       Description:    This routine Handles the HOUR command.
  5951                                  ;
  5952                                  ;-----------------------------------------------------------------------------------------------------------------------
  5953                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5953                              <1> ConHour :
  5953 00000463 BB53090000          <1>  mov ebx,%1
  5953 00000468 B019                <1>  mov al,eReadRealTimeClock
  5953 0000046A CD30                <1>  int _svc
  5954                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5954 0000046C BB53090000          <1>  mov ebx,%1
  5954 00000471 BAC1080000          <1>  mov edx,%2
  5954 00000476 B00F                <1>  mov al,ePutHourString
  5954 00000478 CD30                <1>  int _svc
  5955                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5955 0000047A BAC1080000          <1>  mov edx,%1
  5955 0000047F B00C                <1>  mov al,ePutConsoleString
  5955 00000481 CD30                <1>  int _svc
  5956 00000483 E8DDFCFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5957 00000488 C3                                              ret                                                     ;return
  5958                                  ;-----------------------------------------------------------------------------------------------------------------------
  5959                                  ;
  5960                                  ;       Routine:        ConInt6
  5961                                  ;
  5962                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5963                                  ;
  5964                                  ;-----------------------------------------------------------------------------------------------------------------------
  5965 00000489 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5966 0000048B C3                                              ret                                                     ;return (not executed)
  5967                                  ;-----------------------------------------------------------------------------------------------------------------------
  5968                                  ;
  5969                                  ;       Routine:        ConMalloc
  5970                                  ;
  5971                                  ;       Description:    This routine handles the MALLOC command.
  5972                                  ;
  5973                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5974                                  ;
  5975                                  ;-----------------------------------------------------------------------------------------------------------------------
  5976 0000048C 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5977 0000048D 51                                              push    ecx                                             ;
  5978 0000048E 56                                              push    esi                                             ;
  5979 0000048F 57                                              push    edi                                             ;
  5980                                  ;
  5981                                  ;       Get size parameter
  5982                                  ;
  5983 00000490 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5984 00000495 BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5985 0000049A E8CDFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5986                                  ;
  5987                                  ;       Convert input parameter from decimal string to binary
  5988                                  ;
  5989 0000049F 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5990 000004A6 7430                                            je      .10                                             ;no, branch
  5991 000004A8 BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5992                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5992 000004AD B003                <1>  mov al,eDecimalToUnsigned
  5992 000004AF CD30                <1>  int _svc
  5993 000004B1 85C0                                            test    eax,eax                                         ;valid parameter?
  5994 000004B3 7423                                            jz      .10                                             ;no, branch
  5995                                  ;
  5996                                  ;       Allocate memory block
  5997                                  ;
  5998                                                          allocateMemory eax                                      ;allocate memory
  5998 000004B5 89C1                <1>  mov ecx,%1
  5998 000004B7 B000                <1>  mov al,eAllocateMemory
  5998 000004B9 CD30                <1>  int _svc
  5999 000004BB 85C0                                            test    eax,eax                                         ;memory allocated?
  6000 000004BD 7419                                            jz      .10                                             ;no, branch
  6001                                  ;
  6002                                  ;       Report allocated memory block address
  6003                                  ;
  6004 000004BF BAC1080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  6005 000004C4 89C1                                            mov     ecx,eax                                         ;memory address
  6006                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  6006 000004C6 B01C                <1>  mov al,eUnsignedToHexadecimal
  6006 000004C8 CD30                <1>  int _svc
  6007                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  6007 000004CA BAC1080000          <1>  mov edx,%1
  6007 000004CF B00C                <1>  mov al,ePutConsoleString
  6007 000004D1 CD30                <1>  int _svc
  6008 000004D3 E88DFCFFFF                                      call    ConPutNewLine                                   ;display new line
  6009 000004D8 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  6010 000004D9 5E                                              pop     esi                                             ;
  6011 000004DA 59                                              pop     ecx                                             ;
  6012 000004DB 5B                                              pop     ebx                                             ;
  6013 000004DC C3                                              ret                                                     ;return
  6014                                  ;-----------------------------------------------------------------------------------------------------------------------
  6015                                  ;
  6016                                  ;       Routine:        ConMem
  6017                                  ;
  6018                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  6019                                  ;
  6020                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  6021                                  ;
  6022                                  ;-----------------------------------------------------------------------------------------------------------------------
  6023 000004DD 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  6024 000004DE 56                                              push    esi                                             ;
  6025 000004DF 57                                              push    edi                                             ;
  6026                                  ;
  6027                                  ;       Update the source address if a parameter is given.
  6028                                  ;
  6029 000004E0 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  6030 000004E5 BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  6031 000004EA E87DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  6032 000004EF 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  6033 000004F6 740E                                            je      .10                                             ;no, branch
  6034 000004F8 BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  6035                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  6035 000004FD B009                <1>  mov al,eHexadecimalToUnsigned
  6035 000004FF CD30                <1>  int _svc
  6036 00000501 A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  6037                                  ;
  6038                                  ;       Setup source address and row count.
  6039                                  ;
  6040 00000506 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  6041 0000050C 31C9                                            xor     ecx,ecx                                         ;zero register
  6042 0000050E B110                                            mov     cl,16                                           ;row count
  6043                                  ;
  6044                                  ;       Start the row with the source address in hexadecimal.
  6045                                  ;
  6046 00000510 51                      .20                     push    ecx                                             ;save remaining rows
  6047 00000511 BFC1080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  6048 00000516 89FA                                            mov     edx,edi                                         ;output buffer address
  6049 00000518 89F1                                            mov     ecx,esi                                         ;console memory address
  6050                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  6050 0000051A B01C                <1>  mov al,eUnsignedToHexadecimal
  6050 0000051C CD30                <1>  int _svc
  6051 0000051E 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  6052 00000521 B020                                            mov     al,' '                                          ;ascii space
  6053 00000523 AA                                              stosb                                                   ;store delimiter
  6054                                  ;
  6055                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  6056                                  ;
  6057 00000524 31C9                                            xor     ecx,ecx                                         ;zero register
  6058 00000526 B110                                            mov     cl,16                                           ;loop count
  6059 00000528 51                      .30                     push    ecx                                             ;save loop count
  6060 00000529 AC                                              lodsb                                                   ;memory byte
  6061 0000052A 88C4                                            mov     ah,al                                           ;memory byte
  6062 0000052C C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  6063 0000052F 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  6064 00000531 3C3A                                            cmp     al,3ah                                          ;numeric range?
  6065 00000533 7202                                            jb      .40                                             ;yes, skip ahead
  6066 00000535 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  6067 00000537 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  6068 00000538 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  6069 0000053A 240F                                            and     al,0fh                                          ;mask out high-order bits
  6070 0000053C 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  6071 0000053E 3C3A                                            cmp     al,3ah                                          ;numeric range?
  6072 00000540 7202                                            jb      .50                                             ;yes, skip ahead
  6073 00000542 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  6074 00000544 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  6075 00000545 B020                                            mov     al,' '                                          ;ascii space
  6076 00000547 AA                                              stosb                                                   ;store ascii space delimiter
  6077 00000548 59                                              pop     ecx                                             ;loop count
  6078 00000549 E2DD                                            loop    .30                                             ;next
  6079                                  ;
  6080                                  ;       Output printable ASCII character section for the row.
  6081                                  ;
  6082 0000054B 83EE10                                          sub     esi,16                                          ;reset source pointer
  6083 0000054E B110                                            mov     cl,16                                           ;loop count
  6084 00000550 AC                      .60                     lodsb                                                   ;source byte
  6085 00000551 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  6086 00000553 7204                                            jb      .70                                             ;no, skip ahead
  6087 00000555 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  6088 00000557 7202                                            jb      .80                                             ;yes, skip ahead
  6089 00000559 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  6090 0000055B AA                      .80                     stosb                                                   ;store printable ascii byte
  6091 0000055C E2F2                                            loop    .60                                             ;next source byte
  6092 0000055E 30C0                                            xor     al,al                                           ;nul-terminator
  6093 00000560 AA                                              stosb                                                   ;terminate output line
  6094                                  ;
  6095                                  ;       Display constructed output buffer and newline.
  6096                                  ;
  6097                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  6097 00000561 BAC1080000          <1>  mov edx,%1
  6097 00000566 B00C                <1>  mov al,ePutConsoleString
  6097 00000568 CD30                <1>  int _svc
  6098 0000056A E8F6FBFFFF                                      call    ConPutNewLine                                   ;display new line
  6099                                  ;
  6100                                  ;       Repeat until all lines displayed and preserve source address.
  6101                                  ;
  6102 0000056F 59                                              pop     ecx                                             ;remaining rows
  6103 00000570 E29E                                            loop    .20                                             ;next row
  6104 00000572 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  6105 00000578 5F                                              pop     edi                                             ;restore regs
  6106 00000579 5E                                              pop     esi                                             ;
  6107 0000057A 5B                                              pop     ebx                                             ;
  6108 0000057B C3                                              ret                                                     ;return
  6109                                  ;-----------------------------------------------------------------------------------------------------------------------
  6110                                  ;
  6111                                  ;       Routine:        ConMinute
  6112                                  ;
  6113                                  ;       Description:    This routine Handles the MINUTE command.
  6114                                  ;
  6115                                  ;-----------------------------------------------------------------------------------------------------------------------
  6116                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6116                              <1> ConMinute :
  6116 0000057C BB53090000          <1>  mov ebx,%1
  6116 00000581 B019                <1>  mov al,eReadRealTimeClock
  6116 00000583 CD30                <1>  int _svc
  6117                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  6117 00000585 BB53090000          <1>  mov ebx,%1
  6117 0000058A BAC1080000          <1>  mov edx,%2
  6117 0000058F B011                <1>  mov al,ePutMinuteString
  6117 00000591 CD30                <1>  int _svc
  6118                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6118 00000593 BAC1080000          <1>  mov edx,%1
  6118 00000598 B00C                <1>  mov al,ePutConsoleString
  6118 0000059A CD30                <1>  int _svc
  6119 0000059C E8C4FBFFFF                                      call    ConPutNewLine                                   ;write newline to console
  6120 000005A1 C3                                              ret                                                     ;return
  6121                                  ;-----------------------------------------------------------------------------------------------------------------------
  6122                                  ;
  6123                                  ;       Routine:        ConMonth
  6124                                  ;
  6125                                  ;       Description:    This routine Handles the MONTH command.
  6126                                  ;
  6127                                  ;-----------------------------------------------------------------------------------------------------------------------
  6128                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6128                              <1> ConMonth :
  6128 000005A2 BB53090000          <1>  mov ebx,%1
  6128 000005A7 B019                <1>  mov al,eReadRealTimeClock
  6128 000005A9 CD30                <1>  int _svc
  6129                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  6129 000005AB BB53090000          <1>  mov ebx,%1
  6129 000005B0 BAC1080000          <1>  mov edx,%2
  6129 000005B5 B012                <1>  mov al,ePutMonthString
  6129 000005B7 CD30                <1>  int _svc
  6130                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6130 000005B9 BAC1080000          <1>  mov edx,%1
  6130 000005BE B00C                <1>  mov al,ePutConsoleString
  6130 000005C0 CD30                <1>  int _svc
  6131 000005C2 E89EFBFFFF                                      call    ConPutNewLine                                   ;write newline to console
  6132 000005C7 C3                                              ret                                                     ;return
  6133                                  ;-----------------------------------------------------------------------------------------------------------------------
  6134                                  ;
  6135                                  ;       Routine:        ConMonthName
  6136                                  ;
  6137                                  ;       Description:    This routine Handles the MONTH.NAME command.
  6138                                  ;
  6139                                  ;-----------------------------------------------------------------------------------------------------------------------
  6140                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  6140                              <1> ConMonthName :
  6140 000005C8 BB53090000          <1>  mov ebx,%1
  6140 000005CD B019                <1>  mov al,eReadRealTimeClock
  6140 000005CF CD30                <1>  int _svc
  6141                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  6141 000005D1 BB53090000          <1>  mov ebx,%1
  6141 000005D6 BAC1080000          <1>  mov edx,%2
  6141 000005DB B013                <1>  mov al,ePutMonthNameString
  6141 000005DD CD30                <1>  int _svc
  6142                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  6142 000005DF BAC1080000          <1>  mov edx,%1
  6142 000005E4 B00C                <1>  mov al,ePutConsoleString
  6142 000005E6 CD30                <1>  int _svc
  6143 000005E8 E878FBFFFF                                      call    ConPutNewLine                                   ;write newline to console
  6144 000005ED C3                                              ret                                                     ;return
  6145                                  ;-----------------------------------------------------------------------------------------------------------------------
  6146                                  ;
  6147                                  ;       Routine:        ConPCIProbe
  6148                                  ;
  6149                                  ;       Description:    This routine handles the PCIProbe command.
  6150                                  ;
  6151                                  ;-----------------------------------------------------------------------------------------------------------------------
  6152 000005EE 53                      ConPCIProbe             push    ebx                                             ;save non-volatile regs
  6153                                  ;
  6154                                  ;       Initialize variables.
  6155                                  ;       Construct PCI selector.
  6156                                  ;       Read PCI configuration data.
  6157                                  ;
  6158 000005EF BB5B090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  6159 000005F4 E8A8FCFFFF                                      call    ConInitPCIContext                               ;initialize PCI struct
  6160 000005F9 E8B8FCFFFF              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  6161 000005FE E8D4FCFFFF                                      call    ConReadPCIConfigData                            ;read the configuration data
  6162                                  ;
  6163                                  ;       Interpret PCI data value and display finding.
  6164                                  ;
  6165 00000603 83F8FF                                          cmp     eax,-1                                          ;function defined?
  6166 00000606 7508                                            jne     .20                                             ;yes, branch
  6167 00000608 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  6168 0000060C 7446                                            je      .40                                             ;yes, skip to next device
  6169 0000060E EB3D                                            jmp     short .30                                       ;no, skip to next function
  6170                                  ;
  6171                                  ;       Build PCI identifying string.
  6172                                  ;       Write identifying string to console.
  6173                                  ;       Determine the vendor and chip.
  6174                                  ;       Write vendor and chip to console.
  6175                                  ;
  6176 00000610 BA32090000              .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6177 00000615 E843000000                                      call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6178 0000061A E87F000000                                      call    ConInterpretPCIData                             ;update flags based on data
  6179                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6179 0000061F BA32090000          <1>  mov edx,%1
  6179 00000624 B00C                <1>  mov al,ePutConsoleString
  6179 00000626 CD30                <1>  int _svc
  6180                                                          putConsoleString czSpace                                ;space delimiter
  6180 00000628 BA[EC0A0000]        <1>  mov edx,%1
  6180 0000062D B00C                <1>  mov al,ePutConsoleString
  6180 0000062F CD30                <1>  int _svc
  6181                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6181 00000631 8B530C              <1>  mov edx,%1
  6181 00000634 B00C                <1>  mov al,ePutConsoleString
  6181 00000636 CD30                <1>  int _svc
  6182                                                          putConsoleString czSpace                                ;space delimiter
  6182 00000638 BA[EC0A0000]        <1>  mov edx,%1
  6182 0000063D B00C                <1>  mov al,ePutConsoleString
  6182 0000063F CD30                <1>  int _svc
  6183                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6183 00000641 8B5310              <1>  mov edx,%1
  6183 00000644 B00C                <1>  mov al,ePutConsoleString
  6183 00000646 CD30                <1>  int _svc
  6184 00000648 E818FBFFFF                                      call    ConPutNewLine                                   ;display new line
  6185                                  ;
  6186                                  ;       Next function.
  6187                                  ;
  6188 0000064D E896FCFFFF              .30                     call    ConNextPCIFunction                              ;next function
  6189 00000652 72A5                                            jb      .10                                             ;continue if no overflow
  6190                                  ;
  6191                                  ;       Next device, bus.
  6192                                  ;
  6193 00000654 E89DFCFFFF              .40                     call    ConNextPCIDevice                                ;next device, bus
  6194 00000659 729E                                            jb      .10                                             ;continue if no overflow
  6195                                  ;
  6196                                  ;       Restore and return.
  6197                                  ;
  6198 0000065B 5B                                              pop     ebx                                             ;restore non-volatile regs
  6199 0000065C C3                                              ret                                                     ;return
  6200                                  ;-----------------------------------------------------------------------------------------------------------------------
  6201                                  ;
  6202                                  ;       Routine:        ConBuildPCIIdent
  6203                                  ;
  6204                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  6205                                  ;                       Function code values.
  6206                                  ;
  6207                                  ;       In:             DS:EBX  PCI structure address
  6208                                  ;                       DS:EDX  output buffer address 999.99.9\0
  6209                                  ;
  6210                                  ;-----------------------------------------------------------------------------------------------------------------------
  6211 0000065D 57                      ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  6212 0000065E 06                                              push    es                                              ;
  6213                                  ;
  6214                                  ;       Establish addressability
  6215                                  ;
  6216 0000065F 1E                                              push    ds                                              ;load data segment...
  6217 00000660 07                                              pop     es                                              ;...into extra segment reg
  6218                                  ;
  6219                                  ;       Build identifier string (bus.device.function)
  6220                                  ;
  6221 00000661 89D7                                            mov     edi,edx                                         ;output buffer address
  6222 00000663 8A03                                            mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  6223 00000665 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  6224 00000667 B164                                            mov     cl,100                                          ;divisor (10^2)
  6225 00000669 F6F1                                            div     cl                                              ;AL=100's, AH=bus MOD 100
  6226 0000066B 0C30                                            or      al,30h                                          ;apply ASCII zone
  6227 0000066D FC                                              cld                                                     ;forward strings
  6228 0000066E AA                                              stosb                                                   ;store 100's digit
  6229 0000066F 88E0                                            mov     al,ah                                           ;bus MOD 100
  6230 00000671 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  6231 00000673 B10A                                            mov     cl,10                                           ;divisor (10^1)
  6232 00000675 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  6233 00000677 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  6234 0000067B 66AB                                            stosw                                                   ;store 10's and 1's
  6235 0000067D B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6236 0000067F AA                                              stosb                                                   ;store delimiter
  6237 00000680 8A4301                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  6238 00000683 30E4                                            xor     ah,ah                                           ;zero high order dividend
  6239 00000685 B10A                                            mov     cl,10                                           ;divisor (10^1)
  6240 00000687 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  6241 00000689 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  6242 0000068D 66AB                                            stosw                                                   ;store 10's and 1's
  6243 0000068F B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6244 00000691 AA                                              stosb                                                   ;store delimiter
  6245 00000692 8A4302                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  6246 00000695 0C30                                            or      al,30h                                          ;apply ASCII zone
  6247 00000697 AA                                              stosb                                                   ;store 1's
  6248 00000698 30C0                                            xor     al,al                                           ;null terminator
  6249 0000069A AA                                              stosb                                                   ;store terminator
  6250                                  ;
  6251                                  ;       Restore and return.
  6252                                  ;
  6253 0000069B 07                                              pop     es                                              ;restore non-volatile regs
  6254 0000069C 5F                                              pop     edi                                             ;
  6255 0000069D C3                                              ret                                                     ;return
  6256                                  ;-----------------------------------------------------------------------------------------------------------------------
  6257                                  ;
  6258                                  ;       Routine:        ConInterpretPCIData
  6259                                  ;
  6260                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  6261                                  ;
  6262                                  ;       In:             DS:EBX  PCI structure address
  6263                                  ;
  6264                                  ;-----------------------------------------------------------------------------------------------------------------------
  6265 0000069E B8[8A090000]            ConInterpretPCIData     mov     eax,czApple
  6266 000006A3 66817B086B10                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  6267 000006A9 751A                                            jne     .10                                             ;no, branch
  6268 000006AB BA[1E0B0000]                                    mov     edx,czUSBController
  6269 000006B0 66837B0A3F                                      cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  6270 000006B5 0F84A8000000                                    je      .40                                             ;yes, branch
  6271 000006BB BA[600A0000]                                    mov     edx,czOther                                     ;other
  6272 000006C0 E99E000000                                      jmp     .40                                             ;continue
  6273 000006C5 B8[480A0000]            .10                     mov     eax,czIntel                                     ;Intel
  6274 000006CA 66817B088680                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  6275 000006D0 7559                                            jne     .20                                             ;no, branch
  6276 000006D2 BA[B70A0000]                                    mov     edx,czPro1000MT                                 ;Pro/1000 MT
  6277 000006D7 66817B0A0F10                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  6278 000006DD 0F8480000000                                    je      .40                                             ;yes, branch
  6279 000006E3 BA[660A0000]                                    mov     edx,czPCIAndMem                                 ;PCI and Memory
  6280 000006E8 66817B0A3712                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  6281 000006EE 7473                                            je      .40                                             ;yes, branch
  6282 000006F0 BA[90090000]                                    mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  6283 000006F5 66817B0A1524                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  6284 000006FB 7466                                            je      .40                                             ;yes, branch
  6285 000006FD BA[750A0000]                                    mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  6286 00000702 66817B0A0070                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  6287 00000708 7459                                            je      .40                                             ;yes, branch
  6288 0000070A BA[950B0000]                                    mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  6289 0000070F 66817B0A1171                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  6290 00000715 744C                                            je      .40                                             ;yes, branch
  6291 00000717 BA[8D0A0000]                                    mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  6292 0000071C 66817B0A1371                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  6293 00000722 743F                                            je      .40                                             ;yes, branch
  6294 00000724 BA[600A0000]                                    mov     edx,czOther                                     ;other
  6295 00000729 EB38                                            jmp     .40                                             ;continue
  6296 0000072B B8[590A0000]            .20                     mov     eax,czOracle                                    ;Oracle
  6297 00000730 66817B08EE80                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  6298 00000736 7521                                            jne     .30                                             ;no, branch
  6299 00000738 BA[3F0B0000]                                    mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  6300 0000073D 66817B0AEFBE                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  6301 00000743 741E                                            je      .40                                             ;yes, branch
  6302 00000745 BA[2D0B0000]                                    mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  6303 0000074A 66817B0AFECA                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  6304 00000750 7411                                            je      .40                                             ;yes, branch
  6305 00000752 BA[600A0000]                                    mov     edx,czOther                                     ;other
  6306 00000757 EB0A                                            jmp     .40                                             ;continue
  6307 00000759 B8[600A0000]            .30                     mov     eax,czOther                                     ;other
  6308 0000075E BA[600A0000]                                    mov     edx,czOther                                     ;other
  6309 00000763 89430C                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  6310 00000766 895310                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  6311 00000769 C3                                              ret                                                     ;return
  6312                                  ;-----------------------------------------------------------------------------------------------------------------------
  6313                                  ;
  6314                                  ;       Routine:        ConSecond
  6315                                  ;
  6316                                  ;       Description:    This routine Handles the SECOND command.
  6317                                  ;
  6318                                  ;-----------------------------------------------------------------------------------------------------------------------
  6319                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6319                              <1> ConSecond :
  6319 0000076A BB53090000          <1>  mov ebx,%1
  6319 0000076F B019                <1>  mov al,eReadRealTimeClock
  6319 00000771 CD30                <1>  int _svc
  6320                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  6320 00000773 BB53090000          <1>  mov ebx,%1
  6320 00000778 BAC1080000          <1>  mov edx,%2
  6320 0000077D B014                <1>  mov al,ePutSecondString
  6320 0000077F CD30                <1>  int _svc
  6321                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6321 00000781 BAC1080000          <1>  mov edx,%1
  6321 00000786 B00C                <1>  mov al,ePutConsoleString
  6321 00000788 CD30                <1>  int _svc
  6322 0000078A E8D6F9FFFF                                      call    ConPutNewLine                                   ;write newline to console
  6323 0000078F C3                                              ret                                                     ;return
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325                                  ;
  6326                                  ;       Routine:        ConTime
  6327                                  ;
  6328                                  ;       Description:    This routine Handles the TIME command.
  6329                                  ;
  6330                                  ;-----------------------------------------------------------------------------------------------------------------------
  6331                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6331                              <1> ConTime :
  6331 00000790 BB53090000          <1>  mov ebx,%1
  6331 00000795 B019                <1>  mov al,eReadRealTimeClock
  6331 00000797 CD30                <1>  int _svc
  6332                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6332 00000799 BB53090000          <1>  mov ebx,%1
  6332 0000079E BAC1080000          <1>  mov edx,%2
  6332 000007A3 B015                <1>  mov al,ePutTimeString
  6332 000007A5 CD30                <1>  int _svc
  6333                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6333 000007A7 BAC1080000          <1>  mov edx,%1
  6333 000007AC B00C                <1>  mov al,ePutConsoleString
  6333 000007AE CD30                <1>  int _svc
  6334 000007B0 E8B0F9FFFF                                      call    ConPutNewLine                                   ;write newline to console
  6335 000007B5 C3                                              ret                                                     ;return
  6336                                  ;-----------------------------------------------------------------------------------------------------------------------
  6337                                  ;
  6338                                  ;       Routine:        ConVersion
  6339                                  ;
  6340                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6341                                  ;
  6342                                  ;-----------------------------------------------------------------------------------------------------------------------
  6343                                  ConVersion              putConsoleString czTitle                                ;display version message
  6343                              <1> ConVersion :
  6343 000007B6 BA[EE0A0000]        <1>  mov edx,%1
  6343 000007BB B00C                <1>  mov al,ePutConsoleString
  6343 000007BD CD30                <1>  int _svc
  6344 000007BF C3                                              ret                                                     ;return
  6345                                  ;-----------------------------------------------------------------------------------------------------------------------
  6346                                  ;
  6347                                  ;       Routine:        ConWeekday
  6348                                  ;
  6349                                  ;       Description:    This routine handles the WEEKDAY command.
  6350                                  ;
  6351                                  ;-----------------------------------------------------------------------------------------------------------------------
  6352                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6352                              <1> ConWeekday :
  6352 000007C0 BB53090000          <1>  mov ebx,%1
  6352 000007C5 B019                <1>  mov al,eReadRealTimeClock
  6352 000007C7 CD30                <1>  int _svc
  6353                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6353 000007C9 BB53090000          <1>  mov ebx,%1
  6353 000007CE BAC1080000          <1>  mov edx,%2
  6353 000007D3 B016                <1>  mov al,ePutWeekdayString
  6353 000007D5 CD30                <1>  int _svc
  6354                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6354 000007D7 BAC1080000          <1>  mov edx,%1
  6354 000007DC B00C                <1>  mov al,ePutConsoleString
  6354 000007DE CD30                <1>  int _svc
  6355 000007E0 E880F9FFFF                                      call    ConPutNewLine                                   ;write newline to console
  6356 000007E5 C3                                              ret                                                     ;return
  6357                                  ;-----------------------------------------------------------------------------------------------------------------------
  6358                                  ;
  6359                                  ;       Routine:        ConWeekdayName
  6360                                  ;
  6361                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6362                                  ;
  6363                                  ;-----------------------------------------------------------------------------------------------------------------------
  6364                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6364                              <1> ConWeekdayName :
  6364 000007E6 BB53090000          <1>  mov ebx,%1
  6364 000007EB B019                <1>  mov al,eReadRealTimeClock
  6364 000007ED CD30                <1>  int _svc
  6365                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6365 000007EF BB53090000          <1>  mov ebx,%1
  6365 000007F4 BAC1080000          <1>  mov edx,%2
  6365 000007F9 B017                <1>  mov al,ePutWeekdayNameString
  6365 000007FB CD30                <1>  int _svc
  6366                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6366 000007FD BAC1080000          <1>  mov edx,%1
  6366 00000802 B00C                <1>  mov al,ePutConsoleString
  6366 00000804 CD30                <1>  int _svc
  6367 00000806 E85AF9FFFF                                      call    ConPutNewLine                                           ;write newline to console
  6368 0000080B C3                                              ret                                                             ;return
  6369                                  ;-----------------------------------------------------------------------------------------------------------------------
  6370                                  ;
  6371                                  ;       Routine:        ConYear
  6372                                  ;
  6373                                  ;       Description:    This routine Handles the YEAR command.
  6374                                  ;
  6375                                  ;-----------------------------------------------------------------------------------------------------------------------
  6376                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6376                              <1> ConYear :
  6376 0000080C BB53090000          <1>  mov ebx,%1
  6376 00000811 B019                <1>  mov al,eReadRealTimeClock
  6376 00000813 CD30                <1>  int _svc
  6377                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6377 00000815 BB53090000          <1>  mov ebx,%1
  6377 0000081A BAC1080000          <1>  mov edx,%2
  6377 0000081F B018                <1>  mov al,ePutYearString
  6377 00000821 CD30                <1>  int _svc
  6378                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6378 00000823 BAC1080000          <1>  mov edx,%1
  6378 00000828 B00C                <1>  mov al,ePutConsoleString
  6378 0000082A CD30                <1>  int _svc
  6379 0000082C E834F9FFFF                                      call    ConPutNewLine                                   ;write newline to console
  6380 00000831 C3                                              ret                                                     ;return
  6381                                  ;-----------------------------------------------------------------------------------------------------------------------
  6382                                  ;
  6383                                  ;       Routine:        ConYearIsLeap
  6384                                  ;
  6385                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6386                                  ;
  6387                                  ;-----------------------------------------------------------------------------------------------------------------------
  6388                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6388                              <1> ConYearIsLeap :
  6388 00000832 BB53090000          <1>  mov ebx,%1
  6388 00000837 B019                <1>  mov al,eReadRealTimeClock
  6388 00000839 CD30                <1>  int _svc
  6389                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6389 0000083B BB53090000          <1>  mov ebx,%1
  6389 00000840 B00A                <1>  mov al,eIsLeapYear
  6389 00000842 CD30                <1>  int _svc
  6390 00000844 E30B                                            jecxz   .10                                             ;branch if not leap
  6391                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6391 00000846 BA[5B0B0000]        <1>  mov edx,%1
  6391 0000084B B00C                <1>  mov al,ePutConsoleString
  6391 0000084D CD30                <1>  int _svc
  6392 0000084F EB09                                            jmp     .20                                             ;continue
  6393                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6393                              <1> .10 :
  6393 00000851 BA[760B0000]        <1>  mov edx,%1
  6393 00000856 B00C                <1>  mov al,ePutConsoleString
  6393 00000858 CD30                <1>  int _svc
  6394 0000085A C3                      .20                     ret                                                     ;return
  6395                                  ;-----------------------------------------------------------------------------------------------------------------------
  6396                                  ;
  6397                                  ;       Tables
  6398                                  ;
  6399                                  ;-----------------------------------------------------------------------------------------------------------------------
  6400                                                                                                                  ;---------------------------------------
  6401                                                                                                                  ;  Command Jump Table
  6402                                                                                                                  ;---------------------------------------
  6403                                  tConJmpTbl              equ     $                                               ;command jump table
  6404 0000085B E6070000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6405 0000085F 32080000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6406 00000863 C8050000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6407 00000867 EE050000                                        dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6408 0000086B 1C040000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  6409 0000086F B6070000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  6410 00000873 C0070000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6411 00000877 8C040000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6412 0000087B DD040000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  6413 0000087F 7C050000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  6414 00000883 6A070000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  6415 00000887 CB030000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  6416 0000088B EE050000                                        dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6417 0000088F A2050000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  6418 00000893 D0030000                                        dd      ConDate         - ConCode                       ;date command routine offset
  6419 00000897 1C040000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  6420 0000089B 21040000                                        dd      ConFree         - ConCode                       ;free command routine offset
  6421 0000089F 63040000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  6422 000008A3 89040000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  6423 000008A7 1C040000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  6424 000008AB 90070000                                        dd      ConTime         - ConCode                       ;time command routine offset
  6425 000008AF 0C080000                                        dd      ConYear         - ConCode                       ;year command routine offset
  6426 000008B3 CB030000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  6427 000008B7 F6030000                                        dd      ConDay          - ConCode                       ;day command routine offset
  6428 000008BB DD040000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  6429 000008BF B6070000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  6430                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6431                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6432                                                                                                                  ;---------------------------------------
  6433                                                                                                                  ;  Command Name Table
  6434                                                                                                                  ;---------------------------------------
  6435                                  tConCmdTbl              equ     $                                               ;command name table
  6436 000008C3 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6436 000008CC 4E414D4500         
  6437 000008D1 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6437 000008DA 45415000           
  6438 000008DE 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  6438 000008E7 4D4500             
  6439 000008EA 0950434950524F4245-                             db      9,"PCIPROBE",0                                  ;pciprobe command
  6439 000008F3 00                 
  6440 000008F4 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  6440 000008FD 00                 
  6441 000008FE 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  6442 00000907 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  6443 00000910 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  6444 00000918 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  6445 00000920 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  6446 00000928 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  6447 00000930 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  6448 00000937 064C5350434900                                  db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6449 0000093E 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  6450 00000945 054441544500                                    db      5,"DATE",0                                      ;date command
  6451 0000094B 054558495400                                    db      5,"EXIT",0                                      ;exit command
  6452 00000951 054652454500                                    db      5,"FREE",0                                      ;free command
  6453 00000957 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  6454 0000095D 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  6455 00000963 055155495400                                    db      5,"QUIT",0                                      ;quit command
  6456 00000969 0554494D4500                                    db      5,"TIME",0                                      ;time command
  6457 0000096F 055945415200                                    db      5,"YEAR",0                                      ;year command
  6458 00000975 04434C5300                                      db      4,"CLS",0                                       ;cls command
  6459 0000097A 0444415900                                      db      4,"DAY",0                                       ;day command
  6460 0000097F 044D454D00                                      db      4,"MEM",0                                       ;mem command
  6461 00000984 0456455200                                      db      4,"VER",0                                       ;ver command
  6462 00000989 00                                              db      0                                               ;end of table
  6463                                  ;-----------------------------------------------------------------------------------------------------------------------
  6464                                  ;
  6465                                  ;       Constants
  6466                                  ;
  6467                                  ;-----------------------------------------------------------------------------------------------------------------------
  6468 0000098A 4170706C6500            czApple                 db      "Apple",0                                       ;vendor name string
  6469 00000990 41757265616C204144-     czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6469 00000999 3138383120534F554E-
  6469 000009A2 444D415800         
  6470 000009A7 42617365206D656D6F-     czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  6470 000009B0 72792028525443293A-
  6470 000009B9 202020202000       
  6471 000009BF 45746865726E657420-     czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6471 000009C8 616461707465722066-
  6471 000009D1 6F756E640D0A00     
  6472 000009D8 204465766963653A20-     czEthernetDeviceVendor  db      " Device: ",0                                   ;PCI device label
  6472 000009E1 00                 
  6473 000009E2 204952513A20202020-     czEthernetIRQ           db      " IRQ:    ",0                                   ;ethernet IRQ
  6473 000009EB 00                 
  6474 000009EC 204D41432041646472-     czEthernetMAC           db      " MAC Address:  ",0                             ;MAC address
  6474 000009F5 6573733A202000     
  6475 000009FC 20202020204D4D494F-     czEthernetMemoryAddr    db      "     MMIO:     ",0                             ;ethernet I/O memory address
  6475 00000A05 3A202020202000     
  6476 00000A0C 20506F72743A202020-     czEthernetPort          db      " Port:   ",0                                   ;ethernet I/O port address
  6476 00000A15 00                 
  6477 00000A16 205043492053656C65-     czEthernetSelector      db      " PCI Selector: ",0                             ;PCI selector label
  6477 00000A1F 63746F723A2000     
  6478 00000A26 205374617475733A20-     czEthernetStatusCommand db      " Status: ",0                                   ;PCI status label
  6478 00000A2F 00                 
  6479 00000A30 20457874656E646564-     czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  6479 00000A39 2028525443293A2020-
  6479 00000A42 202020202000       
  6480 00000A48 496E74656C00            czIntel                 db      "Intel",0                                       ;vendor name string
  6481 00000A4E 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  6482 00000A51 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  6483 00000A54 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  6484 00000A59 4F7261636C6500          czOracle                db      "Oracle",0                                      ;vendor name string
  6485 00000A60 4F7468657200            czOther                 db      "Other",0                                       ;default name string
  6486 00000A66 5043492026204D656D-     czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6486 00000A6F 6F727900           
  6487 00000A73 2E00                    czPeriod                db      ".",0                                           ;period delimiter
  6488 00000A75 504949583320504349-     czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6488 00000A7E 2D746F2D4953412042-
  6488 00000A87 726964676500       
  6489 00000A8D 50494958342F34452F-     czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6489 00000A96 344D20506F77657220-
  6489 00000A9F 4D616E6167656D656E-
  6489 00000AA8 7420436F6E74726F6C-
  6489 00000AB1 6C657200           
  6490 00000AB5 3A00                    czPrompt                db      ":",0                                           ;prompt string
  6491 00000AB7 50726F2F3130303020-     czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6491 00000AC0 4D542045746865726E-
  6491 00000AC9 657420416461707465-
  6491 00000AD2 7200               
  6492 00000AD4 2042656C6F77204542-     czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  6492 00000ADD 44412028496E742031-
  6492 00000AE6 3268293A2000       
  6493 00000AEC 2000                    czSpace                 db      " ",0                                           ;space delimiter
  6494 00000AEE 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6494 00000AF7 65726174696E672053-
  6494 00000B00 797374656D20312E30-
  6494 00000B09 0D0A00             
  6495 00000B0C 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6495 00000B15 6F6D6D616E640D0A00 
  6496 00000B1E 55534220436F6E7472-     czUSBController         db      "USB Controller",0                              ;USB controller string
  6496 00000B27 6F6C6C657200       
  6497 00000B2D 5669727475616C426F-     czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6497 00000B36 782044657669636500 
  6498 00000B3F 5669727475616C426F-     czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6498 00000B48 782047726170686963-
  6498 00000B51 732041646170746572-
  6498 00000B5A 00                 
  6499 00000B5B 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6499 00000B64 69732061206C656170-
  6499 00000B6D 20796561722E0D0A00 
  6500 00000B76 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6500 00000B7F 6973206E6F74206120-
  6500 00000B88 6C6561702079656172-
  6500 00000B91 2E0D0A00           
  6501 00000B95 383233373141422F45-     cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6501 00000B9E 422050434920427573-
  6501 00000BA7 204D61737465722049-
  6501 00000BB0 444520436F6E74726F-
  6501 00000BB9 6C6C657200         
  6502 00000BBE 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  6503                                  %endif
  6504                                  %ifdef BUILDDISK
  6505                                  ;-----------------------------------------------------------------------------------------------------------------------
  6506                                  ;
  6507                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6508                                  ;
  6509                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6510                                  ;
  6511                                  ;-----------------------------------------------------------------------------------------------------------------------
  6512                                  section                 unused                                                  ;unused disk space
  6513 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6514                                  %endif
  6515                                  ;=======================================================================================================================
  6516                                  ;
  6517                                  ;       End of Program Code
  6518                                  ;
  6519                                  ;=======================================================================================================================
