     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.014
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to locate and report the ethernet adapter
     8                                  ;                       at start-up.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EHWF...         Hardware flags
   169                                  ;       EKEYF...        Keyboard status flags
   170                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   171                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   172                                  ;       EMEM...         Memory Management values
   173                                  ;       EMSG...         Message identifers
   174                                  ;
   175                                  ;=======================================================================================================================
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Hardware-Defined Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   184                                  ;
   185                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   186                                  ;       for CGA, EGA, VGA and compatible video modes.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   190                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   191                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   192                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ;
   195                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   196                                  ;
   197                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   198                                  ;
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   201                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   202                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   203                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   204                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8042 Keyboard Controller                                                EKEYB...
   208                                  ;
   209                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   210                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EKEYBPORTDATA           equ     060h                                            ;data port
   214                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   215                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   216                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   217                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   218                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   219                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   220                                                                                                                  ;---------------------------------------
   221                                                                                                                  ;       Keyboard Scan Codes
   222                                                                                                                  ;---------------------------------------
   223                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   224                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   225                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   226                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   227                                  EKEYBSLASH              equ     035h                                            ;slash
   228                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   229                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   230                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   231                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   232                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   233                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   234                                  EKEYBUP                 equ     080h                                            ;up
   235                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   236                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   237                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   238                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   239                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   240                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   241                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   242                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   243                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   244                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   245                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   246                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  ;
   249                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   250                                  ;
   251                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   252                                  ;       external devices and signals a hardware interrupt to the CPU.
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   256                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   257                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   258                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   259                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       8253 Programmable Interval Timer                                        EPIT...
   263                                  ;
   264                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   265                                  ;       approximately 18.2 times per second.
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 CPU Architecture                                                    ;EX86...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   301                                  ;
   302                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   303                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   304                                  ;
   305                                  ;       0.......        Segment is not present in memory (triggers int 11)
   306                                  ;       1.......        Segment is present in memory
   307                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   308                                  ;       ...0....        Segment is a system segment
   309                                  ;       ...00010                Local Descriptor Table
   310                                  ;       ...00101                Task Gate
   311                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   312                                  ;       ...01100                Call Gate (386)
   313                                  ;       ...01110                Interrupt Gate (386)
   314                                  ;       ...01111                Trap Gate (386)
   315                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   316                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   317                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   321                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   322                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   323                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   324                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   325                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   326                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   327                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       Firmware-Defined Values
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   336                                  ;
   337                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   338                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   342                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   343                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   344                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   345                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   346                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   347                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   348                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   349                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   350                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   351                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Standards-Based Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       ASCII                                                                   EASCII...
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   363                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   364                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   365                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   366                                  EASCIISPACE             equ     020h                                            ;space
   367                                  EASCIIPERIOD            equ     02Eh                                            ;period
   368                                  EASCIIUPPERA            equ     041h                                            ;'A'
   369                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   370                                  EASCIILOWERA            equ     061h                                            ;'a'
   371                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   372                                  EASCIITILDE             equ     07Eh                                            ;'~'
   373                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   374                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   375                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   376                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   377                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   378                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   379                                  EASCIICASE              equ     00100000b                                       ;case bit
   380                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  ;
   383                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   384                                  ;
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   387                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   388                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   389                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   390                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   391                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   392                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   393                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   394                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   395                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   396                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   397                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   398                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   399                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   400                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   401                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;
   404                                  ;       Operating System Values
   405                                  ;
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;
   409                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   410                                  ;
   411                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   412                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   413                                  ;
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   416                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   417                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   418                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   419                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   420                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   421                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ;       Console Constants                                                       ECON...
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ECONCOLS                equ     80                                              ;columns per row
   426                                  ECONROWS                equ     24                                              ;console rows
   427                                  ECONOIAROW              equ     24                                              ;operator information area row
   428                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   429                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   430                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   431                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   432                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   437                                  EGDTCGA                 equ     020h                                            ;cga video selector
   438                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   439                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   440                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   441                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   442                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   443                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;       Hardware Flags                                                          EHWF...
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  ;       Keyboard Flags                                                          EKEYF...
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   452                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   453                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   454                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   455                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   456                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   457                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   458                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   459                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   460                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   461                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ;       Kernel Constants                                                        EKRN...
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   466                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   467                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   468                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   469                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   470                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;       Memory Management Constants                                             EMEM...
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   479                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   480                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   481                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  ;       Message Identifiers                                                     EMSG...
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   486                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   487                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   488                                  ;=======================================================================================================================
   489                                  ;
   490                                  ;       Structures
   491                                  ;
   492                                  ;=======================================================================================================================
   493                                  ;-----------------------------------------------------------------------------------------------------------------------
   494                                  ;
   495                                  ;       DATETIME
   496                                  ;
   497                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   498                                  ;
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  struc                   DATETIME
   501 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   502 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   503 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   504 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   505 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   506 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   507 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   508 00000007 <res 00000001>          .century                resb    1                                               ;century
   509                                  EDATETIMELEN            equ     ($-.second)
   510                                  endstruc
   511                                  ;-----------------------------------------------------------------------------------------------------------------------
   512                                  ;
   513                                  ;       ETHER
   514                                  ;
   515                                  ;       The ETHER structure defines an Ethernet adapter context.
   516                                  ;
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  struc                   ETHER
   519 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   520                                  .devicevendor           equ     $                                               ;device id | vendor id
   521 00000004 <res 00000002>          .vendor                 resw    1                                               ;vendor id
   522 00000006 <res 00000002>          .device                 resw    1                                               ;device id
   523                                  .statuscommand          equ     $                                               ;status reg | command reg
   524 00000008 <res 00000002>          .commandreg             resw    1                                               ;command register
   525 0000000A <res 00000002>          .statusreg              resw    1                                               ;status register
   526 0000000C <res 00000004>          .classrev               resd    1                                               ;class code | revision id
   527 00000010 <res 00000004>          .misc                   resd    1                                               ;BIST | Hdr | latency | cache
   528 00000014 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address (bar 0)
   529 00000018 <res 00000004>          .flash                  resd    1                                               ;flash base address (bar 1)
   530 0000001C <res 00000004>          .port                   resd    1                                               ;i/o port (base 2)
   531 00000020 <res 00000006>          .mac                    resb    6                                               ;mac address
   532 00000026 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   533                                  EETHERLEN               equ     ($-.selector)
   534                                  endstruc
   535                                  ;-----------------------------------------------------------------------------------------------------------------------
   536                                  ;
   537                                  ;       MEMBLOCK
   538                                  ;
   539                                  ;       The MEMBLOCK structure defines a memory block.
   540                                  ;
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  struc                   MEMBLOCK
   543 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   544 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   545 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   546 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   547 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   548 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   549 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   550 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   551                                  EMEMBLOCKLEN            equ     ($-.signature)
   552                                  endstruc
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  ;
   555                                  ;       MEMROOT
   556                                  ;
   557                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   558                                  ;
   559                                  ;-----------------------------------------------------------------------------------------------------------------------
   560                                  struc                   MEMROOT
   561 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   562 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   563 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   564 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   565 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   566 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   567                                  EMEMROOTLEN             equ     ($-.firstcontig)
   568                                  endstruc
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  ;
   571                                  ;       MQUEUE
   572                                  ;
   573                                  ;       The MQUEUE structure maps memory used for a message queue.
   574                                  ;
   575                                  ;-----------------------------------------------------------------------------------------------------------------------
   576                                  struc                   MQUEUE
   577 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   578 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   579 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   580                                  endstruc
   581                                  ;-----------------------------------------------------------------------------------------------------------------------
   582                                  ;
   583                                  ;       PCI
   584                                  ;
   585                                  ;       The PCI structure defines a PCI bus, device and function context.
   586                                  ;
   587                                  ;-----------------------------------------------------------------------------------------------------------------------
   588                                  struc                   PCI
   589 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   590 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   591 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   592 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   593 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   594                                  .configdata             equ     $                                               ;data read from port 0CFCh
   595 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   596 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   597 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   598 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   599                                  EPCILEN                 equ     ($-.configdata)
   600                                  endstruc
   601                                  ;-----------------------------------------------------------------------------------------------------------------------
   602                                  ;
   603                                  ;       OSDATA
   604                                  ;
   605                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   606                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   607                                  ;
   608                                  ;-----------------------------------------------------------------------------------------------------------------------
   609                                  struc                   OSDATA
   610 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   611 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   612 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   613 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   614 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   615 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   616 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   617 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   618 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   619 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   620 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   621 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   622 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   623 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   624 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   625 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   626 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   627 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   628 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   629 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   630 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   631 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   632 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   633 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   634 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   635 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   636 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   637 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   638 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   639 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   640 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   641 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   642 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   643 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   644 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   645 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   646 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   647 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   648 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   649 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   650 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   651 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   652 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   653 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   654 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   655 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   656 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   657 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   658 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   659 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   660 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   661 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   662 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   663 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   664 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   665 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   666 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   667 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   668 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   669 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   670 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   671 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   672 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   673 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   674 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   675 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   676 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   677 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   678 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   679 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   680 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   681 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   682 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   683 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   684 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   685 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   686 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   687 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   688 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   689 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   690 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   691 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   692 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   693 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   694 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   695 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   696 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   697 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   698 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   699 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   700 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   701 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   702 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   703 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   704 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   705 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   706 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   707 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   708 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   709 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   710 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   711                                  ;-----------------------------------------------------------------------------------------------------------------------
   712                                  ;
   713                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   714                                  ;
   715                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   716                                  ;
   717                                  ;-----------------------------------------------------------------------------------------------------------------------
   718                                  ECONDATA                equ     ($)
   719 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   720 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   721 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   722 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   723 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   724 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   725 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   726 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   727 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   728 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   729 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   730 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   731 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   732 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   733 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   734 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   735 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   736 00000820 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   737 00000821 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   738 00000871 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   739 000008C1 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   740 00000911 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   741 0000091C <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   742 00000927 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   743 00000932 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   744 0000093B <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   745 00000953 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   746 0000095B <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   747 00000967 <res 00000027>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   748                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   749                                  ;-----------------------------------------------------------------------------------------------------------------------
   750                                  ;
   751                                  ;       End of OS Variables
   752                                  ;
   753                                  ;-----------------------------------------------------------------------------------------------------------------------
   754                                  endstruc
   755                                  ;-----------------------------------------------------------------------------------------------------------------------
   756                                  ;
   757                                  ;       Macros
   758                                  ;
   759                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   760                                  ;
   761                                  ;-----------------------------------------------------------------------------------------------------------------------
   762                                  %macro                  mint    1
   763                                  _%1                     equ     ($-$$) / EX86DESCLEN
   764                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   765                                  %endmacro
   766                                  %macro                  mtrap   1
   767                                  _%1                     equ     ($-$$) / EX86DESCLEN
   768                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   769                                  %endmacro
   770                                  %macro                  menter  1
   771                                  ?%1                     equ     ($-$$)
   772                                  %endmacro
   773                                  %macro                  tsvce   1
   774                                  e%1                     equ     ($-tsvc)/4
   775                                                          dd      %1
   776                                  %endmacro
   777                                  %ifdef BUILDBOOT
   778                                  ;=======================================================================================================================
   779                                  ;
   780                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   781                                  ;
   782                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   783                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   784                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   785                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   786                                  ;
   787                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   788                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   789                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   790                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   791                                  ;       immediately followed by a disk parameter table.
   792                                  ;
   793                                  ;=======================================================================================================================
   794                                                          cpu     8086                                            ;assume minimal CPU
   795                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   796                                                          bits    16                                              ;16-bit code at power-up
   797                                  %ifdef BUILDPREP
   798                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   799                                  %else
   800 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   801                                  %endif
   802                                  ;-----------------------------------------------------------------------------------------------------------------------
   803                                  ;
   804                                  ;       Disk Parameter Table
   805                                  ;
   806                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   807                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   808                                  ;
   809                                  ;-----------------------------------------------------------------------------------------------------------------------
   810 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   811 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   812 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   813 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   814 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   815 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   816 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   817 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   818 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   819                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   820 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   821 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   822 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   823                                  ;
   824                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   825                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   826                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   827                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   828                                  ;       given several possible starting values for CS:IP.
   829                                  ;
   830                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   831 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   832                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   833 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   834 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   835 00000025 B104                                            mov     cl,4                                            ;shift count
   836 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   837 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   838 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   839                                  ;
   840                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   841                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   842                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   843                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   844                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   845                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   846                                  ;
   847 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   848 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   849 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   850 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   851 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   852                                  ;
   853                                  ;       Our boot addressability is now set up according to the following diagram.
   854                                  ;
   855                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   856                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   857                                  ;                               |  256 = 100h bytes                             |
   858                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   859                                  ;                               |  Boot Sector (vstart=0100h)                   |
   860                                  ;                               |  1 sector = 512 = 200h bytes                  |
   861                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   862                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   863                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   864                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   865                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   866                                  ;                               |  2 sectors = 1024 = 400h bytes
   867                                  ;                       009400  +-----------------------------------------------+ DS:1900
   868                                  ;
   869                                  ;       On entry, DL indicates the drive being booted from.
   870                                  ;
   871 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   872                                  ;
   873                                  ;       Compute directory i/o buffer address.
   874                                  ;
   875 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   876 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   877 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   878 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   879                                  ;
   880                                  ;       Compute segment where os.com will be loaded.
   881                                  ;
   882 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   883 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   884 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   885 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   886                                  ;
   887                                  ;       Set the video mode to 80 column, 25 row, text.
   888                                  ;
   889 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   890 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   891                                  ;
   892                                  ;       Write a message to the console so we know we have our addressability established.
   893                                  ;
   894 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   895 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   896                                  ;
   897                                  ;       Initialize the number of directory sectors to search.
   898                                  ;
   899 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   900 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   901                                  ;
   902                                  ;       Compute number of directory sectors and initialize overhead count.
   903                                  ;
   904 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   905 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   906 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   907 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   908                                  ;
   909                                  ;       Compute directory entries per sector.
   910                                  ;
   911 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   912 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   913 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   914                                  ;
   915                                  ;       Compute first logical directory sector and update overhead count.
   916                                  ;
   917 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   918 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   919 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   920 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   921 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   922 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   923                                  ;
   924                                  ;       Read directory sector.
   925                                  ;
   926 0000008E B001                    .30                     mov     al,1                                            ;sector count
   927 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   928 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   929 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   930                                  ;
   931                                  ;       Setup variables to search this directory sector.
   932                                  ;
   933 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   934 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   935 000000A1 7603                                            jna     .40                                             ;no, continue
   936 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   937 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   938 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   939 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   940                                  ;
   941                                  ;       Loop through directory sectors searching for kernel program.
   942                                  ;
   943 000000B1 56                      .50                     push    si                                              ;save kernel name address
   944 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   945 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   946 000000B6 FC                                              cld                                                     ;forward strings
   947 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   948 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   949 000000BA 5E                                              pop     si                                              ;restore kernel name address
   950 000000BB 7418                                            je      .60                                             ;exit loop if found
   951 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   952 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   953 000000C2 75ED                                            jnz     .50                                             ;next entry
   954                                  ;
   955                                  ;       Repeat search if we are not at the end of the directory.
   956                                  ;
   957 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   958 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   959 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   960 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   961 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   962                                  ;
   963                                  ;       If we find the kernel program in the directory, read the FAT.
   964                                  ;
   965 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   966 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   967 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   968 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   969 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   970 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   971                                  ;
   972                                  ;       Get the starting cluster of the kernel program and target address.
   973                                  ;
   974 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   975 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   976                                  ;
   977                                  ;       Read each program cluster into RAM.
   978                                  ;
   979 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   980 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   981 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   982 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   983 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   984 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   985 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   986 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   987 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   988                                  ;
   989                                  ;       Update buffer pointer for next cluster.
   990                                  ;
   991 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   992 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   993 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   994 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   995 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   996                                  ;
   997                                  ;       Compute next cluster number.
   998                                  ;
   999 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
  1000 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
  1001 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
  1002 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
  1003 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
  1004 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
  1005 00000120 83E701                                          and     di,1                                            ;get low bit
  1006 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
  1007 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
  1008 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
  1009                                  ;
  1010                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1011                                  ;
  1012 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
  1013 0000012E 7404                                            jz      .80                                             ;no, skip ahead
  1014 00000130 B104                                            mov     cl,4                                            ;shift count
  1015 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
  1016 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1017 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1018 0000013A 75B2                                            jne     .70                                             ;no, continue
  1019                                  ;
  1020                                  ;       Transfer control to the operating system program.
  1021                                  ;
  1022 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1023 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1024 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1025                                  ;
  1026                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1027                                  ;
  1028 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1029 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1030 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1031 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1032 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1033 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1034 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1035 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1036 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1037 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1038                                  ;
  1039                                  ;       Try maxtries times to read sector.
  1040                                  ;
  1041 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1042 00000160 53                      .10                     push    bx                                              ;save buffer address
  1043 00000161 51                                              push    cx                                              ;save retry count
  1044 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1045 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1046 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1047 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1048 0000016F 59                                              pop     cx                                              ;restore retry count
  1049 00000170 5B                                              pop     bx                                              ;restore buffer address
  1050 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1051 00000173 E2EB                                            loop    .10                                             ;retry
  1052                                  ;
  1053                                  ;       Handle disk error: convert to ASCII and store in error string.
  1054                                  ;
  1055 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1056 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1057 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1058 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1059 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1060 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1061 00000183 7203                                            jb      .20                                             ;continue if numeral
  1062 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1063 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1064 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1065 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1066 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1067 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1068 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1069                                  ;
  1070                                  ;       Wait for a key press.
  1071                                  ;
  1072 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1073 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1074 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1075 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1076 0000019F F4                                              hlt                                                     ;wait for interrupt
  1077 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1078                                  ;
  1079                                  ;       Reset the system.
  1080                                  ;
  1081 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1082 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1083 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1084 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1085 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1086                                  ;
  1087                                  ;       Display text message.
  1088                                  ;
  1089 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1090 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1091 000001AC 84C0                                            test    al,al                                           ;end of string?
  1092 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1093 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1094 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1095 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1096 000001B6 C3                      BootReturn              ret                                                     ;return
  1097                                  ;-----------------------------------------------------------------------------------------------------------------------
  1098                                  ;
  1099                                  ;       Constants
  1100                                  ;
  1101                                  ;-----------------------------------------------------------------------------------------------------------------------
  1102 000001B7 90                                              align   2
  1103 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1104 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1104 000001C3 4F4D               
  1105 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1105 000001CE 530D0A00           
  1106 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1106 000001DB 7220               
  1107 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1108 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1108 000001E9 6700               
  1109                                  ;-----------------------------------------------------------------------------------------------------------------------
  1110                                  ;
  1111                                  ;       Work Areas
  1112                                  ;
  1113                                  ;-----------------------------------------------------------------------------------------------------------------------
  1114 000001EB 90                                              align   2
  1115 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1116 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1117 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1118 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1119 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1120                                  wwReadCountCommand      equ     $                                               ;read count and command
  1121 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1122 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1123                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1124 000001F8 00                      wbDrive                 db      0                                               ;drive
  1125 000001F9 00                      wbHead                  db      0                                               ;head
  1126                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1127 000001FA 00                                              db      0                                               ;sector
  1128 000001FB 00                      wbTrack                 db      0                                               ;track
  1129 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1130 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1131                                  %endif
  1132                                  %ifdef BUILDPREP
  1133                                  ;=======================================================================================================================
  1134                                  ;
  1135                                  ;       Diskette Preparation Code
  1136                                  ;
  1137                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1138                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1139                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1140                                  ;
  1141                                  ;=======================================================================================================================
  1142                                  ;
  1143                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1144                                  ;
  1145                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1146                                                          call    BootPrint                                       ;display message
  1147                                  ;
  1148                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1149                                  ;
  1150                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1151                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1152                                                          jnz     .20                                             ;continue if key pressed
  1153                                                          sti                                                     ;enable interrupts
  1154                                                          hlt                                                     ;wait for interrupt
  1155                                                          jmp     .10                                             ;repeat
  1156                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1157                                                          je      .30                                             ;yes, branch
  1158                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1159                                                          jne     .10                                             ;no, repeat
  1160                                                          jmp     .120                                            ;yes, exit program
  1161                                  ;
  1162                                  ;       Display writing-sector message and patch the JMP instruction.
  1163                                  ;
  1164                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1165                                                          call    BootPrint                                       ;display message
  1166                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1167                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1168                                                          mov     [bx],ax                                         ;update the JMP instruction
  1169                                  ;
  1170                                  ;       Try to read the boot sector.
  1171                                  ;
  1172                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1173                                  .40                     push    cx                                              ;save remaining tries
  1174                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1175                                                          mov     dx,0                                            ;head zero, drive zero
  1176                                                          mov     cx,1                                            ;track zero, sector one
  1177                                                          mov     al,1                                            ;one sector
  1178                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1179                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1180                                                          pop     cx                                              ;restore remaining retries
  1181                                                          jnc     .50                                             ;skip ahead if successful
  1182                                                          loop    .40                                             ;try again
  1183                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1184                                                          jmp     .70                                             ;branch to error routine
  1185                                  ;
  1186                                  ;       Copy diskette parms from input buffer to output buffer.
  1187                                  ;
  1188                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1189                                                          add     si,11                                           ;skip over JMP and system ID
  1190                                                          mov     di,Boot                                         ;output buffer address
  1191                                                          add     di,11                                           ;skip over JMP and system ID
  1192                                                          mov     cx,19                                           ;length of diskette parameters
  1193                                                          cld                                                     ;forward string copies
  1194                                                          rep     movsb                                           ;copy diskette parameters
  1195                                  ;
  1196                                  ;       Try to write boot sector to diskette.
  1197                                  ;
  1198                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1199                                  .60                     push    cx                                              ;save remaining tries
  1200                                                          mov     bx,Boot                                         ;output buffer address
  1201                                                          mov     dx,0                                            ;head zero, drive zero
  1202                                                          mov     cx,1                                            ;track zero, sector one
  1203                                                          mov     al,1                                            ;one sector
  1204                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1205                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1206                                                          pop     cx                                              ;restore remaining retries
  1207                                                          jnc     .100                                            ;skip ahead if successful
  1208                                                          loop    .60                                             ;try again
  1209                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1210                                  ;
  1211                                  ;       Convert the error code to ASCII and display the error message.
  1212                                  ;
  1213                                  .70                     push    ax                                              ;save error code
  1214                                                          mov     al,ah                                           ;copy error code
  1215                                                          mov     ah,0                                            ;AX = error code
  1216                                                          mov     dl,10h                                          ;hexadecimal divisor
  1217                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1218                                                          or      ax,03030h                                       ;add ASCII zone digits
  1219                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1220                                                          jb      .80                                             ;yes, continue
  1221                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1222                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1223                                                          jb      .90                                             ;yes, continue
  1224                                                          add     al,7                                            ;no, make ASCII
  1225                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1226                                                          call    BootPrint                                       ;write error message
  1227                                                          pop     ax                                              ;restore error code
  1228                                  ;
  1229                                  ;       Display the completion message.
  1230                                  ;
  1231                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1232                                                          mov     al,ah                                           ;BIOS return code
  1233                                                          cmp     al,0                                            ;success?
  1234                                                          je      .110                                            ;yes, continue
  1235                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1236                                                          cmp     al,1                                            ;disk parameter error?
  1237                                                          je      .110                                            ;yes, continue
  1238                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1239                                                          cmp     al,2                                            ;address mark not found?
  1240                                                          je      .110                                            ;yes, continue
  1241                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1242                                                          cmp     al,3                                            ;protected disk?
  1243                                                          je      .110                                            ;yes, continue
  1244                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1245                                                          cmp     al,6                                            ;diskette removed?
  1246                                                          je      .110                                            ;yes, continue
  1247                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1248                                                          cmp     al,80H                                          ;drive timed out?
  1249                                                          je      .110                                            ;yes, continue
  1250                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1251                                  .110                    call    BootPrint                                       ;display result message
  1252                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1253                                                          int     021h                                            ;terminate DOS program
  1254                                                          ret                                                     ;return (should not execute)
  1255                                  ;-----------------------------------------------------------------------------------------------------------------------
  1256                                  ;
  1257                                  ;       Diskette Preparation Messages
  1258                                  ;
  1259                                  ;-----------------------------------------------------------------------------------------------------------------------
  1260                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1261                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1262                                                          db      13,10
  1263                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1264                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1265                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1266                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1267                                                          db      13,10,0
  1268                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1269                                                          db      13,10,0
  1270                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1271                                                          db      13,10,0
  1272                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1273                                                          db      13,10,0
  1274                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1275                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1276                                                          db      13,10,0
  1277                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1278                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1279                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1280                                                          db      13,10,"and retry."
  1281                                                          db      13,10,0
  1282                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1283                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1284                                                          db      13,10,"using another diskette."
  1285                                                          db      13,10,0
  1286                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1287                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1288                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1289                                                          db      13,10,0
  1290                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1291                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1292                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1293                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1294                                                          db      13,10,"is properly inserted in the diskette drive."
  1295                                                          db      13,10,0
  1296                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1297                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1298                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1299                                                          db      13,10,0
  1300                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1301                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1302                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1303                                                          db      13,10,0
  1304                                  wcPrepInBuf             equ     $
  1305                                  %endif
  1306                                  %ifdef BUILDDISK
  1307                                  ;=======================================================================================================================
  1308                                  ;
  1309                                  ;       File Allocation Tables
  1310                                  ;
  1311                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1312                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1313                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1314                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1315                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1316                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1317                                  ;       the last cluster in the chain.
  1318                                  ;
  1319                                  ;       Every three bytes encode two FAT entries as follows:
  1320                                  ;
  1321                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1322                                  ;
  1323                                  ;=======================================================================================================================
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  ;
  1326                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1327                                  ;
  1328                                  ;-----------------------------------------------------------------------------------------------------------------------
  1329                                  section                 fat1                                                    ;first copy of FAT
  1330 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1331 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1332 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1333 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1334 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1335 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1336 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1337 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1338 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1339 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1340 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1341 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1342                                  ;-----------------------------------------------------------------------------------------------------------------------
  1343                                  ;
  1344                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1345                                  ;
  1346                                  ;-----------------------------------------------------------------------------------------------------------------------
  1347                                  section                 fat2                                                    ;second copy of FAT
  1348 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1349 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1350 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1351 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1352 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1353 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1354 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1355 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1356 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1357 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1358 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1359 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1360                                  ;-----------------------------------------------------------------------------------------------------------------------
  1361                                  ;
  1362                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1363                                  ;
  1364                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1365                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1366                                  ;       copy.
  1367                                  ;
  1368                                  ;-----------------------------------------------------------------------------------------------------------------------
  1369                                  section                 dir                                                     ;diskette directory
  1370 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1370 00000009 4F4D               
  1371 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1372 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1373 00000016 0000                                            dw      0h                                              ;time
  1374 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1375 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1376 0000001A 0200                                            dw      2                                               ;first cluster
  1377 0000001C 00540000                                        dd      05400h                                          ;file size
  1378 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1379                                  %endif
  1380                                  %ifdef BUILDCOM
  1381                                  ;=======================================================================================================================
  1382                                  ;
  1383                                  ;       OS.COM
  1384                                  ;
  1385                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1386                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1387                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1388                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1389                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1390                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1391                                  ;
  1392                                  ;       Our loader addressability is set up according to the following diagram.
  1393                                  ;
  1394                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1395                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1396                                  ;                               |  256 = 100h bytes                             |
  1397                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1398                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1399                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1400                                  ;                       007e00  +-----------------------------------------------+
  1401                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1402                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1403                                  ;                               |                                               |
  1404                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1405                                  ;                               |                                               |
  1406                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1407                                  ;                               |  Loader Code                                  |
  1408                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1409                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1410                                  ;
  1411                                  ;=======================================================================================================================
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413                                  ;
  1414                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1415                                  ;
  1416                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1417                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1418                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1419                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1420                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1421                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1422                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1423                                  ;       registers.
  1424                                  ;
  1425                                  ;-----------------------------------------------------------------------------------------------------------------------
  1426                                                          cpu     8086                                            ;assume minimal CPU
  1427                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1428                                                          bits    16                                              ;this is 16-bit code
  1429 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1430 00000001 1F                                              pop     ds                                              ;...as our data segment
  1431 00000002 0E                                              push    cs                                              ;use the code segment
  1432 00000003 07                                              pop     es                                              ;...as our extra segment
  1433                                  ;
  1434                                  ;       Write a message to the console so we know we have our addressability established.
  1435                                  ;
  1436 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1437 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1438                                  ;
  1439                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1440                                  ;
  1441 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1442 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1443 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1444 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1445                                                          cpu     386                                             ;allow 80386 instructions
  1446 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1447 00000017 E89600                                          call    PutTTYString                                    ;display message
  1448                                  ;
  1449                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1450                                  ;
  1451 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1452 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1453 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1454 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1455 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1456 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1457 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1458 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1459 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1460 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1461                                  ;
  1462                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1463                                  ;
  1464 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1465 00000038 07                                              pop     es                                              ;... as target segment
  1466 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1467 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1468 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1469 00000041 FC                                              cld                                                     ;forward strings
  1470 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1471 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1472 00000047 E86600                                          call    PutTTYString                                    ;display message
  1473                                  ;
  1474                                  ;       Switch to protected mode.
  1475                                  ;
  1476 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1477 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1478 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1479 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1480 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1481 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1482 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1483 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1484 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1485 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1486 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1487                                  ;
  1488                                  ;       Enable hardware and maskable interrupts.
  1489                                  ;
  1490 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1491 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1492 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1493 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1494                                  ;
  1495                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1496                                  ;
  1497 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1498 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1499 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1500                                  ;-----------------------------------------------------------------------------------------------------------------------
  1501                                  ;
  1502                                  ;       Routine:        LoaderExit
  1503                                  ;
  1504                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1505                                  ;
  1506                                  ;       In:             DS:SI   string address
  1507                                  ;
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1510                                  ;
  1511                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1512                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1513                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1514                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1515                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1516                                  ;
  1517 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1518 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1519 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1520 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1521 00000085 F4                                              hlt                                                     ;wait for interrupt
  1522 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1523                                  ;
  1524                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1525                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1526                                  ;       HLT until the system resets.
  1527                                  ;
  1528 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1529 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1530 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1531 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1532 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1533                                  ;-----------------------------------------------------------------------------------------------------------------------
  1534                                  ;
  1535                                  ;       Routine:        GetCPUType
  1536                                  ;
  1537                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1538                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1539                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1540                                  ;
  1541                                  ;       Out:            AX      0 = 808x, v20, etc.
  1542                                  ;                               1 = 80186
  1543                                  ;                               2 = 80286
  1544                                  ;                               3 = 80386
  1545                                  ;
  1546                                  ;-----------------------------------------------------------------------------------------------------------------------
  1547 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1548 00000092 B120                                            mov     cl,32                                           ;shift count
  1549 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1550 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1551 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1552                                                          cpu     186
  1553 0000009A 54                                              push    sp                                              ;save stack pointer
  1554 0000009B 59                                              pop     cx                                              ;...into cx
  1555 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1556 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1557                                                          cpu     286
  1558 000000A0 40                                              inc     ax                                              ;AX = 2
  1559 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1560 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1561 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1562 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1563 000000AE 40                                              inc     ax                                              ;AX = 3
  1564 000000AF C3                      .10                     ret                                                     ;return
  1565                                  ;-----------------------------------------------------------------------------------------------------------------------
  1566                                  ;
  1567                                  ;       Routine:        PutTTYString
  1568                                  ;
  1569                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1570                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1571                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1572                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1573                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1574                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1575                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1576                                  ;                       to LODSB is not needed.
  1577                                  ;
  1578                                  ;       In:             DS:SI   address of string
  1579                                  ;
  1580                                  ;       Out:            DF      0
  1581                                  ;                       ZF      1
  1582                                  ;                       AL      0
  1583                                  ;
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1586 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1587 000000B2 84C0                                            test    al,al                                           ;end of string?
  1588 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1589 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1590 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1591 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1592 000000BC C3                      .20                     ret                                                     ;return
  1593                                  ;-----------------------------------------------------------------------------------------------------------------------
  1594                                  ;
  1595                                  ;       Loader Data
  1596                                  ;
  1597                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1598                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601 000000BD 90                                              align   2
  1602 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1603 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1604 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1605 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1606 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1606 000000D1 74696E672073797374-
  1606 000000DA 656D20726571756972-
  1606 000000E3 657320616E20693338-
  1606 000000EC 36206F72206C617465-
  1606 000000F5 722070726F63657373-
  1606 000000FE 6F722E0D0A         
  1607 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1607 0000010C 65737320616E79206B-
  1607 00000115 657920746F20726573-
  1607 0000011E 746172742074686520-
  1607 00000127 636F6D70757465722E-
  1607 00000130 0D0A00             
  1608 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1609 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1609 00000145 7265640D0A00       
  1610 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1610 00000154 616465640D0A00     
  1611 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1611 00000164 4F530D0A00         
  1612 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1613                                  ;=======================================================================================================================
  1614                                  ;
  1615                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1616                                  ;
  1617                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1618                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1619                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1620                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1621                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1622                                  ;
  1623                                  ;=======================================================================================================================
  1624                                  ;=======================================================================================================================
  1625                                  ;
  1626                                  ;       Kernel Tables
  1627                                  ;
  1628                                  ;=======================================================================================================================
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                  ;
  1631                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1632                                  ;
  1633                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1634                                  ;       first descriptor must be all nulls.
  1635                                  ;
  1636                                  ;       6   5         4         3         2         1         0
  1637                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1638                                  ;       ----------------------------------------------------------------
  1639                                  ;       h......hffffmmmma......ab......................bn..............n
  1640                                  ;
  1641                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1642                                  ;               ffff                                                            flags
  1643                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1644                                  ;                       a......a                                                access
  1645                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1646                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1647                                  ;
  1648                                  ;       00000000                                                                all areas have base addresses below 2^24
  1649                                  ;               0...                                                            single-byte size granularity
  1650                                  ;               1...                                                            4-kilobyte size granularity
  1651                                  ;               .0..                                                            16-bit default for code segments
  1652                                  ;               .1..                                                            32-bit default for code segments
  1653                                  ;               ..0.                                                            intel-reserved; should be zero
  1654                                  ;               ...0                                                            available for operating system use
  1655                                  ;                   0000                                                        segment is less than 2^16 in size
  1656                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1657                                  ;                       1.......                                                segment is present in memory
  1658                                  ;                       .00.....                                                segment is of privilege level 0
  1659                                  ;                       ...0....                                                segment is of system or gate type
  1660                                  ;                       ...00010                                                local decriptor table (LDT)
  1661                                  ;                       ...01001                                                task state segment (TSS) available
  1662                                  ;                       ...01011                                                task state segment (TSS) busy
  1663                                  ;                       ...10...                                                data segment
  1664                                  ;                       ...10011                                                writable data (accessed)
  1665                                  ;                       ...11...                                                code segment
  1666                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  section                 gdt                                                     ;global descriptor table
  1670 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1671 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1672 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1673 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1674 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1675 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1676 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1677 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1678 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1679 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1680 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1681 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1682 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1683 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1684 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1688                                  ;
  1689                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1690                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1691                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1692                                  ;
  1693                                  ;       6   5         4         3         2         1         0
  1694                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1695                                  ;       ----------------------------------------------------------------
  1696                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1697                                  ;
  1698                                  ;       h...h   high-order offset (bits 16-31)
  1699                                  ;       P       present (0=unused interrupt)
  1700                                  ;       zz      descriptor privilege level
  1701                                  ;       S       storage segment (must be zero for IDT)
  1702                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1703                                  ;       S...S   handling code selector in GDT
  1704                                  ;       l...l   lo-order offset (bits 0-15)
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  section                 idt                                                     ;interrupt descriptor table
  1708                                                          mint    dividebyzero                                    ;00 divide by zero
  1708                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1708 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1709                                                          mint    singlestep                                      ;01 single step
  1709                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1709 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1710                                                          mint    nmi                                             ;02 non-maskable
  1710                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1710 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1711                                                          mint    break                                           ;03 break
  1711                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1711 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1712                                                          mint    into                                            ;04 into
  1712                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1712 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1713                                                          mint    bounds                                          ;05 bounds
  1713                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1713 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1714                                                          mint    badopcode                                       ;06 bad op code
  1714                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1714 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1715                                                          mint    nocoproc                                        ;07 no coprocessor
  1715                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1715 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1716                                                          mint    doublefault                                     ;08 double-fault
  1716                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1716 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1717                                                          mint    operand                                         ;09 operand
  1717                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1717 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1718                                                          mint    badtss                                          ;0a bad TSS
  1718                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1718 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1719                                                          mint    notpresent                                      ;0b not-present
  1719                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1719 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1720                                                          mint    stacklimit                                      ;0c stack limit
  1720                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1720 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1721                                                          mint    protection                                      ;0d general protection fault
  1721                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1721 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1722                                                          mint    int14                                           ;0e (reserved)
  1722                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1722 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1723                                                          mint    int15                                           ;0f (reserved)
  1723                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1723 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1724                                                          mint    coproccalc                                      ;10 (reserved)
  1724                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1724 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1725                                                          mint    int17                                           ;11 (reserved)
  1725                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1725 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1726                                                          mint    int18                                           ;12 (reserved)
  1726                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1726 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1727                                                          mint    int19                                           ;13 (reserved)
  1727                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1727 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1728                                                          mint    int20                                           ;14 (reserved)
  1728                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1728 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1729                                                          mint    int21                                           ;15 (reserved)
  1729                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1729 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1730                                                          mint    int22                                           ;16 (reserved)
  1730                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1730 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1731                                                          mint    int23                                           ;17 (reserved)
  1731                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1731 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1732                                                          mint    int24                                           ;18 (reserved)
  1732                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1732 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1733                                                          mint    int25                                           ;19 (reserved)
  1733                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1733 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1734                                                          mint    int26                                           ;1a (reserved)
  1734                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1734 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1735                                                          mint    int27                                           ;1b (reserved)
  1735                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1735 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1736                                                          mint    int28                                           ;1c (reserved)
  1736                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1736 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1737                                                          mint    int29                                           ;1d (reserved)
  1737                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1737 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1738                                                          mint    int30                                           ;1e (reserved)
  1738                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1738 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1739                                                          mint    int31                                           ;1f (reserved)
  1739                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1739 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1740                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1740                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1740 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1741                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1741                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1741 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1742                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1742                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1742 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1743                                                          mtrap   com2                                            ;23 IRQ3 com2
  1743                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1743 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1744                                                          mtrap   com1                                            ;24 IRQ4 com1
  1744                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1744 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1745                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1745                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1745 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1746                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1746                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1746 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1747                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1747                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1747 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1748                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1748                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1748 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1749                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1749                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1749 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1750                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1750                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1750 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1751                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1751                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1751 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1752                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1752                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1752 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1753                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1753                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1753 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1754                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1754                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1754 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1755                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1755                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1755 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1756                                                          mtrap   svc                                             ;30 OS services
  1756                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1756 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1757 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1758                                  ;=======================================================================================================================
  1759                                  ;
  1760                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1761                                  ;
  1762                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1763                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1764                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1765                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1766                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1767                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1768                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1769                                  ;
  1770                                  ;=======================================================================================================================
  1771                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1772                                                          cpu     386                                             ;allow 80386 instructions
  1773                                                          bits    32                                              ;this is 32-bit code
  1774                                  ;=======================================================================================================================
  1775                                  ;
  1776                                  ;       CPU Interrupt Handlers
  1777                                  ;
  1778                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1779                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1780                                  ;
  1781                                  ;=======================================================================================================================
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;       INT0    Divide By Zero
  1785                                  ;
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                                          menter  dividebyzero                                    ;divide by zero
  1787                              <1> ?%1 equ ($-$$)
  1788 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1789 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1790 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;
  1793                                  ;       INT1    Single Step
  1794                                  ;
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                                          menter  singlestep                                      ;single step
  1796                              <1> ?%1 equ ($-$$)
  1797 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1798 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1799 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ;
  1802                                  ;       INT2    Non-Maskable Interrupt
  1803                                  ;
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                                          menter  nmi                                             ;non-maskable
  1805                              <1> ?%1 equ ($-$$)
  1806 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1807 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1808 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                  ;
  1811                                  ;       INT3    Break
  1812                                  ;
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                                          menter  break                                           ;break
  1814                              <1> ?%1 equ ($-$$)
  1815 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1816 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1817 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT4    Into
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  into                                            ;into
  1823                              <1> ?%1 equ ($-$$)
  1824 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1825 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1826 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       INT5    Bounds
  1830                                  ;
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                                          menter  bounds                                          ;bounds
  1832                              <1> ?%1 equ ($-$$)
  1833 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1834 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1835 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;       INT6    Bad Operation Code
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                                          menter  badopcode                                       ;bad opcode interrupt
  1841                              <1> ?%1 equ ($-$$)
  1842 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1843 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1844 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                  ;
  1847                                  ;       INT7    No Coprocessor
  1848                                  ;
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1850                              <1> ?%1 equ ($-$$)
  1851 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1852 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1853 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  ;
  1856                                  ;       INT8    Double Fault
  1857                                  ;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                                          menter  doublefault                                     ;doublefault interrupt
  1859                              <1> ?%1 equ ($-$$)
  1860 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1861 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1862 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                  ;
  1865                                  ;       INT9    Operand
  1866                                  ;
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                                          menter  operand                                         ;operand interrupt
  1868                              <1> ?%1 equ ($-$$)
  1869 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1870 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1871 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  ;
  1874                                  ;       INT10   Bad Task State Segment
  1875                                  ;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                                          menter  badtss                                          ;bad TSS interrupt
  1877                              <1> ?%1 equ ($-$$)
  1878 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1879 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1880 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;       INT11   Not Present
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                                          menter  notpresent                                      ;not present interrupt
  1886                              <1> ?%1 equ ($-$$)
  1887 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1888 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1889 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;       INT12   Stack Limit
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                                          menter  stacklimit                                      ;stack limit interrupt
  1895                              <1> ?%1 equ ($-$$)
  1896 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1897 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1898 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;       INT13   General Protection Fault
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                                          menter  protection                                      ;protection fault interrupt
  1904                              <1> ?%1 equ ($-$$)
  1905 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1906 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1907 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  ;
  1910                                  ;       INT14   Reserved
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                                          menter  int14                                           ;(reserved)
  1913                              <1> ?%1 equ ($-$$)
  1914 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1915 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1916 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                  ;
  1919                                  ;       INT15   Reserved
  1920                                  ;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                                          menter  int15                                           ;(reserved)
  1922                              <1> ?%1 equ ($-$$)
  1923 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1924 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1925 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  ;
  1928                                  ;       INT16   Coprocessor Calculation
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                                          menter  coproccalc                                      ;coprocessor calculation
  1931                              <1> ?%1 equ ($-$$)
  1932 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1933 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1934 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  ;
  1937                                  ;       INT17   Reserved
  1938                                  ;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                                          menter  int17                                           ;(reserved)
  1940                              <1> ?%1 equ ($-$$)
  1941 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1942 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1943 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                  ;
  1946                                  ;       INT18   Reserved
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                                          menter  int18                                           ;(reserved)
  1949                              <1> ?%1 equ ($-$$)
  1950 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1951 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1952 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                  ;
  1955                                  ;       INT19   Reserved
  1956                                  ;
  1957                                  ;-----------------------------------------------------------------------------------------------------------------------
  1958                                                          menter  int19                                           ;(reserved)
  1958                              <1> ?%1 equ ($-$$)
  1959 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1960 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1961 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                  ;
  1964                                  ;       INT20   Reserved
  1965                                  ;
  1966                                  ;-----------------------------------------------------------------------------------------------------------------------
  1967                                                          menter  int20                                           ;(reserved)
  1967                              <1> ?%1 equ ($-$$)
  1968 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1969 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1970 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;       INT21   Reserved
  1974                                  ;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                                          menter  int21                                           ;(reserved)
  1976                              <1> ?%1 equ ($-$$)
  1977 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1978 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1979 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  ;
  1982                                  ;       INT22   Reserved
  1983                                  ;
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                                          menter  int22                                           ;(reserved)
  1985                              <1> ?%1 equ ($-$$)
  1986 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1987 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1988 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ;
  1991                                  ;       INT23   Reserved
  1992                                  ;
  1993                                  ;-----------------------------------------------------------------------------------------------------------------------
  1994                                                          menter  int23                                           ;(reserved)
  1994                              <1> ?%1 equ ($-$$)
  1995 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1996 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1997 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                  ;
  2000                                  ;       INT24   Reserved
  2001                                  ;
  2002                                  ;-----------------------------------------------------------------------------------------------------------------------
  2003                                                          menter  int24                                           ;(reserved)
  2003                              <1> ?%1 equ ($-$$)
  2004 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  2005 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2006 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                  ;
  2009                                  ;       INT25   Reserved
  2010                                  ;
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                                          menter  int25                                           ;(reserved)
  2012                              <1> ?%1 equ ($-$$)
  2013 00000114 6A19                                            push    25                                              ;store interrupt nbr
  2014 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2015 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                  ;
  2018                                  ;       INT26   Reserved
  2019                                  ;
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                                          menter  int26                                           ;(reserved)
  2021                              <1> ?%1 equ ($-$$)
  2022 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  2023 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2024 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  2025                                  ;-----------------------------------------------------------------------------------------------------------------------
  2026                                  ;
  2027                                  ;       INT27   Reserved
  2028                                  ;
  2029                                  ;-----------------------------------------------------------------------------------------------------------------------
  2030                                                          menter  int27                                           ;(reserved)
  2030                              <1> ?%1 equ ($-$$)
  2031 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  2032 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2033 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;
  2036                                  ;       INT28   Reserved
  2037                                  ;
  2038                                  ;-----------------------------------------------------------------------------------------------------------------------
  2039                                                          menter  int28                                           ;(reserved)
  2039                              <1> ?%1 equ ($-$$)
  2040 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  2041 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2042 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  2043                                  ;-----------------------------------------------------------------------------------------------------------------------
  2044                                  ;
  2045                                  ;       INT29   Reserved
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048                                                          menter  int29                                           ;(reserved)
  2048                              <1> ?%1 equ ($-$$)
  2049 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  2050 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2051 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053                                  ;
  2054                                  ;       INT30   Reserved
  2055                                  ;
  2056                                  ;-----------------------------------------------------------------------------------------------------------------------
  2057                                                          menter  int30                                           ;(reserved)
  2057                              <1> ?%1 equ ($-$$)
  2058 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  2059 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2060 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  2061                                  ;-----------------------------------------------------------------------------------------------------------------------
  2062                                  ;
  2063                                  ;       INT31   Reserved
  2064                                  ;
  2065                                  ;-----------------------------------------------------------------------------------------------------------------------
  2066                                                          menter  int31                                           ;(reserved)
  2066                              <1> ?%1 equ ($-$$)
  2067 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  2068 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2069 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  2070                                  ;-----------------------------------------------------------------------------------------------------------------------
  2071                                  ;
  2072                                  ;       Routine:        ReportInterrupt
  2073                                  ;
  2074                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2075                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2076                                  ;
  2077                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2078                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2079                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2080                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2081                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2082                                  ;
  2083                                  ;       Out:            N/A             This routine does not exit.
  2084                                  ;
  2085                                  ;-----------------------------------------------------------------------------------------------------------------------
  2086 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2087 00000154 06                                              push    es                                              ;save ES at time of interrupt
  2088 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2089 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  2090                                  ;
  2091                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2092                                  ;
  2093                                  ;                       [EBP+60]        EFLAGS
  2094                                  ;                       [EBP+56]        CS
  2095                                  ;                       [EBP+52]        EIP
  2096                                  ;                       [EBP+48]        EIP hi-order
  2097                                  ;                       [EBP+44]        interrupt number (0-31)
  2098                                  ;                       [EBP+40]        error message address
  2099                                  ;                       [EBP+36]        DS
  2100                                  ;                       [EBP+32]        ES
  2101                                  ;                       [EBP+28]        EAX
  2102                                  ;                       [EBP+24]        ECX
  2103                                  ;                       [EBP+20]        EDX
  2104                                  ;                       [EBP+16]        EBX
  2105                                  ;                       [EBP+12]        ESP
  2106                                  ;                       [EBP+8]         EBP
  2107                                  ;                       [EBP+4]         ESI
  2108                                  ;                       [EBP+0]         EDI
  2109                                  ;
  2110 00000158 0E                                              push    cs                                              ;load code selector ...
  2111 00000159 1F                                              pop     ds                                              ;... into DS
  2112 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2113 0000015C 07                                              pop     es                                              ;... into ES
  2114                                  ;
  2115                                  ;       Display the interrupt report boundary box
  2116                                  ;
  2117 0000015D B10D                                            mov     cl,13                                           ;column
  2118 0000015F B506                                            mov     ch,6                                            ;row
  2119 00000161 B232                                            mov     dl,50                                           ;width
  2120 00000163 B608                                            mov     dh,8                                            ;height
  2121 00000165 B707                                            mov     bh,07h                                          ;attribute
  2122 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2123                                  ;
  2124                                  ;       Display the report header
  2125                                  ;
  2126 0000016C B10F                                            mov     cl,15                                           ;column
  2127 0000016E B507                                            mov     ch,7                                            ;row
  2128 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2129 00000175 E84F110000                                      call    SetConsoleString                                ;draw text string
  2130                                  ;
  2131                                  ;       Display the interrupt description label
  2132                                  ;
  2133 0000017A B10F                                            mov     cl,15                                           ;column
  2134 0000017C B508                                            mov     ch,8                                            ;row
  2135 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2136 00000183 E841110000                                      call    SetConsoleString                                ;draw text string
  2137                                  ;
  2138                                  ;       Display the interrupt number
  2139                                  ;
  2140 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2141 0000018B B11A                                            mov     cl,26                                           ;column
  2142 0000018D B508                                            mov     ch,8                                            ;row
  2143 0000018F E8DE0D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2144                                  ;
  2145                                  ;       Display the interrupt name
  2146                                  ;
  2147 00000194 B11D                                            mov     cl,29                                           ;column
  2148 00000196 B508                                            mov     ch,8                                            ;row
  2149 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2150 0000019B E829110000                                      call    SetConsoleString                                ;display interrupt description
  2151                                  ;
  2152                                  ;       Display the register values header
  2153                                  ;
  2154 000001A0 B10F                                            mov     cl,15                                           ;column
  2155 000001A2 B50A                                            mov     ch,10                                           ;row
  2156 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2157 000001A9 E81B110000                                      call    SetConsoleString                                ;draw text string
  2158                                  ;
  2159                                  ;       Display the EAX register label and value
  2160                                  ;
  2161 000001AE B10F                                            mov     cl,15                                           ;column
  2162 000001B0 B50B                                            mov     ch,11                                           ;row
  2163 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2164 000001B7 E80D110000                                      call    SetConsoleString                                ;draw label
  2165 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2166 000001BF B113                                            mov     cl,19                                           ;column
  2167 000001C1 B50B                                            mov     ch,11                                           ;row
  2168 000001C3 E8D00D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2169                                  ;
  2170                                  ;       Display the ECX register label and value
  2171                                  ;
  2172 000001C8 B10F                                            mov     cl,15                                           ;column
  2173 000001CA B50C                                            mov     ch,12                                           ;row
  2174 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2175 000001D1 E8F3100000                                      call    SetConsoleString                                ;draw label
  2176 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2177 000001D9 B113                                            mov     cl,19                                           ;column
  2178 000001DB B50C                                            mov     ch,12                                           ;row
  2179 000001DD E8B60D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2180                                  ;
  2181                                  ;       Display the EDX register label and value
  2182                                  ;
  2183 000001E2 B10F                                            mov     cl,15                                           ;column
  2184 000001E4 B50D                                            mov     ch,13                                           ;row
  2185 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2186 000001EB E8D9100000                                      call    SetConsoleString                                ;draw label
  2187 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2188 000001F3 B113                                            mov     cl,19                                           ;column
  2189 000001F5 B50D                                            mov     ch,13                                           ;row
  2190 000001F7 E89C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2191                                  ;
  2192                                  ;       Display the EBX register label and value
  2193                                  ;
  2194 000001FC B10F                                            mov     cl,15                                           ;column
  2195 000001FE B50E                                            mov     ch,14                                           ;row
  2196 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2197 00000205 E8BF100000                                      call    SetConsoleString                                ;draw label
  2198 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2199 0000020D B113                                            mov     cl,19                                           ;column
  2200 0000020F B50E                                            mov     ch,14                                           ;row
  2201 00000211 E8820D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2202                                  ;
  2203                                  ;       Display the ESI register label and value
  2204                                  ;
  2205 00000216 B11D                                            mov     cl,29                                           ;column
  2206 00000218 B50B                                            mov     ch,11                                           ;row
  2207 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2208 0000021F E8A5100000                                      call    SetConsoleString                                ;draw label
  2209 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2210 00000227 B121                                            mov     cl,33                                           ;column
  2211 00000229 B50B                                            mov     ch,11                                           ;row
  2212 0000022B E8680D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2213                                  ;
  2214                                  ;       Display the EDI register label and value
  2215                                  ;
  2216 00000230 B11D                                            mov     cl,29                                           ;column
  2217 00000232 B50C                                            mov     ch,12                                           ;row
  2218 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2219 00000239 E88B100000                                      call    SetConsoleString                                ;draw label
  2220 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2221 00000241 B121                                            mov     cl,33                                           ;column
  2222 00000243 B50C                                            mov     ch,12                                           ;row
  2223 00000245 E84E0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2224                                  ;
  2225                                  ;       Display the EBP register label and value
  2226                                  ;
  2227 0000024A B11D                                            mov     cl,29                                           ;column
  2228 0000024C B50D                                            mov     ch,13                                           ;row
  2229 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2230 00000253 E871100000                                      call    SetConsoleString                                ;draw label
  2231 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2232 0000025B B121                                            mov     cl,33                                           ;column
  2233 0000025D B50D                                            mov     ch,13                                           ;row
  2234 0000025F E8340D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2235                                  ;
  2236                                  ;       Display the DS register label and value
  2237                                  ;
  2238 00000264 B12A                                            mov     cl,42                                           ;column
  2239 00000266 B50B                                            mov     ch,11                                           ;row
  2240 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2241 0000026D E857100000                                      call    SetConsoleString                                ;draw label
  2242 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2243 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2244 00000278 B12E                                            mov     cl,46                                           ;column
  2245 0000027A B50B                                            mov     ch,11                                           ;row
  2246 0000027C E8270D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2247                                  ;
  2248                                  ;       Display the ES register label and value
  2249                                  ;
  2250 00000281 B12A                                            mov     cl,42                                           ;column
  2251 00000283 B50C                                            mov     ch,12                                           ;row
  2252 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2253 0000028A E83A100000                                      call    SetConsoleString                                ;draw label
  2254 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2255 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2256 00000295 B12E                                            mov     cl,46                                           ;column
  2257 00000297 B50C                                            mov     ch,12                                           ;row
  2258 00000299 E80A0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2259                                  ;
  2260                                  ;       Display the SS register label and value
  2261                                  ;
  2262 0000029E B12A                                            mov     cl,42                                           ;column
  2263 000002A0 B50D                                            mov     ch,13                                           ;row
  2264 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2265 000002A7 E81D100000                                      call    SetConsoleString                                ;draw label
  2266 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2267 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2268 000002B1 B12E                                            mov     cl,46                                           ;column
  2269 000002B3 B50D                                            mov     ch,13                                           ;row
  2270 000002B5 E8EE0C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2271                                  ;
  2272                                  ;       Display the CS register lable and value
  2273                                  ;
  2274 000002BA B12A                                            mov     cl,42                                           ;column
  2275 000002BC B50E                                            mov     ch,14                                           ;row
  2276 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2277 000002C3 E801100000                                      call    SetConsoleString                                ;draw label
  2278 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2279 000002CA 668B4538                                        mov     ax,[ebp+56]                                     ;CS
  2280 000002CE B12E                                            mov     cl,46                                           ;column
  2281 000002D0 B50E                                            mov     ch,14                                           ;row
  2282 000002D2 E8D10C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2283                                  ;
  2284                                  ;       Display the EFLAGS register label and value
  2285                                  ;
  2286 000002D7 B133                                            mov     cl,51                                           ;column
  2287 000002D9 B50B                                            mov     ch,11                                           ;row
  2288 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2289 000002E0 E8E40F0000                                      call    SetConsoleString                                ;draw label
  2290 000002E5 8B453C                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2291 000002E8 B137                                            mov     cl,55                                           ;column
  2292 000002EA B50B                                            mov     ch,11                                           ;row
  2293 000002EC E8A70C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2294                                  ;
  2295                                  ;       Display the ESP register label and value
  2296                                  ;
  2297 000002F1 B133                                            mov     cl,51                                           ;column
  2298 000002F3 B50D                                            mov     ch,13                                           ;row
  2299 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2300 000002FA E8CA0F0000                                      call    SetConsoleString                                ;draw label
  2301 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2302 00000302 B137                                            mov     cl,55                                           ;column
  2303 00000304 B50D                                            mov     ch,13                                           ;row
  2304 00000306 E88D0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2305                                  ;
  2306                                  ;       Display the EIP register label and value
  2307                                  ;
  2308 0000030B B133                                            mov     cl,51                                           ;column
  2309 0000030D B50E                                            mov     ch,14                                           ;row
  2310 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2311 00000314 E8B00F0000                                      call    SetConsoleString                                ;draw label
  2312 00000319 8B4534                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2313 0000031C B137                                            mov     cl,55                                           ;column
  2314 0000031E B50E                                            mov     ch,14                                           ;row
  2315 00000320 E8730C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2316                                  ;
  2317                                  ;       Halt and loop until reset
  2318                                  ;
  2319 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2320 00000326 F4                                              hlt                                                     ;halt processor
  2321 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2322                                  ;-----------------------------------------------------------------------------------------------------------------------
  2323                                  ;
  2324                                  ;       Processor Interrupt Name Strings
  2325                                  ;
  2326                                  ;-----------------------------------------------------------------------------------------------------------------------
  2327 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2327 00000332 6279207A65726F00   
  2328 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2328 00000343 657000             
  2329 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2329 0000034F 626C6520696E746572-
  2329 00000358 7275707400         
  2330 0000035D 427265616B00            czIntBreak              db      "Break",0
  2331 00000363 496E746F00              czIntInto               db      "Into",0
  2332 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2333 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2333 00000378 74696F6E20436F6465-
  2333 00000381 00                 
  2334 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2334 0000038B 6573736F7200       
  2335 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2335 0000039A 756C7400           
  2336 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2337 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2337 000003AF 537461746520536567-
  2337 000003B8 6D656E7400         
  2338 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2338 000003C6 6E7400             
  2339 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2339 000003D2 697400             
  2340 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2340 000003DE 726F74656374696F6E-
  2340 000003E7 204661756C7400     
  2341 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2341 000003F7 6F722043616C63756C-
  2341 00000400 6174696F6E00       
  2342 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2343                                  ;-----------------------------------------------------------------------------------------------------------------------
  2344                                  ;
  2345                                  ;       Processor Interrupt Handling Strings
  2346                                  ;
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2348 00000418 6C65642070726F6365-
  2348 00000421 73736F7220696E7465-
  2348 0000042A 727275707420686173-
  2348 00000433 206F63637572726564-
  2348 0000043C 3A00               
  2349 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2349 00000447 202300             
  2350 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2350 00000453 206174207468652074-
  2350 0000045C 696D65206F66207468-
  2350 00000465 6520696E7465727275-
  2350 0000046E 70743A00           
  2351 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2352 00000477 4543583A00              czIntECX                db      "ECX:",0
  2353 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2354 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2355 00000486 4553493A00              czIntESI                db      "ESI:",0
  2356 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2357 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2358 00000495 4553503A00              czIntESP                db      "ESP:",0
  2359 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2360 0000049F 2045533A00              czIntES                 db      " ES:",0
  2361 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2362 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2363 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2364 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2365                                  ;-----------------------------------------------------------------------------------------------------------------------
  2366                                  ;
  2367                                  ;       Routine:        DrawTextDialogBox
  2368                                  ;
  2369                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2370                                  ;
  2371                                  ;       In:             CL      upper left column (0-79)
  2372                                  ;                       CH      upper left row (0-24)
  2373                                  ;                       DL      column width, excluding border
  2374                                  ;                       DH      row height, excluding border
  2375                                  ;                       BH      color attribute
  2376                                  ;
  2377                                  ;-----------------------------------------------------------------------------------------------------------------------
  2378 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2379 000004B9 56                                              push    esi                                             ;
  2380 000004BA 57                                              push    edi                                             ;
  2381 000004BB 06                                              push    es                                              ;
  2382 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2383 000004BE 07                                              pop     es                                              ;... into ES
  2384                                  ;
  2385                                  ;       Compute target display offset
  2386                                  ;
  2387 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2388 000004C1 88E8                                            mov     al,ch                                           ;row
  2389 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2390 000004C5 F6E4                                            mul     ah                                              ;row offset
  2391 000004C7 00C8                                            add     al,cl                                           ;add column
  2392 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2393 000004CC 00C8                                            add     al,cl                                           ;add column
  2394 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2395 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2396                                  ;
  2397                                  ;       Display top border row
  2398                                  ;
  2399 000004D3 57                                              push    edi                                             ;save target row offset
  2400 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2401 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2402 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2403 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2404 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2405 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2406 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2407 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2408 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2409 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2410 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2411                                  ;
  2412                                  ;       Display dialog box body rows
  2413                                  ;
  2414 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2415 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2416 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2417 000004F3 57                                              push    edi                                             ;save target row offset
  2418 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2419 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2420 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2421 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2422 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2423 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2424 00000500 F366AB                                          rep     stosw                                           ;display row
  2425 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2426 00000505 66AB                                            stosw                                                   ;display character and attribute
  2427 00000507 5F                                              pop     edi                                             ;restore target row offset
  2428 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2429 0000050E 59                                              pop     ecx                                             ;remaining rows
  2430 0000050F E2E1                                            loop    .10                                             ;next row
  2431                                  ;
  2432                                  ;       Display bottom border row
  2433                                  ;
  2434 00000511 57                                              push    edi                                             ;save target row offset
  2435 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2436 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2437 00000516 66AB                                            stosw                                                   ;display character and attribute
  2438 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2439 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2440 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2441 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2442 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2443 00000523 66AB                                            stosw                                                   ;display character and attribute
  2444 00000525 5F                                              pop     edi                                             ;restore target row offset
  2445 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2446                                  ;
  2447                                  ;       Restore and return
  2448                                  ;
  2449 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2450 0000052D 5F                                              pop     edi                                             ;
  2451 0000052E 5E                                              pop     esi                                             ;
  2452 0000052F 59                                              pop     ecx                                             ;
  2453 00000530 C3                                              ret                                                     ;return
  2454                                  ;=======================================================================================================================
  2455                                  ;
  2456                                  ;       Hardware Device Interupts
  2457                                  ;
  2458                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2459                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2460                                  ;       (BX=2028h).
  2461                                  ;
  2462                                  ;=======================================================================================================================
  2463                                  ;-----------------------------------------------------------------------------------------------------------------------
  2464                                  ;
  2465                                  ;       IRQ0    Clock Tick Interrupt
  2466                                  ;
  2467                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2468                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2469                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2470                                  ;
  2471                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2472                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2473                                  ;
  2474                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2475                                  ;       zero, the floppy disk motors are turned off.
  2476                                  ;
  2477                                  ;-----------------------------------------------------------------------------------------------------------------------
  2478                                                          menter  clocktick                                       ;clock tick interrupt
  2478                              <1> ?%1 equ ($-$$)
  2479 00000531 50                                              push    eax                                             ;save non-volatile regs
  2480 00000532 52                                              push    edx                                             ;
  2481 00000533 1E                                              push    ds                                              ;
  2482                                  ;
  2483                                  ;       Update the clock tick count and the elapsed days as needed.
  2484                                  ;
  2485 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2486 00000536 1F                                              pop     ds                                              ;... into data segment register
  2487 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2488 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2489 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2490 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2491 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2492 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2493 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2494                                  ;
  2495                                  ;       Decrement floppy disk motor timeout.
  2496                                  ;
  2497 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2498 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2499 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2500 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2501                                  ;
  2502                                  ;       Turn off the floppy disk motor if appropriate.
  2503                                  ;
  2504 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2505 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2506 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2507 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2508 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2509 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2510 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2511 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2512 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2513 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2514 00000577 EE                                              out     dx,al                                           ;turn motor off
  2515                                  ;
  2516                                  ;       Signal the end of the hardware interrupt.
  2517                                  ;
  2518 00000578 E8B10D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2519                                  ;
  2520                                  ;       Restore and return.
  2521                                  ;
  2522 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2523 0000057E 5A                                              pop     edx                                             ;
  2524 0000057F 58                                              pop     eax                                             ;
  2525 00000580 CF                                              iretd                                                   ;return
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                  ;
  2528                                  ;       IRQ1    Keyboard Interrupt
  2529                                  ;
  2530                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2531                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2532                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2533                                  ;       ALL modified registers upon return.
  2534                                  ;
  2535                                  ;-----------------------------------------------------------------------------------------------------------------------
  2536                                                          menter  keyboard                                        ;keyboard interrrupt
  2536                              <1> ?%1 equ ($-$$)
  2537 00000581 50                                              push    eax                                             ;save non-volatile regs
  2538 00000582 53                                              push    ebx                                             ;
  2539 00000583 51                                              push    ecx                                             ;
  2540 00000584 56                                              push    esi                                             ;
  2541 00000585 1E                                              push    ds                                              ;
  2542 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2543 00000588 1F                                              pop     ds                                              ;... into data segment register
  2544 00000589 30C0                                            xor     al,al                                           ;zero
  2545 0000058B A219080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2546 00000590 A21A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2547 00000595 A21B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2548 0000059A A21C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2549 0000059F A21D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2550 000005A4 A21E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2551 000005A9 B020                                            mov     al,' '                                          ;space
  2552 000005AB A21F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2553 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2554 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2555 000005B4 200518080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2556 000005BA 8A1D16080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2557 000005C0 8A3D17080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2558 000005C6 E8180E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2559 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2560 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2561 000005D3 A219080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2562 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2563 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2564 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2565 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2566 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2567 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2568 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2569 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2570 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2571 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2572 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2573 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2574 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2575 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2576 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2577 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2578 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2579 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2580 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2581 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2582 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2583 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2584 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2585 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2586 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2587 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2588 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2589 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2590 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2591 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2592 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2593 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2594 00000654 E88A0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2595 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2596 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2597 00000661 A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2598 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2599 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2600 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2601 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2602 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2603 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2604 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2605 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2606 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2607 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2608 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2609 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2610 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2611 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2612 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2613 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2614 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2615 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2616 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2617 0000069C E8420D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2618 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2619 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2620 000006A9 A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2621 000006AE E8300D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2622 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2623 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2624 000006BB A21C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2625 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2626 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2627 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2628 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2629 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2630 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2631 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2632 000006D1 E8DE0C0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2633 000006D6 881D16080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2634 000006DC 883D17080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2635 000006E2 E829090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2636 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2637 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2638 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2639 000006F1 E8ED0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2640 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2641 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2642 000006FE A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2643 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2644 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2645 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2646 0000070E E8D00C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2647 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2648 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2649 0000071B A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2650 00000720 E8BE0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2651 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2652 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2653 0000072D A21C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2654 00000732 E8AC0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2655 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2656 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2657 0000073F A21D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2658 00000744 E89A0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2659 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2660 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2661 0000074D A21E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2662 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2663 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2664 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2665 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2666 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2667 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2668 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2669 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2670 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2671 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2672 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2673 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2674 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2675 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2676 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2677 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2678 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2679 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2680 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2681 00000787 A21F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2682 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2683 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2684 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2685 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2686 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2687 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2688 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2689 000007A4 50                                              push    eax                                             ;save codes
  2690 000007A5 E87A0A0000                                      call    PutMessage                                      ;put message to console
  2691 000007AA 58                                              pop     eax                                             ;restore codes
  2692 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2693 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2694 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2695 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2696 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2697 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2698 000007BD E8620A0000                                      call    PutMessage                                      ;put message to console
  2699 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2700 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2701 000007C6 080518080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2702 000007CC E8E7070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2703 000007D1 E8580B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2704 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2705 000007D7 5E                                              pop     esi                                             ;
  2706 000007D8 59                                              pop     ecx                                             ;
  2707 000007D9 5B                                              pop     ebx                                             ;
  2708 000007DA 58                                              pop     eax                                             ;
  2709 000007DB CF                                              iretd                                                   ;return
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;       Scan-Code to ASCII Translation Tables
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2714 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2715 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2716 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2717 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2718 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2719 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2720 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2721 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2722 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2723 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2724 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2725 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2726 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2727 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2728 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2729 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2730 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2731 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2732 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2733 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2734 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2735 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2736 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2737 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2738 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2739 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2740 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2741 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2742 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2743 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2744 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                  ;
  2747                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2748                                  ;
  2749                                  ;-----------------------------------------------------------------------------------------------------------------------
  2750                                                          menter  iochannel                                       ;secondary 8259A cascade
  2750                              <1> ?%1 equ ($-$$)
  2751 000008DC 50                                              push    eax                                             ;save modified regs
  2752 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                  ;
  2755                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2756                                  ;
  2757                                  ;-----------------------------------------------------------------------------------------------------------------------
  2758                                                          menter  com2                                            ;serial port 2 interrupt
  2758                              <1> ?%1 equ ($-$$)
  2759 000008DF 50                                              push    eax                                             ;save modified regs
  2760 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2764                                  ;
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                                          menter  com1                                            ;serial port 1 interrupt
  2766                              <1> ?%1 equ ($-$$)
  2767 000008E2 50                                              push    eax                                             ;save modified regs
  2768 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                  ;
  2771                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2772                                  ;
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2774                              <1> ?%1 equ ($-$$)
  2775 000008E5 50                                              push    eax                                             ;save modified regs
  2776 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                  ;
  2779                                  ;       IRQ6    Diskette Hardware Interrupt
  2780                                  ;
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                                          menter  diskette                                        ;floppy disk interrupt
  2782                              <1> ?%1 equ ($-$$)
  2783 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2784 000008E9 1E                                              push    ds                                              ;
  2785 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2786 000008EC 1F                                              pop     ds                                              ;... into DS register
  2787 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2788 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2789 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2790 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2791 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793                                  ;
  2794                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2795                                  ;
  2796                                  ;-----------------------------------------------------------------------------------------------------------------------
  2797                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2797                              <1> ?%1 equ ($-$$)
  2798 000008FC 50                                              push    eax                                             ;save modified regs
  2799 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2800                                  ;-----------------------------------------------------------------------------------------------------------------------
  2801                                  ;
  2802                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2803                                  ;
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                                          menter  rtclock                                         ;real-time clock interrupt
  2805                              <1> ?%1 equ ($-$$)
  2806 000008FF 50                                              push    eax                                             ;save modified regs
  2807 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2808                                  ;-----------------------------------------------------------------------------------------------------------------------
  2809                                  ;
  2810                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2811                                  ;
  2812                                  ;-----------------------------------------------------------------------------------------------------------------------
  2813                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2813                              <1> ?%1 equ ($-$$)
  2814 00000902 50                                              push    eax                                             ;save modified regs
  2815 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  ;
  2818                                  ;       IRQ10   Reserved Hardware Interrupt
  2819                                  ;
  2820                                  ;-----------------------------------------------------------------------------------------------------------------------
  2821                                                          menter  irq10                                           ;reserved
  2821                              <1> ?%1 equ ($-$$)
  2822 00000905 50                                              push    eax                                             ;save modified regs
  2823 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  ;
  2826                                  ;       IRQ11   Reserved Hardware Interrupt
  2827                                  ;
  2828                                  ;-----------------------------------------------------------------------------------------------------------------------
  2829                                                          menter  irq11                                           ;reserved
  2829                              <1> ?%1 equ ($-$$)
  2830 00000908 50                                              push    eax                                             ;save modified regs
  2831 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833                                  ;
  2834                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2835                                  ;
  2836                                  ;-----------------------------------------------------------------------------------------------------------------------
  2837                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2837                              <1> ?%1 equ ($-$$)
  2838 0000090B 50                                              push    eax                                             ;save modified regs
  2839 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2843                                  ;
  2844                                  ;-----------------------------------------------------------------------------------------------------------------------
  2845                                                          menter  coprocessor                                     ;coprocessor interrupt
  2845                              <1> ?%1 equ ($-$$)
  2846 0000090E 50                                              push    eax                                             ;save modified regs
  2847 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849                                  ;
  2850                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2851                                  ;
  2852                                  ;-----------------------------------------------------------------------------------------------------------------------
  2853                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2853                              <1> ?%1 equ ($-$$)
  2854 00000911 50                                              push    eax                                             ;save modified regs
  2855 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                  ;
  2858                                  ;       IRQ15   Reserved Hardware Interrupt
  2859                                  ;
  2860                                  ;-----------------------------------------------------------------------------------------------------------------------
  2861                                                          menter  irq15                                           ;reserved
  2861                              <1> ?%1 equ ($-$$)
  2862 00000914 50                                              push    eax                                             ;save modified regs
  2863 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                  ;
  2866                                  ;       Exit from hardware interrupt
  2867                                  ;
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869 00000917 E8180A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2870 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2871 0000091E E80B0A0000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2872 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2873 00000924 CF                                              iretd                                                   ;return from interrupt
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  ;
  2876                                  ;       INT 30h Operating System Software Service Interrupt
  2877                                  ;
  2878                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2879                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2880                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2881                                  ;       the entry address of the specific function from a table.
  2882                                  ;
  2883                                  ;-----------------------------------------------------------------------------------------------------------------------
  2884                                                          menter  svc
  2884                              <1> ?%1 equ ($-$$)
  2885 00000925 3C1D                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2886 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2887 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2888 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2889 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2890 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;       Service Request Table
  2894                                  ;
  2895                                  ;
  2896                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2897                                  ;
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2899                              <1> tsvc :
  2899                              <1> e%1 equ ($-tsvc)/4
  2899 00000937 [D00B0000]          <1>  dd %1
  2900                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2900                              <1> e%1 equ ($-tsvc)/4
  2900 0000093B [4C120000]          <1>  dd %1
  2901                                                          tsvce   CompareMemory                                   ;compare memory
  2901                              <1> e%1 equ ($-tsvc)/4
  2901 0000093F [2B0E0000]          <1>  dd %1
  2902                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2902                              <1> e%1 equ ($-tsvc)/4
  2902 00000943 [DA100000]          <1>  dd %1
  2903                                                          tsvce   FreeMemory                                      ;free memory block
  2903                              <1> e%1 equ ($-tsvc)/4
  2903 00000947 [EE0C0000]          <1>  dd %1
  2904                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2904                              <1> e%1 equ ($-tsvc)/4
  2904 0000094B [D9120000]          <1>  dd %1
  2905                                                          tsvce   GetConsoleString                                ;get string input
  2905                              <1> e%1 equ ($-tsvc)/4
  2905 0000094F [8C0E0000]          <1>  dd %1
  2906                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2906                              <1> e%1 equ ($-tsvc)/4
  2906 00000953 [EA120000]          <1>  dd %1
  2907                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2907                              <1> e%1 equ ($-tsvc)/4
  2907 00000957 [FB120000]          <1>  dd %1
  2908                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2908                              <1> e%1 equ ($-tsvc)/4
  2908 0000095B [0D110000]          <1>  dd %1
  2909                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2909                              <1> e%1 equ ($-tsvc)/4
  2909 0000095F [B9090000]          <1>  dd %1
  2910                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2910                              <1> e%1 equ ($-tsvc)/4
  2910 00000963 [04130000]          <1>  dd %1
  2911                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2911                              <1> e%1 equ ($-tsvc)/4
  2911 00000967 [AA100000]          <1>  dd %1
  2912                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2912                              <1> e%1 equ ($-tsvc)/4
  2912 0000096B [D4090000]          <1>  dd %1
  2913                                                          tsvce   PutDayString                                    ;put DD string
  2913                              <1> e%1 equ ($-tsvc)/4
  2913 0000096F [150A0000]          <1>  dd %1
  2914                                                          tsvce   PutHourString                                   ;put hh string
  2914                              <1> e%1 equ ($-tsvc)/4
  2914 00000973 [230A0000]          <1>  dd %1
  2915                                                          tsvce   PutMinuteString                                 ;put mm string
  2915                              <1> e%1 equ ($-tsvc)/4
  2915 00000977 [310A0000]          <1>  dd %1
  2916                                                          tsvce   PutMonthString                                  ;put MM string
  2916                              <1> e%1 equ ($-tsvc)/4
  2916 0000097B [3F0A0000]          <1>  dd %1
  2917                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2917                              <1> e%1 equ ($-tsvc)/4
  2917 0000097F [4D0A0000]          <1>  dd %1
  2918                                                          tsvce   PutSecondString                                 ;put ss string
  2918                              <1> e%1 equ ($-tsvc)/4
  2918 00000983 [710A0000]          <1>  dd %1
  2919                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2919                              <1> e%1 equ ($-tsvc)/4
  2919 00000987 [7E0A0000]          <1>  dd %1
  2920                                                          tsvce   PutWeekdayString                                ;put weekday string
  2920                              <1> e%1 equ ($-tsvc)/4
  2920 0000098B [B30A0000]          <1>  dd %1
  2921                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2921                              <1> e%1 equ ($-tsvc)/4
  2921 0000098F [C10A0000]          <1>  dd %1
  2922                                                          tsvce   PutYearString                                   ;put YYYY string
  2922                              <1> e%1 equ ($-tsvc)/4
  2922 00000993 [E40A0000]          <1>  dd %1
  2923                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2923                              <1> e%1 equ ($-tsvc)/4
  2923 00000997 [3A130000]          <1>  dd %1
  2924                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2924                              <1> e%1 equ ($-tsvc)/4
  2924 0000099B [A5130000]          <1>  dd %1
  2925                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2925                              <1> e%1 equ ($-tsvc)/4
  2925 0000099F [2B110000]          <1>  dd %1
  2926                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2926                              <1> e%1 equ ($-tsvc)/4
  2926 000009A3 [CF110000]          <1>  dd %1
  2927                                                          tsvce   UpperCaseString                                 ;upper-case string
  2927                              <1> e%1 equ ($-tsvc)/4
  2927 000009A7 [480E0000]          <1>  dd %1
  2928                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2929                                  ;-----------------------------------------------------------------------------------------------------------------------
  2930                                  ;
  2931                                  ;       Service Request Macros
  2932                                  ;
  2933                                  ;       These macros provide positional parameterization of service request calls.
  2934                                  ;
  2935                                  ;-----------------------------------------------------------------------------------------------------------------------
  2936                                  %macro                  allocateMemory 1
  2937                                                          mov     ecx,%1                                          ;bytes to allocate
  2938                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2939                                                          int     _svc                                            ;invoke OS service
  2940                                  %endmacro
  2941                                  %macro                  clearConsoleScreen 0
  2942                                                          mov     al,eClearConsoleScreen                          ;function code
  2943                                                          int     _svc                                            ;invoke OS service
  2944                                  %endmacro
  2945                                  %macro                  compareMemory 0
  2946                                                          mov     al,eCompareMemory                               ;function code
  2947                                                          int     _svc                                            ;invoke OS service
  2948                                  %endmacro
  2949                                  %macro                  decimalToUnsigned 0
  2950                                                          mov     al,eDecimalToUnsigned                           ;function code
  2951                                                          int     _svc                                            ;invoke OS servie
  2952                                  %endmacro
  2953                                  %macro                  freeMemory 1
  2954                                                          mov     edx,%1                                          ;address of memory block
  2955                                                          mov     al,eFreeMemory                                  ;function code
  2956                                                          int     _svc                                            ;invoke OS service
  2957                                  %endmacro
  2958                                  %macro                  getBaseMemSize 0
  2959                                                          mov     al,eGetBaseMemSize                              ;function code
  2960                                                          int     _svc                                            ;invoke OS service
  2961                                  %endmacro
  2962                                  %macro                  getConsoleString 4
  2963                                                          mov     edx,%1                                          ;buffer address
  2964                                                          mov     ecx,%2                                          ;max characters
  2965                                                          mov     bh,%3                                           ;echo indicator
  2966                                                          mov     bl,%4                                           ;terminator
  2967                                                          mov     al,eGetConsoleString                            ;function code
  2968                                                          int     _svc                                            ;invoke OS service
  2969                                  %endmacro
  2970                                  %macro                  getExtendedMemSize 0
  2971                                                          mov     al,eGetExtendedMemSize                          ;function code
  2972                                                          int     _svc                                            ;invoke OS service
  2973                                  %endmacro
  2974                                  %macro                  getROMMemSize 0
  2975                                                          mov     al,eGetROMMemSize                               ;function code
  2976                                                          int     _svc                                            ;invoke OS service
  2977                                  %endmacro
  2978                                  %macro                  hexadecimalToUnsigned 0
  2979                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2980                                                          int     _svc                                            ;invoke OS service
  2981                                  %endmacro
  2982                                  %macro                  isLeapYear 1
  2983                                                          mov     ebx,%1                                          ;DATETIME addr
  2984                                                          mov     al,eIsLeapYear                                  ;function code
  2985                                                          int     _svc                                            ;invoke OS service
  2986                                  %endmacro
  2987                                  %macro                  placeCursor 0
  2988                                                          mov     al,ePlaceCursor                                 ;function code
  2989                                                          int     _svc                                            ;invoke OS service
  2990                                  %endmacro
  2991                                  %macro                  putConsoleString 1
  2992                                                          mov     edx,%1                                          ;string address
  2993                                                          mov     al,ePutConsoleString                            ;function code
  2994                                                          int     _svc                                            ;invoke OS service
  2995                                  %endmacro
  2996                                  %macro                  putDateString 0
  2997                                                          mov     al,ePutDateString                               ;function code
  2998                                                          int     _svc                                            ;invoke OS service
  2999                                  %endmacro
  3000                                  %macro                  putDateString 2
  3001                                                          mov     ebx,%1                                          ;DATETIME addr
  3002                                                          mov     edx,%2                                          ;output buffer addr
  3003                                                          mov     al,ePutDateString                               ;function code
  3004                                                          int     _svc                                            ;invoke OS service
  3005                                  %endmacro
  3006                                  %macro                  putDayString 2
  3007                                                          mov     ebx,%1                                          ;DATETIME addr
  3008                                                          mov     edx,%2                                          ;output buffer addr
  3009                                                          mov     al,ePutDayString                                ;function code
  3010                                                          int     _svc                                            ;invoke OS service
  3011                                  %endmacro
  3012                                  %macro                  putHourString 2
  3013                                                          mov     ebx,%1                                          ;DATETIME addr
  3014                                                          mov     edx,%2                                          ;output buffer addr
  3015                                                          mov     al,ePutHourString                               ;function code
  3016                                                          int     _svc                                            ;invoke OS service
  3017                                  %endmacro
  3018                                  %macro                  putMinuteString 2
  3019                                                          mov     ebx,%1                                          ;DATETIME addr
  3020                                                          mov     edx,%2                                          ;output buffer addr
  3021                                                          mov     al,ePutMinuteString                             ;function code
  3022                                                          int     _svc                                            ;invoke OS service
  3023                                  %endmacro
  3024                                  %macro                  putMonthString 2
  3025                                                          mov     ebx,%1                                          ;DATETIME addr
  3026                                                          mov     edx,%2                                          ;output buffer addr
  3027                                                          mov     al,ePutMonthString                              ;function code
  3028                                                          int     _svc                                            ;invoke OS service
  3029                                  %endmacro
  3030                                  %macro                  putMonthNameString 2
  3031                                                          mov     ebx,%1                                          ;DATETIME addr
  3032                                                          mov     edx,%2                                          ;output buffer addr
  3033                                                          mov     al,ePutMonthNameString                          ;function code
  3034                                                          int     _svc                                            ;invoke OS service
  3035                                  %endmacro
  3036                                  %macro                  putSecondString 2
  3037                                                          mov     ebx,%1                                          ;DATETIME addr
  3038                                                          mov     edx,%2                                          ;output buffer addr
  3039                                                          mov     al,ePutSecondString                             ;function code
  3040                                                          int     _svc                                            ;invoke OS service
  3041                                  %endmacro
  3042                                  %macro                  putTimeString 0
  3043                                                          mov     al,ePutTimeString                               ;function code
  3044                                                          int     _svc                                            ;invoke OS service
  3045                                  %endmacro
  3046                                  %macro                  putTimeString 2
  3047                                                          mov     ebx,%1                                          ;DATETIME addr
  3048                                                          mov     edx,%2                                          ;output buffer addr
  3049                                                          mov     al,ePutTimeString                               ;function code
  3050                                                          int     _svc                                            ;invoke OS service
  3051                                  %endmacro
  3052                                  %macro                  putWeekdayString 2
  3053                                                          mov     ebx,%1                                          ;DATETIME addr
  3054                                                          mov     edx,%2                                          ;output buffer addr
  3055                                                          mov     al,ePutWeekdayString                            ;function code
  3056                                                          int     _svc                                            ;invoke OS service
  3057                                  %endmacro
  3058                                  %macro                  putWeekdayNameString 2
  3059                                                          mov     ebx,%1                                          ;DATETIME addr
  3060                                                          mov     edx,%2                                          ;output buffer addr
  3061                                                          mov     al,ePutWeekdayNameString                        ;function code
  3062                                                          int     _svc                                            ;invoke OS service
  3063                                  %endmacro
  3064                                  %macro                  putYearString 2
  3065                                                          mov     ebx,%1                                          ;DATETIME addr
  3066                                                          mov     edx,%2                                          ;output buffer addr
  3067                                                          mov     al,ePutYearString                               ;function code
  3068                                                          int     _svc                                            ;invoke OS service
  3069                                  %endmacro
  3070                                  %macro                  readRealTimeClock 0
  3071                                                          mov     al,eReadRealTimeClock                           ;function code
  3072                                                          int     _svc                                            ;invoke OS service
  3073                                  %endmacro
  3074                                  %macro                  readRealTimeClock 1
  3075                                                          mov     ebx,%1                                          ;DATETIME addr
  3076                                                          mov     al,eReadRealTimeClock                           ;function code
  3077                                                          int     _svc                                            ;invoke OS service
  3078                                  %endmacro
  3079                                  %macro                  resetSystem 0
  3080                                                          mov     al,eResetSystem                                 ;function code
  3081                                                          int     _svc                                            ;invoke OS service
  3082                                  %endmacro
  3083                                  %macro                  unsignedToDecimalString 0
  3084                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3085                                                          int     _svc                                            ;invoke OS service
  3086                                  %endmacro
  3087                                  %macro                  unsignedToHexadecimal 0
  3088                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3089                                                          int     _svc                                            ;invoke OS service
  3090                                  %endmacro
  3091                                  %macro                  upperCaseString 0
  3092                                                          mov     al,eUpperCaseString                             ;function code
  3093                                                          int     _svc                                            ;invoke OS service
  3094                                  %endmacro
  3095                                  ;=======================================================================================================================
  3096                                  ;
  3097                                  ;       Kernel Function Library
  3098                                  ;
  3099                                  ;=======================================================================================================================
  3100                                  ;=======================================================================================================================
  3101                                  ;
  3102                                  ;       Date and Time Helper Routines
  3103                                  ;
  3104                                  ;       GetYear
  3105                                  ;       IsLeapYear
  3106                                  ;       PutDateString
  3107                                  ;       PutDayString
  3108                                  ;       PutHourString
  3109                                  ;       PutMinuteString
  3110                                  ;       PutMonthString
  3111                                  ;       PutMonthNameString
  3112                                  ;       PutSecondString
  3113                                  ;       PutTimeString
  3114                                  ;       PutWeekdayString
  3115                                  ;       PutWeekdayNameString
  3116                                  ;       PutYearString
  3117                                  ;
  3118                                  ;=======================================================================================================================
  3119                                  ;-----------------------------------------------------------------------------------------------------------------------
  3120                                  ;
  3121                                  ;       Routine:        GetYear
  3122                                  ;
  3123                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3124                                  ;
  3125                                  ;       In:             DS:EBX  DATETIME address
  3126                                  ;
  3127                                  ;       Out:            ECX     year
  3128                                  ;
  3129                                  ;-----------------------------------------------------------------------------------------------------------------------
  3130 000009AB 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3131 000009AF 6BC964                                          imul    ecx,100                                         ;century * 100
  3132 000009B2 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3133 000009B6 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3134 000009B8 C3                                              ret                                                     ;return
  3135                                  ;-----------------------------------------------------------------------------------------------------------------------
  3136                                  ;
  3137                                  ;       Routine:        IsLeapYear
  3138                                  ;
  3139                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3140                                  ;
  3141                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3142                                  ;
  3143                                  ;       Out:            ECX     0 = not a leap year
  3144                                  ;                               1 = leap year
  3145                                  ;
  3146                                  ;-----------------------------------------------------------------------------------------------------------------------
  3147 000009B9 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3148 000009BE 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3149 000009C0 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3150 000009C2 A803                                            test    al,00000011b                                    ;multiple of four?
  3151 000009C4 750D                                            jnz     .no                                             ;no, branch
  3152 000009C6 B264                                            mov     dl,100                                          ;divisor
  3153 000009C8 F6F2                                            div     dl                                              ;divide by 100
  3154 000009CA 84E4                                            test    ah,ah                                           ;multiple of 100?
  3155 000009CC 7504                                            jnz     .yes                                            ;yes, branch
  3156 000009CE A803                                            test    al,00000011b                                    ;multiple of 400?
  3157 000009D0 7501                                            jnz     .no                                             ;no, branch
  3158 000009D2 41                      .yes                    inc     ecx                                             ;indicate leap
  3159 000009D3 C3                      .no                     ret                                                     ;return
  3160                                  ;-----------------------------------------------------------------------------------------------------------------------
  3161                                  ;
  3162                                  ;       Routine:        PutDateString
  3163                                  ;
  3164                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3165                                  ;                       structure at ds:ebx.
  3166                                  ;
  3167                                  ;       In:             DS:EBX  DATETIME address
  3168                                  ;                       DS:EDX  output buffer address
  3169                                  ;
  3170                                  ;-----------------------------------------------------------------------------------------------------------------------
  3171 000009D4 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3172 000009D5 57                                              push    edi                                             ;
  3173 000009D6 06                                              push    es                                              ;
  3174 000009D7 1E                                              push    ds                                              ;store data selector ...
  3175 000009D8 07                                              pop     es                                              ;... in extra segment reg
  3176 000009D9 89D7                                            mov     edi,edx                                         ;output buffer address
  3177 000009DB B10A                                            mov     cl,10                                           ;divisor
  3178 000009DD BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3179 000009E2 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3180 000009E6 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3181 000009E8 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3182 000009EA FC                                              cld                                                     ;forward strings
  3183 000009EB AB                                              stosd                                                   ;store "mm/"nul
  3184 000009EC 4F                                              dec     edi                                             ;address of terminator
  3185 000009ED 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3186 000009F1 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3187 000009F3 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3188 000009F5 AB                                              stosd                                                   ;store "dd/"nul
  3189 000009F6 4F                                              dec     edi                                             ;address of terminator
  3190 000009F7 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3191 000009FB F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3192 000009FD 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3193 000009FF AB                                              stosd                                                   ;store "cc/"null
  3194 00000A00 4F                                              dec     edi                                             ;address of terminator
  3195 00000A01 4F                                              dec     edi                                             ;address of delimiter
  3196 00000A02 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3197 00000A06 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3198 00000A08 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3199 00000A0A AA                                              stosb                                                   ;store quotient
  3200 00000A0B 88E0                                            mov     al,ah                                           ;remainder
  3201 00000A0D AA                                              stosb                                                   ;store remainder
  3202 00000A0E 30C0                                            xor     al,al                                           ;null terminator
  3203 00000A10 AA                                              stosb                                                   ;store terminator
  3204 00000A11 07                                              pop     es                                              ;restore non-volatile regs
  3205 00000A12 5F                                              pop     edi                                             ;
  3206 00000A13 59                                              pop     ecx                                             ;
  3207 00000A14 C3                                              ret                                                     ;return
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  ;
  3210                                  ;       Routine:        PutDayString
  3211                                  ;
  3212                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3213                                  ;                       structure at ds:ebx.
  3214                                  ;
  3215                                  ;       In:             DS:EBX  DATETIME address
  3216                                  ;                       DS:EDX  output buffer address
  3217                                  ;
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219 00000A15 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3220 00000A16 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3221 00000A1A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3222 00000A1C E80A070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3223 00000A21 59                                              pop     ecx                                             ;
  3224 00000A22 C3                                              ret                                                     ;return
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  ;
  3227                                  ;       Routine:        PutHourString
  3228                                  ;
  3229                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3230                                  ;                       structure at ds:ebx.
  3231                                  ;
  3232                                  ;       In:             DS:EBX  DATETIME address
  3233                                  ;                       DS:EDX  output buffer address
  3234                                  ;
  3235                                  ;-----------------------------------------------------------------------------------------------------------------------
  3236 00000A23 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3237 00000A24 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3238 00000A28 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3239 00000A2A E8FC060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3240 00000A2F 59                                              pop     ecx                                             ;
  3241 00000A30 C3                                              ret                                                     ;return
  3242                                  ;-----------------------------------------------------------------------------------------------------------------------
  3243                                  ;
  3244                                  ;       Routine:        PutMinuteString
  3245                                  ;
  3246                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3247                                  ;                       structure at ds:ebx.
  3248                                  ;
  3249                                  ;       In:             DS:EBX  DATETIME address
  3250                                  ;                       DS:EDX  output buffer address
  3251                                  ;
  3252                                  ;-----------------------------------------------------------------------------------------------------------------------
  3253 00000A31 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3254 00000A32 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3255 00000A36 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3256 00000A38 E8EE060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3257 00000A3D 59                                              pop     ecx                                             ;
  3258 00000A3E C3                                              ret                                                     ;return
  3259                                  ;-----------------------------------------------------------------------------------------------------------------------
  3260                                  ;
  3261                                  ;       Routine:        PutMonthString
  3262                                  ;
  3263                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3264                                  ;                       structure at ds:ebx.
  3265                                  ;
  3266                                  ;       In:             DS:EBX  DATETIME address
  3267                                  ;                       DS:EDX  output buffer address
  3268                                  ;
  3269                                  ;-----------------------------------------------------------------------------------------------------------------------
  3270 00000A3F 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3271 00000A40 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3272 00000A44 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3273 00000A46 E8E0060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3274 00000A4B 59                                              pop     ecx                                             ;
  3275 00000A4C C3                                              ret                                                     ;return
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277                                  ;
  3278                                  ;       Routine:        PutMonthNameString
  3279                                  ;
  3280                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3281                                  ;                       structure at ds:ebx.
  3282                                  ;
  3283                                  ;       In:             DS:EBX  DATETIME address
  3284                                  ;                       DS:EDX  output buffer address
  3285                                  ;
  3286                                  ;-----------------------------------------------------------------------------------------------------------------------
  3287 00000A4D 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3288 00000A4E 57                                              push    edi                                             ;
  3289 00000A4F 1E                                              push    ds                                              ;
  3290 00000A50 06                                              push    es                                              ;
  3291 00000A51 1E                                              push    ds                                              ;load data selector ...
  3292 00000A52 07                                              pop     es                                              ;... into extra segment
  3293 00000A53 89D7                                            mov     edi,edx                                         ;output buffer address
  3294 00000A55 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3295 00000A59 48                                              dec     eax                                             ;month (0-11)
  3296 00000A5A C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3297 00000A5D 0E                                              push    cs                                              ;load code selector ...
  3298 00000A5E 1F                                              pop     ds                                              ;... into data segment
  3299 00000A5F 8BB0[A00B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3300 00000A65 FC                                              cld                                                     ;forward strings
  3301 00000A66 AC                      .10                     lodsb                                                   ;name character
  3302 00000A67 AA                                              stosb                                                   ;store in output buffer
  3303 00000A68 84C0                                            test    al,al                                           ;end of string?
  3304 00000A6A 75FA                                            jnz     .10                                             ;no, continue
  3305 00000A6C 07                                              pop     es                                              ;restore non-volatile regs
  3306 00000A6D 1F                                              pop     ds                                              ;
  3307 00000A6E 5F                                              pop     edi                                             ;
  3308 00000A6F 5E                                              pop     esi                                             ;
  3309 00000A70 C3                                              ret                                                     ;return
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  ;
  3312                                  ;       Routine:        PutSecondString
  3313                                  ;
  3314                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3315                                  ;                       structure at ds:ebx.
  3316                                  ;
  3317                                  ;       In:             DS:EBX  DATETIME address
  3318                                  ;                       DS:EDX  output buffer address
  3319                                  ;
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321 00000A71 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3322 00000A72 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3323 00000A75 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3324 00000A77 E8AF060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3325 00000A7C 59                                              pop     ecx                                             ;
  3326 00000A7D C3                                              ret                                                     ;return
  3327                                  ;-----------------------------------------------------------------------------------------------------------------------
  3328                                  ;
  3329                                  ;       Routine:        PutTimeString
  3330                                  ;
  3331                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3332                                  ;                       structure at ds:ebx.
  3333                                  ;
  3334                                  ;       In:             DS:EBX  DATETIME address
  3335                                  ;                       DS:EDX  output buffer address
  3336                                  ;
  3337                                  ;-----------------------------------------------------------------------------------------------------------------------
  3338 00000A7E 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3339 00000A7F 57                                              push    edi                                             ;
  3340 00000A80 06                                              push    es                                              ;
  3341 00000A81 1E                                              push    ds                                              ;store data selector ...
  3342 00000A82 07                                              pop     es                                              ;... in extra segment reg
  3343 00000A83 89D7                                            mov     edi,edx                                         ;output buffer address
  3344 00000A85 B10A                                            mov     cl,10                                           ;divisor
  3345 00000A87 BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3346 00000A8C 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3347 00000A90 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3348 00000A92 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3349 00000A94 FC                                              cld                                                     ;forward strings
  3350 00000A95 AB                                              stosd                                                   ;store "mm/"nul
  3351 00000A96 4F                                              dec     edi                                             ;address of terminator
  3352 00000A97 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3353 00000A9B F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3354 00000A9D 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3355 00000A9F AB                                              stosd                                                   ;store "dd/"nul
  3356 00000AA0 4F                                              dec     edi                                             ;address of terminator
  3357 00000AA1 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3358 00000AA4 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3359 00000AA6 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3360 00000AA8 AA                                              stosb                                                   ;store quotient
  3361 00000AA9 88E0                                            mov     al,ah                                           ;remainder
  3362 00000AAB AA                                              stosb                                                   ;store remainder
  3363 00000AAC 30C0                                            xor     al,al                                           ;null terminator
  3364 00000AAE AA                                              stosb                                                   ;store terminator
  3365 00000AAF 07                                              pop     es                                              ;restore non-volatile regs
  3366 00000AB0 5F                                              pop     edi                                             ;
  3367 00000AB1 59                                              pop     ecx                                             ;
  3368 00000AB2 C3                                              ret                                                     ;return
  3369                                  ;-----------------------------------------------------------------------------------------------------------------------
  3370                                  ;
  3371                                  ;       Routine:        PutWeekdayString
  3372                                  ;
  3373                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3374                                  ;                       structure at ds:ebx.
  3375                                  ;
  3376                                  ;       In:             DS:EBX  DATETIME address
  3377                                  ;                       DS:EDX  output buffer address
  3378                                  ;
  3379                                  ;-----------------------------------------------------------------------------------------------------------------------
  3380 00000AB3 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3381 00000AB4 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3382 00000AB8 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3383 00000ABA E86C060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3384 00000ABF 59                                              pop     ecx                                             ;
  3385 00000AC0 C3                                              ret                                                     ;return
  3386                                  ;-----------------------------------------------------------------------------------------------------------------------
  3387                                  ;
  3388                                  ;       Routine:        PutWeekdayNameString
  3389                                  ;
  3390                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3391                                  ;                       structure at ds:ebx.
  3392                                  ;
  3393                                  ;       In:             DS:EBX  DATETIME address
  3394                                  ;                       DS:EDX  output buffer address
  3395                                  ;
  3396                                  ;-----------------------------------------------------------------------------------------------------------------------
  3397 00000AC1 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3398 00000AC2 57                                              push    edi                                             ;
  3399 00000AC3 1E                                              push    ds                                              ;
  3400 00000AC4 06                                              push    es                                              ;
  3401 00000AC5 1E                                              push    ds                                              ;load data selector ...
  3402 00000AC6 07                                              pop     es                                              ;... into extra segment
  3403 00000AC7 89D7                                            mov     edi,edx                                         ;output buffer address
  3404 00000AC9 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3405 00000ACD C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3406 00000AD0 0E                                              push    cs                                              ;load code selector ...
  3407 00000AD1 1F                                              pop     ds                                              ;... into data segment
  3408 00000AD2 8BB0[840B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3409 00000AD8 FC                                              cld                                                     ;forward strings
  3410 00000AD9 AC                      .10                     lodsb                                                   ;name character
  3411 00000ADA AA                                              stosb                                                   ;store in output buffer
  3412 00000ADB 84C0                                            test    al,al                                           ;end of string?
  3413 00000ADD 75FA                                            jnz     .10                                             ;no, continue
  3414 00000ADF 07                                              pop     es                                              ;restore non-volatile regs
  3415 00000AE0 1F                                              pop     ds                                              ;
  3416 00000AE1 5F                                              pop     edi                                             ;
  3417 00000AE2 5E                                              pop     esi                                             ;
  3418 00000AE3 C3                                              ret                                                     ;return
  3419                                  ;-----------------------------------------------------------------------------------------------------------------------
  3420                                  ;
  3421                                  ;       Routine:        PutYearString
  3422                                  ;
  3423                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3424                                  ;                       structure at ds:ebx.
  3425                                  ;
  3426                                  ;       In:             DS:EBX  DATETIME address
  3427                                  ;                       DS:EDX  output buffer address
  3428                                  ;
  3429                                  ;-----------------------------------------------------------------------------------------------------------------------
  3430 00000AE4 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3431 00000AE5 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3432 00000AEA B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3433 00000AEC E83A060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3434 00000AF1 59                                              pop     ecx                                             ;restore non-volatile regs
  3435 00000AF2 C3                                              ret                                                     ;return
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  ;
  3438                                  ;       Day Names
  3439                                  ;
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441 00000AF3 53756E64617900          czSunday                db      "Sunday",0
  3442 00000AFA 4D6F6E64617900          czMonday                db      "Monday",0
  3443 00000B01 5475657364617900        czTuesday               db      "Tuesday",0
  3444 00000B09 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3444 00000B12 00                 
  3445 00000B13 546875727364617900      czThursday              db      "Thursday",0
  3446 00000B1C 46726964617900          czFriday                db      "Friday",0
  3447 00000B23 536174757264617900      czSaturday              db      "Saturday",0
  3448                                  ;-----------------------------------------------------------------------------------------------------------------------
  3449                                  ;
  3450                                  ;       Month Names
  3451                                  ;
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453 00000B2C 4A616E7561727900        czJanuary               db      "January",0
  3454 00000B34 466562727561727900      czFebruary              db      "February",0
  3455 00000B3D 4D6172636800            czMarch                 db      "March",0
  3456 00000B43 417072696C00            czApril                 db      "April",0
  3457 00000B49 4D617900                czMay                   db      "May",0
  3458 00000B4D 4A756E6500              czJune                  db      "June",0
  3459 00000B52 4A756C7900              czJuly                  db      "July",0
  3460 00000B57 41756775737400          czAugust                db      "August",0
  3461 00000B5E 53657074656D626572-     czSeptember             db      "September",0
  3461 00000B67 00                 
  3462 00000B68 4F63746F62657200        czOctober               db      "October",0
  3463 00000B70 4E6F76656D62657200      czNovember              db      "November",0
  3464 00000B79 446563656D62657200      czDecember              db      "December",0
  3465                                  ;-----------------------------------------------------------------------------------------------------------------------
  3466                                  ;
  3467                                  ;       Day Names Lookup Table
  3468                                  ;
  3469                                  ;-----------------------------------------------------------------------------------------------------------------------
  3470 00000B82 90<rept>                                        align   4
  3471                                  tDayNames               equ     $
  3472 00000B84 [F30A0000]                                      dd      czSunday
  3473 00000B88 [FA0A0000]                                      dd      czMonday
  3474 00000B8C [010B0000]                                      dd      czTuesday
  3475 00000B90 [090B0000]                                      dd      czWednesday
  3476 00000B94 [130B0000]                                      dd      czThursday
  3477 00000B98 [1C0B0000]                                      dd      czFriday
  3478 00000B9C [230B0000]                                      dd      czSaturday
  3479                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3480                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3481                                  ;-----------------------------------------------------------------------------------------------------------------------
  3482                                  ;
  3483                                  ;       Month Names Lookup Table
  3484                                  ;
  3485                                  ;-----------------------------------------------------------------------------------------------------------------------
  3486                                                          align   4
  3487                                  tMonthNames             equ     $
  3488 00000BA0 [2C0B0000]                                      dd      czJanuary
  3489 00000BA4 [340B0000]                                      dd      czFebruary
  3490 00000BA8 [3D0B0000]                                      dd      czMarch
  3491 00000BAC [430B0000]                                      dd      czApril
  3492 00000BB0 [490B0000]                                      dd      czMay
  3493 00000BB4 [4D0B0000]                                      dd      czJune
  3494 00000BB8 [520B0000]                                      dd      czJuly
  3495 00000BBC [570B0000]                                      dd      czAugust
  3496 00000BC0 [5E0B0000]                                      dd      czSeptember
  3497 00000BC4 [680B0000]                                      dd      czOctober
  3498 00000BC8 [700B0000]                                      dd      czNovember
  3499 00000BCC [790B0000]                                      dd      czDecember
  3500                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3501                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3502                                  ;=======================================================================================================================
  3503                                  ;
  3504                                  ;       Memory Helper Routines
  3505                                  ;
  3506                                  ;       AllocateMemory
  3507                                  ;       FreeMemory
  3508                                  ;
  3509                                  ;=======================================================================================================================
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  ;
  3512                                  ;       Routine:        AllocateMemory
  3513                                  ;
  3514                                  ;       Description:    This routine allocates a memory block for the given task.
  3515                                  ;
  3516                                  ;       In:             ECX     bytes of memory to allocate
  3517                                  ;
  3518                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3519                                  ;                               0       unable to allocate memory
  3520                                  ;
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522 00000BD0 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3523 00000BD1 51                                              push    ecx                                             ;
  3524 00000BD2 56                                              push    esi                                             ;
  3525 00000BD3 1E                                              push    ds                                              ;
  3526                                  ;
  3527                                  ;       Address kernel memory structures
  3528                                  ;
  3529 00000BD4 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3530 00000BD6 1F                                              pop     ds                                              ;... into data segment reg
  3531 00000BD7 BE3B090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3532                                  ;
  3533                                  ;       Set requested size to minimum block size if requested size is too small.
  3534                                  ;
  3535 00000BDC 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3536 00000BE2 7305                                            jae     .10                                             ;no, branch
  3537 00000BE4 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3538 00000BE9 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3539                                  ;
  3540                                  ;       Find the first free memory block large enough to satisfy the request.
  3541                                  ;
  3542 00000BEC 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3543 00000BEF 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3544 00000BF1 0F84F2000000                                    jz      .220                                            ;yes, branch
  3545 00000BF7 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3546 00000BFA 7605                                            jbe     .30                                             ;yes, branch
  3547 00000BFC 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3548 00000BFF EBEE                                            jmp     .20                                             ;continue
  3549                                  ;-----------------------------------------------------------------------------------------------------------------------
  3550                                  ;
  3551                                  ;       Address the previous and next free memory blocks.
  3552                                  ;
  3553 00000C01 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3554 00000C04 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3555                                  ;
  3556                                  ;       Remove the free memory block from the forward free memory block chain.
  3557                                  ;
  3558 00000C07 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3559 00000C09 7405                                            jz      .40                                             ;no, branch
  3560 00000C0B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3561 00000C0E EB03                                            jmp     .50                                             ;continue
  3562 00000C10 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3563                                  ;
  3564                                  ;       Remove the free memory block from the reverse free memory block chain.
  3565                                  ;
  3566 00000C13 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3567 00000C15 7405                                            jz      .60                                             ;no, branch
  3568 00000C17 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3569 00000C1A EB03                                            jmp     .70                                             ;continue
  3570 00000C1C 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3571                                  ;-----------------------------------------------------------------------------------------------------------------------
  3572                                  ;
  3573                                  ;       Determine if the free memory block can be split.
  3574                                  ;
  3575 00000C1F 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3576 00000C22 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3577 00000C24 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3578 00000C2A 7263                                            jb      .150                                            ;no, branch
  3579                                  ;
  3580                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3581                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3582                                  ;       of the requested memory size.
  3583                                  ;
  3584 00000C2C 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3585 00000C2F 89C2                                            mov     edx,eax                                         ;memory block address
  3586 00000C31 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3587 00000C33 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3588 00000C36 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3589                                  ;
  3590                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3591                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3592                                  ;
  3593 00000C39 E305                                            jecxz   .80                                             ;no next contig, branch
  3594 00000C3B 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3595 00000C3E EB03                                            jmp     .90                                             ;continue
  3596 00000C40 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3597                                  ;
  3598                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3599                                  ;
  3600 00000C43 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3601 00000C46 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3602 00000C49 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3603 00000C4C BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3604 00000C51 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3605 00000C53 31DB                                            xor     ebx,ebx                                         ;zero register
  3606 00000C55 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3607 00000C58 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3608                                  ;
  3609                                  ;       Find the proper location in the free block chain for the new free block
  3610                                  ;
  3611 00000C5B 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3612 00000C5E 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3613 00000C61 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3614 00000C63 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3615 00000C66 7605                                            jbe     .110                                            ;yes, branch
  3616 00000C68 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3617 00000C6B EBF4                                            jmp     .100                                            ;continue
  3618                                  ;
  3619                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3620                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3621                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3622                                  ;       block of hte next block, if there is one.
  3623                                  ;
  3624 00000C6D 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3625 00000C70 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3626 00000C73 E308                                            jecxz   .120                                            ;branch if no next block
  3627 00000C75 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3628 00000C78 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3629 00000C7B EB03                                            jmp     .130                                            ;continue
  3630 00000C7D 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3631                                  ;
  3632                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3633                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3634                                  ;       last user block pointers if necessary.
  3635                                  ;
  3636 00000C80 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3637 00000C83 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3638 00000C85 7405                                            jz      .140                                            ;no, branch
  3639 00000C87 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3640 00000C8A EB03                                            jmp     .150                                            ;continue
  3641 00000C8C 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3642                                  ;
  3643                                  ;       Update the newly allocated block's owner and signature.
  3644                                  ;
  3645 00000C8F BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3646 00000C94 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3647 00000C96 31D2                                            xor     edx,edx                                         ;zero register
  3648 00000C98 660F00CA                                        str     dx                                              ;load the task state register
  3649 00000C9C 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3650                                  ;
  3651                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3652                                  ;
  3653 00000C9F 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3654 00000CA2 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3655 00000CA4 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3656 00000CA7 721E                                            jb      .180                                            ;branch if block belongs to next task
  3657 00000CA9 7405                                            je      .170                                            ;branch if block belongs to this task
  3658 00000CAB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3659 00000CAE EBF2                                            jmp     .160                                            ;continue
  3660                                  ;
  3661                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3662                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3663                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3664                                  ;       place to insert the block.
  3665                                  ;
  3666 00000CB0 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3667 00000CB3 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3668 00000CB6 760F                                            jbe     .180                                            ;yes, branch
  3669 00000CB8 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3670 00000CBB 85C9                                            test    ecx,ecx                                         ;end of chain?
  3671 00000CBD 7408                                            jz      .180                                            ;yes, branch
  3672 00000CBF 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3673 00000CC2 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3674 00000CC5 74E9                                            je      .170                                            ;yes, continue search
  3675                                  ;
  3676                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3677                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3678                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3679                                  ;       do have a previous-block, we update that block's next-block pointer.
  3680                                  ;
  3681 00000CC7 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3682 00000CCA 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3683 00000CCD E308                                            jecxz   .190                                            ;branch if no next-task block
  3684 00000CCF 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3685 00000CD2 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3686 00000CD5 EB03                                            jmp     .200                                            ;continue
  3687 00000CD7 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3688                                  ;
  3689                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3690                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3691                                  ;       global first and/or last user-block pointers if necessary.
  3692                                  ;
  3693 00000CDA 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3694 00000CDD 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3695 00000CDF 7405                                            jz      .210                                            ;no, branch
  3696 00000CE1 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3697 00000CE4 EB03                                            jmp     .220                                            ;continue
  3698 00000CE6 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3699                                  ;
  3700                                  ;       Restore registers and return to caller.
  3701                                  ;
  3702 00000CE9 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3703 00000CEA 5E                                              pop     esi                                             ;
  3704 00000CEB 59                                              pop     ecx                                             ;
  3705 00000CEC 5B                                              pop     ebx                                             ;
  3706 00000CED C3                                              ret                                                     ;return
  3707                                  ;-----------------------------------------------------------------------------------------------------------------------
  3708                                  ;
  3709                                  ;       Routine:        FreeMemory
  3710                                  ;
  3711                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3712                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3713                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3714                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3715                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3716                                  ;
  3717                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3718                                  ;
  3719                                  ;       Out:            EAX     -1      invalid memory block
  3720                                  ;                               0       memory block freed
  3721                                  ;
  3722                                  ;-----------------------------------------------------------------------------------------------------------------------
  3723 00000CEE 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3724 00000CEF 51                                              push    ecx                                             ;
  3725 00000CF0 56                                              push    esi                                             ;
  3726 00000CF1 57                                              push    edi                                             ;
  3727 00000CF2 1E                                              push    ds                                              ;
  3728 00000CF3 06                                              push    es                                              ;
  3729                                  ;
  3730                                  ;       Address the root memory structure
  3731                                  ;
  3732 00000CF4 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3733 00000CF6 07                                              pop     es                                              ;... into extra segment reg
  3734 00000CF7 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3735 00000CF9 1F                                              pop     ds                                              ;... into data segment reg
  3736 00000CFA BE3B090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3737 00000CFF 89D7                                            mov     edi,edx                                         ;memory block address
  3738                                  ;
  3739                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3740                                  ;
  3741 00000D01 31C0                                            xor     eax,eax                                         ;indicate success
  3742 00000D03 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3743 00000D09 0F8415010000                                    je      .240                                            ;yes, branch
  3744 00000D0F 48                                              dec     eax                                             ;indicate failure
  3745 00000D10 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3746 00000D16 0F8508010000                                    jne     .240                                            ;no, branch
  3747                                  ;-----------------------------------------------------------------------------------------------------------------------
  3748                                  ;
  3749                                  ;       Unlink the USER memory block.
  3750                                  ;
  3751                                  ;-----------------------------------------------------------------------------------------------------------------------
  3752                                  ;
  3753                                  ;       Set the block signature. Reset owner.
  3754                                  ;
  3755 00000D1C C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3756 00000D22 31C0                                            xor     eax,eax                                         ;zero register
  3757 00000D24 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3758                                  ;
  3759                                  ;       Wipe user area.
  3760                                  ;
  3761 00000D27 57                                              push    edi                                             ;save block address
  3762 00000D28 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3763 00000D2B 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3764 00000D2E 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3765 00000D31 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3766 00000D33 F3AA                                            rep     stosb                                           ;clear memory
  3767 00000D35 5F                                              pop     edi                                             ;restore block address
  3768                                  ;
  3769                                  ;       Address the preceding and following USER memory blocks
  3770                                  ;
  3771 00000D36 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3772 00000D39 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3773                                  ;
  3774                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3775                                  ;       pointer to point to the USER block following this block.
  3776                                  ;
  3777 00000D3C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3778 00000D3E 7405                                            jz      .10                                             ;no, branch
  3779 00000D40 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3780 00000D43 EB03                                            jmp     .20                                             ;continue
  3781 00000D45 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3782                                  ;
  3783                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3784                                  ;       pointer to point to the USER block preceding this block.
  3785                                  ;
  3786 00000D48 E305                    .20                     jecxz   .30                                             ;branch if no next block
  3787 00000D4A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3788 00000D4D EB03                                            jmp     .40                                             ;continue
  3789 00000D4F 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3790                                  ;-----------------------------------------------------------------------------------------------------------------------
  3791                                  ;
  3792                                  ;       Merge with a previous contiguous FREE memory block.
  3793                                  ;
  3794                                  ;-----------------------------------------------------------------------------------------------------------------------
  3795                                  ;
  3796                                  ;       Address the preceding and following contiguous memory blocks.
  3797                                  ;
  3798 00000D52 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3799 00000D55 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3800                                  ;
  3801                                  ;       Verify we have a previous contiguous FREE block.
  3802                                  ;
  3803 00000D58 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3804 00000D5A 7442                                            jz      .100                                            ;no, branch
  3805 00000D5C 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3806 00000D62 753A                                            jne     .100                                            ;no, branch
  3807                                  ;
  3808                                  ;       Update adjacent block's contiguous pointers.
  3809                                  ;
  3810 00000D64 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3811 00000D67 E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3812 00000D69 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3813 00000D6C EB03                                            jmp     .60                                             ;continue
  3814 00000D6E 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3815                                  ;
  3816                                  ;       Update the size of the merged FREE block.
  3817                                  ;
  3818 00000D71 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3819 00000D74 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3820                                  ;
  3821                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3822                                  ;
  3823 00000D77 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3824 00000D7C B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3825 00000D7E F3AA                                            rep     stosb                                           ;clear memory header
  3826 00000D80 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3827                                  ;-----------------------------------------------------------------------------------------------------------------------
  3828                                  ;
  3829                                  ;       Unlink the previous contiguous FREE memory block
  3830                                  ;
  3831                                  ;-----------------------------------------------------------------------------------------------------------------------
  3832                                  ;
  3833                                  ;       Address the preceding and following USER memory blocks
  3834                                  ;
  3835 00000D82 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3836 00000D85 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3837                                  ;
  3838                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3839                                  ;       block pointer.
  3840                                  ;
  3841 00000D88 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3842 00000D8A 7405                                            jz      .70                                             ;no, branch
  3843 00000D8C 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3844 00000D8F EB03                                            jmp     .80                                             ;branch
  3845 00000D91 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3846                                  ;
  3847                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3848                                  ;       pointer.
  3849                                  ;
  3850 00000D94 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3851 00000D96 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3852 00000D99 EB03                                            jmp     .100                                            ;continue
  3853 00000D9B 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3854                                  ;-----------------------------------------------------------------------------------------------------------------------
  3855                                  ;
  3856                                  ;       Merge with a following contiguous FREE memory block.
  3857                                  ;
  3858                                  ;-----------------------------------------------------------------------------------------------------------------------
  3859                                  ;
  3860                                  ;       Verify we have a following contiguous FREE block.
  3861                                  ;
  3862 00000D9E 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3863 00000DA1 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3864 00000DA3 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3865 00000DA9 7543                                            jne     .170                                            ;no, branch
  3866                                  ;
  3867                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3868                                  ;
  3869 00000DAB 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3870 00000DAE 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3871                                  ;
  3872                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3873                                  ;
  3874 00000DB1 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3875 00000DB4 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3876 00000DB7 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3877 00000DB9 7405                                            jz      .110                                            ;no, branch
  3878 00000DBB 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3879 00000DBE EB03                                            jmp     .120                                            ;continue
  3880 00000DC0 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3881                                  ;-----------------------------------------------------------------------------------------------------------------------
  3882                                  ;
  3883                                  ;       Unlink the following contiguous FREE memory block
  3884                                  ;
  3885                                  ;-----------------------------------------------------------------------------------------------------------------------
  3886                                  ;
  3887                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3888                                  ;
  3889 00000DC3 57                      .120                    push    edi                                             ;save this block
  3890 00000DC4 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3891 00000DC6 51                                              push    ecx                                             ;save next contiguous block
  3892                                  ;
  3893                                  ;       Address the preceding and following USER memory blocks
  3894                                  ;
  3895 00000DC7 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3896 00000DCA 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3897                                  ;
  3898                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3899                                  ;       block pointer.
  3900                                  ;
  3901 00000DCD 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3902 00000DCF 7405                                            jz      .130                                            ;no, branch
  3903 00000DD1 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3904 00000DD4 EB03                                            jmp     .140                                            ;branch
  3905 00000DD6 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3906                                  ;
  3907                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3908                                  ;       pointer.
  3909                                  ;
  3910 00000DD9 E305                    .140                    jecxz   .150                                            ;branch if no next block
  3911 00000DDB 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3912 00000DDE EB03                                            jmp     .160                                            ;continue
  3913 00000DE0 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3914                                  ;
  3915                                  ;       Clear next contiguous block's header
  3916                                  ;
  3917 00000DE3 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3918 00000DE4 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3919 00000DE9 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3920 00000DEB F3AA                                            rep     stosb                                           ;clear memory header
  3921 00000DED 5F                                              pop     edi                                             ;this block's pointer
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  ;
  3924                                  ;       Insert the final FREE block back into the block chain.
  3925                                  ;
  3926                                  ;-----------------------------------------------------------------------------------------------------------------------
  3927                                  ;
  3928                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3929                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3930                                  ;       all are smaller in size.
  3931                                  ;
  3932 00000DEE 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3933 00000DF1 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3934 00000DF4 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3935 00000DF6 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3936 00000DF9 7205                                            jb      .190                                            ;yes, branch
  3937 00000DFB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3938 00000DFE EBF4                                            jmp     .180                                            ;continue
  3939                                  ;
  3940                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3941                                  ;       larger free block. Update the next block's previous block pointer.
  3942                                  ;
  3943 00000E00 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3944 00000E03 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3945 00000E06 E308                                            jecxz   .200                                            ;branch if no block found
  3946 00000E08 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3947 00000E0B 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3948 00000E0E EB03                                            jmp     .210                                            ;continue
  3949 00000E10 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3950                                  ;
  3951                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3952                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3953                                  ;       next pointer.
  3954                                  ;
  3955 00000E13 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3956 00000E16 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3957 00000E18 7405                                            jz      .220                                            ;no, branch
  3958 00000E1A 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3959 00000E1D EB03                                            jmp     .230                                            ;continue
  3960 00000E1F 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3961                                  ;
  3962                                  ;       The memory free has completed.
  3963                                  ;
  3964 00000E22 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3965                                  ;
  3966                                  ;       Restore and return.
  3967                                  ;
  3968 00000E24 07                      .240                    pop     es                                              ;restore non-volatile regs
  3969 00000E25 1F                                              pop     ds                                              ;
  3970 00000E26 5F                                              pop     edi                                             ;
  3971 00000E27 5E                                              pop     esi                                             ;
  3972 00000E28 59                                              pop     ecx                                             ;
  3973 00000E29 5B                                              pop     ebx                                             ;
  3974 00000E2A C3                                              ret                                                     ;return
  3975                                  ;=======================================================================================================================
  3976                                  ;
  3977                                  ;       String Helper Routines
  3978                                  ;
  3979                                  ;       CompareMemory
  3980                                  ;       UpperCaseString
  3981                                  ;
  3982                                  ;=======================================================================================================================
  3983                                  ;-----------------------------------------------------------------------------------------------------------------------
  3984                                  ;
  3985                                  ;       Routine:        CompareMemory
  3986                                  ;
  3987                                  ;       Description:    This routine compares two byte arrays.
  3988                                  ;
  3989                                  ;       In:             DS:EDX  first source address
  3990                                  ;                       DS:EBX  second source address
  3991                                  ;                       ECX     comparison length
  3992                                  ;
  3993                                  ;       Out:            EDX     first source address
  3994                                  ;                       EBX     second source address
  3995                                  ;                       ECX     0       array 1 = array 2
  3996                                  ;                               <0      array 1 < array 2
  3997                                  ;                               >0      array 1 > array 2
  3998                                  ;
  3999                                  ;-----------------------------------------------------------------------------------------------------------------------
  4000 00000E2B 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  4001 00000E2C 57                                              push    edi                                             ;
  4002 00000E2D 06                                              push    es                                              ;
  4003 00000E2E 1E                                              push    ds                                              ;copy DS
  4004 00000E2F 07                                              pop     es                                              ;... to ES
  4005 00000E30 89D6                                            mov     esi,edx                                         ;first source address
  4006 00000E32 89DF                                            mov     edi,ebx                                         ;second source address
  4007 00000E34 FC                                              cld                                                     ;forward strings
  4008 00000E35 F3A6                                            rep     cmpsb                                           ;compare bytes
  4009 00000E37 B000                                            mov     al,0                                            ;default result
  4010 00000E39 7406                                            jz      .10                                             ;branch if arrays equal
  4011 00000E3B B001                                            mov     al,1                                            ;positive result
  4012 00000E3D 7302                                            jnc     .10                                             ;branch if target > source
  4013 00000E3F B0FF                                            mov     al,-1                                           ;negative result
  4014 00000E41 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  4015 00000E44 07                                              pop     es                                              ;restore non-volatile regs
  4016 00000E45 5F                                              pop     edi                                             ;
  4017 00000E46 5E                                              pop     esi                                             ;
  4018 00000E47 C3                                              ret                                                     ;return
  4019                                  ;-----------------------------------------------------------------------------------------------------------------------
  4020                                  ;
  4021                                  ;       Routine:        UpperCaseString
  4022                                  ;
  4023                                  ;       Description:    This routine places all characters in the given string to upper case.
  4024                                  ;
  4025                                  ;       In:             DS:EDX  string address
  4026                                  ;
  4027                                  ;       Out:            EDX     string address
  4028                                  ;
  4029                                  ;-----------------------------------------------------------------------------------------------------------------------
  4030 00000E48 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  4031 00000E49 89D6                                            mov     esi,edx                                         ;string address
  4032 00000E4B FC                                              cld                                                     ;forward strings
  4033 00000E4C AC                      .10                     lodsb                                                   ;string character
  4034 00000E4D 84C0                                            test    al,al                                           ;null?
  4035 00000E4F 740F                                            jz      .20                                             ;yes, skip ahead
  4036 00000E51 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4037 00000E53 72F7                                            jb      .10                                             ;no, continue
  4038 00000E55 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4039 00000E57 77F3                                            ja      .10                                             ;no, continue
  4040 00000E59 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  4041 00000E5B 8846FF                                          mov     [esi-1],al                                      ;upper character
  4042 00000E5E EBEC                                            jmp     .10                                             ;continue
  4043 00000E60 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4044 00000E61 C3                                              ret                                                     ;return
  4045                                  ;=======================================================================================================================
  4046                                  ;
  4047                                  ;       Console Helper Routines
  4048                                  ;
  4049                                  ;       FirstConsoleColumn
  4050                                  ;       GetConsoleChar
  4051                                  ;       GetConsoleString
  4052                                  ;       NextConsoleColumn
  4053                                  ;       NextConsoleRow
  4054                                  ;       PreviousConsoleColumn
  4055                                  ;       PutConsoleChar
  4056                                  ;       PutConsoleHexByte
  4057                                  ;       PutConsoleHexDword
  4058                                  ;       PutConsoleHexWord
  4059                                  ;       PutConsoleOIAChar
  4060                                  ;       PutConsoleOIAShift
  4061                                  ;       PutConsoleString
  4062                                  ;       Yield
  4063                                  ;
  4064                                  ;=======================================================================================================================
  4065                                  ;-----------------------------------------------------------------------------------------------------------------------
  4066                                  ;
  4067                                  ;       Routine:        FirstConsoleColumn
  4068                                  ;
  4069                                  ;       Description:    This routine resets the console column to start of the row.
  4070                                  ;
  4071                                  ;       In:             DS      OS data selector
  4072                                  ;
  4073                                  ;-----------------------------------------------------------------------------------------------------------------------
  4074 00000E62 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  4075 00000E64 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4076 00000E69 C3                                              ret                                                     ;return
  4077                                  ;-----------------------------------------------------------------------------------------------------------------------
  4078                                  ;
  4079                                  ;       Routine:        GetConsoleChar
  4080                                  ;
  4081                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4082                                  ;
  4083                                  ;       Out:            AL      ASCII character code
  4084                                  ;                       AH      keyboard scan code
  4085                                  ;
  4086                                  ;-----------------------------------------------------------------------------------------------------------------------
  4087 00000E6A E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4088 00000E6F E87B030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  4089 00000E74 09C0                                            or      eax,eax                                         ;do we have a message?
  4090 00000E76 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  4091 00000E78 50                                              push    eax                                             ;save key codes
  4092 00000E79 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  4093 00000E7E 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4094 00000E83 58                                              pop     eax                                             ;restore key codes
  4095 00000E84 75E9                                            jne     GetConsoleChar                                  ;no, try again
  4096 00000E86 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4097 00000E8B C3                                              ret                                                     ;return
  4098                                  ;-----------------------------------------------------------------------------------------------------------------------
  4099                                  ;
  4100                                  ;       Routine:        GetConsoleString
  4101                                  ;
  4102                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4103                                  ;
  4104                                  ;       In:             DS:EDX  target buffer address
  4105                                  ;                       ECX     maximum number of characters to accept
  4106                                  ;                       BH      echo to terminal
  4107                                  ;                       BL      terminating character
  4108                                  ;
  4109                                  ;-----------------------------------------------------------------------------------------------------------------------
  4110 00000E8C 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4111 00000E8D 56                                              push    esi                                             ;
  4112 00000E8E 57                                              push    edi                                             ;
  4113 00000E8F 06                                              push    es                                              ;
  4114 00000E90 1E                                              push    ds                                              ;load data segment selector ...
  4115 00000E91 07                                              pop     es                                              ;... into extra segment register
  4116 00000E92 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4117 00000E94 51                                              push    ecx                                             ;save maximum characters
  4118 00000E95 30C0                                            xor     al,al                                           ;zero register
  4119 00000E97 FC                                              cld                                                     ;forward strings
  4120 00000E98 F3AA                                            rep     stosb                                           ;zero fill buffer
  4121 00000E9A 59                                              pop     ecx                                             ;maximum characters
  4122 00000E9B 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4123 00000E9D 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4124 00000E9F E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4125 00000EA1 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4126 00000EA6 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4127 00000EA8 7445                                            je      .50                                             ;yes, exit
  4128 00000EAA 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4129 00000EAC 7521                                            jne     .30                                             ;no, skip ahead
  4130 00000EAE 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4131 00000EB0 74EF                                            je      .20                                             ;yes, get next character
  4132 00000EB2 4F                                              dec     edi                                             ;backup target pointer
  4133 00000EB3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4134 00000EB6 41                                              inc     ecx                                             ;increment remaining chars
  4135 00000EB7 F6C701                                          test    bh,1                                            ;echo to console?
  4136 00000EBA 74E5                                            jz      .20                                             ;no, get next character
  4137 00000EBC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4138 00000EC1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4139 00000EC3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4140 00000EC8 E837040000                                      call    PlaceCursor                                     ;position the cursor
  4141 00000ECD EBD2                                            jmp     .20                                             ;get next character
  4142 00000ECF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4143 00000ED1 72CE                                            jb      .20                                             ;no, get another character
  4144 00000ED3 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4145 00000ED5 77CA                                            ja      .20                                             ;no, get another character
  4146 00000ED7 AA                                              stosb                                                   ;store character in buffer
  4147 00000ED8 F6C701                                          test    bh,1                                            ;echo to console?
  4148 00000EDB 740F                                            jz      .40                                             ;no, skip ahead
  4149 00000EDD E877000000                                      call    PutConsoleChar                                  ;write character to console
  4150 00000EE2 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4151 00000EE7 E818040000                                      call    PlaceCursor                                     ;position the cursor
  4152 00000EEC 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4153 00000EED EBB0                                            jmp     .10                                             ;next
  4154 00000EEF 30C0                    .50                     xor     al,al                                           ;null
  4155 00000EF1 AA                                              stosb                                                   ;terminate buffer
  4156 00000EF2 07                                              pop     es                                              ;restore non-volatile regs
  4157 00000EF3 5F                                              pop     edi                                             ;
  4158 00000EF4 5E                                              pop     esi                                             ;
  4159 00000EF5 59                                              pop     ecx                                             ;
  4160 00000EF6 C3                                              ret                                                     ;return
  4161                                  ;-----------------------------------------------------------------------------------------------------------------------
  4162                                  ;
  4163                                  ;       Routine:        NextConsoleColumn
  4164                                  ;
  4165                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4166                                  ;                       incremented if the end of the current row is reached.
  4167                                  ;
  4168                                  ;       In:             DS      OS data selector
  4169                                  ;
  4170                                  ;-----------------------------------------------------------------------------------------------------------------------
  4171 00000EF7 A014080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4172 00000EFC FEC0                                            inc     al                                              ;increment column
  4173 00000EFE A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4174 00000F03 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4175 00000F05 720A                                            jb      .10                                             ;no, skip ahead
  4176 00000F07 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4177 00000F0C E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4178 00000F11 C3                      .10                     ret                                                     ;return
  4179                                  ;-----------------------------------------------------------------------------------------------------------------------
  4180                                  ;
  4181                                  ;       Routine:        NextConsoleRow
  4182                                  ;
  4183                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4184                                  ;
  4185                                  ;       In:             DS      OS data selector
  4186                                  ;
  4187                                  ;-----------------------------------------------------------------------------------------------------------------------
  4188 00000F12 A015080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4189 00000F17 FEC0                                            inc     al                                              ;increment row
  4190 00000F19 A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4191 00000F1E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4192 00000F20 7211                                            jb      .10                                             ;no, skip ahead
  4193 00000F22 E860030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4194 00000F27 A015080000                                      mov     al,[wbConsoleRow]                               ;row
  4195 00000F2C FEC8                                            dec     al                                              ;decrement row
  4196 00000F2E A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4197 00000F33 C3                      .10                     ret                                                     ;return
  4198                                  ;-----------------------------------------------------------------------------------------------------------------------
  4199                                  ;
  4200                                  ;       Routine:        PreviousConsoleColumn
  4201                                  ;
  4202                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4203                                  ;                       the column is set to the last position in the row and the row is decremented.
  4204                                  ;
  4205                                  ;       In:             DS      OS data selector
  4206                                  ;
  4207                                  ;-----------------------------------------------------------------------------------------------------------------------
  4208 00000F34 A014080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4209 00000F39 08C0                                            or      al,al                                           ;start of row?
  4210 00000F3B 7514                                            jnz     .10                                             ;no, skip ahead
  4211 00000F3D 8A2515080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4212 00000F43 08E4                                            or      ah,ah                                           ;top of screen?
  4213 00000F45 7411                                            jz      .20                                             ;yes, exit with no change
  4214 00000F47 FECC                                            dec     ah                                              ;decrement row
  4215 00000F49 882515080000                                    mov     [wbConsoleRow],ah                               ;save row
  4216 00000F4F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4217 00000F51 FEC8                    .10                     dec     al                                              ;decrement column
  4218 00000F53 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4219 00000F58 C3                      .20                     ret                                                     ;return
  4220                                  ;-----------------------------------------------------------------------------------------------------------------------
  4221                                  ;
  4222                                  ;       Routine:        PutConsoleChar
  4223                                  ;
  4224                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4225                                  ;
  4226                                  ;       In:             AL      ASCII character
  4227                                  ;                       DS      OS data selector
  4228                                  ;
  4229                                  ;-----------------------------------------------------------------------------------------------------------------------
  4230 00000F59 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4231 00000F5A 06                                              push    es                                              ;
  4232 00000F5B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4233 00000F5D 07                                              pop     es                                              ;... into extra segment reg
  4234 00000F5E 8A0D14080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4235 00000F64 8A2D15080000                                    mov     ch,[wbConsoleRow]                               ;row
  4236 00000F6A E844030000                                      call    SetConsoleChar                                  ;put character at row, column
  4237 00000F6F 07                                              pop     es                                              ;restore non-volatile regs
  4238 00000F70 59                                              pop     ecx                                             ;
  4239 00000F71 C3                                              ret                                                     ;return
  4240                                  ;-----------------------------------------------------------------------------------------------------------------------
  4241                                  ;
  4242                                  ;       Routine:        PutConsoleHexByte
  4243                                  ;
  4244                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4245                                  ;
  4246                                  ;       In:             AL      byte value
  4247                                  ;                       CL      column
  4248                                  ;                       CH      row
  4249                                  ;                       DS      OS data selector
  4250                                  ;                       ES      CGA selector
  4251                                  ;
  4252                                  ;-----------------------------------------------------------------------------------------------------------------------
  4253 00000F72 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4254 00000F73 88C3                                            mov     bl,al                                           ;save byte value
  4255 00000F75 C0E804                                          shr     al,4                                            ;hi-order nybble
  4256 00000F78 0C30                                            or      al,030h                                         ;apply ASCII zone
  4257 00000F7A 3C3A                                            cmp     al,03ah                                         ;numeric?
  4258 00000F7C 7202                                            jb      .10                                             ;yes, skip ahead
  4259 00000F7E 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4260 00000F80 E82E030000              .10                     call    SetConsoleChar                                  ;display ASCII character
  4261 00000F85 88D8                                            mov     al,bl                                           ;byte value
  4262 00000F87 240F                                            and     al,0fh                                          ;lo-order nybble
  4263 00000F89 0C30                                            or      al,30h                                          ;apply ASCII zone
  4264 00000F8B 3C3A                                            cmp     al,03ah                                         ;numeric?
  4265 00000F8D 7202                                            jb      .20                                             ;yes, skip ahead
  4266 00000F8F 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4267 00000F91 E81D030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4268 00000F96 5B                                              pop     ebx                                             ;restore non-volatile regs
  4269 00000F97 C3                                              ret                                                     ;return
  4270                                  ;-----------------------------------------------------------------------------------------------------------------------
  4271                                  ;
  4272                                  ;       Routine:        PutConsoleHexDword
  4273                                  ;
  4274                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4275                                  ;
  4276                                  ;       In:             EAX     value
  4277                                  ;                       CL      column
  4278                                  ;                       CH      row
  4279                                  ;                       DS      OS data selector
  4280                                  ;                       ES      CGA selector
  4281                                  ;
  4282                                  ;-----------------------------------------------------------------------------------------------------------------------
  4283 00000F98 50                      PutConsoleHexDword      push    eax
  4284 00000F99 C1E810                                          shr     eax,16
  4285 00000F9C E807000000                                      call    PutConsoleHexWord
  4286 00000FA1 58                                              pop     eax
  4287 00000FA2 E801000000                                      call    PutConsoleHexWord
  4288 00000FA7 C3                                              ret
  4289                                  ;-----------------------------------------------------------------------------------------------------------------------
  4290                                  ;
  4291                                  ;       Routine:        PutConsoleHexWord
  4292                                  ;
  4293                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4294                                  ;
  4295                                  ;       In:             EAX     value
  4296                                  ;                       CL      column
  4297                                  ;                       CH      row
  4298                                  ;                       DS      OS data selector
  4299                                  ;                       ES      CGA selector
  4300                                  ;
  4301                                  ;-----------------------------------------------------------------------------------------------------------------------
  4302 00000FA8 50                      PutConsoleHexWord       push    eax
  4303 00000FA9 C1E808                                          shr     eax,8
  4304 00000FAC E8C1FFFFFF                                      call    PutConsoleHexByte
  4305 00000FB1 58                                              pop     eax
  4306 00000FB2 E8BBFFFFFF                                      call    PutConsoleHexByte
  4307 00000FB7 C3                                              ret
  4308                                  ;-----------------------------------------------------------------------------------------------------------------------
  4309                                  ;
  4310                                  ;       Routine:        PutConsoleOIAChar
  4311                                  ;
  4312                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4313                                  ;
  4314                                  ;       In:             DS      OS data selector
  4315                                  ;
  4316                                  ;-----------------------------------------------------------------------------------------------------------------------
  4317 00000FB8 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4318 00000FB9 51                                              push    ecx                                             ;
  4319 00000FBA 56                                              push    esi                                             ;
  4320 00000FBB 1E                                              push    ds                                              ;
  4321 00000FBC 06                                              push    es                                              ;
  4322 00000FBD 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4323 00000FBF 1F                                              pop     ds                                              ;... into data segment register
  4324 00000FC0 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4325 00000FC2 07                                              pop     es                                              ;... into extra segment register
  4326 00000FC3 BE19080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4327 00000FC8 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4328 00000FCA B300                                            mov     bl,0                                            ;starting column
  4329 00000FCC B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4330 00000FD1 51                      .10                     push    ecx                                             ;save remaining count
  4331 00000FD2 89D9                                            mov     ecx,ebx                                         ;row, column
  4332 00000FD4 AC                                              lodsb                                                   ;read scan code
  4333 00000FD5 08C0                                            or      al,al                                           ;scan code present?
  4334 00000FD7 7407                                            jz      .20                                             ;no, skip ahead
  4335 00000FD9 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4336 00000FDE EB0E                                            jmp     .30                                             ;continue
  4337 00000FE0 B020                    .20                     mov     al,' '                                          ;ASCII space
  4338 00000FE2 E8CC020000                                      call    SetConsoleChar                                  ;display space
  4339 00000FE7 B020                                            mov     al,' '                                          ;ASCII space
  4340 00000FE9 E8C5020000                                      call    SetConsoleChar                                  ;display space
  4341 00000FEE 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4342 00000FF1 59                                              pop     ecx                                             ;restore remaining
  4343 00000FF2 E2DD                                            loop    .10                                             ;next code
  4344 00000FF4 A01F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4345 00000FF9 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4346 00000FFB 720D                                            jb      .40                                             ;no, skip ahead
  4347 00000FFD 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4348 00000FFF 7709                                            ja      .40                                             ;no, skip ahead
  4349 00001001 88FD                                            mov     ch,bh                                           ;OIA row
  4350 00001003 B128                                            mov     cl,40                                           ;character display column
  4351 00001005 E8A9020000                                      call    SetConsoleChar                                  ;display ASCII character
  4352 0000100A 07                      .40                     pop     es                                              ;restore non-volatile regs
  4353 0000100B 1F                                              pop     ds                                              ;
  4354 0000100C 5E                                              pop     esi                                             ;
  4355 0000100D 59                                              pop     ecx                                             ;
  4356 0000100E 5B                                              pop     ebx                                             ;
  4357 0000100F C3                                              ret                                                     ;return
  4358                                  ;-----------------------------------------------------------------------------------------------------------------------
  4359                                  ;
  4360                                  ;       Routine:        PutConsoleOIAShift
  4361                                  ;
  4362                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4363                                  ;
  4364                                  ;       In:             BL      shift flags
  4365                                  ;                       BH      lock flags
  4366                                  ;                       DS      OS data selector
  4367                                  ;
  4368                                  ;-----------------------------------------------------------------------------------------------------------------------
  4369 00001010 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4370 00001011 06                                              push    es                                              ;
  4371 00001012 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4372 00001014 07                                              pop     es                                              ;... into ES register
  4373 00001015 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4374 00001017 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4375 00001019 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4376 0000101C 7402                                            jz      .10                                             ;no, skip ahead
  4377 0000101E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4378 00001020 B10E                    .10                     mov     cl,14                                           ;indicator column
  4379 00001022 E88C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4380 00001027 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4381 00001029 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4382 0000102C 7402                                            jz      .20                                             ;no, skip ahead
  4383 0000102E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4384 00001030 B140                    .20                     mov     cl,64                                           ;indicator column
  4385 00001032 E87C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4386 00001037 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4387 00001039 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4388 0000103C 7402                                            jz      .30                                             ;no, skip ahead
  4389 0000103E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4390 00001040 B10F                    .30                     mov     cl,15                                           ;indicator column
  4391 00001042 E86C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4392 00001047 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4393 00001049 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4394 0000104C 7402                                            jz      .40                                             ;no, skip ahead
  4395 0000104E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4396 00001050 B13F                    .40                     mov     cl,63                                           ;indicator column
  4397 00001052 E85C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4398 00001057 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4399 00001059 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4400 0000105C 7402                                            jz      .50                                             ;no, skip ahead
  4401 0000105E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4402 00001060 B110                    .50                     mov     cl,16                                           ;indicator column
  4403 00001062 E84C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4404 00001067 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4405 00001069 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4406 0000106C 7402                                            jz      .60                                             ;no, skip ahead
  4407 0000106E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4408 00001070 B13E                    .60                     mov     cl,62                                           ;indicator column
  4409 00001072 E83C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4410 00001077 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4411 00001079 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4412 0000107C 7402                                            jz      .70                                             ;no, skip ahead
  4413 0000107E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4414 00001080 B14E                    .70                     mov     cl,78                                           ;indicator column
  4415 00001082 E82C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4416 00001087 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4417 00001089 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4418 0000108C 7402                                            jz      .80                                             ;no, skip ahead
  4419 0000108E B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4420 00001090 B14D                    .80                     mov     cl,77                                           ;indicator column
  4421 00001092 E81C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4422 00001097 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4423 00001099 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4424 0000109C 7402                                            jz      .90                                             ;no, skip ahead
  4425 0000109E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4426 000010A0 B14C                    .90                     mov     cl,76                                           ;indicator column
  4427 000010A2 E80C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4428 000010A7 07                                              pop     es                                              ;restore non-volatile regs
  4429 000010A8 59                                              pop     ecx                                             ;
  4430 000010A9 C3                                              ret                                                     ;return
  4431                                  ;-----------------------------------------------------------------------------------------------------------------------
  4432                                  ;
  4433                                  ;       Routine:        PutConsoleString
  4434                                  ;
  4435                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4436                                  ;                       console position as needed.
  4437                                  ;
  4438                                  ;       In:             EDX     source address
  4439                                  ;                       DS      OS data selector
  4440                                  ;
  4441                                  ;-----------------------------------------------------------------------------------------------------------------------
  4442 000010AA 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4443 000010AB 89D6                                            mov     esi,edx                                         ;source address
  4444 000010AD FC                                              cld                                                     ;forward strings
  4445 000010AE AC                      .10                     lodsb                                                   ;ASCII character
  4446 000010AF 08C0                                            or      al,al                                           ;end of string?
  4447 000010B1 7422                                            jz      .40                                             ;yes, skip ahead
  4448 000010B3 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4449 000010B5 7507                                            jne     .20                                             ;no, skip ahead
  4450 000010B7 E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4451 000010BC EBF0                                            jmp     .10                                             ;next character
  4452 000010BE 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4453 000010C0 7507                                            jne     .30                                             ;no, skip ahead
  4454 000010C2 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4455 000010C7 EBE5                                            jmp     .10                                             ;next character
  4456 000010C9 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4457 000010CE E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4458 000010D3 EBD9                                            jmp     .10                                             ;next character
  4459 000010D5 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4460 000010D6 C3                                              ret                                                     ;return
  4461                                  ;-----------------------------------------------------------------------------------------------------------------------
  4462                                  ;
  4463                                  ;       Routine:        Yield
  4464                                  ;
  4465                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4466                                  ;
  4467                                  ;-----------------------------------------------------------------------------------------------------------------------
  4468 000010D7 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4469 000010D8 F4                                              hlt                                                     ;halt until external interrupt
  4470 000010D9 C3                                              ret                                                     ;return
  4471                                  ;=======================================================================================================================
  4472                                  ;
  4473                                  ;       Data-Type Conversion Helper Routines
  4474                                  ;
  4475                                  ;       DecimalToUnsigned
  4476                                  ;       HexadecimalToUnsigned
  4477                                  ;       UnsignedToDecimalString
  4478                                  ;       UnsignedToHexadecimal
  4479                                  ;
  4480                                  ;=======================================================================================================================
  4481                                  ;-----------------------------------------------------------------------------------------------------------------------
  4482                                  ;
  4483                                  ;       Routine:        DecimalToUnsigned
  4484                                  ;
  4485                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4486                                  ;
  4487                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4488                                  ;
  4489                                  ;       Output:         EAX     unsigned integer value
  4490                                  ;
  4491                                  ;-----------------------------------------------------------------------------------------------------------------------
  4492 000010DA 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4493 000010DB 89D6                                            mov     esi,edx                                         ;source address
  4494 000010DD 31D2                                            xor     edx,edx                                         ;zero total
  4495 000010DF AC                      .10                     lodsb                                                   ;source byte
  4496 000010E0 3C2C                                            cmp     al,','                                          ;comma?
  4497 000010E2 74FB                                            je      .10                                             ;yes, ignore
  4498 000010E4 84C0                                            test    al,al                                           ;end of string?
  4499 000010E6 7421                                            jz      .30                                             ;yes, done
  4500 000010E8 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4501 000010EA 741D                                            je      .30                                             ;yes, done
  4502 000010EC 3C30                                            cmp     al,'0'                                          ;numeral?
  4503 000010EE 7217                                            jb      .20                                             ;no, invalid string
  4504 000010F0 3C39                                            cmp     al,'9'                                          ;numeral?
  4505 000010F2 7713                                            ja      .20                                             ;no, invalid string
  4506 000010F4 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4507 000010F6 50                                              push    eax                                             ;save numeral
  4508 000010F7 D1E2                                            shl     edx,1                                           ;total * 2
  4509 000010F9 89D0                                            mov     eax,edx                                         ;total * 2
  4510 000010FB C1E202                                          shl     edx,2                                           ;total * 8
  4511 000010FE 01C2                                            add     edx,eax                                         ;total * 10
  4512 00001100 58                                              pop     eax                                             ;restore numeral
  4513 00001101 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4514 00001103 31C0                                            xor     eax,eax                                         ;zero register
  4515 00001105 EBD8                                            jmp     .10                                             ;next
  4516 00001107 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4517 00001109 89D0                    .30                     mov     eax,edx                                         ;result
  4518 0000110B 5E                                              pop     esi                                             ;restore non-volatile regs
  4519 0000110C C3                                              ret                                                     ;return
  4520                                  ;-----------------------------------------------------------------------------------------------------------------------
  4521                                  ;
  4522                                  ;       Routine:        HexadecimalToUnsigned
  4523                                  ;
  4524                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4525                                  ;
  4526                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4527                                  ;
  4528                                  ;       Output:         EAX     unsigned integer value
  4529                                  ;
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531 0000110D 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4532 0000110E 89D6                                            mov     esi,edx                                         ;source address
  4533 00001110 31D2                                            xor     edx,edx                                         ;zero register
  4534 00001112 AC                      .10                     lodsb                                                   ;source byte
  4535 00001113 84C0                                            test    al,al                                           ;end of string?
  4536 00001115 7410                                            jz      .30                                             ;yes, branch
  4537 00001117 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4538 00001119 7602                                            jna     .20                                             ;no, skip ahead
  4539 0000111B 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4540 0000111D 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  4541 00001120 C1E204                                          shl     edx,4                                           ;previous total x 16
  4542 00001123 01C2                                            add     edx,eax                                         ;add prior value x 16
  4543 00001125 EBEB                                            jmp     .10                                             ;next
  4544 00001127 89D0                    .30                     mov     eax,edx                                         ;result
  4545 00001129 5E                                              pop     esi                                             ;restore non-volatile regs
  4546 0000112A C3                                              ret                                                     ;return
  4547                                  ;-----------------------------------------------------------------------------------------------------------------------
  4548                                  ;
  4549                                  ;       Routine:        UnsignedToDecimalString
  4550                                  ;
  4551                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4552                                  ;
  4553                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4554                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4555                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4556                                  ;                       ECX     32-bit binary
  4557                                  ;                       DS:EDX  output buffer address
  4558                                  ;
  4559                                  ;-----------------------------------------------------------------------------------------------------------------------
  4560 0000112B 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4561 0000112C 51                                              push    ecx                                             ;
  4562 0000112D 57                                              push    edi                                             ;
  4563 0000112E 06                                              push    es                                              ;
  4564 0000112F 1E                                              push    ds                                              ;load data selector
  4565 00001130 07                                              pop     es                                              ;... into extra segment reg
  4566 00001131 89D7                                            mov     edi,edx                                         ;output buffer address
  4567 00001133 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4568 00001136 89CA                                            mov     edx,ecx                                         ;binary
  4569 00001138 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4570 0000113D E871000000                                      call    .30                                             ;divide and store
  4571 00001142 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4572 00001147 E855000000                                      call    .10                                             ;divide and store
  4573 0000114C B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4574 00001151 E85D000000                                      call    .30                                             ;divide and store
  4575 00001156 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4576 0000115B E853000000                                      call    .30                                             ;divide and store
  4577 00001160 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4578 00001165 E837000000                                      call    .10                                             ;divide and store
  4579 0000116A B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4580 0000116F E83F000000                                      call    .30                                             ;divide and store
  4581 00001174 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4582 00001179 E835000000                                      call    .30                                             ;divide and store
  4583 0000117E B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4584 00001183 E819000000                                      call    .10                                             ;divide and store
  4585 00001188 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4586 0000118D E821000000                                      call    .30                                             ;divide and store
  4587 00001192 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4588 00001194 E827000000                                      call    .40                                             ;store
  4589 00001199 30C0                                            xor     al,al                                           ;null terminator
  4590 0000119B AA                                              stosb
  4591 0000119C 07                                              pop     es                                              ;restore non-volatile regs
  4592 0000119D 5F                                              pop     edi                                             ;
  4593 0000119E 59                                              pop     ecx                                             ;
  4594 0000119F 5B                                              pop     ebx                                             ;
  4595 000011A0 C3                                              ret                                                     ;return
  4596 000011A1 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4597 000011A4 740D                                            jz      .30                                             ;no, branch
  4598 000011A6 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4599 000011A9 7405                                            jz      .20                                             ;no, store delim
  4600 000011AB F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4601 000011AE 7403                                            jz      .30                                             ;no, branch
  4602 000011B0 B02C                    .20                     mov     al,','                                          ;delimiter
  4603 000011B2 AA                                              stosb                                                   ;store delimiter
  4604 000011B3 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4605 000011B5 31D2                                            xor     edx,edx                                         ;zero hi-order
  4606 000011B7 F7F1                                            div     ecx                                             ;divide by power of 10
  4607 000011B9 84C0                                            test    al,al                                           ;zero?
  4608 000011BB 7407                                            jz      .50                                             ;yes, branch
  4609 000011BD 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4610 000011C0 0C30                    .40                     or      al,30h                                          ;ASCII zone
  4611 000011C2 AA                                              stosb                                                   ;store digit
  4612 000011C3 C3                                              ret                                                     ;return
  4613 000011C4 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4614 000011C7 74F7                                            jz      .40                                             ;no, store and continue
  4615 000011C9 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4616 000011CC 75F2                                            jnz     .40                                             ;yes, store and continue
  4617 000011CE C3                                              ret                                                     ;return
  4618                                  ;-----------------------------------------------------------------------------------------------------------------------
  4619                                  ;
  4620                                  ;       Routine:        UnsignedToHexadecimal
  4621                                  ;
  4622                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4623                                  ;
  4624                                  ;       Input:          DS:EDX  output buffer address
  4625                                  ;                       ECX     32-bit binary
  4626                                  ;
  4627                                  ;-----------------------------------------------------------------------------------------------------------------------
  4628 000011CF 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4629 000011D0 89D7                                            mov     edi,edx                                         ;output buffer address
  4630 000011D2 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4631 000011D4 31C9                                            xor     ecx,ecx                                         ;zero register
  4632 000011D6 B108                                            mov     cl,8                                            ;nybble count
  4633 000011D8 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4634 000011DB 88D0                                            mov     al,dl                                           ;????bbbb
  4635 000011DD 240F                                            and     al,0fh                                          ;mask out bits 4-7
  4636 000011DF 0C30                                            or      al,30h                                          ;mask in ascii zone
  4637 000011E1 3C3A                                            cmp     al,3ah                                          ;A through F?
  4638 000011E3 7202                                            jb      .20                                             ;no, skip ahead
  4639 000011E5 0407                                            add     al,7                                            ;41h through 46h
  4640 000011E7 AA                      .20                     stosb                                                   ;store hexnum
  4641 000011E8 E2EE                                            loop    .10                                             ;next nybble
  4642 000011EA 30C0                                            xor     al,al                                           ;zero reg
  4643 000011EC AA                                              stosb                                                   ;null terminate
  4644 000011ED 5F                                              pop     edi                                             ;restore non-volatile regs
  4645 000011EE C3                                              ret                                                     ;return
  4646                                  ;=======================================================================================================================
  4647                                  ;
  4648                                  ;       Message Queue Helper Routines
  4649                                  ;
  4650                                  ;       GetMessage
  4651                                  ;       PutMessage
  4652                                  ;
  4653                                  ;=======================================================================================================================
  4654                                  ;-----------------------------------------------------------------------------------------------------------------------
  4655                                  ;
  4656                                  ;       Routine:        GetMessage
  4657                                  ;
  4658                                  ;       Description:    This routine reads and removes a message from the message queue.
  4659                                  ;
  4660                                  ;       Out:            EAX     lo-order message data
  4661                                  ;                       EDX     hi-order message data
  4662                                  ;
  4663                                  ;                       CY      0 = message read
  4664                                  ;                               1 = no message to read
  4665                                  ;
  4666                                  ;-----------------------------------------------------------------------------------------------------------------------
  4667 000011EF 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4668 000011F0 51                                              push    ecx                                             ;
  4669 000011F1 1E                                              push    ds                                              ;
  4670 000011F2 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4671 000011F4 1F                                              pop     ds                                              ;... into data segment register
  4672 000011F5 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4673 000011FB 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4674 000011FD 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4675 00001200 09D0                                            or      eax,edx                                         ;is queue empty?
  4676 00001202 F9                                              stc                                                     ;assume queue is emtpy
  4677 00001203 741B                                            jz      .20                                             ;yes, skip ahead
  4678 00001205 31C9                                            xor     ecx,ecx                                         ;store zero
  4679 00001207 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4680 00001209 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4681 0000120C 83C308                                          add     ebx,8                                           ;next queue element
  4682 0000120F 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  4683 00001215 7502                                            jnz     .10                                             ;no, skip ahead
  4684 00001217 B308                                            mov     bl,8                                            ;reset to 1st entry
  4685 00001219 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4686 0000121F F8                                              clc                                                     ;indicate message read
  4687 00001220 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4688 00001221 59                                              pop     ecx                                             ;
  4689 00001222 5B                                              pop     ebx                                             ;
  4690 00001223 C3                                              ret                                                     ;return
  4691                                  ;-----------------------------------------------------------------------------------------------------------------------
  4692                                  ;
  4693                                  ;       Routine:        PutMessage
  4694                                  ;
  4695                                  ;       Description:    This routine adda a message to the message queue.
  4696                                  ;
  4697                                  ;       In:             ECX     hi-order data word
  4698                                  ;                       EDX     lo-order data word
  4699                                  ;
  4700                                  ;       Out:            CY      0 = success
  4701                                  ;                               1 = fail: queue is full
  4702                                  ;
  4703                                  ;-----------------------------------------------------------------------------------------------------------------------
  4704 00001224 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4705 00001225 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4706 00001227 1F                                              pop     ds                                              ;... into data segment register
  4707 00001228 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4708 0000122D 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4709 00001230 F9                                              stc                                                     ;assume failure
  4710 00001231 7517                                            jne     .20                                             ;yes, cannot store
  4711 00001233 8910                                            mov     [eax],edx                                       ;store lo-order data
  4712 00001235 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4713 00001238 83C008                                          add     eax,8                                           ;next queue element adr
  4714 0000123B 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  4715 00001240 7502                                            jnz     .10                                             ;no, skip ahead
  4716 00001242 B008                                            mov     al,8                                            ;reset to top of queue
  4717 00001244 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4718 00001249 F8                                              clc                                                     ;indicate success
  4719 0000124A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4720 0000124B C3                                              ret                                                     ;return
  4721                                  ;=======================================================================================================================
  4722                                  ;
  4723                                  ;       Memory-Mapped Video Routines
  4724                                  ;
  4725                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4726                                  ;
  4727                                  ;       ClearConsoleScreen
  4728                                  ;       ScrollConsoleRow
  4729                                  ;       SetConsoleChar
  4730                                  ;       SetConsoleString
  4731                                  ;
  4732                                  ;=======================================================================================================================
  4733                                  ;-----------------------------------------------------------------------------------------------------------------------
  4734                                  ;
  4735                                  ;       Routine:        ClearConsoleScreen
  4736                                  ;
  4737                                  ;       Description:    This routine clears the console (CGA) screen.
  4738                                  ;
  4739                                  ;-----------------------------------------------------------------------------------------------------------------------
  4740 0000124C 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4741 0000124D 57                                              push    edi                                             ;
  4742 0000124E 1E                                              push    ds                                              ;
  4743 0000124F 06                                              push    es                                              ;
  4744 00001250 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4745 00001252 1F                                              pop     ds                                              ;... into DS register
  4746 00001253 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4747 00001255 07                                              pop     es                                              ;... into ES register
  4748 00001256 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4749 0000125B B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4750 00001260 31FF                                            xor     edi,edi                                         ;target offset
  4751 00001262 FC                                              cld                                                     ;forward strings
  4752 00001263 F3AB                                            rep     stosd                                           ;reset screen body
  4753 00001265 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4754 0000126A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4755 0000126F F3AB                                            rep     stosd                                           ;reset OIA line
  4756 00001271 30C0                                            xor     al,al                                           ;zero register
  4757 00001273 A215080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4758 00001278 A214080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4759 0000127D E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4760 00001282 07                                              pop     es                                              ;restore non-volatile regs
  4761 00001283 1F                                              pop     ds                                              ;
  4762 00001284 5F                                              pop     edi                                             ;
  4763 00001285 59                                              pop     ecx                                             ;
  4764 00001286 C3                                              ret                                                     ;return
  4765                                  ;-----------------------------------------------------------------------------------------------------------------------
  4766                                  ;
  4767                                  ;       Routine:        ScrollConsoleRow
  4768                                  ;
  4769                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4770                                  ;
  4771                                  ;-----------------------------------------------------------------------------------------------------------------------
  4772 00001287 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4773 00001288 56                                              push    esi                                             ;
  4774 00001289 57                                              push    edi                                             ;
  4775 0000128A 1E                                              push    ds                                              ;
  4776 0000128B 06                                              push    es                                              ;
  4777 0000128C 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4778 0000128E 1F                                              pop     ds                                              ;... into DS
  4779 0000128F 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4780 00001291 07                                              pop     es                                              ;... into ES
  4781 00001292 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4782 00001297 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4783 0000129C 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4784 0000129E FC                                              cld                                                     ;forward strings
  4785 0000129F F3A5                                            rep     movsd                                           ;move 24 lines up
  4786 000012A1 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4787 000012A6 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4788 000012AB F3AB                                            rep     stosd                                           ;clear bottom row
  4789 000012AD 07                                              pop     es                                              ;restore non-volatile regs
  4790 000012AE 1F                                              pop     ds                                              ;
  4791 000012AF 5F                                              pop     edi                                             ;
  4792 000012B0 5E                                              pop     esi                                             ;
  4793 000012B1 59                                              pop     ecx                                             ;
  4794 000012B2 C3                                              ret                                                     ;return
  4795                                  ;-----------------------------------------------------------------------------------------------------------------------
  4796                                  ;
  4797                                  ;       Routine:        SetConsoleChar
  4798                                  ;
  4799                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4800                                  ;
  4801                                  ;       In:             AL      ASCII character
  4802                                  ;                       CL      column
  4803                                  ;                       CH      row
  4804                                  ;                       ES      CGA selector
  4805                                  ;
  4806                                  ;       Out:            EAX     last target address written (ES:)
  4807                                  ;                       CL      column + 1
  4808                                  ;
  4809                                  ;-----------------------------------------------------------------------------------------------------------------------
  4810 000012B3 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4811 000012B5 0FB6C5                                          movzx   eax,ch                                          ;row
  4812 000012B8 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4813 000012BA F6E4                                            mul     ah                                              ;row * cols/row
  4814 000012BC 00C8                                            add     al,cl                                           ;add column
  4815 000012BE 80D400                                          adc     ah,0                                            ;handle carry
  4816 000012C1 D1E0                                            shl     eax,1                                           ;screen offset
  4817 000012C3 268810                                          mov     [es:eax],dl                                     ;store character
  4818 000012C6 FEC1                                            inc     cl                                              ;next column
  4819 000012C8 C3                                              ret                                                     ;return
  4820                                  ;-----------------------------------------------------------------------------------------------------------------------
  4821                                  ;
  4822                                  ;       Routine:        SetConsoleString
  4823                                  ;
  4824                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4825                                  ;
  4826                                  ;       In:             ESI     source offset (DS:)
  4827                                  ;                       CL      column
  4828                                  ;                       CH      row
  4829                                  ;                       ES      CGA selector
  4830                                  ;
  4831                                  ;-----------------------------------------------------------------------------------------------------------------------
  4832 000012C9 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4833 000012CA FC                                              cld                                                     ;forward strings
  4834 000012CB AC                      .10                     lodsb                                                   ;next ASCII character
  4835 000012CC 84C0                                            test    al,al                                           ;end of string?
  4836 000012CE 7407                                            jz      .20                                             ;yes, branch
  4837 000012D0 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4838 000012D5 EBF4                                            jmp     .10                                             ;continue
  4839 000012D7 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4840 000012D8 C3                                              ret                                                     ;return
  4841                                  ;=======================================================================================================================
  4842                                  ;
  4843                                  ;       Input/Output Routines
  4844                                  ;
  4845                                  ;       These routines read and/or write directly to ports.
  4846                                  ;
  4847                                  ;       GetBaseMemSize
  4848                                  ;       GetExtendedMemSize
  4849                                  ;       GetROMMemSize
  4850                                  ;       PlaceCursor
  4851                                  ;       PutPrimaryEndOfInt
  4852                                  ;       PutSecondaryEndOfInt
  4853                                  ;       ReadRealTimeClock
  4854                                  ;       ResetSystem
  4855                                  ;       SetKeyboardLamps
  4856                                  ;       WaitForKeyInBuffer
  4857                                  ;       WaitForKeyOutBuffer
  4858                                  ;
  4859                                  ;=======================================================================================================================
  4860                                  ;-----------------------------------------------------------------------------------------------------------------------
  4861                                  ;
  4862                                  ;       Routine:        GetBaseMemSize
  4863                                  ;
  4864                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4865                                  ;
  4866                                  ;       Output:         EAX     base RAM size in bytes
  4867                                  ;
  4868                                  ;-----------------------------------------------------------------------------------------------------------------------
  4869 000012D9 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4870 000012DB B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4871 000012DD E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4872 000012DF E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4873 000012E1 88C4                                            mov     ah,al                                           ;save base RAM high
  4874 000012E3 B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4875 000012E5 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4876 000012E7 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4877 000012E9 C3                                              ret                                                     ;return to caller
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ;
  4880                                  ;       Routine:        GetExtendedMemSize
  4881                                  ;
  4882                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4883                                  ;
  4884                                  ;       Output:         EAX     extended RAM size in bytes
  4885                                  ;
  4886                                  ;-----------------------------------------------------------------------------------------------------------------------
  4887 000012EA 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4888 000012EC B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4889 000012EE E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4890 000012F0 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4891 000012F2 88C4                                            mov     ah,al                                           ;save extended RAM high
  4892 000012F4 B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4893 000012F6 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4894 000012F8 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4895 000012FA C3                                              ret                                                     ;return to caller
  4896                                  ;-----------------------------------------------------------------------------------------------------------------------
  4897                                  ;
  4898                                  ;       Routine:        GetROMMemSize
  4899                                  ;
  4900                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4901                                  ;
  4902                                  ;       Output:         EAX     RAM size in bytes
  4903                                  ;
  4904                                  ;-----------------------------------------------------------------------------------------------------------------------
  4905 000012FB 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4906 000012FD 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4907 00001303 C3                                              ret                                                     ;return
  4908                                  ;-----------------------------------------------------------------------------------------------------------------------
  4909                                  ;
  4910                                  ;       Routine:        PlaceCursor
  4911                                  ;
  4912                                  ;       Description:    This routine positions the cursor on the console.
  4913                                  ;
  4914                                  ;       In:             DS      OS data selector
  4915                                  ;
  4916                                  ;-----------------------------------------------------------------------------------------------------------------------
  4917 00001304 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4918 00001305 A015080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4919 0000130A B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4920 0000130C F6E4                                            mul     ah                                              ;row offset
  4921 0000130E 020514080000                                    add     al,[wbConsoleColumn]                            ;add column
  4922 00001314 80D400                                          adc     ah,0                                            ;add overflow
  4923 00001317 89C1                                            mov     ecx,eax                                         ;screen offset
  4924 00001319 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4925 0000131B B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4926 0000131D B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4927 0000131F EE                                              out     dx,al                                           ;select register
  4928 00001320 42                                              inc     edx                                             ;data port
  4929 00001321 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4930 00001323 EE                                              out     dx,al                                           ;store hi-order loc
  4931 00001324 4A                                              dec     edx                                             ;register select port
  4932 00001325 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4933 00001327 EE                                              out     dx,al                                           ;select register
  4934 00001328 42                                              inc     edx                                             ;data port
  4935 00001329 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4936 0000132B EE                                              out     dx,al                                           ;store lo-order loc
  4937 0000132C 59                                              pop     ecx                                             ;restore non-volatile regs
  4938 0000132D C3                                              ret                                                     ;return
  4939                                  ;-----------------------------------------------------------------------------------------------------------------------
  4940                                  ;
  4941                                  ;       Routine:        PutPrimaryEndOfInt
  4942                                  ;
  4943                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4944                                  ;
  4945                                  ;-----------------------------------------------------------------------------------------------------------------------
  4946 0000132E FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4947 0000132F B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4948 00001331 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4949 00001333 C3                                              ret                                                     ;return
  4950                                  ;-----------------------------------------------------------------------------------------------------------------------
  4951                                  ;
  4952                                  ;       Routine:        PutSecondaryEndOfInt
  4953                                  ;
  4954                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4955                                  ;
  4956                                  ;-----------------------------------------------------------------------------------------------------------------------
  4957 00001334 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4958 00001335 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4959 00001337 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4960 00001339 C3                                              ret                                                     ;return
  4961                                  ;-----------------------------------------------------------------------------------------------------------------------
  4962                                  ;
  4963                                  ;       Routine:        ReadRealTimeClock
  4964                                  ;
  4965                                  ;       Description:    This routine gets current date time from the real-time clock.
  4966                                  ;
  4967                                  ;       In:             DS:EBX  DATETIME structure
  4968                                  ;
  4969                                  ;-----------------------------------------------------------------------------------------------------------------------
  4970 0000133A 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4971 0000133B 57                                              push    edi                                             ;
  4972 0000133C 06                                              push    es                                              ;
  4973 0000133D 1E                                              push    ds                                              ;store data selector ...
  4974 0000133E 07                                              pop     es                                              ;... in es register
  4975 0000133F 89DF                                            mov     edi,ebx                                         ;date-time structure
  4976 00001341 B000                                            mov     al,ERTCSECONDREG                                ;second register
  4977 00001343 E670                                            out     ERTCREGPORT,al                                  ;select second register
  4978 00001345 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4979 00001347 FC                                              cld                                                     ;forward strings
  4980 00001348 AA                                              stosb                                                   ;store second value
  4981 00001349 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4982 0000134B E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4983 0000134D E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4984 0000134F AA                                              stosb                                                   ;store minute value
  4985 00001350 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4986 00001352 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4987 00001354 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4988 00001356 AA                                              stosb                                                   ;store hour value
  4989 00001357 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4990 00001359 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4991 0000135B E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4992 0000135D AA                                              stosb                                                   ;store weekday value
  4993 0000135E B007                                            mov     al,ERTCDAYREG                                   ;day register
  4994 00001360 E670                                            out     ERTCREGPORT,al                                  ;select day register
  4995 00001362 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4996 00001364 AA                                              stosb                                                   ;store day value
  4997 00001365 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4998 00001367 E670                                            out     ERTCREGPORT,al                                  ;select month register
  4999 00001369 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  5000 0000136B AA                                              stosb                                                   ;store month value
  5001 0000136C B009                                            mov     al,ERTCYEARREG                                  ;year register
  5002 0000136E E670                                            out     ERTCREGPORT,al                                  ;select year register
  5003 00001370 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  5004 00001372 AA                                              stosb                                                   ;store year value
  5005 00001373 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  5006 00001375 E670                                            out     ERTCREGPORT,al                                  ;select century register
  5007 00001377 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  5008 00001379 AA                                              stosb                                                   ;store century value
  5009 0000137A B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  5010 0000137C E670                                            out     ERTCREGPORT,al                                  ;select status register
  5011 0000137E E471                                            in      al,ERTCDATAPORT                                 ;read status register
  5012 00001380 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  5013 00001382 751D                                            jnz     .20                                             ;skip ahead if binary values
  5014 00001384 89DE                                            mov     esi,ebx                                         ;date-time structure address
  5015 00001386 89DF                                            mov     edi,ebx                                         ;date-time structure address
  5016 00001388 B908000000                                      mov     ecx,8                                           ;loop counter
  5017 0000138D AC                      .10                     lodsb                                                   ;BCD value
  5018 0000138E 88C4                                            mov     ah,al                                           ;BCD value
  5019 00001390 240F                                            and     al,00001111b                                    ;low-order decimal zone
  5020 00001392 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  5021 00001395 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  5022 00001397 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  5023 00001399 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  5024 0000139C 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  5025 0000139E AA                                              stosb                                                   ;replace BCD with binary
  5026 0000139F E2EC                                            loop    .10                                             ;next value
  5027 000013A1 07                      .20                     pop     es                                              ;restore non-volatile regs
  5028 000013A2 5F                                              pop     edi                                             ;
  5029 000013A3 5E                                              pop     esi                                             ;
  5030 000013A4 C3                                              ret                                                     ;return
  5031                                  ;-----------------------------------------------------------------------------------------------------------------------
  5032                                  ;
  5033                                  ;       Routine:        ResetSystem
  5034                                  ;
  5035                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5036                                  ;
  5037                                  ;       Out:            N/A     This routine does not return.
  5038                                  ;
  5039                                  ;-----------------------------------------------------------------------------------------------------------------------
  5040 000013A5 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5041 000013AA E2FE                                            loop    $                                               ;clear interrupts
  5042 000013AC B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5043 000013AE E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5044 000013B0 FB                      .10                     sti                                                     ;enable maskable interrupts
  5045 000013B1 F4                                              hlt                                                     ;halt until interrupt
  5046 000013B2 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  5047                                  ;-----------------------------------------------------------------------------------------------------------------------
  5048                                  ;
  5049                                  ;       Routine:        SetKeyboardLamps
  5050                                  ;
  5051                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5052                                  ;
  5053                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5054                                  ;
  5055                                  ;-----------------------------------------------------------------------------------------------------------------------
  5056 000013B4 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5057 000013B9 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5058 000013BB E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  5059 000013BD E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5060 000013C2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5061 000013C4 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5062 000013C9 88F8                                            mov     al,bh                                           ;set/reset lamps value
  5063 000013CB E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  5064 000013CD E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5065 000013D2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5066 000013D4 C3                                              ret                                                     ;return
  5067                                  ;-----------------------------------------------------------------------------------------------------------------------
  5068                                  ;
  5069                                  ;       Routine:        WaitForKeyInBuffer
  5070                                  ;
  5071                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5072                                  ;
  5073                                  ;       Out:            ZF      1 = Input buffer ready
  5074                                  ;                               0 = Input buffer not ready after timeout
  5075                                  ;
  5076                                  ;-----------------------------------------------------------------------------------------------------------------------
  5077 000013D5 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5078 000013D6 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5079 000013DB E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5080 000013DD A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  5081 000013DF E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  5082 000013E1 59                                              pop     ecx                                             ;restore non-volatile regs
  5083 000013E2 C3                                              ret                                                     ;return
  5084                                  ;-----------------------------------------------------------------------------------------------------------------------
  5085                                  ;
  5086                                  ;       Routine:        WaitForKeyOutBuffer
  5087                                  ;
  5088                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5089                                  ;
  5090                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5091                                  ;                               0 = Output buffer empty after timeout
  5092                                  ;
  5093                                  ;-----------------------------------------------------------------------------------------------------------------------
  5094 000013E3 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5095 000013E4 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5096 000013E9 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5097 000013EB A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5098 000013ED E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5099 000013EF 59                                              pop     ecx                                             ;restore non-volatile regs
  5100 000013F0 C3                                              ret                                                     ;return
  5101                                  ;-----------------------------------------------------------------------------------------------------------------------
  5102                                  ;
  5103                                  ;       End of the Kernel Function Library
  5104                                  ;
  5105                                  ;-----------------------------------------------------------------------------------------------------------------------
  5106 000013F1 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5107                                  ;=======================================================================================================================
  5108                                  ;
  5109                                  ;       Console Task
  5110                                  ;
  5111                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5112                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5113                                  ;       screen and responds to user commands.
  5114                                  ;
  5115                                  ;=======================================================================================================================
  5116                                  ;-----------------------------------------------------------------------------------------------------------------------
  5117                                  ;
  5118                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5119                                  ;
  5120                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5121                                  ;
  5122                                  ;-----------------------------------------------------------------------------------------------------------------------
  5123                                  section                 constack                                                ;console task stack
  5124 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5125                                  ;-----------------------------------------------------------------------------------------------------------------------
  5126                                  ;
  5127                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5128                                  ;
  5129                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5130                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5131                                  ;       16 descriptors. Six are initially defined.
  5132                                  ;
  5133                                  ;-----------------------------------------------------------------------------------------------------------------------
  5134                                  section                 conldt                                                  ;console local descriptors
  5135 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5136 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5137 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5138 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5139 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  5140 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5141 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5142                                  ;-----------------------------------------------------------------------------------------------------------------------
  5143                                  ;
  5144                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5145                                  ;
  5146                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5147                                  ;       segment. CS to console code.
  5148                                  ;
  5149                                  ;-----------------------------------------------------------------------------------------------------------------------
  5150                                  section                 contss                                                  ;console task state segment
  5151 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5152 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5153 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5154 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5155 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5156 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5157 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5158 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5159 00000020 00000000                                        dd      0                                               ;20 eip
  5160 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5161 00000028 00000000                                        dd      0                                               ;28 eax
  5162 0000002C 00000000                                        dd      0                                               ;2c ecx
  5163 00000030 00000000                                        dd      0                                               ;30 edx
  5164 00000034 00000000                                        dd      0                                               ;34 ebx
  5165 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5166 0000003C 00000000                                        dd      0                                               ;3c ebp
  5167 00000040 00000000                                        dd      0                                               ;40 esi
  5168 00000044 00000000                                        dd      0                                               ;44 edi
  5169 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5170 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5171 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5172 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5173 00000058 00000000                                        dd      0                                               ;58 fs
  5174 0000005C 00000000                                        dd      0                                               ;5c gs
  5175 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5176 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5177                                  ;-----------------------------------------------------------------------------------------------------------------------
  5178                                  ;
  5179                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5180                                  ;
  5181                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5182                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5183                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5184                                  ;       event.
  5185                                  ;
  5186                                  ;-----------------------------------------------------------------------------------------------------------------------
  5187                                  section                 conmque                                                 ;console message queue
  5188 00000000 08000000                                        dd      8                                               ;head pointer
  5189 00000004 08000000                                        dd      8                                               ;tail pointer
  5190 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5191                                  ;-----------------------------------------------------------------------------------------------------------------------
  5192                                  ;
  5193                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5194                                  ;
  5195                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5196                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5197                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5198                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5199                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5200                                  ;       board input, echoing to the console screen and responding to user commands.
  5201                                  ;
  5202                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5203                                  ;
  5204                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5205                                  ;                               |  Real Mode Interrupt Vectors                  |
  5206                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5207                                  ;                               |  Reserved BIOS Memory Area                    |
  5208                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5209                                  ;                               |  Shared Kernel Memory Area                    |
  5210                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5211                                  ;                               |  Global Descriptor Table (GDT)                |
  5212                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5213                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5214                                  ;                       002000  +-----------------------------------------------+
  5215                                  ;                               |  Interrupt Handlers                           |
  5216                                  ;                               |  Kernel Function Library                      |
  5217                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5218                                  ;                               |  Console Task Stack Area                      |
  5219                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5220                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5221                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5222                                  ;                               |  Console Task Task State Segment (TSS)        |
  5223                                  ;                       004800  +-----------------------------------------------+
  5224                                  ;                               |  Console Task Message Queue                   |
  5225                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5226                                  ;                               |  Console Task Code                            |
  5227                                  ;                               |  Console Task Constants                       |
  5228                                  ;                       006000  +===============================================+
  5229                                  ;
  5230                                  ;-----------------------------------------------------------------------------------------------------------------------
  5231                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5232 00000000 E8DE000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5233                                  
  5234                                                          clearConsoleScreen                                      ;clear the console screen
  5234 00000005 B001                <1>  mov al,eClearConsoleScreen
  5234 00000007 CD30                <1>  int _svc
  5235                                                          putConsoleString czTitle                                ;display startup message
  5235 00000009 BA[AB0C0000]        <1>  mov edx,%1
  5235 0000000E B00C                <1>  mov al,ePutConsoleString
  5235 00000010 CD30                <1>  int _svc
  5236                                                          putConsoleString czROMMem                               ;ROM memory label
  5236 00000012 BA[860C0000]        <1>  mov edx,%1
  5236 00000017 B00C                <1>  mov al,ePutConsoleString
  5236 00000019 CD30                <1>  int _svc
  5237                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5237 0000001B BA1C090000          <1>  mov edx,%1
  5237 00000020 B00C                <1>  mov al,ePutConsoleString
  5237 00000022 CD30                <1>  int _svc
  5238                                                          putConsoleString czKB                                   ;Kilobytes
  5238 00000024 BA[000C0000]        <1>  mov edx,%1
  5238 00000029 B00C                <1>  mov al,ePutConsoleString
  5238 0000002B CD30                <1>  int _svc
  5239                                                          putConsoleString czNewLine                              ;new line
  5239 0000002D BA[030C0000]        <1>  mov edx,%1
  5239 00000032 B00C                <1>  mov al,ePutConsoleString
  5239 00000034 CD30                <1>  int _svc
  5240                                                          putConsoleString czBaseMem                              ;base memory label
  5240 00000036 BA[350B0000]        <1>  mov edx,%1
  5240 0000003B B00C                <1>  mov al,ePutConsoleString
  5240 0000003D CD30                <1>  int _svc
  5241                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5241 0000003F BA11090000          <1>  mov edx,%1
  5241 00000044 B00C                <1>  mov al,ePutConsoleString
  5241 00000046 CD30                <1>  int _svc
  5242                                                          putConsoleString czKB                                   ;Kilobytes
  5242 00000048 BA[000C0000]        <1>  mov edx,%1
  5242 0000004D B00C                <1>  mov al,ePutConsoleString
  5242 0000004F CD30                <1>  int _svc
  5243                                                          putConsoleString czNewLine                              ;new line
  5243 00000051 BA[030C0000]        <1>  mov edx,%1
  5243 00000056 B00C                <1>  mov al,ePutConsoleString
  5243 00000058 CD30                <1>  int _svc
  5244                                                          putConsoleString czExtendedMem                          ;extended memory label
  5244 0000005A BA[E80B0000]        <1>  mov edx,%1
  5244 0000005F B00C                <1>  mov al,ePutConsoleString
  5244 00000061 CD30                <1>  int _svc
  5245                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5245 00000063 BA27090000          <1>  mov edx,%1
  5245 00000068 B00C                <1>  mov al,ePutConsoleString
  5245 0000006A CD30                <1>  int _svc
  5246                                                          putConsoleString czKB                                   ;Kilobytes
  5246 0000006C BA[000C0000]        <1>  mov edx,%1
  5246 00000071 B00C                <1>  mov al,ePutConsoleString
  5246 00000073 CD30                <1>  int _svc
  5247                                                          putConsoleString czNewLine                              ;new line
  5247 00000075 BA[030C0000]        <1>  mov edx,%1
  5247 0000007A B00C                <1>  mov al,ePutConsoleString
  5247 0000007C CD30                <1>  int _svc
  5248                                  
  5249 0000007E E8F2000000                                      call    ConInitializeNetwork
  5250                                  
  5251                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5251                              <1> .10 :
  5251 00000083 BA[670C0000]        <1>  mov edx,%1
  5251 00000088 B00C                <1>  mov al,ePutConsoleString
  5251 0000008A CD30                <1>  int _svc
  5252                                                          placeCursor                                             ;set CRT cursor location
  5252 0000008C B00B                <1>  mov al,ePlaceCursor
  5252 0000008E CD30                <1>  int _svc
  5253                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5253 00000090 BA21080000          <1>  mov edx,%1
  5253 00000095 B94F000000          <1>  mov ecx,%2
  5253 0000009A B701                <1>  mov bh,%3
  5253 0000009C B30D                <1>  mov bl,%4
  5253 0000009E B006                <1>  mov al,eGetConsoleString
  5253 000000A0 CD30                <1>  int _svc
  5254                                                          putConsoleString czNewLine                              ;newline
  5254 000000A2 BA[030C0000]        <1>  mov edx,%1
  5254 000000A7 B00C                <1>  mov al,ePutConsoleString
  5254 000000A9 CD30                <1>  int _svc
  5255                                  
  5256 000000AB BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5257 000000B0 BB71080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5258 000000B5 E89B030000                                      call    ConTakeToken                                    ;handle console input
  5259 000000BA BA71080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5260 000000BF E8C6030000                                      call    ConDetermineCommand                             ;determine command number
  5261 000000C4 83F81A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5262 000000C7 720B                                            jb      .20                                             ;yes, branch
  5263                                  
  5264                                                          putConsoleString czUnknownCommand                       ;display error message
  5264 000000C9 BA[C90C0000]        <1>  mov edx,%1
  5264 000000CE B00C                <1>  mov al,ePutConsoleString
  5264 000000D0 CD30                <1>  int _svc
  5265                                  
  5266 000000D2 EBAF                                            jmp     .10                                             ;next command
  5267 000000D4 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5268 000000D7 BA[E9090000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5269 000000DC 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5270 000000DF FFD0                                            call    eax                                             ;call command handler
  5271 000000E1 EBA0                                            jmp     .10                                             ;next command
  5272                                  ;-----------------------------------------------------------------------------------------------------------------------
  5273                                  ;
  5274                                  ;       Routine:        ConInitializeData
  5275                                  ;
  5276                                  ;       Description:    This routine initializes console task variables.
  5277                                  ;
  5278                                  ;-----------------------------------------------------------------------------------------------------------------------
  5279 000000E3 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5280 000000E4 57                                              push    edi                                             ;
  5281 000000E5 06                                              push    es                                              ;
  5282                                  ;
  5283                                  ;       Initialize console work areas.
  5284                                  ;
  5285 000000E6 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5286 000000E8 07                                              pop     es                                              ;... into extra segment register
  5287 000000E9 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5288 000000EE 30C0                                            xor     al,al                                           ;initialization value
  5289 000000F0 B98E010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5290 000000F5 FC                                              cld                                                     ;forward strings
  5291 000000F6 F3AA                                            rep     stosb                                           ;initialize data
  5292                                  ;
  5293                                  ;       Initialize heap size
  5294                                  ;
  5295 000000F8 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5296 000000FD A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5297                                  ;
  5298                                  ;       Initialize MEMROOT structure
  5299                                  ;
  5300 00000102 BF3B090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5301 00000107 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5302 0000010C 31C9                                            xor     ecx,ecx                                         ;zero register
  5303 0000010E B104                                            mov     cl,4                                            ;count
  5304 00000110 F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5305 00000112 31C0                                            xor     eax,eax                                         ;zero register
  5306 00000114 AB                                              stosd                                                   ;zero first task block
  5307 00000115 AB                                              stosd                                                   ;zero last task block
  5308                                  ;
  5309                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5310                                  ;
  5311 00000116 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5312 0000011B B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5313 00000120 AB                                              stosd                                                   ;store signature
  5314 00000121 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5315 00000126 AB                                              stosd                                                   ;store block size
  5316 00000127 31C9                                            xor     ecx,ecx                                         ;zero register
  5317 00000129 B106                                            mov     cl,6                                            ;count
  5318 0000012B 31C0                                            xor     eax,eax                                         ;zero register
  5319 0000012D F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5320                                  ;
  5321                                  ;       Read memory sizes from ROM
  5322                                  ;
  5323                                                          getROMMemSize                                           ;get ROM memory size
  5323 0000012F B008                <1>  mov al,eGetROMMemSize
  5323 00000131 CD30                <1>  int _svc
  5324 00000133 A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5325 00000138 89C1                                            mov     ecx,eax                                         ;integer param
  5326 0000013A BA1C090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  5327 0000013F B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5328                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5328 00000141 B01A                <1>  mov al,eUnsignedToDecimalString
  5328 00000143 CD30                <1>  int _svc
  5329                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5329 00000145 B005                <1>  mov al,eGetBaseMemSize
  5329 00000147 CD30                <1>  int _svc
  5330 00000149 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  5331 0000014E 89C1                                            mov     ecx,eax                                         ;integer param
  5332 00000150 BA11090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  5333 00000155 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5334                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5334 00000157 B01A                <1>  mov al,eUnsignedToDecimalString
  5334 00000159 CD30                <1>  int _svc
  5335                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5335 0000015B B007                <1>  mov al,eGetExtendedMemSize
  5335 0000015D CD30                <1>  int _svc
  5336 0000015F A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5337 00000164 89C1                                            mov     ecx,eax                                         ;integer param
  5338 00000166 BA27090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  5339 0000016B B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5340                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5340 0000016D B01A                <1>  mov al,eUnsignedToDecimalString
  5340 0000016F CD30                <1>  int _svc
  5341                                  ;
  5342                                  ;       Restore and return.
  5343                                  ;
  5344 00000171 07                                              pop     es                                              ;restore non-volatile regs
  5345 00000172 5F                                              pop     edi                                             ;
  5346 00000173 59                                              pop     ecx                                             ;
  5347 00000174 C3                                              ret                                                     ;return
  5348                                  ;-----------------------------------------------------------------------------------------------------------------------
  5349                                  ;
  5350                                  ;       Routine:        ConInitializeNetwork
  5351                                  ;
  5352                                  ;       Description:    This routine initializes console network variables.
  5353                                  ;
  5354                                  ;-----------------------------------------------------------------------------------------------------------------------
  5355 00000175 53                      ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5356 00000176 51                                              push    ecx                                             ;
  5357 00000177 56                                              push    esi                                             ;
  5358 00000178 57                                              push    edi                                             ;
  5359                                  ;
  5360                                  ;       Initialize ETHER structure.
  5361                                  ;
  5362 00000179 BB67090000                                      mov     ebx,wsConsoleEther                              ;ETHER structure address
  5363 0000017E E8BD020000                                      call    ConInitEtherContext                             ;initialize ETHER struct
  5364 00000183 89DE                                            mov     esi,ebx                                         ;ETHER structure address
  5365                                  
  5366                                  ;       Initialize variables.
  5367                                  ;       Construct PCI selector.
  5368                                  ;       Read PCI configuration data.
  5369                                  ;
  5370 00000185 BB5B090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  5371 0000018A E8DB050000                                      call    ConInitPCIContext                               ;initialize PCI struct
  5372 0000018F E8EB050000              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5373 00000194 E807060000                                      call    ConReadPCIConfigData                            ;read the configuration data
  5374                                  ;
  5375                                  ;       Interpret PCI data value.
  5376                                  ;
  5377 00000199 83F8FF                                          cmp     eax,-1		                                ;function defined?
  5378 0000019C 7508                                            jne     .20                                             ;yes, branch
  5379 0000019E 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  5380 000001A2 7410                                            je      .40                                             ;yes, skip to next device
  5381 000001A4 EB07                                            jmp     short .30                                       ;no, skip to next function
  5382                                  ;
  5383                                  ;       Exit PCI probe if supported adapter found.
  5384                                  ;
  5385 000001A6 3D86800F10              .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5386 000001AB 7413                                            je      .50                                             ;yes, found!
  5387                                  ;
  5388                                  ;       Next function.
  5389                                  ;
  5390 000001AD E80C070000              .30                     call    ConNextPCIFunction                              ;next function
  5391 000001B2 72DB                                            jb      .10                                             ;continue if no overflow
  5392                                  ;
  5393                                  ;       Next device, bus.
  5394                                  ;
  5395 000001B4 E813070000              .40                     call    ConNextPCIDevice                                ;next device, bus.
  5396 000001B9 72D4                                            jb      .10                                             ;continue if no overflow
  5397 000001BB E972020000                                      jmp     .990                                            ;done, ETHER not found
  5398                                  ;
  5399                                  ;       Set hardware flag and save selector.
  5400                                  ;
  5401 000001C0 8B4304                  .50                     mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5402 000001C3 8906                                            mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5403 000001C5 800D2008000080                                  or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5404                                  
  5405                                                          putConsoleString czEthernetAdapterFound                 ;ethernet adapter found message
  5405 000001CC BA[430B0000]        <1>  mov edx,%1
  5405 000001D1 B00C                <1>  mov al,ePutConsoleString
  5405 000001D3 CD30                <1>  int _svc
  5406                                  ;
  5407                                  ;       Save and report PCI data.
  5408                                  ;
  5409 000001D5 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5410 000001D7 89C1                                            mov     ecx,eax
  5411 000001D9 BA71080000                                      mov     edx,wzConsoleToken
  5412                                  
  5413                                                          unsignedToHexadecimal
  5413 000001DE B01B                <1>  mov al,eUnsignedToHexadecimal
  5413 000001E0 CD30                <1>  int _svc
  5414                                                          putConsoleString czEthernetSelector
  5414 000001E2 BA[5C0B0000]        <1>  mov edx,%1
  5414 000001E7 B00C                <1>  mov al,ePutConsoleString
  5414 000001E9 CD30                <1>  int _svc
  5415                                                          putConsoleString wzConsoleToken
  5415 000001EB BA71080000          <1>  mov edx,%1
  5415 000001F0 B00C                <1>  mov al,ePutConsoleString
  5415 000001F2 CD30                <1>  int _svc
  5416                                                          putConsoleString czNewLine
  5416 000001F4 BA[030C0000]        <1>  mov edx,%1
  5416 000001F9 B00C                <1>  mov al,ePutConsoleString
  5416 000001FB CD30                <1>  int _svc
  5417                                  
  5418 000001FD 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5419 000001FF 30C0                                            xor     al,al                                           ;register 0
  5420 00000201 E831020000                                      call    ConReadPCIRegister                              ;EAX = device id | vendor id
  5421 00000206 894604                                          mov     [esi+ETHER.devicevendor],eax                    ;save device id | vendor id
  5422 00000209 89C1                                            mov     ecx,eax                                         ;vendor id
  5423 0000020B BA71080000                                      mov     edx,wzConsoleToken                              ;string output buffer addr
  5424                                  
  5425                                                          unsignedToHexadecimal                                   ;vendor id as string
  5425 00000210 B01B                <1>  mov al,eUnsignedToHexadecimal
  5425 00000212 CD30                <1>  int _svc
  5426                                                          putConsoleString czEthernetDeviceVendor                 ;vendor id label
  5426 00000214 BA[670B0000]        <1>  mov edx,%1
  5426 00000219 B00C                <1>  mov al,ePutConsoleString
  5426 0000021B CD30                <1>  int _svc
  5427                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5427 0000021D BA71080000          <1>  mov edx,%1
  5427 00000222 B00C                <1>  mov al,ePutConsoleString
  5427 00000224 CD30                <1>  int _svc
  5428                                                          putConsoleString czNewLine                              ;new line
  5428 00000226 BA[030C0000]        <1>  mov edx,%1
  5428 0000022B B00C                <1>  mov al,ePutConsoleString
  5428 0000022D CD30                <1>  int _svc
  5429                                  
  5430 0000022F 8B06                                            mov     eax,[esi+ETHER.selector]
  5431 00000231 B004                                            mov     al,04h
  5432 00000233 E8FF010000                                      call    ConReadPCIRegister
  5433 00000238 894608                                          mov     [esi+ETHER.statuscommand],eax
  5434 0000023B 89C1                                            mov     ecx,eax
  5435 0000023D BA71080000                                      mov     edx,wzConsoleToken
  5436                                  
  5437                                                          unsignedToHexadecimal                                   ;vendor id as string
  5437 00000242 B01B                <1>  mov al,eUnsignedToHexadecimal
  5437 00000244 CD30                <1>  int _svc
  5438                                                          putConsoleString czEthernetStatusCommand                ;vendor id label
  5438 00000246 BA[770B0000]        <1>  mov edx,%1
  5438 0000024B B00C                <1>  mov al,ePutConsoleString
  5438 0000024D CD30                <1>  int _svc
  5439                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5439 0000024F BA71080000          <1>  mov edx,%1
  5439 00000254 B00C                <1>  mov al,ePutConsoleString
  5439 00000256 CD30                <1>  int _svc
  5440                                                          putConsoleString czNewLine                              ;new line
  5440 00000258 BA[030C0000]        <1>  mov edx,%1
  5440 0000025D B00C                <1>  mov al,ePutConsoleString
  5440 0000025F CD30                <1>  int _svc
  5441                                  
  5442 00000261 8B06                                            mov     eax,[esi+ETHER.selector]
  5443 00000263 B008                                            mov     al,08h
  5444 00000265 E8CD010000                                      call    ConReadPCIRegister
  5445 0000026A 89460C                                          mov     [esi+ETHER.classrev],eax
  5446 0000026D 89C1                                            mov     ecx,eax
  5447 0000026F BA71080000                                      mov     edx,wzConsoleToken
  5448                                  
  5449                                                          unsignedToHexadecimal                                   ;vendor id as string
  5449 00000274 B01B                <1>  mov al,eUnsignedToHexadecimal
  5449 00000276 CD30                <1>  int _svc
  5450                                                          putConsoleString czEthernetClassRev                     ;vendor id label
  5450 00000278 BA[880B0000]        <1>  mov edx,%1
  5450 0000027D B00C                <1>  mov al,ePutConsoleString
  5450 0000027F CD30                <1>  int _svc
  5451                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5451 00000281 BA71080000          <1>  mov edx,%1
  5451 00000286 B00C                <1>  mov al,ePutConsoleString
  5451 00000288 CD30                <1>  int _svc
  5452                                                          putConsoleString czNewLine                              ;new line
  5452 0000028A BA[030C0000]        <1>  mov edx,%1
  5452 0000028F B00C                <1>  mov al,ePutConsoleString
  5452 00000291 CD30                <1>  int _svc
  5453                                  
  5454 00000293 8B06                                            mov     eax,[esi+ETHER.selector]
  5455 00000295 B00C                                            mov     al,0Ch
  5456 00000297 E89B010000                                      call    ConReadPCIRegister
  5457 0000029C 894610                                          mov     [esi+ETHER.misc],eax
  5458 0000029F 89C1                                            mov     ecx,eax
  5459 000002A1 BA71080000                                      mov     edx,wzConsoleToken
  5460                                  
  5461                                                          unsignedToHexadecimal                                   ;vendor id as string
  5461 000002A6 B01B                <1>  mov al,eUnsignedToHexadecimal
  5461 000002A8 CD30                <1>  int _svc
  5462                                                          putConsoleString czEthernetMisc                         ;vendor id label
  5462 000002AA BA[940B0000]        <1>  mov edx,%1
  5462 000002AF B00C                <1>  mov al,ePutConsoleString
  5462 000002B1 CD30                <1>  int _svc
  5463                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5463 000002B3 BA71080000          <1>  mov edx,%1
  5463 000002B8 B00C                <1>  mov al,ePutConsoleString
  5463 000002BA CD30                <1>  int _svc
  5464                                                          putConsoleString czNewLine                              ;new line
  5464 000002BC BA[030C0000]        <1>  mov edx,%1
  5464 000002C1 B00C                <1>  mov al,ePutConsoleString
  5464 000002C3 CD30                <1>  int _svc
  5465                                  
  5466 000002C5 8B06                                            mov     eax,[esi+ETHER.selector]
  5467 000002C7 B010                                            mov     al,10h
  5468 000002C9 E869010000                                      call    ConReadPCIRegister
  5469 000002CE 894614                                          mov     [esi+ETHER.mmio],eax
  5470 000002D1 89C1                                            mov     ecx,eax
  5471 000002D3 BA71080000                                      mov     edx,wzConsoleToken
  5472                                  
  5473                                                          unsignedToHexadecimal                                   ;vendor id as string
  5473 000002D8 B01B                <1>  mov al,eUnsignedToHexadecimal
  5473 000002DA CD30                <1>  int _svc
  5474                                                          putConsoleString czEthernetMemoryAddr                   ;ethernet I/O memory address label
  5474 000002DC BA[AD0B0000]        <1>  mov edx,%1
  5474 000002E1 B00C                <1>  mov al,ePutConsoleString
  5474 000002E3 CD30                <1>  int _svc
  5475                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5475 000002E5 BA71080000          <1>  mov edx,%1
  5475 000002EA B00C                <1>  mov al,ePutConsoleString
  5475 000002EC CD30                <1>  int _svc
  5476                                                          putConsoleString czNewLine                              ;new line
  5476 000002EE BA[030C0000]        <1>  mov edx,%1
  5476 000002F3 B00C                <1>  mov al,ePutConsoleString
  5476 000002F5 CD30                <1>  int _svc
  5477                                  
  5478 000002F7 8B06                                            mov     eax,[esi+ETHER.selector]
  5479 000002F9 B014                                            mov     al,14h
  5480 000002FB E837010000                                      call    ConReadPCIRegister
  5481 00000300 894618                                          mov     [esi+ETHER.flash],eax
  5482 00000303 89C1                                            mov     ecx,eax
  5483 00000305 BA71080000                                      mov     edx,wzConsoleToken
  5484                                  
  5485                                                          unsignedToHexadecimal                                   ;vendor id as string
  5485 0000030A B01B                <1>  mov al,eUnsignedToHexadecimal
  5485 0000030C CD30                <1>  int _svc
  5486                                                          putConsoleString czEthernetFlash                        ;ethernet I/O memory address label
  5486 0000030E BA[C90B0000]        <1>  mov edx,%1
  5486 00000313 B00C                <1>  mov al,ePutConsoleString
  5486 00000315 CD30                <1>  int _svc
  5487                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5487 00000317 BA71080000          <1>  mov edx,%1
  5487 0000031C B00C                <1>  mov al,ePutConsoleString
  5487 0000031E CD30                <1>  int _svc
  5488                                                          putConsoleString czNewLine                              ;new line
  5488 00000320 BA[030C0000]        <1>  mov edx,%1
  5488 00000325 B00C                <1>  mov al,ePutConsoleString
  5488 00000327 CD30                <1>  int _svc
  5489                                  
  5490 00000329 8B06                                            mov     eax,[esi+ETHER.selector]
  5491 0000032B B018                                            mov     al,18h
  5492 0000032D E805010000                                      call    ConReadPCIRegister
  5493 00000332 89461C                                          mov     [esi+ETHER.port],eax
  5494 00000335 89C1                                            mov     ecx,eax
  5495 00000337 BA71080000                                      mov     edx,wzConsoleToken
  5496                                  
  5497                                                          unsignedToHexadecimal                                   ;vendor id as string
  5497 0000033C B01B                <1>  mov al,eUnsignedToHexadecimal
  5497 0000033E CD30                <1>  int _svc
  5498                                                          putConsoleString czEthernetPort                         ;ethernet I/O memory address label
  5498 00000340 BA[D10B0000]        <1>  mov edx,%1
  5498 00000345 B00C                <1>  mov al,ePutConsoleString
  5498 00000347 CD30                <1>  int _svc
  5499                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5499 00000349 BA71080000          <1>  mov edx,%1
  5499 0000034E B00C                <1>  mov al,ePutConsoleString
  5499 00000350 CD30                <1>  int _svc
  5500                                                          putConsoleString czNewLine                              ;new line
  5500 00000352 BA[030C0000]        <1>  mov edx,%1
  5500 00000357 B00C                <1>  mov al,ePutConsoleString
  5500 00000359 CD30                <1>  int _svc
  5501                                  
  5502 0000035B 8B06                                            mov     eax,[esi+ETHER.selector]                          ;ethernet device PCI selector
  5503 0000035D B03C                                            mov     al,03Ch                                         ;interrupt number port addr
  5504 0000035F E8D3000000                                      call    ConReadPCIRegister
  5505 00000364 884626                                          mov     [esi+ETHER.irq],al                              ;save IRQ
  5506 00000367 0FB6C8                                          movzx   ecx,al                                          ;convert to dword
  5507 0000036A BA71080000                                      mov     edx,wzConsoleToken                              ;string output address
  5508                                  
  5509                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5509 0000036F B01B                <1>  mov al,eUnsignedToHexadecimal
  5509 00000371 CD30                <1>  int _svc
  5510                                                          putConsoleString czEthernetIRQ                          ;ethernet I/O port label
  5510 00000373 BA[DC0B0000]        <1>  mov edx,%1
  5510 00000378 B00C                <1>  mov al,ePutConsoleString
  5510 0000037A CD30                <1>  int _svc
  5511                                                          putConsoleString wzConsoleToken                         ;output string to console
  5511 0000037C BA71080000          <1>  mov edx,%1
  5511 00000381 B00C                <1>  mov al,ePutConsoleString
  5511 00000383 CD30                <1>  int _svc
  5512                                                          putConsoleString czNewLine                              ;output newline to console
  5512 00000385 BA[030C0000]        <1>  mov edx,%1
  5512 0000038A B00C                <1>  mov al,ePutConsoleString
  5512 0000038C CD30                <1>  int _svc
  5513                                  ;
  5514                                  ;       Read MAC address from MMIO
  5515                                  ;
  5516 0000038E 8B4E14                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  5517 00000391 E33B                                            jecxz   .60
  5518 00000393 81C100540000                                    add     ecx,05400h                                      ;MAC address offset
  5519 00000399 8B01                                            mov     eax,[ecx]                                       ;MAC address lo-order dword
  5520 0000039B 894620                                          mov     [esi+ETHER.mac],eax                             ;save
  5521 0000039E 668B4104                                        mov     ax,[ecx+4]                                      ;MAC address hi-order word
  5522 000003A2 66894624                                        mov     [esi+ETHER.mac+4],ax                            ;save
  5523                                  
  5524 000003A6 8D4620                                          lea     eax,[esi+ETHER.mac]
  5525 000003A9 BA71080000                                      mov     edx,wzConsoleToken
  5526 000003AE E81D000000                                      call    .PutMAC
  5527                                  
  5528                                                          putConsoleString czEthernetMAC
  5528 000003B3 BA[E20B0000]        <1>  mov edx,%1
  5528 000003B8 B00C                <1>  mov al,ePutConsoleString
  5528 000003BA CD30                <1>  int _svc
  5529                                                          putConsoleString wzConsoleToken
  5529 000003BC BA71080000          <1>  mov edx,%1
  5529 000003C1 B00C                <1>  mov al,ePutConsoleString
  5529 000003C3 CD30                <1>  int _svc
  5530                                                          putConsoleString czNewLine
  5530 000003C5 BA[030C0000]        <1>  mov edx,%1
  5530 000003CA B00C                <1>  mov al,ePutConsoleString
  5530 000003CC CD30                <1>  int _svc
  5531                                  
  5532 000003CE EB62                    .60                     jmp     .990
  5533                                  
  5534 000003D0 51                      .PutMAC                 push    ecx
  5535 000003D1 56                                              push    esi
  5536 000003D2 57                                              push    edi
  5537 000003D3 89C6                                            mov     esi,eax
  5538 000003D5 89D7                                            mov     edi,edx
  5539 000003D7 31C9                                            xor     ecx,ecx
  5540 000003D9 B105                                            mov     cl,5
  5541 000003DB FC                                              cld
  5542 000003DC E811000000              .PutMAC_10              call    .PutMACByte
  5543 000003E1 B02D                                            mov     al,'-'
  5544 000003E3 AA                                              stosb
  5545 000003E4 E2F6                                            loop    .PutMAC_10
  5546 000003E6 E807000000                                      call    .PutMACByte
  5547 000003EB 30C0                                            xor     al,al
  5548 000003ED AA                                              stosb
  5549 000003EE 5F                                              pop     edi
  5550 000003EF 5E                                              pop     esi
  5551 000003F0 59                                              pop     ecx
  5552 000003F1 C3                                              ret
  5553                                  
  5554 000003F2 AC                      .PutMACByte             lodsb
  5555 000003F3 88C4                                            mov     ah,al
  5556 000003F5 C0E804                                          shr     al,4
  5557 000003F8 0C30                                            or      al,030h
  5558 000003FA 3C3A                                            cmp     al,03Ah
  5559 000003FC 7202                                            jb      .ByteToHex_20
  5560 000003FE 0407                                            add     al,7
  5561 00000400 AA                      .ByteToHex_20           stosb
  5562 00000401 88E0                                            mov     al,ah
  5563 00000403 240F                                            and     al,00Fh
  5564 00000405 0C30                                            or      al,030h
  5565 00000407 3C3A                                            cmp     al,03Ah
  5566 00000409 7202                                            jb      .ByteToHex_30
  5567 0000040B 0407                                            add     al,7
  5568 0000040D AA                      .ByteToHex_30           stosb
  5569 0000040E C3                                              ret
  5570                                  
  5571                                  ;
  5572                                  ;       Enable transmission of packets
  5573                                  ;
  5574                                  
  5575                                  ;
  5576                                  ;       Setup read base address (RDBAL) (2800h)
  5577                                  ;
  5578                                  
  5579                                  ;
  5580                                  ;       Setup receive descriptor table length (2808h)
  5581                                  ;
  5582                                  
  5583                                  ;
  5584                                  ;       Enable receipt of packets
  5585                                  ;
  5586 0000040F 9C                                              pushf
  5587 00000410 FA                                              cli
  5588 00000411 8B5614                                          mov     edx,[esi+ETHER.mmio]                            ;memory i/o address
  5589 00000414 81C200010000                                    add     edx,0100h                                       ;RCTL register address
  5590 0000041A 8B02                                            mov     eax,[edx]                                       ;RCTL value
  5591 0000041C 83C802                                          or      eax,00000002h                                   ;enable
  5592 0000041F 8902                                            mov     [edx],eax                                       ;store RCTL value
  5593 00000421 9D                                              popf
  5594                                  ;
  5595                                  ;       Enable board interrupt
  5596                                  ;
  5597 00000422 8B5614                                          mov     edx,[esi+ETHER.mmio]                            ;memory i/o address
  5598 00000425 81C218280000                                    add     edx,2818h                                       ;add descriptor tail offset
  5599 0000042B B802000000                                      mov     eax,2                                           ;buffer number
  5600 00000430 8902                                            mov     [edx],eax                                       ;store buffer number
  5601                                  
  5602                                  
  5603 00000432 5F                      .990                    pop     edi                                             ;restore non-volatile regs
  5604 00000433 5E                                              pop     esi                                             ;
  5605 00000434 59                                              pop     ecx                                             ;
  5606 00000435 5B                                              pop     ebx                                             ;
  5607 00000436 C3                                              ret                                                     ;return
  5608                                  ;-----------------------------------------------------------------------------------------------------------------------
  5609                                  ;
  5610                                  ;       Routine:        ConReadPCIRegister
  5611                                  ;
  5612                                  ;       Description:    This routine reads a PCI register
  5613                                  ;
  5614                                  ;       In:             EAX     PCI register
  5615                                  ;
  5616                                  ;       Out:            EAX     PCI register value
  5617                                  ;-----------------------------------------------------------------------------------------------------------------------
  5618 00000437 B60C                    ConReadPCIRegister      mov     dh,EPCIPORTCONFIGADDRHI                         ;hi-order PCI configuration addr port
  5619 00000439 B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;lo-order PCI configuration addr port
  5620 0000043B EF                                              out     dx,eax                                          ;select PCI register
  5621 0000043C B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5622 0000043E ED                                              in      eax,dx                                          ;read register
  5623 0000043F C3                                              ret                                                     ;return
  5624                                  ;-----------------------------------------------------------------------------------------------------------------------
  5625                                  ;
  5626                                  ;       Routine:        ConInitEtherContext
  5627                                  ;
  5628                                  ;       Description:    This routine zeros an ETHER structure
  5629                                  ;
  5630                                  ;       In:             DS:EBX  ETHER structure address
  5631                                  ;
  5632                                  ;-----------------------------------------------------------------------------------------------------------------------
  5633 00000440 51                      ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  5634 00000441 57                                              push    edi                                             ;
  5635 00000442 06                                              push    es                                              ;
  5636                                  ;
  5637                                  ;       Zero context.
  5638                                  ;
  5639 00000443 1E                                              push    ds                                              ;load data segment...
  5640 00000444 07                                              pop     es                                              ;...into extra segment
  5641 00000445 89DF                                            mov     edi,ebx                                         ;ETHER structure offset
  5642 00000447 B927000000                                      mov     ecx,EETHERLEN                                   ;ETHER structure length
  5643 0000044C 30C0                                            xor     al,al                                           ;zero
  5644 0000044E FC                                              cld                                                     ;forward strings
  5645 0000044F F3AA                                            rep     stosb                                           ;zero structure members
  5646                                  ;
  5647                                  ;       Restore and return.
  5648                                  ;
  5649 00000451 07                                              pop     es                                              ;restore non-volatile regs
  5650 00000452 5F                                              pop     edi                                             ;
  5651 00000453 59                                              pop     ecx                                             ;
  5652 00000454 C3                                              ret                                                     ;return
  5653                                  ;-----------------------------------------------------------------------------------------------------------------------
  5654                                  ;
  5655                                  ;       Routine:        ConTakeToken
  5656                                  ;
  5657                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5658                                  ;
  5659                                  ;       In:             DS:EDX  source buffer address
  5660                                  ;                       DS:EBX  target buffer address
  5661                                  ;
  5662                                  ;       Out:            DS:EDX  source buffer address
  5663                                  ;                       DS:EBX  target buffer address
  5664                                  ;
  5665                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5666                                  ;
  5667                                  ;-----------------------------------------------------------------------------------------------------------------------
  5668 00000455 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5669 00000456 57                                              push    edi                                             ;
  5670 00000457 06                                              push    es                                              ;
  5671 00000458 1E                                              push    ds                                              ;load data segment selector ...
  5672 00000459 07                                              pop     es                                              ;... into extra segment reg
  5673 0000045A 89D6                                            mov     esi,edx                                         ;source buffer address
  5674 0000045C 89DF                                            mov     edi,ebx                                         ;target buffer address
  5675 0000045E C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5676 00000461 FC                                              cld                                                     ;forward strings
  5677 00000462 AC                      .10                     lodsb                                                   ;load byte
  5678 00000463 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5679 00000465 74FB                                            je      .10                                             ;yes, continue
  5680 00000467 84C0                                            test    al,al                                           ;end of line?
  5681 00000469 7410                                            jz      .40                                             ;yes, branch
  5682 0000046B AA                      .20                     stosb                                                   ;store byte
  5683 0000046C AC                                              lodsb                                                   ;load byte
  5684 0000046D 84C0                                            test    al,al                                           ;end of line?
  5685 0000046F 740A                                            jz      .40                                             ;no, continue
  5686 00000471 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5687 00000473 75F6                                            jne     .20                                             ;no, continue
  5688 00000475 AC                      .30                     lodsb                                                   ;load byte
  5689 00000476 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5690 00000478 74FB                                            je      .30                                             ;yes, continue
  5691 0000047A 4E                                              dec     esi                                             ;pre-position
  5692 0000047B C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5693 0000047E 89D7                                            mov     edi,edx                                         ;source buffer address
  5694 00000480 AC                      .50                     lodsb                                                   ;remaining byte
  5695 00000481 AA                                              stosb                                                   ;move to front of buffer
  5696 00000482 84C0                                            test    al,al                                           ;end of line?
  5697 00000484 75FA                                            jnz     .50                                             ;no, continue
  5698 00000486 07                                              pop     es                                              ;restore non-volatile regs
  5699 00000487 5F                                              pop     edi                                             ;
  5700 00000488 5E                                              pop     esi                                             ;
  5701 00000489 C3                                              ret                                                     ;return
  5702                                  ;-----------------------------------------------------------------------------------------------------------------------
  5703                                  ;
  5704                                  ;       Routine:        ConDetermineCommand
  5705                                  ;
  5706                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5707                                  ;
  5708                                  ;       input:          DS:EDX  command address
  5709                                  ;
  5710                                  ;       output:         EAX     >=0     = command nbr
  5711                                  ;                               0       = unknown command
  5712                                  ;
  5713                                  ;-----------------------------------------------------------------------------------------------------------------------
  5714 0000048A 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5715 0000048B 51                                              push    ecx                                             ;
  5716 0000048C 56                                              push    esi                                             ;
  5717 0000048D 57                                              push    edi                                             ;
  5718                                  
  5719                                                          upperCaseString                                         ;upper-case string at EDX
  5719 0000048E B01C                <1>  mov al,eUpperCaseString
  5719 00000490 CD30                <1>  int _svc
  5720                                  
  5721 00000492 BE[510A0000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5722 00000497 31FF                                            xor     edi,edi                                         ;intialize command number
  5723 00000499 FC                                              cld                                                     ;forward strings
  5724 0000049A AC                      .10                     lodsb                                                   ;command length
  5725 0000049B 0FB6C8                                          movzx   ecx,al                                          ;command length
  5726 0000049E E30D                                            jecxz   .20                                             ;branch if end of table
  5727 000004A0 89F3                                            mov     ebx,esi                                         ;table entry address
  5728 000004A2 01CE                                            add     esi,ecx                                         ;next table entry address
  5729                                  
  5730                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5730 000004A4 B002                <1>  mov al,eCompareMemory
  5730 000004A6 CD30                <1>  int _svc
  5731                                  
  5732 000004A8 E303                                            jecxz   .20                                             ;branch if equal
  5733 000004AA 47                                              inc     edi                                             ;increment command nbr
  5734 000004AB EBED                                            jmp     .10                                             ;repeat
  5735 000004AD 89F8                    .20                     mov     eax,edi                                         ;command number
  5736 000004AF 5F                                              pop     edi                                             ;restore non-volatile regs
  5737 000004B0 5E                                              pop     esi                                             ;
  5738 000004B1 59                                              pop     ecx                                             ;
  5739 000004B2 5B                                              pop     ebx                                             ;
  5740 000004B3 C3                                              ret                                                     ;return
  5741                                  ;-----------------------------------------------------------------------------------------------------------------------
  5742                                  ;
  5743                                  ;       Routine:        ConClear
  5744                                  ;
  5745                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5746                                  ;
  5747                                  ;-----------------------------------------------------------------------------------------------------------------------
  5748                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5748                              <1> ConClear :
  5748 000004B4 B001                <1>  mov al,eClearConsoleScreen
  5748 000004B6 CD30                <1>  int _svc
  5749 000004B8 C3                                              ret                                                     ;return
  5750                                  ;-----------------------------------------------------------------------------------------------------------------------
  5751                                  ;
  5752                                  ;       Routine:        ConDate
  5753                                  ;
  5754                                  ;       Description:    This routine handles the DATE command.
  5755                                  ;
  5756                                  ;-----------------------------------------------------------------------------------------------------------------------
  5757                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5757                              <1> ConDate :
  5757 000004B9 BB53090000          <1>  mov ebx,%1
  5757 000004BE B018                <1>  mov al,eReadRealTimeClock
  5757 000004C0 CD30                <1>  int _svc
  5758                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5758 000004C2 BB53090000          <1>  mov ebx,%1
  5758 000004C7 BAC1080000          <1>  mov edx,%2
  5758 000004CC B00D                <1>  mov al,ePutDateString
  5758 000004CE CD30                <1>  int _svc
  5759                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5759 000004D0 BAC1080000          <1>  mov edx,%1
  5759 000004D5 B00C                <1>  mov al,ePutConsoleString
  5759 000004D7 CD30                <1>  int _svc
  5760                                                          putConsoleString  czNewLine                             ;write newline to console
  5760 000004D9 BA[030C0000]        <1>  mov edx,%1
  5760 000004DE B00C                <1>  mov al,ePutConsoleString
  5760 000004E0 CD30                <1>  int _svc
  5761 000004E2 C3                                              ret                                                     ;return
  5762                                  ;-----------------------------------------------------------------------------------------------------------------------
  5763                                  ;
  5764                                  ;       Routine:        ConDay
  5765                                  ;
  5766                                  ;       Description:    This routine handles the DAY command.
  5767                                  ;
  5768                                  ;-----------------------------------------------------------------------------------------------------------------------
  5769                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5769                              <1> ConDay :
  5769 000004E3 BB53090000          <1>  mov ebx,%1
  5769 000004E8 B018                <1>  mov al,eReadRealTimeClock
  5769 000004EA CD30                <1>  int _svc
  5770                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5770 000004EC BB53090000          <1>  mov ebx,%1
  5770 000004F1 BAC1080000          <1>  mov edx,%2
  5770 000004F6 B00E                <1>  mov al,ePutDayString
  5770 000004F8 CD30                <1>  int _svc
  5771                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5771 000004FA BAC1080000          <1>  mov edx,%1
  5771 000004FF B00C                <1>  mov al,ePutConsoleString
  5771 00000501 CD30                <1>  int _svc
  5772                                                          putConsoleString  czNewLine                             ;write newline to console
  5772 00000503 BA[030C0000]        <1>  mov edx,%1
  5772 00000508 B00C                <1>  mov al,ePutConsoleString
  5772 0000050A CD30                <1>  int _svc
  5773 0000050C C3                                              ret                                                     ;return
  5774                                  ;-----------------------------------------------------------------------------------------------------------------------
  5775                                  ;
  5776                                  ;       Routine:        ConExit
  5777                                  ;
  5778                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5779                                  ;
  5780                                  ;-----------------------------------------------------------------------------------------------------------------------
  5781                                  ConExit                 resetSystem                                             ;issue system reset
  5781                              <1> ConExit :
  5781 0000050D B019                <1>  mov al,eResetSystem
  5781 0000050F CD30                <1>  int _svc
  5782 00000511 C3                                              ret                                                     ;return
  5783                                  ;-----------------------------------------------------------------------------------------------------------------------
  5784                                  ;
  5785                                  ;       Routine:        ConFree
  5786                                  ;
  5787                                  ;       Description:    This routine handles the FREE command.
  5788                                  ;
  5789                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5790                                  ;
  5791                                  ;-----------------------------------------------------------------------------------------------------------------------
  5792 00000512 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5793 00000513 51                                              push    ecx                                             ;
  5794 00000514 56                                              push    esi                                             ;
  5795 00000515 57                                              push    edi                                             ;
  5796                                  ;
  5797                                  ;       Get address parameter
  5798                                  ;
  5799 00000516 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5800 0000051B BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5801 00000520 E830FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5802                                  ;
  5803                                  ;       Convert input parameter from hexadecimal string to binary
  5804                                  ;
  5805 00000525 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5806 0000052C 7421                                            je      .10                                             ;no, branch
  5807 0000052E BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5808                                  
  5809                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5809 00000533 B009                <1>  mov al,eHexadecimalToUnsigned
  5809 00000535 CD30                <1>  int _svc
  5810                                  
  5811 00000537 85C0                                            test    eax,eax                                         ;valid parameter?
  5812 00000539 7414                                            jz      .10                                             ;no, branch
  5813                                  ;
  5814                                  ;       Free memory block
  5815                                  ;
  5816                                                          freeMemory eax                                          ;free memory
  5816 0000053B 89C2                <1>  mov edx,%1
  5816 0000053D B004                <1>  mov al,eFreeMemory
  5816 0000053F CD30                <1>  int _svc
  5817                                  
  5818 00000541 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5819 00000544 7409                                            je      .10                                             ;no, branch
  5820                                  ;
  5821                                  ;       Indicate memory freed
  5822                                  ;
  5823                                                          putConsoleString czOK                                   ;indicate success
  5823 00000546 BA[060C0000]        <1>  mov edx,%1
  5823 0000054B B00C                <1>  mov al,ePutConsoleString
  5823 0000054D CD30                <1>  int _svc
  5824                                  ;
  5825                                  ;       Restore and return
  5826                                  ;
  5827 0000054F 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5828 00000550 5E                                              pop     esi                                             ;
  5829 00000551 59                                              pop     ecx                                             ;
  5830 00000552 5B                                              pop     ebx                                             ;
  5831 00000553 C3                                              ret                                                     ;return
  5832                                  ;-----------------------------------------------------------------------------------------------------------------------
  5833                                  ;
  5834                                  ;       Routine:        ConHour
  5835                                  ;
  5836                                  ;       Description:    This routine Handles the HOUR command.
  5837                                  ;
  5838                                  ;-----------------------------------------------------------------------------------------------------------------------
  5839                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5839                              <1> ConHour :
  5839 00000554 BB53090000          <1>  mov ebx,%1
  5839 00000559 B018                <1>  mov al,eReadRealTimeClock
  5839 0000055B CD30                <1>  int _svc
  5840                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5840 0000055D BB53090000          <1>  mov ebx,%1
  5840 00000562 BAC1080000          <1>  mov edx,%2
  5840 00000567 B00F                <1>  mov al,ePutHourString
  5840 00000569 CD30                <1>  int _svc
  5841                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5841 0000056B BAC1080000          <1>  mov edx,%1
  5841 00000570 B00C                <1>  mov al,ePutConsoleString
  5841 00000572 CD30                <1>  int _svc
  5842                                                          putConsoleString  czNewLine                             ;write newline to console
  5842 00000574 BA[030C0000]        <1>  mov edx,%1
  5842 00000579 B00C                <1>  mov al,ePutConsoleString
  5842 0000057B CD30                <1>  int _svc
  5843 0000057D C3                                              ret                                                     ;return
  5844                                  ;-----------------------------------------------------------------------------------------------------------------------
  5845                                  ;
  5846                                  ;       Routine:        ConInt6
  5847                                  ;
  5848                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5849                                  ;
  5850                                  ;-----------------------------------------------------------------------------------------------------------------------
  5851 0000057E 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5852 00000580 C3                                              ret                                                     ;return (not executed)
  5853                                  ;-----------------------------------------------------------------------------------------------------------------------
  5854                                  ;
  5855                                  ;       Routine:        ConMalloc
  5856                                  ;
  5857                                  ;       Description:    This routine handles the MALLOC command.
  5858                                  ;
  5859                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5860                                  ;
  5861                                  ;-----------------------------------------------------------------------------------------------------------------------
  5862 00000581 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5863 00000582 51                                              push    ecx                                             ;
  5864 00000583 56                                              push    esi                                             ;
  5865 00000584 57                                              push    edi                                             ;
  5866                                  ;
  5867                                  ;       Get size parameter
  5868                                  ;
  5869 00000585 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5870 0000058A BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5871 0000058F E8C1FEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5872                                  ;
  5873                                  ;       Convert input parameter from decimal string to binary
  5874                                  ;
  5875 00000594 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5876 0000059B 7434                                            je      .10                                             ;no, branch
  5877 0000059D BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5878                                  
  5879                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5879 000005A2 B003                <1>  mov al,eDecimalToUnsigned
  5879 000005A4 CD30                <1>  int _svc
  5880                                  
  5881 000005A6 85C0                                            test    eax,eax                                         ;valid parameter?
  5882 000005A8 7427                                            jz      .10                                             ;no, branch
  5883                                  ;
  5884                                  ;       Allocate memory block
  5885                                  ;
  5886                                                          allocateMemory eax                                      ;allocate memory
  5886 000005AA 89C1                <1>  mov ecx,%1
  5886 000005AC B000                <1>  mov al,eAllocateMemory
  5886 000005AE CD30                <1>  int _svc
  5887                                  
  5888 000005B0 85C0                                            test    eax,eax                                         ;memory allocated?
  5889 000005B2 741D                                            jz      .10                                             ;no, branch
  5890                                  ;
  5891                                  ;       Report allocated memory block address
  5892                                  ;
  5893 000005B4 BAC1080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5894 000005B9 89C1                                            mov     ecx,eax                                         ;memory address
  5895                                  
  5896                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5896 000005BB B01B                <1>  mov al,eUnsignedToHexadecimal
  5896 000005BD CD30                <1>  int _svc
  5897                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5897 000005BF BAC1080000          <1>  mov edx,%1
  5897 000005C4 B00C                <1>  mov al,ePutConsoleString
  5897 000005C6 CD30                <1>  int _svc
  5898                                                          putConsoleString czNewLine                              ;display new line
  5898 000005C8 BA[030C0000]        <1>  mov edx,%1
  5898 000005CD B00C                <1>  mov al,ePutConsoleString
  5898 000005CF CD30                <1>  int _svc
  5899                                  
  5900 000005D1 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5901 000005D2 5E                                              pop     esi                                             ;
  5902 000005D3 59                                              pop     ecx                                             ;
  5903 000005D4 5B                                              pop     ebx                                             ;
  5904 000005D5 C3                                              ret                                                     ;return
  5905                                  ;-----------------------------------------------------------------------------------------------------------------------
  5906                                  ;
  5907                                  ;       Routine:        ConMem
  5908                                  ;
  5909                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5910                                  ;
  5911                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5912                                  ;
  5913                                  ;-----------------------------------------------------------------------------------------------------------------------
  5914 000005D6 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  5915 000005D7 56                                              push    esi                                             ;
  5916 000005D8 57                                              push    edi                                             ;
  5917                                  ;
  5918                                  ;       Update the source address if a parameter is given.
  5919                                  ;
  5920 000005D9 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5921 000005DE BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5922 000005E3 E86DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5923 000005E8 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5924 000005EF 740E                                            je      .10                                             ;no, branch
  5925 000005F1 BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5926                                  
  5927                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5927 000005F6 B009                <1>  mov al,eHexadecimalToUnsigned
  5927 000005F8 CD30                <1>  int _svc
  5928                                  
  5929 000005FA A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  5930                                  ;
  5931                                  ;       Setup source address and row count.
  5932                                  ;
  5933 000005FF 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5934 00000605 31C9                                            xor     ecx,ecx                                         ;zero register
  5935 00000607 B110                                            mov     cl,16                                           ;row count
  5936                                  ;
  5937                                  ;       Start the row with the source address in hexadecimal.
  5938                                  ;
  5939 00000609 51                      .20                     push    ecx                                             ;save remaining rows
  5940 0000060A BFC1080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5941 0000060F 89FA                                            mov     edx,edi                                         ;output buffer address
  5942 00000611 89F1                                            mov     ecx,esi                                         ;console memory address
  5943                                  
  5944                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5944 00000613 B01B                <1>  mov al,eUnsignedToHexadecimal
  5944 00000615 CD30                <1>  int _svc
  5945                                  
  5946 00000617 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  5947 0000061A B020                                            mov     al,' '                                          ;ascii space
  5948 0000061C AA                                              stosb                                                   ;store delimiter
  5949                                  ;
  5950                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5951                                  ;
  5952 0000061D 31C9                                            xor     ecx,ecx                                         ;zero register
  5953 0000061F B110                                            mov     cl,16                                           ;loop count
  5954 00000621 51                      .30                     push    ecx                                             ;save loop count
  5955 00000622 AC                                              lodsb                                                   ;memory byte
  5956 00000623 88C4                                            mov     ah,al                                           ;memory byte
  5957 00000625 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  5958 00000628 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5959 0000062A 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5960 0000062C 7202                                            jb      .40                                             ;yes, skip ahead
  5961 0000062E 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5962 00000630 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5963 00000631 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  5964 00000633 240F                                            and     al,0fh                                          ;mask out high-order bits
  5965 00000635 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5966 00000637 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5967 00000639 7202                                            jb      .50                                             ;yes, skip ahead
  5968 0000063B 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5969 0000063D AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5970 0000063E B020                                            mov     al,' '                                          ;ascii space
  5971 00000640 AA                                              stosb                                                   ;store ascii space delimiter
  5972 00000641 59                                              pop     ecx                                             ;loop count
  5973 00000642 E2DD                                            loop    .30                                             ;next
  5974                                  ;
  5975                                  ;       Output printable ASCII character section for the row.
  5976                                  ;
  5977 00000644 83EE10                                          sub     esi,16                                          ;reset source pointer
  5978 00000647 B110                                            mov     cl,16                                           ;loop count
  5979 00000649 AC                      .60                     lodsb                                                   ;source byte
  5980 0000064A 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  5981 0000064C 7204                                            jb      .70                                             ;no, skip ahead
  5982 0000064E 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  5983 00000650 7202                                            jb      .80                                             ;yes, skip ahead
  5984 00000652 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  5985 00000654 AA                      .80                     stosb                                                   ;store printable ascii byte
  5986 00000655 E2F2                                            loop    .60                                             ;next source byte
  5987 00000657 30C0                                            xor     al,al                                           ;nul-terminator
  5988 00000659 AA                                              stosb                                                   ;terminate output line
  5989                                  ;
  5990                                  ;       Display constructed output buffer and newline.
  5991                                  ;
  5992                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5992 0000065A BAC1080000          <1>  mov edx,%1
  5992 0000065F B00C                <1>  mov al,ePutConsoleString
  5992 00000661 CD30                <1>  int _svc
  5993                                                          putConsoleString czNewLine                              ;display new line
  5993 00000663 BA[030C0000]        <1>  mov edx,%1
  5993 00000668 B00C                <1>  mov al,ePutConsoleString
  5993 0000066A CD30                <1>  int _svc
  5994                                  ;
  5995                                  ;       Repeat until all lines displayed and preserve source address.
  5996                                  ;
  5997 0000066C 59                                              pop     ecx                                             ;remaining rows
  5998 0000066D E29A                                            loop    .20                                             ;next row
  5999 0000066F 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  6000 00000675 5F                                              pop     edi                                             ;restore regs
  6001 00000676 5E                                              pop     esi                                             ;
  6002 00000677 5B                                              pop     ebx                                             ;
  6003 00000678 C3                                              ret                                                     ;return
  6004                                  ;-----------------------------------------------------------------------------------------------------------------------
  6005                                  ;
  6006                                  ;       Routine:        ConMinute
  6007                                  ;
  6008                                  ;       Description:    This routine Handles the MINUTE command.
  6009                                  ;
  6010                                  ;-----------------------------------------------------------------------------------------------------------------------
  6011                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6011                              <1> ConMinute :
  6011 00000679 BB53090000          <1>  mov ebx,%1
  6011 0000067E B018                <1>  mov al,eReadRealTimeClock
  6011 00000680 CD30                <1>  int _svc
  6012                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  6012 00000682 BB53090000          <1>  mov ebx,%1
  6012 00000687 BAC1080000          <1>  mov edx,%2
  6012 0000068C B010                <1>  mov al,ePutMinuteString
  6012 0000068E CD30                <1>  int _svc
  6013                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6013 00000690 BAC1080000          <1>  mov edx,%1
  6013 00000695 B00C                <1>  mov al,ePutConsoleString
  6013 00000697 CD30                <1>  int _svc
  6014                                                          putConsoleString  czNewLine                             ;write newline to console
  6014 00000699 BA[030C0000]        <1>  mov edx,%1
  6014 0000069E B00C                <1>  mov al,ePutConsoleString
  6014 000006A0 CD30                <1>  int _svc
  6015 000006A2 C3                                              ret                                                     ;return
  6016                                  ;-----------------------------------------------------------------------------------------------------------------------
  6017                                  ;
  6018                                  ;       Routine:        ConMonth
  6019                                  ;
  6020                                  ;       Description:    This routine Handles the MONTH command.
  6021                                  ;
  6022                                  ;-----------------------------------------------------------------------------------------------------------------------
  6023                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6023                              <1> ConMonth :
  6023 000006A3 BB53090000          <1>  mov ebx,%1
  6023 000006A8 B018                <1>  mov al,eReadRealTimeClock
  6023 000006AA CD30                <1>  int _svc
  6024                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  6024 000006AC BB53090000          <1>  mov ebx,%1
  6024 000006B1 BAC1080000          <1>  mov edx,%2
  6024 000006B6 B011                <1>  mov al,ePutMonthString
  6024 000006B8 CD30                <1>  int _svc
  6025                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6025 000006BA BAC1080000          <1>  mov edx,%1
  6025 000006BF B00C                <1>  mov al,ePutConsoleString
  6025 000006C1 CD30                <1>  int _svc
  6026                                                          putConsoleString  czNewLine                             ;write newline to console
  6026 000006C3 BA[030C0000]        <1>  mov edx,%1
  6026 000006C8 B00C                <1>  mov al,ePutConsoleString
  6026 000006CA CD30                <1>  int _svc
  6027 000006CC C3                                              ret                                                     ;return
  6028                                  ;-----------------------------------------------------------------------------------------------------------------------
  6029                                  ;
  6030                                  ;       Routine:        ConMonthName
  6031                                  ;
  6032                                  ;       Description:    This routine Handles the MONTH.NAME command.
  6033                                  ;
  6034                                  ;-----------------------------------------------------------------------------------------------------------------------
  6035                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  6035                              <1> ConMonthName :
  6035 000006CD BB53090000          <1>  mov ebx,%1
  6035 000006D2 B018                <1>  mov al,eReadRealTimeClock
  6035 000006D4 CD30                <1>  int _svc
  6036                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  6036 000006D6 BB53090000          <1>  mov ebx,%1
  6036 000006DB BAC1080000          <1>  mov edx,%2
  6036 000006E0 B012                <1>  mov al,ePutMonthNameString
  6036 000006E2 CD30                <1>  int _svc
  6037                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  6037 000006E4 BAC1080000          <1>  mov edx,%1
  6037 000006E9 B00C                <1>  mov al,ePutConsoleString
  6037 000006EB CD30                <1>  int _svc
  6038                                                          putConsoleString   czNewLine                            ;write newline to console
  6038 000006ED BA[030C0000]        <1>  mov edx,%1
  6038 000006F2 B00C                <1>  mov al,ePutConsoleString
  6038 000006F4 CD30                <1>  int _svc
  6039 000006F6 C3                                              ret                                                     ;return
  6040                                  ;-----------------------------------------------------------------------------------------------------------------------
  6041                                  ;
  6042                                  ;       Routine:        ConPCIProbe
  6043                                  ;
  6044                                  ;       Description:    This routine handles the PCIProbe command.
  6045                                  ;
  6046                                  ;-----------------------------------------------------------------------------------------------------------------------
  6047 000006F7 53                      ConPCIProbe             push    ebx                                             ;save non-volatile regs
  6048                                  ;
  6049                                  ;       Initialize variables.
  6050                                  ;       Construct PCI selector.
  6051                                  ;       Read PCI configuration data.
  6052                                  ;
  6053 000006F8 BB5B090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  6054 000006FD E868000000                                      call    ConInitPCIContext                               ;initialize PCI struct
  6055 00000702 E878000000              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  6056 00000707 E894000000                                      call    ConReadPCIConfigData                            ;read the configuration data
  6057                                  ;
  6058                                  ;       Interpret PCI data value and display finding.
  6059                                  ;
  6060 0000070C 83F8FF                                          cmp     eax,-1                                          ;function defined?
  6061 0000070F 7508                                            jne     .20                                             ;yes, branch
  6062 00000711 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  6063 00000715 744A                                            je      .40                                             ;yes, skip to next device
  6064 00000717 EB41                                            jmp     short .30                                       ;no, skip to next function
  6065                                  ;
  6066                                  ;       Build PCI identifying string.
  6067                                  ;       Write identifying string to console.
  6068                                  ;       Determine the vendor and chip.
  6069                                  ;       Write vendor and chip to console.
  6070                                  ;
  6071 00000719 BA32090000              .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6072 0000071E E88E000000                                      call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6073 00000723 E8CA000000                                      call    ConInterpretPCIData                             ;update flags based on data
  6074                                  
  6075                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6075 00000728 BA32090000          <1>  mov edx,%1
  6075 0000072D B00C                <1>  mov al,ePutConsoleString
  6075 0000072F CD30                <1>  int _svc
  6076                                                          putConsoleString czSpace                                ;space delimiter
  6076 00000731 BA[A90C0000]        <1>  mov edx,%1
  6076 00000736 B00C                <1>  mov al,ePutConsoleString
  6076 00000738 CD30                <1>  int _svc
  6077                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6077 0000073A 8B530C              <1>  mov edx,%1
  6077 0000073D B00C                <1>  mov al,ePutConsoleString
  6077 0000073F CD30                <1>  int _svc
  6078                                                          putConsoleString czSpace                                ;space delimiter
  6078 00000741 BA[A90C0000]        <1>  mov edx,%1
  6078 00000746 B00C                <1>  mov al,ePutConsoleString
  6078 00000748 CD30                <1>  int _svc
  6079                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6079 0000074A 8B5310              <1>  mov edx,%1
  6079 0000074D B00C                <1>  mov al,ePutConsoleString
  6079 0000074F CD30                <1>  int _svc
  6080                                                          putConsoleString czNewLine                              ;display new line
  6080 00000751 BA[030C0000]        <1>  mov edx,%1
  6080 00000756 B00C                <1>  mov al,ePutConsoleString
  6080 00000758 CD30                <1>  int _svc
  6081                                  ;
  6082                                  ;       Next function.
  6083                                  ;
  6084 0000075A E85F010000              .30                     call    ConNextPCIFunction                              ;next function
  6085 0000075F 72A1                                            jb      .10                                             ;continue if no overflow
  6086                                  ;
  6087                                  ;       Next device, bus.
  6088                                  ;
  6089 00000761 E866010000              .40                     call    ConNextPCIDevice                                ;next device, bus
  6090 00000766 729A                                            jb      .10                                             ;continue if no overflow
  6091                                  ;
  6092                                  ;       Restore and return.
  6093                                  ;
  6094 00000768 5B                                              pop     ebx                                             ;restore non-volatile regs
  6095 00000769 C3                                              ret                                                     ;return
  6096                                  ;-----------------------------------------------------------------------------------------------------------------------
  6097                                  ;
  6098                                  ;       Routine:        ConInitPCIContext
  6099                                  ;
  6100                                  ;       Description:    This routine initializes a PCI structure.
  6101                                  ;
  6102                                  ;       In:             DS:EBX  PCI structure address
  6103                                  ;
  6104                                  ;-----------------------------------------------------------------------------------------------------------------------
  6105 0000076A 51                      ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  6106 0000076B 57                                              push    edi                                             ;
  6107 0000076C 06                                              push    es                                              ;
  6108                                  ;
  6109                                  ;       Zero context.
  6110                                  ;
  6111 0000076D 1E                                              push    ds                                              ;load data segment...
  6112 0000076E 07                                              pop     es                                              ;...into extra segment
  6113 0000076F 89DF                                            mov     edi,ebx                                         ;PCI structure offset
  6114 00000771 B90C000000                                      mov     ecx,EPCILEN                                     ;PCI structure length
  6115 00000776 30C0                                            xor     al,al                                           ;zero
  6116 00000778 FC                                              cld                                                     ;forward strings
  6117 00000779 F3AA                                            rep     stosb                                           ;zero structure members
  6118                                  ;
  6119                                  ;       Restore and return.
  6120                                  ;
  6121 0000077B 07                                              pop     es                                              ;restore non-volatile regs
  6122 0000077C 5F                                              pop     edi                                             ;
  6123 0000077D 59                                              pop     ecx                                             ;
  6124 0000077E C3                                              ret                                                     ;return
  6125                                  ;-----------------------------------------------------------------------------------------------------------------------
  6126                                  ;
  6127                                  ;       Routine:        ConBuildPCISelector
  6128                                  ;
  6129                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  6130                                  ;
  6131                                  ;       In:             DS:EBX  PCI structure address
  6132                                  ;
  6133                                  ;       Out:            EAX     bus, device, function, register selector
  6134                                  ;
  6135                                  ;-----------------------------------------------------------------------------------------------------------------------
  6136 0000077F 8A23                    ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  6137 00000781 8A5301                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  6138 00000784 C0E203                                          shl     dl,3                                            ;DL = dddd d000
  6139 00000787 8A4302                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  6140 0000078A 2407                                            and     al,007h                                         ;AL = 0000 0fff
  6141 0000078C 08D0                                            or      al,dl                                           ;AL = dddd dfff
  6142 0000078E 0FB7C0                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  6143 00000791 C1E008                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  6144 00000794 8A4303                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6145 00000797 0D00000080                                      or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6146 0000079C 894304                                          mov     [ebx+PCI.selector],eax                          ;set selector
  6147 0000079F C3                                              ret                                                     ;return
  6148                                  ;-----------------------------------------------------------------------------------------------------------------------
  6149                                  ;
  6150                                  ;       Routine:        ConReadPCIConfigData
  6151                                  ;
  6152                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  6153                                  ;
  6154                                  ;       In:             DS:EBX  PCI structure address
  6155                                  ;
  6156                                  ;       Out:            EAX     config data
  6157                                  ;
  6158                                  ;-----------------------------------------------------------------------------------------------------------------------
  6159 000007A0 B60C                    ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  6160 000007A2 B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  6161 000007A4 8B4304                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  6162 000007A7 EF                                              out     dx,eax                                          ;select bus, device, function, reg
  6163 000007A8 B60C                                            mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  6164 000007AA B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  6165 000007AC ED                                              in      eax,dx                                          ;read register
  6166 000007AD 894308                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  6167 000007B0 C3                                              ret                                                     ;return
  6168                                  ;-----------------------------------------------------------------------------------------------------------------------
  6169                                  ;
  6170                                  ;       Routine:        ConBuildPCIIdent
  6171                                  ;
  6172                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  6173                                  ;                       Function code values.
  6174                                  ;
  6175                                  ;       In:             DS:EBX  PCI structure address
  6176                                  ;                       DS:EDX  output buffer address 999.99.9\0
  6177                                  ;
  6178                                  ;-----------------------------------------------------------------------------------------------------------------------
  6179 000007B1 57                      ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  6180 000007B2 06                                              push    es                                              ;
  6181                                  ;
  6182                                  ;       Establish addressability
  6183                                  ;
  6184 000007B3 1E                                              push    ds                                              ;load data segment...
  6185 000007B4 07                                              pop     es                                              ;...into extra segment reg
  6186                                  ;
  6187                                  ;       Build identifier string (bus.device.function)
  6188                                  ;
  6189 000007B5 89D7                                            mov     edi,edx                                         ;output buffer address
  6190 000007B7 8A03                                            mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  6191 000007B9 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  6192 000007BB B164                                            mov     cl,100                                          ;divisor (10^2)
  6193 000007BD F6F1                                            div     cl                                              ;AL=100's, AH=bus MOD 100
  6194 000007BF 0C30                                            or      al,30h                                          ;apply ASCII zone
  6195 000007C1 FC                                              cld                                                     ;forward strings
  6196 000007C2 AA                                              stosb                                                   ;store 100's digit
  6197 000007C3 88E0                                            mov     al,ah                                           ;bus MOD 100
  6198 000007C5 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  6199 000007C7 B10A                                            mov     cl,10                                           ;divisor (10^1)
  6200 000007C9 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  6201 000007CB 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  6202 000007CF 66AB                                            stosw                                                   ;store 10's and 1's
  6203 000007D1 B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6204 000007D3 AA                                              stosb                                                   ;store delimiter
  6205 000007D4 8A4301                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  6206 000007D7 30E4                                            xor     ah,ah                                           ;zero high order dividend
  6207 000007D9 B10A                                            mov     cl,10                                           ;divisor (10^1)
  6208 000007DB F6F1                                            div     cl                                              ;AL=10's, AH=1's
  6209 000007DD 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  6210 000007E1 66AB                                            stosw                                                   ;store 10's and 1's
  6211 000007E3 B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6212 000007E5 AA                                              stosb                                                   ;store delimiter
  6213 000007E6 8A4302                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  6214 000007E9 0C30                                            or      al,30h                                          ;apply ASCII zone
  6215 000007EB AA                                              stosb                                                   ;store 1's
  6216 000007EC 30C0                                            xor     al,al                                           ;null terminator
  6217 000007EE AA                                              stosb                                                   ;store terminator
  6218                                  ;
  6219                                  ;       Restore and return.
  6220                                  ;
  6221 000007EF 07                                              pop     es                                              ;restore non-volatile regs
  6222 000007F0 5F                                              pop     edi                                             ;
  6223 000007F1 C3                                              ret                                                     ;return
  6224                                  ;-----------------------------------------------------------------------------------------------------------------------
  6225                                  ;
  6226                                  ;       Routine:        ConInterpretPCIData
  6227                                  ;
  6228                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  6229                                  ;
  6230                                  ;       In:             DS:EBX  PCI structure address
  6231                                  ;
  6232                                  ;-----------------------------------------------------------------------------------------------------------------------
  6233 000007F2 B8[180B0000]            ConInterpretPCIData     mov     eax,czApple
  6234 000007F7 66817B086B10                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  6235 000007FD 751A                                            jne     .10                                             ;no, branch
  6236 000007FF BA[DB0C0000]                                    mov     edx,czUSBController
  6237 00000804 66837B0A3F                                      cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  6238 00000809 0F84A8000000                                    je      .40                                             ;yes, branch
  6239 0000080F BA[120C0000]                                    mov     edx,czOther                                     ;other
  6240 00000814 E99E000000                                      jmp     .40                                             ;continue
  6241 00000819 B8[FA0B0000]            .10                     mov     eax,czIntel                                     ;Intel
  6242 0000081E 66817B088680                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  6243 00000824 7559                                            jne     .20                                             ;no, branch
  6244 00000826 BA[690C0000]                                    mov     edx,czPro1000MT                                 ;Pro/1000 MT
  6245 0000082B 66817B0A0F10                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  6246 00000831 0F8480000000                                    je      .40                                             ;yes, branch
  6247 00000837 BA[180C0000]                                    mov     edx,czPCIAndMem                                 ;PCI and Memory
  6248 0000083C 66817B0A3712                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  6249 00000842 7473                                            je      .40                                             ;yes, branch
  6250 00000844 BA[1E0B0000]                                    mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  6251 00000849 66817B0A1524                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  6252 0000084F 7466                                            je      .40                                             ;yes, branch
  6253 00000851 BA[270C0000]                                    mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  6254 00000856 66817B0A0070                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  6255 0000085C 7459                                            je      .40                                             ;yes, branch
  6256 0000085E BA[520D0000]                                    mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  6257 00000863 66817B0A1171                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  6258 00000869 744C                                            je      .40                                             ;yes, branch
  6259 0000086B BA[3F0C0000]                                    mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  6260 00000870 66817B0A1371                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  6261 00000876 743F                                            je      .40                                             ;yes, branch
  6262 00000878 BA[120C0000]                                    mov     edx,czOther                                     ;other
  6263 0000087D EB38                                            jmp     .40                                             ;continue
  6264 0000087F B8[0B0C0000]            .20                     mov     eax,czOracle                                    ;Oracle
  6265 00000884 66817B08EE80                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  6266 0000088A 7521                                            jne     .30                                             ;no, branch
  6267 0000088C BA[FC0C0000]                                    mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  6268 00000891 66817B0AEFBE                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  6269 00000897 741E                                            je      .40                                             ;yes, branch
  6270 00000899 BA[EA0C0000]                                    mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  6271 0000089E 66817B0AFECA                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  6272 000008A4 7411                                            je      .40                                             ;yes, branch
  6273 000008A6 BA[120C0000]                                    mov     edx,czOther                                     ;other
  6274 000008AB EB0A                                            jmp     .40                                             ;continue
  6275 000008AD B8[120C0000]            .30                     mov     eax,czOther                                     ;other
  6276 000008B2 BA[120C0000]                                    mov     edx,czOther                                     ;other
  6277 000008B7 89430C                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  6278 000008BA 895310                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  6279 000008BD C3                                              ret                                                     ;return
  6280                                  ;-----------------------------------------------------------------------------------------------------------------------
  6281                                  ;
  6282                                  ;       Routine:        ConNextPCIFunction
  6283                                  ;
  6284                                  ;       Description:    This routine increments the function of the device.
  6285                                  ;
  6286                                  ;       In:             DS:EBX  PCI structure address
  6287                                  ;
  6288                                  ;       Out:            CY      0 = overflow
  6289                                  ;                               1 = no overflow, continue
  6290                                  ;
  6291                                  ;-----------------------------------------------------------------------------------------------------------------------
  6292 000008BE FE4302                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  6293 000008C1 807B0208                                        cmp     byte [ebx+PCI.function],8                       ;at limit?
  6294 000008C5 7204                                            jb      .10                                             ;no, continue
  6295 000008C7 C6430200                                        mov     byte [ebx+PCI.function],0                       ;zero function
  6296 000008CB C3                      .10                     ret                                                     ;return
  6297                                  ;-----------------------------------------------------------------------------------------------------------------------
  6298                                  ;
  6299                                  ;       Routine:        ConNextPCIDevice
  6300                                  ;
  6301                                  ;       Description:    This routine increments the device of the PCI across buses.
  6302                                  ;
  6303                                  ;       In:             DS:EBX  PCI structure address
  6304                                  ;
  6305                                  ;       Out:            CY      0 = overflow
  6306                                  ;                               1 = no overflow, continue
  6307                                  ;
  6308                                  ;-----------------------------------------------------------------------------------------------------------------------
  6309 000008CC FE4301                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  6310 000008CF 807B0120                                        cmp     byte [ebx+PCI.device],32                        ;at limit?
  6311 000008D3 720E                                            jb      .10                                             ;no, continue
  6312 000008D5 C6430100                                        mov     byte [ebx+PCI.device],0                         ;zero device
  6313 000008D9 FE03                                            inc     byte [ebx+PCI.bus]                              ;next bus
  6314 000008DB 803B08                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  6315 000008DE 7203                                            jb      .10                                             ;no, continue
  6316 000008E0 C60300                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  6317 000008E3 C3                      .10                     ret                                                     ;return
  6318                                  ;-----------------------------------------------------------------------------------------------------------------------
  6319                                  ;
  6320                                  ;       Routine:        ConSecond
  6321                                  ;
  6322                                  ;       Description:    This routine Handles the SECOND command.
  6323                                  ;
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6325                              <1> ConSecond :
  6325 000008E4 BB53090000          <1>  mov ebx,%1
  6325 000008E9 B018                <1>  mov al,eReadRealTimeClock
  6325 000008EB CD30                <1>  int _svc
  6326                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  6326 000008ED BB53090000          <1>  mov ebx,%1
  6326 000008F2 BAC1080000          <1>  mov edx,%2
  6326 000008F7 B013                <1>  mov al,ePutSecondString
  6326 000008F9 CD30                <1>  int _svc
  6327                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6327 000008FB BAC1080000          <1>  mov edx,%1
  6327 00000900 B00C                <1>  mov al,ePutConsoleString
  6327 00000902 CD30                <1>  int _svc
  6328                                                          putConsoleString  czNewLine                             ;write newline to console
  6328 00000904 BA[030C0000]        <1>  mov edx,%1
  6328 00000909 B00C                <1>  mov al,ePutConsoleString
  6328 0000090B CD30                <1>  int _svc
  6329 0000090D C3                                              ret                                                     ;return
  6330                                  ;-----------------------------------------------------------------------------------------------------------------------
  6331                                  ;
  6332                                  ;       Routine:        ConTime
  6333                                  ;
  6334                                  ;       Description:    This routine Handles the TIME command.
  6335                                  ;
  6336                                  ;-----------------------------------------------------------------------------------------------------------------------
  6337                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6337                              <1> ConTime :
  6337 0000090E BB53090000          <1>  mov ebx,%1
  6337 00000913 B018                <1>  mov al,eReadRealTimeClock
  6337 00000915 CD30                <1>  int _svc
  6338                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6338 00000917 BB53090000          <1>  mov ebx,%1
  6338 0000091C BAC1080000          <1>  mov edx,%2
  6338 00000921 B014                <1>  mov al,ePutTimeString
  6338 00000923 CD30                <1>  int _svc
  6339                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6339 00000925 BAC1080000          <1>  mov edx,%1
  6339 0000092A B00C                <1>  mov al,ePutConsoleString
  6339 0000092C CD30                <1>  int _svc
  6340                                                          putConsoleString  czNewLine                             ;write newline to console
  6340 0000092E BA[030C0000]        <1>  mov edx,%1
  6340 00000933 B00C                <1>  mov al,ePutConsoleString
  6340 00000935 CD30                <1>  int _svc
  6341 00000937 C3                                              ret                                                     ;return
  6342                                  ;-----------------------------------------------------------------------------------------------------------------------
  6343                                  ;
  6344                                  ;       Routine:        ConVersion
  6345                                  ;
  6346                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6347                                  ;
  6348                                  ;-----------------------------------------------------------------------------------------------------------------------
  6349                                  ConVersion              putConsoleString czTitle                                ;display version message
  6349                              <1> ConVersion :
  6349 00000938 BA[AB0C0000]        <1>  mov edx,%1
  6349 0000093D B00C                <1>  mov al,ePutConsoleString
  6349 0000093F CD30                <1>  int _svc
  6350 00000941 C3                                              ret                                                     ;return
  6351                                  ;-----------------------------------------------------------------------------------------------------------------------
  6352                                  ;
  6353                                  ;       Routine:        ConWeekday
  6354                                  ;
  6355                                  ;       Description:    This routine handles the WEEKDAY command.
  6356                                  ;
  6357                                  ;-----------------------------------------------------------------------------------------------------------------------
  6358                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6358                              <1> ConWeekday :
  6358 00000942 BB53090000          <1>  mov ebx,%1
  6358 00000947 B018                <1>  mov al,eReadRealTimeClock
  6358 00000949 CD30                <1>  int _svc
  6359                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6359 0000094B BB53090000          <1>  mov ebx,%1
  6359 00000950 BAC1080000          <1>  mov edx,%2
  6359 00000955 B015                <1>  mov al,ePutWeekdayString
  6359 00000957 CD30                <1>  int _svc
  6360                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6360 00000959 BAC1080000          <1>  mov edx,%1
  6360 0000095E B00C                <1>  mov al,ePutConsoleString
  6360 00000960 CD30                <1>  int _svc
  6361                                                          putConsoleString  czNewLine                             ;write newline to console
  6361 00000962 BA[030C0000]        <1>  mov edx,%1
  6361 00000967 B00C                <1>  mov al,ePutConsoleString
  6361 00000969 CD30                <1>  int _svc
  6362 0000096B C3                                              ret                                                     ;return
  6363                                  ;-----------------------------------------------------------------------------------------------------------------------
  6364                                  ;
  6365                                  ;       Routine:        ConWeekdayName
  6366                                  ;
  6367                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6368                                  ;
  6369                                  ;-----------------------------------------------------------------------------------------------------------------------
  6370                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6370                              <1> ConWeekdayName :
  6370 0000096C BB53090000          <1>  mov ebx,%1
  6370 00000971 B018                <1>  mov al,eReadRealTimeClock
  6370 00000973 CD30                <1>  int _svc
  6371                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6371 00000975 BB53090000          <1>  mov ebx,%1
  6371 0000097A BAC1080000          <1>  mov edx,%2
  6371 0000097F B016                <1>  mov al,ePutWeekdayNameString
  6371 00000981 CD30                <1>  int _svc
  6372                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6372 00000983 BAC1080000          <1>  mov edx,%1
  6372 00000988 B00C                <1>  mov al,ePutConsoleString
  6372 0000098A CD30                <1>  int _svc
  6373                                                          putConsoleString     czNewLine                                  ;write newline to console
  6373 0000098C BA[030C0000]        <1>  mov edx,%1
  6373 00000991 B00C                <1>  mov al,ePutConsoleString
  6373 00000993 CD30                <1>  int _svc
  6374 00000995 C3                                              ret                                                             ;return
  6375                                  ;-----------------------------------------------------------------------------------------------------------------------
  6376                                  ;
  6377                                  ;       Routine:        ConYear
  6378                                  ;
  6379                                  ;       Description:    This routine Handles the YEAR command.
  6380                                  ;
  6381                                  ;-----------------------------------------------------------------------------------------------------------------------
  6382                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6382                              <1> ConYear :
  6382 00000996 BB53090000          <1>  mov ebx,%1
  6382 0000099B B018                <1>  mov al,eReadRealTimeClock
  6382 0000099D CD30                <1>  int _svc
  6383                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6383 0000099F BB53090000          <1>  mov ebx,%1
  6383 000009A4 BAC1080000          <1>  mov edx,%2
  6383 000009A9 B017                <1>  mov al,ePutYearString
  6383 000009AB CD30                <1>  int _svc
  6384                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6384 000009AD BAC1080000          <1>  mov edx,%1
  6384 000009B2 B00C                <1>  mov al,ePutConsoleString
  6384 000009B4 CD30                <1>  int _svc
  6385                                                          putConsoleString  czNewLine                             ;write newline to console
  6385 000009B6 BA[030C0000]        <1>  mov edx,%1
  6385 000009BB B00C                <1>  mov al,ePutConsoleString
  6385 000009BD CD30                <1>  int _svc
  6386 000009BF C3                                              ret                                                     ;return
  6387                                  ;-----------------------------------------------------------------------------------------------------------------------
  6388                                  ;
  6389                                  ;       Routine:        ConYearIsLeap
  6390                                  ;
  6391                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6392                                  ;
  6393                                  ;-----------------------------------------------------------------------------------------------------------------------
  6394                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6394                              <1> ConYearIsLeap :
  6394 000009C0 BB53090000          <1>  mov ebx,%1
  6394 000009C5 B018                <1>  mov al,eReadRealTimeClock
  6394 000009C7 CD30                <1>  int _svc
  6395                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6395 000009C9 BB53090000          <1>  mov ebx,%1
  6395 000009CE B00A                <1>  mov al,eIsLeapYear
  6395 000009D0 CD30                <1>  int _svc
  6396                                  
  6397 000009D2 E30B                                            jecxz   .10                                             ;branch if not leap
  6398                                  
  6399                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6399 000009D4 BA[180D0000]        <1>  mov edx,%1
  6399 000009D9 B00C                <1>  mov al,ePutConsoleString
  6399 000009DB CD30                <1>  int _svc
  6400                                  
  6401 000009DD EB09                                            jmp     .20                                             ;continue
  6402                                  
  6403                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6403                              <1> .10 :
  6403 000009DF BA[330D0000]        <1>  mov edx,%1
  6403 000009E4 B00C                <1>  mov al,ePutConsoleString
  6403 000009E6 CD30                <1>  int _svc
  6404 000009E8 C3                      .20                     ret                                                     ;return
  6405                                  ;-----------------------------------------------------------------------------------------------------------------------
  6406                                  ;
  6407                                  ;       Tables
  6408                                  ;
  6409                                  ;-----------------------------------------------------------------------------------------------------------------------
  6410                                                                                                                  ;---------------------------------------
  6411                                                                                                                  ;  Command Jump Table
  6412                                                                                                                  ;---------------------------------------
  6413                                  tConJmpTbl              equ     $                                               ;command jump table
  6414 000009E9 6C090000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6415 000009ED C0090000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6416 000009F1 CD060000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6417 000009F5 F7060000                                        dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6418 000009F9 0D050000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  6419 000009FD 38090000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  6420 00000A01 42090000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6421 00000A05 81050000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6422 00000A09 D6050000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  6423 00000A0D 79060000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  6424 00000A11 E4080000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  6425 00000A15 B4040000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  6426 00000A19 F7060000                                        dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6427 00000A1D A3060000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  6428 00000A21 B9040000                                        dd      ConDate         - ConCode                       ;date command routine offset
  6429 00000A25 0D050000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  6430 00000A29 12050000                                        dd      ConFree         - ConCode                       ;free command routine offset
  6431 00000A2D 54050000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  6432 00000A31 7E050000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  6433 00000A35 0D050000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  6434 00000A39 0E090000                                        dd      ConTime         - ConCode                       ;time command routine offset
  6435 00000A3D 96090000                                        dd      ConYear         - ConCode                       ;year command routine offset
  6436 00000A41 B4040000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  6437 00000A45 E3040000                                        dd      ConDay          - ConCode                       ;day command routine offset
  6438 00000A49 D6050000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  6439 00000A4D 38090000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  6440                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6441                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6442                                                                                                                  ;---------------------------------------
  6443                                                                                                                  ;  Command Name Table
  6444                                                                                                                  ;---------------------------------------
  6445                                  tConCmdTbl              equ     $                                               ;command name table
  6446 00000A51 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6446 00000A5A 4E414D4500         
  6447 00000A5F 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6447 00000A68 45415000           
  6448 00000A6C 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  6448 00000A75 4D4500             
  6449 00000A78 0950434950524F4245-                             db      9,"PCIPROBE",0                                  ;pciprobe command
  6449 00000A81 00                 
  6450 00000A82 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  6450 00000A8B 00                 
  6451 00000A8C 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  6452 00000A95 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  6453 00000A9E 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  6454 00000AA6 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  6455 00000AAE 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  6456 00000AB6 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  6457 00000ABE 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  6458 00000AC5 064C5350434900                                  db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6459 00000ACC 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  6460 00000AD3 054441544500                                    db      5,"DATE",0                                      ;date command
  6461 00000AD9 054558495400                                    db      5,"EXIT",0                                      ;exit command
  6462 00000ADF 054652454500                                    db      5,"FREE",0                                      ;free command
  6463 00000AE5 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  6464 00000AEB 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  6465 00000AF1 055155495400                                    db      5,"QUIT",0                                      ;quit command
  6466 00000AF7 0554494D4500                                    db      5,"TIME",0                                      ;time command
  6467 00000AFD 055945415200                                    db      5,"YEAR",0                                      ;year command
  6468 00000B03 04434C5300                                      db      4,"CLS",0                                       ;cls command
  6469 00000B08 0444415900                                      db      4,"DAY",0                                       ;day command
  6470 00000B0D 044D454D00                                      db      4,"MEM",0                                       ;mem command
  6471 00000B12 0456455200                                      db      4,"VER",0                                       ;ver command
  6472 00000B17 00                                              db      0                                               ;end of table
  6473                                  ;-----------------------------------------------------------------------------------------------------------------------
  6474                                  ;
  6475                                  ;       Constants
  6476                                  ;
  6477                                  ;-----------------------------------------------------------------------------------------------------------------------
  6478 00000B18 4170706C6500            czApple                 db      "Apple",0                                       ;vendor name string
  6479 00000B1E 41757265616C204144-     czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6479 00000B27 3138383120534F554E-
  6479 00000B30 444D415800         
  6480 00000B35 42617365206D656D6F-     czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6480 00000B3E 72793A2000         
  6481                                  
  6482 00000B43 45746865726E657420-     czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6482 00000B4C 616461707465722066-
  6482 00000B55 6F756E640D0A00     
  6483 00000B5C 53656C6563746F723A-     czEthernetSelector      db      "Selector: ",0
  6483 00000B65 2000               
  6484 00000B67 4465766963657C5665-     czEthernetDeviceVendor  db      "Device|Vendor: ",0
  6484 00000B70 6E646F723A2000     
  6485 00000B77 5374617475737C436F-     czEthernetStatusCommand db      "Status|Command: ",0
  6485 00000B80 6D6D616E643A2000   
  6486 00000B88 436C6173737C526576-     czEthernetClassRev      db      "Class|Rev: ",0
  6486 00000B91 3A2000             
  6487 00000B94 424953547C4864727C-     czEthernetMisc          db      "BIST|Hdr|Latency|Cache: ",0
  6487 00000B9D 4C6174656E63797C43-
  6487 00000BA6 616368653A2000     
  6488 00000BAD 4D656D6F7279204D61-     czEthernetMemoryAddr    db      "Memory Mapped I/O Address: ",0                 ;ethernet I/O memory address
  6488 00000BB6 7070656420492F4F20-
  6488 00000BBF 416464726573733A20-
  6488 00000BC8 00                 
  6489 00000BC9 466C6173683A2000        czEthernetFlash         db      "Flash: ",0                                     ;ethernet flash base address
  6490 00000BD1 492F4F20706F72743A-     czEthernetPort          db      "I/O port: ",0                                  ;ethernet I/O port address
  6490 00000BDA 2000               
  6491 00000BDC 4952513A2000            czEthernetIRQ           db      "IRQ: ",0                                       ;ethernet IRQ
  6492 00000BE2 4D41433A2000            czEthernetMAC           db      "MAC: ",0                                       ;MAC address
  6493                                  
  6494 00000BE8 457874656E64656420-     czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6494 00000BF1 6D656D6F72793A2000 
  6495 00000BFA 496E74656C00            czIntel                 db      "Intel",0                                       ;vendor name string
  6496 00000C00 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  6497 00000C03 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  6498 00000C06 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  6499 00000C0B 4F7261636C6500          czOracle                db      "Oracle",0                                      ;vendor name string
  6500 00000C12 4F7468657200            czOther                 db      "Other",0                                       ;default name string
  6501 00000C18 5043492026204D656D-     czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6501 00000C21 6F727900           
  6502 00000C25 2E00                    czPeriod                db      ".",0                                           ;period delimiter
  6503 00000C27 504949583320504349-     czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6503 00000C30 2D746F2D4953412042-
  6503 00000C39 726964676500       
  6504 00000C3F 50494958342F34452F-     czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6504 00000C48 344D20506F77657220-
  6504 00000C51 4D616E6167656D656E-
  6504 00000C5A 7420436F6E74726F6C-
  6504 00000C63 6C657200           
  6505 00000C67 3A00                    czPrompt                db      ":",0                                           ;prompt string
  6506 00000C69 50726F2F3130303020-     czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6506 00000C72 4D542045746865726E-
  6506 00000C7B 657420416461707465-
  6506 00000C84 7200               
  6507 00000C86 42617365206D656D6F-     czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6507 00000C8F 72792062656C6F7720-
  6507 00000C98 454244412028496E74-
  6507 00000CA1 20313268293A2000   
  6508 00000CA9 2000                    czSpace                 db      " ",0                                           ;space delimiter
  6509 00000CAB 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6509 00000CB4 65726174696E672053-
  6509 00000CBD 797374656D20312E30-
  6509 00000CC6 0D0A00             
  6510 00000CC9 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6510 00000CD2 6F6D6D616E640D0A00 
  6511 00000CDB 55534220436F6E7472-     czUSBController         db      "USB Controller",0                              ;USB controller string
  6511 00000CE4 6F6C6C657200       
  6512 00000CEA 5669727475616C426F-     czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6512 00000CF3 782044657669636500 
  6513 00000CFC 5669727475616C426F-     czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6513 00000D05 782047726170686963-
  6513 00000D0E 732041646170746572-
  6513 00000D17 00                 
  6514 00000D18 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6514 00000D21 69732061206C656170-
  6514 00000D2A 20796561722E0D0A00 
  6515 00000D33 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6515 00000D3C 6973206E6F74206120-
  6515 00000D45 6C6561702079656172-
  6515 00000D4E 2E0D0A00           
  6516 00000D52 383233373141422F45-     cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6516 00000D5B 422050434920427573-
  6516 00000D64 204D61737465722049-
  6516 00000D6D 444520436F6E74726F-
  6516 00000D76 6C6C657200         
  6517 00000D7B 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  6518                                  %endif
  6519                                  %ifdef BUILDDISK
  6520                                  ;-----------------------------------------------------------------------------------------------------------------------
  6521                                  ;
  6522                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6523                                  ;
  6524                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6525                                  ;
  6526                                  ;-----------------------------------------------------------------------------------------------------------------------
  6527                                  section                 unused                                                  ;unused disk space
  6528 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6529                                  %endif
  6530                                  ;=======================================================================================================================
  6531                                  ;
  6532                                  ;       End of Program Code
  6533                                  ;
  6534                                  ;=======================================================================================================================
