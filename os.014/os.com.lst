     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.014
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to locate and report the ethernet adapter
     8                                  ;                       at start-up.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EHWF...         Hardware flags
   169                                  ;       EKEYF...        Keyboard status flags
   170                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   171                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   172                                  ;       EMEM...         Memory Management values
   173                                  ;       EMSG...         Message identifers
   174                                  ;
   175                                  ;=======================================================================================================================
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Hardware-Defined Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   184                                  ;
   185                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   186                                  ;       for CGA, EGA, VGA and compatible video modes.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   190                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   191                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   192                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ;
   195                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   196                                  ;
   197                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   198                                  ;
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   201                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   202                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   203                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   204                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8042 Keyboard Controller                                                EKEYB...
   208                                  ;
   209                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   210                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EKEYBPORTDATA           equ     060h                                            ;data port
   214                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   215                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   216                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   217                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   218                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   219                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   220                                                                                                                  ;---------------------------------------
   221                                                                                                                  ;       Keyboard Scan Codes
   222                                                                                                                  ;---------------------------------------
   223                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   224                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   225                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   226                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   227                                  EKEYBSLASH              equ     035h                                            ;slash
   228                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   229                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   230                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   231                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   232                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   233                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   234                                  EKEYBUP                 equ     080h                                            ;up
   235                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   236                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   237                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   238                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   239                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   240                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   241                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   242                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   243                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   244                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   245                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   246                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  ;
   249                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   250                                  ;
   251                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   252                                  ;       external devices and signals a hardware interrupt to the CPU.
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   256                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   257                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   258                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   259                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       8253 Programmable Interval Timer                                        EPIT...
   263                                  ;
   264                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   265                                  ;       approximately 18.2 times per second.
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 CPU Architecture                                                    ;EX86...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   301                                  ;
   302                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   303                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   304                                  ;
   305                                  ;       0.......        Segment is not present in memory (triggers int 11)
   306                                  ;       1.......        Segment is present in memory
   307                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   308                                  ;       ...0....        Segment is a system segment
   309                                  ;       ...00010                Local Descriptor Table
   310                                  ;       ...00101                Task Gate
   311                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   312                                  ;       ...01100                Call Gate (386)
   313                                  ;       ...01110                Interrupt Gate (386)
   314                                  ;       ...01111                Trap Gate (386)
   315                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   316                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   317                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   321                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   322                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   323                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   324                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   325                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   326                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   327                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       Firmware-Defined Values
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   336                                  ;
   337                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   338                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   342                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   343                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   344                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   345                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   346                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   347                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   348                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   349                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   350                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   351                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Standards-Based Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       ASCII                                                                   EASCII...
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   363                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   364                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   365                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   366                                  EASCIISPACE             equ     020h                                            ;space
   367                                  EASCIIDASH              equ     02Dh                                            ;dash or minus
   368                                  EASCIIPERIOD            equ     02Eh                                            ;period
   369                                  EASCIIUPPERA            equ     041h                                            ;'A'
   370                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   371                                  EASCIILOWERA            equ     061h                                            ;'a'
   372                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   373                                  EASCIITILDE             equ     07Eh                                            ;'~'
   374                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   375                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   376                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   377                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   378                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   379                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   380                                  EASCIICASE              equ     00100000b                                       ;case bit
   381                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  ;
   384                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   385                                  ;
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   388                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   389                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   390                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   391                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   392                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   393                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   394                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   395                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   396                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   397                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   398                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   399                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   400                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   401                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   402                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;
   405                                  ;       Operating System Values
   406                                  ;
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;
   410                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   411                                  ;
   412                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   413                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   414                                  ;
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   417                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   418                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   419                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   420                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   421                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   422                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  ;       Console Constants                                                       ECON...
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  ECONCOLS                equ     80                                              ;columns per row
   427                                  ECONROWS                equ     24                                              ;console rows
   428                                  ECONOIAROW              equ     24                                              ;operator information area row
   429                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   430                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   431                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   432                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   433                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   438                                  EGDTCGA                 equ     020h                                            ;cga video selector
   439                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   440                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   441                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   442                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   443                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   444                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ;       Hardware Flags                                                          EHWF...
   447                                  ;-----------------------------------------------------------------------------------------------------------------------
   448                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  ;       Keyboard Flags                                                          EKEYF...
   451                                  ;-----------------------------------------------------------------------------------------------------------------------
   452                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   453                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   454                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   455                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   456                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   457                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   458                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   459                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   460                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   461                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   462                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  ;       Kernel Constants                                                        EKRN...
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   467                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   468                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   469                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   470                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   471                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   476                                  ;-----------------------------------------------------------------------------------------------------------------------
   477                                  ;       Memory Management Constants                                             EMEM...
   478                                  ;-----------------------------------------------------------------------------------------------------------------------
   479                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   480                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   481                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   482                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;       Message Identifiers                                                     EMSG...
   485                                  ;-----------------------------------------------------------------------------------------------------------------------
   486                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   487                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   488                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   489                                  ;=======================================================================================================================
   490                                  ;
   491                                  ;       Structures
   492                                  ;
   493                                  ;=======================================================================================================================
   494                                  ;-----------------------------------------------------------------------------------------------------------------------
   495                                  ;
   496                                  ;       DATETIME
   497                                  ;
   498                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   499                                  ;
   500                                  ;-----------------------------------------------------------------------------------------------------------------------
   501                                  struc                   DATETIME
   502 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   503 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   504 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   505 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   506 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   507 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   508 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   509 00000007 <res 00000001>          .century                resb    1                                               ;century
   510                                  EDATETIMELEN            equ     ($-.second)
   511                                  endstruc
   512                                  ;-----------------------------------------------------------------------------------------------------------------------
   513                                  ;
   514                                  ;       ETHER
   515                                  ;
   516                                  ;       The ETHER structure defines an Ethernet adapter context.
   517                                  ;
   518                                  ;-----------------------------------------------------------------------------------------------------------------------
   519                                  struc                   ETHER
   520 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   521                                  .devicevendor           equ     $                                               ;device id | vendor id
   522 00000004 <res 00000002>          .vendor                 resw    1                                               ;vendor id
   523 00000006 <res 00000002>          .device                 resw    1                                               ;device id
   524                                  .statuscommand          equ     $                                               ;status reg | command reg
   525 00000008 <res 00000002>          .commandreg             resw    1                                               ;command register
   526 0000000A <res 00000002>          .statusreg              resw    1                                               ;status register
   527 0000000C <res 00000004>          .classrev               resd    1                                               ;class code | revision id
   528 00000010 <res 00000004>          .misc                   resd    1                                               ;BIST | Hdr | latency | cache
   529 00000014 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address (bar 0)
   530 00000018 <res 00000004>          .flash                  resd    1                                               ;flash base address (bar 1)
   531 0000001C <res 00000004>          .port                   resd    1                                               ;i/o port (base 2)
   532 00000020 <res 00000006>          .mac                    resb    6                                               ;mac address
   533 00000026 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   534                                  EETHERLEN               equ     ($-.selector)
   535                                  endstruc
   536                                  ;-----------------------------------------------------------------------------------------------------------------------
   537                                  ;
   538                                  ;       MEMBLOCK
   539                                  ;
   540                                  ;       The MEMBLOCK structure defines a memory block.
   541                                  ;
   542                                  ;-----------------------------------------------------------------------------------------------------------------------
   543                                  struc                   MEMBLOCK
   544 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   545 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   546 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   547 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   548 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   549 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   550 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   551 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   552                                  EMEMBLOCKLEN            equ     ($-.signature)
   553                                  endstruc
   554                                  ;-----------------------------------------------------------------------------------------------------------------------
   555                                  ;
   556                                  ;       MEMROOT
   557                                  ;
   558                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   559                                  ;
   560                                  ;-----------------------------------------------------------------------------------------------------------------------
   561                                  struc                   MEMROOT
   562 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   563 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   564 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   565 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   566 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   567 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   568                                  EMEMROOTLEN             equ     ($-.firstcontig)
   569                                  endstruc
   570                                  ;-----------------------------------------------------------------------------------------------------------------------
   571                                  ;
   572                                  ;       MQUEUE
   573                                  ;
   574                                  ;       The MQUEUE structure maps memory used for a message queue.
   575                                  ;
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  struc                   MQUEUE
   578 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   579 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   580 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   581                                  endstruc
   582                                  ;-----------------------------------------------------------------------------------------------------------------------
   583                                  ;
   584                                  ;       PCI
   585                                  ;
   586                                  ;       The PCI structure defines a PCI bus, device and function context.
   587                                  ;
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  struc                   PCI
   590 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   591 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   592 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   593 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   594 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   595                                  .configdata             equ     $                                               ;data read from port 0CFCh
   596 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   597 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   598 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   599 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   600                                  EPCILEN                 equ     ($-.configdata)
   601                                  endstruc
   602                                  ;-----------------------------------------------------------------------------------------------------------------------
   603                                  ;
   604                                  ;       OSDATA
   605                                  ;
   606                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   607                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   608                                  ;
   609                                  ;-----------------------------------------------------------------------------------------------------------------------
   610                                  struc                   OSDATA
   611 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   612 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   613 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   614 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   615 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   616 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   617 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   618 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   619 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   620 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   621 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   622 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   623 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   624 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   625 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   626 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   627 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   628 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   629 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   630 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   631 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   632 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   633 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   634 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   635 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   636 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   637 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   638 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   639 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   640 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   641 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   642 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   643 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   644 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   645 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   646 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   647 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   648 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   649 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   650 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   651 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   652 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   653 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   654 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   655 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   656 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   657 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   658 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   659 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   660 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   661 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   662 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   663 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   664 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   665 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   666 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   667 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   668 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   669 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   670 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   671 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   672 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   673 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   674 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   675 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   676 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   677 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   678 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   679 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   680 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   681 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   682 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   683 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   684 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   685 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   686 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   687 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   688 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   689 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   690 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   691 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   692 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   693 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   694 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   695 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   696 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   697 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   698 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   699 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   700 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   701 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   702 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   703 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   704 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   705 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   706 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   707 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   708 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   709 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   710 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   711 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   712                                  ;-----------------------------------------------------------------------------------------------------------------------
   713                                  ;
   714                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   715                                  ;
   716                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   717                                  ;
   718                                  ;-----------------------------------------------------------------------------------------------------------------------
   719                                  ECONDATA                equ     ($)
   720 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   721 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   722 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   723 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   724 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   725 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   726 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   727 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   728 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   729 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   730 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   731 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   732 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   733 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   734 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   735 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   736 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   737 00000820 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   738 00000821 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   739 00000871 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   740 000008C1 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   741 00000911 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   742 0000091C <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   743 00000927 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   744 00000932 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   745 0000093B <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   746 00000953 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   747 0000095B <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   748 00000967 <res 00000027>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   749                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   750                                  ;-----------------------------------------------------------------------------------------------------------------------
   751                                  ;
   752                                  ;       End of OS Variables
   753                                  ;
   754                                  ;-----------------------------------------------------------------------------------------------------------------------
   755                                  endstruc
   756                                  ;-----------------------------------------------------------------------------------------------------------------------
   757                                  ;
   758                                  ;       Macros
   759                                  ;
   760                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   761                                  ;
   762                                  ;-----------------------------------------------------------------------------------------------------------------------
   763                                  %macro                  mint    1
   764                                  _%1                     equ     ($-$$) / EX86DESCLEN
   765                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   766                                  %endmacro
   767                                  %macro                  mtrap   1
   768                                  _%1                     equ     ($-$$) / EX86DESCLEN
   769                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   770                                  %endmacro
   771                                  %macro                  menter  1
   772                                  ?%1                     equ     ($-$$)
   773                                  %endmacro
   774                                  %macro                  tsvce   1
   775                                  e%1                     equ     ($-tsvc)/4
   776                                                          dd      %1
   777                                  %endmacro
   778                                  %ifdef BUILDBOOT
   779                                  ;=======================================================================================================================
   780                                  ;
   781                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   782                                  ;
   783                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   784                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   785                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   786                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   787                                  ;
   788                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   789                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   790                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   791                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   792                                  ;       immediately followed by a disk parameter table.
   793                                  ;
   794                                  ;=======================================================================================================================
   795                                                          cpu     8086                                            ;assume minimal CPU
   796                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   797                                                          bits    16                                              ;16-bit code at power-up
   798                                  %ifdef BUILDPREP
   799                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   800                                  %else
   801                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   802                                  %endif
   803                                  ;-----------------------------------------------------------------------------------------------------------------------
   804                                  ;
   805                                  ;       Disk Parameter Table
   806                                  ;
   807                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   808                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   809                                  ;
   810                                  ;-----------------------------------------------------------------------------------------------------------------------
   811                                                          db      "CustomOS"                                      ;eight-byte label
   812                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   813                                  cbClusterSectors        db      1                                               ;sectors per cluster
   814                                  cwReservedSectors       dw      1                                               ;reserved sectors
   815                                  cbFatCount              db      2                                               ;file allocation table copies
   816                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   817                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   818                                  cbDiskType              db      0F0h                                            ;1.44MB
   819                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   820                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   821                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   822                                  cwDiskSides             dw      2                                               ;sides per disk
   823                                  cwSpecialSectors        dw      0                                               ;special sectors
   824                                  ;
   825                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   826                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   827                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   828                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   829                                  ;       given several possible starting values for CS:IP.
   830                                  ;
   831                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   832                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   833                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   834                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   835                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   836                                                          mov     cl,4                                            ;shift count
   837                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   838                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   839                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   840                                  ;
   841                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   842                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   843                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   844                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   845                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   846                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   847                                  ;
   848                                                          sub     bx,16                                           ;BX = 07b0
   849                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   850                                                          mov     es,bx                                           ;ES = 07b0 = psp
   851                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   852                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   853                                  ;
   854                                  ;       Our boot addressability is now set up according to the following diagram.
   855                                  ;
   856                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   857                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   858                                  ;                               |  256 = 100h bytes                             |
   859                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   860                                  ;                               |  Boot Sector (vstart=0100h)                   |
   861                                  ;                               |  1 sector = 512 = 200h bytes                  |
   862                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   863                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   864                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   865                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   866                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   867                                  ;                               |  2 sectors = 1024 = 400h bytes
   868                                  ;                       009400  +-----------------------------------------------+ DS:1900
   869                                  ;
   870                                  ;       On entry, DL indicates the drive being booted from.
   871                                  ;
   872                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   873                                  ;
   874                                  ;       Compute directory i/o buffer address.
   875                                  ;
   876                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   877                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   878                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   879                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   880                                  ;
   881                                  ;       Compute segment where os.com will be loaded.
   882                                  ;
   883                                                          shr     ax,cl                                           ;AX = 0150
   884                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   885                                                          sub     ax,16                                           ;AX = 08f0
   886                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   887                                  ;
   888                                  ;       Set the video mode to 80 column, 25 row, text.
   889                                  ;
   890                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   891                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   892                                  ;
   893                                  ;       Write a message to the console so we know we have our addressability established.
   894                                  ;
   895                                                          mov     si,czLoadMsg                                    ;loading message
   896                                                          call    BootPrint                                       ;display loader message
   897                                  ;
   898                                  ;       Initialize the number of directory sectors to search.
   899                                  ;
   900                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   901                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   902                                  ;
   903                                  ;       Compute number of directory sectors and initialize overhead count.
   904                                  ;
   905                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   906                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   907                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   908                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   909                                  ;
   910                                  ;       Compute directory entries per sector.
   911                                  ;
   912                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   913                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   914                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   915                                  ;
   916                                  ;       Compute first logical directory sector and update overhead count.
   917                                  ;
   918                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   919                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   920                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   921                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   922                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   923                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   924                                  ;
   925                                  ;       Read directory sector.
   926                                  ;
   927                                  .30                     mov     al,1                                            ;sector count
   928                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   929                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   930                                                          call    ReadSector                                      ;read sector into es:bx
   931                                  ;
   932                                  ;       Setup variables to search this directory sector.
   933                                  ;
   934                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   935                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   936                                                          jna     .40                                             ;no, continue
   937                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   938                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   939                                                          mov     si,cbKernelProgram                              ;program name
   940                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   941                                  ;
   942                                  ;       Loop through directory sectors searching for kernel program.
   943                                  ;
   944                                  .50                     push    si                                              ;save kernel name address
   945                                                          push    di                                              ;save dir i/o buffer address
   946                                                          mov     cx,11                                           ;length of 8+3 name
   947                                                          cld                                                     ;forward strings
   948                                                          repe    cmpsb                                           ;compare entry name
   949                                                          pop     di                                              ;restore dir i/o buffer address
   950                                                          pop     si                                              ;restore kernel name address
   951                                                          je      .60                                             ;exit loop if found
   952                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   953                                                          dec     ax                                              ;decrement remaining entries
   954                                                          jnz     .50                                             ;next entry
   955                                  ;
   956                                  ;       Repeat search if we are not at the end of the directory.
   957                                  ;
   958                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   959                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   960                                                          jne     .30                                             ;no, get next sector
   961                                                          mov     si,czNoKernel                                   ;missing kernel message
   962                                                          jmp     BootExit                                        ;display message and exit
   963                                  ;
   964                                  ;       If we find the kernel program in the directory, read the FAT.
   965                                  ;
   966                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   967                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   968                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   969                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   970                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   971                                                          call    ReadSector                                      ;read FAT into buffer
   972                                  ;
   973                                  ;       Get the starting cluster of the kernel program and target address.
   974                                  ;
   975                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   976                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   977                                  ;
   978                                  ;       Read each program cluster into RAM.
   979                                  ;
   980                                  .70                     push    ax                                              ;save cluster nbr
   981                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   982                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   983                                                          mov     [wbReadCount],cl                                ;save sectors to read
   984                                                          xor     ch,ch                                           ;CX = sectors per cluster
   985                                                          mul     cx                                              ;DX:AX = logical cluster sector
   986                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   987                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   988                                                          call    ReadSector                                      ;read sectors into ES:BX
   989                                  ;
   990                                  ;       Update buffer pointer for next cluster.
   991                                  ;
   992                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   993                                                          xor     ah,ah                                           ;AX = sectors per cluster
   994                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   995                                                          add     bx,ax                                           ;BX = next cluster target address
   996                                                          pop     ax                                              ;AX = restore cluster nbr
   997                                  ;
   998                                  ;       Compute next cluster number.
   999                                  ;
  1000                                                          mov     cx,ax                                           ;CX = cluster nbr
  1001                                                          mov     di,ax                                           ;DI = cluster nbr
  1002                                                          shr     ax,1                                            ;AX = cluster/2
  1003                                                          mov     dx,ax                                           ;DX = cluster/2
  1004                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
  1005                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
  1006                                                          and     di,1                                            ;get low bit
  1007                                                          add     di,ax                                           ;add one if cluster is odd
  1008                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
  1009                                                          mov     ax,[di]                                         ;get cluster bytes
  1010                                  ;
  1011                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1012                                  ;
  1013                                                          test    cl,1                                            ;is cluster odd?
  1014                                                          jz      .80                                             ;no, skip ahead
  1015                                                          mov     cl,4                                            ;shift count
  1016                                                          shr     ax,cl                                           ;shift nybble low
  1017                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1018                                                          cmp     ax,0FFFh                                        ;end of chain?
  1019                                                          jne     .70                                             ;no, continue
  1020                                  ;
  1021                                  ;       Transfer control to the operating system program.
  1022                                  ;
  1023                                                          db      0EAh                                            ;jmp seg:offset
  1024                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1025                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1026                                  ;
  1027                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1028                                  ;
  1029                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1030                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1031                                                          mov     cx,ax                                           ;CX = sectors per cylinder
  1032                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1033                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
  1034                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1035                                                          mov     ax,dx                                           ;AX = cyl sector
  1036                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1037                                                          inc     ah                                              ;AH = sector (1,2,3,...)
  1038                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1039                                  ;
  1040                                  ;       Try maxtries times to read sector.
  1041                                  ;
  1042                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1043                                  .10                     push    bx                                              ;save buffer address
  1044                                                          push    cx                                              ;save retry count
  1045                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1046                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1047                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1048                                                          int     EBIOSINTDISKETTE                                ;read sector
  1049                                                          pop     cx                                              ;restore retry count
  1050                                                          pop     bx                                              ;restore buffer address
  1051                                                          jnc     BootReturn                                      ;skip ahead if done
  1052                                                          loop    .10                                             ;retry
  1053                                  ;
  1054                                  ;       Handle disk error: convert to ASCII and store in error string.
  1055                                  ;
  1056                                                          mov     al,ah                                           ;AL = bios error code
  1057                                                          xor     ah,ah                                           ;AX = bios error code
  1058                                                          mov     dl,16                                           ;divisor for base 16
  1059                                                          div     dl                                              ;AL = hi order, AH = lo order
  1060                                                          or      ax,03030h                                       ;apply ASCII zone bits
  1061                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1062                                                          jb      .20                                             ;continue if numeral
  1063                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1064                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1065                                                          jb      .30                                             ;continue if numeral
  1066                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1067                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1068                                                          mov     si,czErrorMsg                                   ;error message address
  1069                                  BootExit                call    BootPrint                                       ;display messge to console
  1070                                  ;
  1071                                  ;       Wait for a key press.
  1072                                  ;
  1073                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1074                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1075                                                          jnz     .20                                             ;continue if key pressed
  1076                                                          sti                                                     ;enable maskable interrupts
  1077                                                          hlt                                                     ;wait for interrupt
  1078                                                          jmp     .10                                             ;repeat
  1079                                  ;
  1080                                  ;       Reset the system.
  1081                                  ;
  1082                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1083                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1084                                  .30                     sti                                                     ;enable maskable interrupts
  1085                                                          hlt                                                     ;stop until reset, int, nmi
  1086                                                          jmp     .30                                             ;loop until restart kicks in
  1087                                  ;
  1088                                  ;       Display text message.
  1089                                  ;
  1090                                  BootPrint               cld                                                     ;forward strings
  1091                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1092                                                          test    al,al                                           ;end of string?
  1093                                                          jz      BootReturn                                      ;... yes, exit our loop
  1094                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1095                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1096                                                          jmp     .10                                             ;repeat until done
  1097                                  BootReturn              ret                                                     ;return
  1098                                  ;-----------------------------------------------------------------------------------------------------------------------
  1099                                  ;
  1100                                  ;       Constants
  1101                                  ;
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103                                                          align   2
  1104                                  cwEntryLen              dw      32                                              ;length of directory entry
  1105                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1106                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1107                                  czErrorMsg              db      "Disk error "                                   ;error message
  1108                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1109                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1110                                  ;-----------------------------------------------------------------------------------------------------------------------
  1111                                  ;
  1112                                  ;       Work Areas
  1113                                  ;
  1114                                  ;-----------------------------------------------------------------------------------------------------------------------
  1115                                                          align   2
  1116                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1117                                  wwEntriesLeft           dw      0                                               ;directory entries to search
  1118                                  wwOverhead              dw      0                                               ;overhead sectors
  1119                                  wwSectorEntries         dw      0                                               ;directory entries per sector
  1120                                  wwLogicalSector         dw      0                                               ;current logical sector
  1121                                  wwReadCountCommand      equ     $                                               ;read count and command
  1122                                  wbReadCount             db      0                                               ;sectors to read
  1123                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1124                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1125                                  wbDrive                 db      0                                               ;drive
  1126                                  wbHead                  db      0                                               ;head
  1127                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1128                                                          db      0                                               ;sector
  1129                                  wbTrack                 db      0                                               ;track
  1130                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
  1131                                                          db      055h,0AAh                                       ;end of sector signature
  1132                                  %endif
  1133                                  %ifdef BUILDPREP
  1134                                  ;=======================================================================================================================
  1135                                  ;
  1136                                  ;       Diskette Preparation Code
  1137                                  ;
  1138                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1139                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1140                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1141                                  ;
  1142                                  ;=======================================================================================================================
  1143                                  ;
  1144                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1145                                  ;
  1146                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1147                                                          call    BootPrint                                       ;display message
  1148                                  ;
  1149                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1150                                  ;
  1151                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1152                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1153                                                          jnz     .20                                             ;continue if key pressed
  1154                                                          sti                                                     ;enable interrupts
  1155                                                          hlt                                                     ;wait for interrupt
  1156                                                          jmp     .10                                             ;repeat
  1157                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1158                                                          je      .30                                             ;yes, branch
  1159                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1160                                                          jne     .10                                             ;no, repeat
  1161                                                          jmp     .120                                            ;yes, exit program
  1162                                  ;
  1163                                  ;       Display writing-sector message and patch the JMP instruction.
  1164                                  ;
  1165                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1166                                                          call    BootPrint                                       ;display message
  1167                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1168                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1169                                                          mov     [bx],ax                                         ;update the JMP instruction
  1170                                  ;
  1171                                  ;       Try to read the boot sector.
  1172                                  ;
  1173                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1174                                  .40                     push    cx                                              ;save remaining tries
  1175                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1176                                                          mov     dx,0                                            ;head zero, drive zero
  1177                                                          mov     cx,1                                            ;track zero, sector one
  1178                                                          mov     al,1                                            ;one sector
  1179                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1180                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1181                                                          pop     cx                                              ;restore remaining retries
  1182                                                          jnc     .50                                             ;skip ahead if successful
  1183                                                          loop    .40                                             ;try again
  1184                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1185                                                          jmp     .70                                             ;branch to error routine
  1186                                  ;
  1187                                  ;       Copy diskette parms from input buffer to output buffer.
  1188                                  ;
  1189                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1190                                                          add     si,11                                           ;skip over JMP and system ID
  1191                                                          mov     di,Boot                                         ;output buffer address
  1192                                                          add     di,11                                           ;skip over JMP and system ID
  1193                                                          mov     cx,19                                           ;length of diskette parameters
  1194                                                          cld                                                     ;forward string copies
  1195                                                          rep     movsb                                           ;copy diskette parameters
  1196                                  ;
  1197                                  ;       Try to write boot sector to diskette.
  1198                                  ;
  1199                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1200                                  .60                     push    cx                                              ;save remaining tries
  1201                                                          mov     bx,Boot                                         ;output buffer address
  1202                                                          mov     dx,0                                            ;head zero, drive zero
  1203                                                          mov     cx,1                                            ;track zero, sector one
  1204                                                          mov     al,1                                            ;one sector
  1205                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1206                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1207                                                          pop     cx                                              ;restore remaining retries
  1208                                                          jnc     .100                                            ;skip ahead if successful
  1209                                                          loop    .60                                             ;try again
  1210                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1211                                  ;
  1212                                  ;       Convert the error code to ASCII and display the error message.
  1213                                  ;
  1214                                  .70                     push    ax                                              ;save error code
  1215                                                          mov     al,ah                                           ;copy error code
  1216                                                          mov     ah,0                                            ;AX = error code
  1217                                                          mov     dl,10h                                          ;hexadecimal divisor
  1218                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1219                                                          or      ax,03030h                                       ;add ASCII zone digits
  1220                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1221                                                          jb      .80                                             ;yes, continue
  1222                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1223                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1224                                                          jb      .90                                             ;yes, continue
  1225                                                          add     al,7                                            ;no, make ASCII
  1226                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1227                                                          call    BootPrint                                       ;write error message
  1228                                                          pop     ax                                              ;restore error code
  1229                                  ;
  1230                                  ;       Display the completion message.
  1231                                  ;
  1232                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1233                                                          mov     al,ah                                           ;BIOS return code
  1234                                                          cmp     al,0                                            ;success?
  1235                                                          je      .110                                            ;yes, continue
  1236                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1237                                                          cmp     al,1                                            ;disk parameter error?
  1238                                                          je      .110                                            ;yes, continue
  1239                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1240                                                          cmp     al,2                                            ;address mark not found?
  1241                                                          je      .110                                            ;yes, continue
  1242                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1243                                                          cmp     al,3                                            ;protected disk?
  1244                                                          je      .110                                            ;yes, continue
  1245                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1246                                                          cmp     al,6                                            ;diskette removed?
  1247                                                          je      .110                                            ;yes, continue
  1248                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1249                                                          cmp     al,80H                                          ;drive timed out?
  1250                                                          je      .110                                            ;yes, continue
  1251                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1252                                  .110                    call    BootPrint                                       ;display result message
  1253                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1254                                                          int     021h                                            ;terminate DOS program
  1255                                                          ret                                                     ;return (should not execute)
  1256                                  ;-----------------------------------------------------------------------------------------------------------------------
  1257                                  ;
  1258                                  ;       Diskette Preparation Messages
  1259                                  ;
  1260                                  ;-----------------------------------------------------------------------------------------------------------------------
  1261                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1262                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1263                                                          db      13,10
  1264                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1265                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1266                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1267                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1268                                                          db      13,10,0
  1269                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1270                                                          db      13,10,0
  1271                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1272                                                          db      13,10,0
  1273                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1274                                                          db      13,10,0
  1275                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1276                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1277                                                          db      13,10,0
  1278                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1279                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1280                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1281                                                          db      13,10,"and retry."
  1282                                                          db      13,10,0
  1283                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1284                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1285                                                          db      13,10,"using another diskette."
  1286                                                          db      13,10,0
  1287                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1288                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1289                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1290                                                          db      13,10,0
  1291                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1292                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1293                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1294                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1295                                                          db      13,10,"is properly inserted in the diskette drive."
  1296                                                          db      13,10,0
  1297                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1298                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1299                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1300                                                          db      13,10,0
  1301                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1302                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1303                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1304                                                          db      13,10,0
  1305                                  wcPrepInBuf             equ     $
  1306                                  %endif
  1307                                  %ifdef BUILDDISK
  1308                                  ;=======================================================================================================================
  1309                                  ;
  1310                                  ;       File Allocation Tables
  1311                                  ;
  1312                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1313                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1314                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1315                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1316                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1317                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1318                                  ;       the last cluster in the chain.
  1319                                  ;
  1320                                  ;       Every three bytes encode two FAT entries as follows:
  1321                                  ;
  1322                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1323                                  ;
  1324                                  ;=======================================================================================================================
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326                                  ;
  1327                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1328                                  ;
  1329                                  ;-----------------------------------------------------------------------------------------------------------------------
  1330                                  section                 fat1                                                    ;first copy of FAT
  1331                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1332                                                          db      005h,060h,000h, 007h,080h,000h
  1333                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1334                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1335                                                          db      011h,020h,001h, 013h,040h,001h
  1336                                                          db      015h,060h,001h, 017h,080h,001h
  1337                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1338                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1339                                                          db      021h,020h,002h, 023h,040h,002h
  1340                                                          db      025h,060h,002h, 027h,080h,002h
  1341                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1342                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1343                                  ;-----------------------------------------------------------------------------------------------------------------------
  1344                                  ;
  1345                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1346                                  ;
  1347                                  ;-----------------------------------------------------------------------------------------------------------------------
  1348                                  section                 fat2                                                    ;second copy of FAT
  1349                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1350                                                          db      005h,060h,000h, 007h,080h,000h
  1351                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1352                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1353                                                          db      011h,020h,001h, 013h,040h,001h
  1354                                                          db      015h,060h,001h, 017h,080h,001h
  1355                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1356                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1357                                                          db      021h,020h,002h, 023h,040h,002h
  1358                                                          db      025h,060h,002h, 027h,080h,002h
  1359                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1360                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1361                                  ;-----------------------------------------------------------------------------------------------------------------------
  1362                                  ;
  1363                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1364                                  ;
  1365                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1366                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1367                                  ;       copy.
  1368                                  ;
  1369                                  ;-----------------------------------------------------------------------------------------------------------------------
  1370                                  section                 dir                                                     ;diskette directory
  1371                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1372                                                          db      020h                                            ;attribute (archive bit set)
  1373                                                          times   10 db 0                                         ;unused
  1374                                                          dw      0h                                              ;time
  1375                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1376                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1377                                                          dw      2                                               ;first cluster
  1378                                                          dd      05400h                                          ;file size
  1379                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1380                                  %endif
  1381                                  %ifdef BUILDCOM
  1382                                  ;=======================================================================================================================
  1383                                  ;
  1384                                  ;       OS.COM
  1385                                  ;
  1386                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1387                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1388                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1389                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1390                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1391                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1392                                  ;
  1393                                  ;       Our loader addressability is set up according to the following diagram.
  1394                                  ;
  1395                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1396                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1397                                  ;                               |  256 = 100h bytes                             |
  1398                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1399                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1400                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1401                                  ;                       007e00  +-----------------------------------------------+
  1402                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1403                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1404                                  ;                               |                                               |
  1405                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1406                                  ;                               |                                               |
  1407                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1408                                  ;                               |  Loader Code                                  |
  1409                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1410                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1411                                  ;
  1412                                  ;=======================================================================================================================
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414                                  ;
  1415                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1416                                  ;
  1417                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1418                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1419                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1420                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1421                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1422                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1423                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1424                                  ;       registers.
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                                          cpu     8086                                            ;assume minimal CPU
  1428                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1429                                                          bits    16                                              ;this is 16-bit code
  1430 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1431 00000001 1F                                              pop     ds                                              ;...as our data segment
  1432 00000002 0E                                              push    cs                                              ;use the code segment
  1433 00000003 07                                              pop     es                                              ;...as our extra segment
  1434                                  ;
  1435                                  ;       Write a message to the console so we know we have our addressability established.
  1436                                  ;
  1437 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1438 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1439                                  ;
  1440                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1441                                  ;
  1442 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1443 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1444 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1445 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1446                                                          cpu     386                                             ;allow 80386 instructions
  1447 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1448 00000017 E89600                                          call    PutTTYString                                    ;display message
  1449                                  ;
  1450                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1451                                  ;
  1452 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1453 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1454 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1455 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1456 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1457 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1458 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1459 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1460 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1461 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1462                                  ;
  1463                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1464                                  ;
  1465 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1466 00000038 07                                              pop     es                                              ;... as target segment
  1467 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1468 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1469 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1470 00000041 FC                                              cld                                                     ;forward strings
  1471 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1472 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1473 00000047 E86600                                          call    PutTTYString                                    ;display message
  1474                                  ;
  1475                                  ;       Switch to protected mode.
  1476                                  ;
  1477 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1478 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1479 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1480 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1481 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1482 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1483 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1484 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1485 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1486 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1487 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1488                                  ;
  1489                                  ;       Enable hardware and maskable interrupts.
  1490                                  ;
  1491 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1492 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1493 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1494 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1495                                  ;
  1496                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1497                                  ;
  1498 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1499 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1500 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1501                                  ;-----------------------------------------------------------------------------------------------------------------------
  1502                                  ;
  1503                                  ;       Routine:        LoaderExit
  1504                                  ;
  1505                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1506                                  ;
  1507                                  ;       In:             DS:SI   string address
  1508                                  ;
  1509                                  ;-----------------------------------------------------------------------------------------------------------------------
  1510 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1511                                  ;
  1512                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1513                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1514                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1515                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1516                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1517                                  ;
  1518 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1519 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1520 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1521 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1522 00000085 F4                                              hlt                                                     ;wait for interrupt
  1523 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1524                                  ;
  1525                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1526                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1527                                  ;       HLT until the system resets.
  1528                                  ;
  1529 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1530 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1531 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1532 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1533 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  ;
  1536                                  ;       Routine:        GetCPUType
  1537                                  ;
  1538                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1539                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1540                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1541                                  ;
  1542                                  ;       Out:            AX      0 = 808x, v20, etc.
  1543                                  ;                               1 = 80186
  1544                                  ;                               2 = 80286
  1545                                  ;                               3 = 80386
  1546                                  ;
  1547                                  ;-----------------------------------------------------------------------------------------------------------------------
  1548 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1549 00000092 B120                                            mov     cl,32                                           ;shift count
  1550 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1551 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1552 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1553                                                          cpu     186
  1554 0000009A 54                                              push    sp                                              ;save stack pointer
  1555 0000009B 59                                              pop     cx                                              ;...into cx
  1556 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1557 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1558                                                          cpu     286
  1559 000000A0 40                                              inc     ax                                              ;AX = 2
  1560 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1561 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1562 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1563 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1564 000000AE 40                                              inc     ax                                              ;AX = 3
  1565 000000AF C3                      .10                     ret                                                     ;return
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                  ;
  1568                                  ;       Routine:        PutTTYString
  1569                                  ;
  1570                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1571                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1572                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1573                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1574                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1575                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1576                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1577                                  ;                       to LODSB is not needed.
  1578                                  ;
  1579                                  ;       In:             DS:SI   address of string
  1580                                  ;
  1581                                  ;       Out:            DF      0
  1582                                  ;                       ZF      1
  1583                                  ;                       AL      0
  1584                                  ;
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1587 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1588 000000B2 84C0                                            test    al,al                                           ;end of string?
  1589 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1590 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1591 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1592 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1593 000000BC C3                      .20                     ret                                                     ;return
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                  ;
  1596                                  ;       Loader Data
  1597                                  ;
  1598                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1599                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1600                                  ;
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602 000000BD 90                                              align   2
  1603 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1604 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1605 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1606 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1607 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1607 000000D1 74696E672073797374-
  1607 000000DA 656D20726571756972-
  1607 000000E3 657320616E20693338-
  1607 000000EC 36206F72206C617465-
  1607 000000F5 722070726F63657373-
  1607 000000FE 6F722E0D0A         
  1608 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1608 0000010C 65737320616E79206B-
  1608 00000115 657920746F20726573-
  1608 0000011E 746172742074686520-
  1608 00000127 636F6D70757465722E-
  1608 00000130 0D0A00             
  1609 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1610 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1610 00000145 7265640D0A00       
  1611 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1611 00000154 616465640D0A00     
  1612 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1612 00000164 4F530D0A00         
  1613 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1614                                  ;=======================================================================================================================
  1615                                  ;
  1616                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1617                                  ;
  1618                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1619                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1620                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1621                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1622                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1623                                  ;
  1624                                  ;=======================================================================================================================
  1625                                  ;=======================================================================================================================
  1626                                  ;
  1627                                  ;       Kernel Tables
  1628                                  ;
  1629                                  ;=======================================================================================================================
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                  ;
  1632                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1633                                  ;
  1634                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1635                                  ;       first descriptor must be all nulls.
  1636                                  ;
  1637                                  ;       6   5         4         3         2         1         0
  1638                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1639                                  ;       ----------------------------------------------------------------
  1640                                  ;       h......hffffmmmma......ab......................bn..............n
  1641                                  ;
  1642                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1643                                  ;               ffff                                                            flags
  1644                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1645                                  ;                       a......a                                                access
  1646                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1647                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1648                                  ;
  1649                                  ;       00000000                                                                all areas have base addresses below 2^24
  1650                                  ;               0...                                                            single-byte size granularity
  1651                                  ;               1...                                                            4-kilobyte size granularity
  1652                                  ;               .0..                                                            16-bit default for code segments
  1653                                  ;               .1..                                                            32-bit default for code segments
  1654                                  ;               ..0.                                                            intel-reserved; should be zero
  1655                                  ;               ...0                                                            available for operating system use
  1656                                  ;                   0000                                                        segment is less than 2^16 in size
  1657                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1658                                  ;                       1.......                                                segment is present in memory
  1659                                  ;                       .00.....                                                segment is of privilege level 0
  1660                                  ;                       ...0....                                                segment is of system or gate type
  1661                                  ;                       ...00010                                                local decriptor table (LDT)
  1662                                  ;                       ...01001                                                task state segment (TSS) available
  1663                                  ;                       ...01011                                                task state segment (TSS) busy
  1664                                  ;                       ...10...                                                data segment
  1665                                  ;                       ...10011                                                writable data (accessed)
  1666                                  ;                       ...11...                                                code segment
  1667                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1668                                  ;
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  section                 gdt                                                     ;global descriptor table
  1671 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1672 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1673 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1674 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1675 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1676 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1677 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1678 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1679 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1680 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1681 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1682 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1683 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1684 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1685 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1689                                  ;
  1690                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1691                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1692                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1693                                  ;
  1694                                  ;       6   5         4         3         2         1         0
  1695                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1696                                  ;       ----------------------------------------------------------------
  1697                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1698                                  ;
  1699                                  ;       h...h   high-order offset (bits 16-31)
  1700                                  ;       P       present (0=unused interrupt)
  1701                                  ;       zz      descriptor privilege level
  1702                                  ;       S       storage segment (must be zero for IDT)
  1703                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1704                                  ;       S...S   handling code selector in GDT
  1705                                  ;       l...l   lo-order offset (bits 0-15)
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  section                 idt                                                     ;interrupt descriptor table
  1709                                                          mint    dividebyzero                                    ;00 divide by zero
  1709                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1709 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1710                                                          mint    singlestep                                      ;01 single step
  1710                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1710 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1711                                                          mint    nmi                                             ;02 non-maskable
  1711                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1711 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1712                                                          mint    break                                           ;03 break
  1712                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1712 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1713                                                          mint    into                                            ;04 into
  1713                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1713 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1714                                                          mint    bounds                                          ;05 bounds
  1714                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1714 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1715                                                          mint    badopcode                                       ;06 bad op code
  1715                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1715 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1716                                                          mint    nocoproc                                        ;07 no coprocessor
  1716                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1716 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1717                                                          mint    doublefault                                     ;08 double-fault
  1717                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1717 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1718                                                          mint    operand                                         ;09 operand
  1718                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1718 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1719                                                          mint    badtss                                          ;0a bad TSS
  1719                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1719 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1720                                                          mint    notpresent                                      ;0b not-present
  1720                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1720 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1721                                                          mint    stacklimit                                      ;0c stack limit
  1721                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1721 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1722                                                          mint    protection                                      ;0d general protection fault
  1722                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1722 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1723                                                          mint    int14                                           ;0e (reserved)
  1723                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1723 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1724                                                          mint    int15                                           ;0f (reserved)
  1724                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1724 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1725                                                          mint    coproccalc                                      ;10 (reserved)
  1725                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1725 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1726                                                          mint    int17                                           ;11 (reserved)
  1726                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1726 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1727                                                          mint    int18                                           ;12 (reserved)
  1727                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1727 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1728                                                          mint    int19                                           ;13 (reserved)
  1728                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1728 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1729                                                          mint    int20                                           ;14 (reserved)
  1729                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1729 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1730                                                          mint    int21                                           ;15 (reserved)
  1730                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1730 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1731                                                          mint    int22                                           ;16 (reserved)
  1731                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1731 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1732                                                          mint    int23                                           ;17 (reserved)
  1732                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1732 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1733                                                          mint    int24                                           ;18 (reserved)
  1733                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1733 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1734                                                          mint    int25                                           ;19 (reserved)
  1734                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1734 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1735                                                          mint    int26                                           ;1a (reserved)
  1735                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1735 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1736                                                          mint    int27                                           ;1b (reserved)
  1736                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1736 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1737                                                          mint    int28                                           ;1c (reserved)
  1737                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1737 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1738                                                          mint    int29                                           ;1d (reserved)
  1738                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1738 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1739                                                          mint    int30                                           ;1e (reserved)
  1739                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1739 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1740                                                          mint    int31                                           ;1f (reserved)
  1740                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1740 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1741                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1741                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1741 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1742                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1742                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1742 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1743                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1743                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1743 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1744                                                          mtrap   com2                                            ;23 IRQ3 com2
  1744                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1744 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1745                                                          mtrap   com1                                            ;24 IRQ4 com1
  1745                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1745 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1746                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1746                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1746 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1747                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1747                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1747 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1748                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1748                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1748 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1749                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1749                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1749 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1750                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1750                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1750 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1751                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1751                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1751 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1752                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1752                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1752 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1753                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1753                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1753 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1754                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1754                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1754 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1755                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1755                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1755 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1756                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1756                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1756 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1757                                                          mtrap   svc                                             ;30 OS services
  1757                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1757 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1758 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1759                                  ;=======================================================================================================================
  1760                                  ;
  1761                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1762                                  ;
  1763                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1764                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1765                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1766                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1767                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1768                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1769                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1770                                  ;
  1771                                  ;=======================================================================================================================
  1772                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1773                                                          cpu     386                                             ;allow 80386 instructions
  1774                                                          bits    32                                              ;this is 32-bit code
  1775                                  ;=======================================================================================================================
  1776                                  ;
  1777                                  ;       CPU Interrupt Handlers
  1778                                  ;
  1779                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1780                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1781                                  ;
  1782                                  ;=======================================================================================================================
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT0    Divide By Zero
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  dividebyzero                                    ;divide by zero
  1788                              <1> ?%1 equ ($-$$)
  1789 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1790 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1791 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                  ;
  1794                                  ;       INT1    Single Step
  1795                                  ;
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                                          menter  singlestep                                      ;single step
  1797                              <1> ?%1 equ ($-$$)
  1798 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1799 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1800 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                  ;
  1803                                  ;       INT2    Non-Maskable Interrupt
  1804                                  ;
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                                          menter  nmi                                             ;non-maskable
  1806                              <1> ?%1 equ ($-$$)
  1807 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1808 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1809 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  ;
  1812                                  ;       INT3    Break
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                                          menter  break                                           ;break
  1815                              <1> ?%1 equ ($-$$)
  1816 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1817 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1818 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;       INT4    Into
  1822                                  ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                                          menter  into                                            ;into
  1824                              <1> ?%1 equ ($-$$)
  1825 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1826 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1827 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;       INT5    Bounds
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                                          menter  bounds                                          ;bounds
  1833                              <1> ?%1 equ ($-$$)
  1834 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1835 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1836 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                  ;
  1839                                  ;       INT6    Bad Operation Code
  1840                                  ;
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                                          menter  badopcode                                       ;bad opcode interrupt
  1842                              <1> ?%1 equ ($-$$)
  1843 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1844 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1845 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  ;
  1848                                  ;       INT7    No Coprocessor
  1849                                  ;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1851                              <1> ?%1 equ ($-$$)
  1852 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1853 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1854 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       INT8    Double Fault
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  doublefault                                     ;doublefault interrupt
  1860                              <1> ?%1 equ ($-$$)
  1861 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1862 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1863 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  ;
  1866                                  ;       INT9    Operand
  1867                                  ;
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                                          menter  operand                                         ;operand interrupt
  1869                              <1> ?%1 equ ($-$$)
  1870 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1871 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1872 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       INT10   Bad Task State Segment
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  badtss                                          ;bad TSS interrupt
  1878                              <1> ?%1 equ ($-$$)
  1879 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1880 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1881 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       INT11   Not Present
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  notpresent                                      ;not present interrupt
  1887                              <1> ?%1 equ ($-$$)
  1888 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1889 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1890 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;       INT12   Stack Limit
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                                          menter  stacklimit                                      ;stack limit interrupt
  1896                              <1> ?%1 equ ($-$$)
  1897 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1898 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1899 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                  ;
  1902                                  ;       INT13   General Protection Fault
  1903                                  ;
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                                          menter  protection                                      ;protection fault interrupt
  1905                              <1> ?%1 equ ($-$$)
  1906 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1907 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1908 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                  ;
  1911                                  ;       INT14   Reserved
  1912                                  ;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                                          menter  int14                                           ;(reserved)
  1914                              <1> ?%1 equ ($-$$)
  1915 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1916 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1917 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                  ;
  1920                                  ;       INT15   Reserved
  1921                                  ;
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                                          menter  int15                                           ;(reserved)
  1923                              <1> ?%1 equ ($-$$)
  1924 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1925 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1926 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  ;
  1929                                  ;       INT16   Coprocessor Calculation
  1930                                  ;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                                          menter  coproccalc                                      ;coprocessor calculation
  1932                              <1> ?%1 equ ($-$$)
  1933 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1934 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1935 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937                                  ;
  1938                                  ;       INT17   Reserved
  1939                                  ;
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                                          menter  int17                                           ;(reserved)
  1941                              <1> ?%1 equ ($-$$)
  1942 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1943 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1944 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       INT18   Reserved
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                                          menter  int18                                           ;(reserved)
  1950                              <1> ?%1 equ ($-$$)
  1951 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1952 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1953 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                  ;
  1956                                  ;       INT19   Reserved
  1957                                  ;
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                                          menter  int19                                           ;(reserved)
  1959                              <1> ?%1 equ ($-$$)
  1960 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1961 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1962 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  ;
  1965                                  ;       INT20   Reserved
  1966                                  ;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                                          menter  int20                                           ;(reserved)
  1968                              <1> ?%1 equ ($-$$)
  1969 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1970 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1971 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1972                                  ;-----------------------------------------------------------------------------------------------------------------------
  1973                                  ;
  1974                                  ;       INT21   Reserved
  1975                                  ;
  1976                                  ;-----------------------------------------------------------------------------------------------------------------------
  1977                                                          menter  int21                                           ;(reserved)
  1977                              <1> ?%1 equ ($-$$)
  1978 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1979 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1980 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1981                                  ;-----------------------------------------------------------------------------------------------------------------------
  1982                                  ;
  1983                                  ;       INT22   Reserved
  1984                                  ;
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                                          menter  int22                                           ;(reserved)
  1986                              <1> ?%1 equ ($-$$)
  1987 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1988 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1989 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                  ;
  1992                                  ;       INT23   Reserved
  1993                                  ;
  1994                                  ;-----------------------------------------------------------------------------------------------------------------------
  1995                                                          menter  int23                                           ;(reserved)
  1995                              <1> ?%1 equ ($-$$)
  1996 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1997 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1998 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1999                                  ;-----------------------------------------------------------------------------------------------------------------------
  2000                                  ;
  2001                                  ;       INT24   Reserved
  2002                                  ;
  2003                                  ;-----------------------------------------------------------------------------------------------------------------------
  2004                                                          menter  int24                                           ;(reserved)
  2004                              <1> ?%1 equ ($-$$)
  2005 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  2006 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2007 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  2008                                  ;-----------------------------------------------------------------------------------------------------------------------
  2009                                  ;
  2010                                  ;       INT25   Reserved
  2011                                  ;
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                                          menter  int25                                           ;(reserved)
  2013                              <1> ?%1 equ ($-$$)
  2014 00000114 6A19                                            push    25                                              ;store interrupt nbr
  2015 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2016 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  2017                                  ;-----------------------------------------------------------------------------------------------------------------------
  2018                                  ;
  2019                                  ;       INT26   Reserved
  2020                                  ;
  2021                                  ;-----------------------------------------------------------------------------------------------------------------------
  2022                                                          menter  int26                                           ;(reserved)
  2022                              <1> ?%1 equ ($-$$)
  2023 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  2024 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2025 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  2026                                  ;-----------------------------------------------------------------------------------------------------------------------
  2027                                  ;
  2028                                  ;       INT27   Reserved
  2029                                  ;
  2030                                  ;-----------------------------------------------------------------------------------------------------------------------
  2031                                                          menter  int27                                           ;(reserved)
  2031                              <1> ?%1 equ ($-$$)
  2032 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  2033 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2034 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036                                  ;
  2037                                  ;       INT28   Reserved
  2038                                  ;
  2039                                  ;-----------------------------------------------------------------------------------------------------------------------
  2040                                                          menter  int28                                           ;(reserved)
  2040                              <1> ?%1 equ ($-$$)
  2041 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  2042 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2043 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  2044                                  ;-----------------------------------------------------------------------------------------------------------------------
  2045                                  ;
  2046                                  ;       INT29   Reserved
  2047                                  ;
  2048                                  ;-----------------------------------------------------------------------------------------------------------------------
  2049                                                          menter  int29                                           ;(reserved)
  2049                              <1> ?%1 equ ($-$$)
  2050 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  2051 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2052 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  2053                                  ;-----------------------------------------------------------------------------------------------------------------------
  2054                                  ;
  2055                                  ;       INT30   Reserved
  2056                                  ;
  2057                                  ;-----------------------------------------------------------------------------------------------------------------------
  2058                                                          menter  int30                                           ;(reserved)
  2058                              <1> ?%1 equ ($-$$)
  2059 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  2060 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2061 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  2062                                  ;-----------------------------------------------------------------------------------------------------------------------
  2063                                  ;
  2064                                  ;       INT31   Reserved
  2065                                  ;
  2066                                  ;-----------------------------------------------------------------------------------------------------------------------
  2067                                                          menter  int31                                           ;(reserved)
  2067                              <1> ?%1 equ ($-$$)
  2068 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  2069 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2070 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  2071                                  ;-----------------------------------------------------------------------------------------------------------------------
  2072                                  ;
  2073                                  ;       Routine:        ReportInterrupt
  2074                                  ;
  2075                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2076                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2077                                  ;
  2078                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2079                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2080                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2081                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2082                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2083                                  ;
  2084                                  ;       Out:            N/A             This routine does not exit.
  2085                                  ;
  2086                                  ;-----------------------------------------------------------------------------------------------------------------------
  2087 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2088 00000154 06                                              push    es                                              ;save ES at time of interrupt
  2089 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2090 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  2091                                  ;
  2092                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2093                                  ;
  2094                                  ;                       [EBP+60]        EFLAGS
  2095                                  ;                       [EBP+56]        CS
  2096                                  ;                       [EBP+52]        EIP
  2097                                  ;                       [EBP+48]        EIP hi-order
  2098                                  ;                       [EBP+44]        interrupt number (0-31)
  2099                                  ;                       [EBP+40]        error message address
  2100                                  ;                       [EBP+36]        DS
  2101                                  ;                       [EBP+32]        ES
  2102                                  ;                       [EBP+28]        EAX
  2103                                  ;                       [EBP+24]        ECX
  2104                                  ;                       [EBP+20]        EDX
  2105                                  ;                       [EBP+16]        EBX
  2106                                  ;                       [EBP+12]        ESP
  2107                                  ;                       [EBP+8]         EBP
  2108                                  ;                       [EBP+4]         ESI
  2109                                  ;                       [EBP+0]         EDI
  2110                                  ;
  2111 00000158 0E                                              push    cs                                              ;load code selector ...
  2112 00000159 1F                                              pop     ds                                              ;... into DS
  2113 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2114 0000015C 07                                              pop     es                                              ;... into ES
  2115                                  ;
  2116                                  ;       Display the interrupt report boundary box
  2117                                  ;
  2118 0000015D B10D                                            mov     cl,13                                           ;column
  2119 0000015F B506                                            mov     ch,6                                            ;row
  2120 00000161 B232                                            mov     dl,50                                           ;width
  2121 00000163 B608                                            mov     dh,8                                            ;height
  2122 00000165 B707                                            mov     bh,07h                                          ;attribute
  2123 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2124                                  ;
  2125                                  ;       Display the report header
  2126                                  ;
  2127 0000016C B10F                                            mov     cl,15                                           ;column
  2128 0000016E B507                                            mov     ch,7                                            ;row
  2129 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2130 00000175 E87F110000                                      call    SetConsoleString                                ;draw text string
  2131                                  ;
  2132                                  ;       Display the interrupt description label
  2133                                  ;
  2134 0000017A B10F                                            mov     cl,15                                           ;column
  2135 0000017C B508                                            mov     ch,8                                            ;row
  2136 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2137 00000183 E871110000                                      call    SetConsoleString                                ;draw text string
  2138                                  ;
  2139                                  ;       Display the interrupt number
  2140                                  ;
  2141 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2142 0000018B B11A                                            mov     cl,26                                           ;column
  2143 0000018D B508                                            mov     ch,8                                            ;row
  2144 0000018F E8E20D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2145                                  ;
  2146                                  ;       Display the interrupt name
  2147                                  ;
  2148 00000194 B11D                                            mov     cl,29                                           ;column
  2149 00000196 B508                                            mov     ch,8                                            ;row
  2150 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2151 0000019B E859110000                                      call    SetConsoleString                                ;display interrupt description
  2152                                  ;
  2153                                  ;       Display the register values header
  2154                                  ;
  2155 000001A0 B10F                                            mov     cl,15                                           ;column
  2156 000001A2 B50A                                            mov     ch,10                                           ;row
  2157 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2158 000001A9 E84B110000                                      call    SetConsoleString                                ;draw text string
  2159                                  ;
  2160                                  ;       Display the EAX register label and value
  2161                                  ;
  2162 000001AE B10F                                            mov     cl,15                                           ;column
  2163 000001B0 B50B                                            mov     ch,11                                           ;row
  2164 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2165 000001B7 E83D110000                                      call    SetConsoleString                                ;draw label
  2166 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2167 000001BF B113                                            mov     cl,19                                           ;column
  2168 000001C1 B50B                                            mov     ch,11                                           ;row
  2169 000001C3 E8C80D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2170                                  ;
  2171                                  ;       Display the ECX register label and value
  2172                                  ;
  2173 000001C8 B10F                                            mov     cl,15                                           ;column
  2174 000001CA B50C                                            mov     ch,12                                           ;row
  2175 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2176 000001D1 E823110000                                      call    SetConsoleString                                ;draw label
  2177 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2178 000001D9 B113                                            mov     cl,19                                           ;column
  2179 000001DB B50C                                            mov     ch,12                                           ;row
  2180 000001DD E8AE0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2181                                  ;
  2182                                  ;       Display the EDX register label and value
  2183                                  ;
  2184 000001E2 B10F                                            mov     cl,15                                           ;column
  2185 000001E4 B50D                                            mov     ch,13                                           ;row
  2186 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2187 000001EB E809110000                                      call    SetConsoleString                                ;draw label
  2188 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2189 000001F3 B113                                            mov     cl,19                                           ;column
  2190 000001F5 B50D                                            mov     ch,13                                           ;row
  2191 000001F7 E8940D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2192                                  ;
  2193                                  ;       Display the EBX register label and value
  2194                                  ;
  2195 000001FC B10F                                            mov     cl,15                                           ;column
  2196 000001FE B50E                                            mov     ch,14                                           ;row
  2197 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2198 00000205 E8EF100000                                      call    SetConsoleString                                ;draw label
  2199 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2200 0000020D B113                                            mov     cl,19                                           ;column
  2201 0000020F B50E                                            mov     ch,14                                           ;row
  2202 00000211 E87A0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2203                                  ;
  2204                                  ;       Display the ESI register label and value
  2205                                  ;
  2206 00000216 B11D                                            mov     cl,29                                           ;column
  2207 00000218 B50B                                            mov     ch,11                                           ;row
  2208 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2209 0000021F E8D5100000                                      call    SetConsoleString                                ;draw label
  2210 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2211 00000227 B121                                            mov     cl,33                                           ;column
  2212 00000229 B50B                                            mov     ch,11                                           ;row
  2213 0000022B E8600D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2214                                  ;
  2215                                  ;       Display the EDI register label and value
  2216                                  ;
  2217 00000230 B11D                                            mov     cl,29                                           ;column
  2218 00000232 B50C                                            mov     ch,12                                           ;row
  2219 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2220 00000239 E8BB100000                                      call    SetConsoleString                                ;draw label
  2221 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2222 00000241 B121                                            mov     cl,33                                           ;column
  2223 00000243 B50C                                            mov     ch,12                                           ;row
  2224 00000245 E8460D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2225                                  ;
  2226                                  ;       Display the EBP register label and value
  2227                                  ;
  2228 0000024A B11D                                            mov     cl,29                                           ;column
  2229 0000024C B50D                                            mov     ch,13                                           ;row
  2230 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2231 00000253 E8A1100000                                      call    SetConsoleString                                ;draw label
  2232 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2233 0000025B B121                                            mov     cl,33                                           ;column
  2234 0000025D B50D                                            mov     ch,13                                           ;row
  2235 0000025F E82C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2236                                  ;
  2237                                  ;       Display the DS register label and value
  2238                                  ;
  2239 00000264 B12A                                            mov     cl,42                                           ;column
  2240 00000266 B50B                                            mov     ch,11                                           ;row
  2241 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2242 0000026D E887100000                                      call    SetConsoleString                                ;draw label
  2243 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2244 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2245 00000278 B12E                                            mov     cl,46                                           ;column
  2246 0000027A B50B                                            mov     ch,11                                           ;row
  2247 0000027C E81F0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2248                                  ;
  2249                                  ;       Display the ES register label and value
  2250                                  ;
  2251 00000281 B12A                                            mov     cl,42                                           ;column
  2252 00000283 B50C                                            mov     ch,12                                           ;row
  2253 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2254 0000028A E86A100000                                      call    SetConsoleString                                ;draw label
  2255 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2256 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2257 00000295 B12E                                            mov     cl,46                                           ;column
  2258 00000297 B50C                                            mov     ch,12                                           ;row
  2259 00000299 E8020D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2260                                  ;
  2261                                  ;       Display the SS register label and value
  2262                                  ;
  2263 0000029E B12A                                            mov     cl,42                                           ;column
  2264 000002A0 B50D                                            mov     ch,13                                           ;row
  2265 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2266 000002A7 E84D100000                                      call    SetConsoleString                                ;draw label
  2267 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2268 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2269 000002B1 B12E                                            mov     cl,46                                           ;column
  2270 000002B3 B50D                                            mov     ch,13                                           ;row
  2271 000002B5 E8E60C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2272                                  ;
  2273                                  ;       Display the CS register lable and value
  2274                                  ;
  2275 000002BA B12A                                            mov     cl,42                                           ;column
  2276 000002BC B50E                                            mov     ch,14                                           ;row
  2277 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2278 000002C3 E831100000                                      call    SetConsoleString                                ;draw label
  2279 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2280 000002CA 668B4538                                        mov     ax,[ebp+56]                                     ;CS
  2281 000002CE B12E                                            mov     cl,46                                           ;column
  2282 000002D0 B50E                                            mov     ch,14                                           ;row
  2283 000002D2 E8C90C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2284                                  ;
  2285                                  ;       Display the EFLAGS register label and value
  2286                                  ;
  2287 000002D7 B133                                            mov     cl,51                                           ;column
  2288 000002D9 B50B                                            mov     ch,11                                           ;row
  2289 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2290 000002E0 E814100000                                      call    SetConsoleString                                ;draw label
  2291 000002E5 8B453C                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2292 000002E8 B137                                            mov     cl,55                                           ;column
  2293 000002EA B50B                                            mov     ch,11                                           ;row
  2294 000002EC E89F0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2295                                  ;
  2296                                  ;       Display the ESP register label and value
  2297                                  ;
  2298 000002F1 B133                                            mov     cl,51                                           ;column
  2299 000002F3 B50D                                            mov     ch,13                                           ;row
  2300 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2301 000002FA E8FA0F0000                                      call    SetConsoleString                                ;draw label
  2302 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2303 00000302 B137                                            mov     cl,55                                           ;column
  2304 00000304 B50D                                            mov     ch,13                                           ;row
  2305 00000306 E8850C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2306                                  ;
  2307                                  ;       Display the EIP register label and value
  2308                                  ;
  2309 0000030B B133                                            mov     cl,51                                           ;column
  2310 0000030D B50E                                            mov     ch,14                                           ;row
  2311 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2312 00000314 E8E00F0000                                      call    SetConsoleString                                ;draw label
  2313 00000319 8B4534                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2314 0000031C B137                                            mov     cl,55                                           ;column
  2315 0000031E B50E                                            mov     ch,14                                           ;row
  2316 00000320 E86B0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2317                                  ;
  2318                                  ;       Halt and loop until reset
  2319                                  ;
  2320 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2321 00000326 F4                                              hlt                                                     ;halt processor
  2322 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  ;
  2325                                  ;       Processor Interrupt Name Strings
  2326                                  ;
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2328 00000332 6279207A65726F00   
  2329 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2329 00000343 657000             
  2330 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2330 0000034F 626C6520696E746572-
  2330 00000358 7275707400         
  2331 0000035D 427265616B00            czIntBreak              db      "Break",0
  2332 00000363 496E746F00              czIntInto               db      "Into",0
  2333 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2334 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2334 00000378 74696F6E20436F6465-
  2334 00000381 00                 
  2335 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2335 0000038B 6573736F7200       
  2336 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2336 0000039A 756C7400           
  2337 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2338 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2338 000003AF 537461746520536567-
  2338 000003B8 6D656E7400         
  2339 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2339 000003C6 6E7400             
  2340 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2340 000003D2 697400             
  2341 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2341 000003DE 726F74656374696F6E-
  2341 000003E7 204661756C7400     
  2342 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2342 000003F7 6F722043616C63756C-
  2342 00000400 6174696F6E00       
  2343 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2344                                  ;-----------------------------------------------------------------------------------------------------------------------
  2345                                  ;
  2346                                  ;       Processor Interrupt Handling Strings
  2347                                  ;
  2348                                  ;-----------------------------------------------------------------------------------------------------------------------
  2349 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2349 00000418 6C65642070726F6365-
  2349 00000421 73736F7220696E7465-
  2349 0000042A 727275707420686173-
  2349 00000433 206F63637572726564-
  2349 0000043C 3A00               
  2350 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2350 00000447 202300             
  2351 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2351 00000453 206174207468652074-
  2351 0000045C 696D65206F66207468-
  2351 00000465 6520696E7465727275-
  2351 0000046E 70743A00           
  2352 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2353 00000477 4543583A00              czIntECX                db      "ECX:",0
  2354 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2355 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2356 00000486 4553493A00              czIntESI                db      "ESI:",0
  2357 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2358 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2359 00000495 4553503A00              czIntESP                db      "ESP:",0
  2360 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2361 0000049F 2045533A00              czIntES                 db      " ES:",0
  2362 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2363 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2364 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2365 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2366                                  ;-----------------------------------------------------------------------------------------------------------------------
  2367                                  ;
  2368                                  ;       Routine:        DrawTextDialogBox
  2369                                  ;
  2370                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2371                                  ;
  2372                                  ;       In:             CL      upper left column (0-79)
  2373                                  ;                       CH      upper left row (0-24)
  2374                                  ;                       DL      column width, excluding border
  2375                                  ;                       DH      row height, excluding border
  2376                                  ;                       BH      color attribute
  2377                                  ;
  2378                                  ;-----------------------------------------------------------------------------------------------------------------------
  2379 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2380 000004B9 56                                              push    esi                                             ;
  2381 000004BA 57                                              push    edi                                             ;
  2382 000004BB 06                                              push    es                                              ;
  2383 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2384 000004BE 07                                              pop     es                                              ;... into ES
  2385                                  ;
  2386                                  ;       Compute target display offset
  2387                                  ;
  2388 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2389 000004C1 88E8                                            mov     al,ch                                           ;row
  2390 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2391 000004C5 F6E4                                            mul     ah                                              ;row offset
  2392 000004C7 00C8                                            add     al,cl                                           ;add column
  2393 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2394 000004CC 00C8                                            add     al,cl                                           ;add column
  2395 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2396 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2397                                  ;
  2398                                  ;       Display top border row
  2399                                  ;
  2400 000004D3 57                                              push    edi                                             ;save target row offset
  2401 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2402 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2403 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2404 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2405 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2406 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2407 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2408 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2409 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2410 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2411 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2412                                  ;
  2413                                  ;       Display dialog box body rows
  2414                                  ;
  2415 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2416 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2417 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2418 000004F3 57                                              push    edi                                             ;save target row offset
  2419 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2420 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2421 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2422 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2423 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2424 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2425 00000500 F366AB                                          rep     stosw                                           ;display row
  2426 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2427 00000505 66AB                                            stosw                                                   ;display character and attribute
  2428 00000507 5F                                              pop     edi                                             ;restore target row offset
  2429 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2430 0000050E 59                                              pop     ecx                                             ;remaining rows
  2431 0000050F E2E1                                            loop    .10                                             ;next row
  2432                                  ;
  2433                                  ;       Display bottom border row
  2434                                  ;
  2435 00000511 57                                              push    edi                                             ;save target row offset
  2436 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2437 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2438 00000516 66AB                                            stosw                                                   ;display character and attribute
  2439 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2440 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2441 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2442 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2443 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2444 00000523 66AB                                            stosw                                                   ;display character and attribute
  2445 00000525 5F                                              pop     edi                                             ;restore target row offset
  2446 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2447                                  ;
  2448                                  ;       Restore and return
  2449                                  ;
  2450 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2451 0000052D 5F                                              pop     edi                                             ;
  2452 0000052E 5E                                              pop     esi                                             ;
  2453 0000052F 59                                              pop     ecx                                             ;
  2454 00000530 C3                                              ret                                                     ;return
  2455                                  ;=======================================================================================================================
  2456                                  ;
  2457                                  ;       Hardware Device Interupts
  2458                                  ;
  2459                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2460                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2461                                  ;       (BX=2028h).
  2462                                  ;
  2463                                  ;=======================================================================================================================
  2464                                  ;-----------------------------------------------------------------------------------------------------------------------
  2465                                  ;
  2466                                  ;       IRQ0    Clock Tick Interrupt
  2467                                  ;
  2468                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2469                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2470                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2471                                  ;
  2472                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2473                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2474                                  ;
  2475                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2476                                  ;       zero, the floppy disk motors are turned off.
  2477                                  ;
  2478                                  ;-----------------------------------------------------------------------------------------------------------------------
  2479                                                          menter  clocktick                                       ;clock tick interrupt
  2479                              <1> ?%1 equ ($-$$)
  2480 00000531 50                                              push    eax                                             ;save non-volatile regs
  2481 00000532 52                                              push    edx                                             ;
  2482 00000533 1E                                              push    ds                                              ;
  2483                                  ;
  2484                                  ;       Update the clock tick count and the elapsed days as needed.
  2485                                  ;
  2486 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2487 00000536 1F                                              pop     ds                                              ;... into data segment register
  2488 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2489 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2490 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2491 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2492 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2493 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2494 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2495                                  ;
  2496                                  ;       Decrement floppy disk motor timeout.
  2497                                  ;
  2498 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2499 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2500 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2501 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2502                                  ;
  2503                                  ;       Turn off the floppy disk motor if appropriate.
  2504                                  ;
  2505 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2506 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2507 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2508 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2509 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2510 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2511 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2512 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2513 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2514 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2515 00000577 EE                                              out     dx,al                                           ;turn motor off
  2516                                  ;
  2517                                  ;       Signal the end of the hardware interrupt.
  2518                                  ;
  2519 00000578 E8E10D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2520                                  ;
  2521                                  ;       Restore and return.
  2522                                  ;
  2523 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2524 0000057E 5A                                              pop     edx                                             ;
  2525 0000057F 58                                              pop     eax                                             ;
  2526 00000580 CF                                              iretd                                                   ;return
  2527                                  ;-----------------------------------------------------------------------------------------------------------------------
  2528                                  ;
  2529                                  ;       IRQ1    Keyboard Interrupt
  2530                                  ;
  2531                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2532                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2533                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2534                                  ;       ALL modified registers upon return.
  2535                                  ;
  2536                                  ;-----------------------------------------------------------------------------------------------------------------------
  2537                                                          menter  keyboard                                        ;keyboard interrrupt
  2537                              <1> ?%1 equ ($-$$)
  2538 00000581 50                                              push    eax                                             ;save non-volatile regs
  2539 00000582 53                                              push    ebx                                             ;
  2540 00000583 51                                              push    ecx                                             ;
  2541 00000584 56                                              push    esi                                             ;
  2542 00000585 1E                                              push    ds                                              ;
  2543 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2544 00000588 1F                                              pop     ds                                              ;... into data segment register
  2545 00000589 30C0                                            xor     al,al                                           ;zero
  2546 0000058B A219080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2547 00000590 A21A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2548 00000595 A21B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2549 0000059A A21C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2550 0000059F A21D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2551 000005A4 A21E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2552 000005A9 B020                                            mov     al,' '                                          ;space
  2553 000005AB A21F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2554 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2555 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2556 000005B4 200518080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2557 000005BA 8A1D16080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2558 000005C0 8A3D17080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2559 000005C6 E8480E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2560 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2561 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2562 000005D3 A219080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2563 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2564 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2565 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2566 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2567 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2568 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2569 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2570 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2571 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2572 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2573 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2574 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2575 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2576 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2577 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2578 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2579 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2580 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2581 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2582 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2583 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2584 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2585 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2586 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2587 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2588 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2589 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2590 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2591 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2592 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2593 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2594 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2595 00000654 E8BA0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2596 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2597 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2598 00000661 A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2599 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2600 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2601 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2602 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2603 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2604 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2605 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2606 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2607 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2608 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2609 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2610 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2611 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2612 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2613 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2614 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2615 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2616 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2617 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2618 0000069C E8720D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2619 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2620 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2621 000006A9 A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2622 000006AE E8600D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2623 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2624 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2625 000006BB A21C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2626 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2627 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2628 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2629 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2630 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2631 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2632 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2633 000006D1 E80E0D0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2634 000006D6 881D16080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2635 000006DC 883D17080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2636 000006E2 E821090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2637 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2638 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2639 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2640 000006F1 E81D0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2641 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2642 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2643 000006FE A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2644 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2645 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2646 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2647 0000070E E8000D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2648 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2649 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2650 0000071B A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2651 00000720 E8EE0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2652 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2653 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2654 0000072D A21C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2655 00000732 E8DC0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2656 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2657 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2658 0000073F A21D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2659 00000744 E8CA0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2660 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2661 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2662 0000074D A21E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2663 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2664 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2665 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2666 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2667 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2668 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2669 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2670 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2671 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2672 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2673 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2674 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2675 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2676 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2677 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2678 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2679 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2680 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2681 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2682 00000787 A21F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2683 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2684 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2685 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2686 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2687 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2688 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2689 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2690 000007A4 50                                              push    eax                                             ;save codes
  2691 000007A5 E8AA0A0000                                      call    PutMessage                                      ;put message to console
  2692 000007AA 58                                              pop     eax                                             ;restore codes
  2693 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2694 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2695 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2696 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2697 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2698 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2699 000007BD E8920A0000                                      call    PutMessage                                      ;put message to console
  2700 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2701 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2702 000007C6 080518080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2703 000007CC E8DF070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2704 000007D1 E8880B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2705 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2706 000007D7 5E                                              pop     esi                                             ;
  2707 000007D8 59                                              pop     ecx                                             ;
  2708 000007D9 5B                                              pop     ebx                                             ;
  2709 000007DA 58                                              pop     eax                                             ;
  2710 000007DB CF                                              iretd                                                   ;return
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;       Scan-Code to ASCII Translation Tables
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2715 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2716 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2717 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2718 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2719 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2720 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2721 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2722 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2723 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2724 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2725 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2726 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2727 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2728 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2729 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2730 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2731 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2732 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2733 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2734 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2735 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2736 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2737 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2738 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2739 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2740 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2741 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2742 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2743 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2744 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2745 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2746                                  ;-----------------------------------------------------------------------------------------------------------------------
  2747                                  ;
  2748                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2749                                  ;
  2750                                  ;-----------------------------------------------------------------------------------------------------------------------
  2751                                                          menter  iochannel                                       ;secondary 8259A cascade
  2751                              <1> ?%1 equ ($-$$)
  2752 000008DC 50                                              push    eax                                             ;save modified regs
  2753 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                  ;
  2756                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2757                                  ;
  2758                                  ;-----------------------------------------------------------------------------------------------------------------------
  2759                                                          menter  com2                                            ;serial port 2 interrupt
  2759                              <1> ?%1 equ ($-$$)
  2760 000008DF 50                                              push    eax                                             ;save modified regs
  2761 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  ;
  2764                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2765                                  ;
  2766                                  ;-----------------------------------------------------------------------------------------------------------------------
  2767                                                          menter  com1                                            ;serial port 1 interrupt
  2767                              <1> ?%1 equ ($-$$)
  2768 000008E2 50                                              push    eax                                             ;save modified regs
  2769 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2770                                  ;-----------------------------------------------------------------------------------------------------------------------
  2771                                  ;
  2772                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2773                                  ;
  2774                                  ;-----------------------------------------------------------------------------------------------------------------------
  2775                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2775                              <1> ?%1 equ ($-$$)
  2776 000008E5 50                                              push    eax                                             ;save modified regs
  2777 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2778                                  ;-----------------------------------------------------------------------------------------------------------------------
  2779                                  ;
  2780                                  ;       IRQ6    Diskette Hardware Interrupt
  2781                                  ;
  2782                                  ;-----------------------------------------------------------------------------------------------------------------------
  2783                                                          menter  diskette                                        ;floppy disk interrupt
  2783                              <1> ?%1 equ ($-$$)
  2784 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2785 000008E9 1E                                              push    ds                                              ;
  2786 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2787 000008EC 1F                                              pop     ds                                              ;... into DS register
  2788 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2789 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2790 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2791 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2792 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2793                                  ;-----------------------------------------------------------------------------------------------------------------------
  2794                                  ;
  2795                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2796                                  ;
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2798                              <1> ?%1 equ ($-$$)
  2799 000008FC 50                                              push    eax                                             ;save modified regs
  2800 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                  ;
  2803                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2804                                  ;
  2805                                  ;-----------------------------------------------------------------------------------------------------------------------
  2806                                                          menter  rtclock                                         ;real-time clock interrupt
  2806                              <1> ?%1 equ ($-$$)
  2807 000008FF 50                                              push    eax                                             ;save modified regs
  2808 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2809                                  ;-----------------------------------------------------------------------------------------------------------------------
  2810                                  ;
  2811                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2814                              <1> ?%1 equ ($-$$)
  2815 00000902 50                                              push    eax                                             ;save modified regs
  2816 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2817                                  ;-----------------------------------------------------------------------------------------------------------------------
  2818                                  ;
  2819                                  ;       IRQ10   Reserved Hardware Interrupt
  2820                                  ;
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                                          menter  irq10                                           ;reserved
  2822                              <1> ?%1 equ ($-$$)
  2823 00000905 50                                              push    eax                                             ;save modified regs
  2824 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                  ;
  2827                                  ;       IRQ11   Reserved Hardware Interrupt
  2828                                  ;
  2829                                  ;-----------------------------------------------------------------------------------------------------------------------
  2830                                                          menter  irq11                                           ;reserved
  2830                              <1> ?%1 equ ($-$$)
  2831 00000908 50                                              push    eax                                             ;save modified regs
  2832 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834                                  ;
  2835                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2836                                  ;
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2838                              <1> ?%1 equ ($-$$)
  2839 0000090B 50                                              push    eax                                             ;save modified regs
  2840 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2841                                  ;-----------------------------------------------------------------------------------------------------------------------
  2842                                  ;
  2843                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2844                                  ;
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                                          menter  coprocessor                                     ;coprocessor interrupt
  2846                              <1> ?%1 equ ($-$$)
  2847 0000090E 50                                              push    eax                                             ;save modified regs
  2848 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2849                                  ;-----------------------------------------------------------------------------------------------------------------------
  2850                                  ;
  2851                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2852                                  ;
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2854                              <1> ?%1 equ ($-$$)
  2855 00000911 50                                              push    eax                                             ;save modified regs
  2856 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2857                                  ;-----------------------------------------------------------------------------------------------------------------------
  2858                                  ;
  2859                                  ;       IRQ15   Reserved Hardware Interrupt
  2860                                  ;
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862                                                          menter  irq15                                           ;reserved
  2862                              <1> ?%1 equ ($-$$)
  2863 00000914 50                                              push    eax                                             ;save modified regs
  2864 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  ;
  2867                                  ;       Exit from hardware interrupt
  2868                                  ;
  2869                                  ;-----------------------------------------------------------------------------------------------------------------------
  2870 00000917 E8480A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2871 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2872 0000091E E83B0A0000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2873 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2874 00000924 CF                                              iretd                                                   ;return from interrupt
  2875                                  ;-----------------------------------------------------------------------------------------------------------------------
  2876                                  ;
  2877                                  ;       INT 30h Operating System Software Service Interrupt
  2878                                  ;
  2879                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2880                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2881                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2882                                  ;       the entry address of the specific function from a table.
  2883                                  ;
  2884                                  ;-----------------------------------------------------------------------------------------------------------------------
  2885                                                          menter  svc
  2885                              <1> ?%1 equ ($-$$)
  2886 00000925 3C1E                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2887 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2888 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2889 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2890 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2891 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2892                                  ;-----------------------------------------------------------------------------------------------------------------------
  2893                                  ;
  2894                                  ;       Service Request Table
  2895                                  ;
  2896                                  ;
  2897                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2898                                  ;
  2899                                  ;-----------------------------------------------------------------------------------------------------------------------
  2900                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2900                              <1> tsvc :
  2900                              <1> e%1 equ ($-tsvc)/4
  2900 00000937 [D40B0000]          <1>  dd %1
  2901                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2901                              <1> e%1 equ ($-tsvc)/4
  2901 0000093B [7C120000]          <1>  dd %1
  2902                                                          tsvce   CompareMemory                                   ;compare memory
  2902                              <1> e%1 equ ($-tsvc)/4
  2902 0000093F [2F0E0000]          <1>  dd %1
  2903                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2903                              <1> e%1 equ ($-tsvc)/4
  2903 00000943 [E9100000]          <1>  dd %1
  2904                                                          tsvce   FreeMemory                                      ;free memory block
  2904                              <1> e%1 equ ($-tsvc)/4
  2904 00000947 [F20C0000]          <1>  dd %1
  2905                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2905                              <1> e%1 equ ($-tsvc)/4
  2905 0000094B [09130000]          <1>  dd %1
  2906                                                          tsvce   GetConsoleString                                ;get string input
  2906                              <1> e%1 equ ($-tsvc)/4
  2906 0000094F [900E0000]          <1>  dd %1
  2907                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2907                              <1> e%1 equ ($-tsvc)/4
  2907 00000953 [1A130000]          <1>  dd %1
  2908                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2908                              <1> e%1 equ ($-tsvc)/4
  2908 00000957 [2B130000]          <1>  dd %1
  2909                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2909                              <1> e%1 equ ($-tsvc)/4
  2909 0000095B [1C110000]          <1>  dd %1
  2910                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2910                              <1> e%1 equ ($-tsvc)/4
  2910 0000095F [BD090000]          <1>  dd %1
  2911                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2911                              <1> e%1 equ ($-tsvc)/4
  2911 00000963 [34130000]          <1>  dd %1
  2912                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2912                              <1> e%1 equ ($-tsvc)/4
  2912 00000967 [A2100000]          <1>  dd %1
  2913                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2913                              <1> e%1 equ ($-tsvc)/4
  2913 0000096B [D8090000]          <1>  dd %1
  2914                                                          tsvce   PutDayString                                    ;put DD string
  2914                              <1> e%1 equ ($-tsvc)/4
  2914 0000096F [190A0000]          <1>  dd %1
  2915                                                          tsvce   PutHourString                                   ;put hh string
  2915                              <1> e%1 equ ($-tsvc)/4
  2915 00000973 [270A0000]          <1>  dd %1
  2916                                                          tsvce   PutMACString                                    ;put MAC address string
  2916                              <1> e%1 equ ($-tsvc)/4
  2916 00000977 [3A110000]          <1>  dd %1
  2917                                                          tsvce   PutMinuteString                                 ;put mm string
  2917                              <1> e%1 equ ($-tsvc)/4
  2917 0000097B [350A0000]          <1>  dd %1
  2918                                                          tsvce   PutMonthString                                  ;put MM string
  2918                              <1> e%1 equ ($-tsvc)/4
  2918 0000097F [430A0000]          <1>  dd %1
  2919                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2919                              <1> e%1 equ ($-tsvc)/4
  2919 00000983 [510A0000]          <1>  dd %1
  2920                                                          tsvce   PutSecondString                                 ;put ss string
  2920                              <1> e%1 equ ($-tsvc)/4
  2920 00000987 [750A0000]          <1>  dd %1
  2921                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2921                              <1> e%1 equ ($-tsvc)/4
  2921 0000098B [820A0000]          <1>  dd %1
  2922                                                          tsvce   PutWeekdayString                                ;put weekday string
  2922                              <1> e%1 equ ($-tsvc)/4
  2922 0000098F [B70A0000]          <1>  dd %1
  2923                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2923                              <1> e%1 equ ($-tsvc)/4
  2923 00000993 [C50A0000]          <1>  dd %1
  2924                                                          tsvce   PutYearString                                   ;put YYYY string
  2924                              <1> e%1 equ ($-tsvc)/4
  2924 00000997 [E80A0000]          <1>  dd %1
  2925                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2925                              <1> e%1 equ ($-tsvc)/4
  2925 0000099B [6A130000]          <1>  dd %1
  2926                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2926                              <1> e%1 equ ($-tsvc)/4
  2926 0000099F [D5130000]          <1>  dd %1
  2927                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2927                              <1> e%1 equ ($-tsvc)/4
  2927 000009A3 [5B110000]          <1>  dd %1
  2928                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2928                              <1> e%1 equ ($-tsvc)/4
  2928 000009A7 [FF110000]          <1>  dd %1
  2929                                                          tsvce   UpperCaseString                                 ;upper-case string
  2929                              <1> e%1 equ ($-tsvc)/4
  2929 000009AB [4C0E0000]          <1>  dd %1
  2930                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2931                                  ;-----------------------------------------------------------------------------------------------------------------------
  2932                                  ;
  2933                                  ;       Service Request Macros
  2934                                  ;
  2935                                  ;       These macros provide positional parameterization of service request calls.
  2936                                  ;
  2937                                  ;-----------------------------------------------------------------------------------------------------------------------
  2938                                  %macro                  allocateMemory 1
  2939                                                          mov     ecx,%1                                          ;bytes to allocate
  2940                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2941                                                          int     _svc                                            ;invoke OS service
  2942                                  %endmacro
  2943                                  %macro                  clearConsoleScreen 0
  2944                                                          mov     al,eClearConsoleScreen                          ;function code
  2945                                                          int     _svc                                            ;invoke OS service
  2946                                  %endmacro
  2947                                  %macro                  compareMemory 0
  2948                                                          mov     al,eCompareMemory                               ;function code
  2949                                                          int     _svc                                            ;invoke OS service
  2950                                  %endmacro
  2951                                  %macro                  decimalToUnsigned 0
  2952                                                          mov     al,eDecimalToUnsigned                           ;function code
  2953                                                          int     _svc                                            ;invoke OS servie
  2954                                  %endmacro
  2955                                  %macro                  freeMemory 1
  2956                                                          mov     edx,%1                                          ;address of memory block
  2957                                                          mov     al,eFreeMemory                                  ;function code
  2958                                                          int     _svc                                            ;invoke OS service
  2959                                  %endmacro
  2960                                  %macro                  getBaseMemSize 0
  2961                                                          mov     al,eGetBaseMemSize                              ;function code
  2962                                                          int     _svc                                            ;invoke OS service
  2963                                  %endmacro
  2964                                  %macro                  getConsoleString 4
  2965                                                          mov     edx,%1                                          ;buffer address
  2966                                                          mov     ecx,%2                                          ;max characters
  2967                                                          mov     bh,%3                                           ;echo indicator
  2968                                                          mov     bl,%4                                           ;terminator
  2969                                                          mov     al,eGetConsoleString                            ;function code
  2970                                                          int     _svc                                            ;invoke OS service
  2971                                  %endmacro
  2972                                  %macro                  getExtendedMemSize 0
  2973                                                          mov     al,eGetExtendedMemSize                          ;function code
  2974                                                          int     _svc                                            ;invoke OS service
  2975                                  %endmacro
  2976                                  %macro                  getROMMemSize 0
  2977                                                          mov     al,eGetROMMemSize                               ;function code
  2978                                                          int     _svc                                            ;invoke OS service
  2979                                  %endmacro
  2980                                  %macro                  hexadecimalToUnsigned 0
  2981                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2982                                                          int     _svc                                            ;invoke OS service
  2983                                  %endmacro
  2984                                  %macro                  isLeapYear 1
  2985                                                          mov     ebx,%1                                          ;DATETIME addr
  2986                                                          mov     al,eIsLeapYear                                  ;function code
  2987                                                          int     _svc                                            ;invoke OS service
  2988                                  %endmacro
  2989                                  %macro                  placeCursor 0
  2990                                                          mov     al,ePlaceCursor                                 ;function code
  2991                                                          int     _svc                                            ;invoke OS service
  2992                                  %endmacro
  2993                                  %macro                  putConsoleString 0
  2994                                                          mov     al,ePutConsoleString                            ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  putConsoleString 1
  2998                                                          mov     edx,%1                                          ;string address
  2999                                                          mov     al,ePutConsoleString                            ;function code
  3000                                                          int     _svc                                            ;invoke OS service
  3001                                  %endmacro
  3002                                  %macro                  putDateString 0
  3003                                                          mov     al,ePutDateString                               ;function code
  3004                                                          int     _svc                                            ;invoke OS service
  3005                                  %endmacro
  3006                                  %macro                  putDateString 2
  3007                                                          mov     ebx,%1                                          ;DATETIME addr
  3008                                                          mov     edx,%2                                          ;output buffer addr
  3009                                                          mov     al,ePutDateString                               ;function code
  3010                                                          int     _svc                                            ;invoke OS service
  3011                                  %endmacro
  3012                                  %macro                  putDayString 2
  3013                                                          mov     ebx,%1                                          ;DATETIME addr
  3014                                                          mov     edx,%2                                          ;output buffer addr
  3015                                                          mov     al,ePutDayString                                ;function code
  3016                                                          int     _svc                                            ;invoke OS service
  3017                                  %endmacro
  3018                                  %macro                  putHourString 2
  3019                                                          mov     ebx,%1                                          ;DATETIME addr
  3020                                                          mov     edx,%2                                          ;output buffer addr
  3021                                                          mov     al,ePutHourString                               ;function code
  3022                                                          int     _svc                                            ;invoke OS service
  3023                                  %endmacro
  3024                                  %macro                  putMACString 1
  3025                                                          mov     edx,%1                                          ;output buffer address
  3026                                                          mov     al,ePutMACString                                ;function code
  3027                                                          int     _svc                                            ;invoke OS service
  3028                                  %endmacro
  3029                                  %macro                  putMinuteString 2
  3030                                                          mov     ebx,%1                                          ;DATETIME addr
  3031                                                          mov     edx,%2                                          ;output buffer addr
  3032                                                          mov     al,ePutMinuteString                             ;function code
  3033                                                          int     _svc                                            ;invoke OS service
  3034                                  %endmacro
  3035                                  %macro                  putMonthString 2
  3036                                                          mov     ebx,%1                                          ;DATETIME addr
  3037                                                          mov     edx,%2                                          ;output buffer addr
  3038                                                          mov     al,ePutMonthString                              ;function code
  3039                                                          int     _svc                                            ;invoke OS service
  3040                                  %endmacro
  3041                                  %macro                  putMonthNameString 2
  3042                                                          mov     ebx,%1                                          ;DATETIME addr
  3043                                                          mov     edx,%2                                          ;output buffer addr
  3044                                                          mov     al,ePutMonthNameString                          ;function code
  3045                                                          int     _svc                                            ;invoke OS service
  3046                                  %endmacro
  3047                                  %macro                  putSecondString 2
  3048                                                          mov     ebx,%1                                          ;DATETIME addr
  3049                                                          mov     edx,%2                                          ;output buffer addr
  3050                                                          mov     al,ePutSecondString                             ;function code
  3051                                                          int     _svc                                            ;invoke OS service
  3052                                  %endmacro
  3053                                  %macro                  putTimeString 0
  3054                                                          mov     al,ePutTimeString                               ;function code
  3055                                                          int     _svc                                            ;invoke OS service
  3056                                  %endmacro
  3057                                  %macro                  putTimeString 2
  3058                                                          mov     ebx,%1                                          ;DATETIME addr
  3059                                                          mov     edx,%2                                          ;output buffer addr
  3060                                                          mov     al,ePutTimeString                               ;function code
  3061                                                          int     _svc                                            ;invoke OS service
  3062                                  %endmacro
  3063                                  %macro                  putWeekdayString 2
  3064                                                          mov     ebx,%1                                          ;DATETIME addr
  3065                                                          mov     edx,%2                                          ;output buffer addr
  3066                                                          mov     al,ePutWeekdayString                            ;function code
  3067                                                          int     _svc                                            ;invoke OS service
  3068                                  %endmacro
  3069                                  %macro                  putWeekdayNameString 2
  3070                                                          mov     ebx,%1                                          ;DATETIME addr
  3071                                                          mov     edx,%2                                          ;output buffer addr
  3072                                                          mov     al,ePutWeekdayNameString                        ;function code
  3073                                                          int     _svc                                            ;invoke OS service
  3074                                  %endmacro
  3075                                  %macro                  putYearString 2
  3076                                                          mov     ebx,%1                                          ;DATETIME addr
  3077                                                          mov     edx,%2                                          ;output buffer addr
  3078                                                          mov     al,ePutYearString                               ;function code
  3079                                                          int     _svc                                            ;invoke OS service
  3080                                  %endmacro
  3081                                  %macro                  readRealTimeClock 0
  3082                                                          mov     al,eReadRealTimeClock                           ;function code
  3083                                                          int     _svc                                            ;invoke OS service
  3084                                  %endmacro
  3085                                  %macro                  readRealTimeClock 1
  3086                                                          mov     ebx,%1                                          ;DATETIME addr
  3087                                                          mov     al,eReadRealTimeClock                           ;function code
  3088                                                          int     _svc                                            ;invoke OS service
  3089                                  %endmacro
  3090                                  %macro                  resetSystem 0
  3091                                                          mov     al,eResetSystem                                 ;function code
  3092                                                          int     _svc                                            ;invoke OS service
  3093                                  %endmacro
  3094                                  %macro                  unsignedToDecimalString 0
  3095                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3096                                                          int     _svc                                            ;invoke OS service
  3097                                  %endmacro
  3098                                  %macro                  unsignedToHexadecimal 0
  3099                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3100                                                          int     _svc                                            ;invoke OS service
  3101                                  %endmacro
  3102                                  %macro                  upperCaseString 0
  3103                                                          mov     al,eUpperCaseString                             ;function code
  3104                                                          int     _svc                                            ;invoke OS service
  3105                                  %endmacro
  3106                                  ;=======================================================================================================================
  3107                                  ;
  3108                                  ;       Kernel Function Library
  3109                                  ;
  3110                                  ;=======================================================================================================================
  3111                                  ;=======================================================================================================================
  3112                                  ;
  3113                                  ;       Date and Time Helper Routines
  3114                                  ;
  3115                                  ;       GetYear
  3116                                  ;       IsLeapYear
  3117                                  ;       PutDateString
  3118                                  ;       PutDayString
  3119                                  ;       PutHourString
  3120                                  ;       PutMinuteString
  3121                                  ;       PutMonthString
  3122                                  ;       PutMonthNameString
  3123                                  ;       PutSecondString
  3124                                  ;       PutTimeString
  3125                                  ;       PutWeekdayString
  3126                                  ;       PutWeekdayNameString
  3127                                  ;       PutYearString
  3128                                  ;
  3129                                  ;=======================================================================================================================
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131                                  ;
  3132                                  ;       Routine:        GetYear
  3133                                  ;
  3134                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3135                                  ;
  3136                                  ;       In:             DS:EBX  DATETIME address
  3137                                  ;
  3138                                  ;       Out:            ECX     year
  3139                                  ;
  3140                                  ;-----------------------------------------------------------------------------------------------------------------------
  3141 000009AF 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3142 000009B3 6BC964                                          imul    ecx,100                                         ;century * 100
  3143 000009B6 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3144 000009BA 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3145 000009BC C3                                              ret                                                     ;return
  3146                                  ;-----------------------------------------------------------------------------------------------------------------------
  3147                                  ;
  3148                                  ;       Routine:        IsLeapYear
  3149                                  ;
  3150                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3151                                  ;
  3152                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3153                                  ;
  3154                                  ;       Out:            ECX     0 = not a leap year
  3155                                  ;                               1 = leap year
  3156                                  ;
  3157                                  ;-----------------------------------------------------------------------------------------------------------------------
  3158 000009BD E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3159 000009C2 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3160 000009C4 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3161 000009C6 A803                                            test    al,00000011b                                    ;multiple of four?
  3162 000009C8 750D                                            jnz     .no                                             ;no, branch
  3163 000009CA B264                                            mov     dl,100                                          ;divisor
  3164 000009CC F6F2                                            div     dl                                              ;divide by 100
  3165 000009CE 84E4                                            test    ah,ah                                           ;multiple of 100?
  3166 000009D0 7504                                            jnz     .yes                                            ;yes, branch
  3167 000009D2 A803                                            test    al,00000011b                                    ;multiple of 400?
  3168 000009D4 7501                                            jnz     .no                                             ;no, branch
  3169 000009D6 41                      .yes                    inc     ecx                                             ;indicate leap
  3170 000009D7 C3                      .no                     ret                                                     ;return
  3171                                  ;-----------------------------------------------------------------------------------------------------------------------
  3172                                  ;
  3173                                  ;       Routine:        PutDateString
  3174                                  ;
  3175                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3176                                  ;                       structure at ds:ebx.
  3177                                  ;
  3178                                  ;       In:             DS:EBX  DATETIME address
  3179                                  ;                       DS:EDX  output buffer address
  3180                                  ;
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182 000009D8 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3183 000009D9 57                                              push    edi                                             ;
  3184 000009DA 06                                              push    es                                              ;
  3185 000009DB 1E                                              push    ds                                              ;store data selector ...
  3186 000009DC 07                                              pop     es                                              ;... in extra segment reg
  3187 000009DD 89D7                                            mov     edi,edx                                         ;output buffer address
  3188 000009DF B10A                                            mov     cl,10                                           ;divisor
  3189 000009E1 BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3190 000009E6 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3191 000009EA F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3192 000009EC 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3193 000009EE FC                                              cld                                                     ;forward strings
  3194 000009EF AB                                              stosd                                                   ;store "mm/"nul
  3195 000009F0 4F                                              dec     edi                                             ;address of terminator
  3196 000009F1 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3197 000009F5 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3198 000009F7 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3199 000009F9 AB                                              stosd                                                   ;store "dd/"nul
  3200 000009FA 4F                                              dec     edi                                             ;address of terminator
  3201 000009FB 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3202 000009FF F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3203 00000A01 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3204 00000A03 AB                                              stosd                                                   ;store "cc/"null
  3205 00000A04 4F                                              dec     edi                                             ;address of terminator
  3206 00000A05 4F                                              dec     edi                                             ;address of delimiter
  3207 00000A06 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3208 00000A0A F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3209 00000A0C 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3210 00000A0E AA                                              stosb                                                   ;store quotient
  3211 00000A0F 88E0                                            mov     al,ah                                           ;remainder
  3212 00000A11 AA                                              stosb                                                   ;store remainder
  3213 00000A12 30C0                                            xor     al,al                                           ;null terminator
  3214 00000A14 AA                                              stosb                                                   ;store terminator
  3215 00000A15 07                                              pop     es                                              ;restore non-volatile regs
  3216 00000A16 5F                                              pop     edi                                             ;
  3217 00000A17 59                                              pop     ecx                                             ;
  3218 00000A18 C3                                              ret                                                     ;return
  3219                                  ;-----------------------------------------------------------------------------------------------------------------------
  3220                                  ;
  3221                                  ;       Routine:        PutDayString
  3222                                  ;
  3223                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3224                                  ;                       structure at ds:ebx.
  3225                                  ;
  3226                                  ;       In:             DS:EBX  DATETIME address
  3227                                  ;                       DS:EDX  output buffer address
  3228                                  ;
  3229                                  ;-----------------------------------------------------------------------------------------------------------------------
  3230 00000A19 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3231 00000A1A 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3232 00000A1E B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3233 00000A20 E836070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3234 00000A25 59                                              pop     ecx                                             ;
  3235 00000A26 C3                                              ret                                                     ;return
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237                                  ;
  3238                                  ;       Routine:        PutHourString
  3239                                  ;
  3240                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3241                                  ;                       structure at ds:ebx.
  3242                                  ;
  3243                                  ;       In:             DS:EBX  DATETIME address
  3244                                  ;                       DS:EDX  output buffer address
  3245                                  ;
  3246                                  ;-----------------------------------------------------------------------------------------------------------------------
  3247 00000A27 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3248 00000A28 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3249 00000A2C B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3250 00000A2E E828070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3251 00000A33 59                                              pop     ecx                                             ;
  3252 00000A34 C3                                              ret                                                     ;return
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  ;
  3255                                  ;       Routine:        PutMinuteString
  3256                                  ;
  3257                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3258                                  ;                       structure at ds:ebx.
  3259                                  ;
  3260                                  ;       In:             DS:EBX  DATETIME address
  3261                                  ;                       DS:EDX  output buffer address
  3262                                  ;
  3263                                  ;-----------------------------------------------------------------------------------------------------------------------
  3264 00000A35 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3265 00000A36 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3266 00000A3A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3267 00000A3C E81A070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3268 00000A41 59                                              pop     ecx                                             ;
  3269 00000A42 C3                                              ret                                                     ;return
  3270                                  ;-----------------------------------------------------------------------------------------------------------------------
  3271                                  ;
  3272                                  ;       Routine:        PutMonthString
  3273                                  ;
  3274                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3275                                  ;                       structure at ds:ebx.
  3276                                  ;
  3277                                  ;       In:             DS:EBX  DATETIME address
  3278                                  ;                       DS:EDX  output buffer address
  3279                                  ;
  3280                                  ;-----------------------------------------------------------------------------------------------------------------------
  3281 00000A43 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3282 00000A44 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3283 00000A48 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3284 00000A4A E80C070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3285 00000A4F 59                                              pop     ecx                                             ;
  3286 00000A50 C3                                              ret                                                     ;return
  3287                                  ;-----------------------------------------------------------------------------------------------------------------------
  3288                                  ;
  3289                                  ;       Routine:        PutMonthNameString
  3290                                  ;
  3291                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3292                                  ;                       structure at ds:ebx.
  3293                                  ;
  3294                                  ;       In:             DS:EBX  DATETIME address
  3295                                  ;                       DS:EDX  output buffer address
  3296                                  ;
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298 00000A51 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3299 00000A52 57                                              push    edi                                             ;
  3300 00000A53 1E                                              push    ds                                              ;
  3301 00000A54 06                                              push    es                                              ;
  3302 00000A55 1E                                              push    ds                                              ;load data selector ...
  3303 00000A56 07                                              pop     es                                              ;... into extra segment
  3304 00000A57 89D7                                            mov     edi,edx                                         ;output buffer address
  3305 00000A59 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3306 00000A5D 48                                              dec     eax                                             ;month (0-11)
  3307 00000A5E C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3308 00000A61 0E                                              push    cs                                              ;load code selector ...
  3309 00000A62 1F                                              pop     ds                                              ;... into data segment
  3310 00000A63 8BB0[A40B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3311 00000A69 FC                                              cld                                                     ;forward strings
  3312 00000A6A AC                      .10                     lodsb                                                   ;name character
  3313 00000A6B AA                                              stosb                                                   ;store in output buffer
  3314 00000A6C 84C0                                            test    al,al                                           ;end of string?
  3315 00000A6E 75FA                                            jnz     .10                                             ;no, continue
  3316 00000A70 07                                              pop     es                                              ;restore non-volatile regs
  3317 00000A71 1F                                              pop     ds                                              ;
  3318 00000A72 5F                                              pop     edi                                             ;
  3319 00000A73 5E                                              pop     esi                                             ;
  3320 00000A74 C3                                              ret                                                     ;return
  3321                                  ;-----------------------------------------------------------------------------------------------------------------------
  3322                                  ;
  3323                                  ;       Routine:        PutSecondString
  3324                                  ;
  3325                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3326                                  ;                       structure at ds:ebx.
  3327                                  ;
  3328                                  ;       In:             DS:EBX  DATETIME address
  3329                                  ;                       DS:EDX  output buffer address
  3330                                  ;
  3331                                  ;-----------------------------------------------------------------------------------------------------------------------
  3332 00000A75 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3333 00000A76 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3334 00000A79 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3335 00000A7B E8DB060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3336 00000A80 59                                              pop     ecx                                             ;
  3337 00000A81 C3                                              ret                                                     ;return
  3338                                  ;-----------------------------------------------------------------------------------------------------------------------
  3339                                  ;
  3340                                  ;       Routine:        PutTimeString
  3341                                  ;
  3342                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3343                                  ;                       structure at ds:ebx.
  3344                                  ;
  3345                                  ;       In:             DS:EBX  DATETIME address
  3346                                  ;                       DS:EDX  output buffer address
  3347                                  ;
  3348                                  ;-----------------------------------------------------------------------------------------------------------------------
  3349 00000A82 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3350 00000A83 57                                              push    edi                                             ;
  3351 00000A84 06                                              push    es                                              ;
  3352 00000A85 1E                                              push    ds                                              ;store data selector ...
  3353 00000A86 07                                              pop     es                                              ;... in extra segment reg
  3354 00000A87 89D7                                            mov     edi,edx                                         ;output buffer address
  3355 00000A89 B10A                                            mov     cl,10                                           ;divisor
  3356 00000A8B BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3357 00000A90 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3358 00000A94 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3359 00000A96 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3360 00000A98 FC                                              cld                                                     ;forward strings
  3361 00000A99 AB                                              stosd                                                   ;store "mm/"nul
  3362 00000A9A 4F                                              dec     edi                                             ;address of terminator
  3363 00000A9B 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3364 00000A9F F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3365 00000AA1 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3366 00000AA3 AB                                              stosd                                                   ;store "dd/"nul
  3367 00000AA4 4F                                              dec     edi                                             ;address of terminator
  3368 00000AA5 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3369 00000AA8 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3370 00000AAA 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3371 00000AAC AA                                              stosb                                                   ;store quotient
  3372 00000AAD 88E0                                            mov     al,ah                                           ;remainder
  3373 00000AAF AA                                              stosb                                                   ;store remainder
  3374 00000AB0 30C0                                            xor     al,al                                           ;null terminator
  3375 00000AB2 AA                                              stosb                                                   ;store terminator
  3376 00000AB3 07                                              pop     es                                              ;restore non-volatile regs
  3377 00000AB4 5F                                              pop     edi                                             ;
  3378 00000AB5 59                                              pop     ecx                                             ;
  3379 00000AB6 C3                                              ret                                                     ;return
  3380                                  ;-----------------------------------------------------------------------------------------------------------------------
  3381                                  ;
  3382                                  ;       Routine:        PutWeekdayString
  3383                                  ;
  3384                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3385                                  ;                       structure at ds:ebx.
  3386                                  ;
  3387                                  ;       In:             DS:EBX  DATETIME address
  3388                                  ;                       DS:EDX  output buffer address
  3389                                  ;
  3390                                  ;-----------------------------------------------------------------------------------------------------------------------
  3391 00000AB7 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3392 00000AB8 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3393 00000ABC B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3394 00000ABE E898060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3395 00000AC3 59                                              pop     ecx                                             ;
  3396 00000AC4 C3                                              ret                                                     ;return
  3397                                  ;-----------------------------------------------------------------------------------------------------------------------
  3398                                  ;
  3399                                  ;       Routine:        PutWeekdayNameString
  3400                                  ;
  3401                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3402                                  ;                       structure at ds:ebx.
  3403                                  ;
  3404                                  ;       In:             DS:EBX  DATETIME address
  3405                                  ;                       DS:EDX  output buffer address
  3406                                  ;
  3407                                  ;-----------------------------------------------------------------------------------------------------------------------
  3408 00000AC5 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3409 00000AC6 57                                              push    edi                                             ;
  3410 00000AC7 1E                                              push    ds                                              ;
  3411 00000AC8 06                                              push    es                                              ;
  3412 00000AC9 1E                                              push    ds                                              ;load data selector ...
  3413 00000ACA 07                                              pop     es                                              ;... into extra segment
  3414 00000ACB 89D7                                            mov     edi,edx                                         ;output buffer address
  3415 00000ACD 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3416 00000AD1 C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3417 00000AD4 0E                                              push    cs                                              ;load code selector ...
  3418 00000AD5 1F                                              pop     ds                                              ;... into data segment
  3419 00000AD6 8BB0[880B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3420 00000ADC FC                                              cld                                                     ;forward strings
  3421 00000ADD AC                      .10                     lodsb                                                   ;name character
  3422 00000ADE AA                                              stosb                                                   ;store in output buffer
  3423 00000ADF 84C0                                            test    al,al                                           ;end of string?
  3424 00000AE1 75FA                                            jnz     .10                                             ;no, continue
  3425 00000AE3 07                                              pop     es                                              ;restore non-volatile regs
  3426 00000AE4 1F                                              pop     ds                                              ;
  3427 00000AE5 5F                                              pop     edi                                             ;
  3428 00000AE6 5E                                              pop     esi                                             ;
  3429 00000AE7 C3                                              ret                                                     ;return
  3430                                  ;-----------------------------------------------------------------------------------------------------------------------
  3431                                  ;
  3432                                  ;       Routine:        PutYearString
  3433                                  ;
  3434                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3435                                  ;                       structure at ds:ebx.
  3436                                  ;
  3437                                  ;       In:             DS:EBX  DATETIME address
  3438                                  ;                       DS:EDX  output buffer address
  3439                                  ;
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441 00000AE8 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3442 00000AE9 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3443 00000AEE B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3444 00000AF0 E866060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3445 00000AF5 59                                              pop     ecx                                             ;restore non-volatile regs
  3446 00000AF6 C3                                              ret                                                     ;return
  3447                                  ;-----------------------------------------------------------------------------------------------------------------------
  3448                                  ;
  3449                                  ;       Day Names
  3450                                  ;
  3451                                  ;-----------------------------------------------------------------------------------------------------------------------
  3452 00000AF7 53756E64617900          czSunday                db      "Sunday",0
  3453 00000AFE 4D6F6E64617900          czMonday                db      "Monday",0
  3454 00000B05 5475657364617900        czTuesday               db      "Tuesday",0
  3455 00000B0D 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3455 00000B16 00                 
  3456 00000B17 546875727364617900      czThursday              db      "Thursday",0
  3457 00000B20 46726964617900          czFriday                db      "Friday",0
  3458 00000B27 536174757264617900      czSaturday              db      "Saturday",0
  3459                                  ;-----------------------------------------------------------------------------------------------------------------------
  3460                                  ;
  3461                                  ;       Month Names
  3462                                  ;
  3463                                  ;-----------------------------------------------------------------------------------------------------------------------
  3464 00000B30 4A616E7561727900        czJanuary               db      "January",0
  3465 00000B38 466562727561727900      czFebruary              db      "February",0
  3466 00000B41 4D6172636800            czMarch                 db      "March",0
  3467 00000B47 417072696C00            czApril                 db      "April",0
  3468 00000B4D 4D617900                czMay                   db      "May",0
  3469 00000B51 4A756E6500              czJune                  db      "June",0
  3470 00000B56 4A756C7900              czJuly                  db      "July",0
  3471 00000B5B 41756775737400          czAugust                db      "August",0
  3472 00000B62 53657074656D626572-     czSeptember             db      "September",0
  3472 00000B6B 00                 
  3473 00000B6C 4F63746F62657200        czOctober               db      "October",0
  3474 00000B74 4E6F76656D62657200      czNovember              db      "November",0
  3475 00000B7D 446563656D62657200      czDecember              db      "December",0
  3476                                  ;-----------------------------------------------------------------------------------------------------------------------
  3477                                  ;
  3478                                  ;       Day Names Lookup Table
  3479                                  ;
  3480                                  ;-----------------------------------------------------------------------------------------------------------------------
  3481 00000B86 90<rept>                                        align   4
  3482                                  tDayNames               equ     $
  3483 00000B88 [F70A0000]                                      dd      czSunday
  3484 00000B8C [FE0A0000]                                      dd      czMonday
  3485 00000B90 [050B0000]                                      dd      czTuesday
  3486 00000B94 [0D0B0000]                                      dd      czWednesday
  3487 00000B98 [170B0000]                                      dd      czThursday
  3488 00000B9C [200B0000]                                      dd      czFriday
  3489 00000BA0 [270B0000]                                      dd      czSaturday
  3490                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3491                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493                                  ;
  3494                                  ;       Month Names Lookup Table
  3495                                  ;
  3496                                  ;-----------------------------------------------------------------------------------------------------------------------
  3497                                                          align   4
  3498                                  tMonthNames             equ     $
  3499 00000BA4 [300B0000]                                      dd      czJanuary
  3500 00000BA8 [380B0000]                                      dd      czFebruary
  3501 00000BAC [410B0000]                                      dd      czMarch
  3502 00000BB0 [470B0000]                                      dd      czApril
  3503 00000BB4 [4D0B0000]                                      dd      czMay
  3504 00000BB8 [510B0000]                                      dd      czJune
  3505 00000BBC [560B0000]                                      dd      czJuly
  3506 00000BC0 [5B0B0000]                                      dd      czAugust
  3507 00000BC4 [620B0000]                                      dd      czSeptember
  3508 00000BC8 [6C0B0000]                                      dd      czOctober
  3509 00000BCC [740B0000]                                      dd      czNovember
  3510 00000BD0 [7D0B0000]                                      dd      czDecember
  3511                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3512                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3513                                  ;=======================================================================================================================
  3514                                  ;
  3515                                  ;       Memory Helper Routines
  3516                                  ;
  3517                                  ;       AllocateMemory
  3518                                  ;       FreeMemory
  3519                                  ;
  3520                                  ;=======================================================================================================================
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522                                  ;
  3523                                  ;       Routine:        AllocateMemory
  3524                                  ;
  3525                                  ;       Description:    This routine allocates a memory block for the given task.
  3526                                  ;
  3527                                  ;       In:             ECX     bytes of memory to allocate
  3528                                  ;
  3529                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3530                                  ;                               0       unable to allocate memory
  3531                                  ;
  3532                                  ;-----------------------------------------------------------------------------------------------------------------------
  3533 00000BD4 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3534 00000BD5 51                                              push    ecx                                             ;
  3535 00000BD6 56                                              push    esi                                             ;
  3536 00000BD7 1E                                              push    ds                                              ;
  3537                                  ;
  3538                                  ;       Address kernel memory structures
  3539                                  ;
  3540 00000BD8 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3541 00000BDA 1F                                              pop     ds                                              ;... into data segment reg
  3542 00000BDB BE3B090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3543                                  ;
  3544                                  ;       Set requested size to minimum block size if requested size is too small.
  3545                                  ;
  3546 00000BE0 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3547 00000BE6 7305                                            jae     .10                                             ;no, branch
  3548 00000BE8 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3549 00000BED 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3550                                  ;
  3551                                  ;       Find the first free memory block large enough to satisfy the request.
  3552                                  ;
  3553 00000BF0 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3554 00000BF3 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3555 00000BF5 0F84F2000000                                    jz      .220                                            ;yes, branch
  3556 00000BFB 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3557 00000BFE 7605                                            jbe     .30                                             ;yes, branch
  3558 00000C00 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3559 00000C03 EBEE                                            jmp     .20                                             ;continue
  3560                                  ;-----------------------------------------------------------------------------------------------------------------------
  3561                                  ;
  3562                                  ;       Address the previous and next free memory blocks.
  3563                                  ;
  3564 00000C05 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3565 00000C08 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3566                                  ;
  3567                                  ;       Remove the free memory block from the forward free memory block chain.
  3568                                  ;
  3569 00000C0B 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3570 00000C0D 7405                                            jz      .40                                             ;no, branch
  3571 00000C0F 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3572 00000C12 EB03                                            jmp     .50                                             ;continue
  3573 00000C14 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3574                                  ;
  3575                                  ;       Remove the free memory block from the reverse free memory block chain.
  3576                                  ;
  3577 00000C17 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3578 00000C19 7405                                            jz      .60                                             ;no, branch
  3579 00000C1B 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3580 00000C1E EB03                                            jmp     .70                                             ;continue
  3581 00000C20 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3582                                  ;-----------------------------------------------------------------------------------------------------------------------
  3583                                  ;
  3584                                  ;       Determine if the free memory block can be split.
  3585                                  ;
  3586 00000C23 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3587 00000C26 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3588 00000C28 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3589 00000C2E 7263                                            jb      .150                                            ;no, branch
  3590                                  ;
  3591                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3592                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3593                                  ;       of the requested memory size.
  3594                                  ;
  3595 00000C30 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3596 00000C33 89C2                                            mov     edx,eax                                         ;memory block address
  3597 00000C35 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3598 00000C37 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3599 00000C3A 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3600                                  ;
  3601                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3602                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3603                                  ;
  3604 00000C3D E305                                            jecxz   .80                                             ;no next contig, branch
  3605 00000C3F 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3606 00000C42 EB03                                            jmp     .90                                             ;continue
  3607 00000C44 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3608                                  ;
  3609                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3610                                  ;
  3611 00000C47 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3612 00000C4A 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3613 00000C4D 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3614 00000C50 BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3615 00000C55 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3616 00000C57 31DB                                            xor     ebx,ebx                                         ;zero register
  3617 00000C59 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3618 00000C5C 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3619                                  ;
  3620                                  ;       Find the proper location in the free block chain for the new free block
  3621                                  ;
  3622 00000C5F 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3623 00000C62 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3624 00000C65 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3625 00000C67 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3626 00000C6A 7605                                            jbe     .110                                            ;yes, branch
  3627 00000C6C 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3628 00000C6F EBF4                                            jmp     .100                                            ;continue
  3629                                  ;
  3630                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3631                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3632                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3633                                  ;       block of hte next block, if there is one.
  3634                                  ;
  3635 00000C71 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3636 00000C74 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3637 00000C77 E308                                            jecxz   .120                                            ;branch if no next block
  3638 00000C79 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3639 00000C7C 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3640 00000C7F EB03                                            jmp     .130                                            ;continue
  3641 00000C81 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3642                                  ;
  3643                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3644                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3645                                  ;       last user block pointers if necessary.
  3646                                  ;
  3647 00000C84 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3648 00000C87 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3649 00000C89 7405                                            jz      .140                                            ;no, branch
  3650 00000C8B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3651 00000C8E EB03                                            jmp     .150                                            ;continue
  3652 00000C90 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3653                                  ;
  3654                                  ;       Update the newly allocated block's owner and signature.
  3655                                  ;
  3656 00000C93 BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3657 00000C98 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3658 00000C9A 31D2                                            xor     edx,edx                                         ;zero register
  3659 00000C9C 660F00CA                                        str     dx                                              ;load the task state register
  3660 00000CA0 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3661                                  ;
  3662                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3663                                  ;
  3664 00000CA3 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3665 00000CA6 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3666 00000CA8 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3667 00000CAB 721E                                            jb      .180                                            ;branch if block belongs to next task
  3668 00000CAD 7405                                            je      .170                                            ;branch if block belongs to this task
  3669 00000CAF 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3670 00000CB2 EBF2                                            jmp     .160                                            ;continue
  3671                                  ;
  3672                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3673                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3674                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3675                                  ;       place to insert the block.
  3676                                  ;
  3677 00000CB4 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3678 00000CB7 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3679 00000CBA 760F                                            jbe     .180                                            ;yes, branch
  3680 00000CBC 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3681 00000CBF 85C9                                            test    ecx,ecx                                         ;end of chain?
  3682 00000CC1 7408                                            jz      .180                                            ;yes, branch
  3683 00000CC3 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3684 00000CC6 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3685 00000CC9 74E9                                            je      .170                                            ;yes, continue search
  3686                                  ;
  3687                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3688                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3689                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3690                                  ;       do have a previous-block, we update that block's next-block pointer.
  3691                                  ;
  3692 00000CCB 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3693 00000CCE 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3694 00000CD1 E308                                            jecxz   .190                                            ;branch if no next-task block
  3695 00000CD3 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3696 00000CD6 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3697 00000CD9 EB03                                            jmp     .200                                            ;continue
  3698 00000CDB 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3699                                  ;
  3700                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3701                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3702                                  ;       global first and/or last user-block pointers if necessary.
  3703                                  ;
  3704 00000CDE 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3705 00000CE1 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3706 00000CE3 7405                                            jz      .210                                            ;no, branch
  3707 00000CE5 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3708 00000CE8 EB03                                            jmp     .220                                            ;continue
  3709 00000CEA 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3710                                  ;
  3711                                  ;       Restore registers and return to caller.
  3712                                  ;
  3713 00000CED 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3714 00000CEE 5E                                              pop     esi                                             ;
  3715 00000CEF 59                                              pop     ecx                                             ;
  3716 00000CF0 5B                                              pop     ebx                                             ;
  3717 00000CF1 C3                                              ret                                                     ;return
  3718                                  ;-----------------------------------------------------------------------------------------------------------------------
  3719                                  ;
  3720                                  ;       Routine:        FreeMemory
  3721                                  ;
  3722                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3723                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3724                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3725                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3726                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3727                                  ;
  3728                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3729                                  ;
  3730                                  ;       Out:            EAX     -1      invalid memory block
  3731                                  ;                               0       memory block freed
  3732                                  ;
  3733                                  ;-----------------------------------------------------------------------------------------------------------------------
  3734 00000CF2 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3735 00000CF3 51                                              push    ecx                                             ;
  3736 00000CF4 56                                              push    esi                                             ;
  3737 00000CF5 57                                              push    edi                                             ;
  3738 00000CF6 1E                                              push    ds                                              ;
  3739 00000CF7 06                                              push    es                                              ;
  3740                                  ;
  3741                                  ;       Address the root memory structure
  3742                                  ;
  3743 00000CF8 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3744 00000CFA 07                                              pop     es                                              ;... into extra segment reg
  3745 00000CFB 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3746 00000CFD 1F                                              pop     ds                                              ;... into data segment reg
  3747 00000CFE BE3B090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3748 00000D03 89D7                                            mov     edi,edx                                         ;memory block address
  3749                                  ;
  3750                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3751                                  ;
  3752 00000D05 31C0                                            xor     eax,eax                                         ;indicate success
  3753 00000D07 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3754 00000D0D 0F8415010000                                    je      .240                                            ;yes, branch
  3755 00000D13 48                                              dec     eax                                             ;indicate failure
  3756 00000D14 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3757 00000D1A 0F8508010000                                    jne     .240                                            ;no, branch
  3758                                  ;-----------------------------------------------------------------------------------------------------------------------
  3759                                  ;
  3760                                  ;       Unlink the USER memory block.
  3761                                  ;
  3762                                  ;-----------------------------------------------------------------------------------------------------------------------
  3763                                  ;
  3764                                  ;       Set the block signature. Reset owner.
  3765                                  ;
  3766 00000D20 C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3767 00000D26 31C0                                            xor     eax,eax                                         ;zero register
  3768 00000D28 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3769                                  ;
  3770                                  ;       Wipe user area.
  3771                                  ;
  3772 00000D2B 57                                              push    edi                                             ;save block address
  3773 00000D2C 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3774 00000D2F 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3775 00000D32 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3776 00000D35 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3777 00000D37 F3AA                                            rep     stosb                                           ;clear memory
  3778 00000D39 5F                                              pop     edi                                             ;restore block address
  3779                                  ;
  3780                                  ;       Address the preceding and following USER memory blocks
  3781                                  ;
  3782 00000D3A 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3783 00000D3D 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3784                                  ;
  3785                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3786                                  ;       pointer to point to the USER block following this block.
  3787                                  ;
  3788 00000D40 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3789 00000D42 7405                                            jz      .10                                             ;no, branch
  3790 00000D44 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3791 00000D47 EB03                                            jmp     .20                                             ;continue
  3792 00000D49 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3793                                  ;
  3794                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3795                                  ;       pointer to point to the USER block preceding this block.
  3796                                  ;
  3797 00000D4C E305                    .20                     jecxz   .30                                             ;branch if no next block
  3798 00000D4E 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3799 00000D51 EB03                                            jmp     .40                                             ;continue
  3800 00000D53 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3801                                  ;-----------------------------------------------------------------------------------------------------------------------
  3802                                  ;
  3803                                  ;       Merge with a previous contiguous FREE memory block.
  3804                                  ;
  3805                                  ;-----------------------------------------------------------------------------------------------------------------------
  3806                                  ;
  3807                                  ;       Address the preceding and following contiguous memory blocks.
  3808                                  ;
  3809 00000D56 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3810 00000D59 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3811                                  ;
  3812                                  ;       Verify we have a previous contiguous FREE block.
  3813                                  ;
  3814 00000D5C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3815 00000D5E 7442                                            jz      .100                                            ;no, branch
  3816 00000D60 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3817 00000D66 753A                                            jne     .100                                            ;no, branch
  3818                                  ;
  3819                                  ;       Update adjacent block's contiguous pointers.
  3820                                  ;
  3821 00000D68 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3822 00000D6B E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3823 00000D6D 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3824 00000D70 EB03                                            jmp     .60                                             ;continue
  3825 00000D72 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3826                                  ;
  3827                                  ;       Update the size of the merged FREE block.
  3828                                  ;
  3829 00000D75 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3830 00000D78 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3831                                  ;
  3832                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3833                                  ;
  3834 00000D7B B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3835 00000D80 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3836 00000D82 F3AA                                            rep     stosb                                           ;clear memory header
  3837 00000D84 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3838                                  ;-----------------------------------------------------------------------------------------------------------------------
  3839                                  ;
  3840                                  ;       Unlink the previous contiguous FREE memory block
  3841                                  ;
  3842                                  ;-----------------------------------------------------------------------------------------------------------------------
  3843                                  ;
  3844                                  ;       Address the preceding and following USER memory blocks
  3845                                  ;
  3846 00000D86 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3847 00000D89 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3848                                  ;
  3849                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3850                                  ;       block pointer.
  3851                                  ;
  3852 00000D8C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3853 00000D8E 7405                                            jz      .70                                             ;no, branch
  3854 00000D90 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3855 00000D93 EB03                                            jmp     .80                                             ;branch
  3856 00000D95 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3857                                  ;
  3858                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3859                                  ;       pointer.
  3860                                  ;
  3861 00000D98 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3862 00000D9A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3863 00000D9D EB03                                            jmp     .100                                            ;continue
  3864 00000D9F 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3865                                  ;-----------------------------------------------------------------------------------------------------------------------
  3866                                  ;
  3867                                  ;       Merge with a following contiguous FREE memory block.
  3868                                  ;
  3869                                  ;-----------------------------------------------------------------------------------------------------------------------
  3870                                  ;
  3871                                  ;       Verify we have a following contiguous FREE block.
  3872                                  ;
  3873 00000DA2 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3874 00000DA5 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3875 00000DA7 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3876 00000DAD 7543                                            jne     .170                                            ;no, branch
  3877                                  ;
  3878                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3879                                  ;
  3880 00000DAF 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3881 00000DB2 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3882                                  ;
  3883                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3884                                  ;
  3885 00000DB5 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3886 00000DB8 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3887 00000DBB 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3888 00000DBD 7405                                            jz      .110                                            ;no, branch
  3889 00000DBF 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3890 00000DC2 EB03                                            jmp     .120                                            ;continue
  3891 00000DC4 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3892                                  ;-----------------------------------------------------------------------------------------------------------------------
  3893                                  ;
  3894                                  ;       Unlink the following contiguous FREE memory block
  3895                                  ;
  3896                                  ;-----------------------------------------------------------------------------------------------------------------------
  3897                                  ;
  3898                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3899                                  ;
  3900 00000DC7 57                      .120                    push    edi                                             ;save this block
  3901 00000DC8 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3902 00000DCA 51                                              push    ecx                                             ;save next contiguous block
  3903                                  ;
  3904                                  ;       Address the preceding and following USER memory blocks
  3905                                  ;
  3906 00000DCB 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3907 00000DCE 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3908                                  ;
  3909                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3910                                  ;       block pointer.
  3911                                  ;
  3912 00000DD1 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3913 00000DD3 7405                                            jz      .130                                            ;no, branch
  3914 00000DD5 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3915 00000DD8 EB03                                            jmp     .140                                            ;branch
  3916 00000DDA 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3917                                  ;
  3918                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3919                                  ;       pointer.
  3920                                  ;
  3921 00000DDD E305                    .140                    jecxz   .150                                            ;branch if no next block
  3922 00000DDF 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3923 00000DE2 EB03                                            jmp     .160                                            ;continue
  3924 00000DE4 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3925                                  ;
  3926                                  ;       Clear next contiguous block's header
  3927                                  ;
  3928 00000DE7 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3929 00000DE8 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3930 00000DED B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3931 00000DEF F3AA                                            rep     stosb                                           ;clear memory header
  3932 00000DF1 5F                                              pop     edi                                             ;this block's pointer
  3933                                  ;-----------------------------------------------------------------------------------------------------------------------
  3934                                  ;
  3935                                  ;       Insert the final FREE block back into the block chain.
  3936                                  ;
  3937                                  ;-----------------------------------------------------------------------------------------------------------------------
  3938                                  ;
  3939                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3940                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3941                                  ;       all are smaller in size.
  3942                                  ;
  3943 00000DF2 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3944 00000DF5 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3945 00000DF8 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3946 00000DFA 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3947 00000DFD 7205                                            jb      .190                                            ;yes, branch
  3948 00000DFF 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3949 00000E02 EBF4                                            jmp     .180                                            ;continue
  3950                                  ;
  3951                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3952                                  ;       larger free block. Update the next block's previous block pointer.
  3953                                  ;
  3954 00000E04 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3955 00000E07 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3956 00000E0A E308                                            jecxz   .200                                            ;branch if no block found
  3957 00000E0C 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3958 00000E0F 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3959 00000E12 EB03                                            jmp     .210                                            ;continue
  3960 00000E14 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3961                                  ;
  3962                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3963                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3964                                  ;       next pointer.
  3965                                  ;
  3966 00000E17 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3967 00000E1A 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3968 00000E1C 7405                                            jz      .220                                            ;no, branch
  3969 00000E1E 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3970 00000E21 EB03                                            jmp     .230                                            ;continue
  3971 00000E23 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3972                                  ;
  3973                                  ;       The memory free has completed.
  3974                                  ;
  3975 00000E26 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3976                                  ;
  3977                                  ;       Restore and return.
  3978                                  ;
  3979 00000E28 07                      .240                    pop     es                                              ;restore non-volatile regs
  3980 00000E29 1F                                              pop     ds                                              ;
  3981 00000E2A 5F                                              pop     edi                                             ;
  3982 00000E2B 5E                                              pop     esi                                             ;
  3983 00000E2C 59                                              pop     ecx                                             ;
  3984 00000E2D 5B                                              pop     ebx                                             ;
  3985 00000E2E C3                                              ret                                                     ;return
  3986                                  ;=======================================================================================================================
  3987                                  ;
  3988                                  ;       String Helper Routines
  3989                                  ;
  3990                                  ;       CompareMemory
  3991                                  ;       UpperCaseString
  3992                                  ;
  3993                                  ;=======================================================================================================================
  3994                                  ;-----------------------------------------------------------------------------------------------------------------------
  3995                                  ;
  3996                                  ;       Routine:        CompareMemory
  3997                                  ;
  3998                                  ;       Description:    This routine compares two byte arrays.
  3999                                  ;
  4000                                  ;       In:             DS:EDX  first source address
  4001                                  ;                       DS:EBX  second source address
  4002                                  ;                       ECX     comparison length
  4003                                  ;
  4004                                  ;       Out:            EDX     first source address
  4005                                  ;                       EBX     second source address
  4006                                  ;                       ECX     0       array 1 = array 2
  4007                                  ;                               <0      array 1 < array 2
  4008                                  ;                               >0      array 1 > array 2
  4009                                  ;
  4010                                  ;-----------------------------------------------------------------------------------------------------------------------
  4011 00000E2F 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  4012 00000E30 57                                              push    edi                                             ;
  4013 00000E31 06                                              push    es                                              ;
  4014 00000E32 1E                                              push    ds                                              ;copy DS
  4015 00000E33 07                                              pop     es                                              ;... to ES
  4016 00000E34 89D6                                            mov     esi,edx                                         ;first source address
  4017 00000E36 89DF                                            mov     edi,ebx                                         ;second source address
  4018 00000E38 FC                                              cld                                                     ;forward strings
  4019 00000E39 F3A6                                            rep     cmpsb                                           ;compare bytes
  4020 00000E3B B000                                            mov     al,0                                            ;default result
  4021 00000E3D 7406                                            jz      .10                                             ;branch if arrays equal
  4022 00000E3F B001                                            mov     al,1                                            ;positive result
  4023 00000E41 7302                                            jnc     .10                                             ;branch if target > source
  4024 00000E43 B0FF                                            mov     al,-1                                           ;negative result
  4025 00000E45 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  4026 00000E48 07                                              pop     es                                              ;restore non-volatile regs
  4027 00000E49 5F                                              pop     edi                                             ;
  4028 00000E4A 5E                                              pop     esi                                             ;
  4029 00000E4B C3                                              ret                                                     ;return
  4030                                  ;-----------------------------------------------------------------------------------------------------------------------
  4031                                  ;
  4032                                  ;       Routine:        UpperCaseString
  4033                                  ;
  4034                                  ;       Description:    This routine places all characters in the given string to upper case.
  4035                                  ;
  4036                                  ;       In:             DS:EDX  string address
  4037                                  ;
  4038                                  ;       Out:            EDX     string address
  4039                                  ;
  4040                                  ;-----------------------------------------------------------------------------------------------------------------------
  4041 00000E4C 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  4042 00000E4D 89D6                                            mov     esi,edx                                         ;string address
  4043 00000E4F FC                                              cld                                                     ;forward strings
  4044 00000E50 AC                      .10                     lodsb                                                   ;string character
  4045 00000E51 84C0                                            test    al,al                                           ;null?
  4046 00000E53 740F                                            jz      .20                                             ;yes, skip ahead
  4047 00000E55 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4048 00000E57 72F7                                            jb      .10                                             ;no, continue
  4049 00000E59 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4050 00000E5B 77F3                                            ja      .10                                             ;no, continue
  4051 00000E5D 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  4052 00000E5F 8846FF                                          mov     [esi-1],al                                      ;upper character
  4053 00000E62 EBEC                                            jmp     .10                                             ;continue
  4054 00000E64 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4055 00000E65 C3                                              ret                                                     ;return
  4056                                  ;=======================================================================================================================
  4057                                  ;
  4058                                  ;       Console Helper Routines
  4059                                  ;
  4060                                  ;       FirstConsoleColumn
  4061                                  ;       GetConsoleChar
  4062                                  ;       GetConsoleString
  4063                                  ;       NextConsoleColumn
  4064                                  ;       NextConsoleRow
  4065                                  ;       PreviousConsoleColumn
  4066                                  ;       PutConsoleChar
  4067                                  ;       PutConsoleHexByte
  4068                                  ;       PutConsoleHexDword
  4069                                  ;       PutConsoleHexWord
  4070                                  ;       PutConsoleOIAChar
  4071                                  ;       PutConsoleOIAShift
  4072                                  ;       PutConsoleString
  4073                                  ;       Yield
  4074                                  ;
  4075                                  ;=======================================================================================================================
  4076                                  ;-----------------------------------------------------------------------------------------------------------------------
  4077                                  ;
  4078                                  ;       Routine:        FirstConsoleColumn
  4079                                  ;
  4080                                  ;       Description:    This routine resets the console column to start of the row.
  4081                                  ;
  4082                                  ;       In:             DS      OS data selector
  4083                                  ;
  4084                                  ;-----------------------------------------------------------------------------------------------------------------------
  4085 00000E66 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  4086 00000E68 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4087 00000E6D C3                                              ret                                                     ;return
  4088                                  ;-----------------------------------------------------------------------------------------------------------------------
  4089                                  ;
  4090                                  ;       Routine:        GetConsoleChar
  4091                                  ;
  4092                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4093                                  ;
  4094                                  ;       Out:            AL      ASCII character code
  4095                                  ;                       AH      keyboard scan code
  4096                                  ;
  4097                                  ;-----------------------------------------------------------------------------------------------------------------------
  4098 00000E6E E85C020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4099 00000E73 E8A7030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  4100 00000E78 09C0                                            or      eax,eax                                         ;do we have a message?
  4101 00000E7A 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  4102 00000E7C 50                                              push    eax                                             ;save key codes
  4103 00000E7D 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  4104 00000E82 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4105 00000E87 58                                              pop     eax                                             ;restore key codes
  4106 00000E88 75E9                                            jne     GetConsoleChar                                  ;no, try again
  4107 00000E8A 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4108 00000E8F C3                                              ret                                                     ;return
  4109                                  ;-----------------------------------------------------------------------------------------------------------------------
  4110                                  ;
  4111                                  ;       Routine:        GetConsoleString
  4112                                  ;
  4113                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4114                                  ;
  4115                                  ;       In:             DS:EDX  target buffer address
  4116                                  ;                       ECX     maximum number of characters to accept
  4117                                  ;                       BH      echo to terminal
  4118                                  ;                       BL      terminating character
  4119                                  ;
  4120                                  ;-----------------------------------------------------------------------------------------------------------------------
  4121 00000E90 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4122 00000E91 56                                              push    esi                                             ;
  4123 00000E92 57                                              push    edi                                             ;
  4124 00000E93 06                                              push    es                                              ;
  4125 00000E94 1E                                              push    ds                                              ;load data segment selector ...
  4126 00000E95 07                                              pop     es                                              ;... into extra segment register
  4127 00000E96 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4128 00000E98 51                                              push    ecx                                             ;save maximum characters
  4129 00000E99 30C0                                            xor     al,al                                           ;zero register
  4130 00000E9B FC                                              cld                                                     ;forward strings
  4131 00000E9C F3AA                                            rep     stosb                                           ;zero fill buffer
  4132 00000E9E 59                                              pop     ecx                                             ;maximum characters
  4133 00000E9F 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4134 00000EA1 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4135 00000EA3 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4136 00000EA5 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4137 00000EAA 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4138 00000EAC 7445                                            je      .50                                             ;yes, exit
  4139 00000EAE 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4140 00000EB0 7521                                            jne     .30                                             ;no, skip ahead
  4141 00000EB2 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4142 00000EB4 74EF                                            je      .20                                             ;yes, get next character
  4143 00000EB6 4F                                              dec     edi                                             ;backup target pointer
  4144 00000EB7 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4145 00000EBA 41                                              inc     ecx                                             ;increment remaining chars
  4146 00000EBB F6C701                                          test    bh,1                                            ;echo to console?
  4147 00000EBE 74E5                                            jz      .20                                             ;no, get next character
  4148 00000EC0 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4149 00000EC5 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4150 00000EC7 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4151 00000ECC E863040000                                      call    PlaceCursor                                     ;position the cursor
  4152 00000ED1 EBD2                                            jmp     .20                                             ;get next character
  4153 00000ED3 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4154 00000ED5 72CE                                            jb      .20                                             ;no, get another character
  4155 00000ED7 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4156 00000ED9 77CA                                            ja      .20                                             ;no, get another character
  4157 00000EDB AA                                              stosb                                                   ;store character in buffer
  4158 00000EDC F6C701                                          test    bh,1                                            ;echo to console?
  4159 00000EDF 740F                                            jz      .40                                             ;no, skip ahead
  4160 00000EE1 E877000000                                      call    PutConsoleChar                                  ;write character to console
  4161 00000EE6 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4162 00000EEB E844040000                                      call    PlaceCursor                                     ;position the cursor
  4163 00000EF0 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4164 00000EF1 EBB0                                            jmp     .10                                             ;next
  4165 00000EF3 30C0                    .50                     xor     al,al                                           ;null
  4166 00000EF5 AA                                              stosb                                                   ;terminate buffer
  4167 00000EF6 07                                              pop     es                                              ;restore non-volatile regs
  4168 00000EF7 5F                                              pop     edi                                             ;
  4169 00000EF8 5E                                              pop     esi                                             ;
  4170 00000EF9 59                                              pop     ecx                                             ;
  4171 00000EFA C3                                              ret                                                     ;return
  4172                                  ;-----------------------------------------------------------------------------------------------------------------------
  4173                                  ;
  4174                                  ;       Routine:        NextConsoleColumn
  4175                                  ;
  4176                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4177                                  ;                       incremented if the end of the current row is reached.
  4178                                  ;
  4179                                  ;       In:             DS      OS data selector
  4180                                  ;
  4181                                  ;-----------------------------------------------------------------------------------------------------------------------
  4182 00000EFB A014080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4183 00000F00 FEC0                                            inc     al                                              ;increment column
  4184 00000F02 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4185 00000F07 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4186 00000F09 720A                                            jb      .10                                             ;no, skip ahead
  4187 00000F0B E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4188 00000F10 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4189 00000F15 C3                      .10                     ret                                                     ;return
  4190                                  ;-----------------------------------------------------------------------------------------------------------------------
  4191                                  ;
  4192                                  ;       Routine:        NextConsoleRow
  4193                                  ;
  4194                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4195                                  ;
  4196                                  ;       In:             DS      OS data selector
  4197                                  ;
  4198                                  ;-----------------------------------------------------------------------------------------------------------------------
  4199 00000F16 A015080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4200 00000F1B FEC0                                            inc     al                                              ;increment row
  4201 00000F1D A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4202 00000F22 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4203 00000F24 7211                                            jb      .10                                             ;no, skip ahead
  4204 00000F26 E88C030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4205 00000F2B A015080000                                      mov     al,[wbConsoleRow]                               ;row
  4206 00000F30 FEC8                                            dec     al                                              ;decrement row
  4207 00000F32 A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4208 00000F37 C3                      .10                     ret                                                     ;return
  4209                                  ;-----------------------------------------------------------------------------------------------------------------------
  4210                                  ;
  4211                                  ;       Routine:        PreviousConsoleColumn
  4212                                  ;
  4213                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4214                                  ;                       the column is set to the last position in the row and the row is decremented.
  4215                                  ;
  4216                                  ;       In:             DS      OS data selector
  4217                                  ;
  4218                                  ;-----------------------------------------------------------------------------------------------------------------------
  4219 00000F38 A014080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4220 00000F3D 08C0                                            or      al,al                                           ;start of row?
  4221 00000F3F 7514                                            jnz     .10                                             ;no, skip ahead
  4222 00000F41 8A2515080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4223 00000F47 08E4                                            or      ah,ah                                           ;top of screen?
  4224 00000F49 7411                                            jz      .20                                             ;yes, exit with no change
  4225 00000F4B FECC                                            dec     ah                                              ;decrement row
  4226 00000F4D 882515080000                                    mov     [wbConsoleRow],ah                               ;save row
  4227 00000F53 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4228 00000F55 FEC8                    .10                     dec     al                                              ;decrement column
  4229 00000F57 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4230 00000F5C C3                      .20                     ret                                                     ;return
  4231                                  ;-----------------------------------------------------------------------------------------------------------------------
  4232                                  ;
  4233                                  ;       Routine:        PutConsoleChar
  4234                                  ;
  4235                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4236                                  ;
  4237                                  ;       In:             AL      ASCII character
  4238                                  ;                       DS      OS data selector
  4239                                  ;
  4240                                  ;-----------------------------------------------------------------------------------------------------------------------
  4241 00000F5D 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4242 00000F5E 06                                              push    es                                              ;
  4243 00000F5F 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4244 00000F61 07                                              pop     es                                              ;... into extra segment reg
  4245 00000F62 8A0D14080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4246 00000F68 8A2D15080000                                    mov     ch,[wbConsoleRow]                               ;row
  4247 00000F6E E870030000                                      call    SetConsoleChar                                  ;put character at row, column
  4248 00000F73 07                                              pop     es                                              ;restore non-volatile regs
  4249 00000F74 59                                              pop     ecx                                             ;
  4250 00000F75 C3                                              ret                                                     ;return
  4251                                  ;-----------------------------------------------------------------------------------------------------------------------
  4252                                  ;
  4253                                  ;       Routine:        PutConsoleHexByte
  4254                                  ;
  4255                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4256                                  ;
  4257                                  ;       In:             AL      byte value
  4258                                  ;                       CL      column
  4259                                  ;                       CH      row
  4260                                  ;                       DS      OS data selector
  4261                                  ;                       ES      CGA selector
  4262                                  ;
  4263                                  ;-----------------------------------------------------------------------------------------------------------------------
  4264 00000F76 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  4265 00000F77 C0E804                                          shr     al,4                                            ;hi-order nybble
  4266 00000F7A E803000000                                      call    .10                                             ;make ASCII and store
  4267 00000F7F 58                                              pop     eax                                             ;byte value
  4268 00000F80 240F                                            and     al,0Fh                                          ;lo-order nybble
  4269 00000F82 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  4270 00000F84 3C3A                                            cmp     al,03Ah                                         ;numeric?
  4271 00000F86 7202                                            jb      .20                                             ;yes, skip ahead
  4272 00000F88 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4273 00000F8A E854030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4274 00000F8F C3                                              ret                                                     ;return
  4275                                  ;-----------------------------------------------------------------------------------------------------------------------
  4276                                  ;
  4277                                  ;       Routine:        PutConsoleHexDword
  4278                                  ;
  4279                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4280                                  ;
  4281                                  ;       In:             EAX     value
  4282                                  ;                       CL      column
  4283                                  ;                       CH      row
  4284                                  ;                       DS      OS data selector
  4285                                  ;                       ES      CGA selector
  4286                                  ;
  4287                                  ;-----------------------------------------------------------------------------------------------------------------------
  4288 00000F90 50                      PutConsoleHexDword      push    eax
  4289 00000F91 C1E810                                          shr     eax,16
  4290 00000F94 E807000000                                      call    PutConsoleHexWord
  4291 00000F99 58                                              pop     eax
  4292 00000F9A E801000000                                      call    PutConsoleHexWord
  4293 00000F9F C3                                              ret
  4294                                  ;-----------------------------------------------------------------------------------------------------------------------
  4295                                  ;
  4296                                  ;       Routine:        PutConsoleHexWord
  4297                                  ;
  4298                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4299                                  ;
  4300                                  ;       In:             EAX     value
  4301                                  ;                       CL      column
  4302                                  ;                       CH      row
  4303                                  ;                       DS      OS data selector
  4304                                  ;                       ES      CGA selector
  4305                                  ;
  4306                                  ;-----------------------------------------------------------------------------------------------------------------------
  4307 00000FA0 50                      PutConsoleHexWord       push    eax
  4308 00000FA1 C1E808                                          shr     eax,8
  4309 00000FA4 E8CDFFFFFF                                      call    PutConsoleHexByte
  4310 00000FA9 58                                              pop     eax
  4311 00000FAA E8C7FFFFFF                                      call    PutConsoleHexByte
  4312 00000FAF C3                                              ret
  4313                                  ;-----------------------------------------------------------------------------------------------------------------------
  4314                                  ;
  4315                                  ;       Routine:        PutConsoleOIAChar
  4316                                  ;
  4317                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4318                                  ;
  4319                                  ;       In:             DS      OS data selector
  4320                                  ;
  4321                                  ;-----------------------------------------------------------------------------------------------------------------------
  4322 00000FB0 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4323 00000FB1 51                                              push    ecx                                             ;
  4324 00000FB2 56                                              push    esi                                             ;
  4325 00000FB3 1E                                              push    ds                                              ;
  4326 00000FB4 06                                              push    es                                              ;
  4327 00000FB5 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4328 00000FB7 1F                                              pop     ds                                              ;... into data segment register
  4329 00000FB8 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4330 00000FBA 07                                              pop     es                                              ;... into extra segment register
  4331 00000FBB BE19080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4332 00000FC0 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4333 00000FC2 B300                                            mov     bl,0                                            ;starting column
  4334 00000FC4 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4335 00000FC9 51                      .10                     push    ecx                                             ;save remaining count
  4336 00000FCA 89D9                                            mov     ecx,ebx                                         ;row, column
  4337 00000FCC AC                                              lodsb                                                   ;read scan code
  4338 00000FCD 08C0                                            or      al,al                                           ;scan code present?
  4339 00000FCF 7407                                            jz      .20                                             ;no, skip ahead
  4340 00000FD1 E8A0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4341 00000FD6 EB0E                                            jmp     .30                                             ;continue
  4342 00000FD8 B020                    .20                     mov     al,' '                                          ;ASCII space
  4343 00000FDA E804030000                                      call    SetConsoleChar                                  ;display space
  4344 00000FDF B020                                            mov     al,' '                                          ;ASCII space
  4345 00000FE1 E8FD020000                                      call    SetConsoleChar                                  ;display space
  4346 00000FE6 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4347 00000FE9 59                                              pop     ecx                                             ;restore remaining
  4348 00000FEA E2DD                                            loop    .10                                             ;next code
  4349 00000FEC A01F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4350 00000FF1 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4351 00000FF3 720D                                            jb      .40                                             ;no, skip ahead
  4352 00000FF5 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4353 00000FF7 7709                                            ja      .40                                             ;no, skip ahead
  4354 00000FF9 88FD                                            mov     ch,bh                                           ;OIA row
  4355 00000FFB B128                                            mov     cl,40                                           ;character display column
  4356 00000FFD E8E1020000                                      call    SetConsoleChar                                  ;display ASCII character
  4357 00001002 07                      .40                     pop     es                                              ;restore non-volatile regs
  4358 00001003 1F                                              pop     ds                                              ;
  4359 00001004 5E                                              pop     esi                                             ;
  4360 00001005 59                                              pop     ecx                                             ;
  4361 00001006 5B                                              pop     ebx                                             ;
  4362 00001007 C3                                              ret                                                     ;return
  4363                                  ;-----------------------------------------------------------------------------------------------------------------------
  4364                                  ;
  4365                                  ;       Routine:        PutConsoleOIAShift
  4366                                  ;
  4367                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4368                                  ;
  4369                                  ;       In:             BL      shift flags
  4370                                  ;                       BH      lock flags
  4371                                  ;                       DS      OS data selector
  4372                                  ;
  4373                                  ;-----------------------------------------------------------------------------------------------------------------------
  4374 00001008 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4375 00001009 06                                              push    es                                              ;
  4376 0000100A 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4377 0000100C 07                                              pop     es                                              ;... into ES register
  4378 0000100D B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4379 0000100F B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4380 00001011 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4381 00001014 7402                                            jz      .10                                             ;no, skip ahead
  4382 00001016 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4383 00001018 B10E                    .10                     mov     cl,14                                           ;indicator column
  4384 0000101A E8C4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4385 0000101F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4386 00001021 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4387 00001024 7402                                            jz      .20                                             ;no, skip ahead
  4388 00001026 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4389 00001028 B140                    .20                     mov     cl,64                                           ;indicator column
  4390 0000102A E8B4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4391 0000102F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4392 00001031 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4393 00001034 7402                                            jz      .30                                             ;no, skip ahead
  4394 00001036 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4395 00001038 B10F                    .30                     mov     cl,15                                           ;indicator column
  4396 0000103A E8A4020000                                      call    SetConsoleChar                                  ;display ASCII character
  4397 0000103F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4398 00001041 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4399 00001044 7402                                            jz      .40                                             ;no, skip ahead
  4400 00001046 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4401 00001048 B13F                    .40                     mov     cl,63                                           ;indicator column
  4402 0000104A E894020000                                      call    SetConsoleChar                                  ;display ASCII character
  4403 0000104F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4404 00001051 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4405 00001054 7402                                            jz      .50                                             ;no, skip ahead
  4406 00001056 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4407 00001058 B110                    .50                     mov     cl,16                                           ;indicator column
  4408 0000105A E884020000                                      call    SetConsoleChar                                  ;display ASCII character
  4409 0000105F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4410 00001061 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4411 00001064 7402                                            jz      .60                                             ;no, skip ahead
  4412 00001066 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4413 00001068 B13E                    .60                     mov     cl,62                                           ;indicator column
  4414 0000106A E874020000                                      call    SetConsoleChar                                  ;display ASCII character
  4415 0000106F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4416 00001071 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4417 00001074 7402                                            jz      .70                                             ;no, skip ahead
  4418 00001076 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4419 00001078 B14E                    .70                     mov     cl,78                                           ;indicator column
  4420 0000107A E864020000                                      call    SetConsoleChar                                  ;display ASCII character
  4421 0000107F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4422 00001081 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4423 00001084 7402                                            jz      .80                                             ;no, skip ahead
  4424 00001086 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4425 00001088 B14D                    .80                     mov     cl,77                                           ;indicator column
  4426 0000108A E854020000                                      call    SetConsoleChar                                  ;display ASCII character
  4427 0000108F B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4428 00001091 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4429 00001094 7402                                            jz      .90                                             ;no, skip ahead
  4430 00001096 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4431 00001098 B14C                    .90                     mov     cl,76                                           ;indicator column
  4432 0000109A E844020000                                      call    SetConsoleChar                                  ;display ASCII character
  4433 0000109F 07                                              pop     es                                              ;restore non-volatile regs
  4434 000010A0 59                                              pop     ecx                                             ;
  4435 000010A1 C3                                              ret                                                     ;return
  4436                                  ;-----------------------------------------------------------------------------------------------------------------------
  4437                                  ;
  4438                                  ;       Routine:        PutConsoleString
  4439                                  ;
  4440                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4441                                  ;                       console position as needed.
  4442                                  ;
  4443                                  ;       In:             EDX     source address
  4444                                  ;                       DS      OS data selector
  4445                                  ;
  4446                                  ;-----------------------------------------------------------------------------------------------------------------------
  4447 000010A2 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4448 000010A3 89D6                                            mov     esi,edx                                         ;source address
  4449 000010A5 FC                                              cld                                                     ;forward strings
  4450 000010A6 AC                      .10                     lodsb                                                   ;ASCII character
  4451 000010A7 08C0                                            or      al,al                                           ;end of string?
  4452 000010A9 7422                                            jz      .40                                             ;yes, skip ahead
  4453 000010AB 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4454 000010AD 7507                                            jne     .20                                             ;no, skip ahead
  4455 000010AF E8B2FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4456 000010B4 EBF0                                            jmp     .10                                             ;next character
  4457 000010B6 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4458 000010B8 7507                                            jne     .30                                             ;no, skip ahead
  4459 000010BA E857FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4460 000010BF EBE5                                            jmp     .10                                             ;next character
  4461 000010C1 E897FEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4462 000010C6 E830FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4463 000010CB EBD9                                            jmp     .10                                             ;next character
  4464 000010CD 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4465 000010CE C3                                              ret                                                     ;return
  4466                                  ;-----------------------------------------------------------------------------------------------------------------------
  4467                                  ;
  4468                                  ;       Routine:        Yield
  4469                                  ;
  4470                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4471                                  ;
  4472                                  ;-----------------------------------------------------------------------------------------------------------------------
  4473 000010CF FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4474 000010D0 F4                                              hlt                                                     ;halt until external interrupt
  4475 000010D1 C3                                              ret                                                     ;return
  4476                                  ;=======================================================================================================================
  4477                                  ;
  4478                                  ;       Data-Type Conversion Helper Routines
  4479                                  ;
  4480                                  ;       PutMACString
  4481                                  ;       ByteToHex
  4482                                  ;       DecimalToUnsigned
  4483                                  ;       HexadecimalToUnsigned
  4484                                  ;       UnsignedToDecimalString
  4485                                  ;       UnsignedToHexadecimal
  4486                                  ;
  4487                                  ;=======================================================================================================================
  4488                                  ;-----------------------------------------------------------------------------------------------------------------------
  4489                                  ;
  4490                                  ;       Routine:        ByteToHex
  4491                                  ;
  4492                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of 8-bit binary input.
  4493                                  ;
  4494                                  ;       Input:          DS:ESI  source address of byte
  4495                                  ;                       ES:EDI  target address of ASCIIZ string
  4496                                  ;
  4497                                  ;-----------------------------------------------------------------------------------------------------------------------
  4498 000010D2 AC                      ByteToHex               lodsb                                                   ;input byte
  4499 000010D3 50                                              push    eax                                             ;save input byte
  4500 000010D4 C0E804                                          shr     al,4                                            ;hi-order nybble
  4501 000010D7 E803000000                                      call    .10                                             ;make ASCII and store
  4502 000010DC 58                                              pop     eax                                             ;input byte
  4503 000010DD 240F                                            and     al,00Fh                                         ;lo-order nybble
  4504 000010DF 0C30                    .10                     or      al,030h                                         ;ASCII numeral zone
  4505 000010E1 3C3A                                            cmp     al,03Ah                                         ;'A' through 'F'?
  4506 000010E3 7202                                            jb      .20                                             ;no, branch
  4507 000010E5 0407                                            add     al,7                                            ;ajdust for 'A' through 'F'
  4508 000010E7 AA                      .20                     stosb                                                   ;store to output buffer
  4509 000010E8 C3                                              ret                                                     ;return
  4510                                  ;-----------------------------------------------------------------------------------------------------------------------
  4511                                  ;
  4512                                  ;       Routine:        DecimalToUnsigned
  4513                                  ;
  4514                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4515                                  ;
  4516                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4517                                  ;
  4518                                  ;       Output:         EAX     unsigned integer value
  4519                                  ;
  4520                                  ;-----------------------------------------------------------------------------------------------------------------------
  4521 000010E9 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4522 000010EA 89D6                                            mov     esi,edx                                         ;source address
  4523 000010EC 31D2                                            xor     edx,edx                                         ;zero total
  4524 000010EE AC                      .10                     lodsb                                                   ;source byte
  4525 000010EF 3C2C                                            cmp     al,','                                          ;comma?
  4526 000010F1 74FB                                            je      .10                                             ;yes, ignore
  4527 000010F3 84C0                                            test    al,al                                           ;end of string?
  4528 000010F5 7421                                            jz      .30                                             ;yes, done
  4529 000010F7 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4530 000010F9 741D                                            je      .30                                             ;yes, done
  4531 000010FB 3C30                                            cmp     al,'0'                                          ;numeral?
  4532 000010FD 7217                                            jb      .20                                             ;no, invalid string
  4533 000010FF 3C39                                            cmp     al,'9'                                          ;numeral?
  4534 00001101 7713                                            ja      .20                                             ;no, invalid string
  4535 00001103 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4536 00001105 50                                              push    eax                                             ;save numeral
  4537 00001106 D1E2                                            shl     edx,1                                           ;total * 2
  4538 00001108 89D0                                            mov     eax,edx                                         ;total * 2
  4539 0000110A C1E202                                          shl     edx,2                                           ;total * 8
  4540 0000110D 01C2                                            add     edx,eax                                         ;total * 10
  4541 0000110F 58                                              pop     eax                                             ;restore numeral
  4542 00001110 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4543 00001112 31C0                                            xor     eax,eax                                         ;zero register
  4544 00001114 EBD8                                            jmp     .10                                             ;next
  4545 00001116 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4546 00001118 89D0                    .30                     mov     eax,edx                                         ;result
  4547 0000111A 5E                                              pop     esi                                             ;restore non-volatile regs
  4548 0000111B C3                                              ret                                                     ;return
  4549                                  ;-----------------------------------------------------------------------------------------------------------------------
  4550                                  ;
  4551                                  ;       Routine:        HexadecimalToUnsigned
  4552                                  ;
  4553                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4554                                  ;
  4555                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4556                                  ;
  4557                                  ;       Output:         EAX     unsigned integer value
  4558                                  ;
  4559                                  ;-----------------------------------------------------------------------------------------------------------------------
  4560 0000111C 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4561 0000111D 89D6                                            mov     esi,edx                                         ;source address
  4562 0000111F 31D2                                            xor     edx,edx                                         ;zero register
  4563 00001121 AC                      .10                     lodsb                                                   ;source byte
  4564 00001122 84C0                                            test    al,al                                           ;end of string?
  4565 00001124 7410                                            jz      .30                                             ;yes, branch
  4566 00001126 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4567 00001128 7602                                            jna     .20                                             ;no, skip ahead
  4568 0000112A 2C37                                            sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  4569 0000112C 83E00F                  .20                     and     eax,00Fh                                        ;remove ascii zone
  4570 0000112F C1E204                                          shl     edx,4                                           ;previous total x 16
  4571 00001132 01C2                                            add     edx,eax                                         ;add prior value x 16
  4572 00001134 EBEB                                            jmp     .10                                             ;next
  4573 00001136 89D0                    .30                     mov     eax,edx                                         ;result
  4574 00001138 5E                                              pop     esi                                             ;restore non-volatile regs
  4575 00001139 C3                                              ret                                                     ;return
  4576                                  ;-----------------------------------------------------------------------------------------------------------------------
  4577                                  ;
  4578                                  ;       Routine:        PutMACString
  4579                                  ;
  4580                                  ;       Description:    This routine creates an ASCIIZ string representing the MAC address at the source address
  4581                                  ;
  4582                                  ;       Input:          ECX     source address of byte
  4583                                  ;                       EDX     target address of ASCIIZ string
  4584                                  ;
  4585                                  ;-----------------------------------------------------------------------------------------------------------------------
  4586 0000113A 51                      PutMACString            push    ecx                                             ;save non-volatile regs
  4587 0000113B 56                                              push    esi                                             ;
  4588 0000113C 57                                              push    edi                                             ;
  4589 0000113D 89D7                                            mov     edi,edx                                         ;output buffer address
  4590 0000113F 89CE                                            mov     esi,ecx                                         ;source buffer address
  4591 00001141 31C9                                            xor     ecx,ecx                                         ;zero ecx
  4592 00001143 B105                                            mov     cl,5                                            ;bytes that precede dashes
  4593 00001145 E888FFFFFF              .10                     call    ByteToHex                                       ;store hexadecimal ASCII
  4594 0000114A B02D                                            mov     al,EASCIIDASH                                   ;delimiter
  4595 0000114C AA                                              stosb                                                   ;store delimiter
  4596 0000114D E2F6                                            loop    .10                                             ;next
  4597 0000114F E87EFFFFFF                                      call    ByteToHex                                       ;store hexadecimal ASCII
  4598 00001154 30C0                                            xor     al,al                                           ;terminator
  4599 00001156 AA                                              stosb                                                   ;store terminator
  4600 00001157 5F                                              pop     edi                                             ;restore non-volatile regs
  4601 00001158 5E                                              pop     esi                                             ;
  4602 00001159 59                                              pop     ecx                                             ;
  4603 0000115A C3                                              ret                                                     ;return
  4604                                  ;-----------------------------------------------------------------------------------------------------------------------
  4605                                  ;
  4606                                  ;       Routine:        UnsignedToDecimalString
  4607                                  ;
  4608                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4609                                  ;
  4610                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4611                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4612                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4613                                  ;                       ECX     32-bit binary
  4614                                  ;                       DS:EDX  output buffer address
  4615                                  ;
  4616                                  ;-----------------------------------------------------------------------------------------------------------------------
  4617 0000115B 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4618 0000115C 51                                              push    ecx                                             ;
  4619 0000115D 57                                              push    edi                                             ;
  4620 0000115E 06                                              push    es                                              ;
  4621 0000115F 1E                                              push    ds                                              ;load data selector
  4622 00001160 07                                              pop     es                                              ;... into extra segment reg
  4623 00001161 89D7                                            mov     edi,edx                                         ;output buffer address
  4624 00001163 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4625 00001166 89CA                                            mov     edx,ecx                                         ;binary
  4626 00001168 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4627 0000116D E871000000                                      call    .30                                             ;divide and store
  4628 00001172 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4629 00001177 E855000000                                      call    .10                                             ;divide and store
  4630 0000117C B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4631 00001181 E85D000000                                      call    .30                                             ;divide and store
  4632 00001186 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4633 0000118B E853000000                                      call    .30                                             ;divide and store
  4634 00001190 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4635 00001195 E837000000                                      call    .10                                             ;divide and store
  4636 0000119A B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4637 0000119F E83F000000                                      call    .30                                             ;divide and store
  4638 000011A4 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4639 000011A9 E835000000                                      call    .30                                             ;divide and store
  4640 000011AE B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4641 000011B3 E819000000                                      call    .10                                             ;divide and store
  4642 000011B8 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4643 000011BD E821000000                                      call    .30                                             ;divide and store
  4644 000011C2 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4645 000011C4 E827000000                                      call    .40                                             ;store
  4646 000011C9 30C0                                            xor     al,al                                           ;null terminator
  4647 000011CB AA                                              stosb                                                   ;store in output buffer
  4648 000011CC 07                                              pop     es                                              ;restore non-volatile regs
  4649 000011CD 5F                                              pop     edi                                             ;
  4650 000011CE 59                                              pop     ecx                                             ;
  4651 000011CF 5B                                              pop     ebx                                             ;
  4652 000011D0 C3                                              ret                                                     ;return
  4653 000011D1 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4654 000011D4 740D                                            jz      .30                                             ;no, branch
  4655 000011D6 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4656 000011D9 7405                                            jz      .20                                             ;no, store delim
  4657 000011DB F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4658 000011DE 7403                                            jz      .30                                             ;no, branch
  4659 000011E0 B02C                    .20                     mov     al,','                                          ;delimiter
  4660 000011E2 AA                                              stosb                                                   ;store delimiter
  4661 000011E3 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4662 000011E5 31D2                                            xor     edx,edx                                         ;zero hi-order
  4663 000011E7 F7F1                                            div     ecx                                             ;divide by power of 10
  4664 000011E9 84C0                                            test    al,al                                           ;zero?
  4665 000011EB 7407                                            jz      .50                                             ;yes, branch
  4666 000011ED 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4667 000011F0 0C30                    .40                     or      al,030h                                         ;ASCII zone
  4668 000011F2 AA                                              stosb                                                   ;store digit
  4669 000011F3 C3                                              ret                                                     ;return
  4670 000011F4 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4671 000011F7 74F7                                            jz      .40                                             ;no, store and continue
  4672 000011F9 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4673 000011FC 75F2                                            jnz     .40                                             ;yes, store and continue
  4674 000011FE C3                                              ret                                                     ;return
  4675                                  ;-----------------------------------------------------------------------------------------------------------------------
  4676                                  ;
  4677                                  ;       Routine:        UnsignedToHexadecimal
  4678                                  ;
  4679                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4680                                  ;
  4681                                  ;       Input:          DS:EDX  output buffer address
  4682                                  ;                       ECX     32-bit binary
  4683                                  ;
  4684                                  ;-----------------------------------------------------------------------------------------------------------------------
  4685 000011FF 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4686 00001200 89D7                                            mov     edi,edx                                         ;output buffer address
  4687 00001202 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4688 00001204 31C9                                            xor     ecx,ecx                                         ;zero register
  4689 00001206 B108                                            mov     cl,8                                            ;nybble count
  4690 00001208 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4691 0000120B 88D0                                            mov     al,dl                                           ;????bbbb
  4692 0000120D 240F                                            and     al,00Fh                                         ;mask out bits 4-7
  4693 0000120F 0C30                                            or      al,030h                                         ;mask in ascii zone
  4694 00001211 3C3A                                            cmp     al,03Ah                                         ;A through F?
  4695 00001213 7202                                            jb      .20                                             ;no, skip ahead
  4696 00001215 0407                                            add     al,7                                            ;41h through 46h
  4697 00001217 AA                      .20                     stosb                                                   ;store hexnum
  4698 00001218 E2EE                                            loop    .10                                             ;next nybble
  4699 0000121A 30C0                                            xor     al,al                                           ;zero reg
  4700 0000121C AA                                              stosb                                                   ;null terminate
  4701 0000121D 5F                                              pop     edi                                             ;restore non-volatile regs
  4702 0000121E C3                                              ret                                                     ;return
  4703                                  ;=======================================================================================================================
  4704                                  ;
  4705                                  ;       Message Queue Helper Routines
  4706                                  ;
  4707                                  ;       GetMessage
  4708                                  ;       PutMessage
  4709                                  ;
  4710                                  ;=======================================================================================================================
  4711                                  ;-----------------------------------------------------------------------------------------------------------------------
  4712                                  ;
  4713                                  ;       Routine:        GetMessage
  4714                                  ;
  4715                                  ;       Description:    This routine reads and removes a message from the message queue.
  4716                                  ;
  4717                                  ;       Out:            EAX     lo-order message data
  4718                                  ;                       EDX     hi-order message data
  4719                                  ;
  4720                                  ;                       CY      0 = message read
  4721                                  ;                               1 = no message to read
  4722                                  ;
  4723                                  ;-----------------------------------------------------------------------------------------------------------------------
  4724 0000121F 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4725 00001220 51                                              push    ecx                                             ;
  4726 00001221 1E                                              push    ds                                              ;
  4727 00001222 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4728 00001224 1F                                              pop     ds                                              ;... into data segment register
  4729 00001225 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4730 0000122B 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4731 0000122D 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4732 00001230 09D0                                            or      eax,edx                                         ;is queue empty?
  4733 00001232 F9                                              stc                                                     ;assume queue is emtpy
  4734 00001233 741B                                            jz      .20                                             ;yes, skip ahead
  4735 00001235 31C9                                            xor     ecx,ecx                                         ;store zero
  4736 00001237 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4737 00001239 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4738 0000123C 83C308                                          add     ebx,8                                           ;next queue element
  4739 0000123F 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  4740 00001245 7502                                            jnz     .10                                             ;no, skip ahead
  4741 00001247 B308                                            mov     bl,8                                            ;reset to 1st entry
  4742 00001249 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4743 0000124F F8                                              clc                                                     ;indicate message read
  4744 00001250 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4745 00001251 59                                              pop     ecx                                             ;
  4746 00001252 5B                                              pop     ebx                                             ;
  4747 00001253 C3                                              ret                                                     ;return
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749                                  ;
  4750                                  ;       Routine:        PutMessage
  4751                                  ;
  4752                                  ;       Description:    This routine adda a message to the message queue.
  4753                                  ;
  4754                                  ;       In:             ECX     hi-order data word
  4755                                  ;                       EDX     lo-order data word
  4756                                  ;
  4757                                  ;       Out:            CY      0 = success
  4758                                  ;                               1 = fail: queue is full
  4759                                  ;
  4760                                  ;-----------------------------------------------------------------------------------------------------------------------
  4761 00001254 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4762 00001255 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4763 00001257 1F                                              pop     ds                                              ;... into data segment register
  4764 00001258 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4765 0000125D 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4766 00001260 F9                                              stc                                                     ;assume failure
  4767 00001261 7517                                            jne     .20                                             ;yes, cannot store
  4768 00001263 8910                                            mov     [eax],edx                                       ;store lo-order data
  4769 00001265 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4770 00001268 83C008                                          add     eax,8                                           ;next queue element adr
  4771 0000126B 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  4772 00001270 7502                                            jnz     .10                                             ;no, skip ahead
  4773 00001272 B008                                            mov     al,8                                            ;reset to top of queue
  4774 00001274 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4775 00001279 F8                                              clc                                                     ;indicate success
  4776 0000127A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4777 0000127B C3                                              ret                                                     ;return
  4778                                  ;=======================================================================================================================
  4779                                  ;
  4780                                  ;       Memory-Mapped Video Routines
  4781                                  ;
  4782                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4783                                  ;
  4784                                  ;       ClearConsoleScreen
  4785                                  ;       ScrollConsoleRow
  4786                                  ;       SetConsoleChar
  4787                                  ;       SetConsoleString
  4788                                  ;
  4789                                  ;=======================================================================================================================
  4790                                  ;-----------------------------------------------------------------------------------------------------------------------
  4791                                  ;
  4792                                  ;       Routine:        ClearConsoleScreen
  4793                                  ;
  4794                                  ;       Description:    This routine clears the console (CGA) screen.
  4795                                  ;
  4796                                  ;-----------------------------------------------------------------------------------------------------------------------
  4797 0000127C 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4798 0000127D 57                                              push    edi                                             ;
  4799 0000127E 1E                                              push    ds                                              ;
  4800 0000127F 06                                              push    es                                              ;
  4801 00001280 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4802 00001282 1F                                              pop     ds                                              ;... into DS register
  4803 00001283 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4804 00001285 07                                              pop     es                                              ;... into ES register
  4805 00001286 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4806 0000128B B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4807 00001290 31FF                                            xor     edi,edi                                         ;target offset
  4808 00001292 FC                                              cld                                                     ;forward strings
  4809 00001293 F3AB                                            rep     stosd                                           ;reset screen body
  4810 00001295 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4811 0000129A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4812 0000129F F3AB                                            rep     stosd                                           ;reset OIA line
  4813 000012A1 30C0                                            xor     al,al                                           ;zero register
  4814 000012A3 A215080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4815 000012A8 A214080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4816 000012AD E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4817 000012B2 07                                              pop     es                                              ;restore non-volatile regs
  4818 000012B3 1F                                              pop     ds                                              ;
  4819 000012B4 5F                                              pop     edi                                             ;
  4820 000012B5 59                                              pop     ecx                                             ;
  4821 000012B6 C3                                              ret                                                     ;return
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823                                  ;
  4824                                  ;       Routine:        ScrollConsoleRow
  4825                                  ;
  4826                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4827                                  ;
  4828                                  ;-----------------------------------------------------------------------------------------------------------------------
  4829 000012B7 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4830 000012B8 56                                              push    esi                                             ;
  4831 000012B9 57                                              push    edi                                             ;
  4832 000012BA 1E                                              push    ds                                              ;
  4833 000012BB 06                                              push    es                                              ;
  4834 000012BC 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4835 000012BE 1F                                              pop     ds                                              ;... into DS
  4836 000012BF 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4837 000012C1 07                                              pop     es                                              ;... into ES
  4838 000012C2 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4839 000012C7 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4840 000012CC 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4841 000012CE FC                                              cld                                                     ;forward strings
  4842 000012CF F3A5                                            rep     movsd                                           ;move 24 lines up
  4843 000012D1 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4844 000012D6 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4845 000012DB F3AB                                            rep     stosd                                           ;clear bottom row
  4846 000012DD 07                                              pop     es                                              ;restore non-volatile regs
  4847 000012DE 1F                                              pop     ds                                              ;
  4848 000012DF 5F                                              pop     edi                                             ;
  4849 000012E0 5E                                              pop     esi                                             ;
  4850 000012E1 59                                              pop     ecx                                             ;
  4851 000012E2 C3                                              ret                                                     ;return
  4852                                  ;-----------------------------------------------------------------------------------------------------------------------
  4853                                  ;
  4854                                  ;       Routine:        SetConsoleChar
  4855                                  ;
  4856                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4857                                  ;
  4858                                  ;       In:             AL      ASCII character
  4859                                  ;                       CL      column
  4860                                  ;                       CH      row
  4861                                  ;                       ES      CGA selector
  4862                                  ;
  4863                                  ;       Out:            EAX     last target address written (ES:)
  4864                                  ;                       CL      column + 1
  4865                                  ;
  4866                                  ;-----------------------------------------------------------------------------------------------------------------------
  4867 000012E3 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4868 000012E5 0FB6C5                                          movzx   eax,ch                                          ;row
  4869 000012E8 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4870 000012EA F6E4                                            mul     ah                                              ;row * cols/row
  4871 000012EC 00C8                                            add     al,cl                                           ;add column
  4872 000012EE 80D400                                          adc     ah,0                                            ;handle carry
  4873 000012F1 D1E0                                            shl     eax,1                                           ;screen offset
  4874 000012F3 268810                                          mov     [es:eax],dl                                     ;store character
  4875 000012F6 FEC1                                            inc     cl                                              ;next column
  4876 000012F8 C3                                              ret                                                     ;return
  4877                                  ;-----------------------------------------------------------------------------------------------------------------------
  4878                                  ;
  4879                                  ;       Routine:        SetConsoleString
  4880                                  ;
  4881                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4882                                  ;
  4883                                  ;       In:             ESI     source offset (DS:)
  4884                                  ;                       CL      column
  4885                                  ;                       CH      row
  4886                                  ;                       ES      CGA selector
  4887                                  ;
  4888                                  ;-----------------------------------------------------------------------------------------------------------------------
  4889 000012F9 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4890 000012FA FC                                              cld                                                     ;forward strings
  4891 000012FB AC                      .10                     lodsb                                                   ;next ASCII character
  4892 000012FC 84C0                                            test    al,al                                           ;end of string?
  4893 000012FE 7407                                            jz      .20                                             ;yes, branch
  4894 00001300 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4895 00001305 EBF4                                            jmp     .10                                             ;continue
  4896 00001307 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4897 00001308 C3                                              ret                                                     ;return
  4898                                  ;=======================================================================================================================
  4899                                  ;
  4900                                  ;       Input/Output Routines
  4901                                  ;
  4902                                  ;       These routines read and/or write directly to ports.
  4903                                  ;
  4904                                  ;       GetBaseMemSize
  4905                                  ;       GetExtendedMemSize
  4906                                  ;       GetROMMemSize
  4907                                  ;       PlaceCursor
  4908                                  ;       PutPrimaryEndOfInt
  4909                                  ;       PutSecondaryEndOfInt
  4910                                  ;       ReadRealTimeClock
  4911                                  ;       ResetSystem
  4912                                  ;       SetKeyboardLamps
  4913                                  ;       WaitForKeyInBuffer
  4914                                  ;       WaitForKeyOutBuffer
  4915                                  ;
  4916                                  ;=======================================================================================================================
  4917                                  ;-----------------------------------------------------------------------------------------------------------------------
  4918                                  ;
  4919                                  ;       Routine:        GetBaseMemSize
  4920                                  ;
  4921                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4922                                  ;
  4923                                  ;       Output:         EAX     base RAM size in bytes
  4924                                  ;
  4925                                  ;-----------------------------------------------------------------------------------------------------------------------
  4926 00001309 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4927 0000130B B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4928 0000130D E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4929 0000130F E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4930 00001311 88C4                                            mov     ah,al                                           ;save base RAM high
  4931 00001313 B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4932 00001315 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4933 00001317 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4934 00001319 C3                                              ret                                                     ;return to caller
  4935                                  ;-----------------------------------------------------------------------------------------------------------------------
  4936                                  ;
  4937                                  ;       Routine:        GetExtendedMemSize
  4938                                  ;
  4939                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4940                                  ;
  4941                                  ;       Output:         EAX     extended RAM size in bytes
  4942                                  ;
  4943                                  ;-----------------------------------------------------------------------------------------------------------------------
  4944 0000131A 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4945 0000131C B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4946 0000131E E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4947 00001320 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4948 00001322 88C4                                            mov     ah,al                                           ;save extended RAM high
  4949 00001324 B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4950 00001326 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4951 00001328 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4952 0000132A C3                                              ret                                                     ;return to caller
  4953                                  ;-----------------------------------------------------------------------------------------------------------------------
  4954                                  ;
  4955                                  ;       Routine:        GetROMMemSize
  4956                                  ;
  4957                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4958                                  ;
  4959                                  ;       Output:         EAX     RAM size in bytes
  4960                                  ;
  4961                                  ;-----------------------------------------------------------------------------------------------------------------------
  4962 0000132B 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4963 0000132D 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4964 00001333 C3                                              ret                                                     ;return
  4965                                  ;-----------------------------------------------------------------------------------------------------------------------
  4966                                  ;
  4967                                  ;       Routine:        PlaceCursor
  4968                                  ;
  4969                                  ;       Description:    This routine positions the cursor on the console.
  4970                                  ;
  4971                                  ;       In:             DS      OS data selector
  4972                                  ;
  4973                                  ;-----------------------------------------------------------------------------------------------------------------------
  4974 00001334 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4975 00001335 A015080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4976 0000133A B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4977 0000133C F6E4                                            mul     ah                                              ;row offset
  4978 0000133E 020514080000                                    add     al,[wbConsoleColumn]                            ;add column
  4979 00001344 80D400                                          adc     ah,0                                            ;add overflow
  4980 00001347 89C1                                            mov     ecx,eax                                         ;screen offset
  4981 00001349 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4982 0000134B B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4983 0000134D B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4984 0000134F EE                                              out     dx,al                                           ;select register
  4985 00001350 42                                              inc     edx                                             ;data port
  4986 00001351 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4987 00001353 EE                                              out     dx,al                                           ;store hi-order loc
  4988 00001354 4A                                              dec     edx                                             ;register select port
  4989 00001355 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4990 00001357 EE                                              out     dx,al                                           ;select register
  4991 00001358 42                                              inc     edx                                             ;data port
  4992 00001359 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4993 0000135B EE                                              out     dx,al                                           ;store lo-order loc
  4994 0000135C 59                                              pop     ecx                                             ;restore non-volatile regs
  4995 0000135D C3                                              ret                                                     ;return
  4996                                  ;-----------------------------------------------------------------------------------------------------------------------
  4997                                  ;
  4998                                  ;       Routine:        PutPrimaryEndOfInt
  4999                                  ;
  5000                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  5001                                  ;
  5002                                  ;-----------------------------------------------------------------------------------------------------------------------
  5003 0000135E FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  5004 0000135F B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5005 00001361 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  5006 00001363 C3                                              ret                                                     ;return
  5007                                  ;-----------------------------------------------------------------------------------------------------------------------
  5008                                  ;
  5009                                  ;       Routine:        PutSecondaryEndOfInt
  5010                                  ;
  5011                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  5012                                  ;
  5013                                  ;-----------------------------------------------------------------------------------------------------------------------
  5014 00001364 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  5015 00001365 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5016 00001367 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  5017 00001369 C3                                              ret                                                     ;return
  5018                                  ;-----------------------------------------------------------------------------------------------------------------------
  5019                                  ;
  5020                                  ;       Routine:        ReadRealTimeClock
  5021                                  ;
  5022                                  ;       Description:    This routine gets current date time from the real-time clock.
  5023                                  ;
  5024                                  ;       In:             DS:EBX  DATETIME structure
  5025                                  ;
  5026                                  ;-----------------------------------------------------------------------------------------------------------------------
  5027 0000136A 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  5028 0000136B 57                                              push    edi                                             ;
  5029 0000136C 06                                              push    es                                              ;
  5030 0000136D 1E                                              push    ds                                              ;store data selector ...
  5031 0000136E 07                                              pop     es                                              ;... in es register
  5032 0000136F 89DF                                            mov     edi,ebx                                         ;date-time structure
  5033 00001371 B000                                            mov     al,ERTCSECONDREG                                ;second register
  5034 00001373 E670                                            out     ERTCREGPORT,al                                  ;select second register
  5035 00001375 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  5036 00001377 FC                                              cld                                                     ;forward strings
  5037 00001378 AA                                              stosb                                                   ;store second value
  5038 00001379 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  5039 0000137B E670                                            out     ERTCREGPORT,al                                  ;select minute register
  5040 0000137D E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  5041 0000137F AA                                              stosb                                                   ;store minute value
  5042 00001380 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  5043 00001382 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  5044 00001384 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  5045 00001386 AA                                              stosb                                                   ;store hour value
  5046 00001387 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  5047 00001389 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  5048 0000138B E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  5049 0000138D AA                                              stosb                                                   ;store weekday value
  5050 0000138E B007                                            mov     al,ERTCDAYREG                                   ;day register
  5051 00001390 E670                                            out     ERTCREGPORT,al                                  ;select day register
  5052 00001392 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  5053 00001394 AA                                              stosb                                                   ;store day value
  5054 00001395 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  5055 00001397 E670                                            out     ERTCREGPORT,al                                  ;select month register
  5056 00001399 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  5057 0000139B AA                                              stosb                                                   ;store month value
  5058 0000139C B009                                            mov     al,ERTCYEARREG                                  ;year register
  5059 0000139E E670                                            out     ERTCREGPORT,al                                  ;select year register
  5060 000013A0 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  5061 000013A2 AA                                              stosb                                                   ;store year value
  5062 000013A3 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  5063 000013A5 E670                                            out     ERTCREGPORT,al                                  ;select century register
  5064 000013A7 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  5065 000013A9 AA                                              stosb                                                   ;store century value
  5066 000013AA B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  5067 000013AC E670                                            out     ERTCREGPORT,al                                  ;select status register
  5068 000013AE E471                                            in      al,ERTCDATAPORT                                 ;read status register
  5069 000013B0 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  5070 000013B2 751D                                            jnz     .20                                             ;skip ahead if binary values
  5071 000013B4 89DE                                            mov     esi,ebx                                         ;date-time structure address
  5072 000013B6 89DF                                            mov     edi,ebx                                         ;date-time structure address
  5073 000013B8 B908000000                                      mov     ecx,8                                           ;loop counter
  5074 000013BD AC                      .10                     lodsb                                                   ;BCD value
  5075 000013BE 88C4                                            mov     ah,al                                           ;BCD value
  5076 000013C0 240F                                            and     al,00001111b                                    ;low-order decimal zone
  5077 000013C2 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  5078 000013C5 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  5079 000013C7 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  5080 000013C9 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  5081 000013CC 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  5082 000013CE AA                                              stosb                                                   ;replace BCD with binary
  5083 000013CF E2EC                                            loop    .10                                             ;next value
  5084 000013D1 07                      .20                     pop     es                                              ;restore non-volatile regs
  5085 000013D2 5F                                              pop     edi                                             ;
  5086 000013D3 5E                                              pop     esi                                             ;
  5087 000013D4 C3                                              ret                                                     ;return
  5088                                  ;-----------------------------------------------------------------------------------------------------------------------
  5089                                  ;
  5090                                  ;       Routine:        ResetSystem
  5091                                  ;
  5092                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5093                                  ;
  5094                                  ;       Out:            N/A     This routine does not return.
  5095                                  ;
  5096                                  ;-----------------------------------------------------------------------------------------------------------------------
  5097 000013D5 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5098 000013DA E2FE                                            loop    $                                               ;clear interrupts
  5099 000013DC B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5100 000013DE E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5101 000013E0 FB                      .10                     sti                                                     ;enable maskable interrupts
  5102 000013E1 F4                                              hlt                                                     ;halt until interrupt
  5103 000013E2 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  5104                                  ;-----------------------------------------------------------------------------------------------------------------------
  5105                                  ;
  5106                                  ;       Routine:        SetKeyboardLamps
  5107                                  ;
  5108                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5109                                  ;
  5110                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5111                                  ;
  5112                                  ;-----------------------------------------------------------------------------------------------------------------------
  5113 000013E4 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5114 000013E9 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5115 000013EB E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  5116 000013ED E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5117 000013F2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5118 000013F4 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5119 000013F9 88F8                                            mov     al,bh                                           ;set/reset lamps value
  5120 000013FB E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  5121 000013FD E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5122 00001402 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5123 00001404 C3                                              ret                                                     ;return
  5124                                  ;-----------------------------------------------------------------------------------------------------------------------
  5125                                  ;
  5126                                  ;       Routine:        WaitForKeyInBuffer
  5127                                  ;
  5128                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5129                                  ;
  5130                                  ;       Out:            ZF      1 = Input buffer ready
  5131                                  ;                               0 = Input buffer not ready after timeout
  5132                                  ;
  5133                                  ;-----------------------------------------------------------------------------------------------------------------------
  5134 00001405 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5135 00001406 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5136 0000140B E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5137 0000140D A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  5138 0000140F E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  5139 00001411 59                                              pop     ecx                                             ;restore non-volatile regs
  5140 00001412 C3                                              ret                                                     ;return
  5141                                  ;-----------------------------------------------------------------------------------------------------------------------
  5142                                  ;
  5143                                  ;       Routine:        WaitForKeyOutBuffer
  5144                                  ;
  5145                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5146                                  ;
  5147                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5148                                  ;                               0 = Output buffer empty after timeout
  5149                                  ;
  5150                                  ;-----------------------------------------------------------------------------------------------------------------------
  5151 00001413 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5152 00001414 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5153 00001419 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5154 0000141B A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5155 0000141D E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5156 0000141F 59                                              pop     ecx                                             ;restore non-volatile regs
  5157 00001420 C3                                              ret                                                     ;return
  5158                                  ;-----------------------------------------------------------------------------------------------------------------------
  5159                                  ;
  5160                                  ;       End of the Kernel Function Library
  5161                                  ;
  5162                                  ;-----------------------------------------------------------------------------------------------------------------------
  5163 00001421 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5164                                  ;=======================================================================================================================
  5165                                  ;
  5166                                  ;       Console Task
  5167                                  ;
  5168                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5169                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5170                                  ;       screen and responds to user commands.
  5171                                  ;
  5172                                  ;=======================================================================================================================
  5173                                  ;-----------------------------------------------------------------------------------------------------------------------
  5174                                  ;
  5175                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5176                                  ;
  5177                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5178                                  ;
  5179                                  ;-----------------------------------------------------------------------------------------------------------------------
  5180                                  section                 constack                                                ;console task stack
  5181 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5182                                  ;-----------------------------------------------------------------------------------------------------------------------
  5183                                  ;
  5184                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5185                                  ;
  5186                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5187                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5188                                  ;       16 descriptors. Six are initially defined.
  5189                                  ;
  5190                                  ;-----------------------------------------------------------------------------------------------------------------------
  5191                                  section                 conldt                                                  ;console local descriptors
  5192 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5193 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5194 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5195 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5196 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  5197 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5198 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5199                                  ;-----------------------------------------------------------------------------------------------------------------------
  5200                                  ;
  5201                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5202                                  ;
  5203                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5204                                  ;       segment. CS to console code.
  5205                                  ;
  5206                                  ;-----------------------------------------------------------------------------------------------------------------------
  5207                                  section                 contss                                                  ;console task state segment
  5208 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5209 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5210 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5211 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5212 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5213 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5214 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5215 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5216 00000020 00000000                                        dd      0                                               ;20 eip
  5217 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5218 00000028 00000000                                        dd      0                                               ;28 eax
  5219 0000002C 00000000                                        dd      0                                               ;2c ecx
  5220 00000030 00000000                                        dd      0                                               ;30 edx
  5221 00000034 00000000                                        dd      0                                               ;34 ebx
  5222 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5223 0000003C 00000000                                        dd      0                                               ;3c ebp
  5224 00000040 00000000                                        dd      0                                               ;40 esi
  5225 00000044 00000000                                        dd      0                                               ;44 edi
  5226 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5227 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5228 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5229 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5230 00000058 00000000                                        dd      0                                               ;58 fs
  5231 0000005C 00000000                                        dd      0                                               ;5c gs
  5232 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5233 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5234                                  ;-----------------------------------------------------------------------------------------------------------------------
  5235                                  ;
  5236                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5237                                  ;
  5238                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5239                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5240                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5241                                  ;       event.
  5242                                  ;
  5243                                  ;-----------------------------------------------------------------------------------------------------------------------
  5244                                  section                 conmque                                                 ;console message queue
  5245 00000000 08000000                                        dd      8                                               ;head pointer
  5246 00000004 08000000                                        dd      8                                               ;tail pointer
  5247 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5248                                  ;-----------------------------------------------------------------------------------------------------------------------
  5249                                  ;
  5250                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5251                                  ;
  5252                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5253                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5254                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5255                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5256                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5257                                  ;       board input, echoing to the console screen and responding to user commands.
  5258                                  ;
  5259                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5260                                  ;
  5261                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5262                                  ;                               |  Real Mode Interrupt Vectors                  |
  5263                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5264                                  ;                               |  Reserved BIOS Memory Area                    |
  5265                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5266                                  ;                               |  Shared Kernel Memory Area                    |
  5267                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5268                                  ;                               |  Global Descriptor Table (GDT)                |
  5269                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5270                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5271                                  ;                       002000  +-----------------------------------------------+
  5272                                  ;                               |  Interrupt Handlers                           |
  5273                                  ;                               |  Kernel Function Library                      |
  5274                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5275                                  ;                               |  Console Task Stack Area                      |
  5276                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5277                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5278                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5279                                  ;                               |  Console Task Task State Segment (TSS)        |
  5280                                  ;                       004800  +-----------------------------------------------+
  5281                                  ;                               |  Console Task Message Queue                   |
  5282                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5283                                  ;                               |  Console Task Code                            |
  5284                                  ;                               |  Console Task Constants                       |
  5285                                  ;                       006000  +===============================================+
  5286                                  ;
  5287                                  ;-----------------------------------------------------------------------------------------------------------------------
  5288                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5289 00000000 E8DE000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5290                                  
  5291                                                          clearConsoleScreen                                      ;clear the console screen
  5291 00000005 B001                <1>  mov al,eClearConsoleScreen
  5291 00000007 CD30                <1>  int _svc
  5292                                                          putConsoleString czTitle                                ;display startup message
  5292 00000009 BA[360B0000]        <1>  mov edx,%1
  5292 0000000E B00C                <1>  mov al,ePutConsoleString
  5292 00000010 CD30                <1>  int _svc
  5293                                                          putConsoleString czBaseMem                              ;base memory label
  5293 00000012 BA[EF090000]        <1>  mov edx,%1
  5293 00000017 B00C                <1>  mov al,ePutConsoleString
  5293 00000019 CD30                <1>  int _svc
  5294                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5294 0000001B BA11090000          <1>  mov edx,%1
  5294 00000020 B00C                <1>  mov al,ePutConsoleString
  5294 00000022 CD30                <1>  int _svc
  5295                                                          putConsoleString czKB                                   ;Kilobytes
  5295 00000024 BA[960A0000]        <1>  mov edx,%1
  5295 00000029 B00C                <1>  mov al,ePutConsoleString
  5295 0000002B CD30                <1>  int _svc
  5296                                                          putConsoleString czNewLine                              ;new line
  5296 0000002D BA[990A0000]        <1>  mov edx,%1
  5296 00000032 B00C                <1>  mov al,ePutConsoleString
  5296 00000034 CD30                <1>  int _svc
  5297                                                          putConsoleString czROMMem                               ;ROM memory label
  5297 00000036 BA[1C0B0000]        <1>  mov edx,%1
  5297 0000003B B00C                <1>  mov al,ePutConsoleString
  5297 0000003D CD30                <1>  int _svc
  5298                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5298 0000003F BA1C090000          <1>  mov edx,%1
  5298 00000044 B00C                <1>  mov al,ePutConsoleString
  5298 00000046 CD30                <1>  int _svc
  5299                                                          putConsoleString czKB                                   ;Kilobytes
  5299 00000048 BA[960A0000]        <1>  mov edx,%1
  5299 0000004D B00C                <1>  mov al,ePutConsoleString
  5299 0000004F CD30                <1>  int _svc
  5300                                                          putConsoleString czNewLine                              ;new line
  5300 00000051 BA[990A0000]        <1>  mov edx,%1
  5300 00000056 B00C                <1>  mov al,ePutConsoleString
  5300 00000058 CD30                <1>  int _svc
  5301                                                          putConsoleString czExtendedMem                          ;extended memory label
  5301 0000005A BA[780A0000]        <1>  mov edx,%1
  5301 0000005F B00C                <1>  mov al,ePutConsoleString
  5301 00000061 CD30                <1>  int _svc
  5302                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5302 00000063 BA27090000          <1>  mov edx,%1
  5302 00000068 B00C                <1>  mov al,ePutConsoleString
  5302 0000006A CD30                <1>  int _svc
  5303                                                          putConsoleString czKB                                   ;Kilobytes
  5303 0000006C BA[960A0000]        <1>  mov edx,%1
  5303 00000071 B00C                <1>  mov al,ePutConsoleString
  5303 00000073 CD30                <1>  int _svc
  5304                                                          putConsoleString czNewLine                              ;new line
  5304 00000075 BA[990A0000]        <1>  mov edx,%1
  5304 0000007A B00C                <1>  mov al,ePutConsoleString
  5304 0000007C CD30                <1>  int _svc
  5305                                  
  5306 0000007E E8F2000000                                      call    ConInitializeNetwork
  5307                                  
  5308                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5308                              <1> .10 :
  5308 00000083 BA[FD0A0000]        <1>  mov edx,%1
  5308 00000088 B00C                <1>  mov al,ePutConsoleString
  5308 0000008A CD30                <1>  int _svc
  5309                                                          placeCursor                                             ;set CRT cursor location
  5309 0000008C B00B                <1>  mov al,ePlaceCursor
  5309 0000008E CD30                <1>  int _svc
  5310                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5310 00000090 BA21080000          <1>  mov edx,%1
  5310 00000095 B94F000000          <1>  mov ecx,%2
  5310 0000009A B701                <1>  mov bh,%3
  5310 0000009C B30D                <1>  mov bl,%4
  5310 0000009E B006                <1>  mov al,eGetConsoleString
  5310 000000A0 CD30                <1>  int _svc
  5311                                                          putConsoleString czNewLine                              ;newline
  5311 000000A2 BA[990A0000]        <1>  mov edx,%1
  5311 000000A7 B00C                <1>  mov al,ePutConsoleString
  5311 000000A9 CD30                <1>  int _svc
  5312                                  
  5313 000000AB BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5314 000000B0 BB71080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5315 000000B5 E855020000                                      call    ConTakeToken                                    ;handle console input
  5316 000000BA BA71080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5317 000000BF E880020000                                      call    ConDetermineCommand                             ;determine command number
  5318 000000C4 83F81A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5319 000000C7 720B                                            jb      .20                                             ;yes, branch
  5320                                  
  5321                                                          putConsoleString czUnknownCommand                       ;display error message
  5321 000000C9 BA[540B0000]        <1>  mov edx,%1
  5321 000000CE B00C                <1>  mov al,ePutConsoleString
  5321 000000D0 CD30                <1>  int _svc
  5322                                  
  5323 000000D2 EBAF                                            jmp     .10                                             ;next command
  5324 000000D4 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5325 000000D7 BA[A3080000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5326 000000DC 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5327 000000DF FFD0                                            call    eax                                             ;call command handler
  5328 000000E1 EBA0                                            jmp     .10                                             ;next command
  5329                                  ;-----------------------------------------------------------------------------------------------------------------------
  5330                                  ;
  5331                                  ;       Routine:        ConInitializeData
  5332                                  ;
  5333                                  ;       Description:    This routine initializes console task variables.
  5334                                  ;
  5335                                  ;-----------------------------------------------------------------------------------------------------------------------
  5336 000000E3 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5337 000000E4 57                                              push    edi                                             ;
  5338 000000E5 06                                              push    es                                              ;
  5339                                  ;
  5340                                  ;       Initialize console work areas.
  5341                                  ;
  5342 000000E6 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5343 000000E8 07                                              pop     es                                              ;... into extra segment register
  5344 000000E9 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5345 000000EE 30C0                                            xor     al,al                                           ;initialization value
  5346 000000F0 B98E010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5347 000000F5 FC                                              cld                                                     ;forward strings
  5348 000000F6 F3AA                                            rep     stosb                                           ;initialize data
  5349                                  ;
  5350                                  ;       Initialize heap size
  5351                                  ;
  5352 000000F8 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5353 000000FD A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5354                                  ;
  5355                                  ;       Initialize MEMROOT structure
  5356                                  ;
  5357 00000102 BF3B090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5358 00000107 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5359 0000010C 31C9                                            xor     ecx,ecx                                         ;zero register
  5360 0000010E B104                                            mov     cl,4                                            ;count
  5361 00000110 F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5362 00000112 31C0                                            xor     eax,eax                                         ;zero register
  5363 00000114 AB                                              stosd                                                   ;zero first task block
  5364 00000115 AB                                              stosd                                                   ;zero last task block
  5365                                  ;
  5366                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5367                                  ;
  5368 00000116 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5369 0000011B B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5370 00000120 AB                                              stosd                                                   ;store signature
  5371 00000121 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5372 00000126 AB                                              stosd                                                   ;store block size
  5373 00000127 31C9                                            xor     ecx,ecx                                         ;zero register
  5374 00000129 B106                                            mov     cl,6                                            ;count
  5375 0000012B 31C0                                            xor     eax,eax                                         ;zero register
  5376 0000012D F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5377                                  ;
  5378                                  ;       Read memory sizes from ROM
  5379                                  ;
  5380                                                          getROMMemSize                                           ;get ROM memory size
  5380 0000012F B008                <1>  mov al,eGetROMMemSize
  5380 00000131 CD30                <1>  int _svc
  5381 00000133 A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5382 00000138 89C1                                            mov     ecx,eax                                         ;integer param
  5383 0000013A BA1C090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  5384 0000013F B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5385                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5385 00000141 B01B                <1>  mov al,eUnsignedToDecimalString
  5385 00000143 CD30                <1>  int _svc
  5386                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5386 00000145 B005                <1>  mov al,eGetBaseMemSize
  5386 00000147 CD30                <1>  int _svc
  5387 00000149 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  5388 0000014E 89C1                                            mov     ecx,eax                                         ;integer param
  5389 00000150 BA11090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  5390 00000155 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5391                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5391 00000157 B01B                <1>  mov al,eUnsignedToDecimalString
  5391 00000159 CD30                <1>  int _svc
  5392                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5392 0000015B B007                <1>  mov al,eGetExtendedMemSize
  5392 0000015D CD30                <1>  int _svc
  5393 0000015F A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5394 00000164 89C1                                            mov     ecx,eax                                         ;integer param
  5395 00000166 BA27090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  5396 0000016B B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5397                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5397 0000016D B01B                <1>  mov al,eUnsignedToDecimalString
  5397 0000016F CD30                <1>  int _svc
  5398                                  ;
  5399                                  ;       Restore and return.
  5400                                  ;
  5401 00000171 07                                              pop     es                                              ;restore non-volatile regs
  5402 00000172 5F                                              pop     edi                                             ;
  5403 00000173 59                                              pop     ecx                                             ;
  5404 00000174 C3                                              ret                                                     ;return
  5405                                  ;-----------------------------------------------------------------------------------------------------------------------
  5406                                  ;
  5407                                  ;       Routine:        ConInitializeNetwork
  5408                                  ;
  5409                                  ;       Description:    This routine initializes console network variables.
  5410                                  ;
  5411                                  ;-----------------------------------------------------------------------------------------------------------------------
  5412 00000175 53                      ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5413 00000176 51                                              push    ecx                                             ;
  5414 00000177 56                                              push    esi                                             ;
  5415 00000178 57                                              push    edi                                             ;
  5416                                  ;
  5417                                  ;       Initialize ETHER structure.
  5418                                  ;
  5419 00000179 BB67090000                                      mov     ebx,wsConsoleEther                              ;ETHER structure address
  5420 0000017E E877010000                                      call    ConInitEtherContext                             ;initialize ETHER struct
  5421 00000183 89DE                                            mov     esi,ebx                                         ;ETHER structure address
  5422                                  
  5423                                  ;       Initialize variables.
  5424                                  ;       Construct PCI selector.
  5425                                  ;       Read PCI configuration data.
  5426                                  ;
  5427 00000185 BB5B090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  5428 0000018A E895040000                                      call    ConInitPCIContext                               ;initialize PCI struct
  5429 0000018F E8A5040000              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5430 00000194 E8C1040000                                      call    ConReadPCIConfigData                            ;read the configuration data
  5431                                  ;
  5432                                  ;       Interpret PCI data value.
  5433                                  ;
  5434 00000199 83F8FF                                          cmp     eax,-1		                                ;function defined?
  5435 0000019C 7508                                            jne     .20                                             ;yes, branch
  5436 0000019E 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  5437 000001A2 7410                                            je      .40                                             ;yes, skip to next device
  5438 000001A4 EB07                                            jmp     short .30                                       ;no, skip to next function
  5439                                  ;
  5440                                  ;       Exit PCI probe if supported adapter found.
  5441                                  ;
  5442 000001A6 3D86800F10              .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5443 000001AB 7413                                            je      .50                                             ;yes, found!
  5444                                  ;
  5445                                  ;       Next function.
  5446                                  ;
  5447 000001AD E8C6050000              .30                     call    ConNextPCIFunction                              ;next function
  5448 000001B2 72DB                                            jb      .10                                             ;continue if no overflow
  5449                                  ;
  5450                                  ;       Next device, bus.
  5451                                  ;
  5452 000001B4 E8CD050000              .40                     call    ConNextPCIDevice                                ;next device, bus.
  5453 000001B9 72D4                                            jb      .10                                             ;continue if no overflow
  5454 000001BB E9CD000000                                      jmp     .60                                             ;done, ETHER not found
  5455                                  ;
  5456                                  ;       Set hardware flag and save selector.
  5457                                  ;
  5458 000001C0 8B4304                  .50                     mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5459 000001C3 8906                                            mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5460 000001C5 800D2008000080                                  or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5461                                  
  5462                                                          putConsoleString czEthernetAdapterFound                 ;ethernet adapter found message
  5462 000001CC BA[070A0000]        <1>  mov edx,%1
  5462 000001D1 B00C                <1>  mov al,ePutConsoleString
  5462 000001D3 CD30                <1>  int _svc
  5463                                  ;
  5464                                  ;       Save and report PCI data.
  5465                                  ;
  5466 000001D5 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5467 000001D7 89C1                                            mov     ecx,eax
  5468 000001D9 BA[5E0A0000]                                    mov     edx,czEthernetSelector
  5469 000001DE E8DA000000                                      call    ConPutLabeledHexValue
  5470                                  
  5471 000001E3 8B06                                            mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5472 000001E5 30C0                                            xor     al,al                                           ;register 0
  5473 000001E7 E805010000                                      call    ConReadPCIRegister                              ;EAX = device id | vendor id
  5474 000001EC 894604                                          mov     [esi+ETHER.devicevendor],eax                    ;save device id | vendor id
  5475 000001EF 89C1                                            mov     ecx,eax                                         ;vendor id
  5476 000001F1 BA[200A0000]                                    mov     edx,czEthernetDeviceVendor                      ;string output buffer addr
  5477 000001F6 E8C2000000                                      call    ConPutLabeledHexValue
  5478                                  
  5479 000001FB 8B06                                            mov     eax,[esi+ETHER.selector]
  5480 000001FD B004                                            mov     al,004h
  5481 000001FF E8ED000000                                      call    ConReadPCIRegister
  5482 00000204 894608                                          mov     [esi+ETHER.statuscommand],eax
  5483 00000207 89C1                                            mov     ecx,eax
  5484 00000209 BA[6E0A0000]                                    mov     edx,czEthernetStatusCommand
  5485 0000020E E89F000000                                      call    ConPutLabeledHexLine
  5486                                  
  5487 00000213 8B06                                            mov     eax,[esi+ETHER.selector]
  5488 00000215 B010                                            mov     al,010h
  5489 00000217 E8D5000000                                      call    ConReadPCIRegister
  5490 0000021C 894614                                          mov     [esi+ETHER.mmio],eax
  5491 0000021F 89C1                                            mov     ecx,eax
  5492 00000221 BA[440A0000]                                    mov     edx,czEthernetMemoryAddr
  5493 00000226 E892000000                                      call    ConPutLabeledHexValue
  5494                                  
  5495 0000022B 8B06                                            mov     eax,[esi+ETHER.selector]
  5496 0000022D B018                                            mov     al,018h
  5497 0000022F E8BD000000                                      call    ConReadPCIRegister
  5498 00000234 83E0F8                                          and     eax,-8                                          ;mask out bits 2:0
  5499 00000237 89461C                                          mov     [esi+ETHER.port],eax
  5500 0000023A 89C1                                            mov     ecx,eax
  5501 0000023C BA[540A0000]                                    mov     edx,czEthernetPort
  5502 00000241 E877000000                                      call    ConPutLabeledHexValue
  5503                                  
  5504 00000246 8B06                                            mov     eax,[esi+ETHER.selector]                         ;ethernet device PCI selector
  5505 00000248 B03C                                            mov     al,03Ch                                         ;interrupt number port addr
  5506 0000024A E8A2000000                                      call    ConReadPCIRegister
  5507 0000024F 884626                                          mov     [esi+ETHER.irq],al                              ;save IRQ
  5508 00000252 0FB6C8                                          movzx   ecx,al                                          ;convert to dword
  5509 00000255 BA[2A0A0000]                                    mov     edx,czEthernetIRQ                               ;prompt string
  5510 0000025A E833000000                                      call    ConPutLabeledDecLine                            ;write PCI value to console
  5511                                  ;
  5512                                  ;       Read MAC address from MMIO
  5513                                  ;
  5514 0000025F 8B4E14                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  5515 00000262 E329                                            jecxz   .60
  5516 00000264 81C100540000                                    add     ecx,05400h                                      ;MAC address offset
  5517 0000026A 8B01                                            mov     eax,[ecx]                                       ;MAC address lo-order dword
  5518 0000026C 894620                                          mov     [esi+ETHER.mac],eax                             ;save
  5519 0000026F 668B4104                                        mov     ax,[ecx+4]                                      ;MAC address hi-order word
  5520 00000273 66894624                                        mov     [esi+ETHER.mac+4],ax                            ;save
  5521 00000277 8D4E20                                          lea     ecx,[esi+ETHER.mac]                             ;address of MAC bytes
  5522                                                          putMACString wzConsoleToken                             ;output MAC ASCIIZ string
  5522 0000027A BA71080000          <1>  mov edx,%1
  5522 0000027F B010                <1>  mov al,ePutMACString
  5522 00000281 CD30                <1>  int _svc
  5523 00000283 BA[340A0000]                                    mov     edx,czEthernetMAC                               ;label string
  5524 00000288 E841000000                                      call    ConPutLabeledLine                               ;put labeled string
  5525                                  ;
  5526                                  ;       Restore and return.
  5527                                  ;
  5528 0000028D 5F                      .60                     pop     edi                                             ;restore non-volatile regs
  5529 0000028E 5E                                              pop     esi                                             ;
  5530 0000028F 59                                              pop     ecx                                             ;
  5531 00000290 5B                                              pop     ebx                                             ;
  5532 00000291 C3                                              ret                                                     ;return
  5533                                  ;-----------------------------------------------------------------------------------------------------------------------
  5534                                  ;       In:             ECX     binary value
  5535                                  ;                       EDX     prompt string address
  5536                                  ;-----------------------------------------------------------------------------------------------------------------------
  5537 00000292 E806000000              ConPutLabeledDecLine    call    ConPutLabeledDecValue
  5538 00000297 E84B000000                                      call    ConPutNewLine
  5539 0000029C C3                                              ret
  5540 0000029D 53                      ConPutLabeledDecValue   push    ebx
  5541 0000029E 52                                              push    edx
  5542 0000029F BA71080000                                      mov     edx,wzConsoleToken
  5543                                                          unsignedToDecimalString
  5543 000002A4 B01B                <1>  mov al,eUnsignedToDecimalString
  5543 000002A6 CD30                <1>  int _svc
  5544 000002A8 5A                                              pop     edx
  5545 000002A9 B701                                            mov     bh,1
  5546 000002AB E829000000                                      call    ConPutLabeledString
  5547 000002B0 5B                                              pop     ebx
  5548 000002B1 C3                                              ret
  5549 000002B2 E806000000              ConPutLabeledHexLine    call    ConPutLabeledHexValue
  5550 000002B7 E82B000000                                      call    ConPutNewLine
  5551 000002BC C3                                              ret
  5552 000002BD 52                      ConPutLabeledHexValue   push    edx                                             ;save prompt string address
  5553 000002BE BA71080000                                      mov     edx,wzConsoleToken                              ;output buffer address
  5554                                                          unsignedToHexadecimal                                   ;convert binary to ASCII hex
  5554 000002C3 B01C                <1>  mov al,eUnsignedToHexadecimal
  5554 000002C5 CD30                <1>  int _svc
  5555 000002C7 5A                                              pop     edx                                             ;prompt string address
  5556 000002C8 E80C000000                                      call    ConPutLabeledString                             ;output labeled string to console
  5557 000002CD C3                                              ret                                                     ;return
  5558                                  ;-----------------------------------------------------------------------------------------------------------------------
  5559                                  ;       In:             EDX     prompt string address
  5560                                  ;-----------------------------------------------------------------------------------------------------------------------
  5561 000002CE E806000000              ConPutLabeledLine       call    ConPutLabeledString
  5562 000002D3 E80F000000                                      call    ConPutNewLine
  5563 000002D8 C3                                              ret
  5564                                  ConPutLabeledString     putConsoleString                                        ;put prompt string
  5564                              <1> ConPutLabeledString :
  5564 000002D9 B00C                <1>  mov al,ePutConsoleString
  5564 000002DB CD30                <1>  int _svc
  5565                                                          putConsoleString wzConsoleToken                         ;put value string
  5565 000002DD BA71080000          <1>  mov edx,%1
  5565 000002E2 B00C                <1>  mov al,ePutConsoleString
  5565 000002E4 CD30                <1>  int _svc
  5566 000002E6 C3                                              ret                                                     ;return
  5567                                  ConPutNewLine           putConsoleString czNewLine
  5567                              <1> ConPutNewLine :
  5567 000002E7 BA[990A0000]        <1>  mov edx,%1
  5567 000002EC B00C                <1>  mov al,ePutConsoleString
  5567 000002EE CD30                <1>  int _svc
  5568 000002F0 C3                                              ret
  5569                                  ;-----------------------------------------------------------------------------------------------------------------------
  5570                                  ;
  5571                                  ;       Routine:        ConReadPCIRegister
  5572                                  ;
  5573                                  ;       Description:    This routine reads a PCI register
  5574                                  ;
  5575                                  ;       In:             EAX     PCI register
  5576                                  ;
  5577                                  ;       Out:            EAX     PCI register value
  5578                                  ;-----------------------------------------------------------------------------------------------------------------------
  5579 000002F1 B60C                    ConReadPCIRegister      mov     dh,EPCIPORTCONFIGADDRHI                         ;hi-order PCI configuration addr port
  5580 000002F3 B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;lo-order PCI configuration addr port
  5581 000002F5 EF                                              out     dx,eax                                          ;select PCI register
  5582 000002F6 B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5583 000002F8 ED                                              in      eax,dx                                          ;read register
  5584 000002F9 C3                                              ret                                                     ;return
  5585                                  ;-----------------------------------------------------------------------------------------------------------------------
  5586                                  ;
  5587                                  ;       Routine:        ConInitEtherContext
  5588                                  ;
  5589                                  ;       Description:    This routine zeros an ETHER structure
  5590                                  ;
  5591                                  ;       In:             DS:EBX  ETHER structure address
  5592                                  ;
  5593                                  ;-----------------------------------------------------------------------------------------------------------------------
  5594 000002FA 51                      ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  5595 000002FB 57                                              push    edi                                             ;
  5596 000002FC 06                                              push    es                                              ;
  5597                                  ;
  5598                                  ;       Zero context.
  5599                                  ;
  5600 000002FD 1E                                              push    ds                                              ;load data segment...
  5601 000002FE 07                                              pop     es                                              ;...into extra segment
  5602 000002FF 89DF                                            mov     edi,ebx                                         ;ETHER structure offset
  5603 00000301 B927000000                                      mov     ecx,EETHERLEN                                   ;ETHER structure length
  5604 00000306 30C0                                            xor     al,al                                           ;zero
  5605 00000308 FC                                              cld                                                     ;forward strings
  5606 00000309 F3AA                                            rep     stosb                                           ;zero structure members
  5607                                  ;
  5608                                  ;       Restore and return.
  5609                                  ;
  5610 0000030B 07                                              pop     es                                              ;restore non-volatile regs
  5611 0000030C 5F                                              pop     edi                                             ;
  5612 0000030D 59                                              pop     ecx                                             ;
  5613 0000030E C3                                              ret                                                     ;return
  5614                                  ;-----------------------------------------------------------------------------------------------------------------------
  5615                                  ;
  5616                                  ;       Routine:        ConTakeToken
  5617                                  ;
  5618                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5619                                  ;
  5620                                  ;       In:             DS:EDX  source buffer address
  5621                                  ;                       DS:EBX  target buffer address
  5622                                  ;
  5623                                  ;       Out:            DS:EDX  source buffer address
  5624                                  ;                       DS:EBX  target buffer address
  5625                                  ;
  5626                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5627                                  ;
  5628                                  ;-----------------------------------------------------------------------------------------------------------------------
  5629 0000030F 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5630 00000310 57                                              push    edi                                             ;
  5631 00000311 06                                              push    es                                              ;
  5632 00000312 1E                                              push    ds                                              ;load data segment selector ...
  5633 00000313 07                                              pop     es                                              ;... into extra segment reg
  5634 00000314 89D6                                            mov     esi,edx                                         ;source buffer address
  5635 00000316 89DF                                            mov     edi,ebx                                         ;target buffer address
  5636 00000318 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5637 0000031B FC                                              cld                                                     ;forward strings
  5638 0000031C AC                      .10                     lodsb                                                   ;load byte
  5639 0000031D 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5640 0000031F 74FB                                            je      .10                                             ;yes, continue
  5641 00000321 84C0                                            test    al,al                                           ;end of line?
  5642 00000323 7410                                            jz      .40                                             ;yes, branch
  5643 00000325 AA                      .20                     stosb                                                   ;store byte
  5644 00000326 AC                                              lodsb                                                   ;load byte
  5645 00000327 84C0                                            test    al,al                                           ;end of line?
  5646 00000329 740A                                            jz      .40                                             ;no, continue
  5647 0000032B 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5648 0000032D 75F6                                            jne     .20                                             ;no, continue
  5649 0000032F AC                      .30                     lodsb                                                   ;load byte
  5650 00000330 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5651 00000332 74FB                                            je      .30                                             ;yes, continue
  5652 00000334 4E                                              dec     esi                                             ;pre-position
  5653 00000335 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5654 00000338 89D7                                            mov     edi,edx                                         ;source buffer address
  5655 0000033A AC                      .50                     lodsb                                                   ;remaining byte
  5656 0000033B AA                                              stosb                                                   ;move to front of buffer
  5657 0000033C 84C0                                            test    al,al                                           ;end of line?
  5658 0000033E 75FA                                            jnz     .50                                             ;no, continue
  5659 00000340 07                                              pop     es                                              ;restore non-volatile regs
  5660 00000341 5F                                              pop     edi                                             ;
  5661 00000342 5E                                              pop     esi                                             ;
  5662 00000343 C3                                              ret                                                     ;return
  5663                                  ;-----------------------------------------------------------------------------------------------------------------------
  5664                                  ;
  5665                                  ;       Routine:        ConDetermineCommand
  5666                                  ;
  5667                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5668                                  ;
  5669                                  ;       input:          DS:EDX  command address
  5670                                  ;
  5671                                  ;       output:         EAX     >=0     = command nbr
  5672                                  ;                               0       = unknown command
  5673                                  ;
  5674                                  ;-----------------------------------------------------------------------------------------------------------------------
  5675 00000344 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5676 00000345 51                                              push    ecx                                             ;
  5677 00000346 56                                              push    esi                                             ;
  5678 00000347 57                                              push    edi                                             ;
  5679                                  
  5680                                                          upperCaseString                                         ;upper-case string at EDX
  5680 00000348 B01D                <1>  mov al,eUpperCaseString
  5680 0000034A CD30                <1>  int _svc
  5681                                  
  5682 0000034C BE[0B090000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5683 00000351 31FF                                            xor     edi,edi                                         ;intialize command number
  5684 00000353 FC                                              cld                                                     ;forward strings
  5685 00000354 AC                      .10                     lodsb                                                   ;command length
  5686 00000355 0FB6C8                                          movzx   ecx,al                                          ;command length
  5687 00000358 E30D                                            jecxz   .20                                             ;branch if end of table
  5688 0000035A 89F3                                            mov     ebx,esi                                         ;table entry address
  5689 0000035C 01CE                                            add     esi,ecx                                         ;next table entry address
  5690                                  
  5691                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5691 0000035E B002                <1>  mov al,eCompareMemory
  5691 00000360 CD30                <1>  int _svc
  5692                                  
  5693 00000362 E303                                            jecxz   .20                                             ;branch if equal
  5694 00000364 47                                              inc     edi                                             ;increment command nbr
  5695 00000365 EBED                                            jmp     .10                                             ;repeat
  5696 00000367 89F8                    .20                     mov     eax,edi                                         ;command number
  5697 00000369 5F                                              pop     edi                                             ;restore non-volatile regs
  5698 0000036A 5E                                              pop     esi                                             ;
  5699 0000036B 59                                              pop     ecx                                             ;
  5700 0000036C 5B                                              pop     ebx                                             ;
  5701 0000036D C3                                              ret                                                     ;return
  5702                                  ;-----------------------------------------------------------------------------------------------------------------------
  5703                                  ;
  5704                                  ;       Routine:        ConClear
  5705                                  ;
  5706                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5707                                  ;
  5708                                  ;-----------------------------------------------------------------------------------------------------------------------
  5709                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5709                              <1> ConClear :
  5709 0000036E B001                <1>  mov al,eClearConsoleScreen
  5709 00000370 CD30                <1>  int _svc
  5710 00000372 C3                                              ret                                                     ;return
  5711                                  ;-----------------------------------------------------------------------------------------------------------------------
  5712                                  ;
  5713                                  ;       Routine:        ConDate
  5714                                  ;
  5715                                  ;       Description:    This routine handles the DATE command.
  5716                                  ;
  5717                                  ;-----------------------------------------------------------------------------------------------------------------------
  5718                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5718                              <1> ConDate :
  5718 00000373 BB53090000          <1>  mov ebx,%1
  5718 00000378 B019                <1>  mov al,eReadRealTimeClock
  5718 0000037A CD30                <1>  int _svc
  5719                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5719 0000037C BB53090000          <1>  mov ebx,%1
  5719 00000381 BAC1080000          <1>  mov edx,%2
  5719 00000386 B00D                <1>  mov al,ePutDateString
  5719 00000388 CD30                <1>  int _svc
  5720                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5720 0000038A BAC1080000          <1>  mov edx,%1
  5720 0000038F B00C                <1>  mov al,ePutConsoleString
  5720 00000391 CD30                <1>  int _svc
  5721                                                          putConsoleString  czNewLine                             ;write newline to console
  5721 00000393 BA[990A0000]        <1>  mov edx,%1
  5721 00000398 B00C                <1>  mov al,ePutConsoleString
  5721 0000039A CD30                <1>  int _svc
  5722 0000039C C3                                              ret                                                     ;return
  5723                                  ;-----------------------------------------------------------------------------------------------------------------------
  5724                                  ;
  5725                                  ;       Routine:        ConDay
  5726                                  ;
  5727                                  ;       Description:    This routine handles the DAY command.
  5728                                  ;
  5729                                  ;-----------------------------------------------------------------------------------------------------------------------
  5730                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5730                              <1> ConDay :
  5730 0000039D BB53090000          <1>  mov ebx,%1
  5730 000003A2 B019                <1>  mov al,eReadRealTimeClock
  5730 000003A4 CD30                <1>  int _svc
  5731                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5731 000003A6 BB53090000          <1>  mov ebx,%1
  5731 000003AB BAC1080000          <1>  mov edx,%2
  5731 000003B0 B00E                <1>  mov al,ePutDayString
  5731 000003B2 CD30                <1>  int _svc
  5732                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5732 000003B4 BAC1080000          <1>  mov edx,%1
  5732 000003B9 B00C                <1>  mov al,ePutConsoleString
  5732 000003BB CD30                <1>  int _svc
  5733                                                          putConsoleString  czNewLine                             ;write newline to console
  5733 000003BD BA[990A0000]        <1>  mov edx,%1
  5733 000003C2 B00C                <1>  mov al,ePutConsoleString
  5733 000003C4 CD30                <1>  int _svc
  5734 000003C6 C3                                              ret                                                     ;return
  5735                                  ;-----------------------------------------------------------------------------------------------------------------------
  5736                                  ;
  5737                                  ;       Routine:        ConExit
  5738                                  ;
  5739                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5740                                  ;
  5741                                  ;-----------------------------------------------------------------------------------------------------------------------
  5742                                  ConExit                 resetSystem                                             ;issue system reset
  5742                              <1> ConExit :
  5742 000003C7 B01A                <1>  mov al,eResetSystem
  5742 000003C9 CD30                <1>  int _svc
  5743 000003CB C3                                              ret                                                     ;return
  5744                                  ;-----------------------------------------------------------------------------------------------------------------------
  5745                                  ;
  5746                                  ;       Routine:        ConFree
  5747                                  ;
  5748                                  ;       Description:    This routine handles the FREE command.
  5749                                  ;
  5750                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5751                                  ;
  5752                                  ;-----------------------------------------------------------------------------------------------------------------------
  5753 000003CC 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5754 000003CD 51                                              push    ecx                                             ;
  5755 000003CE 56                                              push    esi                                             ;
  5756 000003CF 57                                              push    edi                                             ;
  5757                                  ;
  5758                                  ;       Get address parameter
  5759                                  ;
  5760 000003D0 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5761 000003D5 BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5762 000003DA E830FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5763                                  ;
  5764                                  ;       Convert input parameter from hexadecimal string to binary
  5765                                  ;
  5766 000003DF 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5767 000003E6 7421                                            je      .10                                             ;no, branch
  5768 000003E8 BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5769                                  
  5770                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5770 000003ED B009                <1>  mov al,eHexadecimalToUnsigned
  5770 000003EF CD30                <1>  int _svc
  5771                                  
  5772 000003F1 85C0                                            test    eax,eax                                         ;valid parameter?
  5773 000003F3 7414                                            jz      .10                                             ;no, branch
  5774                                  ;
  5775                                  ;       Free memory block
  5776                                  ;
  5777                                                          freeMemory eax                                          ;free memory
  5777 000003F5 89C2                <1>  mov edx,%1
  5777 000003F7 B004                <1>  mov al,eFreeMemory
  5777 000003F9 CD30                <1>  int _svc
  5778                                  
  5779 000003FB 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5780 000003FE 7409                                            je      .10                                             ;no, branch
  5781                                  ;
  5782                                  ;       Indicate memory freed
  5783                                  ;
  5784                                                          putConsoleString czOK                                   ;indicate success
  5784 00000400 BA[9C0A0000]        <1>  mov edx,%1
  5784 00000405 B00C                <1>  mov al,ePutConsoleString
  5784 00000407 CD30                <1>  int _svc
  5785                                  ;
  5786                                  ;       Restore and return
  5787                                  ;
  5788 00000409 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5789 0000040A 5E                                              pop     esi                                             ;
  5790 0000040B 59                                              pop     ecx                                             ;
  5791 0000040C 5B                                              pop     ebx                                             ;
  5792 0000040D C3                                              ret                                                     ;return
  5793                                  ;-----------------------------------------------------------------------------------------------------------------------
  5794                                  ;
  5795                                  ;       Routine:        ConHour
  5796                                  ;
  5797                                  ;       Description:    This routine Handles the HOUR command.
  5798                                  ;
  5799                                  ;-----------------------------------------------------------------------------------------------------------------------
  5800                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5800                              <1> ConHour :
  5800 0000040E BB53090000          <1>  mov ebx,%1
  5800 00000413 B019                <1>  mov al,eReadRealTimeClock
  5800 00000415 CD30                <1>  int _svc
  5801                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5801 00000417 BB53090000          <1>  mov ebx,%1
  5801 0000041C BAC1080000          <1>  mov edx,%2
  5801 00000421 B00F                <1>  mov al,ePutHourString
  5801 00000423 CD30                <1>  int _svc
  5802                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5802 00000425 BAC1080000          <1>  mov edx,%1
  5802 0000042A B00C                <1>  mov al,ePutConsoleString
  5802 0000042C CD30                <1>  int _svc
  5803                                                          putConsoleString  czNewLine                             ;write newline to console
  5803 0000042E BA[990A0000]        <1>  mov edx,%1
  5803 00000433 B00C                <1>  mov al,ePutConsoleString
  5803 00000435 CD30                <1>  int _svc
  5804 00000437 C3                                              ret                                                     ;return
  5805                                  ;-----------------------------------------------------------------------------------------------------------------------
  5806                                  ;
  5807                                  ;       Routine:        ConInt6
  5808                                  ;
  5809                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5810                                  ;
  5811                                  ;-----------------------------------------------------------------------------------------------------------------------
  5812 00000438 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5813 0000043A C3                                              ret                                                     ;return (not executed)
  5814                                  ;-----------------------------------------------------------------------------------------------------------------------
  5815                                  ;
  5816                                  ;       Routine:        ConMalloc
  5817                                  ;
  5818                                  ;       Description:    This routine handles the MALLOC command.
  5819                                  ;
  5820                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5821                                  ;
  5822                                  ;-----------------------------------------------------------------------------------------------------------------------
  5823 0000043B 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5824 0000043C 51                                              push    ecx                                             ;
  5825 0000043D 56                                              push    esi                                             ;
  5826 0000043E 57                                              push    edi                                             ;
  5827                                  ;
  5828                                  ;       Get size parameter
  5829                                  ;
  5830 0000043F BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5831 00000444 BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5832 00000449 E8C1FEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5833                                  ;
  5834                                  ;       Convert input parameter from decimal string to binary
  5835                                  ;
  5836 0000044E 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5837 00000455 7434                                            je      .10                                             ;no, branch
  5838 00000457 BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5839                                  
  5840                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5840 0000045C B003                <1>  mov al,eDecimalToUnsigned
  5840 0000045E CD30                <1>  int _svc
  5841                                  
  5842 00000460 85C0                                            test    eax,eax                                         ;valid parameter?
  5843 00000462 7427                                            jz      .10                                             ;no, branch
  5844                                  ;
  5845                                  ;       Allocate memory block
  5846                                  ;
  5847                                                          allocateMemory eax                                      ;allocate memory
  5847 00000464 89C1                <1>  mov ecx,%1
  5847 00000466 B000                <1>  mov al,eAllocateMemory
  5847 00000468 CD30                <1>  int _svc
  5848                                  
  5849 0000046A 85C0                                            test    eax,eax                                         ;memory allocated?
  5850 0000046C 741D                                            jz      .10                                             ;no, branch
  5851                                  ;
  5852                                  ;       Report allocated memory block address
  5853                                  ;
  5854 0000046E BAC1080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5855 00000473 89C1                                            mov     ecx,eax                                         ;memory address
  5856                                  
  5857                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5857 00000475 B01C                <1>  mov al,eUnsignedToHexadecimal
  5857 00000477 CD30                <1>  int _svc
  5858                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5858 00000479 BAC1080000          <1>  mov edx,%1
  5858 0000047E B00C                <1>  mov al,ePutConsoleString
  5858 00000480 CD30                <1>  int _svc
  5859                                                          putConsoleString czNewLine                              ;display new line
  5859 00000482 BA[990A0000]        <1>  mov edx,%1
  5859 00000487 B00C                <1>  mov al,ePutConsoleString
  5859 00000489 CD30                <1>  int _svc
  5860                                  
  5861 0000048B 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5862 0000048C 5E                                              pop     esi                                             ;
  5863 0000048D 59                                              pop     ecx                                             ;
  5864 0000048E 5B                                              pop     ebx                                             ;
  5865 0000048F C3                                              ret                                                     ;return
  5866                                  ;-----------------------------------------------------------------------------------------------------------------------
  5867                                  ;
  5868                                  ;       Routine:        ConMem
  5869                                  ;
  5870                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5871                                  ;
  5872                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5873                                  ;
  5874                                  ;-----------------------------------------------------------------------------------------------------------------------
  5875 00000490 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  5876 00000491 56                                              push    esi                                             ;
  5877 00000492 57                                              push    edi                                             ;
  5878                                  ;
  5879                                  ;       Update the source address if a parameter is given.
  5880                                  ;
  5881 00000493 BA21080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5882 00000498 BB71080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5883 0000049D E86DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5884 000004A2 803D7108000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5885 000004A9 740E                                            je      .10                                             ;no, branch
  5886 000004AB BA71080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5887                                  
  5888                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5888 000004B0 B009                <1>  mov al,eHexadecimalToUnsigned
  5888 000004B2 CD30                <1>  int _svc
  5889                                  
  5890 000004B4 A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  5891                                  ;
  5892                                  ;       Setup source address and row count.
  5893                                  ;
  5894 000004B9 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5895 000004BF 31C9                                            xor     ecx,ecx                                         ;zero register
  5896 000004C1 B110                                            mov     cl,16                                           ;row count
  5897                                  ;
  5898                                  ;       Start the row with the source address in hexadecimal.
  5899                                  ;
  5900 000004C3 51                      .20                     push    ecx                                             ;save remaining rows
  5901 000004C4 BFC1080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5902 000004C9 89FA                                            mov     edx,edi                                         ;output buffer address
  5903 000004CB 89F1                                            mov     ecx,esi                                         ;console memory address
  5904                                  
  5905                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5905 000004CD B01C                <1>  mov al,eUnsignedToHexadecimal
  5905 000004CF CD30                <1>  int _svc
  5906                                  
  5907 000004D1 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  5908 000004D4 B020                                            mov     al,' '                                          ;ascii space
  5909 000004D6 AA                                              stosb                                                   ;store delimiter
  5910                                  ;
  5911                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5912                                  ;
  5913 000004D7 31C9                                            xor     ecx,ecx                                         ;zero register
  5914 000004D9 B110                                            mov     cl,16                                           ;loop count
  5915 000004DB 51                      .30                     push    ecx                                             ;save loop count
  5916 000004DC AC                                              lodsb                                                   ;memory byte
  5917 000004DD 88C4                                            mov     ah,al                                           ;memory byte
  5918 000004DF C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  5919 000004E2 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5920 000004E4 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5921 000004E6 7202                                            jb      .40                                             ;yes, skip ahead
  5922 000004E8 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5923 000004EA AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5924 000004EB 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  5925 000004ED 240F                                            and     al,0fh                                          ;mask out high-order bits
  5926 000004EF 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5927 000004F1 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5928 000004F3 7202                                            jb      .50                                             ;yes, skip ahead
  5929 000004F5 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5930 000004F7 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5931 000004F8 B020                                            mov     al,' '                                          ;ascii space
  5932 000004FA AA                                              stosb                                                   ;store ascii space delimiter
  5933 000004FB 59                                              pop     ecx                                             ;loop count
  5934 000004FC E2DD                                            loop    .30                                             ;next
  5935                                  ;
  5936                                  ;       Output printable ASCII character section for the row.
  5937                                  ;
  5938 000004FE 83EE10                                          sub     esi,16                                          ;reset source pointer
  5939 00000501 B110                                            mov     cl,16                                           ;loop count
  5940 00000503 AC                      .60                     lodsb                                                   ;source byte
  5941 00000504 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  5942 00000506 7204                                            jb      .70                                             ;no, skip ahead
  5943 00000508 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  5944 0000050A 7202                                            jb      .80                                             ;yes, skip ahead
  5945 0000050C B020                    .70                     mov     al,' '                                          ;display space instead of printable
  5946 0000050E AA                      .80                     stosb                                                   ;store printable ascii byte
  5947 0000050F E2F2                                            loop    .60                                             ;next source byte
  5948 00000511 30C0                                            xor     al,al                                           ;nul-terminator
  5949 00000513 AA                                              stosb                                                   ;terminate output line
  5950                                  ;
  5951                                  ;       Display constructed output buffer and newline.
  5952                                  ;
  5953                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5953 00000514 BAC1080000          <1>  mov edx,%1
  5953 00000519 B00C                <1>  mov al,ePutConsoleString
  5953 0000051B CD30                <1>  int _svc
  5954                                                          putConsoleString czNewLine                              ;display new line
  5954 0000051D BA[990A0000]        <1>  mov edx,%1
  5954 00000522 B00C                <1>  mov al,ePutConsoleString
  5954 00000524 CD30                <1>  int _svc
  5955                                  ;
  5956                                  ;       Repeat until all lines displayed and preserve source address.
  5957                                  ;
  5958 00000526 59                                              pop     ecx                                             ;remaining rows
  5959 00000527 E29A                                            loop    .20                                             ;next row
  5960 00000529 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  5961 0000052F 5F                                              pop     edi                                             ;restore regs
  5962 00000530 5E                                              pop     esi                                             ;
  5963 00000531 5B                                              pop     ebx                                             ;
  5964 00000532 C3                                              ret                                                     ;return
  5965                                  ;-----------------------------------------------------------------------------------------------------------------------
  5966                                  ;
  5967                                  ;       Routine:        ConMinute
  5968                                  ;
  5969                                  ;       Description:    This routine Handles the MINUTE command.
  5970                                  ;
  5971                                  ;-----------------------------------------------------------------------------------------------------------------------
  5972                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5972                              <1> ConMinute :
  5972 00000533 BB53090000          <1>  mov ebx,%1
  5972 00000538 B019                <1>  mov al,eReadRealTimeClock
  5972 0000053A CD30                <1>  int _svc
  5973                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5973 0000053C BB53090000          <1>  mov ebx,%1
  5973 00000541 BAC1080000          <1>  mov edx,%2
  5973 00000546 B011                <1>  mov al,ePutMinuteString
  5973 00000548 CD30                <1>  int _svc
  5974                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5974 0000054A BAC1080000          <1>  mov edx,%1
  5974 0000054F B00C                <1>  mov al,ePutConsoleString
  5974 00000551 CD30                <1>  int _svc
  5975                                                          putConsoleString  czNewLine                             ;write newline to console
  5975 00000553 BA[990A0000]        <1>  mov edx,%1
  5975 00000558 B00C                <1>  mov al,ePutConsoleString
  5975 0000055A CD30                <1>  int _svc
  5976 0000055C C3                                              ret                                                     ;return
  5977                                  ;-----------------------------------------------------------------------------------------------------------------------
  5978                                  ;
  5979                                  ;       Routine:        ConMonth
  5980                                  ;
  5981                                  ;       Description:    This routine Handles the MONTH command.
  5982                                  ;
  5983                                  ;-----------------------------------------------------------------------------------------------------------------------
  5984                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5984                              <1> ConMonth :
  5984 0000055D BB53090000          <1>  mov ebx,%1
  5984 00000562 B019                <1>  mov al,eReadRealTimeClock
  5984 00000564 CD30                <1>  int _svc
  5985                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5985 00000566 BB53090000          <1>  mov ebx,%1
  5985 0000056B BAC1080000          <1>  mov edx,%2
  5985 00000570 B012                <1>  mov al,ePutMonthString
  5985 00000572 CD30                <1>  int _svc
  5986                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5986 00000574 BAC1080000          <1>  mov edx,%1
  5986 00000579 B00C                <1>  mov al,ePutConsoleString
  5986 0000057B CD30                <1>  int _svc
  5987                                                          putConsoleString  czNewLine                             ;write newline to console
  5987 0000057D BA[990A0000]        <1>  mov edx,%1
  5987 00000582 B00C                <1>  mov al,ePutConsoleString
  5987 00000584 CD30                <1>  int _svc
  5988 00000586 C3                                              ret                                                     ;return
  5989                                  ;-----------------------------------------------------------------------------------------------------------------------
  5990                                  ;
  5991                                  ;       Routine:        ConMonthName
  5992                                  ;
  5993                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5994                                  ;
  5995                                  ;-----------------------------------------------------------------------------------------------------------------------
  5996                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5996                              <1> ConMonthName :
  5996 00000587 BB53090000          <1>  mov ebx,%1
  5996 0000058C B019                <1>  mov al,eReadRealTimeClock
  5996 0000058E CD30                <1>  int _svc
  5997                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5997 00000590 BB53090000          <1>  mov ebx,%1
  5997 00000595 BAC1080000          <1>  mov edx,%2
  5997 0000059A B013                <1>  mov al,ePutMonthNameString
  5997 0000059C CD30                <1>  int _svc
  5998                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5998 0000059E BAC1080000          <1>  mov edx,%1
  5998 000005A3 B00C                <1>  mov al,ePutConsoleString
  5998 000005A5 CD30                <1>  int _svc
  5999                                                          putConsoleString   czNewLine                            ;write newline to console
  5999 000005A7 BA[990A0000]        <1>  mov edx,%1
  5999 000005AC B00C                <1>  mov al,ePutConsoleString
  5999 000005AE CD30                <1>  int _svc
  6000 000005B0 C3                                              ret                                                     ;return
  6001                                  ;-----------------------------------------------------------------------------------------------------------------------
  6002                                  ;
  6003                                  ;       Routine:        ConPCIProbe
  6004                                  ;
  6005                                  ;       Description:    This routine handles the PCIProbe command.
  6006                                  ;
  6007                                  ;-----------------------------------------------------------------------------------------------------------------------
  6008 000005B1 53                      ConPCIProbe             push    ebx                                             ;save non-volatile regs
  6009                                  ;
  6010                                  ;       Initialize variables.
  6011                                  ;       Construct PCI selector.
  6012                                  ;       Read PCI configuration data.
  6013                                  ;
  6014 000005B2 BB5B090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  6015 000005B7 E868000000                                      call    ConInitPCIContext                               ;initialize PCI struct
  6016 000005BC E878000000              .10                     call    ConBuildPCISelector                             ;build the PCI selector
  6017 000005C1 E894000000                                      call    ConReadPCIConfigData                            ;read the configuration data
  6018                                  ;
  6019                                  ;       Interpret PCI data value and display finding.
  6020                                  ;
  6021 000005C6 83F8FF                                          cmp     eax,-1                                          ;function defined?
  6022 000005C9 7508                                            jne     .20                                             ;yes, branch
  6023 000005CB 807B0200                                        cmp     byte [ebx+PCI.function],0                       ;function zero?
  6024 000005CF 744A                                            je      .40                                             ;yes, skip to next device
  6025 000005D1 EB41                                            jmp     short .30                                       ;no, skip to next function
  6026                                  ;
  6027                                  ;       Build PCI identifying string.
  6028                                  ;       Write identifying string to console.
  6029                                  ;       Determine the vendor and chip.
  6030                                  ;       Write vendor and chip to console.
  6031                                  ;
  6032 000005D3 BA32090000              .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6033 000005D8 E88E000000                                      call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6034 000005DD E8CA000000                                      call    ConInterpretPCIData                             ;update flags based on data
  6035                                  
  6036                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6036 000005E2 BA32090000          <1>  mov edx,%1
  6036 000005E7 B00C                <1>  mov al,ePutConsoleString
  6036 000005E9 CD30                <1>  int _svc
  6037                                                          putConsoleString czSpace                                ;space delimiter
  6037 000005EB BA[340B0000]        <1>  mov edx,%1
  6037 000005F0 B00C                <1>  mov al,ePutConsoleString
  6037 000005F2 CD30                <1>  int _svc
  6038                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6038 000005F4 8B530C              <1>  mov edx,%1
  6038 000005F7 B00C                <1>  mov al,ePutConsoleString
  6038 000005F9 CD30                <1>  int _svc
  6039                                                          putConsoleString czSpace                                ;space delimiter
  6039 000005FB BA[340B0000]        <1>  mov edx,%1
  6039 00000600 B00C                <1>  mov al,ePutConsoleString
  6039 00000602 CD30                <1>  int _svc
  6040                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6040 00000604 8B5310              <1>  mov edx,%1
  6040 00000607 B00C                <1>  mov al,ePutConsoleString
  6040 00000609 CD30                <1>  int _svc
  6041                                                          putConsoleString czNewLine                              ;display new line
  6041 0000060B BA[990A0000]        <1>  mov edx,%1
  6041 00000610 B00C                <1>  mov al,ePutConsoleString
  6041 00000612 CD30                <1>  int _svc
  6042                                  ;
  6043                                  ;       Next function.
  6044                                  ;
  6045 00000614 E85F010000              .30                     call    ConNextPCIFunction                              ;next function
  6046 00000619 72A1                                            jb      .10                                             ;continue if no overflow
  6047                                  ;
  6048                                  ;       Next device, bus.
  6049                                  ;
  6050 0000061B E866010000              .40                     call    ConNextPCIDevice                                ;next device, bus
  6051 00000620 729A                                            jb      .10                                             ;continue if no overflow
  6052                                  ;
  6053                                  ;       Restore and return.
  6054                                  ;
  6055 00000622 5B                                              pop     ebx                                             ;restore non-volatile regs
  6056 00000623 C3                                              ret                                                     ;return
  6057                                  ;-----------------------------------------------------------------------------------------------------------------------
  6058                                  ;
  6059                                  ;       Routine:        ConInitPCIContext
  6060                                  ;
  6061                                  ;       Description:    This routine initializes a PCI structure.
  6062                                  ;
  6063                                  ;       In:             DS:EBX  PCI structure address
  6064                                  ;
  6065                                  ;-----------------------------------------------------------------------------------------------------------------------
  6066 00000624 51                      ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  6067 00000625 57                                              push    edi                                             ;
  6068 00000626 06                                              push    es                                              ;
  6069                                  ;
  6070                                  ;       Zero context.
  6071                                  ;
  6072 00000627 1E                                              push    ds                                              ;load data segment...
  6073 00000628 07                                              pop     es                                              ;...into extra segment
  6074 00000629 89DF                                            mov     edi,ebx                                         ;PCI structure offset
  6075 0000062B B90C000000                                      mov     ecx,EPCILEN                                     ;PCI structure length
  6076 00000630 30C0                                            xor     al,al                                           ;zero
  6077 00000632 FC                                              cld                                                     ;forward strings
  6078 00000633 F3AA                                            rep     stosb                                           ;zero structure members
  6079                                  ;
  6080                                  ;       Restore and return.
  6081                                  ;
  6082 00000635 07                                              pop     es                                              ;restore non-volatile regs
  6083 00000636 5F                                              pop     edi                                             ;
  6084 00000637 59                                              pop     ecx                                             ;
  6085 00000638 C3                                              ret                                                     ;return
  6086                                  ;-----------------------------------------------------------------------------------------------------------------------
  6087                                  ;
  6088                                  ;       Routine:        ConBuildPCISelector
  6089                                  ;
  6090                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  6091                                  ;
  6092                                  ;       In:             DS:EBX  PCI structure address
  6093                                  ;
  6094                                  ;       Out:            EAX     bus, device, function, register selector
  6095                                  ;
  6096                                  ;-----------------------------------------------------------------------------------------------------------------------
  6097 00000639 8A23                    ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  6098 0000063B 8A5301                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  6099 0000063E C0E203                                          shl     dl,3                                            ;DL = dddd d000
  6100 00000641 8A4302                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  6101 00000644 2407                                            and     al,007h                                         ;AL = 0000 0fff
  6102 00000646 08D0                                            or      al,dl                                           ;AL = dddd dfff
  6103 00000648 0FB7C0                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  6104 0000064B C1E008                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  6105 0000064E 8A4303                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6106 00000651 0D00000080                                      or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6107 00000656 894304                                          mov     [ebx+PCI.selector],eax                          ;set selector
  6108 00000659 C3                                              ret                                                     ;return
  6109                                  ;-----------------------------------------------------------------------------------------------------------------------
  6110                                  ;
  6111                                  ;       Routine:        ConReadPCIConfigData
  6112                                  ;
  6113                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  6114                                  ;
  6115                                  ;       In:             DS:EBX  PCI structure address
  6116                                  ;
  6117                                  ;       Out:            EAX     config data
  6118                                  ;
  6119                                  ;-----------------------------------------------------------------------------------------------------------------------
  6120 0000065A B60C                    ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  6121 0000065C B2F8                                            mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  6122 0000065E 8B4304                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  6123 00000661 EF                                              out     dx,eax                                          ;select bus, device, function, reg
  6124 00000662 B60C                                            mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  6125 00000664 B2FC                                            mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  6126 00000666 ED                                              in      eax,dx                                          ;read register
  6127 00000667 894308                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  6128 0000066A C3                                              ret                                                     ;return
  6129                                  ;-----------------------------------------------------------------------------------------------------------------------
  6130                                  ;
  6131                                  ;       Routine:        ConBuildPCIIdent
  6132                                  ;
  6133                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  6134                                  ;                       Function code values.
  6135                                  ;
  6136                                  ;       In:             DS:EBX  PCI structure address
  6137                                  ;                       DS:EDX  output buffer address 999.99.9\0
  6138                                  ;
  6139                                  ;-----------------------------------------------------------------------------------------------------------------------
  6140 0000066B 57                      ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  6141 0000066C 06                                              push    es                                              ;
  6142                                  ;
  6143                                  ;       Establish addressability
  6144                                  ;
  6145 0000066D 1E                                              push    ds                                              ;load data segment...
  6146 0000066E 07                                              pop     es                                              ;...into extra segment reg
  6147                                  ;
  6148                                  ;       Build identifier string (bus.device.function)
  6149                                  ;
  6150 0000066F 89D7                                            mov     edi,edx                                         ;output buffer address
  6151 00000671 8A03                                            mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  6152 00000673 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  6153 00000675 B164                                            mov     cl,100                                          ;divisor (10^2)
  6154 00000677 F6F1                                            div     cl                                              ;AL=100's, AH=bus MOD 100
  6155 00000679 0C30                                            or      al,30h                                          ;apply ASCII zone
  6156 0000067B FC                                              cld                                                     ;forward strings
  6157 0000067C AA                                              stosb                                                   ;store 100's digit
  6158 0000067D 88E0                                            mov     al,ah                                           ;bus MOD 100
  6159 0000067F 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  6160 00000681 B10A                                            mov     cl,10                                           ;divisor (10^1)
  6161 00000683 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  6162 00000685 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  6163 00000689 66AB                                            stosw                                                   ;store 10's and 1's
  6164 0000068B B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6165 0000068D AA                                              stosb                                                   ;store delimiter
  6166 0000068E 8A4301                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  6167 00000691 30E4                                            xor     ah,ah                                           ;zero high order dividend
  6168 00000693 B10A                                            mov     cl,10                                           ;divisor (10^1)
  6169 00000695 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  6170 00000697 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  6171 0000069B 66AB                                            stosw                                                   ;store 10's and 1's
  6172 0000069D B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6173 0000069F AA                                              stosb                                                   ;store delimiter
  6174 000006A0 8A4302                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  6175 000006A3 0C30                                            or      al,30h                                          ;apply ASCII zone
  6176 000006A5 AA                                              stosb                                                   ;store 1's
  6177 000006A6 30C0                                            xor     al,al                                           ;null terminator
  6178 000006A8 AA                                              stosb                                                   ;store terminator
  6179                                  ;
  6180                                  ;       Restore and return.
  6181                                  ;
  6182 000006A9 07                                              pop     es                                              ;restore non-volatile regs
  6183 000006AA 5F                                              pop     edi                                             ;
  6184 000006AB C3                                              ret                                                     ;return
  6185                                  ;-----------------------------------------------------------------------------------------------------------------------
  6186                                  ;
  6187                                  ;       Routine:        ConInterpretPCIData
  6188                                  ;
  6189                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  6190                                  ;
  6191                                  ;       In:             DS:EBX  PCI structure address
  6192                                  ;
  6193                                  ;-----------------------------------------------------------------------------------------------------------------------
  6194 000006AC B8[D2090000]            ConInterpretPCIData     mov     eax,czApple
  6195 000006B1 66817B086B10                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  6196 000006B7 751A                                            jne     .10                                             ;no, branch
  6197 000006B9 BA[660B0000]                                    mov     edx,czUSBController
  6198 000006BE 66837B0A3F                                      cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  6199 000006C3 0F84A8000000                                    je      .40                                             ;yes, branch
  6200 000006C9 BA[A80A0000]                                    mov     edx,czOther                                     ;other
  6201 000006CE E99E000000                                      jmp     .40                                             ;continue
  6202 000006D3 B8[900A0000]            .10                     mov     eax,czIntel                                     ;Intel
  6203 000006D8 66817B088680                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  6204 000006DE 7559                                            jne     .20                                             ;no, branch
  6205 000006E0 BA[FF0A0000]                                    mov     edx,czPro1000MT                                 ;Pro/1000 MT
  6206 000006E5 66817B0A0F10                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  6207 000006EB 0F8480000000                                    je      .40                                             ;yes, branch
  6208 000006F1 BA[AE0A0000]                                    mov     edx,czPCIAndMem                                 ;PCI and Memory
  6209 000006F6 66817B0A3712                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  6210 000006FC 7473                                            je      .40                                             ;yes, branch
  6211 000006FE BA[D8090000]                                    mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  6212 00000703 66817B0A1524                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  6213 00000709 7466                                            je      .40                                             ;yes, branch
  6214 0000070B BA[BD0A0000]                                    mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  6215 00000710 66817B0A0070                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  6216 00000716 7459                                            je      .40                                             ;yes, branch
  6217 00000718 BA[DD0B0000]                                    mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  6218 0000071D 66817B0A1171                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  6219 00000723 744C                                            je      .40                                             ;yes, branch
  6220 00000725 BA[D50A0000]                                    mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  6221 0000072A 66817B0A1371                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  6222 00000730 743F                                            je      .40                                             ;yes, branch
  6223 00000732 BA[A80A0000]                                    mov     edx,czOther                                     ;other
  6224 00000737 EB38                                            jmp     .40                                             ;continue
  6225 00000739 B8[A10A0000]            .20                     mov     eax,czOracle                                    ;Oracle
  6226 0000073E 66817B08EE80                                    cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  6227 00000744 7521                                            jne     .30                                             ;no, branch
  6228 00000746 BA[870B0000]                                    mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  6229 0000074B 66817B0AEFBE                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  6230 00000751 741E                                            je      .40                                             ;yes, branch
  6231 00000753 BA[750B0000]                                    mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  6232 00000758 66817B0AFECA                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  6233 0000075E 7411                                            je      .40                                             ;yes, branch
  6234 00000760 BA[A80A0000]                                    mov     edx,czOther                                     ;other
  6235 00000765 EB0A                                            jmp     .40                                             ;continue
  6236 00000767 B8[A80A0000]            .30                     mov     eax,czOther                                     ;other
  6237 0000076C BA[A80A0000]                                    mov     edx,czOther                                     ;other
  6238 00000771 89430C                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  6239 00000774 895310                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  6240 00000777 C3                                              ret                                                     ;return
  6241                                  ;-----------------------------------------------------------------------------------------------------------------------
  6242                                  ;
  6243                                  ;       Routine:        ConNextPCIFunction
  6244                                  ;
  6245                                  ;       Description:    This routine increments the function of the device.
  6246                                  ;
  6247                                  ;       In:             DS:EBX  PCI structure address
  6248                                  ;
  6249                                  ;       Out:            CY      0 = overflow
  6250                                  ;                               1 = no overflow, continue
  6251                                  ;
  6252                                  ;-----------------------------------------------------------------------------------------------------------------------
  6253 00000778 FE4302                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  6254 0000077B 807B0208                                        cmp     byte [ebx+PCI.function],8                       ;at limit?
  6255 0000077F 7204                                            jb      .10                                             ;no, continue
  6256 00000781 C6430200                                        mov     byte [ebx+PCI.function],0                       ;zero function
  6257 00000785 C3                      .10                     ret                                                     ;return
  6258                                  ;-----------------------------------------------------------------------------------------------------------------------
  6259                                  ;
  6260                                  ;       Routine:        ConNextPCIDevice
  6261                                  ;
  6262                                  ;       Description:    This routine increments the device of the PCI across buses.
  6263                                  ;
  6264                                  ;       In:             DS:EBX  PCI structure address
  6265                                  ;
  6266                                  ;       Out:            CY      0 = overflow
  6267                                  ;                               1 = no overflow, continue
  6268                                  ;
  6269                                  ;-----------------------------------------------------------------------------------------------------------------------
  6270 00000786 FE4301                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  6271 00000789 807B0120                                        cmp     byte [ebx+PCI.device],32                        ;at limit?
  6272 0000078D 720E                                            jb      .10                                             ;no, continue
  6273 0000078F C6430100                                        mov     byte [ebx+PCI.device],0                         ;zero device
  6274 00000793 FE03                                            inc     byte [ebx+PCI.bus]                              ;next bus
  6275 00000795 803B08                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  6276 00000798 7203                                            jb      .10                                             ;no, continue
  6277 0000079A C60300                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  6278 0000079D C3                      .10                     ret                                                     ;return
  6279                                  ;-----------------------------------------------------------------------------------------------------------------------
  6280                                  ;
  6281                                  ;       Routine:        ConSecond
  6282                                  ;
  6283                                  ;       Description:    This routine Handles the SECOND command.
  6284                                  ;
  6285                                  ;-----------------------------------------------------------------------------------------------------------------------
  6286                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6286                              <1> ConSecond :
  6286 0000079E BB53090000          <1>  mov ebx,%1
  6286 000007A3 B019                <1>  mov al,eReadRealTimeClock
  6286 000007A5 CD30                <1>  int _svc
  6287                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  6287 000007A7 BB53090000          <1>  mov ebx,%1
  6287 000007AC BAC1080000          <1>  mov edx,%2
  6287 000007B1 B014                <1>  mov al,ePutSecondString
  6287 000007B3 CD30                <1>  int _svc
  6288                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6288 000007B5 BAC1080000          <1>  mov edx,%1
  6288 000007BA B00C                <1>  mov al,ePutConsoleString
  6288 000007BC CD30                <1>  int _svc
  6289                                                          putConsoleString  czNewLine                             ;write newline to console
  6289 000007BE BA[990A0000]        <1>  mov edx,%1
  6289 000007C3 B00C                <1>  mov al,ePutConsoleString
  6289 000007C5 CD30                <1>  int _svc
  6290 000007C7 C3                                              ret                                                     ;return
  6291                                  ;-----------------------------------------------------------------------------------------------------------------------
  6292                                  ;
  6293                                  ;       Routine:        ConTime
  6294                                  ;
  6295                                  ;       Description:    This routine Handles the TIME command.
  6296                                  ;
  6297                                  ;-----------------------------------------------------------------------------------------------------------------------
  6298                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6298                              <1> ConTime :
  6298 000007C8 BB53090000          <1>  mov ebx,%1
  6298 000007CD B019                <1>  mov al,eReadRealTimeClock
  6298 000007CF CD30                <1>  int _svc
  6299                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6299 000007D1 BB53090000          <1>  mov ebx,%1
  6299 000007D6 BAC1080000          <1>  mov edx,%2
  6299 000007DB B015                <1>  mov al,ePutTimeString
  6299 000007DD CD30                <1>  int _svc
  6300                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6300 000007DF BAC1080000          <1>  mov edx,%1
  6300 000007E4 B00C                <1>  mov al,ePutConsoleString
  6300 000007E6 CD30                <1>  int _svc
  6301                                                          putConsoleString  czNewLine                             ;write newline to console
  6301 000007E8 BA[990A0000]        <1>  mov edx,%1
  6301 000007ED B00C                <1>  mov al,ePutConsoleString
  6301 000007EF CD30                <1>  int _svc
  6302 000007F1 C3                                              ret                                                     ;return
  6303                                  ;-----------------------------------------------------------------------------------------------------------------------
  6304                                  ;
  6305                                  ;       Routine:        ConVersion
  6306                                  ;
  6307                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6308                                  ;
  6309                                  ;-----------------------------------------------------------------------------------------------------------------------
  6310                                  ConVersion              putConsoleString czTitle                                ;display version message
  6310                              <1> ConVersion :
  6310 000007F2 BA[360B0000]        <1>  mov edx,%1
  6310 000007F7 B00C                <1>  mov al,ePutConsoleString
  6310 000007F9 CD30                <1>  int _svc
  6311 000007FB C3                                              ret                                                     ;return
  6312                                  ;-----------------------------------------------------------------------------------------------------------------------
  6313                                  ;
  6314                                  ;       Routine:        ConWeekday
  6315                                  ;
  6316                                  ;       Description:    This routine handles the WEEKDAY command.
  6317                                  ;
  6318                                  ;-----------------------------------------------------------------------------------------------------------------------
  6319                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6319                              <1> ConWeekday :
  6319 000007FC BB53090000          <1>  mov ebx,%1
  6319 00000801 B019                <1>  mov al,eReadRealTimeClock
  6319 00000803 CD30                <1>  int _svc
  6320                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6320 00000805 BB53090000          <1>  mov ebx,%1
  6320 0000080A BAC1080000          <1>  mov edx,%2
  6320 0000080F B016                <1>  mov al,ePutWeekdayString
  6320 00000811 CD30                <1>  int _svc
  6321                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6321 00000813 BAC1080000          <1>  mov edx,%1
  6321 00000818 B00C                <1>  mov al,ePutConsoleString
  6321 0000081A CD30                <1>  int _svc
  6322                                                          putConsoleString  czNewLine                             ;write newline to console
  6322 0000081C BA[990A0000]        <1>  mov edx,%1
  6322 00000821 B00C                <1>  mov al,ePutConsoleString
  6322 00000823 CD30                <1>  int _svc
  6323 00000825 C3                                              ret                                                     ;return
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325                                  ;
  6326                                  ;       Routine:        ConWeekdayName
  6327                                  ;
  6328                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6329                                  ;
  6330                                  ;-----------------------------------------------------------------------------------------------------------------------
  6331                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6331                              <1> ConWeekdayName :
  6331 00000826 BB53090000          <1>  mov ebx,%1
  6331 0000082B B019                <1>  mov al,eReadRealTimeClock
  6331 0000082D CD30                <1>  int _svc
  6332                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6332 0000082F BB53090000          <1>  mov ebx,%1
  6332 00000834 BAC1080000          <1>  mov edx,%2
  6332 00000839 B017                <1>  mov al,ePutWeekdayNameString
  6332 0000083B CD30                <1>  int _svc
  6333                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6333 0000083D BAC1080000          <1>  mov edx,%1
  6333 00000842 B00C                <1>  mov al,ePutConsoleString
  6333 00000844 CD30                <1>  int _svc
  6334                                                          putConsoleString     czNewLine                                  ;write newline to console
  6334 00000846 BA[990A0000]        <1>  mov edx,%1
  6334 0000084B B00C                <1>  mov al,ePutConsoleString
  6334 0000084D CD30                <1>  int _svc
  6335 0000084F C3                                              ret                                                             ;return
  6336                                  ;-----------------------------------------------------------------------------------------------------------------------
  6337                                  ;
  6338                                  ;       Routine:        ConYear
  6339                                  ;
  6340                                  ;       Description:    This routine Handles the YEAR command.
  6341                                  ;
  6342                                  ;-----------------------------------------------------------------------------------------------------------------------
  6343                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6343                              <1> ConYear :
  6343 00000850 BB53090000          <1>  mov ebx,%1
  6343 00000855 B019                <1>  mov al,eReadRealTimeClock
  6343 00000857 CD30                <1>  int _svc
  6344                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6344 00000859 BB53090000          <1>  mov ebx,%1
  6344 0000085E BAC1080000          <1>  mov edx,%2
  6344 00000863 B018                <1>  mov al,ePutYearString
  6344 00000865 CD30                <1>  int _svc
  6345                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6345 00000867 BAC1080000          <1>  mov edx,%1
  6345 0000086C B00C                <1>  mov al,ePutConsoleString
  6345 0000086E CD30                <1>  int _svc
  6346                                                          putConsoleString  czNewLine                             ;write newline to console
  6346 00000870 BA[990A0000]        <1>  mov edx,%1
  6346 00000875 B00C                <1>  mov al,ePutConsoleString
  6346 00000877 CD30                <1>  int _svc
  6347 00000879 C3                                              ret                                                     ;return
  6348                                  ;-----------------------------------------------------------------------------------------------------------------------
  6349                                  ;
  6350                                  ;       Routine:        ConYearIsLeap
  6351                                  ;
  6352                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6353                                  ;
  6354                                  ;-----------------------------------------------------------------------------------------------------------------------
  6355                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6355                              <1> ConYearIsLeap :
  6355 0000087A BB53090000          <1>  mov ebx,%1
  6355 0000087F B019                <1>  mov al,eReadRealTimeClock
  6355 00000881 CD30                <1>  int _svc
  6356                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6356 00000883 BB53090000          <1>  mov ebx,%1
  6356 00000888 B00A                <1>  mov al,eIsLeapYear
  6356 0000088A CD30                <1>  int _svc
  6357                                  
  6358 0000088C E30B                                            jecxz   .10                                             ;branch if not leap
  6359                                  
  6360                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6360 0000088E BA[A30B0000]        <1>  mov edx,%1
  6360 00000893 B00C                <1>  mov al,ePutConsoleString
  6360 00000895 CD30                <1>  int _svc
  6361                                  
  6362 00000897 EB09                                            jmp     .20                                             ;continue
  6363                                  
  6364                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6364                              <1> .10 :
  6364 00000899 BA[BE0B0000]        <1>  mov edx,%1
  6364 0000089E B00C                <1>  mov al,ePutConsoleString
  6364 000008A0 CD30                <1>  int _svc
  6365 000008A2 C3                      .20                     ret                                                     ;return
  6366                                  ;-----------------------------------------------------------------------------------------------------------------------
  6367                                  ;
  6368                                  ;       Tables
  6369                                  ;
  6370                                  ;-----------------------------------------------------------------------------------------------------------------------
  6371                                                                                                                  ;---------------------------------------
  6372                                                                                                                  ;  Command Jump Table
  6373                                                                                                                  ;---------------------------------------
  6374                                  tConJmpTbl              equ     $                                               ;command jump table
  6375 000008A3 26080000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6376 000008A7 7A080000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6377 000008AB 87050000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6378 000008AF B1050000                                        dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6379 000008B3 C7030000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  6380 000008B7 F2070000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  6381 000008BB FC070000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6382 000008BF 3B040000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6383 000008C3 90040000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  6384 000008C7 33050000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  6385 000008CB 9E070000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  6386 000008CF 6E030000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  6387 000008D3 B1050000                                        dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6388 000008D7 5D050000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  6389 000008DB 73030000                                        dd      ConDate         - ConCode                       ;date command routine offset
  6390 000008DF C7030000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  6391 000008E3 CC030000                                        dd      ConFree         - ConCode                       ;free command routine offset
  6392 000008E7 0E040000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  6393 000008EB 38040000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  6394 000008EF C7030000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  6395 000008F3 C8070000                                        dd      ConTime         - ConCode                       ;time command routine offset
  6396 000008F7 50080000                                        dd      ConYear         - ConCode                       ;year command routine offset
  6397 000008FB 6E030000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  6398 000008FF 9D030000                                        dd      ConDay          - ConCode                       ;day command routine offset
  6399 00000903 90040000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  6400 00000907 F2070000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  6401                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6402                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6403                                                                                                                  ;---------------------------------------
  6404                                                                                                                  ;  Command Name Table
  6405                                                                                                                  ;---------------------------------------
  6406                                  tConCmdTbl              equ     $                                               ;command name table
  6407 0000090B 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6407 00000914 4E414D4500         
  6408 00000919 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6408 00000922 45415000           
  6409 00000926 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  6409 0000092F 4D4500             
  6410 00000932 0950434950524F4245-                             db      9,"PCIPROBE",0                                  ;pciprobe command
  6410 0000093B 00                 
  6411 0000093C 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  6411 00000945 00                 
  6412 00000946 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  6413 0000094F 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  6414 00000958 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  6415 00000960 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  6416 00000968 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  6417 00000970 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  6418 00000978 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  6419 0000097F 064C5350434900                                  db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6420 00000986 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  6421 0000098D 054441544500                                    db      5,"DATE",0                                      ;date command
  6422 00000993 054558495400                                    db      5,"EXIT",0                                      ;exit command
  6423 00000999 054652454500                                    db      5,"FREE",0                                      ;free command
  6424 0000099F 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  6425 000009A5 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  6426 000009AB 055155495400                                    db      5,"QUIT",0                                      ;quit command
  6427 000009B1 0554494D4500                                    db      5,"TIME",0                                      ;time command
  6428 000009B7 055945415200                                    db      5,"YEAR",0                                      ;year command
  6429 000009BD 04434C5300                                      db      4,"CLS",0                                       ;cls command
  6430 000009C2 0444415900                                      db      4,"DAY",0                                       ;day command
  6431 000009C7 044D454D00                                      db      4,"MEM",0                                       ;mem command
  6432 000009CC 0456455200                                      db      4,"VER",0                                       ;ver command
  6433 000009D1 00                                              db      0                                               ;end of table
  6434                                  ;-----------------------------------------------------------------------------------------------------------------------
  6435                                  ;
  6436                                  ;       Constants
  6437                                  ;
  6438                                  ;-----------------------------------------------------------------------------------------------------------------------
  6439 000009D2 4170706C6500            czApple                 db      "Apple",0                                       ;vendor name string
  6440 000009D8 41757265616C204144-     czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6440 000009E1 3138383120534F554E-
  6440 000009EA 444D415800         
  6441 000009EF 42617365206D656D6F-     czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  6441 000009F8 72792028525443293A-
  6441 00000A01 202020202000       
  6442 00000A07 45746865726E657420-     czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6442 00000A10 616461707465722066-
  6442 00000A19 6F756E640D0A00     
  6443 00000A20 204465766963653A20-     czEthernetDeviceVendor  db      " Device: ",0                                   ;PCI device label
  6443 00000A29 00                 
  6444 00000A2A 204952513A20202020-     czEthernetIRQ           db      " IRQ:    ",0                                   ;ethernet IRQ
  6444 00000A33 00                 
  6445 00000A34 204D41432041646472-     czEthernetMAC           db      " MAC Address:  ",0                             ;MAC address
  6445 00000A3D 6573733A202000     
  6446 00000A44 20202020204D4D494F-     czEthernetMemoryAddr    db      "     MMIO:     ",0                             ;ethernet I/O memory address
  6446 00000A4D 3A202020202000     
  6447 00000A54 20506F72743A202020-     czEthernetPort          db      " Port:   ",0                                   ;ethernet I/O port address
  6447 00000A5D 00                 
  6448 00000A5E 205043492053656C65-     czEthernetSelector      db      " PCI Selector: ",0                             ;PCI selector label
  6448 00000A67 63746F723A2000     
  6449 00000A6E 205374617475733A20-     czEthernetStatusCommand db      " Status: ",0                                   ;PCI status label
  6449 00000A77 00                 
  6450 00000A78 20457874656E646564-     czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  6450 00000A81 2028525443293A2020-
  6450 00000A8A 202020202000       
  6451 00000A90 496E74656C00            czIntel                 db      "Intel",0                                       ;vendor name string
  6452 00000A96 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  6453 00000A99 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  6454 00000A9C 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  6455 00000AA1 4F7261636C6500          czOracle                db      "Oracle",0                                      ;vendor name string
  6456 00000AA8 4F7468657200            czOther                 db      "Other",0                                       ;default name string
  6457 00000AAE 5043492026204D656D-     czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6457 00000AB7 6F727900           
  6458 00000ABB 2E00                    czPeriod                db      ".",0                                           ;period delimiter
  6459 00000ABD 504949583320504349-     czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6459 00000AC6 2D746F2D4953412042-
  6459 00000ACF 726964676500       
  6460 00000AD5 50494958342F34452F-     czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6460 00000ADE 344D20506F77657220-
  6460 00000AE7 4D616E6167656D656E-
  6460 00000AF0 7420436F6E74726F6C-
  6460 00000AF9 6C657200           
  6461 00000AFD 3A00                    czPrompt                db      ":",0                                           ;prompt string
  6462 00000AFF 50726F2F3130303020-     czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6462 00000B08 4D542045746865726E-
  6462 00000B11 657420416461707465-
  6462 00000B1A 7200               
  6463 00000B1C 2042656C6F77204542-     czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  6463 00000B25 44412028496E742031-
  6463 00000B2E 3268293A2000       
  6464 00000B34 2000                    czSpace                 db      " ",0                                           ;space delimiter
  6465 00000B36 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6465 00000B3F 65726174696E672053-
  6465 00000B48 797374656D20312E30-
  6465 00000B51 0D0A00             
  6466 00000B54 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6466 00000B5D 6F6D6D616E640D0A00 
  6467 00000B66 55534220436F6E7472-     czUSBController         db      "USB Controller",0                              ;USB controller string
  6467 00000B6F 6F6C6C657200       
  6468 00000B75 5669727475616C426F-     czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6468 00000B7E 782044657669636500 
  6469 00000B87 5669727475616C426F-     czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6469 00000B90 782047726170686963-
  6469 00000B99 732041646170746572-
  6469 00000BA2 00                 
  6470 00000BA3 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6470 00000BAC 69732061206C656170-
  6470 00000BB5 20796561722E0D0A00 
  6471 00000BBE 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6471 00000BC7 6973206E6F74206120-
  6471 00000BD0 6C6561702079656172-
  6471 00000BD9 2E0D0A00           
  6472 00000BDD 383233373141422F45-     cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6472 00000BE6 422050434920427573-
  6472 00000BEF 204D61737465722049-
  6472 00000BF8 444520436F6E74726F-
  6472 00000C01 6C6C657200         
  6473 00000C06 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  6474                                  %endif
  6475                                  %ifdef BUILDDISK
  6476                                  ;-----------------------------------------------------------------------------------------------------------------------
  6477                                  ;
  6478                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6479                                  ;
  6480                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6481                                  ;
  6482                                  ;-----------------------------------------------------------------------------------------------------------------------
  6483                                  section                 unused                                                  ;unused disk space
  6484                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6485                                  %endif
  6486                                  ;=======================================================================================================================
  6487                                  ;
  6488                                  ;       End of Program Code
  6489                                  ;
  6490                                  ;=======================================================================================================================
