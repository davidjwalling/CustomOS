     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.014
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to locate and report the ethernet adapter
     8                                  ;                       at start-up.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EHWF...         Hardware flags
   169                                  ;       EKEYF...        Keyboard status flags
   170                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   171                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   172                                  ;       EMEM...         Memory Management values
   173                                  ;       EMSG...         Message identifers
   174                                  ;
   175                                  ;=======================================================================================================================
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Hardware-Defined Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   184                                  ;
   185                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   186                                  ;       for CGA, EGA, VGA and compatible video modes.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   190                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   191                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   192                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ;
   195                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   196                                  ;
   197                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   198                                  ;
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   201                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   202                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   203                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   204                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8042 Keyboard Controller                                                EKEYB...
   208                                  ;
   209                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   210                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EKEYBPORTDATA           equ     060h                                            ;data port
   214                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   215                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   216                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   217                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   218                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   219                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   220                                                                                                                  ;---------------------------------------
   221                                                                                                                  ;       Keyboard Scan Codes
   222                                                                                                                  ;---------------------------------------
   223                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   224                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   225                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   226                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   227                                  EKEYBSLASH              equ     035h                                            ;slash
   228                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   229                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   230                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   231                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   232                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   233                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   234                                  EKEYBUP                 equ     080h                                            ;up
   235                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   236                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   237                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   238                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   239                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   240                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   241                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   242                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   243                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   244                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   245                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   246                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  ;
   249                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   250                                  ;
   251                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   252                                  ;       external devices and signals a hardware interrupt to the CPU.
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   256                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   257                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   258                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   259                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       8253 Programmable Interval Timer                                        EPIT...
   263                                  ;
   264                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   265                                  ;       approximately 18.2 times per second.
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 CPU Architecture                                                    ;EX86...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   301                                  ;
   302                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   303                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   304                                  ;
   305                                  ;       0.......        Segment is not present in memory (triggers int 11)
   306                                  ;       1.......        Segment is present in memory
   307                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   308                                  ;       ...0....        Segment is a system segment
   309                                  ;       ...00010                Local Descriptor Table
   310                                  ;       ...00101                Task Gate
   311                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   312                                  ;       ...01100                Call Gate (386)
   313                                  ;       ...01110                Interrupt Gate (386)
   314                                  ;       ...01111                Trap Gate (386)
   315                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   316                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   317                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   321                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   322                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   323                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   324                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   325                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   326                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   327                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       Firmware-Defined Values
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   336                                  ;
   337                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   338                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   342                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   343                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   344                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   345                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   346                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   347                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   348                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   349                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   350                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   351                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Standards-Based Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       ASCII                                                                   EASCII...
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   363                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   364                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   365                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   366                                  EASCIISPACE             equ     020h                                            ;space
   367                                  EASCIIDASH              equ     02Dh                                            ;dash or minus
   368                                  EASCIIPERIOD            equ     02Eh                                            ;period
   369                                  EASCIIUPPERA            equ     041h                                            ;'A'
   370                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   371                                  EASCIILOWERA            equ     061h                                            ;'a'
   372                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   373                                  EASCIITILDE             equ     07Eh                                            ;'~'
   374                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   375                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   376                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   377                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   378                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   379                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   380                                  EASCIICASE              equ     00100000b                                       ;case bit
   381                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  ;
   384                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   385                                  ;
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   388                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   389                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   390                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   391                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   392                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   393                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   394                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   395                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   396                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   397                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   398                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   399                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   400                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   401                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   402                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;
   405                                  ;       Operating System Values
   406                                  ;
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;
   410                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   411                                  ;
   412                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   413                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   414                                  ;
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   417                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   418                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   419                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   420                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   421                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   422                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  ;       Console Constants                                                       ECON...
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  ECONCOLS                equ     80                                              ;columns per row
   427                                  ECONROWS                equ     24                                              ;console rows
   428                                  ECONOIAROW              equ     24                                              ;operator information area row
   429                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   430                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   431                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   432                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   433                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   438                                  EGDTCGA                 equ     020h                                            ;cga video selector
   439                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   440                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   441                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   442                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   443                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   444                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ;       Hardware Flags                                                          EHWF...
   447                                  ;-----------------------------------------------------------------------------------------------------------------------
   448                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  ;       Keyboard Flags                                                          EKEYF...
   451                                  ;-----------------------------------------------------------------------------------------------------------------------
   452                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   453                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   454                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   455                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   456                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   457                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   458                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   459                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   460                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   461                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   462                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  ;       Kernel Constants                                                        EKRN...
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   467                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   468                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   469                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   470                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   471                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   476                                  ;-----------------------------------------------------------------------------------------------------------------------
   477                                  ;       Memory Management Constants                                             EMEM...
   478                                  ;-----------------------------------------------------------------------------------------------------------------------
   479                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   480                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   481                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   482                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;       Message Identifiers                                                     EMSG...
   485                                  ;-----------------------------------------------------------------------------------------------------------------------
   486                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   487                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   488                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   489                                  ;=======================================================================================================================
   490                                  ;
   491                                  ;       Structures
   492                                  ;
   493                                  ;=======================================================================================================================
   494                                  ;-----------------------------------------------------------------------------------------------------------------------
   495                                  ;
   496                                  ;       DATETIME
   497                                  ;
   498                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   499                                  ;
   500                                  ;-----------------------------------------------------------------------------------------------------------------------
   501                                  struc                   DATETIME
   502 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   503 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   504 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   505 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   506 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   507 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   508 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   509 00000007 <res 00000001>          .century                resb    1                                               ;century
   510                                  EDATETIMELEN            equ     ($-.second)
   511                                  endstruc
   512                                  ;-----------------------------------------------------------------------------------------------------------------------
   513                                  ;
   514                                  ;       ETHER
   515                                  ;
   516                                  ;       The ETHER structure defines an Ethernet adapter context.
   517                                  ;
   518                                  ;-----------------------------------------------------------------------------------------------------------------------
   519                                  struc                   ETHER
   520 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   521                                  .devicevendor           equ     $                                               ;device id | vendor id
   522 00000004 <res 00000002>          .vendor                 resw    1                                               ;vendor id
   523 00000006 <res 00000002>          .device                 resw    1                                               ;device id
   524                                  .statuscommand          equ     $                                               ;status reg | command reg
   525 00000008 <res 00000002>          .commandreg             resw    1                                               ;command register
   526 0000000A <res 00000002>          .statusreg              resw    1                                               ;status register
   527 0000000C <res 00000004>          .classrev               resd    1                                               ;class code | revision id
   528 00000010 <res 00000004>          .misc                   resd    1                                               ;BIST | Hdr | latency | cache
   529 00000014 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address (bar 0)
   530 00000018 <res 00000004>          .flash                  resd    1                                               ;flash base address (bar 1)
   531 0000001C <res 00000004>          .port                   resd    1                                               ;i/o port (base 2)
   532 00000020 <res 00000006>          .mac                    resb    6                                               ;mac address
   533 00000026 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   534                                  EETHERLEN               equ     ($-.selector)
   535                                  endstruc
   536                                  ;-----------------------------------------------------------------------------------------------------------------------
   537                                  ;
   538                                  ;       MEMBLOCK
   539                                  ;
   540                                  ;       The MEMBLOCK structure defines a memory block.
   541                                  ;
   542                                  ;-----------------------------------------------------------------------------------------------------------------------
   543                                  struc                   MEMBLOCK
   544 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   545 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   546 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   547 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   548 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   549 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   550 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   551 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   552                                  EMEMBLOCKLEN            equ     ($-.signature)
   553                                  endstruc
   554                                  ;-----------------------------------------------------------------------------------------------------------------------
   555                                  ;
   556                                  ;       MEMROOT
   557                                  ;
   558                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   559                                  ;
   560                                  ;-----------------------------------------------------------------------------------------------------------------------
   561                                  struc                   MEMROOT
   562 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   563 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   564 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   565 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   566 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   567 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   568                                  EMEMROOTLEN             equ     ($-.firstcontig)
   569                                  endstruc
   570                                  ;-----------------------------------------------------------------------------------------------------------------------
   571                                  ;
   572                                  ;       MQUEUE
   573                                  ;
   574                                  ;       The MQUEUE structure maps memory used for a message queue.
   575                                  ;
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  struc                   MQUEUE
   578 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   579 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   580 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   581                                  endstruc
   582                                  ;-----------------------------------------------------------------------------------------------------------------------
   583                                  ;
   584                                  ;       PCI
   585                                  ;
   586                                  ;       The PCI structure defines a PCI bus, device and function context.
   587                                  ;
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  struc                   PCI
   590 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   591 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   592 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   593 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   594 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   595                                  .configdata             equ     $                                               ;data read from port 0CFCh
   596 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   597 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   598 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   599 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   600                                  EPCILEN                 equ     ($-.configdata)
   601                                  endstruc
   602                                  ;-----------------------------------------------------------------------------------------------------------------------
   603                                  ;
   604                                  ;       OSDATA
   605                                  ;
   606                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   607                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   608                                  ;
   609                                  ;-----------------------------------------------------------------------------------------------------------------------
   610                                  struc                   OSDATA
   611 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   612 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   613 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   614 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   615 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   616 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   617 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   618 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   619 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   620 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   621 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   622 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   623 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   624 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   625 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   626 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   627 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   628 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   629 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   630 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   631 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   632 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   633 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   634 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   635 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   636 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   637 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   638 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   639 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   640 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   641 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   642 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   643 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   644 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   645 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   646 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   647 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   648 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   649 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   650 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   651 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   652 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   653 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   654 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   655 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   656 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   657 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   658 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   659 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   660 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   661 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   662 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   663 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   664 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   665 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   666 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   667 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   668 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   669 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   670 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   671 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   672 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   673 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   674 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   675 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   676 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   677 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   678 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   679 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   680 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   681 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   682 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   683 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   684 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   685 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   686 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   687 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   688 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   689 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   690 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   691 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   692 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   693 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   694 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   695 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   696 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   697 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   698 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   699 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   700 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   701 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   702 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   703 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   704 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   705 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   706 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   707 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   708 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   709 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   710 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   711 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   712                                  ;-----------------------------------------------------------------------------------------------------------------------
   713                                  ;
   714                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   715                                  ;
   716                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   717                                  ;
   718                                  ;-----------------------------------------------------------------------------------------------------------------------
   719                                  ECONDATA                equ     ($)
   720 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   721 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   722 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   723 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   724 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   725 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   726 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   727 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   728 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   729 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   730 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   731 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   732 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   733 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   734 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   735 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   736 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   737 00000820 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   738 00000821 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   739 00000871 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   740 000008C1 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   741 00000911 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   742 0000091C <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   743 00000927 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   744 00000932 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   745 0000093B <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   746 00000953 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   747 0000095B <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   748 00000967 <res 00000027>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   749                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   750                                  ;-----------------------------------------------------------------------------------------------------------------------
   751                                  ;
   752                                  ;       End of OS Variables
   753                                  ;
   754                                  ;-----------------------------------------------------------------------------------------------------------------------
   755                                  endstruc
   756                                  ;-----------------------------------------------------------------------------------------------------------------------
   757                                  ;
   758                                  ;       Macros
   759                                  ;
   760                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   761                                  ;
   762                                  ;-----------------------------------------------------------------------------------------------------------------------
   763                                  %macro                  mint    1
   764                                  _%1                     equ     ($-$$) / EX86DESCLEN
   765                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   766                                  %endmacro
   767                                  %macro                  mtrap   1
   768                                  _%1                     equ     ($-$$) / EX86DESCLEN
   769                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   770                                  %endmacro
   771                                  %macro                  menter  1
   772                                  ?%1                     equ     ($-$$)
   773                                  %endmacro
   774                                  %macro                  tsvce   1
   775                                  e%1                     equ     ($-tsvc)/4
   776                                                          dd      %1
   777                                  %endmacro
   778                                  %ifdef BUILDBOOT
   779                                  ;=======================================================================================================================
   780                                  ;
   781                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   782                                  ;
   783                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   784                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   785                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   786                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   787                                  ;
   788                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   789                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   790                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   791                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   792                                  ;       immediately followed by a disk parameter table.
   793                                  ;
   794                                  ;=======================================================================================================================
   795                                                          cpu     8086                                            ;assume minimal CPU
   796                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   797                                                          bits    16                                              ;16-bit code at power-up
   798                                  %ifdef BUILDPREP
   799 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   800                                  %else
   801                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   802                                  %endif
   803                                  ;-----------------------------------------------------------------------------------------------------------------------
   804                                  ;
   805                                  ;       Disk Parameter Table
   806                                  ;
   807                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   808                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   809                                  ;
   810                                  ;-----------------------------------------------------------------------------------------------------------------------
   811 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   812 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   813 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   814 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   815 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   816 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   817 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   818 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   819 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   820                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   821 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   822 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   823 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   824                                  ;
   825                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   826                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   827                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   828                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   829                                  ;       given several possible starting values for CS:IP.
   830                                  ;
   831                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   832 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   833                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   834 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   835 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   836 00000025 B104                                            mov     cl,4                                            ;shift count
   837 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   838 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   839 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   840                                  ;
   841                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   842                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   843                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   844                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   845                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   846                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   847                                  ;
   848 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   849 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   850 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   851 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   852 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   853                                  ;
   854                                  ;       Our boot addressability is now set up according to the following diagram.
   855                                  ;
   856                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   857                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   858                                  ;                               |  256 = 100h bytes                             |
   859                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   860                                  ;                               |  Boot Sector (vstart=0100h)                   |
   861                                  ;                               |  1 sector = 512 = 200h bytes                  |
   862                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   863                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   864                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   865                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   866                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   867                                  ;                               |  2 sectors = 1024 = 400h bytes
   868                                  ;                       009400  +-----------------------------------------------+ DS:1900
   869                                  ;
   870                                  ;       On entry, DL indicates the drive being booted from.
   871                                  ;
   872 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   873                                  ;
   874                                  ;       Compute directory i/o buffer address.
   875                                  ;
   876 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   877 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   878 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   879 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   880                                  ;
   881                                  ;       Compute segment where os.com will be loaded.
   882                                  ;
   883 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   884 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   885 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   886 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   887                                  ;
   888                                  ;       Set the video mode to 80 column, 25 row, text.
   889                                  ;
   890 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   891 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   892                                  ;
   893                                  ;       Write a message to the console so we know we have our addressability established.
   894                                  ;
   895 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   896 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   897                                  ;
   898                                  ;       Initialize the number of directory sectors to search.
   899                                  ;
   900 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   901 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   902                                  ;
   903                                  ;       Compute number of directory sectors and initialize overhead count.
   904                                  ;
   905 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   906 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   907 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   908 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   909                                  ;
   910                                  ;       Compute directory entries per sector.
   911                                  ;
   912 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   913 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   914 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   915                                  ;
   916                                  ;       Compute first logical directory sector and update overhead count.
   917                                  ;
   918 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   919 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   920 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   921 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   922 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   923 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   924                                  ;
   925                                  ;       Read directory sector.
   926                                  ;
   927 0000008E B001                    .30                     mov     al,1                                            ;sector count
   928 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   929 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   930 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   931                                  ;
   932                                  ;       Setup variables to search this directory sector.
   933                                  ;
   934 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   935 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   936 000000A1 7603                                            jna     .40                                             ;no, continue
   937 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   938 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   939 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   940 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   941                                  ;
   942                                  ;       Loop through directory sectors searching for kernel program.
   943                                  ;
   944 000000B1 56                      .50                     push    si                                              ;save kernel name address
   945 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   946 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   947 000000B6 FC                                              cld                                                     ;forward strings
   948 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   949 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   950 000000BA 5E                                              pop     si                                              ;restore kernel name address
   951 000000BB 7418                                            je      .60                                             ;exit loop if found
   952 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   953 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   954 000000C2 75ED                                            jnz     .50                                             ;next entry
   955                                  ;
   956                                  ;       Repeat search if we are not at the end of the directory.
   957                                  ;
   958 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   959 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   960 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   961 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   962 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   963                                  ;
   964                                  ;       If we find the kernel program in the directory, read the FAT.
   965                                  ;
   966 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   967 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   968 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   969 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   970 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   971 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   972                                  ;
   973                                  ;       Get the starting cluster of the kernel program and target address.
   974                                  ;
   975 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   976 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   977                                  ;
   978                                  ;       Read each program cluster into RAM.
   979                                  ;
   980 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   981 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   982 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   983 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   984 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   985 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   986 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   987 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   988 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   989                                  ;
   990                                  ;       Update buffer pointer for next cluster.
   991                                  ;
   992 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   993 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   994 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   995 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   996 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   997                                  ;
   998                                  ;       Compute next cluster number.
   999                                  ;
  1000 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
  1001 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
  1002 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
  1003 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
  1004 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
  1005 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
  1006 00000120 83E701                                          and     di,1                                            ;get low bit
  1007 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
  1008 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
  1009 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
  1010                                  ;
  1011                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1012                                  ;
  1013 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
  1014 0000012E 7404                                            jz      .80                                             ;no, skip ahead
  1015 00000130 B104                                            mov     cl,4                                            ;shift count
  1016 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
  1017 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1018 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1019 0000013A 75B2                                            jne     .70                                             ;no, continue
  1020                                  ;
  1021                                  ;       Transfer control to the operating system program.
  1022                                  ;
  1023 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1024 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1025 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1026                                  ;
  1027                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1028                                  ;
  1029 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1030 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1031 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1032 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1033 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1034 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1035 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1036 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1037 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1038 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1039                                  ;
  1040                                  ;       Try maxtries times to read sector.
  1041                                  ;
  1042 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1043 00000160 53                      .10                     push    bx                                              ;save buffer address
  1044 00000161 51                                              push    cx                                              ;save retry count
  1045 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1046 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1047 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1048 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1049 0000016F 59                                              pop     cx                                              ;restore retry count
  1050 00000170 5B                                              pop     bx                                              ;restore buffer address
  1051 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1052 00000173 E2EB                                            loop    .10                                             ;retry
  1053                                  ;
  1054                                  ;       Handle disk error: convert to ASCII and store in error string.
  1055                                  ;
  1056 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1057 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1058 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1059 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1060 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1061 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1062 00000183 7203                                            jb      .20                                             ;continue if numeral
  1063 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1064 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1065 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1066 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1067 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1068 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1069 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1070                                  ;
  1071                                  ;       Wait for a key press.
  1072                                  ;
  1073 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1074 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1075 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1076 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1077 0000019F F4                                              hlt                                                     ;wait for interrupt
  1078 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1079                                  ;
  1080                                  ;       Reset the system.
  1081                                  ;
  1082 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1083 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1084 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1085 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1086 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1087                                  ;
  1088                                  ;       Display text message.
  1089                                  ;
  1090 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1091 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1092 000001AC 84C0                                            test    al,al                                           ;end of string?
  1093 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1094 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1095 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1096 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1097 000001B6 C3                      BootReturn              ret                                                     ;return
  1098                                  ;-----------------------------------------------------------------------------------------------------------------------
  1099                                  ;
  1100                                  ;       Constants
  1101                                  ;
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103 000001B7 90                                              align   2
  1104 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1105 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1105 000001C3 4F4D               
  1106 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1106 000001CE 530D0A00           
  1107 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1107 000001DB 7220               
  1108 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1109 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1109 000001E9 6700               
  1110                                  ;-----------------------------------------------------------------------------------------------------------------------
  1111                                  ;
  1112                                  ;       Work Areas
  1113                                  ;
  1114                                  ;-----------------------------------------------------------------------------------------------------------------------
  1115 000001EB 90                                              align   2
  1116 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1117 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1118 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1119 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1120 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1121                                  wwReadCountCommand      equ     $                                               ;read count and command
  1122 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1123 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1124                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1125 000001F8 00                      wbDrive                 db      0                                               ;drive
  1126 000001F9 00                      wbHead                  db      0                                               ;head
  1127                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1128 000001FA 00                                              db      0                                               ;sector
  1129 000001FB 00                      wbTrack                 db      0                                               ;track
  1130 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1131 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1132                                  %endif
  1133                                  %ifdef BUILDPREP
  1134                                  ;=======================================================================================================================
  1135                                  ;
  1136                                  ;       Diskette Preparation Code
  1137                                  ;
  1138                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1139                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1140                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1141                                  ;
  1142                                  ;=======================================================================================================================
  1143                                  ;
  1144                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1145                                  ;
  1146 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1147 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1148                                  ;
  1149                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1150                                  ;
  1151 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1152 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1153 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1154 0000020C FB                                              sti                                                     ;enable interrupts
  1155 0000020D F4                                              hlt                                                     ;wait for interrupt
  1156 0000020E EBF6                                            jmp     .10                                             ;repeat
  1157 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1158 00000212 7407                                            je      .30                                             ;yes, branch
  1159 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1160 00000216 75EE                                            jne     .10                                             ;no, repeat
  1161 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
  1162                                  ;
  1163                                  ;       Display writing-sector message and patch the JMP instruction.
  1164                                  ;
  1165 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1166 0000021E E889FF                                          call    BootPrint                                       ;display message
  1167 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1168 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1169 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1170                                  ;
  1171                                  ;       Try to read the boot sector.
  1172                                  ;
  1173 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1174 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1175 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1176 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1177 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1178 00000236 B001                                            mov     al,1                                            ;one sector
  1179 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1180 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1181 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1182 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1183 0000023F E2EB                                            loop    .40                                             ;try again
  1184 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1185 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1186                                  ;
  1187                                  ;       Copy diskette parms from input buffer to output buffer.
  1188                                  ;
  1189 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1190 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1191 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1192 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1193 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1194 00000255 FC                                              cld                                                     ;forward string copies
  1195 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1196                                  ;
  1197                                  ;       Try to write boot sector to diskette.
  1198                                  ;
  1199 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1200 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1201 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1202 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1203 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1204 00000265 B001                                            mov     al,1                                            ;one sector
  1205 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1206 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1207 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1208 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1209 0000026E E2EB                                            loop    .60                                             ;try again
  1210 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1211                                  ;
  1212                                  ;       Convert the error code to ASCII and display the error message.
  1213                                  ;
  1214 00000273 50                      .70                     push    ax                                              ;save error code
  1215 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1216 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1217 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1218 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1219 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1220 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1221 00000282 7203                                            jb      .80                                             ;yes, continue
  1222 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1223 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1224 00000289 7202                                            jb      .90                                             ;yes, continue
  1225 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1226 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1227 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1228 00000293 58                                              pop     ax                                              ;restore error code
  1229                                  ;
  1230                                  ;       Display the completion message.
  1231                                  ;
  1232 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1233 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1234 00000299 3C00                                            cmp     al,0                                            ;success?
  1235 0000029B 7426                                            je      .110                                            ;yes, continue
  1236 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1237 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1238 000002A2 741F                                            je      .110                                            ;yes, continue
  1239 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1240 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1241 000002A9 7418                                            je      .110                                            ;yes, continue
  1242 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1243 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1244 000002B0 7411                                            je      .110                                            ;yes, continue
  1245 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1246 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1247 000002B7 740A                                            je      .110                                            ;yes, continue
  1248 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1249 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1250 000002BE 7403                                            je      .110                                            ;yes, continue
  1251 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1252 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1253 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1254 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1255 000002CB C3                                              ret                                                     ;return (should not execute)
  1256                                  ;-----------------------------------------------------------------------------------------------------------------------
  1257                                  ;
  1258                                  ;       Diskette Preparation Messages
  1259                                  ;
  1260                                  ;-----------------------------------------------------------------------------------------------------------------------
  1261 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1261 000002D5 5320426F6F742D4469-
  1261 000002DE 736B65747465205072-
  1261 000002E7 657061726174696F6E-
  1261 000002F0 2050726F6772616D   
  1262 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1262 00000301 687420284329203230-
  1262 0000030A 31302D323031382044-
  1262 00000313 61766964204A2E2057-
  1262 0000031C 616C6C696E672E2041-
  1262 00000325 6C6C20726967687473-
  1262 0000032E 207265736572766564-
  1262 00000337 2E                 
  1263 00000338 0D0A                                            db      13,10
  1264 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1264 00000343 6F6772616D206F7665-
  1264 0000034C 727772697465732074-
  1264 00000355 686520626F6F742073-
  1264 0000035E 6563746F72206F6620-
  1264 00000367 61206469736B657474-
  1264 00000370 652077697468207374-
  1264 00000379 617274757020636F64-
  1264 00000382 652074686174       
  1265 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1265 00000391 616420746865206F70-
  1265 0000039A 65726174696E672073-
  1265 000003A3 797374656D20696E74-
  1265 000003AC 6F206D656D6F727920-
  1265 000003B5 7768656E2074686520-
  1265 000003BE 636F6D707574657220-
  1265 000003C7 697320726573746172-
  1265 000003D0 7465642E           
  1266 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1266 000003DD 6565642C20706C6163-
  1266 000003E6 65206120666F726D61-
  1266 000003EF 74746564206469736B-
  1266 000003F8 6574746520696E746F-
  1266 00000401 20647269766520413A-
  1266 0000040A 20616E642070726573-
  1266 00000413 732074686520456E74-
  1266 0000041C 6572206B65792E     
  1267 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1267 0000042C 20746869732070726F-
  1267 00000435 6772616D2077697468-
  1267 0000043E 6F7574207072657061-
  1267 00000447 72696E672061206469-
  1267 00000450 736B657474652C2070-
  1267 00000459 726573732074686520-
  1267 00000462 457363617065206B65-
  1267 0000046B 792E               
  1268 0000046D 0D0A00                                          db      13,10,0
  1269 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1269 00000479 2074686520626F6F74-
  1269 00000482 20736563746F722074-
  1269 0000048B 6F2074686520646973-
  1269 00000494 6B65747465202E2E2E 
  1270 0000049D 0D0A00                                          db      13,10,0
  1271 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1271 000004A9 6F722D636F6465202E-
  1271 000004B2 2E2077617320726574-
  1271 000004BB 75726E65642066726F-
  1271 000004C4 6D207468652042494F-
  1271 000004CD 53207768696C652072-
  1271 000004D6 656164696E67206672-
  1271 000004DF 6F6D20746865206469-
  1271 000004E8 736B2E             
  1272 000004EB 0D0A00                                          db      13,10,0
  1273 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1273 000004F7 6F722D636F6465202E-
  1273 00000500 2E2077617320726574-
  1273 00000509 75726E65642066726F-
  1273 00000512 6D207468652042494F-
  1273 0000051B 53207768696C652077-
  1273 00000524 726974696E6720746F-
  1273 0000052D 20746865206469736B-
  1273 00000536 2E                 
  1274 00000537 0D0A00                                          db      13,10,0
  1275 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1275 00000543 742D736563746F7220-
  1275 0000054C 776173207772697474-
  1275 00000555 656E20746F20746865-
  1275 0000055E 206469736B65747465-
  1275 00000567 2E204265666F726520-
  1275 00000570 626F6F74696E672079-
  1275 00000579 6F757220636F6D7075-
  1275 00000582 7465722077697468   
  1276 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1276 00000593 736B657474652C206D-
  1276 0000059C 616B65207375726520-
  1276 000005A5 746861742074686520-
  1276 000005AE 66696C65204F532E43-
  1276 000005B7 4F4D20697320636F70-
  1276 000005C0 696564206F6E746F20-
  1276 000005C9 746865206469736B65-
  1276 000005D2 7474652E           
  1277 000005D6 0D0A00                                          db      13,10,0
  1278 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1278 000005E2 76616C696420446973-
  1278 000005EB 6B20506172616D6574-
  1278 000005F4 6572               
  1279 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1279 000005FF 20616E20696E746572-
  1279 00000608 6E616C206572726F72-
  1279 00000611 206361757365642062-
  1279 0000061A 7920616E20696E7661-
  1279 00000623 6C69642076616C7565-
  1279 0000062C 206265696E67207061-
  1279 00000635 7373656420746F2061-
  1279 0000063E 2073797374656D     
  1280 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1280 0000064E 6E2E20546865204F53-
  1280 00000657 424F4F542E434F4D20-
  1280 00000660 66696C65206D617920-
  1280 00000669 626520636F72727570-
  1280 00000672 742E20436F7079206F-
  1280 0000067B 7220646F776E6C6F61-
  1280 00000684 64207468652066696C-
  1280 0000068D 6520616761696E     
  1281 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1281 0000069D 72792E             
  1282 000006A0 0D0A00                                          db      13,10,0
  1283 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1283 000006AC 6472657373204D6172-
  1283 000006B5 6B204E6F7420466F75-
  1283 000006BE 6E64               
  1284 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1284 000006C9 726F7220696E646963-
  1284 000006D2 617465732061207068-
  1284 000006DB 79736963616C207072-
  1284 000006E4 6F626C656D20776974-
  1284 000006ED 682074686520666C6F-
  1284 000006F6 707079206469736B65-
  1284 000006FF 7474652E20506C6561-
  1284 00000708 7365207265747279   
  1285 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1285 00000719 6E6F74686572206469-
  1285 00000722 736B657474652E     
  1286 00000729 0D0A00                                          db      13,10,0
  1287 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1287 00000735 6F7465637465642044-
  1287 0000073E 69736B             
  1288 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1288 0000074A 726F72206973207573-
  1288 00000753 75616C6C7920636175-
  1288 0000075C 736564206279206174-
  1288 00000765 74656D7074696E6720-
  1288 0000076E 746F20777269746520-
  1288 00000777 746F20612077726974-
  1288 00000780 652D70726F74656374-
  1288 00000789 6564206469736B2E   
  1289 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1289 0000079A 686520277772697465-
  1289 000007A3 2D70726F7465637427-
  1289 000007AC 2073657474696E6720-
  1289 000007B5 6F6E20746865206469-
  1289 000007BE 736B206F7220726574-
  1289 000007C7 7279207573696E6720-
  1289 000007D0 7573696E6720616E6F-
  1289 000007D9 74686572206469736B-
  1289 000007E2 2E                 
  1290 000007E3 0D0A00                                          db      13,10,0
  1291 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1291 000007EF 736B65747465205265-
  1291 000007F8 6D6F766564         
  1292 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1292 00000806 726F72206D61792069-
  1292 0000080F 6E6469636174652074-
  1292 00000818 686174207468652066-
  1292 00000821 6C6F70707920646973-
  1292 0000082A 6B6574746520686173-
  1292 00000833 206265656E2072656D-
  1292 0000083C 6F7665642066726F6D-
  1292 00000845 20746865           
  1293 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1293 00000852 652064726976652E20-
  1293 0000085B 4F6E20736F6D652073-
  1293 00000864 797374656D732C2074-
  1293 0000086D 68697320636F646520-
  1293 00000876 6D617920616C736F20-
  1293 0000087F 6F6363757220696620-
  1293 00000888 746865206469736B65-
  1293 00000891 747465206973       
  1294 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1294 000008A0 70726F746563746564-
  1294 000008A9 2E2720506C65617365-
  1294 000008B2 207665726966792074-
  1294 000008BB 686174207468652064-
  1294 000008C4 69736B657474652069-
  1294 000008CD 73206E6F7420777269-
  1294 000008D6 74652D70726F746563-
  1294 000008DF 74656420616E64     
  1295 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1295 000008EF 65726C7920696E7365-
  1295 000008F8 7274656420696E2074-
  1295 00000901 6865206469736B6574-
  1295 0000090A 74652064726976652E 
  1296 00000913 0D0A00                                          db      13,10,0
  1297 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1297 0000091F 6976652054696D6564-
  1297 00000928 204F7574           
  1298 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1298 00000935 726F7220757375616C-
  1298 0000093E 6C7920696E64696361-
  1298 00000947 746573207468617420-
  1298 00000950 6E6F206469736B6574-
  1298 00000959 746520697320696E20-
  1298 00000962 746865206469736B65-
  1298 0000096B 747465206472697665-
  1298 00000974 2E20506C65617365   
  1299 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1299 00000985 726520746861742074-
  1299 0000098E 6865206469736B6574-
  1299 00000997 74652069732070726F-
  1299 000009A0 7065726C7920736561-
  1299 000009A9 74656420696E207468-
  1299 000009B2 652064726976652061-
  1299 000009BB 6E642072657472792E 
  1300 000009C4 0D0A00                                          db      13,10,0
  1301 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1301 000009D0 6B6E6F776E20457272-
  1301 000009D9 6F72               
  1302 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1302 000009E4 6F722D636F64652072-
  1302 000009ED 657475726E65642062-
  1302 000009F6 79207468652042494F-
  1302 000009FF 53206973206E6F7420-
  1302 00000A08 61207265636F676E69-
  1302 00000A11 7A6564206572726F72-
  1302 00000A1A 2E20506C6561736520-
  1302 00000A23 636F6E73756C74     
  1303 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1303 00000A33 6D7075746572277320-
  1303 00000A3C 746563686E6963616C-
  1303 00000A45 207265666572656E63-
  1303 00000A4E 6520666F7220612064-
  1303 00000A57 65736372697074696F-
  1303 00000A60 6E206F662074686973-
  1303 00000A69 206572726F7220636F-
  1303 00000A72 64652E             
  1304 00000A75 0D0A00                                          db      13,10,0
  1305                                  wcPrepInBuf             equ     $
  1306                                  %endif
  1307                                  %ifdef BUILDDISK
  1308                                  ;=======================================================================================================================
  1309                                  ;
  1310                                  ;       File Allocation Tables
  1311                                  ;
  1312                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1313                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1314                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1315                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1316                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1317                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1318                                  ;       the last cluster in the chain.
  1319                                  ;
  1320                                  ;       Every three bytes encode two FAT entries as follows:
  1321                                  ;
  1322                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1323                                  ;
  1324                                  ;=======================================================================================================================
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326                                  ;
  1327                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1328                                  ;
  1329                                  ;-----------------------------------------------------------------------------------------------------------------------
  1330                                  section                 fat1                                                    ;first copy of FAT
  1331                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1332                                                          db      005h,060h,000h, 007h,080h,000h
  1333                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1334                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1335                                                          db      011h,020h,001h, 013h,040h,001h
  1336                                                          db      015h,060h,001h, 017h,080h,001h
  1337                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1338                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1339                                                          db      021h,020h,002h, 023h,040h,002h
  1340                                                          db      025h,060h,002h, 027h,080h,002h
  1341                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1342                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1343                                  ;-----------------------------------------------------------------------------------------------------------------------
  1344                                  ;
  1345                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1346                                  ;
  1347                                  ;-----------------------------------------------------------------------------------------------------------------------
  1348                                  section                 fat2                                                    ;second copy of FAT
  1349                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1350                                                          db      005h,060h,000h, 007h,080h,000h
  1351                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1352                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1353                                                          db      011h,020h,001h, 013h,040h,001h
  1354                                                          db      015h,060h,001h, 017h,080h,001h
  1355                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1356                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1357                                                          db      021h,020h,002h, 023h,040h,002h
  1358                                                          db      025h,060h,002h, 027h,080h,002h
  1359                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1360                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1361                                  ;-----------------------------------------------------------------------------------------------------------------------
  1362                                  ;
  1363                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1364                                  ;
  1365                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1366                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1367                                  ;       copy.
  1368                                  ;
  1369                                  ;-----------------------------------------------------------------------------------------------------------------------
  1370                                  section                 dir                                                     ;diskette directory
  1371                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1372                                                          db      020h                                            ;attribute (archive bit set)
  1373                                                          times   10 db 0                                         ;unused
  1374                                                          dw      0h                                              ;time
  1375                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1376                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1377                                                          dw      2                                               ;first cluster
  1378                                                          dd      05400h                                          ;file size
  1379                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1380                                  %endif
  1381                                  %ifdef BUILDCOM
  1382                                  ;=======================================================================================================================
  1383                                  ;
  1384                                  ;       OS.COM
  1385                                  ;
  1386                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1387                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1388                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1389                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1390                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1391                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1392                                  ;
  1393                                  ;       Our loader addressability is set up according to the following diagram.
  1394                                  ;
  1395                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1396                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1397                                  ;                               |  256 = 100h bytes                             |
  1398                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1399                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1400                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1401                                  ;                       007e00  +-----------------------------------------------+
  1402                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1403                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1404                                  ;                               |                                               |
  1405                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1406                                  ;                               |                                               |
  1407                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1408                                  ;                               |  Loader Code                                  |
  1409                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1410                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1411                                  ;
  1412                                  ;=======================================================================================================================
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414                                  ;
  1415                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1416                                  ;
  1417                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1418                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1419                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1420                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1421                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1422                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1423                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1424                                  ;       registers.
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                                          cpu     8086                                            ;assume minimal CPU
  1428                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1429                                                          bits    16                                              ;this is 16-bit code
  1430                                  Loader                  push    cs                                              ;use the code segment
  1431                                                          pop     ds                                              ;...as our data segment
  1432                                                          push    cs                                              ;use the code segment
  1433                                                          pop     es                                              ;...as our extra segment
  1434                                  ;
  1435                                  ;       Write a message to the console so we know we have our addressability established.
  1436                                  ;
  1437                                                          mov     si,czStartingMsg                                ;starting message
  1438                                                          call    PutTTYString                                    ;display loader message
  1439                                  ;
  1440                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1441                                  ;
  1442                                                          call    GetCPUType                                      ;AL = cpu type
  1443                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1444                                                          cmp     al,3                                            ;80386+?
  1445                                                          jb      LoaderExit                                      ;no, exit with error message
  1446                                                          cpu     386                                             ;allow 80386 instructions
  1447                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1448                                                          call    PutTTYString                                    ;display message
  1449                                  ;
  1450                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1451                                  ;
  1452                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1453                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1454                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1455                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1456                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1457                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1458                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1459                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1460                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1461                                                          call    PutTTYString                                    ;display message
  1462                                  ;
  1463                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1464                                  ;
  1465                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1466                                                          pop     es                                              ;... as target segment
  1467                                                          xor     di,di                                           ;ES:DI = target address
  1468                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1469                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1470                                                          cld                                                     ;forward strings
  1471                                                          rep     movsb                                           ;copy kernel image
  1472                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1473                                                          call    PutTTYString                                    ;display message
  1474                                  ;
  1475                                  ;       Switch to protected mode.
  1476                                  ;
  1477                                                          xor     si,si                                           ;ES:SI = gdt addr
  1478                                                          mov     ss,si                                           ;protected mode ss
  1479                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1480                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1481                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1482                                                          mov     dx,001Fh                                        ;outer delay loop count
  1483                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1484                                                          loop    $                                               ;wait out pending interrupts
  1485                                                          dec     dx                                              ;restore outer loop count
  1486                                                          jnz     .10                                             ;continue outer loop
  1487                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1488                                  ;
  1489                                  ;       Enable hardware and maskable interrupts.
  1490                                  ;
  1491                                                          xor     al,al                                           ;enable all registers code
  1492                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1493                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1494                                                          sti                                                     ;enable maskable interrupts
  1495                                  ;
  1496                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1497                                  ;
  1498                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1499                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1500                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1501                                  ;-----------------------------------------------------------------------------------------------------------------------
  1502                                  ;
  1503                                  ;       Routine:        LoaderExit
  1504                                  ;
  1505                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1506                                  ;
  1507                                  ;       In:             DS:SI   string address
  1508                                  ;
  1509                                  ;-----------------------------------------------------------------------------------------------------------------------
  1510                                  LoaderExit              call    PutTTYString                                    ;display error message
  1511                                  ;
  1512                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1513                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1514                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1515                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1516                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1517                                  ;
  1518                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1519                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1520                                                          jnz     .40                                             ;exit if key pressed
  1521                                                          sti                                                     ;enable maskable interrupts
  1522                                                          hlt                                                     ;wait for interrupt
  1523                                                          jmp     .30                                             ;repeat until keypress
  1524                                  ;
  1525                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1526                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1527                                  ;       HLT until the system resets.
  1528                                  ;
  1529                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1530                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1531                                  .50                     sti                                                     ;enable maskable interrupts
  1532                                                          hlt                                                     ;stop until reset, int, nmi
  1533                                                          jmp     .50                                             ;loop until restart kicks in
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  ;
  1536                                  ;       Routine:        GetCPUType
  1537                                  ;
  1538                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1539                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1540                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1541                                  ;
  1542                                  ;       Out:            AX      0 = 808x, v20, etc.
  1543                                  ;                               1 = 80186
  1544                                  ;                               2 = 80286
  1545                                  ;                               3 = 80386
  1546                                  ;
  1547                                  ;-----------------------------------------------------------------------------------------------------------------------
  1548                                  GetCPUType              mov     al,1                                            ;AL = 1
  1549                                                          mov     cl,32                                           ;shift count
  1550                                                          shr     al,cl                                           ;try a 32-bit shift
  1551                                                          or      al,al                                           ;did the shift happen?
  1552                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1553                                                          cpu     186
  1554                                                          push    sp                                              ;save stack pointer
  1555                                                          pop     cx                                              ;...into cx
  1556                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1557                                                          jne     .10                                             ;yes, cpu is 80186
  1558                                                          cpu     286
  1559                                                          inc     ax                                              ;AX = 2
  1560                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1561                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1562                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1563                                                          jz      .10                                             ;yes, cpu is 80286
  1564                                                          inc     ax                                              ;AX = 3
  1565                                  .10                     ret                                                     ;return
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                  ;
  1568                                  ;       Routine:        PutTTYString
  1569                                  ;
  1570                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1571                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1572                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1573                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1574                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1575                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1576                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1577                                  ;                       to LODSB is not needed.
  1578                                  ;
  1579                                  ;       In:             DS:SI   address of string
  1580                                  ;
  1581                                  ;       Out:            DF      0
  1582                                  ;                       ZF      1
  1583                                  ;                       AL      0
  1584                                  ;
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586                                  PutTTYString            cld                                                     ;forward strings
  1587                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1588                                                          test    al,al                                           ;end of string?
  1589                                                          jz      .20                                             ;... yes, exit our loop
  1590                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1591                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1592                                                          jmp     .10                                             ;repeat until done
  1593                                  .20                     ret                                                     ;return
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                  ;
  1596                                  ;       Loader Data
  1597                                  ;
  1598                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1599                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1600                                  ;
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                                          align   2
  1603                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1604                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1605                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1606                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1607                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1608                                                          db      "Please press any key to restart the computer.",13,10,0
  1609                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1610                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1611                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1612                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1613                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1614                                  ;=======================================================================================================================
  1615                                  ;
  1616                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1617                                  ;
  1618                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1619                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1620                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1621                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1622                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1623                                  ;
  1624                                  ;=======================================================================================================================
  1625                                  ;=======================================================================================================================
  1626                                  ;
  1627                                  ;       Kernel Tables
  1628                                  ;
  1629                                  ;=======================================================================================================================
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                  ;
  1632                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1633                                  ;
  1634                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1635                                  ;       first descriptor must be all nulls.
  1636                                  ;
  1637                                  ;       6   5         4         3         2         1         0
  1638                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1639                                  ;       ----------------------------------------------------------------
  1640                                  ;       h......hffffmmmma......ab......................bn..............n
  1641                                  ;
  1642                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1643                                  ;               ffff                                                            flags
  1644                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1645                                  ;                       a......a                                                access
  1646                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1647                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1648                                  ;
  1649                                  ;       00000000                                                                all areas have base addresses below 2^24
  1650                                  ;               0...                                                            single-byte size granularity
  1651                                  ;               1...                                                            4-kilobyte size granularity
  1652                                  ;               .0..                                                            16-bit default for code segments
  1653                                  ;               .1..                                                            32-bit default for code segments
  1654                                  ;               ..0.                                                            intel-reserved; should be zero
  1655                                  ;               ...0                                                            available for operating system use
  1656                                  ;                   0000                                                        segment is less than 2^16 in size
  1657                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1658                                  ;                       1.......                                                segment is present in memory
  1659                                  ;                       .00.....                                                segment is of privilege level 0
  1660                                  ;                       ...0....                                                segment is of system or gate type
  1661                                  ;                       ...00010                                                local decriptor table (LDT)
  1662                                  ;                       ...01001                                                task state segment (TSS) available
  1663                                  ;                       ...01011                                                task state segment (TSS) busy
  1664                                  ;                       ...10...                                                data segment
  1665                                  ;                       ...10011                                                writable data (accessed)
  1666                                  ;                       ...11...                                                code segment
  1667                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1668                                  ;
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  section                 gdt                                                     ;global descriptor table
  1671                                                          dq      0000000000000000h                               ;00 required null selector
  1672                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1673                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1674                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1675                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1676                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1677                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1678                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1679                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1680                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1681                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1682                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1683                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1684                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1685                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1689                                  ;
  1690                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1691                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1692                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1693                                  ;
  1694                                  ;       6   5         4         3         2         1         0
  1695                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1696                                  ;       ----------------------------------------------------------------
  1697                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1698                                  ;
  1699                                  ;       h...h   high-order offset (bits 16-31)
  1700                                  ;       P       present (0=unused interrupt)
  1701                                  ;       zz      descriptor privilege level
  1702                                  ;       S       storage segment (must be zero for IDT)
  1703                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1704                                  ;       S...S   handling code selector in GDT
  1705                                  ;       l...l   lo-order offset (bits 0-15)
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  section                 idt                                                     ;interrupt descriptor table
  1709                                                          mint    dividebyzero                                    ;00 divide by zero
  1710                                                          mint    singlestep                                      ;01 single step
  1711                                                          mint    nmi                                             ;02 non-maskable
  1712                                                          mint    break                                           ;03 break
  1713                                                          mint    into                                            ;04 into
  1714                                                          mint    bounds                                          ;05 bounds
  1715                                                          mint    badopcode                                       ;06 bad op code
  1716                                                          mint    nocoproc                                        ;07 no coprocessor
  1717                                                          mint    doublefault                                     ;08 double-fault
  1718                                                          mint    operand                                         ;09 operand
  1719                                                          mint    badtss                                          ;0a bad TSS
  1720                                                          mint    notpresent                                      ;0b not-present
  1721                                                          mint    stacklimit                                      ;0c stack limit
  1722                                                          mint    protection                                      ;0d general protection fault
  1723                                                          mint    int14                                           ;0e (reserved)
  1724                                                          mint    int15                                           ;0f (reserved)
  1725                                                          mint    coproccalc                                      ;10 (reserved)
  1726                                                          mint    int17                                           ;11 (reserved)
  1727                                                          mint    int18                                           ;12 (reserved)
  1728                                                          mint    int19                                           ;13 (reserved)
  1729                                                          mint    int20                                           ;14 (reserved)
  1730                                                          mint    int21                                           ;15 (reserved)
  1731                                                          mint    int22                                           ;16 (reserved)
  1732                                                          mint    int23                                           ;17 (reserved)
  1733                                                          mint    int24                                           ;18 (reserved)
  1734                                                          mint    int25                                           ;19 (reserved)
  1735                                                          mint    int26                                           ;1a (reserved)
  1736                                                          mint    int27                                           ;1b (reserved)
  1737                                                          mint    int28                                           ;1c (reserved)
  1738                                                          mint    int29                                           ;1d (reserved)
  1739                                                          mint    int30                                           ;1e (reserved)
  1740                                                          mint    int31                                           ;1f (reserved)
  1741                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1742                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1743                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1744                                                          mtrap   com2                                            ;23 IRQ3 com2
  1745                                                          mtrap   com1                                            ;24 IRQ4 com1
  1746                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1747                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1748                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1749                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1750                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1751                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1752                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1753                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1754                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1755                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1756                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1757                                                          mtrap   svc                                             ;30 OS services
  1758                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1759                                  ;=======================================================================================================================
  1760                                  ;
  1761                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1762                                  ;
  1763                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1764                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1765                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1766                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1767                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1768                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1769                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1770                                  ;
  1771                                  ;=======================================================================================================================
  1772                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1773                                                          cpu     386                                             ;allow 80386 instructions
  1774                                                          bits    32                                              ;this is 32-bit code
  1775                                  ;=======================================================================================================================
  1776                                  ;
  1777                                  ;       CPU Interrupt Handlers
  1778                                  ;
  1779                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1780                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1781                                  ;
  1782                                  ;=======================================================================================================================
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT0    Divide By Zero
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  dividebyzero                                    ;divide by zero
  1789                                                          push    0                                               ;store interrupt nbr
  1790                                                          push    czIntDivideByZero                               ;store message offset
  1791                                                          jmp     ReportInterrupt                                 ;report interrupt
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                  ;
  1794                                  ;       INT1    Single Step
  1795                                  ;
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                                          menter  singlestep                                      ;single step
  1798                                                          push    1                                               ;store interrupt nbr
  1799                                                          push    czIntSingleStep                                 ;store message offset
  1800                                                          jmp     ReportInterrupt                                 ;report interrupt
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                  ;
  1803                                  ;       INT2    Non-Maskable Interrupt
  1804                                  ;
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                                          menter  nmi                                             ;non-maskable
  1807                                                          push    2                                               ;store interrupt nbr
  1808                                                          push    czIntNonMaskable                                ;store message offset
  1809                                                          jmp     ReportInterrupt                                 ;report interrupt
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  ;
  1812                                  ;       INT3    Break
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                                          menter  break                                           ;break
  1816                                                          push    3                                               ;store interrupt nbr
  1817                                                          push    czIntBreak                                      ;store message offset
  1818                                                          jmp     ReportInterrupt                                 ;report interrupt
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;       INT4    Into
  1822                                  ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                                          menter  into                                            ;into
  1825                                                          push    4                                               ;store interrupt nbr
  1826                                                          push    czIntInto                                       ;store message offset
  1827                                                          jmp     ReportInterrupt                                 ;report interrupt
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;       INT5    Bounds
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                                          menter  bounds                                          ;bounds
  1834                                                          push    5                                               ;store interrupt nbr
  1835                                                          push    czIntBounds                                     ;store message offset
  1836                                                          jmp     ReportInterrupt                                 ;report interrupt
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                  ;
  1839                                  ;       INT6    Bad Operation Code
  1840                                  ;
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                                          menter  badopcode                                       ;bad opcode interrupt
  1843                                                          push    6                                               ;store interrupt nbr
  1844                                                          push    czIntBadOpCode                                  ;store message offset
  1845                                                          jmp     ReportInterrupt                                 ;report interrupt
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  ;
  1848                                  ;       INT7    No Coprocessor
  1849                                  ;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1852                                                          push    7                                               ;store interrupt nbr
  1853                                                          push    czIntNoCoprocessor                              ;store message offset
  1854                                                          jmp     ReportInterrupt                                 ;report interrupt
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       INT8    Double Fault
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  doublefault                                     ;doublefault interrupt
  1861                                                          push    8                                               ;store interrupt nbr
  1862                                                          push    czIntDoubleFault                                ;store message offset
  1863                                                          jmp     ReportInterrupt                                 ;report interrupt
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  ;
  1866                                  ;       INT9    Operand
  1867                                  ;
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                                          menter  operand                                         ;operand interrupt
  1870                                                          push    9                                               ;store interrupt nbr
  1871                                                          push    czIntOperand                                    ;store message offset
  1872                                                          jmp     ReportInterrupt                                 ;report interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       INT10   Bad Task State Segment
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  badtss                                          ;bad TSS interrupt
  1879                                                          push    10                                              ;store interrupt nbr
  1880                                                          push    czIntBadTSS                                     ;store message offset
  1881                                                          jmp     ReportInterrupt                                 ;report interrupt
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       INT11   Not Present
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  notpresent                                      ;not present interrupt
  1888                                                          push    11                                              ;store interrupt nbr
  1889                                                          push    czIntNotPresent                                 ;store message offset
  1890                                                          jmp     ReportInterrupt                                 ;report interrupt
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;       INT12   Stack Limit
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                                          menter  stacklimit                                      ;stack limit interrupt
  1897                                                          push    12                                              ;store interrupt nbr
  1898                                                          push    czIntStackLimit                                 ;store message offset
  1899                                                          jmp     ReportInterrupt                                 ;report interrupt
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                  ;
  1902                                  ;       INT13   General Protection Fault
  1903                                  ;
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                                          menter  protection                                      ;protection fault interrupt
  1906                                                          push    13                                              ;store interrupt nbr
  1907                                                          push    czIntProtection                                 ;store message offset
  1908                                                          jmp     ReportInterrupt                                 ;report interrupt
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                  ;
  1911                                  ;       INT14   Reserved
  1912                                  ;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                                          menter  int14                                           ;(reserved)
  1915                                                          push    14                                              ;store interrupt nbr
  1916                                                          push    czIntReserved                                   ;store message offset
  1917                                                          jmp     ReportInterrupt                                 ;report interrupt
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                  ;
  1920                                  ;       INT15   Reserved
  1921                                  ;
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                                          menter  int15                                           ;(reserved)
  1924                                                          push    15                                              ;store interrupt nbr
  1925                                                          push    czIntReserved                                   ;store message offset
  1926                                                          jmp     ReportInterrupt                                 ;report interrupt
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  ;
  1929                                  ;       INT16   Coprocessor Calculation
  1930                                  ;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                                          menter  coproccalc                                      ;coprocessor calculation
  1933                                                          push    16                                              ;store interrupt nbr
  1934                                                          push    czIntCoprocessorCalc                            ;store message offset
  1935                                                          jmp     ReportInterrupt                                 ;report interrupt
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937                                  ;
  1938                                  ;       INT17   Reserved
  1939                                  ;
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                                          menter  int17                                           ;(reserved)
  1942                                                          push    17                                              ;store interrupt nbr
  1943                                                          push    czIntReserved                                   ;store message offset
  1944                                                          jmp     ReportInterrupt                                 ;report interrupt
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       INT18   Reserved
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                                          menter  int18                                           ;(reserved)
  1951                                                          push    18                                              ;store interrupt nbr
  1952                                                          push    czIntReserved                                   ;store message offset
  1953                                                          jmp     ReportInterrupt                                 ;report interrupt
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                  ;
  1956                                  ;       INT19   Reserved
  1957                                  ;
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                                          menter  int19                                           ;(reserved)
  1960                                                          push    19                                              ;store interrupt nbr
  1961                                                          push    czIntReserved                                   ;store message offset
  1962                                                          jmp     ReportInterrupt                                 ;report interrupt
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  ;
  1965                                  ;       INT20   Reserved
  1966                                  ;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                                          menter  int20                                           ;(reserved)
  1969                                                          push    20                                              ;store interrupt nbr
  1970                                                          push    czIntReserved                                   ;store message offset
  1971                                                          jmp     ReportInterrupt                                 ;report interrupt
  1972                                  ;-----------------------------------------------------------------------------------------------------------------------
  1973                                  ;
  1974                                  ;       INT21   Reserved
  1975                                  ;
  1976                                  ;-----------------------------------------------------------------------------------------------------------------------
  1977                                                          menter  int21                                           ;(reserved)
  1978                                                          push    21                                              ;store interrupt nbr
  1979                                                          push    czIntReserved                                   ;store message offset
  1980                                                          jmp     ReportInterrupt                                 ;report interrupt
  1981                                  ;-----------------------------------------------------------------------------------------------------------------------
  1982                                  ;
  1983                                  ;       INT22   Reserved
  1984                                  ;
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                                          menter  int22                                           ;(reserved)
  1987                                                          push    22                                              ;store interrupt nbr
  1988                                                          push    czIntReserved                                   ;store message offset
  1989                                                          jmp     ReportInterrupt                                 ;report interrupt
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                  ;
  1992                                  ;       INT23   Reserved
  1993                                  ;
  1994                                  ;-----------------------------------------------------------------------------------------------------------------------
  1995                                                          menter  int23                                           ;(reserved)
  1996                                                          push    23                                              ;store interrupt nbr
  1997                                                          push    czIntReserved                                   ;store message offset
  1998                                                          jmp     ReportInterrupt                                 ;report interrupt
  1999                                  ;-----------------------------------------------------------------------------------------------------------------------
  2000                                  ;
  2001                                  ;       INT24   Reserved
  2002                                  ;
  2003                                  ;-----------------------------------------------------------------------------------------------------------------------
  2004                                                          menter  int24                                           ;(reserved)
  2005                                                          push    24                                              ;store interrupt nbr
  2006                                                          push    czIntReserved                                   ;store message offset
  2007                                                          jmp     ReportInterrupt                                 ;report interrupt
  2008                                  ;-----------------------------------------------------------------------------------------------------------------------
  2009                                  ;
  2010                                  ;       INT25   Reserved
  2011                                  ;
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                                          menter  int25                                           ;(reserved)
  2014                                                          push    25                                              ;store interrupt nbr
  2015                                                          push    czIntReserved                                   ;store message offset
  2016                                                          jmp     ReportInterrupt                                 ;report interrupt
  2017                                  ;-----------------------------------------------------------------------------------------------------------------------
  2018                                  ;
  2019                                  ;       INT26   Reserved
  2020                                  ;
  2021                                  ;-----------------------------------------------------------------------------------------------------------------------
  2022                                                          menter  int26                                           ;(reserved)
  2023                                                          push    26                                              ;store interrupt nbr
  2024                                                          push    czIntReserved                                   ;store message offset
  2025                                                          jmp     ReportInterrupt                                 ;report interrupt
  2026                                  ;-----------------------------------------------------------------------------------------------------------------------
  2027                                  ;
  2028                                  ;       INT27   Reserved
  2029                                  ;
  2030                                  ;-----------------------------------------------------------------------------------------------------------------------
  2031                                                          menter  int27                                           ;(reserved)
  2032                                                          push    27                                              ;store interrupt nbr
  2033                                                          push    czIntReserved                                   ;store message offset
  2034                                                          jmp     ReportInterrupt                                 ;report interrupt
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036                                  ;
  2037                                  ;       INT28   Reserved
  2038                                  ;
  2039                                  ;-----------------------------------------------------------------------------------------------------------------------
  2040                                                          menter  int28                                           ;(reserved)
  2041                                                          push    28                                              ;store interrupt nbr
  2042                                                          push    czIntReserved                                   ;store message offset
  2043                                                          jmp     ReportInterrupt                                 ;report interrupt
  2044                                  ;-----------------------------------------------------------------------------------------------------------------------
  2045                                  ;
  2046                                  ;       INT29   Reserved
  2047                                  ;
  2048                                  ;-----------------------------------------------------------------------------------------------------------------------
  2049                                                          menter  int29                                           ;(reserved)
  2050                                                          push    29                                              ;store interrupt nbr
  2051                                                          push    czIntReserved                                   ;store message offset
  2052                                                          jmp     ReportInterrupt                                 ;report interrupt
  2053                                  ;-----------------------------------------------------------------------------------------------------------------------
  2054                                  ;
  2055                                  ;       INT30   Reserved
  2056                                  ;
  2057                                  ;-----------------------------------------------------------------------------------------------------------------------
  2058                                                          menter  int30                                           ;(reserved)
  2059                                                          push    30                                              ;store interrupt nbr
  2060                                                          push    czIntReserved                                   ;store message offset
  2061                                                          jmp     ReportInterrupt                                 ;report interrupt
  2062                                  ;-----------------------------------------------------------------------------------------------------------------------
  2063                                  ;
  2064                                  ;       INT31   Reserved
  2065                                  ;
  2066                                  ;-----------------------------------------------------------------------------------------------------------------------
  2067                                                          menter  int31                                           ;(reserved)
  2068                                                          push    31                                              ;store interrupt nbr
  2069                                                          push    czIntReserved                                   ;store message offset
  2070                                                          jmp     ReportInterrupt                                 ;report interrupt
  2071                                  ;-----------------------------------------------------------------------------------------------------------------------
  2072                                  ;
  2073                                  ;       Routine:        ReportInterrupt
  2074                                  ;
  2075                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2076                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2077                                  ;
  2078                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2079                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2080                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2081                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2082                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2083                                  ;
  2084                                  ;       Out:            N/A             This routine does not exit.
  2085                                  ;
  2086                                  ;-----------------------------------------------------------------------------------------------------------------------
  2087                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2088                                                          push    es                                              ;save ES at time of interrupt
  2089                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2090                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2091                                  ;
  2092                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2093                                  ;
  2094                                  ;                       [EBP+60]        EFLAGS
  2095                                  ;                       [EBP+56]        CS
  2096                                  ;                       [EBP+52]        EIP
  2097                                  ;                       [EBP+48]        EIP hi-order
  2098                                  ;                       [EBP+44]        interrupt number (0-31)
  2099                                  ;                       [EBP+40]        error message address
  2100                                  ;                       [EBP+36]        DS
  2101                                  ;                       [EBP+32]        ES
  2102                                  ;                       [EBP+28]        EAX
  2103                                  ;                       [EBP+24]        ECX
  2104                                  ;                       [EBP+20]        EDX
  2105                                  ;                       [EBP+16]        EBX
  2106                                  ;                       [EBP+12]        ESP
  2107                                  ;                       [EBP+8]         EBP
  2108                                  ;                       [EBP+4]         ESI
  2109                                  ;                       [EBP+0]         EDI
  2110                                  ;
  2111                                                          push    cs                                              ;load code selector ...
  2112                                                          pop     ds                                              ;... into DS
  2113                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2114                                                          pop     es                                              ;... into ES
  2115                                  ;
  2116                                  ;       Display the interrupt report boundary box
  2117                                  ;
  2118                                                          mov     cl,13                                           ;column
  2119                                                          mov     ch,6                                            ;row
  2120                                                          mov     dl,50                                           ;width
  2121                                                          mov     dh,8                                            ;height
  2122                                                          mov     bh,07h                                          ;attribute
  2123                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2124                                  ;
  2125                                  ;       Display the report header
  2126                                  ;
  2127                                                          mov     cl,15                                           ;column
  2128                                                          mov     ch,7                                            ;row
  2129                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2130                                                          call    SetConsoleString                                ;draw text string
  2131                                  ;
  2132                                  ;       Display the interrupt description label
  2133                                  ;
  2134                                                          mov     cl,15                                           ;column
  2135                                                          mov     ch,8                                            ;row
  2136                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2137                                                          call    SetConsoleString                                ;draw text string
  2138                                  ;
  2139                                  ;       Display the interrupt number
  2140                                  ;
  2141                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2142                                                          mov     cl,26                                           ;column
  2143                                                          mov     ch,8                                            ;row
  2144                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2145                                  ;
  2146                                  ;       Display the interrupt name
  2147                                  ;
  2148                                                          mov     cl,29                                           ;column
  2149                                                          mov     ch,8                                            ;row
  2150                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2151                                                          call    SetConsoleString                                ;display interrupt description
  2152                                  ;
  2153                                  ;       Display the register values header
  2154                                  ;
  2155                                                          mov     cl,15                                           ;column
  2156                                                          mov     ch,10                                           ;row
  2157                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2158                                                          call    SetConsoleString                                ;draw text string
  2159                                  ;
  2160                                  ;       Display the EAX register label and value
  2161                                  ;
  2162                                                          mov     cl,15                                           ;column
  2163                                                          mov     ch,11                                           ;row
  2164                                                          mov     esi,czIntEAX                                    ;register EAX label
  2165                                                          call    SetConsoleString                                ;draw label
  2166                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2167                                                          mov     cl,19                                           ;column
  2168                                                          mov     ch,11                                           ;row
  2169                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2170                                  ;
  2171                                  ;       Display the ECX register label and value
  2172                                  ;
  2173                                                          mov     cl,15                                           ;column
  2174                                                          mov     ch,12                                           ;row
  2175                                                          mov     esi,czIntECX                                    ;label
  2176                                                          call    SetConsoleString                                ;draw label
  2177                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2178                                                          mov     cl,19                                           ;column
  2179                                                          mov     ch,12                                           ;row
  2180                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2181                                  ;
  2182                                  ;       Display the EDX register label and value
  2183                                  ;
  2184                                                          mov     cl,15                                           ;column
  2185                                                          mov     ch,13                                           ;row
  2186                                                          mov     esi,czIntEDX                                    ;label
  2187                                                          call    SetConsoleString                                ;draw label
  2188                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2189                                                          mov     cl,19                                           ;column
  2190                                                          mov     ch,13                                           ;row
  2191                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2192                                  ;
  2193                                  ;       Display the EBX register label and value
  2194                                  ;
  2195                                                          mov     cl,15                                           ;column
  2196                                                          mov     ch,14                                           ;row
  2197                                                          mov     esi,czIntEBX                                    ;label
  2198                                                          call    SetConsoleString                                ;draw label
  2199                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2200                                                          mov     cl,19                                           ;column
  2201                                                          mov     ch,14                                           ;row
  2202                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2203                                  ;
  2204                                  ;       Display the ESI register label and value
  2205                                  ;
  2206                                                          mov     cl,29                                           ;column
  2207                                                          mov     ch,11                                           ;row
  2208                                                          mov     esi,czIntESI                                    ;label
  2209                                                          call    SetConsoleString                                ;draw label
  2210                                                          mov     eax,[ebp+4]                                     ;ESI
  2211                                                          mov     cl,33                                           ;column
  2212                                                          mov     ch,11                                           ;row
  2213                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2214                                  ;
  2215                                  ;       Display the EDI register label and value
  2216                                  ;
  2217                                                          mov     cl,29                                           ;column
  2218                                                          mov     ch,12                                           ;row
  2219                                                          mov     esi,czIntEDI                                    ;label
  2220                                                          call    SetConsoleString                                ;draw label
  2221                                                          mov     eax,[ebp+0]                                     ;EDI
  2222                                                          mov     cl,33                                           ;column
  2223                                                          mov     ch,12                                           ;row
  2224                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2225                                  ;
  2226                                  ;       Display the EBP register label and value
  2227                                  ;
  2228                                                          mov     cl,29                                           ;column
  2229                                                          mov     ch,13                                           ;row
  2230                                                          mov     esi,czIntEBP                                    ;label
  2231                                                          call    SetConsoleString                                ;draw label
  2232                                                          mov     eax,[ebp+8]                                     ;EBP
  2233                                                          mov     cl,33                                           ;column
  2234                                                          mov     ch,13                                           ;row
  2235                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2236                                  ;
  2237                                  ;       Display the DS register label and value
  2238                                  ;
  2239                                                          mov     cl,42                                           ;column
  2240                                                          mov     ch,11                                           ;row
  2241                                                          mov     esi,czIntDS                                     ;label
  2242                                                          call    SetConsoleString                                ;draw label
  2243                                                          xor     eax,eax                                         ;zero register
  2244                                                          mov     ax,[ebp+36]                                     ;DS
  2245                                                          mov     cl,46                                           ;column
  2246                                                          mov     ch,11                                           ;row
  2247                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2248                                  ;
  2249                                  ;       Display the ES register label and value
  2250                                  ;
  2251                                                          mov     cl,42                                           ;column
  2252                                                          mov     ch,12                                           ;row
  2253                                                          mov     esi,czIntES                                     ;label
  2254                                                          call    SetConsoleString                                ;draw label
  2255                                                          xor     eax,eax                                         ;zero register
  2256                                                          mov     ax,[ebp+32]                                     ;ES
  2257                                                          mov     cl,46                                           ;column
  2258                                                          mov     ch,12                                           ;row
  2259                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2260                                  ;
  2261                                  ;       Display the SS register label and value
  2262                                  ;
  2263                                                          mov     cl,42                                           ;column
  2264                                                          mov     ch,13                                           ;row
  2265                                                          mov     esi,czIntSS                                     ;label
  2266                                                          call    SetConsoleString                                ;draw label
  2267                                                          xor     eax,eax                                         ;zero register
  2268                                                          mov     ax,ss                                           ;SS
  2269                                                          mov     cl,46                                           ;column
  2270                                                          mov     ch,13                                           ;row
  2271                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2272                                  ;
  2273                                  ;       Display the CS register lable and value
  2274                                  ;
  2275                                                          mov     cl,42                                           ;column
  2276                                                          mov     ch,14                                           ;row
  2277                                                          mov     esi,czIntCS                                     ;label
  2278                                                          call    SetConsoleString                                ;draw label
  2279                                                          xor     eax,eax                                         ;zero register
  2280                                                          mov     ax,[ebp+56]                                     ;CS
  2281                                                          mov     cl,46                                           ;column
  2282                                                          mov     ch,14                                           ;row
  2283                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2284                                  ;
  2285                                  ;       Display the EFLAGS register label and value
  2286                                  ;
  2287                                                          mov     cl,51                                           ;column
  2288                                                          mov     ch,11                                           ;row
  2289                                                          mov     esi,czIntEFLAGS                                 ;label
  2290                                                          call    SetConsoleString                                ;draw label
  2291                                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2292                                                          mov     cl,55                                           ;column
  2293                                                          mov     ch,11                                           ;row
  2294                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2295                                  ;
  2296                                  ;       Display the ESP register label and value
  2297                                  ;
  2298                                                          mov     cl,51                                           ;column
  2299                                                          mov     ch,13                                           ;row
  2300                                                          mov     esi,czIntESP                                    ;label
  2301                                                          call    SetConsoleString                                ;draw label
  2302                                                          mov     eax,[ebp+12]                                    ;ESP
  2303                                                          mov     cl,55                                           ;column
  2304                                                          mov     ch,13                                           ;row
  2305                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2306                                  ;
  2307                                  ;       Display the EIP register label and value
  2308                                  ;
  2309                                                          mov     cl,51                                           ;column
  2310                                                          mov     ch,14                                           ;row
  2311                                                          mov     esi,czIntEIP                                    ;label
  2312                                                          call    SetConsoleString                                ;draw label
  2313                                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2314                                                          mov     cl,55                                           ;column
  2315                                                          mov     ch,14                                           ;row
  2316                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2317                                  ;
  2318                                  ;       Halt and loop until reset
  2319                                  ;
  2320                                  .10                     sti                                                     ;enable maskable interrupts
  2321                                                          hlt                                                     ;halt processor
  2322                                                          jmp     .10                                             ;resume on interrupt
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  ;
  2325                                  ;       Processor Interrupt Name Strings
  2326                                  ;
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328                                  czIntDivideByZero       db      "Division by zero",0
  2329                                  czIntSingleStep         db      "Single step",0
  2330                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2331                                  czIntBreak              db      "Break",0
  2332                                  czIntInto               db      "Into",0
  2333                                  czIntBounds             db      "Bounds",0
  2334                                  czIntBadOpCode          db      "Bad Operation Code",0
  2335                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2336                                  czIntDoubleFault        db      "Double Fault",0
  2337                                  czIntOperand            db      "Operand",0
  2338                                  czIntBadTSS             db      "Bad Task State Segment",0
  2339                                  czIntNotPresent         db      "Not Present",0
  2340                                  czIntStackLimit         db      "Stack Limit",0
  2341                                  czIntProtection         db      "General Protection Fault",0
  2342                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2343                                  czIntReserved           db      "Reserved",0
  2344                                  ;-----------------------------------------------------------------------------------------------------------------------
  2345                                  ;
  2346                                  ;       Processor Interrupt Handling Strings
  2347                                  ;
  2348                                  ;-----------------------------------------------------------------------------------------------------------------------
  2349                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2350                                  czIntLabel              db      "Interrupt #",0
  2351                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2352                                  czIntEAX                db      "EAX:",0
  2353                                  czIntECX                db      "ECX:",0
  2354                                  czIntEDX                db      "EDX:",0
  2355                                  czIntEBX                db      "EBX:",0
  2356                                  czIntESI                db      "ESI:",0
  2357                                  czIntEDI                db      "EDI:",0
  2358                                  czIntEBP                db      "EBP:",0
  2359                                  czIntESP                db      "ESP:",0
  2360                                  czIntDS                 db      " DS:",0
  2361                                  czIntES                 db      " ES:",0
  2362                                  czIntSS                 db      " SS:",0
  2363                                  czIntCS                 db      " CS:",0
  2364                                  czIntEFLAGS             db      "FLG:",0
  2365                                  czIntEIP                db      "EIP:",0
  2366                                  ;-----------------------------------------------------------------------------------------------------------------------
  2367                                  ;
  2368                                  ;       Routine:        DrawTextDialogBox
  2369                                  ;
  2370                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2371                                  ;
  2372                                  ;       In:             CL      upper left column (0-79)
  2373                                  ;                       CH      upper left row (0-24)
  2374                                  ;                       DL      column width, excluding border
  2375                                  ;                       DH      row height, excluding border
  2376                                  ;                       BH      color attribute
  2377                                  ;
  2378                                  ;-----------------------------------------------------------------------------------------------------------------------
  2379                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2380                                                          push    esi                                             ;
  2381                                                          push    edi                                             ;
  2382                                                          push    es                                              ;
  2383                                                          push    EGDTCGA                                         ;load CGA selector ...
  2384                                                          pop     es                                              ;... into ES
  2385                                  ;
  2386                                  ;       Compute target display offset
  2387                                  ;
  2388                                                          xor     eax,eax                                         ;zero register
  2389                                                          mov     al,ch                                           ;row
  2390                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2391                                                          mul     ah                                              ;row offset
  2392                                                          add     al,cl                                           ;add column
  2393                                                          adc     ah,0                                            ;add overflow
  2394                                                          add     al,cl                                           ;add column
  2395                                                          adc     ah,0                                            ;add overflow
  2396                                                          mov     edi,eax                                         ;target row offset
  2397                                  ;
  2398                                  ;       Display top border row
  2399                                  ;
  2400                                                          push    edi                                             ;save target row offset
  2401                                                          mov     ah,bh                                           ;attribute
  2402                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2403                                                          stosw                                                   ;display character and attribute
  2404                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2405                                                          xor     ecx,ecx                                         ;zero register
  2406                                                          mov     cl,dl                                           ;width, excluding border
  2407                                                          rep     stosw                                           ;display horizontal border
  2408                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2409                                                          stosw                                                   ;display character and attribute
  2410                                                          pop     edi                                             ;restore target row offset
  2411                                                          add     edi,ECONROWBYTES                                ;next row
  2412                                  ;
  2413                                  ;       Display dialog box body rows
  2414                                  ;
  2415                                                          xor     ecx,ecx                                         ;zero register
  2416                                                          mov     cl,dh                                           ;height, excluding border
  2417                                  .10                     push    ecx                                             ;save remaining rows
  2418                                                          push    edi                                             ;save target row offset
  2419                                                          mov     ah,bh                                           ;attribute
  2420                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2421                                                          stosw                                                   ;display character and attribute
  2422                                                          mov     al,EASCIISPACE                                  ;space
  2423                                                          xor     ecx,ecx                                         ;zero register
  2424                                                          mov     cl,dl                                           ;width, excluding border
  2425                                                          rep     stosw                                           ;display row
  2426                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2427                                                          stosw                                                   ;display character and attribute
  2428                                                          pop     edi                                             ;restore target row offset
  2429                                                          add     edi,ECONROWBYTES                                ;next row
  2430                                                          pop     ecx                                             ;remaining rows
  2431                                                          loop    .10                                             ;next row
  2432                                  ;
  2433                                  ;       Display bottom border row
  2434                                  ;
  2435                                                          push    edi                                             ;save target row offset
  2436                                                          mov     ah,bh                                           ;attribute
  2437                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2438                                                          stosw                                                   ;display character and attribute
  2439                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2440                                                          xor     ecx,ecx                                         ;zero register
  2441                                                          mov     cl,dl                                           ;width, excluding border
  2442                                                          rep     stosw                                           ;display horizontal border
  2443                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2444                                                          stosw                                                   ;display character and attribute
  2445                                                          pop     edi                                             ;restore target row offset
  2446                                                          add     edi,ECONROWBYTES                                ;next row
  2447                                  ;
  2448                                  ;       Restore and return
  2449                                  ;
  2450                                                          pop     es                                              ;restore non-volatile regs
  2451                                                          pop     edi                                             ;
  2452                                                          pop     esi                                             ;
  2453                                                          pop     ecx                                             ;
  2454                                                          ret                                                     ;return
  2455                                  ;=======================================================================================================================
  2456                                  ;
  2457                                  ;       Hardware Device Interupts
  2458                                  ;
  2459                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2460                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2461                                  ;       (BX=2028h).
  2462                                  ;
  2463                                  ;=======================================================================================================================
  2464                                  ;-----------------------------------------------------------------------------------------------------------------------
  2465                                  ;
  2466                                  ;       IRQ0    Clock Tick Interrupt
  2467                                  ;
  2468                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2469                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2470                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2471                                  ;
  2472                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2473                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2474                                  ;
  2475                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2476                                  ;       zero, the floppy disk motors are turned off.
  2477                                  ;
  2478                                  ;-----------------------------------------------------------------------------------------------------------------------
  2479                                                          menter  clocktick                                       ;clock tick interrupt
  2480                                                          push    eax                                             ;save non-volatile regs
  2481                                                          push    edx                                             ;
  2482                                                          push    ds                                              ;
  2483                                  ;
  2484                                  ;       Update the clock tick count and the elapsed days as needed.
  2485                                  ;
  2486                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2487                                                          pop     ds                                              ;... into data segment register
  2488                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2489                                                          inc     eax                                             ;increment clock ticks
  2490                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2491                                                          jb      irq0.10                                         ;no, skip ahead
  2492                                                          inc     byte [wbClockDays]                              ;increment clock days
  2493                                                          xor     eax,eax                                         ;reset clock ticks
  2494                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2495                                  ;
  2496                                  ;       Decrement floppy disk motor timeout.
  2497                                  ;
  2498                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2499                                                          je      irq0.20                                         ;yes, skip ahead
  2500                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2501                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2502                                  ;
  2503                                  ;       Turn off the floppy disk motor if appropriate.
  2504                                  ;
  2505                                                          sti                                                     ;enable maskable interrupts
  2506                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2507                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2508                                                          in      al,dx                                           ;FDC main status byte
  2509                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2510                                                          jnz     irq0.15                                         ;wait while busy
  2511                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2512                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2513                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2514                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2515                                                          out     dx,al                                           ;turn motor off
  2516                                  ;
  2517                                  ;       Signal the end of the hardware interrupt.
  2518                                  ;
  2519                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2520                                  ;
  2521                                  ;       Restore and return.
  2522                                  ;
  2523                                                          pop     ds                                              ;restore modified regs
  2524                                                          pop     edx                                             ;
  2525                                                          pop     eax                                             ;
  2526                                                          iretd                                                   ;return
  2527                                  ;-----------------------------------------------------------------------------------------------------------------------
  2528                                  ;
  2529                                  ;       IRQ1    Keyboard Interrupt
  2530                                  ;
  2531                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2532                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2533                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2534                                  ;       ALL modified registers upon return.
  2535                                  ;
  2536                                  ;-----------------------------------------------------------------------------------------------------------------------
  2537                                                          menter  keyboard                                        ;keyboard interrrupt
  2538                                                          push    eax                                             ;save non-volatile regs
  2539                                                          push    ebx                                             ;
  2540                                                          push    ecx                                             ;
  2541                                                          push    esi                                             ;
  2542                                                          push    ds                                              ;
  2543                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2544                                                          pop     ds                                              ;... into data segment register
  2545                                                          xor     al,al                                           ;zero
  2546                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2547                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2548                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2549                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2550                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2551                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2552                                                          mov     al,' '                                          ;space
  2553                                                          mov     [wbConsoleChar],al                              ;set character to space
  2554                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2555                                                          not     al                                              ;controller timeout mask
  2556                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2557                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2558                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2559                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2560                                                          jz      irq1.140                                        ;yes, skip ahead
  2561                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2562                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2563                                                          mov     ah,al                                           ;copy scan code 0
  2564                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2565                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2566                                                          je      irq1.30                                         ;yes, set flag
  2567                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2568                                                          je      irq1.40                                         ;yes, reset flag
  2569                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2570                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2571                                                          je      irq1.30                                         ;yes, set flag
  2572                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2573                                                          je      irq1.40                                         ;yes, reset flag
  2574                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2575                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2576                                                          je      irq1.30                                         ;yes, set flag
  2577                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2578                                                          je      irq1.40                                         ;yes, reset flag
  2579                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2580                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2581                                                          je      irq1.30                                         ;yes, set flag
  2582                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2583                                                          je      irq1.40                                         ;yes, reset flag
  2584                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2585                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2586                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2587                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2588                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2589                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2590                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2591                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2592                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2593                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2594                                                          jne     irq1.70                                         ;no, skip ahead
  2595                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2596                                                          jz      irq1.140                                        ;yes, skip ahead
  2597                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2598                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2599                                                          mov     ah,al                                           ;copy scan code 1
  2600                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2601                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2602                                                          je      irq1.30                                         ;yes, set flag
  2603                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2604                                                          je      irq1.40                                         ;yes, reset flag
  2605                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2606                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2607                                                          je      irq1.30                                         ;yes, set flag
  2608                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2609                                                          je      irq1.40                                         ;yes, reset flag
  2610                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2611                                                          je      irq1.80                                         ;yes, skip ahead
  2612                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2613                                                          je      irq1.80                                         ;yes, skip ahead
  2614                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2615                                                          je      irq1.10                                         ;yes, continue
  2616                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2617                                                          jne     irq1.20                                         ;no, skip ahead
  2618                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2619                                                          jz      irq1.140                                        ;yes, skip ahead
  2620                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2621                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2622                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2623                                                          jz      irq1.140                                        ;yes, skip ahead
  2624                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2625                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2626                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2627                                  irq1.30                 or      bl,al                                           ;set shift flag
  2628                                                          jmp     irq1.60                                         ;skip ahead
  2629                                  irq1.40                 not     al                                              ;convert flag to mask
  2630                                                          and     bl,al                                           ;reset shift flag
  2631                                                          jmp     irq1.60                                         ;skip ahead
  2632                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2633                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2634                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2635                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2636                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2637                                                          jmp     irq1.150                                        ;finish keyboard handling
  2638                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2639                                                          jne     irq1.80                                         ;no continue
  2640                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2641                                                          jz      irq1.140                                        ;yes, skip ahead
  2642                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2643                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2644                                                          mov     ah,al                                           ;copy scan code 1
  2645                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2646                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2647                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2648                                                          jz      irq1.140                                        ;yes, skip ahead
  2649                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2650                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2651                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2652                                                          jz      irq1.140                                        ;yes, skip ahead
  2653                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2654                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2655                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2656                                                          jz      irq1.140                                        ;yes, skip ahead
  2657                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2658                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2659                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2660                                                          jz      irq1.140                                        ;yes, skip ahead
  2661                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2662                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2663                                                          jmp     irq1.150                                        ;continue
  2664                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2665                                                          test    ah,EKEYBUP                                      ;release code?
  2666                                                          jnz     irq1.130                                        ;yes, skip ahead
  2667                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2668                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2669                                                          jz      irq1.90                                         ;no, skip ahead
  2670                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2671                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2672                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2673                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2674                                                          jz      irq1.100                                        ;no skip ahead
  2675                                                          mov     cl,al                                           ;copy ASCII code
  2676                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2677                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2678                                                          jb      irq1.100                                        ;yes, skip ahead
  2679                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2680                                                          ja      irq1.100                                        ;yes, skip ahead
  2681                                                          xor     al,EASCIICASE                                   ;switch case
  2682                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2683                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2684                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2685                                                          jz      irq1.120                                        ;no, skip ahead
  2686                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2687                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2688                                                          or      edx,eax                                         ;msg id and codes
  2689                                                          xor     ecx,ecx                                         ;null param
  2690                                                          push    eax                                             ;save codes
  2691                                                          call    PutMessage                                      ;put message to console
  2692                                                          pop     eax                                             ;restore codes
  2693                                                          test    al,al                                           ;ASCII translation?
  2694                                                          jz      irq1.130                                        ;no, skip ahead
  2695                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2696                                                          and     eax,0FFFFh                                      ;clear high-order word
  2697                                                          or      edx,eax                                         ;msg id and codes
  2698                                                          xor     ecx,ecx                                         ;null param
  2699                                                          call    PutMessage                                      ;put message to console
  2700                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2701                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2702                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2703                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2704                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2705                                                          pop     ds                                              ;restore non-volatile regs
  2706                                                          pop     esi                                             ;
  2707                                                          pop     ecx                                             ;
  2708                                                          pop     ebx                                             ;
  2709                                                          pop     eax                                             ;
  2710                                                          iretd                                                   ;return
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;       Scan-Code to ASCII Translation Tables
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2715                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2716                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2717                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2718                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2719                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2720                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2721                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2722                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2723                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2724                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2725                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2726                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2727                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2728                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2729                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2730                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2731                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2732                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2733                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2734                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2735                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2736                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2737                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2738                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2739                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2740                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2741                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2742                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2743                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2744                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2745                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2746                                  ;-----------------------------------------------------------------------------------------------------------------------
  2747                                  ;
  2748                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2749                                  ;
  2750                                  ;-----------------------------------------------------------------------------------------------------------------------
  2751                                                          menter  iochannel                                       ;secondary 8259A cascade
  2752                                                          push    eax                                             ;save modified regs
  2753                                                          jmp     hwint                                           ;end interrupt and return
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                  ;
  2756                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2757                                  ;
  2758                                  ;-----------------------------------------------------------------------------------------------------------------------
  2759                                                          menter  com2                                            ;serial port 2 interrupt
  2760                                                          push    eax                                             ;save modified regs
  2761                                                          jmp     hwint                                           ;end interrupt and return
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  ;
  2764                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2765                                  ;
  2766                                  ;-----------------------------------------------------------------------------------------------------------------------
  2767                                                          menter  com1                                            ;serial port 1 interrupt
  2768                                                          push    eax                                             ;save modified regs
  2769                                                          jmp     hwint                                           ;end interrupt and return
  2770                                  ;-----------------------------------------------------------------------------------------------------------------------
  2771                                  ;
  2772                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2773                                  ;
  2774                                  ;-----------------------------------------------------------------------------------------------------------------------
  2775                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2776                                                          push    eax                                             ;save modified regs
  2777                                                          jmp     hwint                                           ;end interrupt and return
  2778                                  ;-----------------------------------------------------------------------------------------------------------------------
  2779                                  ;
  2780                                  ;       IRQ6    Diskette Hardware Interrupt
  2781                                  ;
  2782                                  ;-----------------------------------------------------------------------------------------------------------------------
  2783                                                          menter  diskette                                        ;floppy disk interrupt
  2784                                                          push    eax                                             ;save non-volatile regs
  2785                                                          push    ds                                              ;
  2786                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2787                                                          pop     ds                                              ;... into DS register
  2788                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2789                                                          or      al,10000000b                                    ;set IRQ flag
  2790                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2791                                                          pop     ds                                              ;restore non-volatile regs
  2792                                                          jmp     hwint                                           ;end primary PIC interrupt
  2793                                  ;-----------------------------------------------------------------------------------------------------------------------
  2794                                  ;
  2795                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2796                                  ;
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2799                                                          push    eax                                             ;save modified regs
  2800                                                          jmp     hwint                                           ;end interrupt and return
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                  ;
  2803                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2804                                  ;
  2805                                  ;-----------------------------------------------------------------------------------------------------------------------
  2806                                                          menter  rtclock                                         ;real-time clock interrupt
  2807                                                          push    eax                                             ;save modified regs
  2808                                                          jmp     hwwint                                          ;end interrupt and return
  2809                                  ;-----------------------------------------------------------------------------------------------------------------------
  2810                                  ;
  2811                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2815                                                          push    eax                                             ;save modified regs
  2816                                                          jmp     hwwint                                          ;end interrupt and return
  2817                                  ;-----------------------------------------------------------------------------------------------------------------------
  2818                                  ;
  2819                                  ;       IRQ10   Reserved Hardware Interrupt
  2820                                  ;
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                                          menter  irq10                                           ;reserved
  2823                                                          push    eax                                             ;save modified regs
  2824                                                          jmp     hwwint                                          ;end interrupt and return
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                  ;
  2827                                  ;       IRQ11   Reserved Hardware Interrupt
  2828                                  ;
  2829                                  ;-----------------------------------------------------------------------------------------------------------------------
  2830                                                          menter  irq11                                           ;reserved
  2831                                                          push    eax                                             ;save modified regs
  2832                                                          jmp     hwwint                                          ;end interrupt and return
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834                                  ;
  2835                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2836                                  ;
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2839                                                          push    eax                                             ;save modified regs
  2840                                                          jmp     hwwint                                          ;end interrupt and return
  2841                                  ;-----------------------------------------------------------------------------------------------------------------------
  2842                                  ;
  2843                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2844                                  ;
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                                          menter  coprocessor                                     ;coprocessor interrupt
  2847                                                          push    eax                                             ;save modified regs
  2848                                                          jmp     hwwint                                          ;end interrupt and return
  2849                                  ;-----------------------------------------------------------------------------------------------------------------------
  2850                                  ;
  2851                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2852                                  ;
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2855                                                          push    eax                                             ;save modified regs
  2856                                                          jmp     hwwint                                          ;end interrupt and return
  2857                                  ;-----------------------------------------------------------------------------------------------------------------------
  2858                                  ;
  2859                                  ;       IRQ15   Reserved Hardware Interrupt
  2860                                  ;
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862                                                          menter  irq15                                           ;reserved
  2863                                                          push    eax                                             ;save modified regs
  2864                                                          jmp     hwwint                                          ;end interrupt and return
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  ;
  2867                                  ;       Exit from hardware interrupt
  2868                                  ;
  2869                                  ;-----------------------------------------------------------------------------------------------------------------------
  2870                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2871                                                          jmp     hwint90                                         ;skip ahead
  2872                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2873                                  hwint90                 pop     eax                                             ;restore modified regs
  2874                                                          iretd                                                   ;return from interrupt
  2875                                  ;-----------------------------------------------------------------------------------------------------------------------
  2876                                  ;
  2877                                  ;       INT 30h Operating System Software Service Interrupt
  2878                                  ;
  2879                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2880                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2881                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2882                                  ;       the entry address of the specific function from a table.
  2883                                  ;
  2884                                  ;-----------------------------------------------------------------------------------------------------------------------
  2885                                                          menter  svc
  2886                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2887                                                          jae     svc90                                           ;yes, skip ahead
  2888                                                          movzx   eax,al                                          ;function
  2889                                                          shl     eax,2                                           ;offset into table
  2890                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2891                                  svc90                   iretd                                                   ;return from interrupt
  2892                                  ;-----------------------------------------------------------------------------------------------------------------------
  2893                                  ;
  2894                                  ;       Service Request Table
  2895                                  ;
  2896                                  ;
  2897                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2898                                  ;
  2899                                  ;-----------------------------------------------------------------------------------------------------------------------
  2900                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2901                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2902                                                          tsvce   CompareMemory                                   ;compare memory
  2903                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2904                                                          tsvce   FreeMemory                                      ;free memory block
  2905                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2906                                                          tsvce   GetConsoleString                                ;get string input
  2907                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2908                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2909                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2910                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2911                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2912                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2913                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2914                                                          tsvce   PutDayString                                    ;put DD string
  2915                                                          tsvce   PutHourString                                   ;put hh string
  2916                                                          tsvce   PutMACString                                    ;put MAC address string
  2917                                                          tsvce   PutMinuteString                                 ;put mm string
  2918                                                          tsvce   PutMonthString                                  ;put MM string
  2919                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2920                                                          tsvce   PutSecondString                                 ;put ss string
  2921                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2922                                                          tsvce   PutWeekdayString                                ;put weekday string
  2923                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2924                                                          tsvce   PutYearString                                   ;put YYYY string
  2925                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2926                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2927                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2928                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2929                                                          tsvce   UpperCaseString                                 ;upper-case string
  2930                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2931                                  ;-----------------------------------------------------------------------------------------------------------------------
  2932                                  ;
  2933                                  ;       Service Request Macros
  2934                                  ;
  2935                                  ;       These macros provide positional parameterization of service request calls.
  2936                                  ;
  2937                                  ;-----------------------------------------------------------------------------------------------------------------------
  2938                                  %macro                  allocateMemory 1
  2939                                                          mov     ecx,%1                                          ;bytes to allocate
  2940                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2941                                                          int     _svc                                            ;invoke OS service
  2942                                  %endmacro
  2943                                  %macro                  clearConsoleScreen 0
  2944                                                          mov     al,eClearConsoleScreen                          ;function code
  2945                                                          int     _svc                                            ;invoke OS service
  2946                                  %endmacro
  2947                                  %macro                  compareMemory 0
  2948                                                          mov     al,eCompareMemory                               ;function code
  2949                                                          int     _svc                                            ;invoke OS service
  2950                                  %endmacro
  2951                                  %macro                  decimalToUnsigned 0
  2952                                                          mov     al,eDecimalToUnsigned                           ;function code
  2953                                                          int     _svc                                            ;invoke OS servie
  2954                                  %endmacro
  2955                                  %macro                  freeMemory 1
  2956                                                          mov     edx,%1                                          ;address of memory block
  2957                                                          mov     al,eFreeMemory                                  ;function code
  2958                                                          int     _svc                                            ;invoke OS service
  2959                                  %endmacro
  2960                                  %macro                  getBaseMemSize 0
  2961                                                          mov     al,eGetBaseMemSize                              ;function code
  2962                                                          int     _svc                                            ;invoke OS service
  2963                                  %endmacro
  2964                                  %macro                  getConsoleString 4
  2965                                                          mov     edx,%1                                          ;buffer address
  2966                                                          mov     ecx,%2                                          ;max characters
  2967                                                          mov     bh,%3                                           ;echo indicator
  2968                                                          mov     bl,%4                                           ;terminator
  2969                                                          mov     al,eGetConsoleString                            ;function code
  2970                                                          int     _svc                                            ;invoke OS service
  2971                                  %endmacro
  2972                                  %macro                  getExtendedMemSize 0
  2973                                                          mov     al,eGetExtendedMemSize                          ;function code
  2974                                                          int     _svc                                            ;invoke OS service
  2975                                  %endmacro
  2976                                  %macro                  getROMMemSize 0
  2977                                                          mov     al,eGetROMMemSize                               ;function code
  2978                                                          int     _svc                                            ;invoke OS service
  2979                                  %endmacro
  2980                                  %macro                  hexadecimalToUnsigned 0
  2981                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2982                                                          int     _svc                                            ;invoke OS service
  2983                                  %endmacro
  2984                                  %macro                  isLeapYear 1
  2985                                                          mov     ebx,%1                                          ;DATETIME addr
  2986                                                          mov     al,eIsLeapYear                                  ;function code
  2987                                                          int     _svc                                            ;invoke OS service
  2988                                  %endmacro
  2989                                  %macro                  placeCursor 0
  2990                                                          mov     al,ePlaceCursor                                 ;function code
  2991                                                          int     _svc                                            ;invoke OS service
  2992                                  %endmacro
  2993                                  %macro                  putConsoleString 0
  2994                                                          mov     al,ePutConsoleString                            ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  putConsoleString 1
  2998                                                          mov     edx,%1                                          ;string address
  2999                                                          mov     al,ePutConsoleString                            ;function code
  3000                                                          int     _svc                                            ;invoke OS service
  3001                                  %endmacro
  3002                                  %macro                  putDateString 0
  3003                                                          mov     al,ePutDateString                               ;function code
  3004                                                          int     _svc                                            ;invoke OS service
  3005                                  %endmacro
  3006                                  %macro                  putDateString 2
  3007                                                          mov     ebx,%1                                          ;DATETIME addr
  3008                                                          mov     edx,%2                                          ;output buffer addr
  3009                                                          mov     al,ePutDateString                               ;function code
  3010                                                          int     _svc                                            ;invoke OS service
  3011                                  %endmacro
  3012                                  %macro                  putDayString 2
  3013                                                          mov     ebx,%1                                          ;DATETIME addr
  3014                                                          mov     edx,%2                                          ;output buffer addr
  3015                                                          mov     al,ePutDayString                                ;function code
  3016                                                          int     _svc                                            ;invoke OS service
  3017                                  %endmacro
  3018                                  %macro                  putHourString 2
  3019                                                          mov     ebx,%1                                          ;DATETIME addr
  3020                                                          mov     edx,%2                                          ;output buffer addr
  3021                                                          mov     al,ePutHourString                               ;function code
  3022                                                          int     _svc                                            ;invoke OS service
  3023                                  %endmacro
  3024                                  %macro                  putMACString 1
  3025                                                          mov     edx,%1                                          ;output buffer address
  3026                                                          mov     al,ePutMACString                                ;function code
  3027                                                          int     _svc                                            ;invoke OS service
  3028                                  %endmacro
  3029                                  %macro                  putMinuteString 2
  3030                                                          mov     ebx,%1                                          ;DATETIME addr
  3031                                                          mov     edx,%2                                          ;output buffer addr
  3032                                                          mov     al,ePutMinuteString                             ;function code
  3033                                                          int     _svc                                            ;invoke OS service
  3034                                  %endmacro
  3035                                  %macro                  putMonthString 2
  3036                                                          mov     ebx,%1                                          ;DATETIME addr
  3037                                                          mov     edx,%2                                          ;output buffer addr
  3038                                                          mov     al,ePutMonthString                              ;function code
  3039                                                          int     _svc                                            ;invoke OS service
  3040                                  %endmacro
  3041                                  %macro                  putMonthNameString 2
  3042                                                          mov     ebx,%1                                          ;DATETIME addr
  3043                                                          mov     edx,%2                                          ;output buffer addr
  3044                                                          mov     al,ePutMonthNameString                          ;function code
  3045                                                          int     _svc                                            ;invoke OS service
  3046                                  %endmacro
  3047                                  %macro                  putSecondString 2
  3048                                                          mov     ebx,%1                                          ;DATETIME addr
  3049                                                          mov     edx,%2                                          ;output buffer addr
  3050                                                          mov     al,ePutSecondString                             ;function code
  3051                                                          int     _svc                                            ;invoke OS service
  3052                                  %endmacro
  3053                                  %macro                  putTimeString 0
  3054                                                          mov     al,ePutTimeString                               ;function code
  3055                                                          int     _svc                                            ;invoke OS service
  3056                                  %endmacro
  3057                                  %macro                  putTimeString 2
  3058                                                          mov     ebx,%1                                          ;DATETIME addr
  3059                                                          mov     edx,%2                                          ;output buffer addr
  3060                                                          mov     al,ePutTimeString                               ;function code
  3061                                                          int     _svc                                            ;invoke OS service
  3062                                  %endmacro
  3063                                  %macro                  putWeekdayString 2
  3064                                                          mov     ebx,%1                                          ;DATETIME addr
  3065                                                          mov     edx,%2                                          ;output buffer addr
  3066                                                          mov     al,ePutWeekdayString                            ;function code
  3067                                                          int     _svc                                            ;invoke OS service
  3068                                  %endmacro
  3069                                  %macro                  putWeekdayNameString 2
  3070                                                          mov     ebx,%1                                          ;DATETIME addr
  3071                                                          mov     edx,%2                                          ;output buffer addr
  3072                                                          mov     al,ePutWeekdayNameString                        ;function code
  3073                                                          int     _svc                                            ;invoke OS service
  3074                                  %endmacro
  3075                                  %macro                  putYearString 2
  3076                                                          mov     ebx,%1                                          ;DATETIME addr
  3077                                                          mov     edx,%2                                          ;output buffer addr
  3078                                                          mov     al,ePutYearString                               ;function code
  3079                                                          int     _svc                                            ;invoke OS service
  3080                                  %endmacro
  3081                                  %macro                  readRealTimeClock 0
  3082                                                          mov     al,eReadRealTimeClock                           ;function code
  3083                                                          int     _svc                                            ;invoke OS service
  3084                                  %endmacro
  3085                                  %macro                  readRealTimeClock 1
  3086                                                          mov     ebx,%1                                          ;DATETIME addr
  3087                                                          mov     al,eReadRealTimeClock                           ;function code
  3088                                                          int     _svc                                            ;invoke OS service
  3089                                  %endmacro
  3090                                  %macro                  resetSystem 0
  3091                                                          mov     al,eResetSystem                                 ;function code
  3092                                                          int     _svc                                            ;invoke OS service
  3093                                  %endmacro
  3094                                  %macro                  unsignedToDecimalString 0
  3095                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3096                                                          int     _svc                                            ;invoke OS service
  3097                                  %endmacro
  3098                                  %macro                  unsignedToHexadecimal 0
  3099                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3100                                                          int     _svc                                            ;invoke OS service
  3101                                  %endmacro
  3102                                  %macro                  upperCaseString 0
  3103                                                          mov     al,eUpperCaseString                             ;function code
  3104                                                          int     _svc                                            ;invoke OS service
  3105                                  %endmacro
  3106                                  ;=======================================================================================================================
  3107                                  ;
  3108                                  ;       Kernel Function Library
  3109                                  ;
  3110                                  ;=======================================================================================================================
  3111                                  ;=======================================================================================================================
  3112                                  ;
  3113                                  ;       Date and Time Helper Routines
  3114                                  ;
  3115                                  ;       GetYear
  3116                                  ;       IsLeapYear
  3117                                  ;       PutDateString
  3118                                  ;       PutDayString
  3119                                  ;       PutHourString
  3120                                  ;       PutMinuteString
  3121                                  ;       PutMonthString
  3122                                  ;       PutMonthNameString
  3123                                  ;       PutSecondString
  3124                                  ;       PutTimeString
  3125                                  ;       PutWeekdayString
  3126                                  ;       PutWeekdayNameString
  3127                                  ;       PutYearString
  3128                                  ;
  3129                                  ;=======================================================================================================================
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131                                  ;
  3132                                  ;       Routine:        GetYear
  3133                                  ;
  3134                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3135                                  ;
  3136                                  ;       In:             DS:EBX  DATETIME address
  3137                                  ;
  3138                                  ;       Out:            ECX     year
  3139                                  ;
  3140                                  ;-----------------------------------------------------------------------------------------------------------------------
  3141                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3142                                                          imul    ecx,100                                         ;century * 100
  3143                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3144                                                          add     ecx,eax                                         ;year (YYYY)
  3145                                                          ret                                                     ;return
  3146                                  ;-----------------------------------------------------------------------------------------------------------------------
  3147                                  ;
  3148                                  ;       Routine:        IsLeapYear
  3149                                  ;
  3150                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3151                                  ;
  3152                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3153                                  ;
  3154                                  ;       Out:            ECX     0 = not a leap year
  3155                                  ;                               1 = leap year
  3156                                  ;
  3157                                  ;-----------------------------------------------------------------------------------------------------------------------
  3158                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3159                                                          mov     eax,ecx                                         ;EAX = YYYY
  3160                                                          xor     ecx,ecx                                         ;assume not leap year
  3161                                                          test    al,00000011b                                    ;multiple of four?
  3162                                                          jnz     .no                                             ;no, branch
  3163                                                          mov     dl,100                                          ;divisor
  3164                                                          div     dl                                              ;divide by 100
  3165                                                          test    ah,ah                                           ;multiple of 100?
  3166                                                          jnz     .yes                                            ;yes, branch
  3167                                                          test    al,00000011b                                    ;multiple of 400?
  3168                                                          jnz     .no                                             ;no, branch
  3169                                  .yes                    inc     ecx                                             ;indicate leap
  3170                                  .no                     ret                                                     ;return
  3171                                  ;-----------------------------------------------------------------------------------------------------------------------
  3172                                  ;
  3173                                  ;       Routine:        PutDateString
  3174                                  ;
  3175                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3176                                  ;                       structure at ds:ebx.
  3177                                  ;
  3178                                  ;       In:             DS:EBX  DATETIME address
  3179                                  ;                       DS:EDX  output buffer address
  3180                                  ;
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3183                                                          push    edi                                             ;
  3184                                                          push    es                                              ;
  3185                                                          push    ds                                              ;store data selector ...
  3186                                                          pop     es                                              ;... in extra segment reg
  3187                                                          mov     edi,edx                                         ;output buffer address
  3188                                                          mov     cl,10                                           ;divisor
  3189                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3190                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3191                                                          div     cl                                              ;AH = rem; AL = quotient
  3192                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3193                                                          cld                                                     ;forward strings
  3194                                                          stosd                                                   ;store "mm/"nul
  3195                                                          dec     edi                                             ;address of terminator
  3196                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3197                                                          div     cl                                              ;AH = rem; AL = quotient
  3198                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3199                                                          stosd                                                   ;store "dd/"nul
  3200                                                          dec     edi                                             ;address of terminator
  3201                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3202                                                          div     cl                                              ;AH = rem; AL = quotient
  3203                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3204                                                          stosd                                                   ;store "cc/"null
  3205                                                          dec     edi                                             ;address of terminator
  3206                                                          dec     edi                                             ;address of delimiter
  3207                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3208                                                          div     cl                                              ;AH = rem; AL = quotient
  3209                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3210                                                          stosb                                                   ;store quotient
  3211                                                          mov     al,ah                                           ;remainder
  3212                                                          stosb                                                   ;store remainder
  3213                                                          xor     al,al                                           ;null terminator
  3214                                                          stosb                                                   ;store terminator
  3215                                                          pop     es                                              ;restore non-volatile regs
  3216                                                          pop     edi                                             ;
  3217                                                          pop     ecx                                             ;
  3218                                                          ret                                                     ;return
  3219                                  ;-----------------------------------------------------------------------------------------------------------------------
  3220                                  ;
  3221                                  ;       Routine:        PutDayString
  3222                                  ;
  3223                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3224                                  ;                       structure at ds:ebx.
  3225                                  ;
  3226                                  ;       In:             DS:EBX  DATETIME address
  3227                                  ;                       DS:EDX  output buffer address
  3228                                  ;
  3229                                  ;-----------------------------------------------------------------------------------------------------------------------
  3230                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3231                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3232                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3233                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3234                                                          pop     ecx                                             ;
  3235                                                          ret                                                     ;return
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237                                  ;
  3238                                  ;       Routine:        PutHourString
  3239                                  ;
  3240                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3241                                  ;                       structure at ds:ebx.
  3242                                  ;
  3243                                  ;       In:             DS:EBX  DATETIME address
  3244                                  ;                       DS:EDX  output buffer address
  3245                                  ;
  3246                                  ;-----------------------------------------------------------------------------------------------------------------------
  3247                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3248                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3249                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3250                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3251                                                          pop     ecx                                             ;
  3252                                                          ret                                                     ;return
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  ;
  3255                                  ;       Routine:        PutMinuteString
  3256                                  ;
  3257                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3258                                  ;                       structure at ds:ebx.
  3259                                  ;
  3260                                  ;       In:             DS:EBX  DATETIME address
  3261                                  ;                       DS:EDX  output buffer address
  3262                                  ;
  3263                                  ;-----------------------------------------------------------------------------------------------------------------------
  3264                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3265                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3266                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3267                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3268                                                          pop     ecx                                             ;
  3269                                                          ret                                                     ;return
  3270                                  ;-----------------------------------------------------------------------------------------------------------------------
  3271                                  ;
  3272                                  ;       Routine:        PutMonthString
  3273                                  ;
  3274                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3275                                  ;                       structure at ds:ebx.
  3276                                  ;
  3277                                  ;       In:             DS:EBX  DATETIME address
  3278                                  ;                       DS:EDX  output buffer address
  3279                                  ;
  3280                                  ;-----------------------------------------------------------------------------------------------------------------------
  3281                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3282                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3283                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3284                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3285                                                          pop     ecx                                             ;
  3286                                                          ret                                                     ;return
  3287                                  ;-----------------------------------------------------------------------------------------------------------------------
  3288                                  ;
  3289                                  ;       Routine:        PutMonthNameString
  3290                                  ;
  3291                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3292                                  ;                       structure at ds:ebx.
  3293                                  ;
  3294                                  ;       In:             DS:EBX  DATETIME address
  3295                                  ;                       DS:EDX  output buffer address
  3296                                  ;
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3299                                                          push    edi                                             ;
  3300                                                          push    ds                                              ;
  3301                                                          push    es                                              ;
  3302                                                          push    ds                                              ;load data selector ...
  3303                                                          pop     es                                              ;... into extra segment
  3304                                                          mov     edi,edx                                         ;output buffer address
  3305                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3306                                                          dec     eax                                             ;month (0-11)
  3307                                                          shl     eax,2                                           ;offset into month name lookup table
  3308                                                          push    cs                                              ;load code selector ...
  3309                                                          pop     ds                                              ;... into data segment
  3310                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3311                                                          cld                                                     ;forward strings
  3312                                  .10                     lodsb                                                   ;name character
  3313                                                          stosb                                                   ;store in output buffer
  3314                                                          test    al,al                                           ;end of string?
  3315                                                          jnz     .10                                             ;no, continue
  3316                                                          pop     es                                              ;restore non-volatile regs
  3317                                                          pop     ds                                              ;
  3318                                                          pop     edi                                             ;
  3319                                                          pop     esi                                             ;
  3320                                                          ret                                                     ;return
  3321                                  ;-----------------------------------------------------------------------------------------------------------------------
  3322                                  ;
  3323                                  ;       Routine:        PutSecondString
  3324                                  ;
  3325                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3326                                  ;                       structure at ds:ebx.
  3327                                  ;
  3328                                  ;       In:             DS:EBX  DATETIME address
  3329                                  ;                       DS:EDX  output buffer address
  3330                                  ;
  3331                                  ;-----------------------------------------------------------------------------------------------------------------------
  3332                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3333                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3334                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3335                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3336                                                          pop     ecx                                             ;
  3337                                                          ret                                                     ;return
  3338                                  ;-----------------------------------------------------------------------------------------------------------------------
  3339                                  ;
  3340                                  ;       Routine:        PutTimeString
  3341                                  ;
  3342                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3343                                  ;                       structure at ds:ebx.
  3344                                  ;
  3345                                  ;       In:             DS:EBX  DATETIME address
  3346                                  ;                       DS:EDX  output buffer address
  3347                                  ;
  3348                                  ;-----------------------------------------------------------------------------------------------------------------------
  3349                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3350                                                          push    edi                                             ;
  3351                                                          push    es                                              ;
  3352                                                          push    ds                                              ;store data selector ...
  3353                                                          pop     es                                              ;... in extra segment reg
  3354                                                          mov     edi,edx                                         ;output buffer address
  3355                                                          mov     cl,10                                           ;divisor
  3356                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3357                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3358                                                          div     cl                                              ;ah = rem; al = quotient
  3359                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3360                                                          cld                                                     ;forward strings
  3361                                                          stosd                                                   ;store "mm/"nul
  3362                                                          dec     edi                                             ;address of terminator
  3363                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3364                                                          div     cl                                              ;ah = rem; al = quotient
  3365                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3366                                                          stosd                                                   ;store "dd/"nul
  3367                                                          dec     edi                                             ;address of terminator
  3368                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3369                                                          div     cl                                              ;ah = rem; al = quotient
  3370                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3371                                                          stosb                                                   ;store quotient
  3372                                                          mov     al,ah                                           ;remainder
  3373                                                          stosb                                                   ;store remainder
  3374                                                          xor     al,al                                           ;null terminator
  3375                                                          stosb                                                   ;store terminator
  3376                                                          pop     es                                              ;restore non-volatile regs
  3377                                                          pop     edi                                             ;
  3378                                                          pop     ecx                                             ;
  3379                                                          ret                                                     ;return
  3380                                  ;-----------------------------------------------------------------------------------------------------------------------
  3381                                  ;
  3382                                  ;       Routine:        PutWeekdayString
  3383                                  ;
  3384                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3385                                  ;                       structure at ds:ebx.
  3386                                  ;
  3387                                  ;       In:             DS:EBX  DATETIME address
  3388                                  ;                       DS:EDX  output buffer address
  3389                                  ;
  3390                                  ;-----------------------------------------------------------------------------------------------------------------------
  3391                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3392                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3393                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3394                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3395                                                          pop     ecx                                             ;
  3396                                                          ret                                                     ;return
  3397                                  ;-----------------------------------------------------------------------------------------------------------------------
  3398                                  ;
  3399                                  ;       Routine:        PutWeekdayNameString
  3400                                  ;
  3401                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3402                                  ;                       structure at ds:ebx.
  3403                                  ;
  3404                                  ;       In:             DS:EBX  DATETIME address
  3405                                  ;                       DS:EDX  output buffer address
  3406                                  ;
  3407                                  ;-----------------------------------------------------------------------------------------------------------------------
  3408                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3409                                                          push    edi                                             ;
  3410                                                          push    ds                                              ;
  3411                                                          push    es                                              ;
  3412                                                          push    ds                                              ;load data selector ...
  3413                                                          pop     es                                              ;... into extra segment
  3414                                                          mov     edi,edx                                         ;output buffer address
  3415                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3416                                                          shl     eax,2                                           ;offset into day name lookup table
  3417                                                          push    cs                                              ;load code selector ...
  3418                                                          pop     ds                                              ;... into data segment
  3419                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3420                                                          cld                                                     ;forward strings
  3421                                  .10                     lodsb                                                   ;name character
  3422                                                          stosb                                                   ;store in output buffer
  3423                                                          test    al,al                                           ;end of string?
  3424                                                          jnz     .10                                             ;no, continue
  3425                                                          pop     es                                              ;restore non-volatile regs
  3426                                                          pop     ds                                              ;
  3427                                                          pop     edi                                             ;
  3428                                                          pop     esi                                             ;
  3429                                                          ret                                                     ;return
  3430                                  ;-----------------------------------------------------------------------------------------------------------------------
  3431                                  ;
  3432                                  ;       Routine:        PutYearString
  3433                                  ;
  3434                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3435                                  ;                       structure at ds:ebx.
  3436                                  ;
  3437                                  ;       In:             DS:EBX  DATETIME address
  3438                                  ;                       DS:EDX  output buffer address
  3439                                  ;
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3442                                                          call    GetYear                                         ;ECX = YYYY
  3443                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3444                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3445                                                          pop     ecx                                             ;restore non-volatile regs
  3446                                                          ret                                                     ;return
  3447                                  ;-----------------------------------------------------------------------------------------------------------------------
  3448                                  ;
  3449                                  ;       Day Names
  3450                                  ;
  3451                                  ;-----------------------------------------------------------------------------------------------------------------------
  3452                                  czSunday                db      "Sunday",0
  3453                                  czMonday                db      "Monday",0
  3454                                  czTuesday               db      "Tuesday",0
  3455                                  czWednesday             db      "Wednesday",0
  3456                                  czThursday              db      "Thursday",0
  3457                                  czFriday                db      "Friday",0
  3458                                  czSaturday              db      "Saturday",0
  3459                                  ;-----------------------------------------------------------------------------------------------------------------------
  3460                                  ;
  3461                                  ;       Month Names
  3462                                  ;
  3463                                  ;-----------------------------------------------------------------------------------------------------------------------
  3464                                  czJanuary               db      "January",0
  3465                                  czFebruary              db      "February",0
  3466                                  czMarch                 db      "March",0
  3467                                  czApril                 db      "April",0
  3468                                  czMay                   db      "May",0
  3469                                  czJune                  db      "June",0
  3470                                  czJuly                  db      "July",0
  3471                                  czAugust                db      "August",0
  3472                                  czSeptember             db      "September",0
  3473                                  czOctober               db      "October",0
  3474                                  czNovember              db      "November",0
  3475                                  czDecember              db      "December",0
  3476                                  ;-----------------------------------------------------------------------------------------------------------------------
  3477                                  ;
  3478                                  ;       Day Names Lookup Table
  3479                                  ;
  3480                                  ;-----------------------------------------------------------------------------------------------------------------------
  3481                                                          align   4
  3482                                  tDayNames               equ     $
  3483                                                          dd      czSunday
  3484                                                          dd      czMonday
  3485                                                          dd      czTuesday
  3486                                                          dd      czWednesday
  3487                                                          dd      czThursday
  3488                                                          dd      czFriday
  3489                                                          dd      czSaturday
  3490                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3491                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493                                  ;
  3494                                  ;       Month Names Lookup Table
  3495                                  ;
  3496                                  ;-----------------------------------------------------------------------------------------------------------------------
  3497                                                          align   4
  3498                                  tMonthNames             equ     $
  3499                                                          dd      czJanuary
  3500                                                          dd      czFebruary
  3501                                                          dd      czMarch
  3502                                                          dd      czApril
  3503                                                          dd      czMay
  3504                                                          dd      czJune
  3505                                                          dd      czJuly
  3506                                                          dd      czAugust
  3507                                                          dd      czSeptember
  3508                                                          dd      czOctober
  3509                                                          dd      czNovember
  3510                                                          dd      czDecember
  3511                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3512                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3513                                  ;=======================================================================================================================
  3514                                  ;
  3515                                  ;       Memory Helper Routines
  3516                                  ;
  3517                                  ;       AllocateMemory
  3518                                  ;       FreeMemory
  3519                                  ;
  3520                                  ;=======================================================================================================================
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522                                  ;
  3523                                  ;       Routine:        AllocateMemory
  3524                                  ;
  3525                                  ;       Description:    This routine allocates a memory block for the given task.
  3526                                  ;
  3527                                  ;       In:             ECX     bytes of memory to allocate
  3528                                  ;
  3529                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3530                                  ;                               0       unable to allocate memory
  3531                                  ;
  3532                                  ;-----------------------------------------------------------------------------------------------------------------------
  3533                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3534                                                          push    ecx                                             ;
  3535                                                          push    esi                                             ;
  3536                                                          push    ds                                              ;
  3537                                  ;
  3538                                  ;       Address kernel memory structures
  3539                                  ;
  3540                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3541                                                          pop     ds                                              ;... into data segment reg
  3542                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3543                                  ;
  3544                                  ;       Set requested size to minimum block size if requested size is too small.
  3545                                  ;
  3546                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3547                                                          jae     .10                                             ;no, branch
  3548                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3549                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3550                                  ;
  3551                                  ;       Find the first free memory block large enough to satisfy the request.
  3552                                  ;
  3553                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3554                                  .20                     test    eax,eax                                         ;end of free block chain?
  3555                                                          jz      .220                                            ;yes, branch
  3556                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3557                                                          jbe     .30                                             ;yes, branch
  3558                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3559                                                          jmp     .20                                             ;continue
  3560                                  ;-----------------------------------------------------------------------------------------------------------------------
  3561                                  ;
  3562                                  ;       Address the previous and next free memory blocks.
  3563                                  ;
  3564                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3565                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3566                                  ;
  3567                                  ;       Remove the free memory block from the forward free memory block chain.
  3568                                  ;
  3569                                                          test    ebx,ebx                                         ;any previous free memory block?
  3570                                                          jz      .40                                             ;no, branch
  3571                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3572                                                          jmp     .50                                             ;continue
  3573                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3574                                  ;
  3575                                  ;       Remove the free memory block from the reverse free memory block chain.
  3576                                  ;
  3577                                  .50                     test    edx,edx                                         ;any next free memory block?
  3578                                                          jz      .60                                             ;no, branch
  3579                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3580                                                          jmp     .70                                             ;continue
  3581                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3582                                  ;-----------------------------------------------------------------------------------------------------------------------
  3583                                  ;
  3584                                  ;       Determine if the free memory block can be split.
  3585                                  ;
  3586                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3587                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3588                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3589                                                          jb      .150                                            ;no, branch
  3590                                  ;
  3591                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3592                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3593                                  ;       of the requested memory size.
  3594                                  ;
  3595                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3596                                                          mov     edx,eax                                         ;memory block address
  3597                                                          add     edx,ecx                                         ;address new new next contig block
  3598                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3599                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3600                                  ;
  3601                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3602                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3603                                  ;
  3604                                                          jecxz   .80                                             ;no next contig, branch
  3605                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3606                                                          jmp     .90                                             ;continue
  3607                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3608                                  ;
  3609                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3610                                  ;
  3611                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3612                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3613                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3614                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3615                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3616                                                          xor     ebx,ebx                                         ;zero register
  3617                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3618                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3619                                  ;
  3620                                  ;       Find the proper location in the free block chain for the new free block
  3621                                  ;
  3622                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3623                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3624                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3625                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3626                                                          jbe     .110                                            ;yes, branch
  3627                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3628                                                          jmp     .100                                            ;continue
  3629                                  ;
  3630                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3631                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3632                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3633                                  ;       block of hte next block, if there is one.
  3634                                  ;
  3635                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3636                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3637                                                          jecxz   .120                                            ;branch if no next block
  3638                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3639                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3640                                                          jmp     .130                                            ;continue
  3641                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3642                                  ;
  3643                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3644                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3645                                  ;       last user block pointers if necessary.
  3646                                  ;
  3647                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3648                                                          test    ebx,ebx                                         ;is there a previous block?
  3649                                                          jz      .140                                            ;no, branch
  3650                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3651                                                          jmp     .150                                            ;continue
  3652                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3653                                  ;
  3654                                  ;       Update the newly allocated block's owner and signature.
  3655                                  ;
  3656                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3657                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3658                                                          xor     edx,edx                                         ;zero register
  3659                                                          str     dx                                              ;load the task state register
  3660                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3661                                  ;
  3662                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3663                                  ;
  3664                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3665                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3666                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3667                                                          jb      .180                                            ;branch if block belongs to next task
  3668                                                          je      .170                                            ;branch if block belongs to this task
  3669                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3670                                                          jmp     .160                                            ;continue
  3671                                  ;
  3672                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3673                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3674                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3675                                  ;       place to insert the block.
  3676                                  ;
  3677                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3678                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3679                                                          jbe     .180                                            ;yes, branch
  3680                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3681                                                          test    ecx,ecx                                         ;end of chain?
  3682                                                          jz      .180                                            ;yes, branch
  3683                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3684                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3685                                                          je      .170                                            ;yes, continue search
  3686                                  ;
  3687                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3688                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3689                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3690                                  ;       do have a previous-block, we update that block's next-block pointer.
  3691                                  ;
  3692                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3693                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3694                                                          jecxz   .190                                            ;branch if no next-task block
  3695                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3696                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3697                                                          jmp     .200                                            ;continue
  3698                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3699                                  ;
  3700                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3701                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3702                                  ;       global first and/or last user-block pointers if necessary.
  3703                                  ;
  3704                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3705                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3706                                                          jz      .210                                            ;no, branch
  3707                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3708                                                          jmp     .220                                            ;continue
  3709                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3710                                  ;
  3711                                  ;       Restore registers and return to caller.
  3712                                  ;
  3713                                  .220                    pop     ds                                              ;restore non-volatie regs
  3714                                                          pop     esi                                             ;
  3715                                                          pop     ecx                                             ;
  3716                                                          pop     ebx                                             ;
  3717                                                          ret                                                     ;return
  3718                                  ;-----------------------------------------------------------------------------------------------------------------------
  3719                                  ;
  3720                                  ;       Routine:        FreeMemory
  3721                                  ;
  3722                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3723                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3724                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3725                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3726                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3727                                  ;
  3728                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3729                                  ;
  3730                                  ;       Out:            EAX     -1      invalid memory block
  3731                                  ;                               0       memory block freed
  3732                                  ;
  3733                                  ;-----------------------------------------------------------------------------------------------------------------------
  3734                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3735                                                          push    ecx                                             ;
  3736                                                          push    esi                                             ;
  3737                                                          push    edi                                             ;
  3738                                                          push    ds                                              ;
  3739                                                          push    es                                              ;
  3740                                  ;
  3741                                  ;       Address the root memory structure
  3742                                  ;
  3743                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3744                                                          pop     es                                              ;... into extra segment reg
  3745                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3746                                                          pop     ds                                              ;... into data segment reg
  3747                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3748                                                          mov     edi,edx                                         ;memory block address
  3749                                  ;
  3750                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3751                                  ;
  3752                                                          xor     eax,eax                                         ;indicate success
  3753                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3754                                                          je      .240                                            ;yes, branch
  3755                                                          dec     eax                                             ;indicate failure
  3756                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3757                                                          jne     .240                                            ;no, branch
  3758                                  ;-----------------------------------------------------------------------------------------------------------------------
  3759                                  ;
  3760                                  ;       Unlink the USER memory block.
  3761                                  ;
  3762                                  ;-----------------------------------------------------------------------------------------------------------------------
  3763                                  ;
  3764                                  ;       Set the block signature. Reset owner.
  3765                                  ;
  3766                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3767                                                          xor     eax,eax                                         ;zero register
  3768                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3769                                  ;
  3770                                  ;       Wipe user area.
  3771                                  ;
  3772                                                          push    edi                                             ;save block address
  3773                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3774                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3775                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3776                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3777                                                          rep     stosb                                           ;clear memory
  3778                                                          pop     edi                                             ;restore block address
  3779                                  ;
  3780                                  ;       Address the preceding and following USER memory blocks
  3781                                  ;
  3782                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3783                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3784                                  ;
  3785                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3786                                  ;       pointer to point to the USER block following this block.
  3787                                  ;
  3788                                                          test    ebx,ebx                                         ;is there a previous block?
  3789                                                          jz      .10                                             ;no, branch
  3790                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3791                                                          jmp     .20                                             ;continue
  3792                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3793                                  ;
  3794                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3795                                  ;       pointer to point to the USER block preceding this block.
  3796                                  ;
  3797                                  .20                     jecxz   .30                                             ;branch if no next block
  3798                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3799                                                          jmp     .40                                             ;continue
  3800                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3801                                  ;-----------------------------------------------------------------------------------------------------------------------
  3802                                  ;
  3803                                  ;       Merge with a previous contiguous FREE memory block.
  3804                                  ;
  3805                                  ;-----------------------------------------------------------------------------------------------------------------------
  3806                                  ;
  3807                                  ;       Address the preceding and following contiguous memory blocks.
  3808                                  ;
  3809                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3810                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3811                                  ;
  3812                                  ;       Verify we have a previous contiguous FREE block.
  3813                                  ;
  3814                                                          test    ebx,ebx                                         ;is there a previous block?
  3815                                                          jz      .100                                            ;no, branch
  3816                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3817                                                          jne     .100                                            ;no, branch
  3818                                  ;
  3819                                  ;       Update adjacent block's contiguous pointers.
  3820                                  ;
  3821                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3822                                                          jecxz   .50                                             ;branch if no next contiguous block
  3823                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3824                                                          jmp     .60                                             ;continue
  3825                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3826                                  ;
  3827                                  ;       Update the size of the merged FREE block.
  3828                                  ;
  3829                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3830                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3831                                  ;
  3832                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3833                                  ;
  3834                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3835                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3836                                                          rep     stosb                                           ;clear memory header
  3837                                                          mov     edi,ebx                                         ;current block is now previous block
  3838                                  ;-----------------------------------------------------------------------------------------------------------------------
  3839                                  ;
  3840                                  ;       Unlink the previous contiguous FREE memory block
  3841                                  ;
  3842                                  ;-----------------------------------------------------------------------------------------------------------------------
  3843                                  ;
  3844                                  ;       Address the preceding and following USER memory blocks
  3845                                  ;
  3846                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3847                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3848                                  ;
  3849                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3850                                  ;       block pointer.
  3851                                  ;
  3852                                                          test    ebx,ebx                                         ;is there a previous block?
  3853                                                          jz      .70                                             ;no, branch
  3854                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3855                                                          jmp     .80                                             ;branch
  3856                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3857                                  ;
  3858                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3859                                  ;       pointer.
  3860                                  ;
  3861                                  .80                     jecxz   .90                                             ;branch if no next block
  3862                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3863                                                          jmp     .100                                            ;continue
  3864                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3865                                  ;-----------------------------------------------------------------------------------------------------------------------
  3866                                  ;
  3867                                  ;       Merge with a following contiguous FREE memory block.
  3868                                  ;
  3869                                  ;-----------------------------------------------------------------------------------------------------------------------
  3870                                  ;
  3871                                  ;       Verify we have a following contiguous FREE block.
  3872                                  ;
  3873                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3874                                                          jecxz   .170                                            ;branch if no next contiguous block
  3875                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3876                                                          jne     .170                                            ;no, branch
  3877                                  ;
  3878                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3879                                  ;
  3880                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3881                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3882                                  ;
  3883                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3884                                  ;
  3885                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3886                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3887                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3888                                                          jz      .110                                            ;no, branch
  3889                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3890                                                          jmp     .120                                            ;continue
  3891                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3892                                  ;-----------------------------------------------------------------------------------------------------------------------
  3893                                  ;
  3894                                  ;       Unlink the following contiguous FREE memory block
  3895                                  ;
  3896                                  ;-----------------------------------------------------------------------------------------------------------------------
  3897                                  ;
  3898                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3899                                  ;
  3900                                  .120                    push    edi                                             ;save this block
  3901                                                          mov     edi,ecx                                         ;next contiguous block
  3902                                                          push    ecx                                             ;save next contiguous block
  3903                                  ;
  3904                                  ;       Address the preceding and following USER memory blocks
  3905                                  ;
  3906                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3907                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3908                                  ;
  3909                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3910                                  ;       block pointer.
  3911                                  ;
  3912                                                          test    ebx,ebx                                         ;is there a previous block?
  3913                                                          jz      .130                                            ;no, branch
  3914                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3915                                                          jmp     .140                                            ;branch
  3916                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3917                                  ;
  3918                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3919                                  ;       pointer.
  3920                                  ;
  3921                                  .140                    jecxz   .150                                            ;branch if no next block
  3922                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3923                                                          jmp     .160                                            ;continue
  3924                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3925                                  ;
  3926                                  ;       Clear next contiguous block's header
  3927                                  ;
  3928                                  .160                    pop     edi                                             ;next congiguous block pointer
  3929                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3930                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3931                                                          rep     stosb                                           ;clear memory header
  3932                                                          pop     edi                                             ;this block's pointer
  3933                                  ;-----------------------------------------------------------------------------------------------------------------------
  3934                                  ;
  3935                                  ;       Insert the final FREE block back into the block chain.
  3936                                  ;
  3937                                  ;-----------------------------------------------------------------------------------------------------------------------
  3938                                  ;
  3939                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3940                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3941                                  ;       all are smaller in size.
  3942                                  ;
  3943                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3944                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3945                                  .180                    jecxz   .190                                            ;exit if no ptr
  3946                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3947                                                          jb      .190                                            ;yes, branch
  3948                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3949                                                          jmp     .180                                            ;continue
  3950                                  ;
  3951                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3952                                  ;       larger free block. Update the next block's previous block pointer.
  3953                                  ;
  3954                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3955                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3956                                                          jecxz   .200                                            ;branch if no block found
  3957                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3958                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3959                                                          jmp     .210                                            ;continue
  3960                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3961                                  ;
  3962                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3963                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3964                                  ;       next pointer.
  3965                                  ;
  3966                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3967                                                          test    ebx,ebx                                         ;do we have a previous block?
  3968                                                          jz      .220                                            ;no, branch
  3969                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3970                                                          jmp     .230                                            ;continue
  3971                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3972                                  ;
  3973                                  ;       The memory free has completed.
  3974                                  ;
  3975                                  .230                    xor     eax,eax                                         ;indicate success
  3976                                  ;
  3977                                  ;       Restore and return.
  3978                                  ;
  3979                                  .240                    pop     es                                              ;restore non-volatile regs
  3980                                                          pop     ds                                              ;
  3981                                                          pop     edi                                             ;
  3982                                                          pop     esi                                             ;
  3983                                                          pop     ecx                                             ;
  3984                                                          pop     ebx                                             ;
  3985                                                          ret                                                     ;return
  3986                                  ;=======================================================================================================================
  3987                                  ;
  3988                                  ;       String Helper Routines
  3989                                  ;
  3990                                  ;       CompareMemory
  3991                                  ;       UpperCaseString
  3992                                  ;
  3993                                  ;=======================================================================================================================
  3994                                  ;-----------------------------------------------------------------------------------------------------------------------
  3995                                  ;
  3996                                  ;       Routine:        CompareMemory
  3997                                  ;
  3998                                  ;       Description:    This routine compares two byte arrays.
  3999                                  ;
  4000                                  ;       In:             DS:EDX  first source address
  4001                                  ;                       DS:EBX  second source address
  4002                                  ;                       ECX     comparison length
  4003                                  ;
  4004                                  ;       Out:            EDX     first source address
  4005                                  ;                       EBX     second source address
  4006                                  ;                       ECX     0       array 1 = array 2
  4007                                  ;                               <0      array 1 < array 2
  4008                                  ;                               >0      array 1 > array 2
  4009                                  ;
  4010                                  ;-----------------------------------------------------------------------------------------------------------------------
  4011                                  CompareMemory           push    esi                                             ;save non-volatile regs
  4012                                                          push    edi                                             ;
  4013                                                          push    es                                              ;
  4014                                                          push    ds                                              ;copy DS
  4015                                                          pop     es                                              ;... to ES
  4016                                                          mov     esi,edx                                         ;first source address
  4017                                                          mov     edi,ebx                                         ;second source address
  4018                                                          cld                                                     ;forward strings
  4019                                                          rep     cmpsb                                           ;compare bytes
  4020                                                          mov     al,0                                            ;default result
  4021                                                          jz      .10                                             ;branch if arrays equal
  4022                                                          mov     al,1                                            ;positive result
  4023                                                          jnc     .10                                             ;branch if target > source
  4024                                                          mov     al,-1                                           ;negative result
  4025                                  .10                     movsx   ecx,al                                          ;extend sign
  4026                                                          pop     es                                              ;restore non-volatile regs
  4027                                                          pop     edi                                             ;
  4028                                                          pop     esi                                             ;
  4029                                                          ret                                                     ;return
  4030                                  ;-----------------------------------------------------------------------------------------------------------------------
  4031                                  ;
  4032                                  ;       Routine:        UpperCaseString
  4033                                  ;
  4034                                  ;       Description:    This routine places all characters in the given string to upper case.
  4035                                  ;
  4036                                  ;       In:             DS:EDX  string address
  4037                                  ;
  4038                                  ;       Out:            EDX     string address
  4039                                  ;
  4040                                  ;-----------------------------------------------------------------------------------------------------------------------
  4041                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  4042                                                          mov     esi,edx                                         ;string address
  4043                                                          cld                                                     ;forward strings
  4044                                  .10                     lodsb                                                   ;string character
  4045                                                          test    al,al                                           ;null?
  4046                                                          jz      .20                                             ;yes, skip ahead
  4047                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4048                                                          jb      .10                                             ;no, continue
  4049                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4050                                                          ja      .10                                             ;no, continue
  4051                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4052                                                          mov     [esi-1],al                                      ;upper character
  4053                                                          jmp     .10                                             ;continue
  4054                                  .20                     pop     esi                                             ;restore non-volatile regs
  4055                                                          ret                                                     ;return
  4056                                  ;=======================================================================================================================
  4057                                  ;
  4058                                  ;       Console Helper Routines
  4059                                  ;
  4060                                  ;       FirstConsoleColumn
  4061                                  ;       GetConsoleChar
  4062                                  ;       GetConsoleString
  4063                                  ;       NextConsoleColumn
  4064                                  ;       NextConsoleRow
  4065                                  ;       PreviousConsoleColumn
  4066                                  ;       PutConsoleChar
  4067                                  ;       PutConsoleHexByte
  4068                                  ;       PutConsoleHexDword
  4069                                  ;       PutConsoleHexWord
  4070                                  ;       PutConsoleOIAChar
  4071                                  ;       PutConsoleOIAShift
  4072                                  ;       PutConsoleString
  4073                                  ;       Yield
  4074                                  ;
  4075                                  ;=======================================================================================================================
  4076                                  ;-----------------------------------------------------------------------------------------------------------------------
  4077                                  ;
  4078                                  ;       Routine:        FirstConsoleColumn
  4079                                  ;
  4080                                  ;       Description:    This routine resets the console column to start of the row.
  4081                                  ;
  4082                                  ;       In:             DS      OS data selector
  4083                                  ;
  4084                                  ;-----------------------------------------------------------------------------------------------------------------------
  4085                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4086                                                          mov     [wbConsoleColumn],al                            ;save column
  4087                                                          ret                                                     ;return
  4088                                  ;-----------------------------------------------------------------------------------------------------------------------
  4089                                  ;
  4090                                  ;       Routine:        GetConsoleChar
  4091                                  ;
  4092                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4093                                  ;
  4094                                  ;       Out:            AL      ASCII character code
  4095                                  ;                       AH      keyboard scan code
  4096                                  ;
  4097                                  ;-----------------------------------------------------------------------------------------------------------------------
  4098                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4099                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4100                                                          or      eax,eax                                         ;do we have a message?
  4101                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4102                                                          push    eax                                             ;save key codes
  4103                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4104                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4105                                                          pop     eax                                             ;restore key codes
  4106                                                          jne     GetConsoleChar                                  ;no, try again
  4107                                                          and     eax,0000ffffh                                   ;mask for key codes
  4108                                                          ret                                                     ;return
  4109                                  ;-----------------------------------------------------------------------------------------------------------------------
  4110                                  ;
  4111                                  ;       Routine:        GetConsoleString
  4112                                  ;
  4113                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4114                                  ;
  4115                                  ;       In:             DS:EDX  target buffer address
  4116                                  ;                       ECX     maximum number of characters to accept
  4117                                  ;                       BH      echo to terminal
  4118                                  ;                       BL      terminating character
  4119                                  ;
  4120                                  ;-----------------------------------------------------------------------------------------------------------------------
  4121                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4122                                                          push    esi                                             ;
  4123                                                          push    edi                                             ;
  4124                                                          push    es                                              ;
  4125                                                          push    ds                                              ;load data segment selector ...
  4126                                                          pop     es                                              ;... into extra segment register
  4127                                                          mov     edi,edx                                         ;edi = target buffer
  4128                                                          push    ecx                                             ;save maximum characters
  4129                                                          xor     al,al                                           ;zero register
  4130                                                          cld                                                     ;forward strings
  4131                                                          rep     stosb                                           ;zero fill buffer
  4132                                                          pop     ecx                                             ;maximum characters
  4133                                                          mov     edi,edx                                         ;edi = target buffer
  4134                                                          mov     esi,edx                                         ;esi = target buffer
  4135                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4136                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4137                                                          cmp     al,bl                                           ;is this the terminator?
  4138                                                          je      .50                                             ;yes, exit
  4139                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4140                                                          jne     .30                                             ;no, skip ahead
  4141                                                          cmp     esi,edi                                         ;at start of buffer?
  4142                                                          je      .20                                             ;yes, get next character
  4143                                                          dec     edi                                             ;backup target pointer
  4144                                                          mov     byte [edi],0                                    ;zero previous character
  4145                                                          inc     ecx                                             ;increment remaining chars
  4146                                                          test    bh,1                                            ;echo to console?
  4147                                                          jz      .20                                             ;no, get next character
  4148                                                          call    PreviousConsoleColumn                           ;backup console position
  4149                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4150                                                          call    PutConsoleChar                                  ;write space to console
  4151                                                          call    PlaceCursor                                     ;position the cursor
  4152                                                          jmp     .20                                             ;get next character
  4153                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4154                                                          jb      .20                                             ;no, get another character
  4155                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4156                                                          ja      .20                                             ;no, get another character
  4157                                                          stosb                                                   ;store character in buffer
  4158                                                          test    bh,1                                            ;echo to console?
  4159                                                          jz      .40                                             ;no, skip ahead
  4160                                                          call    PutConsoleChar                                  ;write character to console
  4161                                                          call    NextConsoleColumn                               ;advance console position
  4162                                                          call    PlaceCursor                                     ;position the cursor
  4163                                  .40                     dec     ecx                                             ;decrement remaining chars
  4164                                                          jmp     .10                                             ;next
  4165                                  .50                     xor     al,al                                           ;null
  4166                                                          stosb                                                   ;terminate buffer
  4167                                                          pop     es                                              ;restore non-volatile regs
  4168                                                          pop     edi                                             ;
  4169                                                          pop     esi                                             ;
  4170                                                          pop     ecx                                             ;
  4171                                                          ret                                                     ;return
  4172                                  ;-----------------------------------------------------------------------------------------------------------------------
  4173                                  ;
  4174                                  ;       Routine:        NextConsoleColumn
  4175                                  ;
  4176                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4177                                  ;                       incremented if the end of the current row is reached.
  4178                                  ;
  4179                                  ;       In:             DS      OS data selector
  4180                                  ;
  4181                                  ;-----------------------------------------------------------------------------------------------------------------------
  4182                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4183                                                          inc     al                                              ;increment column
  4184                                                          mov     [wbConsoleColumn],al                            ;save column
  4185                                                          cmp     al,ECONCOLS                                     ;end of row?
  4186                                                          jb      .10                                             ;no, skip ahead
  4187                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4188                                                          call    NextConsoleRow                                  ;line feed to next row
  4189                                  .10                     ret                                                     ;return
  4190                                  ;-----------------------------------------------------------------------------------------------------------------------
  4191                                  ;
  4192                                  ;       Routine:        NextConsoleRow
  4193                                  ;
  4194                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4195                                  ;
  4196                                  ;       In:             DS      OS data selector
  4197                                  ;
  4198                                  ;-----------------------------------------------------------------------------------------------------------------------
  4199                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4200                                                          inc     al                                              ;increment row
  4201                                                          mov     [wbConsoleRow],al                               ;save row
  4202                                                          cmp     al,ECONROWS                                     ;end of screen?
  4203                                                          jb      .10                                             ;no, skip ahead
  4204                                                          call    ScrollConsoleRow                                ;scroll up one row
  4205                                                          mov     al,[wbConsoleRow]                               ;row
  4206                                                          dec     al                                              ;decrement row
  4207                                                          mov     [wbConsoleRow],al                               ;save row
  4208                                  .10                     ret                                                     ;return
  4209                                  ;-----------------------------------------------------------------------------------------------------------------------
  4210                                  ;
  4211                                  ;       Routine:        PreviousConsoleColumn
  4212                                  ;
  4213                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4214                                  ;                       the column is set to the last position in the row and the row is decremented.
  4215                                  ;
  4216                                  ;       In:             DS      OS data selector
  4217                                  ;
  4218                                  ;-----------------------------------------------------------------------------------------------------------------------
  4219                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4220                                                          or      al,al                                           ;start of row?
  4221                                                          jnz     .10                                             ;no, skip ahead
  4222                                                          mov     ah,[wbConsoleRow]                               ;current row
  4223                                                          or      ah,ah                                           ;top of screen?
  4224                                                          jz      .20                                             ;yes, exit with no change
  4225                                                          dec     ah                                              ;decrement row
  4226                                                          mov     [wbConsoleRow],ah                               ;save row
  4227                                                          mov     al,ECONCOLS                                     ;set maximum column
  4228                                  .10                     dec     al                                              ;decrement column
  4229                                                          mov     [wbConsoleColumn],al                            ;save column
  4230                                  .20                     ret                                                     ;return
  4231                                  ;-----------------------------------------------------------------------------------------------------------------------
  4232                                  ;
  4233                                  ;       Routine:        PutConsoleChar
  4234                                  ;
  4235                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4236                                  ;
  4237                                  ;       In:             AL      ASCII character
  4238                                  ;                       DS      OS data selector
  4239                                  ;
  4240                                  ;-----------------------------------------------------------------------------------------------------------------------
  4241                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4242                                                          push    es                                              ;
  4243                                                          push    EGDTCGA                                         ;load CGA selector ...
  4244                                                          pop     es                                              ;... into extra segment reg
  4245                                                          mov     cl,[wbConsoleColumn]                            ;column
  4246                                                          mov     ch,[wbConsoleRow]                               ;row
  4247                                                          call    SetConsoleChar                                  ;put character at row, column
  4248                                                          pop     es                                              ;restore non-volatile regs
  4249                                                          pop     ecx                                             ;
  4250                                                          ret                                                     ;return
  4251                                  ;-----------------------------------------------------------------------------------------------------------------------
  4252                                  ;
  4253                                  ;       Routine:        PutConsoleHexByte
  4254                                  ;
  4255                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4256                                  ;
  4257                                  ;       In:             AL      byte value
  4258                                  ;                       CL      column
  4259                                  ;                       CH      row
  4260                                  ;                       DS      OS data selector
  4261                                  ;                       ES      CGA selector
  4262                                  ;
  4263                                  ;-----------------------------------------------------------------------------------------------------------------------
  4264                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  4265                                                          shr     al,4                                            ;hi-order nybble
  4266                                                          call    .10                                             ;make ASCII and store
  4267                                                          pop     eax                                             ;byte value
  4268                                                          and     al,0Fh                                          ;lo-order nybble
  4269                                  .10                     or      al,030h                                         ;apply ASCII zone
  4270                                                          cmp     al,03Ah                                         ;numeric?
  4271                                                          jb      .20                                             ;yes, skip ahead
  4272                                                          add     al,7                                            ;add ASCII offset for alpha
  4273                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4274                                                          ret                                                     ;return
  4275                                  ;-----------------------------------------------------------------------------------------------------------------------
  4276                                  ;
  4277                                  ;       Routine:        PutConsoleHexDword
  4278                                  ;
  4279                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4280                                  ;
  4281                                  ;       In:             EAX     value
  4282                                  ;                       CL      column
  4283                                  ;                       CH      row
  4284                                  ;                       DS      OS data selector
  4285                                  ;                       ES      CGA selector
  4286                                  ;
  4287                                  ;-----------------------------------------------------------------------------------------------------------------------
  4288                                  PutConsoleHexDword      push    eax
  4289                                                          shr     eax,16
  4290                                                          call    PutConsoleHexWord
  4291                                                          pop     eax
  4292                                                          call    PutConsoleHexWord
  4293                                                          ret
  4294                                  ;-----------------------------------------------------------------------------------------------------------------------
  4295                                  ;
  4296                                  ;       Routine:        PutConsoleHexWord
  4297                                  ;
  4298                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4299                                  ;
  4300                                  ;       In:             EAX     value
  4301                                  ;                       CL      column
  4302                                  ;                       CH      row
  4303                                  ;                       DS      OS data selector
  4304                                  ;                       ES      CGA selector
  4305                                  ;
  4306                                  ;-----------------------------------------------------------------------------------------------------------------------
  4307                                  PutConsoleHexWord       push    eax
  4308                                                          shr     eax,8
  4309                                                          call    PutConsoleHexByte
  4310                                                          pop     eax
  4311                                                          call    PutConsoleHexByte
  4312                                                          ret
  4313                                  ;-----------------------------------------------------------------------------------------------------------------------
  4314                                  ;
  4315                                  ;       Routine:        PutConsoleOIAChar
  4316                                  ;
  4317                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4318                                  ;
  4319                                  ;       In:             DS      OS data selector
  4320                                  ;
  4321                                  ;-----------------------------------------------------------------------------------------------------------------------
  4322                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4323                                                          push    ecx                                             ;
  4324                                                          push    esi                                             ;
  4325                                                          push    ds                                              ;
  4326                                                          push    es                                              ;
  4327                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4328                                                          pop     ds                                              ;... into data segment register
  4329                                                          push    EGDTCGA                                         ;load CGA selector ...
  4330                                                          pop     es                                              ;... into extra segment register
  4331                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4332                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4333                                                          mov     bl,0                                            ;starting column
  4334                                                          mov     ecx,6                                           ;maximum scan codes
  4335                                  .10                     push    ecx                                             ;save remaining count
  4336                                                          mov     ecx,ebx                                         ;row, column
  4337                                                          lodsb                                                   ;read scan code
  4338                                                          or      al,al                                           ;scan code present?
  4339                                                          jz      .20                                             ;no, skip ahead
  4340                                                          call    PutConsoleHexByte                               ;display scan code
  4341                                                          jmp     .30                                             ;continue
  4342                                  .20                     mov     al,' '                                          ;ASCII space
  4343                                                          call    SetConsoleChar                                  ;display space
  4344                                                          mov     al,' '                                          ;ASCII space
  4345                                                          call    SetConsoleChar                                  ;display space
  4346                                  .30                     add     bl,2                                            ;next column (+2)
  4347                                                          pop     ecx                                             ;restore remaining
  4348                                                          loop    .10                                             ;next code
  4349                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4350                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4351                                                          jb      .40                                             ;no, skip ahead
  4352                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4353                                                          ja      .40                                             ;no, skip ahead
  4354                                                          mov     ch,bh                                           ;OIA row
  4355                                                          mov     cl,40                                           ;character display column
  4356                                                          call    SetConsoleChar                                  ;display ASCII character
  4357                                  .40                     pop     es                                              ;restore non-volatile regs
  4358                                                          pop     ds                                              ;
  4359                                                          pop     esi                                             ;
  4360                                                          pop     ecx                                             ;
  4361                                                          pop     ebx                                             ;
  4362                                                          ret                                                     ;return
  4363                                  ;-----------------------------------------------------------------------------------------------------------------------
  4364                                  ;
  4365                                  ;       Routine:        PutConsoleOIAShift
  4366                                  ;
  4367                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4368                                  ;
  4369                                  ;       In:             BL      shift flags
  4370                                  ;                       BH      lock flags
  4371                                  ;                       DS      OS data selector
  4372                                  ;
  4373                                  ;-----------------------------------------------------------------------------------------------------------------------
  4374                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4375                                                          push    es                                              ;
  4376                                                          push    EGDTCGA                                         ;load CGA selector ...
  4377                                                          pop     es                                              ;... into ES register
  4378                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4379                                                          mov     al,EASCIISPACE                                  ;space is default character
  4380                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4381                                                          jz      .10                                             ;no, skip ahead
  4382                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4383                                  .10                     mov     cl,14                                           ;indicator column
  4384                                                          call    SetConsoleChar                                  ;display ASCII character
  4385                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4386                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4387                                                          jz      .20                                             ;no, skip ahead
  4388                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4389                                  .20                     mov     cl,64                                           ;indicator column
  4390                                                          call    SetConsoleChar                                  ;display ASCII character
  4391                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4392                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4393                                                          jz      .30                                             ;no, skip ahead
  4394                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4395                                  .30                     mov     cl,15                                           ;indicator column
  4396                                                          call    SetConsoleChar                                  ;display ASCII character
  4397                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4398                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4399                                                          jz      .40                                             ;no, skip ahead
  4400                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4401                                  .40                     mov     cl,63                                           ;indicator column
  4402                                                          call    SetConsoleChar                                  ;display ASCII character
  4403                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4404                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4405                                                          jz      .50                                             ;no, skip ahead
  4406                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4407                                  .50                     mov     cl,16                                           ;indicator column
  4408                                                          call    SetConsoleChar                                  ;display ASCII character
  4409                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4410                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4411                                                          jz      .60                                             ;no, skip ahead
  4412                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4413                                  .60                     mov     cl,62                                           ;indicator column
  4414                                                          call    SetConsoleChar                                  ;display ASCII character
  4415                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4416                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4417                                                          jz      .70                                             ;no, skip ahead
  4418                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4419                                  .70                     mov     cl,78                                           ;indicator column
  4420                                                          call    SetConsoleChar                                  ;display ASCII character
  4421                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4422                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4423                                                          jz      .80                                             ;no, skip ahead
  4424                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4425                                  .80                     mov     cl,77                                           ;indicator column
  4426                                                          call    SetConsoleChar                                  ;display ASCII character
  4427                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4428                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4429                                                          jz      .90                                             ;no, skip ahead
  4430                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4431                                  .90                     mov     cl,76                                           ;indicator column
  4432                                                          call    SetConsoleChar                                  ;display ASCII character
  4433                                                          pop     es                                              ;restore non-volatile regs
  4434                                                          pop     ecx                                             ;
  4435                                                          ret                                                     ;return
  4436                                  ;-----------------------------------------------------------------------------------------------------------------------
  4437                                  ;
  4438                                  ;       Routine:        PutConsoleString
  4439                                  ;
  4440                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4441                                  ;                       console position as needed.
  4442                                  ;
  4443                                  ;       In:             EDX     source address
  4444                                  ;                       DS      OS data selector
  4445                                  ;
  4446                                  ;-----------------------------------------------------------------------------------------------------------------------
  4447                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4448                                                          mov     esi,edx                                         ;source address
  4449                                                          cld                                                     ;forward strings
  4450                                  .10                     lodsb                                                   ;ASCII character
  4451                                                          or      al,al                                           ;end of string?
  4452                                                          jz      .40                                             ;yes, skip ahead
  4453                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4454                                                          jne     .20                                             ;no, skip ahead
  4455                                                          call    FirstConsoleColumn                              ;move to start of row
  4456                                                          jmp     .10                                             ;next character
  4457                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4458                                                          jne     .30                                             ;no, skip ahead
  4459                                                          call    NextConsoleRow                                  ;move to next row
  4460                                                          jmp     .10                                             ;next character
  4461                                  .30                     call    PutConsoleChar                                  ;output character to console
  4462                                                          call    NextConsoleColumn                               ;advance to next column
  4463                                                          jmp     .10                                             ;next character
  4464                                  .40                     pop     esi                                             ;restore non-volatile regs
  4465                                                          ret                                                     ;return
  4466                                  ;-----------------------------------------------------------------------------------------------------------------------
  4467                                  ;
  4468                                  ;       Routine:        Yield
  4469                                  ;
  4470                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4471                                  ;
  4472                                  ;-----------------------------------------------------------------------------------------------------------------------
  4473                                  Yield                   sti                                                     ;enable maskagle interrupts
  4474                                                          hlt                                                     ;halt until external interrupt
  4475                                                          ret                                                     ;return
  4476                                  ;=======================================================================================================================
  4477                                  ;
  4478                                  ;       Data-Type Conversion Helper Routines
  4479                                  ;
  4480                                  ;       PutMACString
  4481                                  ;       ByteToHex
  4482                                  ;       DecimalToUnsigned
  4483                                  ;       HexadecimalToUnsigned
  4484                                  ;       UnsignedToDecimalString
  4485                                  ;       UnsignedToHexadecimal
  4486                                  ;
  4487                                  ;=======================================================================================================================
  4488                                  ;-----------------------------------------------------------------------------------------------------------------------
  4489                                  ;
  4490                                  ;       Routine:        ByteToHex
  4491                                  ;
  4492                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of 8-bit binary input.
  4493                                  ;
  4494                                  ;       Input:          DS:ESI  source address of byte
  4495                                  ;                       ES:EDI  target address of ASCIIZ string
  4496                                  ;
  4497                                  ;-----------------------------------------------------------------------------------------------------------------------
  4498                                  ByteToHex               lodsb                                                   ;input byte
  4499                                                          push    eax                                             ;save input byte
  4500                                                          shr     al,4                                            ;hi-order nybble
  4501                                                          call    .10                                             ;make ASCII and store
  4502                                                          pop     eax                                             ;input byte
  4503                                                          and     al,00Fh                                         ;lo-order nybble
  4504                                  .10                     or      al,030h                                         ;ASCII numeral zone
  4505                                                          cmp     al,03Ah                                         ;'A' through 'F'?
  4506                                                          jb      .20                                             ;no, branch
  4507                                                          add     al,7                                            ;ajdust for 'A' through 'F'
  4508                                  .20                     stosb                                                   ;store to output buffer
  4509                                                          ret                                                     ;return
  4510                                  ;-----------------------------------------------------------------------------------------------------------------------
  4511                                  ;
  4512                                  ;       Routine:        DecimalToUnsigned
  4513                                  ;
  4514                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4515                                  ;
  4516                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4517                                  ;
  4518                                  ;       Output:         EAX     unsigned integer value
  4519                                  ;
  4520                                  ;-----------------------------------------------------------------------------------------------------------------------
  4521                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4522                                                          mov     esi,edx                                         ;source address
  4523                                                          xor     edx,edx                                         ;zero total
  4524                                  .10                     lodsb                                                   ;source byte
  4525                                                          cmp     al,','                                          ;comma?
  4526                                                          je      .10                                             ;yes, ignore
  4527                                                          test    al,al                                           ;end of string?
  4528                                                          jz      .30                                             ;yes, done
  4529                                                          cmp     al,'.'                                          ;decimal point?
  4530                                                          je      .30                                             ;yes, done
  4531                                                          cmp     al,'0'                                          ;numeral?
  4532                                                          jb      .20                                             ;no, invalid string
  4533                                                          cmp     al,'9'                                          ;numeral?
  4534                                                          ja      .20                                             ;no, invalid string
  4535                                                          and     al,00Fh                                         ;mask ASCII zone
  4536                                                          push    eax                                             ;save numeral
  4537                                                          shl     edx,1                                           ;total * 2
  4538                                                          mov     eax,edx                                         ;total * 2
  4539                                                          shl     edx,2                                           ;total * 8
  4540                                                          add     edx,eax                                         ;total * 10
  4541                                                          pop     eax                                             ;restore numeral
  4542                                                          add     edx,eax                                         ;accumulate decimal digit
  4543                                                          xor     eax,eax                                         ;zero register
  4544                                                          jmp     .10                                             ;next
  4545                                  .20                     xor     edx,edx                                         ;zero result on error
  4546                                  .30                     mov     eax,edx                                         ;result
  4547                                                          pop     esi                                             ;restore non-volatile regs
  4548                                                          ret                                                     ;return
  4549                                  ;-----------------------------------------------------------------------------------------------------------------------
  4550                                  ;
  4551                                  ;       Routine:        HexadecimalToUnsigned
  4552                                  ;
  4553                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4554                                  ;
  4555                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4556                                  ;
  4557                                  ;       Output:         EAX     unsigned integer value
  4558                                  ;
  4559                                  ;-----------------------------------------------------------------------------------------------------------------------
  4560                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4561                                                          mov     esi,edx                                         ;source address
  4562                                                          xor     edx,edx                                         ;zero register
  4563                                  .10                     lodsb                                                   ;source byte
  4564                                                          test    al,al                                           ;end of string?
  4565                                                          jz      .30                                             ;yes, branch
  4566                                                          cmp     al,'9'                                          ;hexadecimal?
  4567                                                          jna     .20                                             ;no, skip ahead
  4568                                                          sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  4569                                  .20                     and     eax,00Fh                                        ;remove ascii zone
  4570                                                          shl     edx,4                                           ;previous total x 16
  4571                                                          add     edx,eax                                         ;add prior value x 16
  4572                                                          jmp     .10                                             ;next
  4573                                  .30                     mov     eax,edx                                         ;result
  4574                                                          pop     esi                                             ;restore non-volatile regs
  4575                                                          ret                                                     ;return
  4576                                  ;-----------------------------------------------------------------------------------------------------------------------
  4577                                  ;
  4578                                  ;       Routine:        PutMACString
  4579                                  ;
  4580                                  ;       Description:    This routine creates an ASCIIZ string representing the MAC address at the source address
  4581                                  ;
  4582                                  ;       Input:          ECX     source address of byte
  4583                                  ;                       EDX     target address of ASCIIZ string
  4584                                  ;
  4585                                  ;-----------------------------------------------------------------------------------------------------------------------
  4586                                  PutMACString            push    ecx                                             ;save non-volatile regs
  4587                                                          push    esi                                             ;
  4588                                                          push    edi                                             ;
  4589                                                          mov     edi,edx                                         ;output buffer address
  4590                                                          mov     esi,ecx                                         ;source buffer address
  4591                                                          xor     ecx,ecx                                         ;zero ecx
  4592                                                          mov     cl,5                                            ;bytes that precede dashes
  4593                                  .10                     call    ByteToHex                                       ;store hexadecimal ASCII
  4594                                                          mov     al,EASCIIDASH                                   ;delimiter
  4595                                                          stosb                                                   ;store delimiter
  4596                                                          loop    .10                                             ;next
  4597                                                          call    ByteToHex                                       ;store hexadecimal ASCII
  4598                                                          xor     al,al                                           ;terminator
  4599                                                          stosb                                                   ;store terminator
  4600                                                          pop     edi                                             ;restore non-volatile regs
  4601                                                          pop     esi                                             ;
  4602                                                          pop     ecx                                             ;
  4603                                                          ret                                                     ;return
  4604                                  ;-----------------------------------------------------------------------------------------------------------------------
  4605                                  ;
  4606                                  ;       Routine:        UnsignedToDecimalString
  4607                                  ;
  4608                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4609                                  ;
  4610                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4611                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4612                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4613                                  ;                       ECX     32-bit binary
  4614                                  ;                       DS:EDX  output buffer address
  4615                                  ;
  4616                                  ;-----------------------------------------------------------------------------------------------------------------------
  4617                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4618                                                          push    ecx                                             ;
  4619                                                          push    edi                                             ;
  4620                                                          push    es                                              ;
  4621                                                          push    ds                                              ;load data selector
  4622                                                          pop     es                                              ;... into extra segment reg
  4623                                                          mov     edi,edx                                         ;output buffer address
  4624                                                          and     bh,00001111b                                    ;zero internal flags
  4625                                                          mov     edx,ecx                                         ;binary
  4626                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4627                                                          call    .30                                             ;divide and store
  4628                                                          mov     ecx,100000000                                   ;10^8 divisor
  4629                                                          call    .10                                             ;divide and store
  4630                                                          mov     ecx,10000000                                    ;10^7 divisor
  4631                                                          call    .30                                             ;divide and store
  4632                                                          mov     ecx,1000000                                     ;10^6 divisor
  4633                                                          call    .30                                             ;divide and store
  4634                                                          mov     ecx,100000                                      ;10^5 divisor
  4635                                                          call    .10                                             ;divide and store
  4636                                                          mov     ecx,10000                                       ;10^4 divisor
  4637                                                          call    .30                                             ;divide and store
  4638                                                          mov     ecx,1000                                        ;10^3 divisor
  4639                                                          call    .30                                             ;divide and store
  4640                                                          mov     ecx,100                                         ;10^2 divisor
  4641                                                          call    .10                                             ;divide and store
  4642                                                          mov     ecx,10                                          ;10^2 divisor
  4643                                                          call    .30                                             ;divide and store
  4644                                                          mov     eax,edx                                         ;10^1 remainder
  4645                                                          call    .40                                             ;store
  4646                                                          xor     al,al                                           ;null terminator
  4647                                                          stosb                                                   ;store in output buffer
  4648                                                          pop     es                                              ;restore non-volatile regs
  4649                                                          pop     edi                                             ;
  4650                                                          pop     ecx                                             ;
  4651                                                          pop     ebx                                             ;
  4652                                                          ret                                                     ;return
  4653                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4654                                                          jz      .30                                             ;no, branch
  4655                                                          test    bh,00000001b                                    ;trim leading zeros?
  4656                                                          jz      .20                                             ;no, store delim
  4657                                                          test    bh,00010000b                                    ;non-zero found?
  4658                                                          jz      .30                                             ;no, branch
  4659                                  .20                     mov     al,','                                          ;delimiter
  4660                                                          stosb                                                   ;store delimiter
  4661                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4662                                                          xor     edx,edx                                         ;zero hi-order
  4663                                                          div     ecx                                             ;divide by power of 10
  4664                                                          test    al,al                                           ;zero?
  4665                                                          jz      .50                                             ;yes, branch
  4666                                                          or      bh,00010000b                                    ;non-zero found
  4667                                  .40                     or      al,030h                                         ;ASCII zone
  4668                                                          stosb                                                   ;store digit
  4669                                                          ret                                                     ;return
  4670                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4671                                                          jz      .40                                             ;no, store and continue
  4672                                                          test    bh,00010000b                                    ;non-zero found?
  4673                                                          jnz     .40                                             ;yes, store and continue
  4674                                                          ret                                                     ;return
  4675                                  ;-----------------------------------------------------------------------------------------------------------------------
  4676                                  ;
  4677                                  ;       Routine:        UnsignedToHexadecimal
  4678                                  ;
  4679                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4680                                  ;
  4681                                  ;       Input:          DS:EDX  output buffer address
  4682                                  ;                       ECX     32-bit binary
  4683                                  ;
  4684                                  ;-----------------------------------------------------------------------------------------------------------------------
  4685                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4686                                                          mov     edi,edx                                         ;output buffer address
  4687                                                          mov     edx,ecx                                         ;32-bit unsigned
  4688                                                          xor     ecx,ecx                                         ;zero register
  4689                                                          mov     cl,8                                            ;nybble count
  4690                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4691                                                          mov     al,dl                                           ;????bbbb
  4692                                                          and     al,00Fh                                         ;mask out bits 4-7
  4693                                                          or      al,030h                                         ;mask in ascii zone
  4694                                                          cmp     al,03Ah                                         ;A through F?
  4695                                                          jb      .20                                             ;no, skip ahead
  4696                                                          add     al,7                                            ;41h through 46h
  4697                                  .20                     stosb                                                   ;store hexnum
  4698                                                          loop    .10                                             ;next nybble
  4699                                                          xor     al,al                                           ;zero reg
  4700                                                          stosb                                                   ;null terminate
  4701                                                          pop     edi                                             ;restore non-volatile regs
  4702                                                          ret                                                     ;return
  4703                                  ;=======================================================================================================================
  4704                                  ;
  4705                                  ;       Message Queue Helper Routines
  4706                                  ;
  4707                                  ;       GetMessage
  4708                                  ;       PutMessage
  4709                                  ;
  4710                                  ;=======================================================================================================================
  4711                                  ;-----------------------------------------------------------------------------------------------------------------------
  4712                                  ;
  4713                                  ;       Routine:        GetMessage
  4714                                  ;
  4715                                  ;       Description:    This routine reads and removes a message from the message queue.
  4716                                  ;
  4717                                  ;       Out:            EAX     lo-order message data
  4718                                  ;                       EDX     hi-order message data
  4719                                  ;
  4720                                  ;                       CY      0 = message read
  4721                                  ;                               1 = no message to read
  4722                                  ;
  4723                                  ;-----------------------------------------------------------------------------------------------------------------------
  4724                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4725                                                          push    ecx                                             ;
  4726                                                          push    ds                                              ;
  4727                                                          push    ELDTMQ                                          ;load message queue selector ...
  4728                                                          pop     ds                                              ;... into data segment register
  4729                                                          mov     ebx,[MQHead]                                    ;head ptr
  4730                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4731                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4732                                                          or      eax,edx                                         ;is queue empty?
  4733                                                          stc                                                     ;assume queue is emtpy
  4734                                                          jz      .20                                             ;yes, skip ahead
  4735                                                          xor     ecx,ecx                                         ;store zero
  4736                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4737                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4738                                                          add     ebx,8                                           ;next queue element
  4739                                                          and     ebx,03FCh                                       ;at end of queue?
  4740                                                          jnz     .10                                             ;no, skip ahead
  4741                                                          mov     bl,8                                            ;reset to 1st entry
  4742                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4743                                                          clc                                                     ;indicate message read
  4744                                  .20                     pop     ds                                              ;restore non-volatile regs
  4745                                                          pop     ecx                                             ;
  4746                                                          pop     ebx                                             ;
  4747                                                          ret                                                     ;return
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749                                  ;
  4750                                  ;       Routine:        PutMessage
  4751                                  ;
  4752                                  ;       Description:    This routine adda a message to the message queue.
  4753                                  ;
  4754                                  ;       In:             ECX     hi-order data word
  4755                                  ;                       EDX     lo-order data word
  4756                                  ;
  4757                                  ;       Out:            CY      0 = success
  4758                                  ;                               1 = fail: queue is full
  4759                                  ;
  4760                                  ;-----------------------------------------------------------------------------------------------------------------------
  4761                                  PutMessage              push    ds                                              ;save non-volatile regs
  4762                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4763                                                          pop     ds                                              ;... into data segment register
  4764                                                          mov     eax,[MQTail]                                    ;tail ptr
  4765                                                          cmp     dword [eax],0                                   ;is queue full?
  4766                                                          stc                                                     ;assume failure
  4767                                                          jne     .20                                             ;yes, cannot store
  4768                                                          mov     [eax],edx                                       ;store lo-order data
  4769                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4770                                                          add     eax,8                                           ;next queue element adr
  4771                                                          and     eax,03FCh                                       ;at end of queue?
  4772                                                          jnz     .10                                             ;no, skip ahead
  4773                                                          mov     al,8                                            ;reset to top of queue
  4774                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4775                                                          clc                                                     ;indicate success
  4776                                  .20                     pop     ds                                              ;restore non-volatile regs
  4777                                                          ret                                                     ;return
  4778                                  ;=======================================================================================================================
  4779                                  ;
  4780                                  ;       Memory-Mapped Video Routines
  4781                                  ;
  4782                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4783                                  ;
  4784                                  ;       ClearConsoleScreen
  4785                                  ;       ScrollConsoleRow
  4786                                  ;       SetConsoleChar
  4787                                  ;       SetConsoleString
  4788                                  ;
  4789                                  ;=======================================================================================================================
  4790                                  ;-----------------------------------------------------------------------------------------------------------------------
  4791                                  ;
  4792                                  ;       Routine:        ClearConsoleScreen
  4793                                  ;
  4794                                  ;       Description:    This routine clears the console (CGA) screen.
  4795                                  ;
  4796                                  ;-----------------------------------------------------------------------------------------------------------------------
  4797                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4798                                                          push    edi                                             ;
  4799                                                          push    ds                                              ;
  4800                                                          push    es                                              ;
  4801                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4802                                                          pop     ds                                              ;... into DS register
  4803                                                          push    EGDTCGA                                         ;load CGA selector ...
  4804                                                          pop     es                                              ;... into ES register
  4805                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4806                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4807                                                          xor     edi,edi                                         ;target offset
  4808                                                          cld                                                     ;forward strings
  4809                                                          rep     stosd                                           ;reset screen body
  4810                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4811                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4812                                                          rep     stosd                                           ;reset OIA line
  4813                                                          xor     al,al                                           ;zero register
  4814                                                          mov     [wbConsoleRow],al                               ;reset console row
  4815                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4816                                                          call    PlaceCursor                                     ;place cursor at current position
  4817                                                          pop     es                                              ;restore non-volatile regs
  4818                                                          pop     ds                                              ;
  4819                                                          pop     edi                                             ;
  4820                                                          pop     ecx                                             ;
  4821                                                          ret                                                     ;return
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823                                  ;
  4824                                  ;       Routine:        ScrollConsoleRow
  4825                                  ;
  4826                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4827                                  ;
  4828                                  ;-----------------------------------------------------------------------------------------------------------------------
  4829                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4830                                                          push    esi                                             ;
  4831                                                          push    edi                                             ;
  4832                                                          push    ds                                              ;
  4833                                                          push    es                                              ;
  4834                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4835                                                          pop     ds                                              ;... into DS
  4836                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4837                                                          pop     es                                              ;... into ES
  4838                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4839                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4840                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4841                                                          cld                                                     ;forward strings
  4842                                                          rep     movsd                                           ;move 24 lines up
  4843                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4844                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4845                                                          rep     stosd                                           ;clear bottom row
  4846                                                          pop     es                                              ;restore non-volatile regs
  4847                                                          pop     ds                                              ;
  4848                                                          pop     edi                                             ;
  4849                                                          pop     esi                                             ;
  4850                                                          pop     ecx                                             ;
  4851                                                          ret                                                     ;return
  4852                                  ;-----------------------------------------------------------------------------------------------------------------------
  4853                                  ;
  4854                                  ;       Routine:        SetConsoleChar
  4855                                  ;
  4856                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4857                                  ;
  4858                                  ;       In:             AL      ASCII character
  4859                                  ;                       CL      column
  4860                                  ;                       CH      row
  4861                                  ;                       ES      CGA selector
  4862                                  ;
  4863                                  ;       Out:            EAX     last target address written (ES:)
  4864                                  ;                       CL      column + 1
  4865                                  ;
  4866                                  ;-----------------------------------------------------------------------------------------------------------------------
  4867                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4868                                                          movzx   eax,ch                                          ;row
  4869                                                          mov     ah,ECONCOLS                                     ;cols/row
  4870                                                          mul     ah                                              ;row * cols/row
  4871                                                          add     al,cl                                           ;add column
  4872                                                          adc     ah,0                                            ;handle carry
  4873                                                          shl     eax,1                                           ;screen offset
  4874                                                          mov     [es:eax],dl                                     ;store character
  4875                                                          inc     cl                                              ;next column
  4876                                                          ret                                                     ;return
  4877                                  ;-----------------------------------------------------------------------------------------------------------------------
  4878                                  ;
  4879                                  ;       Routine:        SetConsoleString
  4880                                  ;
  4881                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4882                                  ;
  4883                                  ;       In:             ESI     source offset (DS:)
  4884                                  ;                       CL      column
  4885                                  ;                       CH      row
  4886                                  ;                       ES      CGA selector
  4887                                  ;
  4888                                  ;-----------------------------------------------------------------------------------------------------------------------
  4889                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4890                                                          cld                                                     ;forward strings
  4891                                  .10                     lodsb                                                   ;next ASCII character
  4892                                                          test    al,al                                           ;end of string?
  4893                                                          jz      .20                                             ;yes, branch
  4894                                                          call    SetConsoleChar                                  ;store character
  4895                                                          jmp     .10                                             ;continue
  4896                                  .20                     pop     esi                                             ;restore non-volatile regs
  4897                                                          ret                                                     ;return
  4898                                  ;=======================================================================================================================
  4899                                  ;
  4900                                  ;       Input/Output Routines
  4901                                  ;
  4902                                  ;       These routines read and/or write directly to ports.
  4903                                  ;
  4904                                  ;       GetBaseMemSize
  4905                                  ;       GetExtendedMemSize
  4906                                  ;       GetROMMemSize
  4907                                  ;       PlaceCursor
  4908                                  ;       PutPrimaryEndOfInt
  4909                                  ;       PutSecondaryEndOfInt
  4910                                  ;       ReadRealTimeClock
  4911                                  ;       ResetSystem
  4912                                  ;       SetKeyboardLamps
  4913                                  ;       WaitForKeyInBuffer
  4914                                  ;       WaitForKeyOutBuffer
  4915                                  ;
  4916                                  ;=======================================================================================================================
  4917                                  ;-----------------------------------------------------------------------------------------------------------------------
  4918                                  ;
  4919                                  ;       Routine:        GetBaseMemSize
  4920                                  ;
  4921                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4922                                  ;
  4923                                  ;       Output:         EAX     base RAM size in bytes
  4924                                  ;
  4925                                  ;-----------------------------------------------------------------------------------------------------------------------
  4926                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4927                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4928                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4929                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4930                                                          mov     ah,al                                           ;save base RAM high
  4931                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4932                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4933                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4934                                                          ret                                                     ;return to caller
  4935                                  ;-----------------------------------------------------------------------------------------------------------------------
  4936                                  ;
  4937                                  ;       Routine:        GetExtendedMemSize
  4938                                  ;
  4939                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4940                                  ;
  4941                                  ;       Output:         EAX     extended RAM size in bytes
  4942                                  ;
  4943                                  ;-----------------------------------------------------------------------------------------------------------------------
  4944                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4945                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4946                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4947                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4948                                                          mov     ah,al                                           ;save extended RAM high
  4949                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4950                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4951                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4952                                                          ret                                                     ;return to caller
  4953                                  ;-----------------------------------------------------------------------------------------------------------------------
  4954                                  ;
  4955                                  ;       Routine:        GetROMMemSize
  4956                                  ;
  4957                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4958                                  ;
  4959                                  ;       Output:         EAX     RAM size in bytes
  4960                                  ;
  4961                                  ;-----------------------------------------------------------------------------------------------------------------------
  4962                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4963                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4964                                                          ret                                                     ;return
  4965                                  ;-----------------------------------------------------------------------------------------------------------------------
  4966                                  ;
  4967                                  ;       Routine:        PlaceCursor
  4968                                  ;
  4969                                  ;       Description:    This routine positions the cursor on the console.
  4970                                  ;
  4971                                  ;       In:             DS      OS data selector
  4972                                  ;
  4973                                  ;-----------------------------------------------------------------------------------------------------------------------
  4974                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4975                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4976                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4977                                                          mul     ah                                              ;row offset
  4978                                                          add     al,[wbConsoleColumn]                            ;add column
  4979                                                          adc     ah,0                                            ;add overflow
  4980                                                          mov     ecx,eax                                         ;screen offset
  4981                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4982                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4983                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4984                                                          out     dx,al                                           ;select register
  4985                                                          inc     edx                                             ;data port
  4986                                                          mov     al,ch                                           ;hi-order cursor loc
  4987                                                          out     dx,al                                           ;store hi-order loc
  4988                                                          dec     edx                                             ;register select port
  4989                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4990                                                          out     dx,al                                           ;select register
  4991                                                          inc     edx                                             ;data port
  4992                                                          mov     al,cl                                           ;lo-order cursor loc
  4993                                                          out     dx,al                                           ;store lo-order loc
  4994                                                          pop     ecx                                             ;restore non-volatile regs
  4995                                                          ret                                                     ;return
  4996                                  ;-----------------------------------------------------------------------------------------------------------------------
  4997                                  ;
  4998                                  ;       Routine:        PutPrimaryEndOfInt
  4999                                  ;
  5000                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  5001                                  ;
  5002                                  ;-----------------------------------------------------------------------------------------------------------------------
  5003                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  5004                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5005                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  5006                                                          ret                                                     ;return
  5007                                  ;-----------------------------------------------------------------------------------------------------------------------
  5008                                  ;
  5009                                  ;       Routine:        PutSecondaryEndOfInt
  5010                                  ;
  5011                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  5012                                  ;
  5013                                  ;-----------------------------------------------------------------------------------------------------------------------
  5014                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  5015                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5016                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  5017                                                          ret                                                     ;return
  5018                                  ;-----------------------------------------------------------------------------------------------------------------------
  5019                                  ;
  5020                                  ;       Routine:        ReadRealTimeClock
  5021                                  ;
  5022                                  ;       Description:    This routine gets current date time from the real-time clock.
  5023                                  ;
  5024                                  ;       In:             DS:EBX  DATETIME structure
  5025                                  ;
  5026                                  ;-----------------------------------------------------------------------------------------------------------------------
  5027                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  5028                                                          push    edi                                             ;
  5029                                                          push    es                                              ;
  5030                                                          push    ds                                              ;store data selector ...
  5031                                                          pop     es                                              ;... in es register
  5032                                                          mov     edi,ebx                                         ;date-time structure
  5033                                                          mov     al,ERTCSECONDREG                                ;second register
  5034                                                          out     ERTCREGPORT,al                                  ;select second register
  5035                                                          in      al,ERTCDATAPORT                                 ;read second register
  5036                                                          cld                                                     ;forward strings
  5037                                                          stosb                                                   ;store second value
  5038                                                          mov     al,ERTCMINUTEREG                                ;minute register
  5039                                                          out     ERTCREGPORT,al                                  ;select minute register
  5040                                                          in      al,ERTCDATAPORT                                 ;read minute register
  5041                                                          stosb                                                   ;store minute value
  5042                                                          mov     al,ERTCHOURREG                                  ;hour register
  5043                                                          out     ERTCREGPORT,al                                  ;select hour register
  5044                                                          in      al,ERTCDATAPORT                                 ;read hour register
  5045                                                          stosb                                                   ;store hour value
  5046                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  5047                                                          out     ERTCREGPORT,al                                  ;select weekday register
  5048                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  5049                                                          stosb                                                   ;store weekday value
  5050                                                          mov     al,ERTCDAYREG                                   ;day register
  5051                                                          out     ERTCREGPORT,al                                  ;select day register
  5052                                                          in      al,ERTCDATAPORT                                 ;read day register
  5053                                                          stosb                                                   ;store day value
  5054                                                          mov     al,ERTCMONTHREG                                 ;month register
  5055                                                          out     ERTCREGPORT,al                                  ;select month register
  5056                                                          in      al,ERTCDATAPORT                                 ;read month register
  5057                                                          stosb                                                   ;store month value
  5058                                                          mov     al,ERTCYEARREG                                  ;year register
  5059                                                          out     ERTCREGPORT,al                                  ;select year register
  5060                                                          in      al,ERTCDATAPORT                                 ;read year register
  5061                                                          stosb                                                   ;store year value
  5062                                                          mov     al,ERTCCENTURYREG                               ;century register
  5063                                                          out     ERTCREGPORT,al                                  ;select century register
  5064                                                          in      al,ERTCDATAPORT                                 ;read century register
  5065                                                          stosb                                                   ;store century value
  5066                                                          mov     al,ERTCSTATUSREG                                ;status register
  5067                                                          out     ERTCREGPORT,al                                  ;select status register
  5068                                                          in      al,ERTCDATAPORT                                 ;read status register
  5069                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  5070                                                          jnz     .20                                             ;skip ahead if binary values
  5071                                                          mov     esi,ebx                                         ;date-time structure address
  5072                                                          mov     edi,ebx                                         ;date-time structure address
  5073                                                          mov     ecx,8                                           ;loop counter
  5074                                  .10                     lodsb                                                   ;BCD value
  5075                                                          mov     ah,al                                           ;BCD value
  5076                                                          and     al,00001111b                                    ;low-order decimal zone
  5077                                                          and     ah,11110000b                                    ;hi-order decimal zone
  5078                                                          shr     ah,1                                            ;hi-order decimal * 8
  5079                                                          add     al,ah                                           ;low-order + hi-order * 8
  5080                                                          shr     ah,2                                            ;hi-order decimal * 2
  5081                                                          add     al,ah                                           ;low-order + hi-order * 10
  5082                                                          stosb                                                   ;replace BCD with binary
  5083                                                          loop    .10                                             ;next value
  5084                                  .20                     pop     es                                              ;restore non-volatile regs
  5085                                                          pop     edi                                             ;
  5086                                                          pop     esi                                             ;
  5087                                                          ret                                                     ;return
  5088                                  ;-----------------------------------------------------------------------------------------------------------------------
  5089                                  ;
  5090                                  ;       Routine:        ResetSystem
  5091                                  ;
  5092                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5093                                  ;
  5094                                  ;       Out:            N/A     This routine does not return.
  5095                                  ;
  5096                                  ;-----------------------------------------------------------------------------------------------------------------------
  5097                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5098                                                          loop    $                                               ;clear interrupts
  5099                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5100                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5101                                  .10                     sti                                                     ;enable maskable interrupts
  5102                                                          hlt                                                     ;halt until interrupt
  5103                                                          jmp     .10                                             ;repeat until reset kicks in
  5104                                  ;-----------------------------------------------------------------------------------------------------------------------
  5105                                  ;
  5106                                  ;       Routine:        SetKeyboardLamps
  5107                                  ;
  5108                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5109                                  ;
  5110                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5111                                  ;
  5112                                  ;-----------------------------------------------------------------------------------------------------------------------
  5113                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5114                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5115                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5116                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5117                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5118                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5119                                                          mov     al,bh                                           ;set/reset lamps value
  5120                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5121                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5122                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5123                                                          ret                                                     ;return
  5124                                  ;-----------------------------------------------------------------------------------------------------------------------
  5125                                  ;
  5126                                  ;       Routine:        WaitForKeyInBuffer
  5127                                  ;
  5128                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5129                                  ;
  5130                                  ;       Out:            ZF      1 = Input buffer ready
  5131                                  ;                               0 = Input buffer not ready after timeout
  5132                                  ;
  5133                                  ;-----------------------------------------------------------------------------------------------------------------------
  5134                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5135                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5136                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5137                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5138                                                          loopnz  .10                                             ;yes, repeat till timeout
  5139                                                          pop     ecx                                             ;restore non-volatile regs
  5140                                                          ret                                                     ;return
  5141                                  ;-----------------------------------------------------------------------------------------------------------------------
  5142                                  ;
  5143                                  ;       Routine:        WaitForKeyOutBuffer
  5144                                  ;
  5145                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5146                                  ;
  5147                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5148                                  ;                               0 = Output buffer empty after timeout
  5149                                  ;
  5150                                  ;-----------------------------------------------------------------------------------------------------------------------
  5151                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5152                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5153                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5154                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5155                                                          loopz   .10                                             ;loop until output buffer bit
  5156                                                          pop     ecx                                             ;restore non-volatile regs
  5157                                                          ret                                                     ;return
  5158                                  ;-----------------------------------------------------------------------------------------------------------------------
  5159                                  ;
  5160                                  ;       End of the Kernel Function Library
  5161                                  ;
  5162                                  ;-----------------------------------------------------------------------------------------------------------------------
  5163                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5164                                  ;=======================================================================================================================
  5165                                  ;
  5166                                  ;       Console Task
  5167                                  ;
  5168                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5169                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5170                                  ;       screen and responds to user commands.
  5171                                  ;
  5172                                  ;=======================================================================================================================
  5173                                  ;-----------------------------------------------------------------------------------------------------------------------
  5174                                  ;
  5175                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5176                                  ;
  5177                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5178                                  ;
  5179                                  ;-----------------------------------------------------------------------------------------------------------------------
  5180                                  section                 constack                                                ;console task stack
  5181                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5182                                  ;-----------------------------------------------------------------------------------------------------------------------
  5183                                  ;
  5184                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5185                                  ;
  5186                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5187                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5188                                  ;       16 descriptors. Six are initially defined.
  5189                                  ;
  5190                                  ;-----------------------------------------------------------------------------------------------------------------------
  5191                                  section                 conldt                                                  ;console local descriptors
  5192                                                          dq      004093004780007Fh                               ;04 TSS alias
  5193                                                          dq      004093004700007Fh                               ;0c LDT alias
  5194                                                          dq      00409300400006FFh                               ;14 stack
  5195                                                          dq      00CF93000000FFFFh                               ;1c data
  5196                                                          dq      00409B0050000FFFh                               ;24 code
  5197                                                          dq      00409300480007FFh                               ;2c message queue
  5198                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5199                                  ;-----------------------------------------------------------------------------------------------------------------------
  5200                                  ;
  5201                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5202                                  ;
  5203                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5204                                  ;       segment. CS to console code.
  5205                                  ;
  5206                                  ;-----------------------------------------------------------------------------------------------------------------------
  5207                                  section                 contss                                                  ;console task state segment
  5208                                                          dd      0                                               ;00 back-link tss
  5209                                                          dd      0700h                                           ;04 esp ring 0
  5210                                                          dd      0014h                                           ;08 ss ring 0
  5211                                                          dd      0700h                                           ;0c esp ring 1
  5212                                                          dd      0014h                                           ;10 es ring 1
  5213                                                          dd      0700h                                           ;14 esp ring 2
  5214                                                          dd      0014h                                           ;18 ss ring 2
  5215                                                          dd      0                                               ;1c cr ring 3
  5216                                                          dd      0                                               ;20 eip
  5217                                                          dd      0200h                                           ;24 eflags
  5218                                                          dd      0                                               ;28 eax
  5219                                                          dd      0                                               ;2c ecx
  5220                                                          dd      0                                               ;30 edx
  5221                                                          dd      0                                               ;34 ebx
  5222                                                          dd      0700h                                           ;38 esp ring 3
  5223                                                          dd      0                                               ;3c ebp
  5224                                                          dd      0                                               ;40 esi
  5225                                                          dd      0                                               ;44 edi
  5226                                                          dd      001Ch                                           ;48 es
  5227                                                          dd      0024h                                           ;4c cs
  5228                                                          dd      0014h                                           ;50 ss ring 3
  5229                                                          dd      001Ch                                           ;54 ds
  5230                                                          dd      0                                               ;58 fs
  5231                                                          dd      0                                               ;5c gs
  5232                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5233                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5234                                  ;-----------------------------------------------------------------------------------------------------------------------
  5235                                  ;
  5236                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5237                                  ;
  5238                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5239                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5240                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5241                                  ;       event.
  5242                                  ;
  5243                                  ;-----------------------------------------------------------------------------------------------------------------------
  5244                                  section                 conmque                                                 ;console message queue
  5245                                                          dd      8                                               ;head pointer
  5246                                                          dd      8                                               ;tail pointer
  5247                                                          times   510 dd 0                                        ;queue elements
  5248                                  ;-----------------------------------------------------------------------------------------------------------------------
  5249                                  ;
  5250                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5251                                  ;
  5252                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5253                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5254                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5255                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5256                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5257                                  ;       board input, echoing to the console screen and responding to user commands.
  5258                                  ;
  5259                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5260                                  ;
  5261                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5262                                  ;                               |  Real Mode Interrupt Vectors                  |
  5263                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5264                                  ;                               |  Reserved BIOS Memory Area                    |
  5265                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5266                                  ;                               |  Shared Kernel Memory Area                    |
  5267                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5268                                  ;                               |  Global Descriptor Table (GDT)                |
  5269                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5270                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5271                                  ;                       002000  +-----------------------------------------------+
  5272                                  ;                               |  Interrupt Handlers                           |
  5273                                  ;                               |  Kernel Function Library                      |
  5274                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5275                                  ;                               |  Console Task Stack Area                      |
  5276                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5277                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5278                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5279                                  ;                               |  Console Task Task State Segment (TSS)        |
  5280                                  ;                       004800  +-----------------------------------------------+
  5281                                  ;                               |  Console Task Message Queue                   |
  5282                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5283                                  ;                               |  Console Task Code                            |
  5284                                  ;                               |  Console Task Constants                       |
  5285                                  ;                       006000  +===============================================+
  5286                                  ;
  5287                                  ;-----------------------------------------------------------------------------------------------------------------------
  5288                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5289                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5290                                  
  5291                                                          clearConsoleScreen                                      ;clear the console screen
  5292                                                          putConsoleString czTitle                                ;display startup message
  5293                                                          putConsoleString czBaseMem                              ;base memory label
  5294                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5295                                                          putConsoleString czKB                                   ;Kilobytes
  5296                                                          putConsoleString czNewLine                              ;new line
  5297                                                          putConsoleString czROMMem                               ;ROM memory label
  5298                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5299                                                          putConsoleString czKB                                   ;Kilobytes
  5300                                                          putConsoleString czNewLine                              ;new line
  5301                                                          putConsoleString czExtendedMem                          ;extended memory label
  5302                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5303                                                          putConsoleString czKB                                   ;Kilobytes
  5304                                                          putConsoleString czNewLine                              ;new line
  5305                                  
  5306                                                          call    ConInitializeNetwork
  5307                                  
  5308                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5309                                                          placeCursor                                             ;set CRT cursor location
  5310                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5311                                                          putConsoleString czNewLine                              ;newline
  5312                                  
  5313                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5314                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5315                                                          call    ConTakeToken                                    ;handle console input
  5316                                                          mov     edx,wzConsoleToken                              ;token buffer
  5317                                                          call    ConDetermineCommand                             ;determine command number
  5318                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5319                                                          jb      .20                                             ;yes, branch
  5320                                  
  5321                                                          putConsoleString czUnknownCommand                       ;display error message
  5322                                  
  5323                                                          jmp     .10                                             ;next command
  5324                                  .20                     shl     eax,2                                           ;index into jump table
  5325                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5326                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5327                                                          call    eax                                             ;call command handler
  5328                                                          jmp     .10                                             ;next command
  5329                                  ;-----------------------------------------------------------------------------------------------------------------------
  5330                                  ;
  5331                                  ;       Routine:        ConInitializeData
  5332                                  ;
  5333                                  ;       Description:    This routine initializes console task variables.
  5334                                  ;
  5335                                  ;-----------------------------------------------------------------------------------------------------------------------
  5336                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5337                                                          push    edi                                             ;
  5338                                                          push    es                                              ;
  5339                                  ;
  5340                                  ;       Initialize console work areas.
  5341                                  ;
  5342                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5343                                                          pop     es                                              ;... into extra segment register
  5344                                                          mov     edi,ECONDATA                                    ;OS console data address
  5345                                                          xor     al,al                                           ;initialization value
  5346                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5347                                                          cld                                                     ;forward strings
  5348                                                          rep     stosb                                           ;initialize data
  5349                                  ;
  5350                                  ;       Initialize heap size
  5351                                  ;
  5352                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5353                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5354                                  ;
  5355                                  ;       Initialize MEMROOT structure
  5356                                  ;
  5357                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5358                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5359                                                          xor     ecx,ecx                                         ;zero register
  5360                                                          mov     cl,4                                            ;count
  5361                                                          rep     stosd                                           ;store first/last contig and free addrs
  5362                                                          xor     eax,eax                                         ;zero register
  5363                                                          stosd                                                   ;zero first task block
  5364                                                          stosd                                                   ;zero last task block
  5365                                  ;
  5366                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5367                                  ;
  5368                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5369                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5370                                                          stosd                                                   ;store signature
  5371                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5372                                                          stosd                                                   ;store block size
  5373                                                          xor     ecx,ecx                                         ;zero register
  5374                                                          mov     cl,6                                            ;count
  5375                                                          xor     eax,eax                                         ;zero register
  5376                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5377                                  ;
  5378                                  ;       Read memory sizes from ROM
  5379                                  ;
  5380                                                          getROMMemSize                                           ;get ROM memory size
  5381                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5382                                                          mov     ecx,eax                                         ;integer param
  5383                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5384                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5385                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5386                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5387                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5388                                                          mov     ecx,eax                                         ;integer param
  5389                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5390                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5391                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5392                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5393                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5394                                                          mov     ecx,eax                                         ;integer param
  5395                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5396                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5397                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5398                                  ;
  5399                                  ;       Restore and return.
  5400                                  ;
  5401                                                          pop     es                                              ;restore non-volatile regs
  5402                                                          pop     edi                                             ;
  5403                                                          pop     ecx                                             ;
  5404                                                          ret                                                     ;return
  5405                                  ;-----------------------------------------------------------------------------------------------------------------------
  5406                                  ;
  5407                                  ;       Routine:        ConInitializeNetwork
  5408                                  ;
  5409                                  ;       Description:    This routine initializes console network variables.
  5410                                  ;
  5411                                  ;-----------------------------------------------------------------------------------------------------------------------
  5412                                  ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5413                                                          push    ecx                                             ;
  5414                                                          push    esi                                             ;
  5415                                                          push    edi                                             ;
  5416                                  ;
  5417                                  ;       Initialize ETHER structure.
  5418                                  ;
  5419                                                          mov     ebx,wsConsoleEther                              ;ETHER structure address
  5420                                                          call    ConInitEtherContext                             ;initialize ETHER struct
  5421                                                          mov     esi,ebx                                         ;ETHER structure address
  5422                                  
  5423                                  ;       Initialize variables.
  5424                                  ;       Construct PCI selector.
  5425                                  ;       Read PCI configuration data.
  5426                                  ;
  5427                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5428                                                          call    ConInitPCIContext                               ;initialize PCI struct
  5429                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5430                                                          call    ConReadPCIConfigData                            ;read the configuration data
  5431                                  ;
  5432                                  ;       Interpret PCI data value.
  5433                                  ;
  5434                                                          cmp     eax,-1		                                ;function defined?
  5435                                                          jne     .20                                             ;yes, branch
  5436                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  5437                                                          je      .40                                             ;yes, skip to next device
  5438                                                          jmp     short .30                                       ;no, skip to next function
  5439                                  ;
  5440                                  ;       Exit PCI probe if supported adapter found.
  5441                                  ;
  5442                                  .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5443                                                          je      .50                                             ;yes, found!
  5444                                  ;
  5445                                  ;       Next function.
  5446                                  ;
  5447                                  .30                     call    ConNextPCIFunction                              ;next function
  5448                                                          jb      .10                                             ;continue if no overflow
  5449                                  ;
  5450                                  ;       Next device, bus.
  5451                                  ;
  5452                                  .40                     call    ConNextPCIDevice                                ;next device, bus.
  5453                                                          jb      .10                                             ;continue if no overflow
  5454                                                          jmp     .60                                             ;done, ETHER not found
  5455                                  ;
  5456                                  ;       Set hardware flag and save selector.
  5457                                  ;
  5458                                  .50                     mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5459                                                          mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5460                                                          or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5461                                  
  5462                                                          putConsoleString czEthernetAdapterFound                 ;ethernet adapter found message
  5463                                  ;
  5464                                  ;       Save and report PCI data.
  5465                                  ;
  5466                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5467                                                          mov     ecx,eax
  5468                                                          mov     edx,czEthernetSelector
  5469                                                          call    ConPutLabeledHexValue
  5470                                  
  5471                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5472                                                          xor     al,al                                           ;register 0
  5473                                                          call    ConReadPCIRegister                              ;EAX = device id | vendor id
  5474                                                          mov     [esi+ETHER.devicevendor],eax                    ;save device id | vendor id
  5475                                                          mov     ecx,eax                                         ;vendor id
  5476                                                          mov     edx,czEthernetDeviceVendor                      ;string output buffer addr
  5477                                                          call    ConPutLabeledHexValue
  5478                                  
  5479                                                          mov     eax,[esi+ETHER.selector]
  5480                                                          mov     al,004h
  5481                                                          call    ConReadPCIRegister
  5482                                                          mov     [esi+ETHER.statuscommand],eax
  5483                                                          mov     ecx,eax
  5484                                                          mov     edx,czEthernetStatusCommand
  5485                                                          call    ConPutLabeledHexLine
  5486                                  
  5487                                                          mov     eax,[esi+ETHER.selector]
  5488                                                          mov     al,010h
  5489                                                          call    ConReadPCIRegister
  5490                                                          mov     [esi+ETHER.mmio],eax
  5491                                                          mov     ecx,eax
  5492                                                          mov     edx,czEthernetMemoryAddr
  5493                                                          call    ConPutLabeledHexValue
  5494                                  
  5495                                                          mov     eax,[esi+ETHER.selector]
  5496                                                          mov     al,018h
  5497                                                          call    ConReadPCIRegister
  5498                                                          and     eax,-8                                          ;mask out bits 2:0
  5499                                                          mov     [esi+ETHER.port],eax
  5500                                                          mov     ecx,eax
  5501                                                          mov     edx,czEthernetPort
  5502                                                          call    ConPutLabeledHexValue
  5503                                  
  5504                                                          mov     eax,[esi+ETHER.selector]                         ;ethernet device PCI selector
  5505                                                          mov     al,03Ch                                         ;interrupt number port addr
  5506                                                          call    ConReadPCIRegister
  5507                                                          mov     [esi+ETHER.irq],al                              ;save IRQ
  5508                                                          movzx   ecx,al                                          ;convert to dword
  5509                                                          mov     edx,czEthernetIRQ                               ;prompt string
  5510                                                          call    ConPutLabeledDecLine                            ;write PCI value to console
  5511                                  ;
  5512                                  ;       Read MAC address from MMIO
  5513                                  ;
  5514                                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  5515                                                          jecxz   .60
  5516                                                          add     ecx,05400h                                      ;MAC address offset
  5517                                                          mov     eax,[ecx]                                       ;MAC address lo-order dword
  5518                                                          mov     [esi+ETHER.mac],eax                             ;save
  5519                                                          mov     ax,[ecx+4]                                      ;MAC address hi-order word
  5520                                                          mov     [esi+ETHER.mac+4],ax                            ;save
  5521                                                          lea     ecx,[esi+ETHER.mac]                             ;address of MAC bytes
  5522                                                          putMACString wzConsoleToken                             ;output MAC ASCIIZ string
  5523                                                          mov     edx,czEthernetMAC                               ;label string
  5524                                                          call    ConPutLabeledLine                               ;put labeled string
  5525                                  ;
  5526                                  ;       Restore and return.
  5527                                  ;
  5528                                  .60                     pop     edi                                             ;restore non-volatile regs
  5529                                                          pop     esi                                             ;
  5530                                                          pop     ecx                                             ;
  5531                                                          pop     ebx                                             ;
  5532                                                          ret                                                     ;return
  5533                                  ;-----------------------------------------------------------------------------------------------------------------------
  5534                                  ;       In:             ECX     binary value
  5535                                  ;                       EDX     prompt string address
  5536                                  ;-----------------------------------------------------------------------------------------------------------------------
  5537                                  ConPutLabeledDecLine    call    ConPutLabeledDecValue
  5538                                                          call    ConPutNewLine
  5539                                                          ret
  5540                                  ConPutLabeledDecValue   push    ebx
  5541                                                          push    edx
  5542                                                          mov     edx,wzConsoleToken
  5543                                                          unsignedToDecimalString
  5544                                                          pop     edx
  5545                                                          mov     bh,1
  5546                                                          call    ConPutLabeledString
  5547                                                          pop     ebx
  5548                                                          ret
  5549                                  ConPutLabeledHexLine    call    ConPutLabeledHexValue
  5550                                                          call    ConPutNewLine
  5551                                                          ret
  5552                                  ConPutLabeledHexValue   push    edx                                             ;save prompt string address
  5553                                                          mov     edx,wzConsoleToken                              ;output buffer address
  5554                                                          unsignedToHexadecimal                                   ;convert binary to ASCII hex
  5555                                                          pop     edx                                             ;prompt string address
  5556                                                          call    ConPutLabeledString                             ;output labeled string to console
  5557                                                          ret                                                     ;return
  5558                                  ;-----------------------------------------------------------------------------------------------------------------------
  5559                                  ;       In:             EDX     prompt string address
  5560                                  ;-----------------------------------------------------------------------------------------------------------------------
  5561                                  ConPutLabeledLine       call    ConPutLabeledString
  5562                                                          call    ConPutNewLine
  5563                                                          ret
  5564                                  ConPutLabeledString     putConsoleString                                        ;put prompt string
  5565                                                          putConsoleString wzConsoleToken                         ;put value string
  5566                                                          ret                                                     ;return
  5567                                  ConPutNewLine           putConsoleString czNewLine
  5568                                                          ret
  5569                                  ;-----------------------------------------------------------------------------------------------------------------------
  5570                                  ;
  5571                                  ;       Routine:        ConReadPCIRegister
  5572                                  ;
  5573                                  ;       Description:    This routine reads a PCI register
  5574                                  ;
  5575                                  ;       In:             EAX     PCI register
  5576                                  ;
  5577                                  ;       Out:            EAX     PCI register value
  5578                                  ;-----------------------------------------------------------------------------------------------------------------------
  5579                                  ConReadPCIRegister      mov     dh,EPCIPORTCONFIGADDRHI                         ;hi-order PCI configuration addr port
  5580                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;lo-order PCI configuration addr port
  5581                                                          out     dx,eax                                          ;select PCI register
  5582                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5583                                                          in      eax,dx                                          ;read register
  5584                                                          ret                                                     ;return
  5585                                  ;-----------------------------------------------------------------------------------------------------------------------
  5586                                  ;
  5587                                  ;       Routine:        ConInitEtherContext
  5588                                  ;
  5589                                  ;       Description:    This routine zeros an ETHER structure
  5590                                  ;
  5591                                  ;       In:             DS:EBX  ETHER structure address
  5592                                  ;
  5593                                  ;-----------------------------------------------------------------------------------------------------------------------
  5594                                  ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  5595                                                          push    edi                                             ;
  5596                                                          push    es                                              ;
  5597                                  ;
  5598                                  ;       Zero context.
  5599                                  ;
  5600                                                          push    ds                                              ;load data segment...
  5601                                                          pop     es                                              ;...into extra segment
  5602                                                          mov     edi,ebx                                         ;ETHER structure offset
  5603                                                          mov     ecx,EETHERLEN                                   ;ETHER structure length
  5604                                                          xor     al,al                                           ;zero
  5605                                                          cld                                                     ;forward strings
  5606                                                          rep     stosb                                           ;zero structure members
  5607                                  ;
  5608                                  ;       Restore and return.
  5609                                  ;
  5610                                                          pop     es                                              ;restore non-volatile regs
  5611                                                          pop     edi                                             ;
  5612                                                          pop     ecx                                             ;
  5613                                                          ret                                                     ;return
  5614                                  ;-----------------------------------------------------------------------------------------------------------------------
  5615                                  ;
  5616                                  ;       Routine:        ConTakeToken
  5617                                  ;
  5618                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5619                                  ;
  5620                                  ;       In:             DS:EDX  source buffer address
  5621                                  ;                       DS:EBX  target buffer address
  5622                                  ;
  5623                                  ;       Out:            DS:EDX  source buffer address
  5624                                  ;                       DS:EBX  target buffer address
  5625                                  ;
  5626                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5627                                  ;
  5628                                  ;-----------------------------------------------------------------------------------------------------------------------
  5629                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5630                                                          push    edi                                             ;
  5631                                                          push    es                                              ;
  5632                                                          push    ds                                              ;load data segment selector ...
  5633                                                          pop     es                                              ;... into extra segment reg
  5634                                                          mov     esi,edx                                         ;source buffer address
  5635                                                          mov     edi,ebx                                         ;target buffer address
  5636                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5637                                                          cld                                                     ;forward strings
  5638                                  .10                     lodsb                                                   ;load byte
  5639                                                          cmp     al,EASCIISPACE                                  ;space?
  5640                                                          je      .10                                             ;yes, continue
  5641                                                          test    al,al                                           ;end of line?
  5642                                                          jz      .40                                             ;yes, branch
  5643                                  .20                     stosb                                                   ;store byte
  5644                                                          lodsb                                                   ;load byte
  5645                                                          test    al,al                                           ;end of line?
  5646                                                          jz      .40                                             ;no, continue
  5647                                                          cmp     al,EASCIISPACE                                  ;space?
  5648                                                          jne     .20                                             ;no, continue
  5649                                  .30                     lodsb                                                   ;load byte
  5650                                                          cmp     al,EASCIISPACE                                  ;space?
  5651                                                          je      .30                                             ;yes, continue
  5652                                                          dec     esi                                             ;pre-position
  5653                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5654                                                          mov     edi,edx                                         ;source buffer address
  5655                                  .50                     lodsb                                                   ;remaining byte
  5656                                                          stosb                                                   ;move to front of buffer
  5657                                                          test    al,al                                           ;end of line?
  5658                                                          jnz     .50                                             ;no, continue
  5659                                                          pop     es                                              ;restore non-volatile regs
  5660                                                          pop     edi                                             ;
  5661                                                          pop     esi                                             ;
  5662                                                          ret                                                     ;return
  5663                                  ;-----------------------------------------------------------------------------------------------------------------------
  5664                                  ;
  5665                                  ;       Routine:        ConDetermineCommand
  5666                                  ;
  5667                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5668                                  ;
  5669                                  ;       input:          DS:EDX  command address
  5670                                  ;
  5671                                  ;       output:         EAX     >=0     = command nbr
  5672                                  ;                               0       = unknown command
  5673                                  ;
  5674                                  ;-----------------------------------------------------------------------------------------------------------------------
  5675                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5676                                                          push    ecx                                             ;
  5677                                                          push    esi                                             ;
  5678                                                          push    edi                                             ;
  5679                                  
  5680                                                          upperCaseString                                         ;upper-case string at EDX
  5681                                  
  5682                                                          mov     esi,tConCmdTbl                                  ;commands table
  5683                                                          xor     edi,edi                                         ;intialize command number
  5684                                                          cld                                                     ;forward strings
  5685                                  .10                     lodsb                                                   ;command length
  5686                                                          movzx   ecx,al                                          ;command length
  5687                                                          jecxz   .20                                             ;branch if end of table
  5688                                                          mov     ebx,esi                                         ;table entry address
  5689                                                          add     esi,ecx                                         ;next table entry address
  5690                                  
  5691                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5692                                  
  5693                                                          jecxz   .20                                             ;branch if equal
  5694                                                          inc     edi                                             ;increment command nbr
  5695                                                          jmp     .10                                             ;repeat
  5696                                  .20                     mov     eax,edi                                         ;command number
  5697                                                          pop     edi                                             ;restore non-volatile regs
  5698                                                          pop     esi                                             ;
  5699                                                          pop     ecx                                             ;
  5700                                                          pop     ebx                                             ;
  5701                                                          ret                                                     ;return
  5702                                  ;-----------------------------------------------------------------------------------------------------------------------
  5703                                  ;
  5704                                  ;       Routine:        ConClear
  5705                                  ;
  5706                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5707                                  ;
  5708                                  ;-----------------------------------------------------------------------------------------------------------------------
  5709                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5710                                                          ret                                                     ;return
  5711                                  ;-----------------------------------------------------------------------------------------------------------------------
  5712                                  ;
  5713                                  ;       Routine:        ConDate
  5714                                  ;
  5715                                  ;       Description:    This routine handles the DATE command.
  5716                                  ;
  5717                                  ;-----------------------------------------------------------------------------------------------------------------------
  5718                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5719                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5720                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5721                                                          putConsoleString  czNewLine                             ;write newline to console
  5722                                                          ret                                                     ;return
  5723                                  ;-----------------------------------------------------------------------------------------------------------------------
  5724                                  ;
  5725                                  ;       Routine:        ConDay
  5726                                  ;
  5727                                  ;       Description:    This routine handles the DAY command.
  5728                                  ;
  5729                                  ;-----------------------------------------------------------------------------------------------------------------------
  5730                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5731                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5732                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5733                                                          putConsoleString  czNewLine                             ;write newline to console
  5734                                                          ret                                                     ;return
  5735                                  ;-----------------------------------------------------------------------------------------------------------------------
  5736                                  ;
  5737                                  ;       Routine:        ConExit
  5738                                  ;
  5739                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5740                                  ;
  5741                                  ;-----------------------------------------------------------------------------------------------------------------------
  5742                                  ConExit                 resetSystem                                             ;issue system reset
  5743                                                          ret                                                     ;return
  5744                                  ;-----------------------------------------------------------------------------------------------------------------------
  5745                                  ;
  5746                                  ;       Routine:        ConFree
  5747                                  ;
  5748                                  ;       Description:    This routine handles the FREE command.
  5749                                  ;
  5750                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5751                                  ;
  5752                                  ;-----------------------------------------------------------------------------------------------------------------------
  5753                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5754                                                          push    ecx                                             ;
  5755                                                          push    esi                                             ;
  5756                                                          push    edi                                             ;
  5757                                  ;
  5758                                  ;       Get address parameter
  5759                                  ;
  5760                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5761                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5762                                                          call    ConTakeToken                                    ;take first param as token
  5763                                  ;
  5764                                  ;       Convert input parameter from hexadecimal string to binary
  5765                                  ;
  5766                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5767                                                          je      .10                                             ;no, branch
  5768                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5769                                  
  5770                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5771                                  
  5772                                                          test    eax,eax                                         ;valid parameter?
  5773                                                          jz      .10                                             ;no, branch
  5774                                  ;
  5775                                  ;       Free memory block
  5776                                  ;
  5777                                                          freeMemory eax                                          ;free memory
  5778                                  
  5779                                                          cmp     eax,-1                                          ;memory freed?
  5780                                                          je      .10                                             ;no, branch
  5781                                  ;
  5782                                  ;       Indicate memory freed
  5783                                  ;
  5784                                                          putConsoleString czOK                                   ;indicate success
  5785                                  ;
  5786                                  ;       Restore and return
  5787                                  ;
  5788                                  .10                     pop     edi                                             ;restore non-volatile regs
  5789                                                          pop     esi                                             ;
  5790                                                          pop     ecx                                             ;
  5791                                                          pop     ebx                                             ;
  5792                                                          ret                                                     ;return
  5793                                  ;-----------------------------------------------------------------------------------------------------------------------
  5794                                  ;
  5795                                  ;       Routine:        ConHour
  5796                                  ;
  5797                                  ;       Description:    This routine Handles the HOUR command.
  5798                                  ;
  5799                                  ;-----------------------------------------------------------------------------------------------------------------------
  5800                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5801                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5802                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5803                                                          putConsoleString  czNewLine                             ;write newline to console
  5804                                                          ret                                                     ;return
  5805                                  ;-----------------------------------------------------------------------------------------------------------------------
  5806                                  ;
  5807                                  ;       Routine:        ConInt6
  5808                                  ;
  5809                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5810                                  ;
  5811                                  ;-----------------------------------------------------------------------------------------------------------------------
  5812                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5813                                                          ret                                                     ;return (not executed)
  5814                                  ;-----------------------------------------------------------------------------------------------------------------------
  5815                                  ;
  5816                                  ;       Routine:        ConMalloc
  5817                                  ;
  5818                                  ;       Description:    This routine handles the MALLOC command.
  5819                                  ;
  5820                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5821                                  ;
  5822                                  ;-----------------------------------------------------------------------------------------------------------------------
  5823                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5824                                                          push    ecx                                             ;
  5825                                                          push    esi                                             ;
  5826                                                          push    edi                                             ;
  5827                                  ;
  5828                                  ;       Get size parameter
  5829                                  ;
  5830                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5831                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5832                                                          call    ConTakeToken                                    ;take first param as token
  5833                                  ;
  5834                                  ;       Convert input parameter from decimal string to binary
  5835                                  ;
  5836                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5837                                                          je      .10                                             ;no, branch
  5838                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5839                                  
  5840                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5841                                  
  5842                                                          test    eax,eax                                         ;valid parameter?
  5843                                                          jz      .10                                             ;no, branch
  5844                                  ;
  5845                                  ;       Allocate memory block
  5846                                  ;
  5847                                                          allocateMemory eax                                      ;allocate memory
  5848                                  
  5849                                                          test    eax,eax                                         ;memory allocated?
  5850                                                          jz      .10                                             ;no, branch
  5851                                  ;
  5852                                  ;       Report allocated memory block address
  5853                                  ;
  5854                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5855                                                          mov     ecx,eax                                         ;memory address
  5856                                  
  5857                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5858                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5859                                                          putConsoleString czNewLine                              ;display new line
  5860                                  
  5861                                  .10                     pop     edi                                             ;restore non-volatile regs
  5862                                                          pop     esi                                             ;
  5863                                                          pop     ecx                                             ;
  5864                                                          pop     ebx                                             ;
  5865                                                          ret                                                     ;return
  5866                                  ;-----------------------------------------------------------------------------------------------------------------------
  5867                                  ;
  5868                                  ;       Routine:        ConMem
  5869                                  ;
  5870                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5871                                  ;
  5872                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5873                                  ;
  5874                                  ;-----------------------------------------------------------------------------------------------------------------------
  5875                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5876                                                          push    esi                                             ;
  5877                                                          push    edi                                             ;
  5878                                  ;
  5879                                  ;       Update the source address if a parameter is given.
  5880                                  ;
  5881                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5882                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5883                                                          call    ConTakeToken                                    ;take first param as token
  5884                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5885                                                          je      .10                                             ;no, branch
  5886                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5887                                  
  5888                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5889                                  
  5890                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5891                                  ;
  5892                                  ;       Setup source address and row count.
  5893                                  ;
  5894                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5895                                                          xor     ecx,ecx                                         ;zero register
  5896                                                          mov     cl,16                                           ;row count
  5897                                  ;
  5898                                  ;       Start the row with the source address in hexadecimal.
  5899                                  ;
  5900                                  .20                     push    ecx                                             ;save remaining rows
  5901                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5902                                                          mov     edx,edi                                         ;output buffer address
  5903                                                          mov     ecx,esi                                         ;console memory address
  5904                                  
  5905                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5906                                  
  5907                                                          add     edi,8                                           ;end of memory addr hexnum
  5908                                                          mov     al,' '                                          ;ascii space
  5909                                                          stosb                                                   ;store delimiter
  5910                                  ;
  5911                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5912                                  ;
  5913                                                          xor     ecx,ecx                                         ;zero register
  5914                                                          mov     cl,16                                           ;loop count
  5915                                  .30                     push    ecx                                             ;save loop count
  5916                                                          lodsb                                                   ;memory byte
  5917                                                          mov     ah,al                                           ;memory byte
  5918                                                          shr     al,4                                            ;high-order in bits 3-0
  5919                                                          or      al,30h                                          ;apply ascii numeric zone
  5920                                                          cmp     al,3ah                                          ;numeric range?
  5921                                                          jb      .40                                             ;yes, skip ahead
  5922                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5923                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5924                                                          mov     al,ah                                           ;low-order in bits 3-0
  5925                                                          and     al,0fh                                          ;mask out high-order bits
  5926                                                          or      al,30h                                          ;apply ascii numeric zone
  5927                                                          cmp     al,3ah                                          ;numeric range?
  5928                                                          jb      .50                                             ;yes, skip ahead
  5929                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5930                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5931                                                          mov     al,' '                                          ;ascii space
  5932                                                          stosb                                                   ;store ascii space delimiter
  5933                                                          pop     ecx                                             ;loop count
  5934                                                          loop    .30                                             ;next
  5935                                  ;
  5936                                  ;       Output printable ASCII character section for the row.
  5937                                  ;
  5938                                                          sub     esi,16                                          ;reset source pointer
  5939                                                          mov     cl,16                                           ;loop count
  5940                                  .60                     lodsb                                                   ;source byte
  5941                                                          cmp     al,32                                           ;printable? (low-range test)
  5942                                                          jb      .70                                             ;no, skip ahead
  5943                                                          cmp     al,128                                          ;printable? (high-range test)
  5944                                                          jb      .80                                             ;yes, skip ahead
  5945                                  .70                     mov     al,' '                                          ;display space instead of printable
  5946                                  .80                     stosb                                                   ;store printable ascii byte
  5947                                                          loop    .60                                             ;next source byte
  5948                                                          xor     al,al                                           ;nul-terminator
  5949                                                          stosb                                                   ;terminate output line
  5950                                  ;
  5951                                  ;       Display constructed output buffer and newline.
  5952                                  ;
  5953                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5954                                                          putConsoleString czNewLine                              ;display new line
  5955                                  ;
  5956                                  ;       Repeat until all lines displayed and preserve source address.
  5957                                  ;
  5958                                                          pop     ecx                                             ;remaining rows
  5959                                                          loop    .20                                             ;next row
  5960                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5961                                                          pop     edi                                             ;restore regs
  5962                                                          pop     esi                                             ;
  5963                                                          pop     ebx                                             ;
  5964                                                          ret                                                     ;return
  5965                                  ;-----------------------------------------------------------------------------------------------------------------------
  5966                                  ;
  5967                                  ;       Routine:        ConMinute
  5968                                  ;
  5969                                  ;       Description:    This routine Handles the MINUTE command.
  5970                                  ;
  5971                                  ;-----------------------------------------------------------------------------------------------------------------------
  5972                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5973                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5974                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5975                                                          putConsoleString  czNewLine                             ;write newline to console
  5976                                                          ret                                                     ;return
  5977                                  ;-----------------------------------------------------------------------------------------------------------------------
  5978                                  ;
  5979                                  ;       Routine:        ConMonth
  5980                                  ;
  5981                                  ;       Description:    This routine Handles the MONTH command.
  5982                                  ;
  5983                                  ;-----------------------------------------------------------------------------------------------------------------------
  5984                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5985                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5986                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5987                                                          putConsoleString  czNewLine                             ;write newline to console
  5988                                                          ret                                                     ;return
  5989                                  ;-----------------------------------------------------------------------------------------------------------------------
  5990                                  ;
  5991                                  ;       Routine:        ConMonthName
  5992                                  ;
  5993                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5994                                  ;
  5995                                  ;-----------------------------------------------------------------------------------------------------------------------
  5996                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5997                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5998                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5999                                                          putConsoleString   czNewLine                            ;write newline to console
  6000                                                          ret                                                     ;return
  6001                                  ;-----------------------------------------------------------------------------------------------------------------------
  6002                                  ;
  6003                                  ;       Routine:        ConPCIProbe
  6004                                  ;
  6005                                  ;       Description:    This routine handles the PCIProbe command.
  6006                                  ;
  6007                                  ;-----------------------------------------------------------------------------------------------------------------------
  6008                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  6009                                  ;
  6010                                  ;       Initialize variables.
  6011                                  ;       Construct PCI selector.
  6012                                  ;       Read PCI configuration data.
  6013                                  ;
  6014                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  6015                                                          call    ConInitPCIContext                               ;initialize PCI struct
  6016                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  6017                                                          call    ConReadPCIConfigData                            ;read the configuration data
  6018                                  ;
  6019                                  ;       Interpret PCI data value and display finding.
  6020                                  ;
  6021                                                          cmp     eax,-1                                          ;function defined?
  6022                                                          jne     .20                                             ;yes, branch
  6023                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  6024                                                          je      .40                                             ;yes, skip to next device
  6025                                                          jmp     short .30                                       ;no, skip to next function
  6026                                  ;
  6027                                  ;       Build PCI identifying string.
  6028                                  ;       Write identifying string to console.
  6029                                  ;       Determine the vendor and chip.
  6030                                  ;       Write vendor and chip to console.
  6031                                  ;
  6032                                  .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6033                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6034                                                          call    ConInterpretPCIData                             ;update flags based on data
  6035                                  
  6036                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6037                                                          putConsoleString czSpace                                ;space delimiter
  6038                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6039                                                          putConsoleString czSpace                                ;space delimiter
  6040                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6041                                                          putConsoleString czNewLine                              ;display new line
  6042                                  ;
  6043                                  ;       Next function.
  6044                                  ;
  6045                                  .30                     call    ConNextPCIFunction                              ;next function
  6046                                                          jb      .10                                             ;continue if no overflow
  6047                                  ;
  6048                                  ;       Next device, bus.
  6049                                  ;
  6050                                  .40                     call    ConNextPCIDevice                                ;next device, bus
  6051                                                          jb      .10                                             ;continue if no overflow
  6052                                  ;
  6053                                  ;       Restore and return.
  6054                                  ;
  6055                                                          pop     ebx                                             ;restore non-volatile regs
  6056                                                          ret                                                     ;return
  6057                                  ;-----------------------------------------------------------------------------------------------------------------------
  6058                                  ;
  6059                                  ;       Routine:        ConInitPCIContext
  6060                                  ;
  6061                                  ;       Description:    This routine initializes a PCI structure.
  6062                                  ;
  6063                                  ;       In:             DS:EBX  PCI structure address
  6064                                  ;
  6065                                  ;-----------------------------------------------------------------------------------------------------------------------
  6066                                  ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  6067                                                          push    edi                                             ;
  6068                                                          push    es                                              ;
  6069                                  ;
  6070                                  ;       Zero context.
  6071                                  ;
  6072                                                          push    ds                                              ;load data segment...
  6073                                                          pop     es                                              ;...into extra segment
  6074                                                          mov     edi,ebx                                         ;PCI structure offset
  6075                                                          mov     ecx,EPCILEN                                     ;PCI structure length
  6076                                                          xor     al,al                                           ;zero
  6077                                                          cld                                                     ;forward strings
  6078                                                          rep     stosb                                           ;zero structure members
  6079                                  ;
  6080                                  ;       Restore and return.
  6081                                  ;
  6082                                                          pop     es                                              ;restore non-volatile regs
  6083                                                          pop     edi                                             ;
  6084                                                          pop     ecx                                             ;
  6085                                                          ret                                                     ;return
  6086                                  ;-----------------------------------------------------------------------------------------------------------------------
  6087                                  ;
  6088                                  ;       Routine:        ConBuildPCISelector
  6089                                  ;
  6090                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  6091                                  ;
  6092                                  ;       In:             DS:EBX  PCI structure address
  6093                                  ;
  6094                                  ;       Out:            EAX     bus, device, function, register selector
  6095                                  ;
  6096                                  ;-----------------------------------------------------------------------------------------------------------------------
  6097                                  ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  6098                                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  6099                                                          shl     dl,3                                            ;DL = dddd d000
  6100                                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  6101                                                          and     al,007h                                         ;AL = 0000 0fff
  6102                                                          or      al,dl                                           ;AL = dddd dfff
  6103                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  6104                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  6105                                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6106                                                          or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6107                                                          mov     [ebx+PCI.selector],eax                          ;set selector
  6108                                                          ret                                                     ;return
  6109                                  ;-----------------------------------------------------------------------------------------------------------------------
  6110                                  ;
  6111                                  ;       Routine:        ConReadPCIConfigData
  6112                                  ;
  6113                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  6114                                  ;
  6115                                  ;       In:             DS:EBX  PCI structure address
  6116                                  ;
  6117                                  ;       Out:            EAX     config data
  6118                                  ;
  6119                                  ;-----------------------------------------------------------------------------------------------------------------------
  6120                                  ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  6121                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  6122                                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  6123                                                          out     dx,eax                                          ;select bus, device, function, reg
  6124                                                          mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  6125                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  6126                                                          in      eax,dx                                          ;read register
  6127                                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  6128                                                          ret                                                     ;return
  6129                                  ;-----------------------------------------------------------------------------------------------------------------------
  6130                                  ;
  6131                                  ;       Routine:        ConBuildPCIIdent
  6132                                  ;
  6133                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  6134                                  ;                       Function code values.
  6135                                  ;
  6136                                  ;       In:             DS:EBX  PCI structure address
  6137                                  ;                       DS:EDX  output buffer address 999.99.9\0
  6138                                  ;
  6139                                  ;-----------------------------------------------------------------------------------------------------------------------
  6140                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  6141                                                          push    es                                              ;
  6142                                  ;
  6143                                  ;       Establish addressability
  6144                                  ;
  6145                                                          push    ds                                              ;load data segment...
  6146                                                          pop     es                                              ;...into extra segment reg
  6147                                  ;
  6148                                  ;       Build identifier string (bus.device.function)
  6149                                  ;
  6150                                                          mov     edi,edx                                         ;output buffer address
  6151                                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  6152                                                          xor     ah,ah                                           ;zero high-order dividend
  6153                                                          mov     cl,100                                          ;divisor (10^2)
  6154                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  6155                                                          or      al,30h                                          ;apply ASCII zone
  6156                                                          cld                                                     ;forward strings
  6157                                                          stosb                                                   ;store 100's digit
  6158                                                          mov     al,ah                                           ;bus MOD 100
  6159                                                          xor     ah,ah                                           ;zero high-order dividend
  6160                                                          mov     cl,10                                           ;divisor (10^1)
  6161                                                          div     cl                                              ;AL=10's, AH=1's
  6162                                                          or      ax,3030h                                        ;apply ASCII zone
  6163                                                          stosw                                                   ;store 10's and 1's
  6164                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6165                                                          stosb                                                   ;store delimiter
  6166                                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  6167                                                          xor     ah,ah                                           ;zero high order dividend
  6168                                                          mov     cl,10                                           ;divisor (10^1)
  6169                                                          div     cl                                              ;AL=10's, AH=1's
  6170                                                          or      ax,3030h                                        ;apply ASCII zone
  6171                                                          stosw                                                   ;store 10's and 1's
  6172                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6173                                                          stosb                                                   ;store delimiter
  6174                                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  6175                                                          or      al,30h                                          ;apply ASCII zone
  6176                                                          stosb                                                   ;store 1's
  6177                                                          xor     al,al                                           ;null terminator
  6178                                                          stosb                                                   ;store terminator
  6179                                  ;
  6180                                  ;       Restore and return.
  6181                                  ;
  6182                                                          pop     es                                              ;restore non-volatile regs
  6183                                                          pop     edi                                             ;
  6184                                                          ret                                                     ;return
  6185                                  ;-----------------------------------------------------------------------------------------------------------------------
  6186                                  ;
  6187                                  ;       Routine:        ConInterpretPCIData
  6188                                  ;
  6189                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  6190                                  ;
  6191                                  ;       In:             DS:EBX  PCI structure address
  6192                                  ;
  6193                                  ;-----------------------------------------------------------------------------------------------------------------------
  6194                                  ConInterpretPCIData     mov     eax,czApple
  6195                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  6196                                                          jne     .10                                             ;no, branch
  6197                                                          mov     edx,czUSBController
  6198                                                          cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  6199                                                          je      .40                                             ;yes, branch
  6200                                                          mov     edx,czOther                                     ;other
  6201                                                          jmp     .40                                             ;continue
  6202                                  .10                     mov     eax,czIntel                                     ;Intel
  6203                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  6204                                                          jne     .20                                             ;no, branch
  6205                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  6206                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  6207                                                          je      .40                                             ;yes, branch
  6208                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  6209                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  6210                                                          je      .40                                             ;yes, branch
  6211                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  6212                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  6213                                                          je      .40                                             ;yes, branch
  6214                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  6215                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  6216                                                          je      .40                                             ;yes, branch
  6217                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  6218                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  6219                                                          je      .40                                             ;yes, branch
  6220                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  6221                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  6222                                                          je      .40                                             ;yes, branch
  6223                                                          mov     edx,czOther                                     ;other
  6224                                                          jmp     .40                                             ;continue
  6225                                  .20                     mov     eax,czOracle                                    ;Oracle
  6226                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  6227                                                          jne     .30                                             ;no, branch
  6228                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  6229                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  6230                                                          je      .40                                             ;yes, branch
  6231                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  6232                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  6233                                                          je      .40                                             ;yes, branch
  6234                                                          mov     edx,czOther                                     ;other
  6235                                                          jmp     .40                                             ;continue
  6236                                  .30                     mov     eax,czOther                                     ;other
  6237                                                          mov     edx,czOther                                     ;other
  6238                                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  6239                                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  6240                                                          ret                                                     ;return
  6241                                  ;-----------------------------------------------------------------------------------------------------------------------
  6242                                  ;
  6243                                  ;       Routine:        ConNextPCIFunction
  6244                                  ;
  6245                                  ;       Description:    This routine increments the function of the device.
  6246                                  ;
  6247                                  ;       In:             DS:EBX  PCI structure address
  6248                                  ;
  6249                                  ;       Out:            CY      0 = overflow
  6250                                  ;                               1 = no overflow, continue
  6251                                  ;
  6252                                  ;-----------------------------------------------------------------------------------------------------------------------
  6253                                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  6254                                                          cmp     byte [ebx+PCI.function],8                       ;at limit?
  6255                                                          jb      .10                                             ;no, continue
  6256                                                          mov     byte [ebx+PCI.function],0                       ;zero function
  6257                                  .10                     ret                                                     ;return
  6258                                  ;-----------------------------------------------------------------------------------------------------------------------
  6259                                  ;
  6260                                  ;       Routine:        ConNextPCIDevice
  6261                                  ;
  6262                                  ;       Description:    This routine increments the device of the PCI across buses.
  6263                                  ;
  6264                                  ;       In:             DS:EBX  PCI structure address
  6265                                  ;
  6266                                  ;       Out:            CY      0 = overflow
  6267                                  ;                               1 = no overflow, continue
  6268                                  ;
  6269                                  ;-----------------------------------------------------------------------------------------------------------------------
  6270                                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  6271                                                          cmp     byte [ebx+PCI.device],32                        ;at limit?
  6272                                                          jb      .10                                             ;no, continue
  6273                                                          mov     byte [ebx+PCI.device],0                         ;zero device
  6274                                                          inc     byte [ebx+PCI.bus]                              ;next bus
  6275                                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  6276                                                          jb      .10                                             ;no, continue
  6277                                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  6278                                  .10                     ret                                                     ;return
  6279                                  ;-----------------------------------------------------------------------------------------------------------------------
  6280                                  ;
  6281                                  ;       Routine:        ConSecond
  6282                                  ;
  6283                                  ;       Description:    This routine Handles the SECOND command.
  6284                                  ;
  6285                                  ;-----------------------------------------------------------------------------------------------------------------------
  6286                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6287                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  6288                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6289                                                          putConsoleString  czNewLine                             ;write newline to console
  6290                                                          ret                                                     ;return
  6291                                  ;-----------------------------------------------------------------------------------------------------------------------
  6292                                  ;
  6293                                  ;       Routine:        ConTime
  6294                                  ;
  6295                                  ;       Description:    This routine Handles the TIME command.
  6296                                  ;
  6297                                  ;-----------------------------------------------------------------------------------------------------------------------
  6298                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6299                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6300                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6301                                                          putConsoleString  czNewLine                             ;write newline to console
  6302                                                          ret                                                     ;return
  6303                                  ;-----------------------------------------------------------------------------------------------------------------------
  6304                                  ;
  6305                                  ;       Routine:        ConVersion
  6306                                  ;
  6307                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6308                                  ;
  6309                                  ;-----------------------------------------------------------------------------------------------------------------------
  6310                                  ConVersion              putConsoleString czTitle                                ;display version message
  6311                                                          ret                                                     ;return
  6312                                  ;-----------------------------------------------------------------------------------------------------------------------
  6313                                  ;
  6314                                  ;       Routine:        ConWeekday
  6315                                  ;
  6316                                  ;       Description:    This routine handles the WEEKDAY command.
  6317                                  ;
  6318                                  ;-----------------------------------------------------------------------------------------------------------------------
  6319                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6320                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6321                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6322                                                          putConsoleString  czNewLine                             ;write newline to console
  6323                                                          ret                                                     ;return
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325                                  ;
  6326                                  ;       Routine:        ConWeekdayName
  6327                                  ;
  6328                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6329                                  ;
  6330                                  ;-----------------------------------------------------------------------------------------------------------------------
  6331                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6332                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6333                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6334                                                          putConsoleString     czNewLine                                  ;write newline to console
  6335                                                          ret                                                             ;return
  6336                                  ;-----------------------------------------------------------------------------------------------------------------------
  6337                                  ;
  6338                                  ;       Routine:        ConYear
  6339                                  ;
  6340                                  ;       Description:    This routine Handles the YEAR command.
  6341                                  ;
  6342                                  ;-----------------------------------------------------------------------------------------------------------------------
  6343                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6344                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6345                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6346                                                          putConsoleString  czNewLine                             ;write newline to console
  6347                                                          ret                                                     ;return
  6348                                  ;-----------------------------------------------------------------------------------------------------------------------
  6349                                  ;
  6350                                  ;       Routine:        ConYearIsLeap
  6351                                  ;
  6352                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6353                                  ;
  6354                                  ;-----------------------------------------------------------------------------------------------------------------------
  6355                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6356                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6357                                  
  6358                                                          jecxz   .10                                             ;branch if not leap
  6359                                  
  6360                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6361                                  
  6362                                                          jmp     .20                                             ;continue
  6363                                  
  6364                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6365                                  .20                     ret                                                     ;return
  6366                                  ;-----------------------------------------------------------------------------------------------------------------------
  6367                                  ;
  6368                                  ;       Tables
  6369                                  ;
  6370                                  ;-----------------------------------------------------------------------------------------------------------------------
  6371                                                                                                                  ;---------------------------------------
  6372                                                                                                                  ;  Command Jump Table
  6373                                                                                                                  ;---------------------------------------
  6374                                  tConJmpTbl              equ     $                                               ;command jump table
  6375                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6376                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6377                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6378                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6379                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  6380                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  6381                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6382                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6383                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  6384                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  6385                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  6386                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  6387                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6388                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  6389                                                          dd      ConDate         - ConCode                       ;date command routine offset
  6390                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  6391                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6392                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6393                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6394                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6395                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6396                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6397                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6398                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6399                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6400                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6401                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6402                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6403                                                                                                                  ;---------------------------------------
  6404                                                                                                                  ;  Command Name Table
  6405                                                                                                                  ;---------------------------------------
  6406                                  tConCmdTbl              equ     $                                               ;command name table
  6407                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6408                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6409                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6410                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6411                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6412                                                          db      8,"VERSION",0                                   ;version command
  6413                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6414                                                          db      7,"MALLOC",0                                    ;malloc command
  6415                                                          db      7,"MEMORY",0                                    ;memory command
  6416                                                          db      7,"MINUTE",0                                    ;minute command
  6417                                                          db      7,"SECOND",0                                    ;second command
  6418                                                          db      6,"CLEAR",0                                     ;clear command
  6419                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6420                                                          db      6,"MONTH",0                                     ;month command
  6421                                                          db      5,"DATE",0                                      ;date command
  6422                                                          db      5,"EXIT",0                                      ;exit command
  6423                                                          db      5,"FREE",0                                      ;free command
  6424                                                          db      5,"HOUR",0                                      ;hour command
  6425                                                          db      5,"INT6",0                                      ;int6 command
  6426                                                          db      5,"QUIT",0                                      ;quit command
  6427                                                          db      5,"TIME",0                                      ;time command
  6428                                                          db      5,"YEAR",0                                      ;year command
  6429                                                          db      4,"CLS",0                                       ;cls command
  6430                                                          db      4,"DAY",0                                       ;day command
  6431                                                          db      4,"MEM",0                                       ;mem command
  6432                                                          db      4,"VER",0                                       ;ver command
  6433                                                          db      0                                               ;end of table
  6434                                  ;-----------------------------------------------------------------------------------------------------------------------
  6435                                  ;
  6436                                  ;       Constants
  6437                                  ;
  6438                                  ;-----------------------------------------------------------------------------------------------------------------------
  6439                                  czApple                 db      "Apple",0                                       ;vendor name string
  6440                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6441                                  czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  6442                                  czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6443                                  czEthernetDeviceVendor  db      " Device: ",0                                   ;PCI device label
  6444                                  czEthernetIRQ           db      " IRQ:    ",0                                   ;ethernet IRQ
  6445                                  czEthernetMAC           db      " MAC Address:  ",0                             ;MAC address
  6446                                  czEthernetMemoryAddr    db      "     MMIO:     ",0                             ;ethernet I/O memory address
  6447                                  czEthernetPort          db      " Port:   ",0                                   ;ethernet I/O port address
  6448                                  czEthernetSelector      db      " PCI Selector: ",0                             ;PCI selector label
  6449                                  czEthernetStatusCommand db      " Status: ",0                                   ;PCI status label
  6450                                  czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  6451                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6452                                  czKB                    db      "KB",0                                          ;Kilobytes
  6453                                  czNewLine               db      13,10,0                                         ;new line string
  6454                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6455                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6456                                  czOther                 db      "Other",0                                       ;default name string
  6457                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6458                                  czPeriod                db      ".",0                                           ;period delimiter
  6459                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6460                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6461                                  czPrompt                db      ":",0                                           ;prompt string
  6462                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6463                                  czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  6464                                  czSpace                 db      " ",0                                           ;space delimiter
  6465                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6466                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6467                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6468                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6469                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6470                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6471                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6472                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6473                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6474                                  %endif
  6475                                  %ifdef BUILDDISK
  6476                                  ;-----------------------------------------------------------------------------------------------------------------------
  6477                                  ;
  6478                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6479                                  ;
  6480                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6481                                  ;
  6482                                  ;-----------------------------------------------------------------------------------------------------------------------
  6483                                  section                 unused                                                  ;unused disk space
  6484                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6485                                  %endif
  6486                                  ;=======================================================================================================================
  6487                                  ;
  6488                                  ;       End of Program Code
  6489                                  ;
  6490                                  ;=======================================================================================================================
